2015-04-06  Koichi Arakawa  <arakawa@pp.iij4u.or.jp>  (tiny change)

	* w32proc.c (w32_executable_type): Look for the DLL name in the
	correct section.  This avoids segfaults with some executables.
	(Bug#20264)

2015-04-04  Jan Djärv  <jan.h.d@swipnet.se>

	* xselect.c (x_reply_selection_request)
	(receive_incremental_selection): Call set_property_change_object
	inside block_input.
	(wait_for_property_change): Move set property_change_reply(_object)
	outside of this function (Bug#16737).
	(set_property_change_object): New function.

2015-04-03  Jan Djärv  <jan.h.d@swipnet.se>

	* xterm.c (handle_one_xevent): Always redraw tool tips on
	MapNotify.  Update tool tip frame sizes on ConfigureNotify.

2015-03-31  Eli Zaretskii  <eliz@gnu.org>

	* keyboard.c (read_key_sequence): Don't let
	this_single_command_key_start become negative.  (Bug#20223)

2015-03-29  Jan Djärv  <jan.h.d@swipnet.se>

	* gtkutil.c (xg_display_open):
	* xterm.c (x_display_ok, x_term_init): Block SIGIO when opening
	a display (Bug#19175).

2015-03-29  Martin Rudalics  <rudalics@gmx.at>

	* gtkutil.c (update_theme_scrollbar_width): Don't round up
	scroll bar width with GTK3 (Bug#20182).

2015-03-28  Jan Djärv  <jan.h.d@swipnet.se>

	* xsmfns.c (smc_save_yourself_CB): Return if Vinvocation_name or
	user_login_name are not strings.

2015-03-28  Eli Zaretskii  <eliz@gnu.org>

	* w32.c (sys_connect): Fix a mistake in previous commit that broke
	blocking connections.  (Bug#20159)

2015-03-27  Paul Eggert  <eggert@cs.ucla.edu>

	Avoid some core dumps in X session management
	Derived from a bug report by Nicolas Richard in:
	https://bugs.gnu.org/20191#20
	* xsmfns.c (smc_save_yourself_CB): Don't dump core if
	invocation-name is not a string.  Initialize user-login-name if it
	is not already initialized, and don't dump core if it is not a
	string.
	(create_client_leader_window): Don't dump core if x-resource-name
	and x-resource-class are not both strings.
	(x_session_initialize): Don't dump core if x-session-previous-id,
	invocation-directory, and invocation-name are not strings.

	Port user-login-name initialization to Qnil == 0
	Derived from a bug report by Nicolas Richard in:
	https://bugs.gnu.org/20191#20
	* editfns.c (Fuser_login_name, Fuser_real_login_name)
	(syms_of_editfns): Don't rely on all-bits-zero being an Elisp integer,
	as this is no longer true now that Qnil == 0.

	Assume !BROKEN_NON_BLOCKING_CONNECT
	From a suggestion by Eli Zaretskii in:
	https://lists.gnu.org/r/emacs-devel/2015-03/msg00824.html
	* process.c (NON_BLOCKING_CONNECT): Simplify by assuming that
	BROKEN_NON_BLOCKING_CONNECT is not defined.
	(SELECT_CAN_DO_WRITE_MASK): Remove, and assume it's now true.

2015-03-27  Eli Zaretskii  <eliz@gnu.org>

	* lread.c (substitute_object_recurse): For sub-char-tables, start
	the recursive SUBSTITUTE loop from index of 2, to skip the
	non-Lisp members of the sub-char-table.  See the discussion at
	https://lists.gnu.org/r/emacs-devel/2015-03/msg00520.html
	for the details.

	Support non-blocking connect on MS-Windows.
	Based on ideas from Kim F. Storm <storm@cua.dk>, see
	https://lists.gnu.org/r/emacs-devel/2006-12/msg00873.html.

	* w32proc.c (reader_thread): If the FILE_CONNECT flag is set, call
	'_sys_wait_connect'.  If it returns STATUS_CONNECT_FAILED, exit
	the thread with code 2.
	(sys_select): Support 'wfds' in addition to 'rfds'.  If a
	descriptor in 'wfds' has its bit set, but the corresponding
	fd_info member doesn't have its FILE_CONNECT flag set, ignore the
	descriptor.  Otherwise, acknowledge a successful non-blocking
	connect by resetting the FILE_CONNECT flag and setting cp->status
	to STATUS_READ_ACKNOWLEDGED.  (Bug#20159)

	* w32.h (STATUS_CONNECT_FAILED): New enumeration value.
	(struct _child_process): New member 'errcode'.
	(FILE_CONNECT): New flag.
	(_sys_wait_connect): Add prototype.

	* w32.c (pfn_WSAEnumNetworkEvents): New function pointer.
	(init_winsock): Load WSAEnumNetworkEvents from winsock DLL.
	(set_errno): Map WSAEWOULDBLOCK and WSAENOTCONN.
	(sys_connect): Support non-blocking 'connect' calls by setting the
	FILE_CONNECT flag in the fd_info member and returning EINPROGRESS.
	(_sys_read_ahead): Add debug message if this function is called
	for a descriptor that waits for a non-blocking connect to complete.
	(_sys_wait_connect): New function.
	(sys_read): Support STATUS_CONNECT_FAILED.  Return the error code
	recorded by _sys_wait_connect when the non-blocking connect
	failed.  Don't call WSAGetLastError before a call to set_errno had
	a chance to use its value, since WSAGetLastError clears the last
	error.

2015-03-25  Stefan Monnier  <monnier@iro.umontreal.ca>

	* editfns.c (save_excursion_save): Don't save the mark.
	(save_excursion_restore): Don't restore the mark.
	(Fsave_excursion): Fix docstring accordingly.

2015-03-24  Paul Eggert  <eggert@cs.ucla.edu>

	Fix minor ldexp issues
	* floatfns.c (Fldexp): Require 2 args.  Avoid undefined behavior
	if the exponent is out of 'int' range.  Improve documentation.
	(Bug#20185)

2015-03-24  Daniel Colascione  <dancol@dancol.org>

	* process.c (Fprocess_running_child_p): Return number identifier of
	the foreground process group if we know it.

2015-03-23  Paul Eggert  <eggert@cs.ucla.edu>

	Minor refactoring of new Fmake_process code
	* process.c (Fmake_process): Refactor to avoid call to Flength, to
	avoid cast to 'char **', and to reduce indenting and reuse of locals.

2015-03-23  Daiki Ueno  <ueno@gnu.org>

	* process.c (Fmake_process): New function.
	(create_process, create_pty): Check p->pty_flag instead of
	Vprocess_connection_type.
	(syms_of_process): Register QCcommand, QCconnection_type, Qpty,
	Qpipe, and Smake_process.  Unregister Sstart_process.

2015-03-22  Jan Djärv  <jan.h.d@swipnet.se>

	* fontset.c (fontset_pattern_regexp): Replace + 1 with + 3 for
	regexsize (Bug#20156).

2015-03-21  Eli Zaretskii  <eliz@gnu.org>

	* emacs.c (synchronize_locale) [WINDOWSNT]: Ignore 'category' and
	always use LC_ALL instead.  Fixes problems with setting
	system-time-locale to something non-default.

2015-03-18  Glenn Morris  <rgm@gnu.org>

	* frame.h (x_set_bitmap_icon): Don't set the icon if icon-type is
	nil/not present in the parameter alist.  (Bug#19680)

2015-03-18  Stefan Monnier  <monnier@iro.umontreal.ca>

	* alloc.c (purecopy): Handle hash-tables.

2015-03-16  Stefan Monnier  <monnier@iro.umontreal.ca>

	* minibuf.c (Fread_buffer): Add `predicate' argument.
	* callint.c (Fcall_interactively): Adjust calls accordingly.

2015-03-15  Eli Zaretskii  <eliz@gnu.org>

	* xdisp.c (handle_invisible_prop): Fix up it->position even when
	we are going to load overlays at the beginning of the invisible text.
	(setup_for_ellipsis): Reset the ignore_overlay_strings_at_pos_p
	flag also here.
	(next_overlay_string): Set the overlay_strings_at_end_processed_p
	flag only if the overlays just processed were actually loaded at EOB.

2015-03-14  Daniel Colascione  <dancol@dancol.org>

	* emacs.c (standard_args): Add --no-x-resources.
	(usage_message): Document that -Q implies --no-x-resources.

2015-03-13  Paul Eggert  <eggert@cs.ucla.edu>

	* frame.c (x_get_resource_string) [!USE_GTK]: Don't define.

	* editfns.c, systime.h (mktime_z) [!HAVE_TZALLOC]: Now static.

2015-03-12  Eli Zaretskii  <eliz@gnu.org>

	* w32font.c (font_supported_scripts): Add subranges for Latin
	Supplement, Latin Extended-A/B, Vai, Supplemental Punctuation, Tai
	Le, Buginese, Yijing Hexagrams, Ancient Greek Numbers, Tai Xuan
	Jing, Counting Rods, Sundanese, Lepcha, Ol Chiki, Saurashtra,
	Kayah Li, Rejang, Ancient Symbols, Phistos Disc, Carian, Lycian,
	Lydian, Dominoe Tiles, and Mahjong Tiles.  Break the Mathematical
	Alphanumeric Symbols into several "scripts" like fontset.el does.
	(Bug#19993)
	(syms_of_w32font): DEFSYM all the new script symbols.

2015-03-07  Eli Zaretskii  <eliz@gnu.org>

	* w32fns.c <ImmReleaseContext_Proc, ImmSetCompositionWindow_Proc>:
	Fix typedefs to be consistent with the corresponding w32 API
	signatures.
	(w32_wnd_proc) <WM_IME_STARTCOMPOSITION>: Don't invoke
	DefWindowProc if we successfully handled the message, as doing so
	causes problems in displaying selection dialogs.  (Bug#11732)

2015-03-05  Paul Eggert  <eggert@cs.ucla.edu>

	Work around x86 glibc backtrace bug
	* sysdep.c (emacs_backtrace): Don't dump core on x86.
	(Bug#19959)

2015-03-05  Eli Zaretskii  <eliz@gnu.org>

	* keyboard.c (make_lispy_position): When the click is on the
	right-side vertical scroll bar, pass the rightmost X coordinate to
	buffer_posn_from_coords, so that the returned text position
	reflects the closest point to the click.  Fixes region extension
	when mouse moves outside the Emacs frame that has scroll bars on
	the right.

2015-03-04  Martin Rudalics  <rudalics@gmx.at>

	* frame.c (x_set_font): Try to keep frame height and width
	unchanged if tool bar size changes with new font.

2015-03-03  Eli Zaretskii  <eliz@gnu.org>

	* search.c (find_newline): Avoid assertion violations in
	CHAR_TO_BYTE when a portion of the buffer was deleted and we look
	for newlines near the end of the buffer.  This happens in Rmail
	when JIT font-lock fontifies a newly displayed portion of the
	buffer.

2015-03-03  Eli Zaretskii  <eliz@gnu.org>

	* w32fns.c (Fw32__menu_bar_in_use): New internal function.
	(Bug#19925)

2015-03-03  Glenn Morris  <rgm@gnu.org>

	* fileio.c (Fmake_temp_name): Doc tweaks.  (Bug#19858)

2015-03-03  Eli Zaretskii  <eliz@gnu.org>

	* menu.c (Fx_popup_menu) [HAVE_X_WINDOWS]: Call
	mouse_position_for_popup only for X frames.  (Bug#19862)

2015-03-03  Eli Zaretskii  <eliz@gnu.org>

	* buffer.c (syms_of_buffer): Doc fix.  (Bug#19841)

2015-03-03  Eli Zaretskii  <eliz@gnu.org>

	* xfaces.c (map_tty_color): Use assoc_no_quit instead of
	assq_no_quit to fetch color definition by its string name.
	(Bug#19802)

2015-03-03  Eli Zaretskii  <eliz@gnu.org>

	* xdisp.c (move_it_in_display_line_to): Handle the case where the
	last character of a screen line is whitespace, and we are under
	word-wrap with overflow-newline-into-fringe turned on.
	(Bug#19769)

2015-03-03  Eli Zaretskii  <eliz@gnu.org>

	* xdisp.c (handle_stop, handle_single_display_spec)
	(next-element_from_image): Don't reset the
	ignore_overlay_strings_at_pos_p flag here.
	(next_element_from_buffer): Reset ignore_overlay_strings_at_pos_p
	here.
	(next_overlay_string): Set ignore_overlay_strings_at_pos_p here,
	after we've exhausted all the overlay strings at the current
	position.  (Bug#19307)

2015-03-03  Eli Zaretskii  <eliz@gnu.org>

	* xdisp.c (set_iterator_to_next): Set value of stop_charpos
	according to the object we are about to resume iterating.
	(Bug#19307)

	* dispnew.c (adjust_glyph_matrix): Set the update_mode_line flag
	of the window whose current glyph matrix was resized, which
	disables the mode-line row as side effect.

	* xdisp.c (redisplay_window): Don't avoid redisplay of a window
	whose update_mode_line flag is set.  (Bug#19721)

2015-03-03  Eli Zaretskii  <eliz@gnu.org>

	* dispextern.h (FACE_FOR_CHAR): Fix the commentary.

2015-03-03  Daniel Colascione  <dancol@dancol.org>

	* alloc.c (syms_of_alloc): Rename `gc-precise-p' to `gc-precise'.

2015-03-03  Paul Eggert  <eggert@cs.ucla.edu>

	* alloc.c (run_finalizers): Omit unused local.
	Also, redo newly-added code as per usual Emacs style.

2015-03-03  Martin Rudalics  <rudalics@gmx.at>

	* frame.c (adjust_frame_size): If the pixel sizes remain
	unchanged but the number of lines or columns of the frame
	changes, run `window--pixel-to-total' (Bug#19972).
	(Qwindow_pixel_to_total): DEFSYM it.

2015-03-03  Daniel Colascione  <dancol@dancol.org>

	* print.c (print_object): Print whether a finalizer has
	been called.

	* data.c (Ftype_of): Make `type-of' work with finalizers.
	(syms_of_data): Register Qfinalizer.

2015-03-02  Daniel Colascione  <dancol@dancol.org>

	* print.c (print_object): Print finalizers.

	* alloc.c:
	(finalizers, doomed_finalizers): New variables.
	(init_finalizer_list, finalizer_insert, unchain_finalizer)
	(mark_finalizer_list, queue_doomed_finalizers)
	(run_finalizer_handler, run_finalizer_function, run_finalizers):
	New functions.
	(garbage_collect_1, mark_object, sweep_misc)
	(init_alloc_once, syms_of_alloc): Support finalizers.
	(gc-precise-p): New Lisp variable.

	* lisp.h (Lisp_Misc_Type): New value Lisp_Misc_Finalizer.
	(FINALIZERP, XFINALIZER): New functions.
	(Lisp_Finalizer): New structure.

2015-02-28  Paul Eggert  <eggert@cs.ucla.edu>

	* character.c (alphabeticp, decimalnump): Avoid undefined behavior
	if CATEGORY is not an integer, or is an integer out of
	unicode_category_t range.

2015-02-28  Martin Rudalics  <rudalics@gmx.at>

	* frame.c (make_initial_frame, Fmake_terminal_frame):
	Set can_x_set_window_size and after_make_frame (Bug#19962).

2015-02-28  Eli Zaretskii  <eliz@gnu.org>

	* character.c (alphabeticp, decimalnump): New functions.
	* character.h (alphabeticp, decimalnump): Add prototypes.

	* regex.c (ISALNUM, ISALPHA): Check Unicode character properties
	for multibyte characters by calling alphabeticp and decimalnump.
	(BIT_ALPHA, BIT_ALNUM): New bit masks.
	(re_wctype_to_bit): Return them when the class is RECC_ALPHA or
	RECC_ALNUM.
	(re_match_2_internal): Call ISALPHA and ISALNUM when appropriate.
	(Bug#19878)

2015-02-27  Jan Djärv  <jan.h.d@swipnet.se>

	* xterm.h (x_real_pos_and_offsets): Take outer_border as arg also.

	* xmenu.c (x_menu_show): Adjust for new arg to x_real_pos_and_offsets.

	* xfns.c (x_real_pos_and_offsets): Take outer_border as arg also.
	Initialize all args.  Get outer_border from window attributes.
	Fix typo for top_offset_y.
	(x_real_positions): Adjust for new arg to x_real_pos_and_offsets.
	(Fx_frame_geometry): Get outer_border also.  Use attrs.width/height.

2015-02-27  Mark Laws  <mdl@60hz.org>

	Support daemon mode on MS-Windows (bug#19688)
	* emacs.c <w32_daemon_event> [WINDOWSNT]: New global var.
	(main) [WINDOWSNT]: Initialize it to NULL.  Create the event to
	signal clients we are ready for connections.
	(Fdaemon_initialized): Use DAEMON_RUNNING.
	[WINDOWSNT]: MS-Windows specific code to signal clients we are
	ready for connections.

	* lisp.h (DAEMON_RUNNING): New macro, encapsulates Posix and
	MS-Windows conditions for running in daemon mode.

	* minibuf.c (read_minibuf): Use DAEMON_RUNNING.

	* keyboard.c (kbd_buffer_get_event): Use DAEMON_RUNNING.

	* dispnew.c (init_display) [WINDOWSNT]: Initialize frames/terminal
	even in daemon mode.

2015-02-26  Jan Djärv  <jan.h.d@swipnet.se>

	* xmenu.c (create_and_show_popup_menu): Call XTranslateCoordinates,
	dont use OUTER_TO_INNER macros.
	(x_menu_show): Call x_real_pos_and_offsets, don't use
	OUTER_TO_INNER macros.

2015-02-26  Eli Zaretskii  <eliz@gnu.org>

	* dispextern.h (FACE_FOR_CHAR): Fix the commentary.

2015-02-26  Hans Wennborg  <hwennborg@google.com>  (tiny change)

	* emacs.c (decode_env_path): Add parentheses around ternary
	operator to increase readability and pacify compiler warnings.

2015-02-26  Eli Zaretskii  <eliz@gnu.org>

	* w32.c (sys_readdir): Map ERROR_NOT_READY (as in "device not
	ready") to ENOENT.

2015-02-26  Paul Eggert  <eggert@cs.ucla.edu>

	* xfns.c (x_real_pos_and_offsets): Fix pointer signedness.

2015-02-25  Jan Djärv  <jan.h.d@swipnet.se>

	* xterm.h (struct x_output): Remove x_pixels_outer_diff,
	y_pixels_outer_diff, FRAME_OUTER_TO_INNER_DIFF_X,
	FRAME_OUTER_TO_INNER_DIFF_Y. Declare x_real_pos_and_offsets.

	* xmenu.c (create_and_show_popup_menu): Use XTranslateCoordinates
	instead of OUTER_TO_INNER_DIFF macros.

	* xfns.c (x_real_pos_and_offsets): New function, basically the code
	from x_real_positions.
	(x_real_positions): Call x_real_pos_and_offsets.
	(x_relative_mouse_position): Use XTranslateCoordinates instead of
	OUTER_TO_INNER_DIFF macros.
	(Fx_frame_geometry): Get offsets with x_real_pos_and_offsets,
	border from window attributes.  Adjust tool bar and menu widths.

	* w32fns.c (x_real_positions): Remove setting of x_pixels_diff,
	y_pixels_diff.

	* frame.h (struct frame): Remove x_pixels_diff, y_pixels_diff.

2015-02-25  Paul Eggert  <eggert@cs.ucla.edu>

	Backtrace after malloc arena is corrupted
	Without this change, if the malloc arena is corrupted and then
	'backtrace' is called, the backtrace can crash because 'backtrace'
	calls 'malloc'.  For more, please see:
	https://sourceware.org/ml/libc-alpha/2015-02/msg00678.html
	* emacs.c (main): Initialize tables used by 'backtrace'.
	* sysdep.c (emacs_backtrace): Document the newly used part of the API.

2015-02-22  Jan Djärv  <jan.h.d@swipnet.se>

	* nsfns.m (Fx_frame_geometry): New function.
	(syms_of_nsfns): Defsubr Sx_frame_geometry.

2015-02-22  Paul Eggert  <eggert@cs.ucla.edu>

	Spelling fixes
	* lisp.h (DEFINE_NON_NIL_Q_SYMBOL_MACROS):
	Rename from DEFINE_NONNIL_Q_SYMBOL_MACROS.  All uses changed.

2015-02-21  Eli Zaretskii  <eliz@gnu.org>

	* w32term.c (queue_notifications):
	* w32inevt.c (handle_file_notifications):
	* w32font.c (w32_enumfont_pattern_entity): Prefer 'Qfoo' to
	'intern ("foo")'.

2015-02-21  Paul Eggert  <eggert@cs.ucla.edu>

	Prefer 'Qfoo' to 'intern ("foo")'
	* buffer.c (syms_of_buffer):
	* bytecode.c (exec_byte_code):
	* callint.c (Fcall_interactively):
	* callproc.c (create_temp_file):
	* charset.c (define_charset_internal):
	* coding.c (syms_of_coding):
	* editfns.c (syms_of_editfns):
	* emacs.c (main):
	* fns.c (syms_of_fns):
	* frame.c (delete_frame, Fframe_parameters):
	* keyboard.c (syms_of_keyboard):
	* keymap.c (syms_of_keymap):
	* minibuf.c (read_minibuf, syms_of_minibuf):
	* nsfns.m (ns_cursor_type_to_lisp):
	* textprop.c (syms_of_textprop):
	* xdisp.c (Fformat_mode_line, syms_of_xdisp):
	* xfns.c (x_create_tip_frame, Fx_select_font):
	* xml.c (parse_region):
	Prefer constants like 'Qfoo' to calls like 'intern ("foo")'.
	* buffer.c (syms_of_buffer): OK to do (put 'erase-buffer 'disabled
	t) here now ...
	(keys_of_buffer): ... instead of here.
	* ftfont.c (syms_of_ftfont): Move DEFSYM of Qmono from here ...
	* xfns.c (syms_of_xfns): ... to here, since ftfont.c is more
	optional than xfns.c.

2015-02-20  Jan Djärv  <jan.h.d@swipnet.se>

	* emacs.c (terminate_due_to_signal): Move totally_unblock_input after
	setting fatal_error_in_progress, so gobble_input and *read_socket are
	not read if there are pending_signals.

2015-02-20  Paul Eggert  <eggert@cs.ucla.edu>

	Simplify binary I/O configuration
	* lread.c (Fload): Prefer FOPEN_TEXT and FOPEN_BINARY to #ifdef DOS_NT.
	* sysstdio.h: Add copyright notice.  Include <fcntl.h>.
	(FOPEN_BINARY, FOPEN_TEXT): New macros.
	* xfaces.c (Fx_load_color_file): Use FOPEN_TEXT, since POSIX
	doesn't guarantee that "t" will work.

2015-02-19  Eli Zaretskii  <eliz@gnu.org>

	* keyboard.c (read_char): Make sure this_single_command_key_start
	is in sync with this_command_key_count, around the call to
	input-method-function.  (Bug#19774)

2015-02-19  Fujii Hironori  <fujii.hironori@gmail.com>  (tiny change)

	* w32fns.c (w32_wnd_proc) <WM_IME_STARTCOMPOSITION>: Pass the
	message to DefWindowProc, after positioning the IME window, to
	trigger its display.  (Bug#11732)

2015-02-18  Eli Zaretskii  <eliz@gnu.org>

	* emacs.c (Fkill_emacs): Exit with specified exit code even if
	stdin is at EOF.  (Bug#19897)

2015-02-18  Oscar Fuentes <ofv@wanadoo.es>

	* keyboard.c (read_char): When there is an input method function,
	do not restore the echo area if a prefix argument is being
	introduced.  (Bug#19875)

2015-02-16  Kelly Dean  <kelly@prtime.org>

	* src/keyboard.c (timer_check_2): Fix incorrect comment.

2015-02-14  Martin Rudalics  <rudalics@gmx.at>

	* xterm.c (x_frame_normalize_before_maximize): Fix doc-string.
	Suggested by Alan Mackenzie <acm@muc.de>.

2015-02-14  Eli Zaretskii  <eliz@gnu.org>

	* menu.c (Fx_popup_menu) [HAVE_X_WINDOWS]: Call
	x_relative_mouse_position only for X frames.  (Bug#19862)

2015-02-13  Paul Eggert  <eggert@cs.ucla.edu>

	Better support for future plugins
	* lisp.h (DEFINE_LISP_SYMBOL): New macro, replacing and simplifying
	DEFINE_LISP_SYMBOL_BEGIN / DEFINE_LISP_SYMBOL_END.  All uses changed.
	(DEFINE_NONNIL_Q_SYMBOL_MACROS): New macro, defaulting to true.

2015-02-11  Martin Rudalics  <rudalics@gmx.at>

	* w32term.c (w32_read_socket): In SIZE_MAXIMIZED and
	SIZE_RESTORED cases correctly handle `maximized' value for the
	`fullscreen' parameter.  Don't use 'maximized' frame parameter
	any more.
	(w32fullscreen_hook): Include menu bar height when calculating
	new text height in FULLSCREEN_BOTH case.
	* xterm.c (do_ewmh_fullscreen): Handle transition from
	FULLSCREEN_BOTH to FULLSCREEN_MAXIMIZED when
	x_frame_normalize_before_maximize is set.

2015-02-10  Paul Eggert  <eggert@cs.ucla.edu>

	Use bool for boolean in xdisp.c
	* dispextern.h (display_prop_intangible_p, resize_mini_window)
	(pixel_to_glyph_coords, mark_window_display_accurate)
	(compute_display_string_pos, handle_tool_bar_click)
	(x_intersect_rectangles, clear_mouse_face, display_tty_menu_item):
	* lisp.h (setup_echo_area_for_printing, message_with_string)
	(pos_visible_p): Use bool for boolean.
	* xdisp.c: Use bool, true, false intstead of int, 1, 0.
	Remove unnecessary forward decls.
	(trace_move) [DEBUG_TRACE_MOVE]: Now static.
	(CHECK_IT, CHECK_WINDOW_END):
	Now an inline function that is always defined.
	(check_it) [0]:
	(check_window_end) [oGLYPH_DEBUG && ENABLE_CHECKING]:
	Remove; no longer needed.
	(handle_stop): Prefer (X && !Y) to (X ? !Y : 0).
	(get_overlay_strings): Omit unnecessary casts.
	(forward_to_next_line_start):
	(Ftool_bar_height):
	Prefer !BOOL to (BOOL ? 0 : 1).
	(next_element_function): New typedef.
	(get_next_element): Use it.  Now const.
	(IT_POS_VALID_AFTER_MOVE_P): Prefer !X || Y==0 to (X ? Y==0 : 1).
	(vmessage): Now ATTRIBUTE_FORMAT_PRINTF (1, 0), to pacify GCC 4.9.2
	(display_echo_area): Prefer BOOLEXPR to BOOLEXPR ? 1 : 0.
	(tool_bar_item_info): Simplify.
	(invisible_prop): Rename from invisible_p, since it doesn't
	return bool.  All callers changed.
	(x_produce_glyphs): Simplify.

2015-02-09  Paul Eggert  <eggert@cs.ucla.edu>

	Check for some overflows in vertical-motion
	* indent.c (window_column_x): New function.
	(Fvertical_motion): Use it to protect against integer overflow
	when computing column.  Prefer extract_float to doing things by hand.
	Avoid unnecessary casts.

	* xfont.c: Minor style fixes
	(xfont_list_pattern): Reindent to 80 cols and use Emacs-style comments.
	Redo loop so that less indentation is needed.

2015-02-09  Eli Zaretskii  <eliz@gnu.org>

	* indent.c (Fvertical_motion): Accept an additional argument
	CUR-COL and use it as the starting screen coordinate.
	* window.c (window_scroll_line_based, Fmove_to_window_line):
	All callers of vertical-motion changed.

2015-02-09  Dima Kogan  <dima@secretsauce.net>

	* font.c (font_score): Remove unused variable assignment.

2015-02-09  Dima Kogan  <dima@secretsauce.net>

	* xfaces.c (realize_basic_faces): Don't set Qscalable_fonts_allowed to
	t.
	* font.c (font_score): Try to find a font without scaling first,
	and only accept scalable fonts if we did not get a match (Bug#19117).

2015-02-09  Stefan Monnier  <monnier@iro.umontreal.ca>

	* keyboard.c (syms_of_keyboard): Use non-nil default value.

2015-02-09  Paul Eggert  <eggert@cs.ucla.edu>

	Use C99's INFINITY and NAN macros
	* lread.c: Include <math.h>.
	(string_to_number): Use INFINITY and NAN rather than rolling our own.
	This avoids some runtime diagnostics when building with
	gcc -fsanitize=undefined.

	Fix bidi_explicit_dir_char undefined behavior
	* bidi.c (bidi_explicit_dir_char): Avoid subscript error when
	argument is BIDI_EOB.  This can happen in bidi_level_of_next_char.

	Better distinguish infinite from invalid times
	* editfns.c (check_time_validity): New function.
	(decode_time_components): Return int, not bool.
	Return -1 (not 0) if the time is out of range.
	All callers changed.
	(lisp_time_struct, lisp_seconds_argument): Distinguish better
	between time overflow and invalid time values.

2015-02-08  Paul Eggert  <eggert@cs.ucla.edu>

	Minor tweaks to frame_size_history_add
	* frame.c (frame_size_history_add): Don't assume length fits in 'int'.
	Prefer XCAR and XCDR to Fcar and Fcdr when the arg is a cons.
	(Fframe_after_make_frame): Simplify.
	* gtkutil.c: Remove commented-out code.
	* xfns.c (Fx_create_frame): Fix indenting.

2015-02-08  Eli Zaretskii  <eliz@gnu.org>

	* frame.c (Fframe_parameter): Don't replace a non-nil value of
	foreground-color or background-color parameters with a nil value.
	(Bug#19802)

2015-02-08  Stefan Monnier  <monnier@iro.umontreal.ca>

	* data.c (Findirect_function): Like `symbol-function', don't signal an
	error for void functions any more.

2015-02-07  Martin Rudalics  <rudalics@gmx.at>

	* frame.c (frame_size_history_add): New function.
	(frame_inhibit_resize): Consider frame_inhibit_implied_resize
	only after frame's after_make_frame slot is true.
	Inhibit resizing fullwidth-/height frames in one direction only.
	Update frame_size_history.
	(adjust_frame_size): Call frame_size_history_add.
	(make_frame): Initalize after_make_frame slot.
	(Fmake_terminal_frame): Adjust adjust_frame_size call.
	(Fcan_run_window_configuration_change_hook): Rename to
	Fframe_after_make_frame.  Set after_make_frame slot.
	Return second argument.
	(x_set_frame_parameters): Postpone handling fullscreen parameter
	until after width and height parameters have been set.
	Apply width and height changes only if can_x_set_window_size is true.
	Update frame_size_history.
	(Qadjust_frame_size_1, Qadjust_frame_size_2)
	(Qadjust_frame_size_3, QEmacsFrameResize, Qframe_inhibit_resize)
	(Qx_set_fullscreen, Qx_check_fullscreen, Qx_set_window_size_1)
	(Qxg_frame_resized, Qxg_frame_set_char_size_1)
	(Qxg_frame_set_char_size_2, Qxg_frame_set_char_size_3)
	(Qxg_change_toolbar_position, Qx_net_wm_state)
	(Qx_handle_net_wm_state, Qtb_size_cb, Qupdate_frame_tool_bar)
	(Qfree_frame_tool_bar): New symbol for updating frame_size_history.
	(Qtip_frame, Qterminal_frame): New symbols.
	(Vframe_adjust_size_history): Rename to frame_size_history.
	* frame.h (struct frame):
	Rename can_run_window_configuration_change_hook slot to
	after_make_frame.
	(frame_size_history_add): Extern.
	* gtkutil.c (xg_frame_resized): Call frame_size_history_add.
	Don't set FRAME_PIXEL_WIDTH and FRAME_PIXEL_HEIGHT here.
	(xg_frame_set_char_size): Try to preserve the status of
	fullwidth/-height frames.  Call frame_size_history_add.
	(tb_size_cb, update_frame_tool_bar, free_frame_tool_bar)
	(xg_change_toolbar_position): Call frame_size_history_add.
	* w32fns.c (x_change_tool_bar_height): Handle frame's fullscreen
	status.
	(Fx_create_frame): Process fullscreen parameter after frame has
	been resized.
	(x_create_tip_frame): Pass Qtip_frame to adjust_frame_size.
	(Fx_frame_geometry): Don't pollute pure storage.
	* w32term.c (w32_read_socket): For WM_WINDOWPOSCHANGED,
	WM_ACTIVATE and WM_ACTIVATEAPP set frame's visibility before
	calling w32fullscreen_hook.  For WM_DISPLAYCHANGE call
	w32fullscreen_hook immediately.
	(x_fullscreen_adjust, x_check_fullscreen): Remove.
	(w32fullscreen_hook): Call change_frame_size just as with a
	"normal" frame resize operation.  Call do_pending_window_change.
	(x_set_window_size): Try to handle fullwidth and fullheight more
	accurately.  Don't rely on w32_enable_frame_resize_hack.
	(w32_enable_frame_resize_hack): Remove variable.
	* widget.c (EmacsFrameResize): Remove dead code.
	Call frame_size_history_add
	* window.c (run_window_configuration_change_hook):
	Check f->after_make_frame instead of
	f->can_run_window_configuration_change_hook.
	* xfns.c (x_change_tool_bar_height): Handle frame's fullscreen status.
	(Fx_create_frame): Process fullscreen parameter after frame has
	been resized.
	(Fx_frame_geometry): Don't pollute pure storage.
	* xterm.c (x_net_wm_state, x_handle_net_wm_state):
	Call frame_size_history_add.
	(do_ewmh_fullscreen): Handle x_frame_normalize_before_maximize.
	(x_check_fullscreen): Count in menubar when calling
	XResizeWindow.  Wait for ConfigureNotify event.
	Call frame_size_history_add.
	(x_set_window_size_1): Remove PIXELWISE argument.  Try to handle
	changing a fullheight frame's width or a fullwidth frame's
	height.  Call frame_size_history_add.
	(x_set_window_size): Simplify xg_frame_set_char_size and
	x_set_window_size_1 calls.
	(x_frame_normalize_before_maximize): New variable.

2015-02-07  Paul Eggert  <eggert@cs.ucla.edu>

	Remove no-longer-used cursor_in_echo_area code
	* dispnew.c (set_window_cursor_after_update, update_frame_1):
	Remove checks for negative cursor_in_echo_area, since this var is
	a boolean, and has been a boolean for some time.  Simplify.
	* dispnew.c (init_display):
	* xdisp.c (message3_nolog, vmessage): Use bool for boolean.

2015-02-05  Stefan Monnier  <monnier@iro.umontreal.ca>

	* eval.c (Ffunction): Handle the new (:documentation ...) form.
	(syms_of_eval): Declare `:documentation'.

2015-02-05  Martin Rudalics  <rudalics@gmx.at>

	* xdisp.c (Fwindow_text_pixel_size): Remove optional BUFFER
	argument added on 2015-02-01.

2015-02-04  Paul Eggert  <eggert@cs.ucla.edu>

	Remove no-longer-used two_byte_p calculations
	* dispextern.h (struct glyph_string): Remove member two_byte_p.
	All uses removed.
	* xdisp.c (get_glyph_face_and_encoding): Remove arg two_byte_p.
	All callers changed.

2015-02-03  Paul Eggert  <eggert@cs.ucla.edu>

	Omit unnecessary var if GTK or NS
	* frame.c, frame.h (frame_default_tool_bar_height) [USE_GTK||HAVE_NS]:
	Now a constant zero on these platforms.

2015-02-01  Martin Rudalics  <rudalics@gmx.at>

	* xdisp.c (Fwindow_text_pixel_size): Add optional argument BUFFER.

2015-01-31  Eli Zaretskii  <eliz@gnu.org>

	* coding.c (raw_text_coding_system_p): New function.

	* keyboard.c (read_decoded_event_from_main_queue): Use it when the
	keyboard coding-system is 'raw-text'.  (Bug#19532)

	* coding.h (raw_text_coding_system_p): Add prototype.

2015-01-31  Andreas Schwab  <schwab@linux-m68k.org>

	* Makefile.in (gl-stamp): Generate globals.h through the use of
	move-if-change.
	(globals.h): Replace with empty command.

2015-01-31  Eli Zaretskii  <eliz@gnu.org>

	* keyboard.c (kbd_buffer_store_event_hold): Ignore FOCUS_OUT_EVENT
	and ICONIFY_EVENT for the purposes of breaking while-no-input
	loops.  (Bug#19547)

	* dired.c (read_dirent): Correct the "MSDOS hacks" hack: the
	special code for errno = ENOENT or EACCES is needed for WINDOWSNT,
	not for MSDOS.

2015-01-31  Paul Eggert  <eggert@cs.ucla.edu>

	Simplify read_dirent's MSDOS hacks
	* dired.c (read_dirent): Simplify by removing the need for the
	DIR_ENTRY argument.  All callers changed.  This separates the
	MS-DOS idiosyncrasies better from the rest of the code.

2015-01-30  Eli Zaretskii  <eliz@gnu.org>

	* dired.c (read_dirent): Accept an additional argument
	FIRST_ENTRY.  If readdir fails with ENOENT or EACCES the first
	time it is called, report the error as if it happened in
	open_directory.
	(directory_files_internal, file_name_completion): Adjust callers
	or read_dirent.

2015-01-30  Paul Eggert  <eggert@cs.ucla.edu>

	Refactor calls to opendir for simplicity
	* dired.c (open_directory): Accept Lisp_Object, not char *, for
	dirname.  Signal an error if the open fails.  All callers changed.

2015-01-29  Paul Eggert  <eggert@cs.ucla.edu>

	Report readdir failures
	Previously, on non-MS-Windows platforms the code treated most
	readdir failures as EOF.  This was incorrect, e.g., when readdir
	fails with errno == EOVERFLOW.  Signal an error instead.
	* dired.c (read_dirent):
	New function, which signals an error when readdir fails.
	(directory_files_internal, file_name_completion): Use it.

2015-01-29  Eli Zaretskii  <eliz@gnu.org>

	Use bool for boolean in w32menu.c, w32font.c, w32uniscribe.c.
	* w32uniscribe.c (uniscribe_list, uniscribe_match): Use bool where
	appropriate.

	* w32font.c (struct font_callback_data, w32font_list_internal)
	(w32font_driver, w32font_match_internal): Use bool where appropriate.

	* w32menu.c (x_activate_menubar, set_frame_menubar)
	(w32_dialog_show, initialize_frame_menubar, w32_menu_show)
	(is_simple_dialog): Use bool where appropriate.

2015-01-28  Paul Eggert  <eggert@cs.ucla.edu>

	Use bool, not int, to track face changes
	* xfaces.c (face_change): Rename from face_change_count, and
	change from int to bool.  The var is now true (instead of nonzero)
	if attributes have changed; this is simpler.  All uses changed.
	(Bug#19698)

2015-01-28  Eli Zaretskii  <eliz@gnu.org>

	* dired.c (directory_files_internal, file_name_completion)
	[WINDOWSNT]: Signal an error when errno is set non-zero by
	'readdir', regardless of its value.

	* w32.c (sys_readdir): Set errno to ENOENT when the directory
	doesn't exist and to EACCES when it's not accessible to the
	current user.  Set errno to zero when FindNextFile exhausts the
	directory, so that callers don't interpret that as an error and
	don't signal a file-error.
	(open_unc_volume): Set errno to ENOENT if WNetOpenEnum fails.

	* dired.c (directory_files_internal) [WINDOWSNT]: If readdir
	returns NULL and errno is ENOTDIR, behave as if opendir failed to
	open the directory.  (Bug#19701)

	* w32.c (sys_readdir): If FindFirstFile fails because the
	directory doesn't exist, set errno to ENOTDIR.

2015-01-28  Jan Djärv  <jan.h.d@swipnet.se>

	* nsterm.m (drawRect:): Add block/unblock_input (Bug#19660).

2015-01-28  Paul Eggert  <eggert@cs.ucla.edu>

	Fix coding.c subscript error
	* coding.c (CODING_ISO_INVOKED_CHARSET):
	Avoid undefined behavior if CODING_ISO_INVOCATION returns negative.

2015-01-28  Eli Zaretskii  <eliz@gnu.org>

	* xdisp.c (produce_image_glyph): Fix display of images in R2L
	screen lines: prepend the new glyph to the ones already there
	instead of appending it.

	* w32fns.c (w32_set_title_bar_text): New function, including
	support for titles with non-ASCII characters outside of the
	current system codepage.
	(x_set_name, x_set_title): Use it.  (Bug#19590)

	* indent.c (Fvertical_motion): Return zero if we started from ZV
	and there's an overlay after-string there.  (Bug#19553)

	* emacs.c (usage_message): Fix the description of the -nl switch.
	(Bug#19542)

	* xdisp.c (move_it_to, try_cursor_movement): Don't use the window
	end information if the window_end_valid flag is unset.
	(try_window_id): If the call to display_line invalidated the
	window end information, give up the try_window_id optimization.
	(Bug#19511)

	* w32fns.c (Fx_server_version, Fx_server_vendor): Doc fix.
	* xfns.c (Fx_server_version, Fx_server_vendor): Doc fix.

	* emacs.c (syms_of_emacs) <system-configuration>: Doc fix.  (Bug#19502)

2015-01-28  Stefan Monnier  <monnier@iro.umontreal.ca>

	* lisp.mk (lisp): Add cl-preloaded.

2015-01-27  Paul Eggert  <eggert@cs.ucla.edu>

	Use bool for boolean in xfaces.c
	* dispextern.h: Adjust to signature changes.
	* font.c (font_at, font_range):
	* fontset.c (Finternal_char_font):
	* fringe.c (draw_fringe_bitmap_1):
	* xdisp.c (handle_face_prop, face_before_or_after_it_pos)
	(get_next_display_element, highlight_trailing_whitespace)
	(display_string, calc_line_height_property)
	(note_mode_line_or_margin_highlight, note_mouse_highlight):
	* xfaces.c (tty_suppress_bold_inverse_default_colors_p)
	(menu_face_changed_default, recompute_basic_faces)
	(Fbitmap_spec_p, parse_rgb_list, tty_lookup_color)
	(tty_defined_color, defined_color, face_color_gray_p)
	(face_color_supported_p, load_color2, load_face_colors)
	(Fx_list_fonts, LFACEP, push_named_merge_point)
	(resolve_face_name, lface_from_face_name_no_resolve)
	(lface_from_face_name, get_lface_attributes_no_remap)
	(get_lface_attributes, lface_fully_specified_p)
	(set_lface_from_font, merge_face_vectors, merge_named_face)
	(merge_face_ref, Finternal_make_lisp_face)
	(Finternal_lisp_face_p, Finternal_copy_lisp_face)
	(Finternal_set_lisp_face_attribute)
	(update_face_from_frame_parameter, set_font_frame_param)
	(face_boolean_x_resource_value)
	(Finternal_set_lisp_face_attribute_from_resource)
	(x_update_menu_appearance, Finternal_get_lisp_face_attribute)
	(Finternal_merge_in_global_face, Fface_font, face_attr_equal_p)
	(lface_equal_p, Finternal_lisp_face_equal_p)
	(Finternal_lisp_face_empty_p, lface_same_font_attributes_p)
	(Fcolor_distance, lookup_named_face, lookup_basic_face)
	(lookup_derived_face, Fface_attributes_as_vector)
	(x_supports_face_attributes_p, tty_supports_face_attributes_p)
	(Fdisplay_supports_face_attributes_p, realize_basic_faces)
	(realize_default_face, realize_named_face)
	(realize_non_ascii_face, realize_x_face, map_tty_color)
	(realize_tty_face, compute_char_face, face_at_buffer_position)
	(face_for_overlay_string, face_at_string_position):
	Use bool for boolean.
	* xfaces.c (set_lface_from_font):
	Return void, since callers never use the result.

2015-01-26  Andreas Schwab  <schwab@linux-m68k.org>

	* image.c (lookup_pixel_color): Reorder conditions that are
	written backwards.
	(x_to_xcolors): Likewise.
	(x_detect_edges): Likewise.
	(png_load_body): Likewise.
	(gif_close): Likewise.
	(gif_load): Likewise.

2015-01-25  Eli Zaretskii  <eliz@gnu.org>

	Use bool for boolean in w32term.c
	* w32term.c (x_update_window_begin, x_update_window_end)
	(x_update_end, x_after_update_window_line)
	(x_set_glyph_string_gc, x_draw_glyph_string_background)
	(x_draw_glyph_string_foreground)
	(x_draw_composite_glyph_string_foreground)
	(x_draw_glyphless_glyph_string_foreground)
	(x_draw_image_glyph_string, x_draw_glyph_string)
	(x_draw_stretch_glyph_string, note_mouse_movement)
	(w32_mouse_position, x_scroll_bar_report_motion)
	(x_horizontal_scroll_bar_report_motion, w32_read_socket)
	(w32_set_vertical_scroll_bar, w32_set_horizontal_scroll_bar)
	(w32_draw_window_cursor, x_new_font, x_set_offset)
	(x_set_window_size, x_make_frame_invisible, x_iconify_frame):
	Use bool where appropriate.

	Use bool for boolean in w32fns.c
	* w32fns.c (w32_defined_color, x_decode_color)
	(Fxw_color_defined_p, Fxw_color_values, x_set_icon_type)
	(x_set_menu_bar_lines, x_change_tool_bar_height)
	(x_set_internal_border_width, x_explicitly_set_name)
	(x_implicitly_set_name, Fx_create_frame, w32_window)
	(x_create_tip_frame, Fx_show_tip): Use bool where appropriate.

2015-01-25  Paul Eggert  <eggert@cs.ucla.edu>

	Use bool for boolean in xfns.c
	* xfaces.c (x_update_menu_appearance):
	* xfns.c (x_real_positions, x_defined_color, x_decode_color)
	(xg_set_icon, xg_set_icon_from_xpm_data, x_set_cursor_color)
	(x_set_icon_type, x_set_icon_name, x_set_menu_bar_lines)
	(x_change_tool_bar_height, x_set_internal_border_width)
	(x_encode_text, x_set_name_internal, x_explicitly_set_name)
	(x_implicitly_set_name, x_default_scroll_bar_color_parameter)
	(hack_wm_protocols, xic_create_fontsetname, xic_free_xfontset)
	(x_window, x_icon, Fx_wm_set_size_hint, Fx_create_frame)
	(Fxw_color_defined_p, Fxw_color_values, x_create_tip_frame)
	(Fx_show_tip, clean_up_file_dialog, Fx_file_dialog)
	(clean_up_dialog, syms_of_xfns):
	* xterm.h (xg_set_icon, xg_set_icon_from_xpm_data)
	(xic_create_fontsetname):
	Use bool for boolean.
	* xfns.c: Include bitmaps/gray.xbm unconditionally.

	Count MANY function args more reliably
	* alloc.c (Fgc_status, purecopy, unbind_to, garbage_collect_1):
	* buffer.c (Fbuffer_list, Fkill_buffer):
	* callint.c (read_file_name, Fcall_interactively):
	* charset.c (Fset_charset_priority, syms_of_charset):
	* chartab.c (uniprop_encode_value_numeric):
	* coding.c (syms_of_coding):
	* composite.c (syms_of_composite):
	* data.c (wrong_range):
	* dbusbind.c (syms_of_dbusbind):
	* dired.c (file_attributes):
	* editfns.c (Fdecode_time, update_buffer_properties, format2):
	* eval.c (run_hook_with_args_2, apply1, call1, call2, call3)
	(call4, call5, call6, call7):
	* fileio.c (Finsert_file_contents, choose_write_coding_system)
	(Fcar_less_than_car, build_annotations, auto_save_error):
	* filelock.c (get_boot_time):
	* fns.c (internal_equal, nconc2, Fyes_or_no_p, Fwidget_apply):
	(maybe_resize_hash_table, secure_hash):
	* font.c (font_style_to_value, font_open_by_name, Flist_fonts):
	* fontset.c (fontset_add, Fset_fontset_font):
	* ftfont.c (ftfont_lookup_cache):
	* gtkutil.c (xg_get_font):
	* insdel.c (signal_before_change, signal_after_change):
	* keymap.c (append_key):
	* lread.c (load_warn_old_style_backquotes, Fload, init_lread):
	* minibuf.c (Fread_buffer):
	* print.c (print_preprocess):
	* process.c (Fformat_network_address, Fmake_network_process)
	(server_accept_connection):
	* sound.c (Fplay_sound_internal):
	* term.c (Fsuspend_tty, Fresume_tty):
	* window.c (window_list):
	* xdisp.c (run_redisplay_end_trigger_hook, add_to_log)
	(message_with_string):
	* xfaces.c (Fx_list_fonts):
	* xfont.c (syms_of_xfont):
	* xselect.c (x_handle_selection_request)
	(x_handle_selection_clear, x_clear_frame_selections)
	(x_clipboard_manager_error_1):
	Prefer CALLMANY and CALLN to counting args by hand.
	* doc.c (reread_doc_file): Remove unused code.
	* fns.c (concat2, concat3): Redo to avoid need for local-var vector.
	(cmpfn_user_defined, hashfn_user_defined, Fmaphash):
	Prefer call1 and call2 to Ffuncall.
	* keyboard.c (safe_run_hook_funcall, safe_run_hooks):
	Use struct literal rather than a local var, for simplicity.
	* keymap.c (where_is_internal): Use NULL rather than a pointer
	to unused args.
	* lisp.h (CALLMANY, CALLN): New macros.
	* sound.c (Fplay_sound_internal): Coalesce duplicate code.
	(Bug#19634)

	Use gnustep-config if available
	* emacs.c [NS_IMPL_GNUSTEP]: Don't include <GNUstepBase/GSConfig.h>.
	It doesn't appear to be needed, and the inclusion breaks on
	Ubuntu 14.10 when 'configure' uses 'gnustep-config'.

2015-01-22  Eli Zaretskii  <eliz@gnu.org>

	* xdisp.c (init_iterator): Restore a comment lost in transition.

2015-01-22  Paul Eggert  <eggert@cs.ucla.edu>

	Use bool for boolean in xfont.c, xftfont.c, xgselect.c
	* xfont.c (xfont_driver, xfont_chars_supported)
	(xfont_text_extents):
	* xftfont.c (xftfont_get_colors, xftfont_open)
	(xftfont_prepare_face, xftfont_done_face)
	(xftfont_cached_font_ok):
	* xgselect.c (xg_select):
	Use bool for boolean.

	Don't downcase system diagnostics' first letters
	* fileio.c (report_file_errno): Don't downcase, and simplify.
	(Bug#19642)

	Isolate NIL_IS_ZERO-assuming code better
	Suggested by Stefan Monnier in:
	https://lists.gnu.org/r/emacs-devel/2015-01/msg00588.html
	* alloc.c (allocate_pseudovector):
	Use memclear, not memsetnil, to remove a 'verify'.
	* callint.c (Fcall_interactively):
	* dispnew.c (realloc_glyph_pool):
	* xdisp.c (init_iterator):
	Use memclear, not memset, to remove a 'verify'.
	* lisp.h (memclear): Rename from memsetnil, and take a byte
	count rather than a word count.  All callers changed.

2015-01-20  Paul Eggert  <eggert@cs.ucla.edu>

	Undo port to hypothetical nonzero Qnil case
	This mostly undoes the previous change in this area.  See:
	https://lists.gnu.org/r/emacs-devel/2015-01/msg00570.html
	* alloc.c (allocate_pseudovector):
	* callint.c (Fcall_interactively):
	* dispnew.c (realloc_glyph_pool):
	* fringe.c (init_fringe):
	* lisp.h (memsetnil):
	* xdisp.c (init_iterator):
	Simplify by assuming that Qnil is zero, but verify the assumption.
	* lisp.h (NIL_IS_ZERO): Revert back to this symbol, removing
	NIL_IS_NONZERO.  All uses changed.

2015-01-20  Jan Djärv  <jan.h.d@swipnet.se>

	* nsterm.m (EV_TRAILER2): Set Vinhibit_quit to Qt (Bug#19531).

2015-01-20  Dmitry Antipov  <dmantipov@yandex.ru>

	Prefer xlispstrdup to avoid dumb calls to strlen.
	* nsfont.m (ns_get_family):
	* nsterm.m (ns_term_init):
	* w32fns.c (w32_window):
	* xfns.c (x_window, Fx_select_font): Use xlispstrdup.

2015-01-20  Paul Eggert  <eggert@cs.ucla.edu>

	Correct an old fix for GTK font selection
	* gtkutil.c (xg_get_font): Fix off-by-2 typo.
	(Bug#3228)

	Fix minor bugs with printing null bytes
	* minibuf.c (read_minibuf_noninteractive):
	* xdisp.c (Ftrace_to_stderr) [GLYPH_DEBUG]:
	Work even if the Lisp string contains a null byte.

	Port to hypothetical case where Qnil is nonzero
	* alloc.c (allocate_pseudovector):
	* callint.c (Fcall_interactively):
	* coding.c (syms_of_coding):
	* dispnew.c (realloc_glyph_pool):
	* fringe.c (init_fringe):
	* lisp.h (memsetnil):
	* xdisp.c (init_iterator):
	Port to the currently-hypothetical case where Qnil is nonzero.
	* dispnew.c (adjust_glyph_matrix): Remove unnecessary verification,
	as there are no Lisp_Object values in the data here.
	* lisp.h (NIL_IS_NONZERO): New symbol, replacing NIL_IS_ZERO.
	All uses changed.  Define only if not already defined, so that one
	can debug with -DNIL_IS_NONZERO.
	* xdisp.c (init_iterator): Remove unnecessary initializations to 0.

2015-01-19  Eli Zaretskii  <eliz@gnu.org>

	* dispnew.c (adjust_glyph_matrix, realloc_glyph_pool): Verify that
	Qnil is represented as zero, before using that to initialize parts
	of the glyph structure.

	* xdisp.c (init_iterator): Verify that Qnil is represented as
	zero, before using that to initialize parts of the iterator
	structure.

2015-01-19  Paul Eggert  <eggert@cs.ucla.edu>

	Prefer memset to repeatedly assigning Qnil
	* alloc.c (allocate_pseudovector): Catch more bogus values.
	* alloc.c (allocate_pseudovector):
	* callint.c (Fcall_interactively):
	* coding.c (syms_of_coding):
	* fringe.c (init_fringe):
	Verify that Qnil == 0.
	* callint.c (Fcall_interactively):
	* eval.c (Fapply, Ffuncall):
	* fns.c (mapcar1, larger_vector):
	* font.c (font_expand_wildcards):
	* fringe.c (init_fringe):
	Prefer memset to assigning zeros by hand.
	* callint.c (Fcall_interactively):
	Remove duplicate assignment of Qnil to args[i].
	* coding.c (syms_of_coding):
	Prefer LISP_INITIALLY_ZERO to assigning zeros by hand.
	* fileio.c (Ffile_selinux_context):
	Rewrite to avoid need for Lisp_Object array.
	* lisp.h (XLI_BUILTIN_LISPSYM): New macro.
	(DEFINE_LISP_SYMBOL_END): Use it.
	(NIL_IS_ZERO): New constant.
	(memsetnil): New function.

2015-01-16  Dmitry Antipov  <dmantipov@yandex.ru>

	Tune pseudovector allocation assuming Qnil == 0.
	* alloc.c (allocate_pseudovector): Use memset for both
	Lisp_Objects and regular slots.  Add zerolen arg.
	* lisp.h (allocate_pseudovector): Adjust prototype.
	(ALLOCATE_PSEUDOVECTOR): Adjust user.
	(ALLOCATE_ZEROED_PSEUDOVECTOR): New macro.
	(allocate_hash_table, allocate_window, allocate_frame)
	(allocate_process, allocate_terminal): Remove prototypes.
	* fns.c (allocate_hash_table): Now static here.
	* frame.c (allocate_frame):
	* process.c (allocate_process):
	* terminal.c (allocate_terminal):
	* window.c (allocate_window): Now static here.
	Use ALLOCATE_ZEROED_PSEUDOVECTOR.  Add comment.

	* lisp.h (XTERMINAL): Add eassert.
	* process.c (make_lisp_proc): Now static here.

	Prefer INLINE functions in font.h to match style used in lisp.h.
	* font.h (FONTP, FONT_SPEC_P, FONT_ENTITY_P, FONT_OBJECT_P)
	(CHECK_FONT, CHECK_FONT_SPEC, CHECK_FONT_ENTITY, CHECK_FONT_OBJECT)
	(XFONT_SPEC, XFONT_ENTITY, XFONT_OBJECT, CHECK_FONT_GET_OBJECT):
	Now functions.
	* font.c (Ffont_otf_alternates, Fquery_font, Ffont_get_glyphs):
	* ftfont.c (ftfont_shape):
	* macfont.m (macfont_shape):
	* w32uniscribe.c (uniscribe_shape):
	* xftfont.c (xftfont_shape): Adjust CHECK_FONT_GET_OBJECT users.

2015-01-16  Paul Eggert  <eggert@cs.ucla.edu>

	Give up on -Wsuggest-attribute=const
	* decompress.c (Fzlib_available_p):
	* gnutls.c (Fgnutls_available_p):
	* gtkutil.h (xg_uses_old_file_dialog):
	* xdisp.c (Ftool_bar_height):
	* xmenu.c (popup_activated):
	No longer const, since it's not const on at lest some
	configurations, and we shouldn't lie to the compiler.

2015-01-15  Eli Zaretskii  <eliz@gnu.org>

	* fileio.c: Include binary-io.h.
	(Fset_binary_mode): New function.
	(syms_of_fileio): Defsubr it.
	(syms_of_fileio) <Qstdin, Qstdout, Qstderr>: DEFSYM them.

2015-01-15  Teodor Zlatanov  <tzz@lifelogs.com>

	* gnutls.c (init_gnutls_functions): Import gnutls_x509_crt_check_issuer.
	(Fgnutls_peer_status): Use it to set the :self-signed flag.
	Rename the previous :self-signed to :unknown-ca. (Bug#19404)
	(Fgnutls_peer_status_warning_describe): Explain :unknown-ca flag.

2015-01-14  Eli Zaretskii  <eliz@gnu.org>

	* w32fns.c (w32_wnd_proc): Ignore MENUITEMINFO's dwItemData data
	when FLAGS indicate the item is not highlighted.  (Bug#19596)

2015-01-14  Martin Rudalics  <rudalics@gmx.at>

	* xmenu.c (update_frame_menubar): Remove garbaged code.

2015-01-14  Paul Eggert  <eggert@cs.ucla.edu>

	remove_slash_colon need not be inline
	* process.c, process.h (remove_slash_colon): No longer inline.
	This saves text bytes without hurting runtime performance.

2015-01-14  Dmitry Antipov  <dmantipov@yandex.ru>

	Avoid extra multibyteness check in ENCODE_FILE users.
	* callproc.c (encode_current_directory, Fcall_process, call_process):
	* dired.c (directory_files_internal, file_name_completion):
	Do not check for STRING_MULTIBYTE because encode_file_name
	is a no-op for unibyte strings.

	* process.h (remove_slash_colon): New function.
	* callproc.c (encode_current_directory, call_process):
	* process.c (Fstart_process): Use it.

	Consistently handle time zone specification.
	* editfns.c (decode_time_zone): New function, refactored out from ...
	(Fencode_time): ... adjusted user.
	(Fset_time_zone_rule): Use decode_time_zone.

	* editfns.c (make_buffer_string_both): If requested range intersects
	the gap, don't move the latter but copy in two regions, thus avoiding
	unnecessary relocation of buffer data.

2015-01-14  Paul Eggert  <eggert@cs.ucla.edu>

	Use bool for boolean in xmenu.c, xml.c
	* xmenu.c (x_menu_set_in_use, popup_get_selection)
	(Fx_menu_bar_open_internal, popup_widget_loop)
	(x_activate_menubar, xg_crazy_callback_abort)
	(update_frame_menubar, set_frame_menubar)
	(initialize_frame_menubar, free_frame_menubar)
	(create_and_show_popup_menu, x_menu_show)
	(create_and_show_dialog, x_dialog_show):
	* xml.c (libxml2_loaded_p, init_libxml2_functions, parse_region)
	(Flibxml_parse_html_region, Flibxml_parse_xml_region):
	* xrdb.c (main) [TESTRM]:
	* xsettings.c (init_gsettings):
	* xterm.c (XFillRectangle, xg_scroll_callback)
	(xg_end_scroll_callback):
	* xterm.h (x_menu_set_in_use) [USE_GTK || USE_MOTIF]:
	Use bool for boolean.
	* xmenu.c (TRUE): Remove; no longer used.
	(show_help_event): Remove long-unused code.
	(set_frame_menubar): Remove "#if 1" and corresponding "#endif" lines.

2015-01-13  Paul Eggert  <eggert@cs.ucla.edu>

	Don't say Fnext_read_file_uses_dialog_p is const
	It's const only if a windowing system is not used; don't say it's
	const otherwise.  See:
	https://lists.gnu.org/r/emacs-devel/2015-01/msg00310.html
	* fileio.c (next_read_file_uses_dialog_p): Remove.
	Move guts back to ...
	(Fnext_read_file_uses_dialog_p): ... here.
	Don't declare as const, as make-docfile.c now has a special case
	for this function.  This is an ugly hack, but it's better than
	lying to the compiler.

	Remove now-unnecessary forward XTYPE decl
	* lisp.h (XTYPE): Remove forward declaration.  The recent merge
	from emacs-24 fixed the problem in a better way, by moving XPNTR's
	definition to after XTYPE's.

2015-01-13  Eli Zaretskii  <eliz@gnu.org>

	Fix problems with 32-bit wide-int build exposed by MinGW.
	* lisp.h (XPNTR): Move definition to after XTYPE, to avoid
	compilation error in an unoptimized build when !USE_LSB_TAG.

	* w32heap.c (DUMPED_HEAP_SIZE): For 32-bit wide-int build, use the
	same larger value as for the 64-bit build.

	* w32term.h (SCROLL_BAR_PACK): Cast the result to UINT_PTR to
	avoid compiler warnings.

	* w32proc.c (Fw32_get_codepage_charset, Fw32_set_keyboard_layout):
	Avoid compiler warnings about cast from integer to pointer of
	different size.

	* w32menu.c (menubar_selection_callback, w32_menu_show): Cast to
	UINT_PTR instead of EMACS_INT, to avoid compiler warnings about
	casting from integer to pointer of different size.
	(add_menu_item): Pass the help-echo string as a pointer to
	Lisp_String, not as a Lisp_Object.
	(w32_menu_display_help): Use make_lisp_ptr to reconstruct a Lisp
	string object from its C pointer.

	* w32fns.c (w32_msg_pump) <WM_EMACS_UNREGISTER_HOT_KEY>: Use
	make_lisp_ptr instead of XIL, to reconstruct a Lisp_Cons from its
	C pointer.
	<WM_EMACS_TOGGLE_LOCK_KEY>: msg.lparam is now a C integer.
	(Fx_create_frame): Type-cast the result of XFASTINT to avoild
	compiler warnings about size differences.
	(Fw32_unregister_hot_key): Pass the tail of w32_grabbed_keys as a
	pointer to a Lisp_Cons struct, not as a disguised EMACS_INT.
	(Fw32_toggle_lock_key): Pass the new state of the key as a C
	integer; use -1 for nil.  Doc fix.

	* .gdbinit (xgetsym): New subroutine.
	(xsymname, xsymbol): Use it.
	(xprintsym): No need to call xgetptr.

2015-01-13  Martin Rudalics  <rudalics@gmx.at>

	* frame.c (adjust_frame_size): Make sure new numbers of
	lines/columns get installed after font size change (Bug#19575).

2015-01-13  Dmitry Antipov  <dmantipov@yandex.ru>

	Add DEFUN attributes.
	* callint.c (Finteractive):
	* character.c (Fcharacterp, Fmax_char):
	* data.c (Feq, Fnull, Fconsp, Fatom, Flistp, Fnlistp, Fsymbolp)
	(Fstringp, Fchar_or_string_p, Fintegerp, Fnatnump, Fnumberp)
	(Ffloatp, Fbyteorder):
	* decompress.c (Fzlib_available_p):
	* fns.c (Fidentity):
	* frame.c (Fframe_windows_min_size):
	* gnutls.c (Fgnutls_error_p, Fgnutls_available_p):
	* window.c (Fwindow__sanitize_window_sizes):
	* xdisp.c (Ftool_bar_height):
	* xfaces.c (Fface_attribute_relative_p): Add const attribute.
	* emacs.c (Fkill_emacs):
	* eval.c (Fthrow):
	* keyboard.c (Ftop_level, Fexit_recursive_edit)
	(Fabor_recursive_edit): Add noreturn attribute.

	* search.c (fast_string_match_internal): New function,
	consolidated from...
	(fast_string_match, fast_string_match_ignore_case): ...functions
	which are...
	* lisp.h (fast_string_match, fast_string_match_ignore_case):
	inlined from here now.
	(fast_string_match_internal): Add prototype.
	* dired.c (file_name_completion): Use fast_string_match_internal.

	* fileio.c (next_read_file_uses_dialog_p): New workaround ...
	(Fnext_read_file_uses_dialog_p): ... called from here to avoid
	ATTRIBUTE_CONST dependency from #ifdefs.  For details, see
	https://lists.gnu.org/r/emacs-devel/2015-01/msg00289.html.

2015-01-12  Paul Eggert  <eggert@cs.ucla.edu>

	Port to 32-bit MingGW --with-wide-int
	Problem reported by Eli Zaretskii in:
	https://lists.gnu.org/r/emacs-devel/2015-01/msg00265.html
	* lisp.h (struct Lisp_Sub_Char_Table): Check that offset matches
	what we think it is, rather than checking only its alignment (and
	doing so incorrectly on MinGW).

2015-01-12  Dmitry Antipov  <dmantipov@yandex.ru>

	* fileio.c (Ffile_name_as_directory, Fdirectory_file_name):
	Remove dead NILP check.
	* image.c (Flookup_image): Use regular format for docstring.
	* keyboard.c (apply_modifiers_uncached): Use stpcpy.

2015-01-12  Martin Rudalics  <rudalics@gmx.at>

	* dispnew.c (change_frame_size_1): Pass Qchange_frame_size to
	adjust_frame_size.
	* frame.c (frame_default_tool_bar_height): New variable.
	(adjust_frame_size): Possibly add requested adjustment to
	Vframe_adjust_size_history.
	(make_frame): Initialize tool_bar_redisplayed_once slot.
	(Fset_frame_height, Fset_frame_width, Fset_frame_size): Clarify
	doc-string.  Call adjust_frame_size unconditionally (the frame's
	text size may remain unaltered but the pixel size may change).
	(x_figure_window_size): If frame_default_tool_bar_height was
	set, use it instead of calculating the tool bar height from
	DEFAULT_TOOL_BAR_IMAGE_HEIGHT.  Don't set
	Vframe_initial_frame_tool_bar_height.
	(Qchange_frame_size, Qxg_frame_set_char_size)
	(Qset_window_configuration, Qx_create_frame_1)
	(Qx_create_frame_2): New symbols.
	(Vframe_initial_frame_tool_bar_height): Remove.
	(Vframe_adjust_size_history): New history variable for debugging
	frame size adjustments.
	* frame.h (struct frame): New boolean slot
	tool_bar_redisplayed_once.
	(frame_default_tool_bar_height): Extern.
	* gtkutil.c (xg_frame_set_char_size): Pass Qxg_frame_set_char_size
	to adjust_frame_size.
	* nsfns.m (Fx_create_frame): Pass Pass Qx_create_frame_1 and
	Qx_create_frame_2 to adjust_frame_size.
	* w32fns.c (x_change_tool_bar_height): Call adjust_frame_size with
	inhibit 1 when we have not redisplayed the tool bar yet.
	(Fx_create_frame): Pass Pass Qx_create_frame_1 and
	Qx_create_frame_2 to adjust_frame_size.
	* w32menu.c (set_frame_menubar): Simplify adjust_frame_size
	call.
	* window.c (Fset_window_configuration):
	Pass Qset_window_configuration to adjust_frame_size.
	* xdisp.c (redisplay_tool_bar): Assign new height to
	frame_default_tool_bar_height.
	(redisplay_internal): If we haven't redisplayed this frame's
	tool bar, call redisplay_tool_bar early so we can adjust the
	frame size accordingly.
	* xfns.c (x_change_tool_bar_height): Call adjust_frame_size with
	inhibit 1 when we have not redisplayed the tool bar yet.
	(Fx_create_frame): Pass Pass Qx_create_frame_1 and
	Qx_create_frame_2 to adjust_frame_size.

2015-01-12  Paul Eggert  <eggert@cs.ucla.edu>

	Have 'make' output better GEN names
	* Makefile.in (gl-stamp, globals.h): Simplify by putting the new
	contents of globals.h into gl-stamp.  This lets us use AM_V_GEN
	more naturally so that 'make' can output more-accurate names.

2015-01-11  Stefan Monnier  <monnier@iro.umontreal.ca>

	* buffer.c (init_buffer_once): Initialize buffer_local_flags before
	calling reset_buffer_local_variables, and make sure we initialize
	it completely.

2015-01-11  Dmitry Antipov  <dmantipov@yandex.ru>

	* coding.c (Fcoding_system_plist): Use common style for docstring.

2015-01-11  Paul Eggert  <eggert@cs.ucla.edu>

	Port to MSB hosts without optimization
	E.g., when configuring --with-wide-int CFLAGS='-O0' on x86,
	the inline function XTYPE needs to be declared before being used.
	* lisp.h (XTYPE): New forward declaration.

2015-01-10  Paul Eggert  <eggert@cs.ucla.edu>

	Port to 32-bit --with-wide-int
	Prefer symbol indexes to struct Lisp_Symbol * casted and then
	widened, as the latter had trouble with GCC on Fedora 21 when
	configured --with-wide-int and when used in static initializers.
	* alloc.c (garbage_collect_1, which_symbols):
	* lread.c (init_obarray):
	Prefer builtin_lisp_symbol when it can be used.
	* dispextern.h (struct image_type.type):
	* font.c (font_property_table.key):
	* frame.c (struct frame_parm_table.sym):
	* keyboard.c (scroll_bar_parts, struct event_head):
	* xdisp.c (struct props.name):
	Use the index of a builtin symbol rather than its address.
	All uses changed.
	* lisp.h (TAG_SYMPTR, XSYMBOL_INIT): Remove, replacing with ...
	(TAG_SYMOFFSET, SYMBOL_INDEX): ... new macros that deal with
	symbol indexes rather than pointers, and which work better on MSB
	hosts because they shift right before tagging.  All uses changed.
	(DEFINE_LISP_SYMBOL_BEGIN, DEFINE_LISP_SYMBOL_END):
	No longer noops on wide-int hosts, since they work now.
	(builtin_lisp_symbol): New function.

	Port to HAVE_FREETYPE && !HAVE_XFT
	* dispextern.h (struct face.extra) [HAVE_FREETYPE && !HAVE_XFT]:
	* font.h (syms_of_xftfont) [HAVE_FREETYPE && !HAVE_XFT]:
	Declare in this case too.

2015-01-10  Eli Zaretskii  <eliz@gnu.org>

	* w32fns.c (Fw32_register_hot_key): Use XINT instead of XLI.

	* w32notify.c (Fw32notify_add_watch, w32_get_watch_object):
	Use make_pointer_integer instead of XIL.
	(Fw32notify_rm_watch): Use XINTPTR instead of XLI.

	* w32inevt.c (handle_file_notifications): Use make_pointer_integer
	instead of XIL.  Put a list of the descriptor, action, and file
	name in event->arg, instead of spreading them between event->code
	and event->arg.

	* w32term.c (queue_notifications): Use make_pointer_integer
	instead of XIL.  Put a list of the descriptor, action, and file
	name in event->arg, instead of spreading them between event->code
	and event->arg.

	* keyboard.c (kbd_buffer_get_event) [HAVE_W32NOTIFY]: Adjust Lisp
	event creation to changes in w32term.c and w32inevt.c above.

2015-01-09  Paul Eggert  <eggert@cs.ucla.edu>

	Port Qnil==0 changes to 32-bit --with-wide-int
	* lisp.h (lisp_h_XSYMBOL, XSYMBOL): Assume USE_LSB_TAG in the
	macro-implemented version.  For the non-USE_LSB_TAG case, supply
	a new inline function that is the inverse of the new TAG_SYMPTR.
	(lisp_h_XUNTAGBASE, XUNTAGBASE): Remove.  All uses removed.
	(TAG_SYMPTR) [!USE_LSB_TAG]: If the pointer subtraction yields a
	negative number, don't allow sign bits to bleed into the encoded
	value.  Shift in zero bits instead.

	Refactor pointer-to-integer conversion
	* gfilenotify.c (monitor_to_lisp, lisp_to_monitor):
	Rename and move to lisp.h.  All uses changed.
	* lisp.h (XINTPTR, make_pointer_integer): New inline functions,
	which are renamed from gfilenotify.c's lisp_to_monitor and
	monitor_to_lisp, and with more-generic void * signatures.

2015-01-08  Eli Zaretskii  <eliz@gnu.org>

	* dispnew.c (buffer_posn_from_coords): Fix the value of the column
	returned for right-to-left screen lines.  (Before the change on
	2014-12-30, the incorrectly-computed X pixel coordinate concealed
	this bug.)

	* .gdbinit (xsymname): New subroutine.
	(xprintsym, initial-tbreak): Use it to access the name of a symbol
	in a way that doesn't cause GDB to barf when it tries to
	dereference a NULL pointer.

	* xdisp.c (next_element_from_c_string): Use Lisp integer zero as
	the object.
	(set_cursor_from_row, try_cursor_movement, dump_glyph)
	(insert_left_trunc_glyphs, append_space_for_newline)
	(extend_face_to_end_of_line, highlight_trailing_whitespace)
	(find_row_edges, ROW_GLYPH_NEWLINE_P, Fmove_point_visually)
	(Fbidi_resolved_levels, produce_special_glyphs)
	(rows_from_pos_range, mouse_face_from_buffer_pos)
	(note_mouse_highlight): Use nil as the object for glyphs inserted
	by the display engine, and test with NILP instead of INTEGERP.
	(Bug#19535)

	* w32fns.c (Fx_show_tip): Use NILP to test for glyphs inserted by
	the display engine.

	* xfns.c (Fx_show_tip): Use NILP to test for glyphs inserted by
	the display engine.

	* dispextern.h (struct glyph, struct it): Update comments for the
	OBJECT members.

2015-01-08  Paul Eggert  <eggert@cs.ucla.edu>

	Port new Lisp symbol init to x86 --with-wide-int
	* lisp.h (DEFINE_LISP_SYMBOL_BEGIN, DEFINE_LISP_SYMBOL_END):
	Define to empty on platforms where EMACS_INT_MAX != INTPTR_MAX, as
	GCC (at least) does not allow a constant initializer to widen an
	address constant.

	* lisp.h (TAG_SYMPTR): Don't do arithmetic on NULL.
	This is a followup to the "Port Qnil==0 XUNTAG to clang" patch.
	Although clang doesn't need it, some other compiler might, and
	it's easy enough to be safe.

	* conf_post.h (ATTRIBUTE_ALLOC_SIZE): Port to clang 3.5.0.
	Apparently clang removed support for the alloc_size attribute.

	Port Qnil==0 XUNTAG to clang
	clang has undefined behavior if the program subtracts an integer
	from (char *) 0.  Problem reported by YAMAMOTO Mitsuharu in:
	https://lists.gnu.org/r/emacs-devel/2015-01/msg00132.html
	* lisp.h (lisp_h_XUNTAG) [USE_LSB_TAG]:
	(XUNTAG) [!USE_LSB_TAG]: Port to clang 3.5.0.

	Port GFileMonitor * hack to Qnil==0 platforms
	Reported by Glenn Morris in: https://bugs.gnu.org/15880#112
	* gfilenotify.c (monitor_to_lisp, lisp_to_monitor): New functions.
	(dir_monitor_callback, Fgfile_add_watch, Fgfile_rm_watch): Use them.

2015-01-06  Jan Djärv  <jan.h.d@swipnet.se>

	* nsterm.m (x_set_window_size): Call updateFrameSize to get real
	size instead of using widht/height.  The frame may be
	constrained (Bug#19482).

2015-01-05  Paul Eggert  <eggert@cs.ucla.edu>

	* lisp.h (XSYMBOL): Parenthesize id in forward decl.
	Needed when neither optimizing nor inlining.
	Also, sort decls alphabetically.

2015-01-05  Eli Zaretskii  <eliz@gnu.org>

	* w32proc.c, w32.h, w32fns.c, w32font.c, w32menu.c, w32notify.c:
	* w32proc.c, w32select.c, w32term.c, w32uniscribe.c: Remove
	declarations of Q* variables that represent symbols.

2015-01-05  Paul Eggert  <eggert@cs.ucla.edu>

	Use 0 for Qnil
	Fixes Bug#15880.
	If USE_LSB_TAG, arrange for the representation of Qnil to be zero so
	that NILP (x) is equivalent to testing whether x is 0 at the
	machine level.  The overall effects of this and the previous patch
	shrink the size of the text segment by 2.3% and speeds up
	compilation of all the .elc files by about 0.5% on my platform,
	which is Fedora 20 x86-64.
	* lisp.h (lisp_h_XPNTR, lisp_h_XSYMBOL, lisp_h_XUNTAG)
	(make_lisp_symbol) [USE_LSB_TAG]:
	Symbols now tag the difference from lispsym, not the pointer.
	(lisp_h_XUNTAGBASE, TAG_SYMPTR): New macros.
	(Lisp_Int0, Lisp_Int1, Lisp_Symbol, Lisp_Misc, Lisp_String, Lisp_Cons):
	Renumber so that Lisp_Symbol is 0, so that Qnil is zero.
	(XSYMBOL): New forward decl.
	(XUNTAGBASE): New function.
	(XUNTAG): Use it.

	Compute C decls for DEFSYMs automatically
	Fixes Bug#15880.
	This patch also makes Q constants (e.g., Qnil) constant addresses
	from the C point of view.
	* alloc.c, bidi.c, buffer.c, bytecode.c, callint.c, casefiddle.c:
	* casetab.c, category.c, ccl.c, charset.c, chartab.c, cmds.c, coding.c:
	* composite.c, data.c, dbusbind.c, decompress.c, dired.c, dispnew.c:
	* doc.c, editfns.c, emacs.c, eval.c, fileio.c, fns.c, font.c, fontset.c:
	* frame.c, fringe.c, ftfont.c, ftxfont.c, gfilenotify.c, gnutls.c:
	* image.c, inotify.c, insdel.c, keyboard.c, keymap.c, lread.c:
	* macfont.m, macros.c, minibuf.c, nsfns.m, nsfont.m, nsimage.m:
	* nsmenu.m, nsselect.m, nsterm.m, print.c, process.c, profiler.c:
	* search.c, sound.c, syntax.c, term.c, terminal.c, textprop.c, undo.c:
	* window.c, xdisp.c, xfaces.c, xfns.c, xftfont.c, xmenu.c, xml.c:
	* xselect.c, xsettings.c, xterm.c:
	Remove Q vars that represent symbols (e.g., Qnil, Qt, Qemacs).
	These names are now defined automatically by make-docfile.
	* alloc.c (init_symbol): New function.
	(Fmake_symbol): Use it.
	(c_symbol_p): New function.
	(valid_lisp_object_p, purecopy): Use it.
	* alloc.c (marked_pinned_symbols):
	Use make_lisp_symbol instead of make_lisp_ptr.
	(garbage_collect_1): Mark lispsym symbols.
	(CHECK_ALLOCATED_AND_LIVE_SYMBOL): New macro.
	(mark_object): Use it.
	(sweep_symbols): Sweep lispsym symbols.
	(symbol_uses_obj): New function.
	(which_symbols): Use it.  Work for lispsym symbols, too.
	(init_alloc_once): Initialize Vpurify_flag here; no need to wait,
	since Qt's address is already known now.
	(syms_of_alloc): Add lispsym count to symbols_consed.
	* buffer.c (init_buffer_once): Compare to Qnil, not to make_number (0),
	when testing whether storage is all bits zero.
	* dispextern.h (struct image_type):
	* font.c (font_property_table):
	* frame.c (struct frame_parm_table, frame_parms):
	* keyboard.c (scroll_bar_parts, struct event_head):
	* xdisp.c (struct props):
	Use XSYMBOL_INIT (Qfoo) and struct Lisp_Symbol * rather than &Qfoo and
	Lisp_Object *, since Qfoo is no longer an object whose address can be
	taken.  All uses changed.
	* eval.c (run_hook): New function.  Most uses of Frun_hooks changed to
	use it, so that they no longer need to take the address of a Lisp sym.
	(syms_of_eval): Don't use DEFSYM on Vrun_hooks, as it's a variable.
	* frame.c (syms_of_frame): Add defsyms for the frame_parms table.
	* keyboard.c (syms_of_keyboard): Don't DEFSYM Qmenu_bar here.
	DEFSYM Qdeactivate_mark before the corresponding var.
	* keymap.c (syms_of_keymap): Use DEFSYM for Qmenu_bar and Qmode_line
	instead of interning their symbols; this avoids duplicates.
	(LISP_INITIALLY, TAG_PTR)
	(DEFINE_LISP_SYMBOL_BEGIN, DEFINE_LISP_SYMBOL_END, XSYMBOL_INIT):
	New macros.
	(LISP_INITIALLY_ZERO): Use it.
	(enum symbol_interned, enum symbol_redirect, struct Lisp_Symbol)
	(EXFUN, DEFUN_ARGS_MANY, DEFUN_ARGS_UNEVALLED, DEFUN_ARGS_*):
	Move decls up, to avoid forward uses.  Include globals.h earlier, too.
	(make_lisp_symbol): New function.
	(XSETSYMBOL): Use it.
	(DEFSYM): Now just a placeholder for make-docfile.
	* lread.c (DEFINE_SYMBOLS): Define, for globals.h.
	(intern_sym): New function, with body taken from old intern_driver.
	(intern_driver): Use it.  Last arg is now Lisp integer, not ptrdiff_t.
	All uses changed.
	(define_symbol): New function.
	(init_obarray): Define the C symbols taken from lispsym.
	Use plain DEFSYM for Qt and Qnil.
	* syntax.c (init_syntax_once): No need to worry about
	Qchar_table_extra_slots.

2015-01-04  Paul Eggert  <eggert@cs.ucla.edu>

	'temacs -nw' should not call missing functions
	Without this patch, "temacs -nw" fails with the diagnostic
	"emacs: Symbol's function definition is void: frame-windows-min-size"
	and messes up the tty's state.
	* frame.c (Fframe_windows_min_size): New placeholder function.
	(syms_of_frame): Define it.
	* window.c (Fwindow__sanitize_window_sizes): New placeholder.
	(syms_of_window): Define it.

	Less 'make' chatter for lisp dir
	* Makefile.in (%.elc): Adjust to compile-onefile change in
	../lisp/Makefile.in.

	batch write-region no longer says "Wrote FOO"
	This cuts down on 'make' chatter a bit.
	* fileio.c (Fwrite_region):
	Don't output "Wrote /whatever/foo.elc" if noninteractive.

2015-01-03  Paul Eggert  <eggert@cs.ucla.edu>

	Revert previous change to produce_composite_glyph
	* term.c (produce_composite_glyph): Revert previous change (Bug#19496).

	Pacify gcc -Wparentheses
	* frame.c (x_set_frame_parameters): Add parens (Bug#19428).

2015-01-03  Martin Rudalics  <rudalics@gmx.at>

	* frame.c (x_set_frame_parameters): Call Fset_frame_size only if
	f->can_x_set_window_size is true.
	* xterm.c (x_set_window_size_1): Call change_frame_size with
	text sizes instead of pixel sizes (Bug#19428).

2015-01-01  Eli Zaretskii  <eliz@gnu.org>

	* xdisp.c (pos_visible_p): Fix up the X coordinate for
	right-to-left screen lines.  (Bug#19473)

2015-01-01  Eli Zaretskii  <eliz@gnu.org>

	* w32proc.c (Fw32_get_codepage_charset): Doc fix.  (Bug#19458)

2014-12-31  Paul Eggert  <eggert@cs.ucla.edu>

	Simplify setfattr use by assuming GNU make
	* Makefile.in (PAXCTL_if_present, SETFATTR_if_present): New macros.
	(emacs$(EXEEXT), temacs$(EXEEXT), bootstrap-emacs$(EXEEXT)): Use them.
	Simplify by using GNU make rather than shell conditionals,
	by using ln -f rather than rm -f followed by ln,
	and by preferring $@ to spelling out the destination.

2014-12-29  Eli Zaretskii  <eliz@gnu.org>

	* sysdep.c [WINDOWSNT]: Include sys/socket.h, without which this
	file doesn't compile on MS-Windows.

2014-12-29  Paul Eggert  <eggert@cs.ucla.edu>

	Allow return value of system-name to vary.  (Bug#19438)
	* filelock.c (current_lock_owner):
	* xrdb.c (get_environ_db):
	* xterm.c (same_x_server):
	* xterm.c (x_term_init):
	Prefer (system-name) to system-name, and avoid naming
	locals 'system-name'.
	* editfns.c (cached_system_name): New static var.
	(init_and_cache_system_name): New function.
	(init_editfns, Fsystem_name): Use it.
	(syms_of_editfns): Initialize it and Vsystem_name to the same value.
	* sysdep.c [HAVE_SOCKETS]: Don't include <sys/socket.h>, <netdb.h>.
	(h_errno) [TRY_AGAIN && !HAVE_H_ERRNO]: Remove decl.
	(init_system_name) [HAVE_SOCKETS]: Don't canonicalize the name.
	Don't create a new string if the current value is already correct.

2014-12-28  Paul Eggert  <eggert@cs.ucla.edu>

	Fix produce_composite_width typo
	* term.c (produce_composite_glyph):
	Fix typo that confused number of columns for pixel width.

2014-12-28  Paul Eggert  <eggert@Penguin.CS.UCLA.EDU>

	Wrap dll functions more simply
	* decompress.c, gnutls.c, image.c, xml.c:
	If WINDOWSNT, use '#define FOO fn_FOO' to wrap dll functions,
	rather than the inverse when not WINDOWSNT.  This isolates the
	fn_* business into the WINDOWSNT-specific section of the code,
	which makes it easier to maintain the generic code.
	* decompress.c (DEF_ZLIB_FN, LOAD_ZLIB_FN):
	* gnutls.c (DEF_GNUTLS_FN, LOAD_GNUTLS_FN):
	* image.c (DEF_IMGLIB_FN, LOAD_IMGLIB_FN):
	* xml.c (DEF_XML2_FN, LOAD_XML2_FN):
	Remove.  All uses replaced by DEF_DLL_FN.
	* decompress.c (inflateInit2): Remove; no longer needed.
	* w32.h (DEF_DLL_FN, LOAD_DLL_FN): New macros.

	Port memory-full checking to GnuTLS 3.3
	Instead of using gnutls_global_set_mem_functions, check every call
	to a GnuTLS function that might return an indication of memory
	exhaustion.  Suggested by Dmitry Antipov in:
	https://lists.gnu.org/r/emacs-devel/2014-12/msg02056.html
	* gnutls.c (gnutls_global_set_mem_functions) [WINDOWSNT]: Remove.
	(init_gnutls_functions): Do not load gnutls_global_set_mem_functions.
	(fn_gnutls_global_set_mem_functions) [!WINDOWSNT]: Remove.
	All uses removed.
	(check_memory_full): New function.
	(emacs_gnutls_handshake, emacs_gnutls_handle_error)
	(gnutls_make_error, gnutls_certificate_details, Fgnutls_peer_status)
	(Fgnutls_boot): Use it.
	(emacs_gnutls_global_init): Avoid gnutls_global_set_mem_functions.

2014-12-27  Paul Eggert  <eggert@cs.ucla.edu>

	Fix parse_settings to match internal documentation
	* xsettings.c (parse_settings): Return the number of settings seen.
	Count the settings changes accurately.
	(read_settings): Don't confuse number of settings changes with
	the return code from XGetWindowProperty.

2014-12-27  Eli Zaretskii  <eliz@gnu.org>

	* xdisp.c (set_iterator_to_next) <GET_FROM_STRING>: Limit search in
	composition_compute_stop_pos to the number of characters in the
	string.  (Bug#19435)
	<GET_FROM_BUFFER, GET_FROM_STRING>: Simplify code.

	* composite.c (composition_compute_stop_pos): If no composition
	was found in a string before ENDPOS, and ENDPOS is the string end,
	no need to back up to a safe point.

	* dispextern.h (struct it) <end_charpos>: Improve commentary.

2014-12-27  Jan Djärv  <jan.h.d@swipnet.se>

	* nsimage.m (allocInitFromFile:): Initialize bmRep.
	(dealloc): Release bmRep.
        (setPixmapData): Make bmRep local so class member is not
        set (Bug#19133).
	(setPixmapData): Rename local variable bmRep to avoid compiler
	warning.

2014-12-27  Jan Djärv  <jan.h.d@swipnet.se>

	* xterm.c (do_ewmh_fullscreen): Don't remove maximized_horz/vert
	when going to fullscreen (Bug#0x180004f).

2014-12-27  Eli Zaretskii  <eliz@gnu.org>

	* window.c (Fwindow_body_width): Doc fix.  (Bug#19395)

2014-12-27  Stefan Monnier  <monnier@iro.umontreal.ca>

	* buffer.c (syms_of_buffer) <Vafter_change_functions>: fix docstring.

2014-12-27  Eli Zaretskii  <eliz@gnu.org>

	* gnutls.c (gnutls_init): Fix deprecation warning from GCC.

2014-12-26  Paul Eggert  <eggert@cs.ucla.edu>

	Use bool for boolean in xselect.c, xsettings.c
	* xselect.c (x_get_local_selection, struct selection_data)
	(x_selection_request_lisp_error, struct prop_location)
	(x_handle_selection_request, x_convert_selection)
	(waiting_for_other_props_on_window, expect_property_change)
	(wait_for_property_change, x_handle_property_notify)
	(x_get_foreign_selection, x_get_window_property)
	(receive_incremental_selection)
	(x_get_window_property_as_lisp_data)
	(lisp_data_to_selection_data, Fx_get_selection_internal)
	(x_send_client_event):
	* xselect.c, xterm.h (x_handle_dnd_message):
	* xsettings.c (dpyinfo_valid, parse_settings, read_settings)
	(apply_xft_settings, read_and_apply_settings)
	(xft_settings_event, init_gsettings, init_xsettings)
	(syms_of_xsettings):
	Use bool for boolean.
	* xselect.c (x_get_window_property): Omit last arg, which was an
	unused boolean.
	* xsettings.c (apply_xft_settings): Remove 2nd arg, which was
	always true.  All callers changed.

2014-12-26  Eli Zaretskii  <eliz@gnu.org>

	* w32proc.c (sys_spawnve, get_lcid_callback): Use strcpy instead
	of strcat.

	* w32menu.c (add_menu_item): Use stpcpy instead of strcat.

	* w32.c (sys_readdir, stat_worker, symlink): Use strcpy instead of
	strcat.

2014-12-26  Paul Eggert  <eggert@cs.ucla.edu>

	Use bool for boolean in xsmfns.c
	* xsmfns.c, xterm.h (x_session_have_connection):
	* xsmfns.c (doing_interact, smc_interact_CB, Fhandle_save_session):
	Use bool for boolean.
	(x_session_initialize, Fhandle_save_session):
	Prefer NILP (x) to EQ (x, Qnil).

2014-12-25  Paul Eggert  <eggert@cs.ucla.edu>

	* callproc.c (child_setup):
	* dbusbind.c (xd_signature_cat):
	* doc.c (get_doc_string, Fsnarf_documentation):
	* editfns.c (Fuser_full_name):
	* frame.c (xrdb_get_resource):
	* gtkutil.c (xg_get_file_with_chooser):
	* tparam.c (tparam1):
	* xfns.c (xic_create_fontsetname):
	* xrdb.c (gethomedir, get_user_db, get_environ_db):
	* xsmfns.c (smc_save_yourself_CB):
	Rewrite to avoid the need for strcat, typically by using stpcpy
	and/or lispstpcpy.  strcat tends to be part of O(N**2) algorithms.
	* doc.c (sibling_etc):
	* xrdb.c (xdefaults):
	Now a top-level static constant.

2014-12-23  Didier Verna  <didier@didierverna.net> (tiny change).

	* nsselect.m (Fns_selection_owner_p): Return a Lisp boolean, not a
	C one (Bug#19396).

2014-12-22  Jan Djärv  <jan.h.d@swipnet.se>

	* xterm.c (x_bitmap_icon): Partly revert change from 2014-03-21 which
	breaks icon setting for Gtk+ except for initial frame (Bug#19403).

2014-12-22  Paul Eggert  <eggert@cs.ucla.edu>

	Use bool for boolean in xterm.c
	* frame.h, nsterm.m, w32term.c, w32term.h, xterm.c:
	(x_set_window_size, x_bitmap_icon):
	* nsterm.m (ns_frame_raise_lower, x_new_font):
	* termhooks.h (struct terminal.toggle_invisible_pointer_hook)
	(struct terminal.frame_raise_lower_hook):
	* w32term.c (w32_frame_raise_lower):
	* xterm.c, xterm.h (x_text_icon):
	* xterm.c (x_update_window_begin, x_update_window_end)
	(x_update_end, x_after_update_window_line)
	(x_set_glyph_string_gc, x_draw_glyph_string_background)
	(x_draw_glyph_string_foreground)
	(x_draw_composite_glyph_string_foreground)
	(x_alloc_lighter_color, x_draw_relief_rect)
	(x_draw_glyph_string_box, x_draw_image_relief)
	(x_draw_image_glyph_string, x_draw_stretch_glyph_string)
	(x_draw_underwave, x_draw_glyph_string, x_show_hourglass)
	(x_hide_hourglass):
	(XFillRectangle) [HAVE_GTK3]:
	(XTtoggle_invisible_pointer, frame_highlight, frame_unhighlight)
	(x_focus_changed, x_find_modifier_meanings, note_mouse_movement)
	(XTmouse_position, xt_action_hook, xt_horizontal_action_hook)
	(x_send_scroll_bar_event, xm_scroll_callback)
	(xg_scroll_callback, xaw_jump_callback, xaw_scroll_callback)
	(x_create_toolkit_scroll_bar)
	(x_create_horizontal_toolkit_scroll_bar)
	(x_set_toolkit_horizontal_scroll_bar_thumb, x_scroll_bar_create)
	(x_scroll_bar_set_handle, XTset_vertical_scroll_bar)
	(XTset_horizontal_scroll_bar, x_scroll_bar_expose)
	(x_scroll_bar_handle_click, x_scroll_bar_note_movement)
	(x_scroll_bar_report_motion)
	(x_horizontal_scroll_bar_report_motion, x_net_wm_state)
	(handle_one_xevent, XTread_socket, x_draw_bar_cursor)
	(x_draw_window_cursor, x_clear_errors)
	(x_trace_wire, x_new_font, x_set_offset, wm_supports)
	(set_wm_state, x_set_sticky, get_current_wm_state)
	(do_ewmh_fullscreen, x_handle_net_wm_state)
	(x_check_expected_move, x_sync_with_move, x_wait_for_event)
	(x_set_window_size_1, XTframe_raise_lower)
	(x_make_frame_visible, x_iconify_frame)
	(x_timeout_atimer_activated_flag, same_x_server, x_display_ok)
	(x_term_init, x_process_timeouts, x_activate_timeout_atimer)
	(x_delete_terminal, x_initialize, syms_of_xterm):
	Use bool for boolean.

2014-12-20  Paul Eggert  <eggert@cs.ucla.edu>

	* composite.h (struct composition.width): Now int
	instead of unsigned short, as we prefer signed integers.

	Let charset tick grow past USHRT_MAX
	* charset.c, charset.h (charset_ordered_list_tick):
	Now EMACS_UINT, not unsigned short.
	* fontset.c (reorder_font_vector): Allow the tick to grow to the
	maximum representable Emacs integer value before wrapping it around.

	Simplify unexec file mode setting
	* unexaix.c, unexcoff.c, unexelf.c, unexmacosx.c:
	Don't include <sys/stat.h> when no longer needed.
	(unexec): Create file with correct mode in the first place,
	rather than overwriting the mode later and fiddling with the
	global umask in the mean time.  Avoid bogus usage like
	'umask (777)', which should have been 'umask (0777)'.
	(mark_x): Remove. All callers removed.

2014-12-19  Paul Eggert  <eggert@cs.ucla.edu>

	Minor cleanups for Lisp objects and symbols
	* alloc.c (next_vector, set_next_vector):
	* lisp.h (lisp_h_INTEGERP, make_number, XFASTINT, make_natnum):
	(lisp_h_make_number) [USE_LSB_TAG]:
	Use Lisp_Int0 instead of the mystery constant 0.
	* alloc.c (mark_object): Always set and use po; that's simpler.
	(CHECK_LIVE, CHECK_ALLOCATED_AND_LIVE):
	Properly parenthesize definientia.
	* bidi.c (bidi_initialize):
	* buffer.c (init_buffer_once):
	* nsfns.m (syms_of_nsfns):
	* nsmenu.m (syms_of_nsmenu):
	* nsselect.m (syms_of_nsselect):
	Prefer DEFSYM to defining by hand.
	* buffer.c (syms_of_buffer): Omit unneeded staticpros.
	* data.c: Fix too-long line.
	* lisp.h (DECLARE_GDB_SYM): New macro.
	(DEFINE_GDB_SYMBOL_BEGIN): Use it.
	(DEFINE_GDB_SYMBOL_BEGIN, DEFINE_GDB_SYMBOL_END) [!MAIN_PROGRAM]:
	Declare the symbol, so it's visible to everywhere lisp.h is included.
	Move forward decls as far forward as they can go,
	to allow future changes to use them.

2014-12-18  Paul Eggert  <eggert@cs.ucla.edu>

	* gnutls.c: Include gnutls.h.
	This to check syms_of_gnutls's API even when !HAVE_GNUTLS.
	* image.c (svg_load): Fix pointer signedness.

2014-12-18  Martin Rudalics  <rudalics@gmx.at>

	* frame.c (frame_windows_min_size): New argument IGNORE.
	(adjust_frame_size): When called from change_frame_size call
	frame_windows_min_size with IGNORE Qt so we can ignore size
	restrictions.

2014-12-18  Eli Zaretskii  <eliz@gnu.org>

	* font.c (Ffont_info): Add more font information to the vector
	returned by the function, inspired by query-font.  Doc fix.
	(Bug#19395)

2014-12-18  Stefan Monnier  <monnier@iro.umontreal.ca>

	* keyboard.c (input_was_pending): New var.
	(read_char): Use it to make sure we only skip redisplay when we can't
	keep up with the repeat rate.

2014-12-17  Stefan Monnier  <monnier@iro.umontreal.ca>

	* keyboard.c (swallow_events): Don't redisplay if there's input pending.

2014-12-17  Ulf Jasper  <ulf.jasper@web.de>

	* image.c (svg_load): Watch out for nil value of current buffer's
	filename.  Re-enable filename thing for not-a-file case.

2014-12-17  Ulf Jasper  <ulf.jasper@web.de>

	Partially disabled previous change.

	* image.c (svg_load): Temporarily disabled filename thing for
	not-a-file case as it can cause crashs.

2014-12-17  Ulf Jasper  <ulf.jasper@web.de>

	Fix problem with images referenced within svg files. (bug#19373)

	* image.c: Additional parameter 'filename' for
	svg_load_image. Include "buffer.h".  Define library function
	rsvg_handle_set_base_uri for WINDOWSNT.
	(init_svg_functions): Initialize rsvg_handle_set_base_uri.
	(fn_rsvg_handle_set_base_uri): Define fn_rsvg_handle_set_base_uri.
	(svg_load): Pass a filename to svg_load_image: either name of
	actual file or of current buffer's file.
	(svg_load_image): New parameter 'filename', used for setting
	base_uri, necessary for loading referenced images. (bug#19373)

2014-12-16  Paul Eggert  <eggert@cs.ucla.edu>

	* lread.c (init_obarray): Declare Qt as special.
	This fixes a typo in the 2012-05-15 patch that
	tried to declare Qt as special.

2014-12-15  Stefan Monnier  <monnier@iro.umontreal.ca>

	Various fixes to use bool type and constants.
	* dispnew.c (update_single_window): Remove arg `force_p' since it's
	always true.
	* xfaces.c (clear_face_cache): Use bool for the argument type.

2014-12-15  Paul Eggert  <eggert@cs.ucla.edu>

	Correct same_at_end when restoring window points
	* fileio.c (Finsert_file_contents): Compute same_at_end character
	position using the old buffer size, not the new one, since
	restore_window_points wants the old size.
	(Bug#19161)

2014-12-14  Alan Mackenzie  <acm@muc.de>

	New feature optionally to accelerate auto-repeated scrolling.

	* xdisp.c: Remove "static" from declaration of Qfontification_functions.

	* window.c (window_scroll): Bind fontification-functions to nil
	when scrolling by whole screens and
	fast-but-imprecise-scrolling is non-nil.
	(syms_of_window): New DEFVAR_BOOL fast-but-imprecise-scrolling.

	* lisp.h (bool): Declare Qfontification_functions extern.

2014-12-14  Eli Zaretskii  <eliz@gnu.org>

	Load system's default trusted Certificate Authorities if available.
	* gnutls.c (gnutls_certificate_set_x509_system_trust)
	[GNUTLS >= 3.0.20]: Declare for WINDOWSNT.
	(init_gnutls_functions)(gnutls_certificate_set_x509_system_trust)
	[GNUTLS >= 3.0.20]: Load from shared library for WINDOWSNT.
	(fn_gnutls_certificate_set_x509_system_trust) [!WINDOWSNT]:
	Define new macro.
	(Fgnutls_boot) [GNUTLS >= 3.0.20]:
	Call gnutls_certificate_set_x509_system_trust.  Log an error message if
	it fails.

2014-12-14  Paul Eggert  <eggert@cs.ucla.edu>

	* regex.c (analyze_first): Rename from analyze_first.

2014-12-13  Paul Eggert  <eggert@cs.ucla.edu>

	* alloc.c (XMALLOC_BASE_ALIGNMENT): Use max_align_t instead of
	a hack involving a union.

2014-12-13  Eli Zaretskii  <eliz@gnu.org>

	* gnutls.c (Fgnutls_available_p, syms_of_gnutls):
	Move gnutls-available-p out of the HAVE_GNUTLS conditional, and define
	them only once.

2014-12-13  Teodor Zlatanov  <tzz@lifelogs.com>

	* emacs.c (main): Always include gnutls.h and run syms_of_gnutls.

	* gnutls.h: Always declare syms_of_gnutls.

	* gnutls.c (Fgnutls_available_p syms_of_gnutls): Move later for
	clarity.  Let the availability check return Qnil when the GnuTLS
	integration is not available, instead of erroring out.
	(Bug#19346)

2014-12-13  Eli Zaretskii  <eliz@gnu.org>

	* xdisp.c (move_it_in_display_line_to, display_line):
	Don't disallow overflow-newline-into-fringe when word-wrap is in
	effect.  (Bug#19300)

2014-12-11  Stefan Monnier  <monnier@iro.umontreal.ca>

	* fileio.c: Better preserve window-points during revert (bug#19161).
	(Qget_buffer_window_list): New var.
	(get_window_points_and_markers, restore_window_points): New functions.
	(Finsert_file_contents): Use them to save and restore window-points.

2014-12-11  Dmitry Antipov  <dmantipov@yandex.ru>

	* xterm.c (x_delete_terminal): Call emacs_close for X connection
	descriptor if called from x_connection_closed and always delete
	this descriptor from keyboard waiting set (Bug#19147).

2014-12-10  Eli Zaretskii  <eliz@gnu.org>

	* bidi.c (BIDI_CACHE_MAX_ELTS_PER_SLOT): New macro.
	(bidi_cache_max_elts): New global variable.
	(bidi_shelve_header_size): Add the sizeof bidi_cache_max_elts.
	(bidi_cache_shrink, bidi_initialize): Reset bidi_cache_max_elts to
	its initial value.
	(bidi_cache_search): Handle overflown cache.  Improve commentary.
	(bidi_cache_ensure_space): Limit allocations to the current value
	of bidi_cache_max_elts.  Force xpalloc not to over-allocate.
	If less than a full BIDI_CACHE_CHUNK is left to the limit, decrease
	the increment to not exceed the limit.
	(bidi_cache_iterator_state): Now returns non-zero if succeeded to
	cache, zero otherwise (meaning the cache overflowed).  In the
	latter case, set bidi_cache_last_idx to -1.
	(bidi_peek_at_next_level): Handle overflown cache.
	(bidi_push_it): Increase the cache limit for iterating the new object.
	(bidi_pop_it): Decrease the cache limit back to previous value.
	(bidi_shelve_cache): Shelve the current value of the cache limit.
	(bidi_unshelve_cache): Restore the value of cache limit.
	(bidi_find_bracket_pairs): If the cache overflows while looking
	for the paired bracket, give up and let bidi_resolve_neutrals
	process the bracket as a simple neutral.  (Bug#19322)
	(bidi_find_other_level_edge): If the cache overflows, fall back on
	Plan B, which effectively stops the reordering and restarts it on
	the next character (after resetting the cache).
	(bidi_move_to_visually_next): When the cache overflows, reset it
	after processing the last cached character.

2014-12-10  Paul Eggert  <eggert@cs.ucla.edu>

	Fix glitches in gnutls.c, mostly memory-related
	* gnutls.c: Sort macro definitions by name.
	(fn_gnutls_transport_set_errno): Omit unreachable definition.
	(fn_gnutls_x509_crt_get_signature): Omit unused symbol.
	(gnutls_hex_string): Arg is now unsigned char *, to avoid a cast.
	Prefer ptrdiff_t for sizes.  Check for arithmetic overflow when
	calculating string length.  Use make_uninit_string, to avoid
	copying the string.  Cast the char, not the pointer.
	(gnutls_certificate_details): Use xmalloc and xfree, not malloc
	and free.  Work even for dates past the year 9999.  Use void *
	for buffers, to avoid casts.

2014-12-09  Andy Moreton  <andrewjmoreton@gmail.com>  (tiny change)

	* gnutls.c (gnutls_protocol_get_name): Fix a copy/paste typo.

2014-12-08  Lars Magne Ingebrigtsen  <larsi@gnus.org>

	* gnutls.c (Fgnutls_peer_status): Return the key exchange, cipher
	and MAC algorithms.

2014-12-08  Stefan Monnier  <monnier@iro.umontreal.ca>

	* process.c: Whitespace and line-break nitpicks.

2014-12-08  Lars Magne Ingebrigtsen  <larsi@gnus.org>

	* gnutls.c (gnutls_certificate_details): The :signature isn't
	that useful, so remove it.
	(gnutls_certificate_details): Clean up whitespace slightly.
	(Fgnutls_peer_status): Return the Diffie-Hellman prime bits for
	the connection.
	(gnutls_certificate_details): Put :signature-algorithm back again,
	which was removed by mistake.
	(emacs_gnutls_handle_error): Fatal errors should be on level 1, so
	that they are not messaged by default (bug#16253).
	(Fgnutls_error_fatalp): Doc fix (bug#18210).

	* gnutls.c: Add Windows specs for gnutls_dh_get_prime_bits.

2014-12-07  Jan Djärv  <jan.h.d@swipnet.se>

	* nsimage.m (setPixmapData): Make bmRep local so class member is not
	set (Bug#19133).

2014-12-05  Lee Duhem  <lee.duhem@gmail.com>  (tiny change)

	* eval.c (Fsignal): Remove duplicate test.
	(Fautoload_do_load): Fix up docstring.

2014-12-05  Jan Djärv  <jan.h.d@swipnet.se>

	* nsterm.m (represented_filename, represented_frame): New variables.
	(ns_set_represented_filename): New function.
	(sendEvent:): Set represented filename here to avoid flicker,
	related to Bug#18757.

	* nsterm.h: Declare ns_set_represented_filename.

	* nsfns.m (ns_set_name_as_filename): Don't set represented filename
	at once, call ns_set_represented_filename instead.

2014-12-05  Eli Zaretskii  <eliz@gnu.org>

	* dispextern.h (enum bidi_dir_t): Force NEUTRAL_DIR to be zero.
	(struct bidi_stack): Reduce size by using bit fields and by
	packing sos, override, and isolate_status into a single 8-bit
	byte called 'flags'.

	* bidi.c (ISOLATE_STATUS, OVERRIDE): New macros.
	(bidi_push_embedding_level): Construct flags from individual
	bits.  Adapt to changes in prev_for_neutral and next_for_neutral
	members.
	(bidi_pop_embedding_level): Use ISOLATE_STATUS.  Extract 'sos'
	from flags.  Adapt to changes in prev_for_neutral,
	next_for_neutral, and last_strong members.
	(bidi_line_init): Initialize flags to zero.
	(bidi_resolve_explicit, bidi_resolve_weak, bidi_resolve_brackets)
	(bidi_resolve_neutral): Use ISOLATE_STATUS and OVERRIDE.

2014-12-04  Stefan Monnier  <monnier@iro.umontreal.ca>

	* eval.c (backtrace_eval_unrewind): Rewind also the excursions.
	(Fapply): Try and simplify the control flow.

2014-12-03  Chris Zheng  <chriszheng99@gmail.com>  (tiny change)

	* gnutls.c (init_gnutls_functions, gnutls_certificate_details):
	Use gnutls_sign_get_name directly because
	gnutls_sign_algorithm_get_name is a macro on MinGW (bug#19231).
	(init_gnutls_functions): Load missing gnutls_server_name_set.

2014-12-02  Eli Zaretskii  <eliz@gnu.org>

	* bidi.c (bidi_find_first_overridden): New function.

	* xdisp.c (Fbidi_find_overridden_directionality): New function.
	(syms_of_xdisp): Defsubr it.

	* dispextern.h (bidi_find_first_overridden): Add prototype.

2014-12-02  Jan Djärv  <jan.h.d@swipnet.se>

	* nsimage.m (initFromSkipXBM:width:height:flip:length:): Set bmRep
	to nil after release (Bug#9133).

2014-11-30  Paul Eggert  <eggert@cs.ucla.edu>

	Port better to AddressSanitizer.
	These changes suffice for temacs on x86-64 with GCC 4.9.2 and
	-fsanitize=address.
	* alloc.c (valid_pointer_p) [ADDRESS_SANITIZER]:
	Return -1 or 0, as the pipe trick doesn't work.
	* alloc.c (relocatable_string_data_p, mark_object, sweep_symbols):
	* data.c (Ffset):
	* print.c (print_object):
	When a pointer-check primitive returns -1, do not assume this
	means the pointer is valid or that the underlying system has failed.
	It could just be that addresses are being sanitized so Emacs can't
	test for pointer validity.
	* lisp.h (defined_GC_CHECK_STRING_BYTES): New constant.
	(USE_STACK_STRING) [GC_CHECK_STRING_BYTES]: Now false, since the
	string validity checker doesn't work on stack-based strings.

2014-11-29  Paul Eggert  <eggert@cs.ucla.edu>

	Improve clarity of USE_LSB_TAG definition.
	Reported by Lee Duhem.  Suggested by Andreas Schwab in:
	https://lists.gnu.org/r/emacs-devel/2014-11/msg02222.html
	* lisp.h (USE_LSB_TAG): Define in terms of the (simpler)
	VAL_MAX / 2 rather than in terms of the (more complicated)
	EMACS_INT_MAX >> GCTYPEBITS, and adjust commentary to match.

2014-11-29  Eli Zaretskii  <eliz@gnu.org>

	* xdisp.c (handle_single_display_spec): When ignoring a fringe
	bitmap display, reset the ignore_overlay_strings_at_pos_p flag.
	(next_element_from_buffer): When done with overlays, reset the
	ignore_overlay_strings_at_pos_p flag.  (Bug#19201)

2014-11-29  Eli Zaretskii  <eliz@gnu.org>

	* w32fns.c (Fw32_shell_execute): Convert forward slashes in
	DOCUMENT to backslashes, if DOCUMENT is a file.  (Bug#19141)

2014-11-29  Ulrich Müller  <ulm@gentoo.org>

	* Makefile.in (temacs$(EXEEXT)): Use consistent flag settings
	for paxctl and setfattr. Fixes temacs startup failure with
	grsecurity/PaX enabled Linux kernel (bug#19067).

2014-11-27  Oscar Fuentes  <ofv@wanadoo.es>

	* w32.c, w32heap.c, w32term.c:
	Use MINGW_W64 instead of _W64.

2014-11-27  Stefan Monnier  <monnier@iro.umontreal.ca>

	* frame.c (Fhandle_switch_frame): Deactivate shift-region (bug#19003).

2014-11-26  Lars Magne Ingebrigtsen  <larsi@gnus.org>

	* gnutls.c (gnutls_ip_address_p): New function.
	(Fgnutls_boot): Only send SNI if the host name is not an IP address.

2014-11-26  Toke Høiland-Jørgensen  <toke@toke.dk>  (tiny change)

	* gnutls.c (Fgnutls_boot): Send the server name over (bug#18208).

2014-11-25  Paul Eggert  <eggert@cs.ucla.edu>

	Fix gnutls problems caught by static checking.
	* gnutls.c (Fgnutls_boot): Remove unused local.
	(Fgnutls_boot): Fix pointer signedness.

2014-11-25  Lars Magne Ingebrigtsen  <larsi@gnus.org>

	* gnutls.c (gnutls_certificate_details): Don't include certain
	certificate details on older gnutls versions (bug#19168).
	(syms_of_gnutls): Export gnutls_peer_status_warning_describe.
	(gnutls_certificate_details): Reversed check in last checkin.

2014-11-25  Teodor Zlatanov  <tzz@lifelogs.com>

	* gnutls.c (Fgnutls_peer_status): Check GNUTLS_INITSTAGE, not gnutls_p.
	(Fgnutls_peer_status_warning_describe): Add function to describe a
	peer verification warning symbol.
	(Fgnutls_peer_status): Use it.
	(Fgnutls_boot): Use it.  Minor logging fixes.

2014-11-24  Lars Magne Ingebrigtsen  <larsi@gnus.org>

	* gnutls.c: Fix compilation warnings given fix --enable-gcc-warnings.

2014-11-24  Glenn Morris  <rgm@gnu.org>

	* emacs.c (main) <--version>: Make use of PACKAGE_NAME.

	* Makefile.in (emacs.res): Use ../nt rule, rather than duplicating it.
	(ntsource, WINDRES, EMACS_MANIFEST): Remove, now unused.

2014-11-23  Lars Magne Ingebrigtsen  <larsi@gnus.org>

	* gnutls.c: Fix Windows function definition of
	gnutls_x509_crt_get_fingerprint.

	* gnutls.c: Fix Windows return value for gnutls_pk_algorithm_get_name.

	* gnutls.c (Fgnutls_boot): Save certificate for later inspection.

	* process.h: Added more fields to Lisp_Process to track
	certificate details.

	* gnutls.c (gnutls_hex_string, gnutls_certificate_details)
	(Fgnutls_peer_status): New functions to export TLS certificate
	details to Emacs Lisp.

2014-11-23  Jan Djärv  <jan.h.d@swipnet.se>

	* gtkutil.c (gtk_adjustment_configure): Define for Gtk+ < 2.14.
	(xg_set_toolkit_horizontal_scroll_bar_thumb): Remove wrong version
	check for gtk_adjustment_configure (Bug#19149).
	(gtk_adjustment_configure): Don't use 2.14 functions (Bug#19149).

2014-11-22  Glenn Morris  <rgm@gnu.org>

	* Makefile.in (emacs.res): Add dependency on icons/hand.cur.  Use $<.

2014-11-22  Martin Rudalics  <rudalics@gmx.at>

	Don't shrink frame when using desktop-save-mode (Bug#19048).
	* w32fns.c (x_set_tool_bar_lines): Always call
	x_change_tool_bar_height (Bug#19048).
	(x_change_tool_bar_height): Mark frame as garbaged since
	adjust_frame_size might not have done that.
	* xfns.c (x_set_tool_bar_lines): Always call
	x_change_tool_bar_height (Bug#19048).
	(x_change_tool_bar_height): Mark frame as garbaged since
	adjust_frame_size might not have done that.

2014-11-21  Ulf Jasper  <ulf.jasper@web.de>

	* xml.c (parse_region): Take care of new optional parameter
	'discard-comments' of 'libxml-parse(html|xml)-region'.
	(Flibxml_parse_html_region, Flibxml_parse_xml_region):
	New optional parameter 'discard-comments'.

2014-11-17  Paul Eggert  <eggert@cs.ucla.edu>

	Improve time stamp handling, and be more consistent about it.
	* editfns.c (invalid_time): New function.
	Use it instead of 'error ("Invalid time specification")'.
	(time_add, time_subtract, time_arith, Ftime_add, Ftime_less_p)
	(decode_float_time, lisp_to_timespec, lisp_time_struct):
	New functions.
	(make_time_tail, make_time): Remove.  All uses changed to use
	new functions or plain list4i.
	(disassemble_lisp_time): Return effective length if successful.
	Check that LOW is an integer, if it's combined with other components.
	(decode_time_components): Decode into struct lisp_time, not
	struct timespec, so that we can support a wide set of times
	regardless of whether time_t is signed.  Decode plain numbers
	as seconds since the Epoch, and nil as the current time.
	(lisp_time_argument, lisp_seconds_argument, Ffloat_time):
	Reimplement in terms of new functions.
	(Fencode_time): Just use list2i.
	(syms_of_editfns): Add time-add, time-subtract, time-less-p.
	* keyboard.c (decode_timer): Don't allow the new formats (floating
	point or nil) in timers.
	* systime.h (LO_TIME_BITS): New constant.  Use it everywhere in
	place of the magic number '16'.
	(struct lisp_time): New type.
	(decode_time_components): Use it.
	(lisp_to_timespec): New decl.

2014-11-16  Lars Magne Ingebrigtsen  <larsi@gnus.org>

	* intervals.h (INTERVAL_WRITABLE_P): Check the `inhibit-read-only'
	text property.

	* callint.c (Fcall_interactively): Pass in nil as argument to
	Fbarf_if_buffer_read_only.

	* fileio.c (Finsert_file_contents): Ditto.

	* insdel.c (prepare_to_modify_buffer_1): Pass start region in.

	* textprop.c (verify_interval_modification): Check buffer
	readedness after the last interval.

	* buffer.c (Fbarf_if_buffer_read_only): Don't raise an error if
	the text at POSITION (new optional argument) has the
	`inhibit-read-only' text property set.

2014-11-16  Eli Zaretskii  <eliz@gnu.org>

	* window.c (window_scroll_pixel_based): Avoid truncation/rounding
	errors in computing the number of pixels to scroll.
	Suggested by Kelly Dean <kelly@prtime.org>.  (Bug#19060)

2014-11-16  Jan Djärv  <jan.h.d@swipnet.se>

	* nsmenu.m (update_frame_tool_bar): If tool bar changes height,
	call updateFrameSize.

	* nsterm.m (setFrame:): Remove call to display (Bug#18757).

2014-11-16  Jan Djärv  <jan.h.d@swipnet.se>

	* nsfns.m (x_set_foreground_color, x_set_background_color)
	(x_set_cursor_color, Fxw_color_values): Block/unblock input,
	use SET_FRAME_GARBAGED instead of redraw_frame (Bug#19036).

2014-11-15  Jan Djärv  <jan.h.d@swipnet.se>

	* nsterm.m (ns_send_appdefined): Check for application defined
	event on Cocoa (Bug#18993).
	(run): Restore code before the previous 18993 fix.

2014-11-14  David Reitter  <david.reitter@gmail.com>

	* nsterm.m (run): Set timeout for event loop to prevent hang.
	(Bug#18993)

2014-11-14  Paul Eggert  <eggert@cs.ucla.edu>

	* .gitignore: Add emacs-[1-9]*, to ignore files like emacs-25.0.50.1.

2014-11-14  Dmitry Antipov  <dmantipov@yandex.ru>

	* xfont.c (xfont_list_pattern): Do not allocate font entity object
	for each candidate font but attempt to reuse it from previous improper
	candidate, if any.

2014-11-13  Paul Eggert  <eggert@cs.ucla.edu>

	Avoid undefined behavior in color table hashing.
	* image.c (CT_HASH_RGB) [COLOR_TABLE_SUPPORT]: Remove, replacing with ...
	(ct_hash_rgb) [COLOR_TABLE_SUPPORT]: New function.  All uses changed.
	This function avoids undefined behavior with signed shift overflow.

2014-11-10  Eli Zaretskii  <eliz@gnu.org>

	* fileio.c (Finsert_file_contents): Invalidate buffer caches also
	when the inserted text does not need decoding.  (Bug#18982)

2014-11-10  Jan Djärv  <jan.h.d@swipnet.se>

	* nsterm.h (EmacsScroller): judge returns bool.

	* nsterm.m (ns_set_vertical_scroll_bar): Release bar.
	(ns_judge_scroll_bars): Only set removed if judge returns true.
	(judge): Returns bool == condemned.  Remove self from window.
	(setPosition:portion:whole:): Remove raise SIGIO (Bug#18757).

2014-11-10  Stefan Monnier  <monnier@iro.umontreal.ca>

	* keyboard.c (command_loop_1): Record this-command in recent-keys.
	(Frecent_keys): Rewrite. and add optional `include-cmds' arg.

2014-11-09  Jan Djärv  <jan.h.d@swipnet.se>

	* nsterm.m (ns_set_vertical_scroll_bar)
	(ns_set_horizontal_scroll_bar): Cleanup merge error.

2014-11-09  Paul Eggert  <eggert@cs.ucla.edu>

	* xgselect.c (xg_select): Don't assume n_gfds is nonnegative
	merely because tmo_in_millisec is nonnegative.  The 1st call
	to g_main_context_query could succeed while the 2nd one fails.

	* frame.c (Fcan_run_window_configuration_change_hook): Return a value.

2014-11-08  Jan Djärv  <jan.h.d@swipnet.se>

	* nsterm.m (run): Only use non-system event loop if OSX version is
	exactly 10.9 (Bug#18993).
	(ns_set_vertical_scroll_bar): Don't call bar setPosition: unless
	needed (Bug#18757).

2014-11-08  Michael Albinus  <michael.albinus@gmx.de>

	* callproc.c (encode_current_directory): Support handling of file
	names prepended by "/:".  (Bug#18891)

2014-11-08  Alan Mackenzie  <acm@muc.de>

	* syntax.c (back_comment): Fix off-by-one error (bug#18022).

2014-11-08  Dima Kogan  <dima@secretsauce.net>

	* xgselect.c (xg_select): Use g_main_context_acquire (bug#18861).

2014-11-08  Michael Albinus  <michael.albinus@gmx.de>

	* dired.c (Ffile_attributes): Return Qnil, if Fexpand_file_name
	raises an error.  (Bug#18891)

2014-11-08  Martin Rudalics  <rudalics@gmx.at>

	* frame.c (adjust_frame_size): Call x_set_window_size only if
	f->can_x_set_window_size is set.
	(make_frame): Initialize f->can_x_set_window_size and
	f->can_run_window_configuration_change_hook.
	(Fcan_run_window_configuration_change_hook): New function.
	* frame.h (frame): Split `official' into `can_x_set_window_size'
	and `can_run_window_configuration_change_hook'.
	* nsfns.m (Fx_create_frame): Set f->can_x_set_window_size.
	* w32fns.c (Fx_create_frame, x_create_tip_frame):
	Set f->can_x_set_window_size.
	* window.c (run_window_configuration_change_hook):
	Return immediately if either f->can_x_set_window_size or
	f->can_run_window_configuration_change_hook are false.
	(Fset_window_configuration): Instead of f->official set
	f->can_x_set_window_size.
	* xfns.c (Fx_create_frame, x_create_tip_frame):
	Set f->can_x_set_window_size.

2014-11-08  Jan Djärv  <jan.h.d@swipnet.se>

	* nsterm.m (EmacsScroller.dealloc): Reinstate, removed at merge
	cleanup from 2014-11-01 (Bug#18972).

2014-11-07  Stefan Monnier  <monnier@iro.umontreal.ca>

	* keyboard.c: Call gui-set-selection instead of x-set-selection.
	* xdisp.c (window-scroll-functions): Improve docstring.

2014-11-07  Paul Eggert  <eggert@cs.ucla.edu>

	Uniquify the 'size' symbol.
	* frame.c (Qsize):
	* w32notify.c (Qsize): Remove.
	* lisp.h (Qsize): New decl.
	* lread.c (Qsize): Now extern.
	* w32notify.c (syms_of_w32notify): No need to defsym.

2014-11-07  Martin Rudalics  <rudalics@gmx.at>

	* dispnew.c (change_frame_size_1): Fix call of
	adjust_frame_size.
	* frame.c (Qsize, Qframe_position, Qframe_outer_size)
	(Qframe_inner_size, Qexternal_border_size, Qtitle_height)
	(Qmenu_bar_external, Qmenu_bar_size, Qtool_bar_external)
	(Qtool_bar_size): New constants.
	(frame_inhibit_resize, adjust_frame_size): New argument to
	handle case where frame_inhibit_implied_resize is a list.
	(Fmake_terminal_frame, Fset_frame_height, Fset_frame_width)
	(Fset_frame_size, x_set_left_fringe, x_set_right_fringe)
	(x_set_right_divider_width, x_set_bottom_divider_width)
	(x_set_vertical_scroll_bars, x_set_horizontal_scroll_bars)
	(x_set_scroll_bar_width, x_set_scroll_bar_height):
	Update callers.
	(frame-inhibit-implied-resize): Rewrite doc-string.
	* frame.h (frame_inhibit_resize, adjust_frame_size):
	Fix external declarations.
	(Qframe_position, Qframe_outer_size)
	(Qframe_inner_size, Qexternal_border_size, Qtitle_height)
	(Qmenu_bar_external, Qmenu_bar_size, Qtool_bar_external)
	(Qtool_bar_size): Extern them.
	* gtkutil.c (FRAME_TOTAL_PIXEL_HEIGHT, FRAME_TOTAL_PIXEL_WIDTH)
	(xg_height_or_width_changed): Remove.
	(xg_frame_set_char_size): Adjust adjust_frame_size calls.
	(menubar_map_cb, xg_update_frame_menubar, free_frame_menubar)
	(tb_size_cb, update_frame_tool_bar, free_frame_tool_bar)
	(xg_change_toolbar_position): Call adjust_frame_size directly.
	* nsfns.m (x_set_internal_border_width, Fx_create_frame):
	Fix calls of adjust_frame_size.
	* w32fns.c (x_set_internal_border_width, x_set_menu_bar_lines)
	(Fx_create_frame, x_create_tip_frame): Adjust adjust_frame_size calls.
	(x_set_tool_bar_lines, x_change_tool_bar_height): Make sure that
	frame can get resized when tool-bar-lines parameter changes from
	or to zero.
	(Fw32_frame_menu_bar_size): Return fourth value.
	(Fw32_frame_rect): Block input around system calls
	(Fx_frame_geometry): New function.
	* w32menu.c (set_frame_menubar): Adjust adjust_frame_size call.
	* w32term.c (x_new_font): Adjust adjust_frame_size call.
	* widget.c (EmacsFrameSetCharSize): Adjust frame_inhibit_resize call.
	* window.c (Fset_window_configuration): Adjust adjust_frame_size call.
	* xfns.c (x_set_menu_bar_lines, x_set_internal_border_width)
	(Fx_create_frame): Adjust adjust_frame_size calls.
	(x_set_tool_bar_lines, x_change_tool_bar_height): Make sure that
	frame can get resized when tool-bar-lines parameter changes from
	or to zero.
	(Fx_frame_geometry): New function.
	* xmenu.c (update_frame_menubar): On Lucid call
	adjust_frame_size with one pixel less height to avoid that
	repeatedly adding/removing the menu bar grows the frame.
	(free_frame_menubar): On Motif arrange to optionally preserve
	the old frame height when removing the menu bar.
	* xterm.c (x_new_font): Adjust adjust_frame_size call.

2014-11-03  Eli Zaretskii  <eliz@gnu.org>

	* xdisp.c (Fdump_glyph_matrix, Fdump_frame_glyph_matrix): Doc fix.
	(Fdump_frame_glyph_matrix): Don't segfault if invoked on a GUI
	frame; instead, print an error message.

2014-11-03  Jan Djärv  <jan.h.d@swipnet.se>

	* nsfns.m (ns_set_doc_edited): Check for FRAME_NS (Bug#18925).

2014-11-02  Jan Djärv  <jan.h.d@swipnet.se>

	* nsimage.m (allocInitFromFile:): Initialize bmRep.
	(dealloc): Release bmRep.

	* nsterm.h (EmacsImage): Remove imageListNext, refCount, reference,
	imageListSetNext, imageListNext.

	* nsimage.m (ImageList, imageListNext, imageListSetNext:)
	(reference): Remove.
	(allocInitFromFile:): Remove searching ImageList and calling
	reference (Bug#18918).
	(dealloc): Remove handling if ImageList.

2014-11-02  Andreas Schwab  <schwab@linux-m68k.org>

	* process.c (catch_child_signal): Fix incorrect assertion.

2014-11-01  Jan Djärv  <jan.h.d@swipnet.se>

	* macfont.m (macfont_draw):
	* nsterm.m (ns_mouse_position, judge): Clean up merge conflict.

	* macfont.m (macfont_glyph_extents): Turn off synthetic bold
	if force_integral_p (i.e. no antialias).
	(macfont_draw): Check ns_antialias_text, also turn off synthetic
	bold if no antialias (Bug#18876).

	* emacs.c (main): Don't chdir to $HOME on Cocoa if --chdir
	was given (Bug#18846).

	* nsterm.h (ns_set_doc_edited): Declare taking no args.

	* nsfns.m (ns_set_doc_edited): Do all logic (check frames) here
	instead of in xdisp.c, function now takes void. (Bug#18884).

	* xdisp.c (prepare_menu_bars): Remove HAVE_NS code.
	(redisplay_internal): Call ns_set_doc_edited if HAVE_NS (Bug#18884).

	* nsterm.h (EmacsScroller): Replace Lisp_Object win with
	struct window* (Bug#18889).
	Remove getMouseMotionPart.
	(ns_output): Make icon_top/left int.

	* nsfns.m (x_icon): icon_top/left is int.

	* nsterm.m (ns_mouse_position): Remove unused code.
	(initFrame:window:, dealloc): Use window instead of win.
	(getMouseMotionPart:window:x:y:): Remove, unused.
	(sendScrollEventAtLoc:fromEvent:): Make Lisp_Object win from window.

2014-11-01  Eli Zaretskii  <eliz@gnu.org>

	* keyboard.c (readable_events): When FLAGS include
	READABLE_EVENTS_FILTER_EVENTS, ignore BUFFER_SWITCH_EVENT events.
	This avoids returning non-nil from input-pending-p when only such
	events are in the queue.  (Bug#18856)

2014-11-01  Jan Djärv  <jan.h.d@swipnet.se>

	* nsselect.m (QCLIPBOARD, QSECONDARY, QTEXT, QFILE_NAME)
	(NXPrimaryPboard, NXSecondaryPboard): Declare static.
	(Qforeign_selection): Remove.
	(ns_get_local_selection): Identation fix.
	(syms_of_nsselect): Remove Qforeign_selection, ns-lost-selection-hooks

	* nsselect.m (ns_get_local_selection): Remove calling of
	functions in Vselection_converter_alist (Bug#18911).
	(syms_of_nsselect): Remove Vselection_converter_alist.

2014-10-31  Dmitry Antipov  <dmantipov@yandex.ru>

	* font.c (copy_font_spec): Redesign to avoid Fcopy_alist
	and unnecessary initialization.  Adjust comments.

2014-10-30  Eli Zaretskii  <eliz@gnu.org>

	* bidi.c (bidi_cache_reset_to): Invalidate bidi_cache_last_idx by
	setting it to -1.
	(bidi_find_bracket_pairs): Pass to bidi_cache_reset_to a relative
	index, not an absolute one, as that's what the function expects.

2014-10-30  Dmitry Antipov  <dmantipov@yandex.ru>

	* xfaces.c (Finternal_set_lisp_face_attribute): Don't try to realize
	font on an initial frame when running as a daemon (Bug#18869).

	* fontset.c (toplevel): Adjust comment to match 2014-06-19 change.

2014-10-30  Eli Zaretskii  <eliz@gnu.org>

	* fileio.c (Fexpand_file_name): Use make_unibyte_string, not
	build_string, when importing a home directory.  (Bug#18873)

2014-12-27  Eli Zaretskii  <eliz@gnu.org>

	* dispnew.c (buffer_posn_from_coords):
	Use WINDOW_WANTS_HEADER_LINE_P, not WINDOW_WANTS_MODELINE_P, to
	account for the header-line height.  (Bug#18839)

2014-10-28  Ulf Jasper  <ulf.jasper@web.de>

	* xml.c (parse_region): Do not forget the first document child.

2014-10-25  Jan Djärv  <jan.h.d@swipnet.se>

	* nsselect.m: pasteboard_changecount is new.
	(ns_store_pb_change_count, ns_get_pb_change_count)
	(ns_get_our_change_count_for): New functions.
	(ns_string_to_pasteboard_internal): Correct comment.
	type => gtype in eassert, Call ns_store_pb_change_count.
	(Fns_own_selection_internal): Remove data, use value (Bug#18799).
	(Fns_disown_selection_internal, Fns_selection_owner_p):
	Replace Vselection_alist check, with change count check.
	(Fns_get_selection): Initialize val to Qnil.  Only get local
	selection if change counts match (Bug#18799).
	(nxatoms_of_nsselect): Initialize pasteboard_changecount.

2014-10-25  Noam Postavsky  <npostavs@users.sourceforget.net>

	* w32proc.c (create_child): If calling a quoted batch file,
	pass NULL for exe.  (Bug#18745)

2014-10-24  Eli Zaretskii  <eliz@gnu.org>

	* bidi.c (bidi_resolve_explicit, bidi_find_bracket_pairs)
	(bidi_resolve_brackets): Use end of string position rather than ZV
	when iterating over a string.  (Bug#18815)

2014-10-24  Martin Rudalics  <rudalics@gmx.at>

	* keyboard.c (make_lispy_position): Return coordinates also when
	on scroll bars, fringes, margins or not in a window.
	* xdisp.c (show_mouse_face): Don't change cursor face during
	mouse tracking.

2014-10-23  Martin Rudalics  <rudalics@gmx.at>

	* frame.c (Fset_frame_height, Fset_frame_width, Fset_frame_size)
	(frame_resize_pixelwise, frame_inhibit_implied_resize):
	Fix doc-strings (Bug#18789).

2014-10-23  Paul Eggert  <eggert@cs.ucla.edu>

	* Makefile.in (ACLOCAL_INPUTS): Omit unnecessary use of 'wildcard'.

2014-10-22  Eli Zaretskii  <eliz@gnu.org>

	Optimize redisplay of simple bracketed text.
	* bidi.c (bidi_cache_reset_to): New function.
	(bidi_cache_reset): Call it.
	(bidi_init_it, bidi_line_init): Initialize the bracket_pairing_pos
	member to -1.
	(bidi_resolve_explicit): Reset bracket_pairing_pos and
	bracket_enclosed_type only if bracket_pairing_pos's value is not
	ZV.
	(MAX_BPA_STACK): Make sure the value is signed.
	(PUSH_BPA_STACK): If the BPA stack overflows, don't bail out, but
	stop pushing values onto the stack.
	(bidi_find_bracket_pairs): If the bracketed text is only on the
	base embedding level, remove all the states cached by this
	function from the cache, and return zero, so that the brackets in
	this segment of text are processed as normal neutrals.
	(bidi_resolve_brackets): Detect the brackets that are to be
	processed as neutrals, and don't call bidi_find_bracket_pairs on
	them.  (Bug#18778)

2014-10-21  Stefan Monnier  <monnier@iro.umontreal.ca>

	* w32select.c (Fw32_selection_exists_p): Rename from
	Fx_selection_exists_p.
	(syms_of_w32select): Adjust accordingly.

	* w16select.c (Fw16_selection_exists_p): Rename from
	Fx_selection_exists_p.
	(syms_of_win16select): Adjust accordingly.

	* nsselect.m (ns_get_local_selection): Signal error rather than `quit'.
	(Fns_own_selection_internal): Tighten scoping.
	(Fns_selection_exists_p): Rename from Fx_selection_exists_p.
	(Fns_get_selection): Rename from Fx_get_selection_internal.
	(Fns_get_selection_internal, Fns_store_selection_internal):
	Remove functions.
	(syms_of_nsselect): Adjust accordingly.

2014-10-21  Martin Rudalics  <rudalics@gmx.at>

	* w32fns.c (Fw32_frame_menu_bar_size): New function.
	* w32term.c (x_set_window_size): Account for wrapped menu bar
	lines when setting up frame height (Bug#15174 and Bug#18720).
	(w32_add_wrapped_menu_bar_lines): New variable.

2014-10-21  Stefan Monnier  <monnier@iro.umontreal.ca>

	* xdisp.c (redisplay_window): Re-run pre-redisplay-function after we
	move point.

2014-10-20  Glenn Morris  <rgm@gnu.org>

	* Merge in all changes up to 24.4 release.

2014-10-19  Jan Djärv  <jan.h.d@swipnet.se>

	* gtkutil.c (xg_update_menubar, xg_update_menu_item): Only call
	g_object_notify for label if Gtk+ >= 2.16 (Bug#16522).

	* xterm.h (x_output): Remove net_wm_state_hidden_seen.

	* xterm.c (handle_one_xevent): Check return value from
	x_handle_net_wm_state, remove net_wm_state_hidden_seen (Bug#18722).
	(get_current_wm_state): Remove net_wm_state_hidden_seen setting.

	* gtkutil.c (create_dialog): Don't use gtk_dialog_get_action_area on
	Gt+ >= 3.12, or gtk_misc_set_alignment on Gtk+ >= 3.14 (Bug#18674).
	(make_widget_for_menu_item): Don't use gtk_misc_set_alignment on
	Gtk+ >= 3.14 (Bug#18674).
	(update_frame_tool_bar): Don't use  gtk_misc_set_padding on
	Gtk+ >= 3.14 (Bug#18674).

2014-10-18  Paul Eggert  <eggert@cs.ucla.edu>

	* gtkutil.c: Remove no-longer-used code.
	(xg_update_menubar): Remove unused local and unnecessary call to
	gtk_menu_item_get_submenu.
	(XG_TOOL_BAR_PROXY_BUTTON, xg_tool_bar_proxy_callback)
	(xg_get_tool_bar_widgets, xg_tool_bar_proxy_help_callback)
	(TOOLBAR_TOP_WIDGET): Remove; no longer used.

2014-10-18  Jan Djärv  <jan.h.d@swipnet.se>

	* xfns.c (syms_of_xfns): Remove x-gtk-whole-detached-tool-bar.

	* xterm.h (handlebox_widget): Remove.

	* xmenu.c (set_frame_menubar): Remove GTK block that calls
	xg_have_tear_offs.

	* gtkutil.h (xg_have_tear_offs): Remove declaration.

	* gtkutil.c (XG_TEXT_CANCEL, XG_TEXT_OPEN, XG_TEXT_OK): New defines
	to handle Gtk versions.
	(xg_get_file_with_chooser): Use them.
	(xg_have_tear_offs, tearoff_remove, tearoff_activate):
	Remove (create_menus): Remove teroff argument and code.
	Remove call to gtk_menu_set_title.
	(xg_update_menubar, xg_update_submenu): Remove tearoff code.
	Adjust args to create_menus.
	(xg_tool_bar_menu_proxy, xg_tool_bar_detach_callback)
	(xg_tool_bar_attach_callback, TOOLBAR_TOP_WIDGET): Remove.
	(xg_pack_tool_bar): Replace TOOLBAR_TOP_WIDGET, remove detach code.
	(xg_make_tool_item): Remove detach code.
	(xg_update_tool_bar_sizes): Replace TOOLBAR_TOP_WIDGET.
	(find_icon_from_name): New function.
	(update_frame_tool_bar): Remove GtkStockItem code, move to
	find_icon_from_name.  Let stock be a list of icon names to try.
	Only use gtk_image_new_from_stock on Gtk+ < 3.10.
	Replace TOOLBAR_TOP_WIDGET.
	(free_frame_tool_bar, xg_change_toolbar_position ):
	Replace TOOLBAR_TOP_WIDGET.
	(xg_initialize): Remove tearoff code.

2014-10-18  Eli Zaretskii  <eliz@gnu.org>

	* xterm.c (x_draw_bar_cursor, x_draw_hollow_cursor): Subtract 1
	pixel from the window's cursor glyph width, since X renders hollow
	blocks 1 pixel wider than the 'width' parameter.

	* xdisp.c (get_phys_cursor_geometry): Don't subtract 1 pixel from
	glyph->pixel_width; this is now done in xterm.c.

	Fix reordering of bracket characters in isolates.
	* bidi.c (bidi_cache_find): Rename the argument NEUTRALS_OK to
	RESOLVED_ONLY; when non-zero, return from the cache only fully
	resolved states.  All callers changed.
	(CANONICAL_EQU): New macro.
	(PUSH_BPA_STACK): Use it to push onto the BPA stack the canonical
	equivalent of the paired closing bracket character.
	(bidi_find_bracket_pairs): Set the bracket_pairing_pos member to
	the default non-negative value, to be checked later in
	bidi_resolve_brackets.  Use CANONICAL_EQU to test candidate
	characters against those pushed onto the BPA stack.
	(bidi_record_type_for_neutral): New function.
	(bidi_resolve_brackets): Record next_for_neutral and
	prev_for_neutral when embedding level gets pushed.  Force
	resolution of bracket pairs when entering a level run that was not
	yet BPA-resolved.
	(bidi_resolve_neutral): Add assertions before calling
	bidi_resolve_neutral_1.
	(bidi_level_of_next_char): Remove the code that attempted to
	resolve unresolved neutrals; that is now done by
	bidi_resolve_neutral.

	* w32select.c (owner_callback): Mark with ALIGN_STACK attribute.

2014-10-17  Eli Zaretskii  <eliz@gnu.org>

	* xterm.c (x_draw_hollow_cursor): Fix display of hollow cursor on
	1-pixel R2L characters.
	Reported by Dmitry Antipov <dmantipov@yandex.ru>, see
	https://lists.gnu.org/r/emacs-devel/2014-10/msg00518.html.

2014-10-16  Eli Zaretskii  <eliz@gnu.org>

	* bidi.c (bidi_find_bracket_pairs): Avoid a loop that does nothing
	useful.

2014-10-15  Paul Eggert  <eggert@cs.ucla.edu>

	* bidi.c (bidi_find_bracket_pairs): Initialize local var.
	This pacifies GCC 4.9.1 with --enable-gcc-warnings.
	It's not clear to me whether the initialization is needed,
	but it can't hurt so I played it safe.

2014-10-15  Stefan Monnier  <monnier@iro.umontreal.ca>

	* lisp.mk (lisp): Add emacs-lisp/eldoc.elc.

2014-10-15  Eli Zaretskii  <eliz@gnu.org>

	Update the bidirectional reordering engine for Unicode 6.3 and 7.0.
	* bidi.c (bidi_ignore_explicit_marks_for_paragraph_level):
	Remove variable.
	(bidi_get_type): Return the isolate initiators and terminator types.
	(bidi_isolate_fmt_char, bidi_paired_bracket_type)
	(bidi_fetch_char_skip_isolates, find_first_strong_char)
	(bidi_find_bracket_pairs, bidi_resolve_brackets): New functions.
	(bidi_set_sos_type): Rename from bidi_set_sor_type and updated
	for the new features.
	(bidi_push_embedding_level, bidi_pop_embedding_level): Update to
	push and pop correctly for isolates.
	(bidi_remember_char): Modify to accept an additional argument
	and record the bidi type according to its value.
	(bidi_cache_iterator_state): Accept an additional argument to only
	update an existing state.  Handle the new members of struct bidi_it.
	(bidi_cache_find): Arguments changed: no longer accepts a level,
	instead accepts a flag telling it whether it is okay to return
	unresolved neutrals.
	(bidi_initialize): Initiate and staticpro the bracket-type uniprop
	table.  Initialize new isolate-related members.
	(bidi_paragraph_init): Some code factored out into
	find_first_strong_char.
	(bidi_resolve_explicit_1): Function deleted, its code incorporated
	into bidi_resolve_explicit.
	(bidi_resolve_explicit): Support the isolate initiators and
	terminator.  Fix handling of embeddings and overrides according to
	new UBA requirements.  Record information about previously seen
	characters here (moved from bidi_level_of_next_char).
	(bidi_resolve_weak): Adapt to changes in struct members.
	(FLAG_EMBEDDING_INSIDE, FLAG_OPPOSITE_INSIDE, MAX_BPA_STACK)
	(STORE_BRACKET_CHARPOS, PUSH_BPA_STACK): New macros.
	(bidi_resolve_neutral): Call bidi_resolve_brackets to handle the
	paired bracket resolution.  Handle isolate initiators and
	terminator.
	(bidi_type_of_next_char): Remove unneeded code for BN limit.
	(bidi_level_of_next_char): Move the code that records information
	about previous characters to bidi_resolve_explicit.  Fix logic of
	resolving neutrals and make sure their cache entries are updated.
	Remove now unneeded special handling of PDF level.

	* dispextern.h (struct glyph): Enlarge the width of resolved_level.
	(BIDI_MAXDEPTH): New macro, renamed from BIDI_MAXLEVEL and
	enlarged per Unicode 6.3.
	(enum bidi_bracket_type_t): New data type.
	(struct bidi_saved_info): Leave only 2 type members out of 4.
	Remove bytepos.
	(struct bidi_stack): Add members necessary to support isolating
	sequences.
	(struct bidi_it): Add new members necessary to support isolating
	sequences and bracket pair resolution.

	* xdisp.c (Fbidi_resolved_levels): New function.
	(syms_of_xdisp): Defsubr it.
	(append_glyph, append_composite_glyph, produce_image_glyph)
	(append_stretch_glyph, append_glyphless_glyph): Convert aborts to
	assertions.
	(syms_of_xdisp) <inhibit-bidi-mirroring>: New variable.

	* term.c (append_glyph, append_composite_glyph)
	(append_glyphless_glyph): Convert aborts to assertions.

	* .gdbinit (pgx): Display the character codepoint, resolved level,
	and bidi type also for glyphless glyphs.

2014-10-15  Dmitry Antipov  <dmantipov@yandex.ru>

	Avoid unwanted point motion in Fline_beginning_position.
	* lisp.h (scan_newline_from_point): Add prototype.
	* search.c (scan_newline_from_point): New function, refactored from...
	* cmds.c (Fforward_line): ...adjusted user.
	* editfns.c (Fline_beginning_position): Use scan_newline_from_point
	and simplify the former since the latter doesn't move point.

2014-10-14  Dmitry Antipov  <dmantipov@yandex.ru>

	Cleanup terminal handling code.
	* dispextern.h (get_named_tty): Remove prototype but...
	* termhooks.h (get_named_terminal): ...resurrect it under
	more meaningful name.
	(get_terminal): Likewise, but with...
	(decode_live_terminal): ...this name.
	(decode_tty_terminal): Add prototype.
	* term.c (get_tty_terminal): Remove.
	(get_named_tty): Remove.
	(Ftty_display_color_p, Ftty_display_color_cells, Ftty_type)
	(Fcontrolling_tty_p, Fsuspend_tty, Fresume_tty):
	Use decode_tty_terminal.
	(Ftty_no_underline, Ftty_top_frame): Use decode_live_terminal.
	* terminal.c (get_terminal): Refactor to...
	(decode_terminal, decode_live_terminal): ...new functions.
	(decode_tty_terminal): Replacement for get_tty_terminal.
	(get_named_terminal): Likewise for get_named_tty.
	* coding.c (Fset_terminal_coding_system_internal)
	(Fterminal_coding_system, Fset_keyboard_coding_system_internal):
	(Fkeyboard_coding_system):
	* composite.c (Fcomposition_get_gstring):
	* dispnew.c (Fsend_string_to_terminal):
	* frame.c (Fmake_terminal_frame):
	* nsfns.m (check_ns_display_info):
	* w32fns.c, xfns.c (check_x_display_info):
	* xselect.c (frame_for_x_selection): Use decode_live_terminal.
	* keyboard.c (handle_interrupt_signal, handle_interrupt)
	(Fset_quit_char): Use get_named_terminal.
	(Fset_output_flow_control, Fset_input_meta_mode):
	Use decode_tty_terminal.

2014-10-13  Eli Zaretskii  <eliz@gnu.org>

	* w32term.h (ALIGN_STACK): Use _WIN64, not _W64, to distinguish
	between 32-bit and 64-bit MinGW builds.  (Bug#18699)

2014-10-12  Paul Eggert  <eggert@cs.ucla.edu>

	Fix port to Debian GNU/kFreeBSD 7 (wheezy) (Bug#18666).
	* process.c (accept4) [!HAVE_ACCEPT4]: New macro.

2014-10-12  Stefan Monnier  <monnier@iro.umontreal.ca>

	* frame.c (Fmouse_pixel_position): Call Vmouse_position_function
	(bug#18638).

2014-10-12  Paul Eggert  <eggert@cs.ucla.edu>

	* editfns.c (dump_tz_string): No longer const.
	It might be modified.

	* nsmenu.m (clear): Assume OS X 10.6 or later.

2014-10-12  Jan Djärv  <jan.h.d@swipnet.se>

	* unexmacosx.c: Remove include ppc/reloc.h.
	(unrelocate, copy_dysymtab): Remove PPC code.
	(rebase_reloc_address): Remove, only used for PPC:

	* nsterm.m: Always include macfont.h on COCOA.
	(ns_update_auto_hide_menu_bar, ns_draw_fringe_bitmap)
	(ns_dumpglyphs_image, ns_check_menu_open)
	(applicationDidFinishLaunching)
	(antialiasThresholdDidChange:)
	(keyDown:, toggleFullScreen:, setPosition:portion:whole:):
	Remove checks for OSX <= 10.5/10.6.
	(changeFont:): Use macfont on COCOA, nsfont on GNUSTEP.
	(syms_of_nsterm): Call syms_of_macfont on COCOA, syms_of_nsfont on
	GNUSTEP.

	* nsterm.h (MAC_OS_X_VERSION_10_4, MAC_OS_X_VERSION_10_5): Remove.
	(NS_HAVE_NSINTEGER): Remove block.
	Remove >= OSX 10.6 tests.

	* nsmenu.m (NSMenuDidBeginTrackingNotification): Remove.
	(x_activate_menubar, trackingNotification:): Remove check for
	OSX >= 10.5.
	(menuNeedsUpdate:): Remove check for OSX < 10.5.

	* nsimage.m (allocInitFromFile:): Remove code for OSX < 10.6.

	* nsfns.m: Always include macfont.h on COCOA.
	(ns_filename_from_panel, ns_directory_from_panel)
	(Fx_create_frame, Fns_popup_font_panel, ns_run_file_dialog)
	(Fns_read_file_name, Fns_list_services): Remove code for OSX < 10.6

	* macfont.m: Remove >= 1050 check.
	(macfont_create_family_with_symbol)
	(macfont_get_glyph_for_character)
	(mac_font_get_glyphs_for_variants)
	(mac_ctfont_create_available_families, syms_of_macfont):
	Remove code for OSX < 10.6.
	(mac_font_family_group, mac_font_family_compare): Remove, only used
	for OSX < 10.6.

	* macfont.h (MAC_FONT_FORMAT_ATTRIBUTE, MAC_FONT_FORMAT_BITMAP)
	(mac_font_copy_non_synthetic_table): Remove versions for OSX < 10.6

	* Makefile.in: Replace nsfont.o macfont.o with ns_fontfile in
	comment.

2014-10-12  Paul Eggert  <eggert@cs.ucla.edu>

	Fix putenv race conditions with undefined behavior (Bug#8705).
	Do all putenv calls before Emacs creates any threads.
	Use a safer way to modify the TZ environment variable in the
	presence of multiple threads.  For further thread-safety,
	prefer localtime_r and gmtime_r to localtime and gmtime,
	and prefer struct tm's tm_gmtoff (if available) to calling
	both localtime_r and gmtime_r.
	* dbusbind.c (Fdbus__init_bus): Move xputenv call from here ...
	(init_dbusbind): ... to this new function.
	* emacs.c (main) [HAVE_DBUS]: Call it before creating threads.
	* xterm.c (x_term_init): Move xputenv call from here ...
	(init_xterm): ... to this new function.
	* emacs.c (main) [USE_GTK]: Call it before creating threads.
	* editfns.c (HAVE_TM_GMTOFF): Default to false.
	(dump_tz_string): New constant.
	(init_editfns): Use it.  This centralizes the dump_tz stuff.
	Call set_time_zone_rule here, so that its xputenv is done
	before Emacs goes multithreaded.
	(mktime_z) [!HAVE_TZALLOC]: New function, which is typically
	thread-safe enough for Emacs.
	(format_time_string, Fdecode_time, Fcurrent_time_string)
	(Fcurrent_time_zone):
	Prefer localtime_r and gmtime_r, which are more thread-safe, to
	localtime and gmtime.  Remove now-unnecessary calls to block_input.
	(tm_gmtoff): New static function.
	(Fdecode_time, Fcurrent_time_zone): Use it.
	(Fencode_time): Use mktime_z, for better thread-safety.
	(set_time_zone_rule): Now static.  Rewrite to be mostly thread-safe,
	i.e., not quite thread-safe but good enough for Emacs typical usage.
	Do not reclaim storage that is in the environment; let it leak.
	Always call tzset, since localtime_r does not.
	* emacs.c (dump_tz, Fdump_emacs) [HAVE_TZSET]: Remove dump_tz stuff.
	This is now done in init_editfns.
	* systime.h (mktime_z, timezone_t, tzalloc, tzfree) [!HAVE_TZALLOC]:
	New macros and declarations, for platforms lacking tzalloc & friends.

2014-10-09  Paul Eggert  <eggert@cs.ucla.edu>

	* lisp.h (USE_STACK_STRING): Now true only if USE_STACK CONS.
	On x86 platforms this works around GCC bug 63495
	<https://gcc.gnu.org/bugzilla/show_bug.cgi?id=63495>,
	and more generally should fix a portability problem in Emacs.
	Reported by Stefan Monnier in:
	https://lists.gnu.org/r/emacs-devel/2014-10/msg00261.html

2014-10-08  Leo Liu  <sdl.web@gmail.com>

	Enhance terpri to allow conditionally output a newline.  (Bug#18652)
	* keymap.c (describe_vector_princ):
	* keyboard.c (Fcommand_error_default_function): Adapt to change to
	Fterpri.

	* print.c (printchar_stdout_last): Declare.
	(printchar): Record the last char written to stdout.
	(Fterpri): Add optional argument ENSURE.

2014-10-08  Eli Zaretskii  <eliz@gnu.org>

	* w32inevt.c (maybe_generate_resize_event): Pass non-zero as the
	DELAY argument to change_frame_size, so that the frame size
	changes, if any are needed, are delayed until the next redisplay.
	This is to avoid a too early QUIT inside change_frame_size, when
	it calls Lisp in frame_windows_min_size, in case one of the events
	we've read sets the quit-flag.  (Bug#18649)

	* w32fns.c (check_x_display_info): Accept terminal objects as
	argument, to follow what xfns.c does.

2014-10-07  Glenn Morris  <rgm@gnu.org>

	* Makefile.in ($(srcdir)/macuvs.h)
	($(lispsource)/international/charprop.el): Add explicit FORCE.

2014-10-07  Eli Zaretskii  <eliz@gnu.org>

	* decompress.c (init_zlib_functions): Move the message about zlib
	being unavailable from here...
	(Fzlib_decompress_region): ...to here.  (Bug#18650)

2014-10-07  Dmitry Antipov  <dmantipov@yandex.ru>

	* font.c (Ffont_get_glyphs): Use validate_subarray and fix
	the case where an optional string is used.  Adjust docstring.

2014-10-06  Stefan Monnier  <monnier@iro.umontreal.ca>

	* lisp.mk (lisp): Remove w32-common-fns.elc.

2014-10-05  Paul Eggert  <eggert@cs.ucla.edu>

	* keyboard.c (Qleft, Qright): Remove duplicate definitions (Bug#9927).
	These were already defined in buffer.c, and the duplicate
	definitions cause problems on platforms like 'gcc -fno-common'.
	Reported by Peter Dyballa in: https://bugs.gnu.org/9927#137

2014-10-05  Jan Djärv  <jan.h.d@swipnet.se>

	* nsterm.m (updateFrameSize:): Only call update_frame_tool_bar
	if toolbar is visible.

	* nsfont.m (nsfont_draw): Use CGFloat for GNUstep newer than
	0.23 (Bug#18030).

	* nsterm.m (syms_of_nsterm): ns-use-fullscreen-animation is new.
	(toggleFullScreen:): Use ns-use-fullscreen-animation for animate.
	(ns_select, ns_read_socket): Use unwind_protect to decrease
	apploopnr (Bug#18345).
	(ns_draw_window_cursor): Adjust y for hbar cursor only if smaller than
	line height (Bug#17977).

	* macfont.m: Fix indentation and import changes from macport 24.3.94.
	(macfont_closest_traits_index): New function.
	(macfont_closest_traits_index_p): Rename from
	macfont_closest_traits_index.
	(macfont_list): Use macfont_closest_traits_index_p.

2014-10-05  K. Handa  <handa@gnu.org>

	* coding.c (detect_coding_iso_2022): Set coding->rejected
	correctly when an invalid escape sequence is found (Bug#18610).

2014-10-04  Jan Djärv  <jan.h.d@swipnet.se>

	* gtkutil.c (create_menus): Only add tearoffs to empty menus.
	(xg_update_submenu): Remove has_tearoff_p, pass 1 to create_menus
	for add_tearoff_p.

2014-10-04  Martin Rudalics  <rudalics@gmx.at>

	* buffer.c (scroll_bar_width, scroll_bar_height):
	Fix doc-strings.
	* window.c (Fset_window_scroll_bars): Fix doc-string.
	(Fwindow_scroll_bars): Have it return what the doc-string says.

2014-10-03  Eli Zaretskii  <eliz@gnu.org>

	* xdisp.c (move_it_by_lines): Call reseat_1 after moving the
	iterator backwards, to resync the bidi iterator.  (Bug#18584)

2014-10-03  Dmitry Antipov  <dmantipov@yandex.ru>

	Consistently use min and max macros from lisp.h.
	* coding.c (min, max):
	* font.c (MAX):
	* unexhp9k800.c (min):
	* unexw32.c (min, max): Use definitions from lisp.h.
	* regex.c (MAX, MIN) [!emacs]: Define own max and min as such.
	Adjust users.
	* gmalloc.c (min): Tiny style change.

	* fileio.c (emacs_readlinkat, Finsert_file_contents):
	* w32fns.c, xfns.c (x_create_tip_frame): Use AUTO_STRING.

2014-10-03  Paul Eggert  <eggert@cs.ucla.edu>

	Fix x-focus-frame bug with "Not an in-range integer" (Bug#18586).
	* xselect.c (X_SHRT_MAX, X_SHRT_MIN, X_LONG_MAX, X_LONG_MIN)
	(X_ULONG_MAX): Move these macros to xterm.h.
	(x_fill_property_data): Be more generous about allowing either
	signed or unsigned data of the appropriate width.
	* xterm.h (x_display_set_last_user_time): New function.
	All setters of last_user_time changd to use this function.
	If ENABLE_CHECKING, check that the times are in range.

2014-10-02  Eli Zaretskii  <eliz@gnu.org>

	* dispnew.c (adjust_decode_mode_spec_buffer): Use 'int' instead of
	'ssize_t'.  Suggested by Paul Eggert <eggert@cs.ucla.edu>.

2014-10-02  Jan Djärv  <jan.h.d@swipnet.se>

	* xfaces.c (Finternal_set_lisp_face_attribute): Don't try to
	make a font_object from a tty frame (Bug#18573).
	(Finternal_set_lisp_face_attribute): Add FIXME comment.

2014-10-02  Dmitry Antipov  <dmantipov@yandex.ru>

	* alloc.c (mark_overlay): Assume that overlay boundaries are
	always markers.  Add comment.
	* lread.c (read_internal_start): Use convenient validate_subarray.
	Adjust docstring.
	(Fread_from_string): Adjust docstring.

2014-10-02  Stefan Monnier  <monnier@iro.umontreal.ca>

	* lisp.h: Fix up compilation for USE_STACK_LISP_OBJECTS=false.

	* nsselect.m (ns-own-selection-internal, ns-disown-selection-internal):
	Rename from the "x-" prefix.

2014-10-01  Stefan Monnier  <monnier@iro.umontreal.ca>

	* xselect.c (selection-converter-alist): Fix docstring.

2014-10-01  Eli Zaretskii  <eliz@gnu.org>

	* w32proc.c (sys_spawnve): Avoid modification of the CMDNAME
	argument passed by the caller, when we mirror all slashes into
	backslashes.

2014-10-01  Dmitry Antipov  <dmantipov@yandex.ru>

	* gtkutil.c (xg_set_toolkit_horizontal_scroll_bar_thumb):
	Resurrect old code and fix compilation with GTK < 2.13.6.

2014-10-01  Paul Eggert  <eggert@cs.ucla.edu>

	Use AUTO_CONS instead of SCOPED_CONS, etc.
	* frame.h (AUTO_FRAME_ARG): Rename from FRAME_PARAMETER.
	* lisp.h (AUTO_CONS): Rename from scoped_cons.
	(AUTO_LIST1): Rename from scoped_list1.
	(AUTO_LIST2): Rename from scoped_list2.
	(AUTO_LIST3): Rename from scoped_list3.
	(AUTO_LIST4): Rename from scoped_list4.
	(AUTO_STRING): Rename from SCOPED_STRING.
	* frame.h (AUTO_FRAME_ARG):
	* lisp.h (AUTO_CONS, AUTO_LIST1, AUTO_LIST2, AUTO_LIST3)
	(AUTO_LIST4, AUTO_STRING):
	Prepend a new argument 'name'.
	Declare a variable instead of yielding a value.
	All uses changed.
	* lisp.h (STACK_CONS, AUTO_CONS_EXPR): New internal macros.

2014-09-30  Eli Zaretskii  <eliz@gnu.org>

	* w32fns.c (w32_createwindow): Accept an additional argument, an
	array of 2 values specifying the coordinates of the frame's
	top-left corner.  Use these values instead of calling x_get_arg,
	which can cons Lisp objects, and therefore cannot be called except
	from the main thread.  Remove redundant tests for the default
	values.
	(my_create_window): Move the calculation of the coordinates of the
	frame's top-left edge here.  Pass them to the input thread via the
	second parameter of the WM_EMACS_CREATEWINDOW message.
	See https://lists.gnu.org/r/emacs-devel/2014-09/msg00892.html
	for the details.

2014-09-30  Eli Zaretskii  <eliz@gnu.org>

	* xdisp.c (cursor_row_fully_visible_p): Update commentary.
	(redisplay_window): Treat the frame's frozen_window_starts flag
	the same way as the optional_new_start flag for the window: only
	obey it if the glyph row showing point will be fully visible.
	Likewise when the window start is in a continuation line.  If,
	after trying everything under the 'force_start' label, point is
	still not fully visible, give up and scroll the window.
	Add debugging traces.  (Bug#18545)

	* window.c (Frecenter): Set the window's redisplay flag.

2014-09-30  Eli Zaretskii  <eliz@gnu.org>

	* w32term.c (w32_read_socket): Don't use frame dimensions for
	resizing if GetClientRect returned an empty (0, 0, 0, 0)
	rectangle.  Check the return value of GetClientRect, and don't use
	the results if it didn't succeed.

	* dispnew.c (change_frame_size_1): Recompute the frame dimensions
	in columns and lines after correcting the pixel dimensions in
	check_frame_size.
	(adjust_decode_mode_spec_buffer): Add assertion to avoid passing
	negative values to xrealloc.  (Bug#18528)

2014-09-30  Paul Eggert  <eggert@cs.ucla.edu>

	* alloc.c: Remove now-unnecessary check.
	Suggested by Dmitry Antipov in:
	https://lists.gnu.org/r/emacs-devel/2014-09/msg00891.html

	* xterm.c (x_term_init): Allocate temps on stack, not on heap.

	* frame.c (x_set_frame_parameters): Port --enable-gcc-warnings
	to Ubuntu 14.04.1 x86-64.

	Simplify stack-allocated Lisp objects, and make them more portable.
	The build_local_string macro was used in two ways: (1) string
	literals for which scoped allocation suffices, and (2) file name
	components, where it's not safe in general to assume bounded-size
	ASCII data.  Simplify by defining a new macro SCOPED_STRING that
	allocates a block-scope string, and by using SCOPED_STRING for (1)
	and build_string for (2).  Furthermore, actually use stack
	allocation only for objects known to have sufficient alignment.
	This simpler implementation means Emacs can make
	USE_STACK_LISP_OBJECTS the default unless GC_MARK_STACK !=
	GC_MAKE_GCPROS_NOOPS.
	* lisp.h (GCALIGNED): Align even if !USE_STACK_LISP_OBJECTS,
	for fewer differences among implementations.
	(struct Lisp_String): Now GCALIGNED.
	(USE_STACK_LISP_OBJECTS): Default to true, since the
	implementation no longer insists on a nonempty GCALIGNED.
	But make it false if GC_MARK_STACK != GC_MAKE_GCPROS_NOOPS.
	(SCOPED_CONS_INITIALIZER): Remove, since it's no longer needed
	separately.  Move definiens to scoped_cons.  The old definition
	was incorrect when GCALIGNED was defined to be empty.
	(union Aligned_String): New type.
	(USE_STACK_CONS, USE_STACK_STRING): New constants, so that the
	implementation ports to compilers that don't align strictly enough.
	Don't worry about the union sizes; it's not worth bothering about.
	(scoped_cons, scoped_list1, scoped_list3, scoped_list4):
	Rewrite using USE_STACK_CONS.
	(scoped_cons): Assume the use of union Aligned_Cons.
	(lisp_string_size, make_local_string, build_local_string): Remove.
	Unless otherwise specified, all callers of build_local_string
	changed to use SCOPED_STRING.
	(SCOPED_STRING): New macro.
	* data.c (wrong_choice):
	* menu.c (single_menu_item):
	* process.c (Fformat_network_address):
	Hoist use of SCOPED_STRING out of a scope, so that its returned
	object lives long enough.
	* fileio.c (Fexpand_file_name): Use build_string, not SCOPED_STRING,
	as the string might be long or might not be ASCII.

2014-09-29  Eli Zaretskii  <eliz@gnu.org>

	* msdos.c (internal_terminal_init): Bump version to 25.

2014-09-29  Dmitry Antipov  <dmantipov@yandex.ru>

	Keep stack-allocated Lisp objects fast rather than versatile.
	* lisp.h (union Aligned_Cons) [!GCALIGNED]: Define as such.
	(SCOPED_CONS_INITIALIZER): New macro.
	(scoped_cons) [USE_STACK_LISP_OBJECTS]: Use it.
	(USE_LOCAL_ALLOCA): Remove.
	(local_cons, local_list1, local_list2, local_list3, local_list4):
	Remove.  Stack overflow checking makes them too slow.
	(make_local_vector): Likewise.  Also we just don't have enough
	users for it.
	(enum LISP_STRING_OVERHEAD): Remove.
	(local_string_init, local_vector_init): Remove prototypes.
	(make_local_string, build_local_string): Redesign to target short
	compile-time string constants, fall back to regular string allocation
	where appropriate.
	(lisp_string_size): New function.
	(verify_ascii) [ENABLE_CHECKING]: Add prototype.
	* alloc.c (local_string_init, local_vector_init): Remove.
	(verify_ascii) [ENABLE_CHECKING]: New function.
	* buffer.c, charset.c, chartab.c, data.c, editfns.c, emacs.c, fileio.c:
	* fns.c, font.c, fontset.c, frame.c, keyboard.c, keymap.c, lread.c:
	* menu.c, minibuf.c, process.c, textprop.c, xdisp.c, xfns.c, xfont.c:
	* xselect.c, xterm.c: All related users changed.

2014-09-28  Ken Brown  <kbrown@cornell.edu>

	* sheap.c (bss_sbrk_buffer_beg): Remove redundant variable.
	* gmalloc.c [CYGWIN]: Adapt to change in sheap.c.

2014-09-27  Ken Brown  <kbrown@cornell.edu>

	Fix implementation of HYBRID_MALLOC on Cygwin.
	* sheap.c (bss_sbrk_buffer_end): Cast to void *.
	(bss_sbrk_buffer_beg): New variable.  Use it...
	* gmalloc.c (ALLOCATED_BEFORE_DUMPING) [CYGWIN]: ...here, to fix
	incorrect definition.

2014-09-27  Stefan Monnier  <monnier@iro.umontreal.ca>

	* keyboard.c (track-mouse): Rename to internal--track-mouse.
	Make it into a function and change arg to be a function.

	* lisp.mk (lisp): Add elisp-mode.elc.

2014-09-26  Paul Eggert  <eggert@cs.ucla.edu>

	* xfns.c (x_default_scroll_bar_color_parameter):
	Use USE_LOCAL_ALLOCA only if USE_TOOLKIT_SCROLL_BARS,
	to pacify --enable-gcc-warnings in non-scrollbar builds.

2014-09-26  Ken Brown  <kbrown@cornell.edu>

	* w32term.h (ALIGN_STACK): Fix the cpp condition.

2014-09-25  Eli Zaretskii  <eliz@gnu.org>

	* lisp.h (USE_STACK_LISP_OBJECTS): Default to false for 32-bit
	MinGW builds that use GCC before 4.2.

	Default to stack objects on DOS_NT platforms as well.
	* w32term.h (ALIGN_STACK) [__GNUC__]: Define to
	__attribute__((force_align_arg_pointer)) for GCC 4.2 and later.

	* lisp.h (USE_STACK_LISP_OBJECTS): Remove the !DOS_NT condition.

	* w32proc.c (enum_locale_fn, enum_codepage_fn): Add the
	ALIGN_STACK attribute.

	* w32fns.c (w32_monitor_enum): Add the ALIGN_STACK attribute.

	* w32uniscribe.c (add_opentype_font_name_to_list): Add the
	ALIGN_STACK attribute.

	* w32font.c (add_font_name_to_list, add_font_entity_to_list)
	(add_one_font_entity_to_list): Add the ALIGN_STACK attribute.

2014-09-25  Martin Rudalics  <rudalics@gmx.at>

	* frame.c (frame_inhibit_resize):
	* widget.c (EmacsFrameResize):
	* window.c (resize_frame_windows, Fset_window_configuration):
	* xdisp.c (expose_frame):
	* xfns.c (x_change_tool_bar_height):
	* xmenu.c (update_frame_menubar):
	* xterm.c (handle_one_xevent, x_new_font, x_set_window_size_1):
	Remove code left dead after 2014-07-27 changes.

2014-09-25  Paul Eggert  <eggert@cs.ucla.edu>

	Fix local_cons etc. to not exhaust the stack when in a loop.
	Problem reported in:
	https://lists.gnu.org/r/emacs-devel/2014-09/msg00696.html
	* buffer.c (Fother_buffer, other_buffer_safely, init_buffer):
	* charset.c (load_charset_map_from_file, Ffind_charset_region)
	(Ffind_charset_string):
	* chartab.c (uniprop_encode_value_numeric, uniprop_table):
	* data.c (wrong_range):
	* editfns.c (Fpropertize, format2):
	* emacs.c (init_cmdargs, decode_env_path):
	* fileio.c (auto_save_error):
	* fns.c (Fyes_or_no_p):
	* font.c (font_style_to_value, font_parse_xlfd)
	(font_parse_family_registry, font_delete_unmatched)
	(font_add_log):
	* fontset.c (Fset_fontset_font):
	* frame.c (x_get_arg):
	* keyboard.c (echo_dash, safe_run_hooks_error, parse_menu_item)
	(read_char_minibuf_menu_prompt):
	* keymap.c (silly_event_symbol_error, describe_vector):
	* lread.c (load_warn_old_style_backquotes):
	* menu.c (single_menu_item):
	* minibuf.c (Fread_buffer):
	* process.c (status_message, Fformat_network_address)
	(server_accept_connection):
	* textprop.c (copy_text_properties):
	* xdisp.c (Fcurrent_bidi_paragraph_direction):
	* xfns.c (x_default_scroll_bar_color_parameter):
	* xfont.c (xfont_open):
	* xselect.c (x_clipboard_manager_error_1):
	* xterm.c (x_term_init):
	Put USE_LOCAL_ALLOCA at the start of the function.
	* fns.c (maybe_resize_hash_table): Use build_string instead of
	build_local_string, since we'd otherwise need a conditional
	USE_LOCAL_ALLOCA here, but this is just debugging output and is
	not worth the bother of optimization.
	* font.c (font_delete_unmatched): Remove by-hand code that
	observed MAX_ALLOCA limit, since it's now done automatically.
	* keymap.c (Fsingle_key_description): Put USE_SAFE_ALLOCA at top,
	since build_local_string needs its sa_alloc.
	* lisp.h (lisp_word_count): New function.
	(SAFE_ALLOCA_LISP): Use it.
	(USE_LOCAL_ALLOCA): New macro.
	(local_cons, make_local_vector, make_local_string):
	Observe the MAX_ALLOCA limit.
	(LISP_STRING_OVERHEAD): New constant.
	(make_local_string): Use it.

2014-09-24  Paul Eggert  <eggert@cs.ucla.edu>

	Default to stack objects on non-GNU/Linux, non-DOS_NT platforms.
	* lisp.h (USE_STACK_LISP_OBJECTS): Also default to true
	if !defined DOS_NT && !defined GNU_LINUX.  I've tested this on AIX
	and Solaris and it's likely to work on similar platforms.

	Avoid signed integer overflow when converting Time to ptrdiff_t.
	* keyboard.c (INPUT_EVENT_POS_MAX, INPUT_EVENT_POS_MIN):
	New macros.
	(position_to_Time, Time_to_position): New functions.
	(gen_help_event, kbd_buffer_get_event): Use them.
	* systime.h (Time) [emacs && !HAVE_X_WINDOWS]:
	Go back to plain 'unsigned long', so that 'Time' is the same
	for both X and non-X builds; this is less likely to cause surprise.
	* termhooks.h: Remove compile-time check that Time and ptrdiff_t
	are the same size; this is no longer required.

	* keyboard.c (make_lispy_event): Avoid unnecessary tests
	of bit 28 and of whether an unsigned value is negative.
	This simplifies the code a bit, and pacifies clang 3.4.

2014-09-24  Eli Zaretskii  <eliz@gnu.org>

	* systime.h (Time): Define as size_t, to be consistent with 64-bit
	Windows builds, where 'long' is a 32-bit type.

	* w32inevt.h (w32_console_mouse_position): Update the argument
	types to use 'Time'.

	* w32term.c (w32_mouse_position)
	(x_horizontal_scroll_bar_report_motion)
	(x_scroll_bar_report_motion): Update the argument types to use
	'Time'.

2014-09-24  Dmitry Antipov  <dmantipov@yandex.ru>

	* termhooks.h (enum scroll_bar_part): Begin from 0 to allow...
	(struct input_event): ...unsigned bitfields.  Likewise for
	`event_kind' member.  Prefer unsigned for `code' and 'modifiers'.
	Use `timestamp' for HELP_EVENT position.  Add compile-time assert.
	* keyboard.c (gen_help_event, kbd_buffer_store_help_event)
	(kbd_buffer_get_event): Adjust users.
	(scroll_bar_parts): Add Qnil to match scroll_bar_nowhere.
	(make_scroll_bar_position): New function, refactored out of...
	(make_lispy_event): ...adjusted user.
	* nsterm.h (EmacsScroller): Use enum for `last_hit_part' member.
	* nsterm.m (ns_mouse_position, mouseUp):
	* term.c (term_mouse_position):
	* w32inevt.c (w32_console_mouse_position):
	* w32term.c (w32_mouse_position):
	* xterm.c (XTmouse_position): Use scroll_bar_above_handle.
	(x_send_scroll_bar_event, xm_scroll_callback, xg_scroll_callback):
	Prefer enum and explicit enum members to integers and numeric values.

	* chartab.c (uniprop_encode_value_numeric):
	* font.c (font_style_to_value): Use make_local_vector.
	(font_delete_unmatched): Use local_cons but respect MAX_ALLOCA.
	* keymap.c (append_key): Use scoped_list1.

	* lisp.h (USE_STACK_LISP_OBJECTS): Enable by default if GNU_LINUX
	&& __GNUC__ && !__clang__.  Mention known problems.  Adjust comment.

2014-09-24  Paul Eggert  <eggert@cs.ucla.edu>

	Fix some slow uses and misuses of strcat.
	* doc.c (get_doc_string):
	* gtkutil.c (get_utf8_string):
	* xsmfns.c (x_session_initialize):
	Avoid recomputation of string length.
	* ftfont.c (ftfont_spec_pattern):
	* xfns.c (xic_create_fontsetname):
	Don't assume output buffer is initially zero.

2014-09-23  Paul Eggert  <eggert@cs.ucla.edu>

	* lisp.h (lispstpcpy): Rename from lispstrcpy, and act like stpcpy.
	All callers changed.
	* xterm.c (x_term_init): Use new functionality to avoid two needs
	to compute a string length.

	* dispextern.h, xdisp.c (window_box_right_offset): Now static.

2014-09-23  Dmitry Antipov  <dmantipov@yandex.ru>

	Use known length of a Lisp string to copy it faster.
	* lisp.h (lispstrcpy): New function.  Add comment.
	* callproc.c (child_setup):
	* dbusbind.c (xd_append_arg):
	* doc.c (get_doc_string):
	* font.c (Ffont_xlfd_name):
	* frame.c (xrdb_get_resource):
	* process.c (Fmake_network_process, network_interface_info):
	* w32fns.c (Fx_open_connection):
	* w32proc.c (sys_spawnve):
	* xfns.c (select_visual):
	* xfont.c (xfont_list):
	* xsmfns.c (x_session_initialize):
	* xterm.c (x_term_init): Use it.

2014-09-23  Paul Eggert  <eggert@cs.ucla.edu>

	Fix SAFE_ALLOCA to not exhaust the stack when in a loop.
	Reported by Dmitry Antipov in thread leading to:
	https://lists.gnu.org/r/emacs-devel/2014-09/msg00713.html
	This patch fixes only SAFE_ALLOCA, SAFE_NALLOCA, and SAFE_ALLOCA_LISP;
	the experimental local_* macros enabled by USE_LOCAL_ALLOCATORS
	remain unfixed.
	* callproc.c (call_process): Save and restore sa_avail.
	* lisp.h (USE_SAFE_ALLOCA): Define sa_avail.
	(AVAIL_ALLOCA): New macro.
	(SAFE_ALLOCA, SAFE_NALLOCA, SAFE_ALLOCA_LISP):
	Use it, and check against sa_avail rather than MAX_ALLOCA.

2014-09-22  Dmitry Antipov  <dmantipov@yandex.ru>

	On OSX, do not free font-specific data more than once (Bug#18501).
	* macfont.m (macfont_close): Release and free font-specific data
	only if it wasn't previously freed.

2014-09-22  David Caldwell <david@porkrind.org>  (tiny change)

	* unexmacosx.c (dump_it): Improve error message.

2014-09-22  Juri Linkov  <juri@jurta.org>

	* image.c (imagemagick_load_image): Add delay to imagemagick metadata.
	(Bug#10747, bug#18334)

2014-09-22  Eli Zaretskii  <eliz@gnu.org>

	* frame.c (Fmouse_position, Fset_mouse_position): Clarify the
	units in which the position is measured.  (Bug#18493)

	* xdisp.c (redisplay_internal): Force redisplay of all windows
	that show a buffer whose narrowing has changed.  (Bug#18490)

2014-09-22  Eli Zaretskii  <eliz@gnu.org>

	* xterm.c (x_draw_hollow_cursor, x_draw_bar_cursor):
	* w32term.c (x_draw_hollow_cursor, x_draw_bar_cursor): In R2L
	lines, draw the hollow-box and hbar cursors on the right side of
	cursor-glyph.  Thanks to martin rudalics <rudalics@gmx.at> for
	testing on X.

	* xterm.c (x_draw_stretch_glyph_string):
	* w32term.c (x_draw_stretch_glyph_string): Fix a thinko that
	caused the block cursor to disappear on a TAB in R2L lines in
	every window except the leftmost one.  Reported by Martin Rudalics
	<rudalics@gmx.at>.

2014-09-22  Dmitry Antipov  <dmantipov@yandex.ru>

	Always use matched specpdl entry to record call arguments (Bug#18473).
	* lisp.h (record_in_backtrace): Adjust prototype.
	* eval.c (record_in_backtrace): Return current specpdl level.
	(set_backtrace_args, set_backtrace_nargs): Merge.  Adjust all users.
	(eval_sub, Ffuncall): Record call arguments in matched specpdl
	entry and use that entry in call to backtrace_debug_on_exit.
	(apply_lambda): Likewise.  Get current specpdl level as 3rd arg.
	(do_debug_on_call): Get current specpdl level as 2nd arg.

	Prefer ptrdiff_t to int and avoid integer overflows.
	* fileio.c (make_temp_name):
	* font.c (font_parse_family_registry): Avoid integer
	overflow on string size calculation.
	* data.c (Faset): Likewise for byte index.

2014-09-22  Eli Zaretskii  <eliz@gnu.org>

	Fix display of R2L lines in partial-width windows.
	* xdisp.c (init_iterator): Don't use it->bidi_p before it is
	assigned the correct value.
	(extend_face_to_end_of_line): Account for truncation and
	continuation glyphs in R2L rows when one of the fringes is not
	displayed.
	(display_line): Don't assign negative X offset to a row if we are
	going to produce a truncation glyph for it.  When handling
	truncated R2L rows, consider the width of the left fringe instead
	of the right one.
	(produce_special_glyphs): Fix bogus assignments.

2014-09-22  Eli Zaretskii  <eliz@gnu.org>

	* fileio.c (Fexpand_file_name) [DOS_NT]: Make sure newdirlim is
	always set to a valid value.  Make sure the size passed to alloca
	is always positive.  (Bug#18516)

2014-09-22  Dmitry Antipov  <dmantipov@yandex.ru>

	Avoid extra call to oblookup when interning symbols.
	* lisp.h (intern_driver): Add prototype.
	* lread.c (intern_driver): New function.
	(intern1, intern_c_string_1, Fintern):
	* font.c (font_intern_prop):
	* w32font.c (intern_font_name): Use it.

2014-09-21  Paul Eggert  <eggert@cs.ucla.edu>

	Minor improvements to new stack-allocated Lisp objects.
	* frame.h (FRAME_PARAMETER):
	Prefer scoped_list1 to local_list1 where either would do.
	* lisp.h (scoped_list4): New macro.
	(local_cons, local_list1, local_list2, local_list3, local_list4)
	(make_local_vector, make_local_string, build_local_string):
	Prefer functions to macros where either would do.
	* xdisp.c (build_desired_tool_bar_string):
	Prefer scoped_list4 to local_list4 where either would do.

2014-09-18  Dmitry Antipov  <dmantipov@yandex.ru>

	More and more stack-allocated Lisp objects if USE_LOCAL_ALLOCATORS.
	* lisp.h (local_list4) [USE_LOCAL_ALLOCATORS]: New macro.
	[!USE_LOCAL_ALLOCATORS]: Fall back to regular list4.
	* frame.h (FRAME_PARAMETER): New macro.
	* dispnew.c (init_display):
	* fontset.c (Fset_fontset_font):
	* frame.c (x_default_parameter):
	* xfaces.c (set_font_frame_param, Finternal_merge_in_global_face):
	* xfns.c (x_default_scroll_bar_color_parameter)
	(x_default_font_parameter, x_create_tip_frame): Use it.
	* editfns.c (Fpropertize): Use local_cons.
	* process.c (status_message): Use build_local_string.
	* xfont.c (xfont_open): Use make_local_string.
	* xdisp.c (build_desired_tool_bar_string): Use local_list4.

2014-09-18  Paul Eggert  <eggert@cs.ucla.edu>

	Port USE_LOCAL_ALLOCATORS code to clang 3.4 x86-64.
	* lisp.h (USE_LOCAL_ALLOCATORS): Define only if __GNUC__ &&
	!__clang__.  This works with GCC and with clang and is safer for
	compilers we don't know about.
	(local_cons): Rename parameter to make capture less likely.

2014-09-17  Samuel Bronson  <naesten@gmail.com>

	* unexmacosx.c (copy_data_segment): Port to GCC 4.6+ (Bug#9927).

2014-09-17  Paul Eggert  <eggert@cs.ucla.edu>

	Fix minor problems found by static checking.
	* alloc.c, lisp.h (SAVE_TYPE_INT_OBJ, make_save_int_obj):
	Remove; now unused.
	* buffer.h (decode_buffer): Doc and indentation fixes.
	* fns.c (Qstring_collate_lessp, Qstring_collate_equalp): Now static.

2014-09-17  Dmitry Antipov  <dmantipov@yandex.ru>

	Avoid clang-specific warnings.
	* buffer.c (init_buffer): Shut up -Wself-assign.
	* process.c (server_accept_connection): Shut up -Wunsequenced.

2014-09-16  Daniel Colascione  <dancol@dancol.org>

	* fns.c (sxhash): For symbols, use address as hash code.

2014-09-16  Dmitry Antipov  <dmantipov@yandex.ru>

	If USE_LOCAL_ALLOCATORS, allocate even more Lisp objects on stack.
	* charset.c (load_charset_map_from_file): Use scoped_list2
	and build_local_string.
	* buffer.c (Fother_buffer, other_buffer_safely, init_buffer):
	* emacs.c (init_cmdargs, decode_env_path):
	* fileio.c (Fexpand_file_name):
	* fns.c (maybe_resize_hash_table) [ENABLE_CHECKING]:
	* frame.c (x_get_arg):
	* keyboard.c (safe_run_hooks_error):
	* lread.c (load_warn_old_style_backquotes):
	* xdisp.c (Fcurrent_bidi_paragraph_direction):
	* xfns.c (x_default_scroll_bar_color_parameter, select_visual):
	* xselect.c (x_clipboard_manager_error_1)
	(x_clipboard_manager_save_all):
	* xterm.c (x_term_init): Use build_local_string.

	Avoid more integer overflows on string size calculations.
	* category.c (Fmake_category_set):
	* xdisp.c (get_overlay_arrow_glyph_row):
	* w32font.c (intern_font_name): Prefer ptrdiff_t to int.

2014-09-15  Eli Zaretskii  <eliz@gnu.org>

	* sound.c [WINDOWSNT]: Include w32common.h and mbstring.h.
	(SOUND_WARNING) [WINDOWSNT]: Include in do..while and improve the
	error message format.  Use message_with_string to have non-ASCII
	file names properly displayed.
	(do_play_sound) [WINDOWSNT]: Use Unicode APIs to play sound files
	when w32-unicode-filenames is non-nil, but not on Windows 9X,
	where these APIs are not available even in UNICOWS.DLL.
	Improve the format of error messages and include the file name in them
	where appropriate.
	(Fplay_sound_internal) [WINDOWSNT]: Make the MS-Windows branch
	call play-sound-functions, per documentation.

	* w32.c (w32_get_long_filename, w32_get_short_filename):
	Constify the input file name arguments.

	* w32.h (w32_get_long_filename, w32_get_short_filename):
	Update prototypes.

2014-09-15  Dmitry Antipov  <dmantipov@yandex.ru>

	If USE_LOCAL_ALLOCATORS, allocate some Lisp objects on stack.
	* lisp.h (local_cons, local_list1, local_list2, local_list3)
	[USE_LOCAL_ALLOCATORS]: New macros.
	[!USE_LOCAL_ALLOCATORS]: Fall back to regular functions.
	(build_local_string): Avoid argument name expansion clash with
	make_local_string.
	* alloc.c (toplevel)
	[USE_LOCAL_ALLOCATORS && GC_MARK_STACK != GC_MAKE_GCPROS_NOOPS]:
	Preprocessor guard to avoid impossible configuration.
	* charset.c (Ffind_charset_region, Ffind_charset_string):
	Use make_local_vector.
	* lread.c (read1, substitute_object_recurse): Use scoped_cons.
	* textprop.c (Fput_text_property, Fadd_face_text_property):
	Use scoped_list2.
	(copy_text_properties): Use local_cons and local_list3.
	* chartab.c (uniprop_table):
	* data.c (wrong_choice, wrong_range):
	* doc.c (get_doc_string):
	* editfns.c (format2):
	* fileio.c (Fexpand_file_name, auto_save_error):
	* fns.c (Fyes_or_no_p):
	* font.c (font_parse_xlfd, font_parse_family_registry, font_add_log):
	* fontset.c (Fset_fontset_font):
	* keyboard.c (echo_add_key, echo_dash, parse_menu_item)
	(read_char_minibuf_menu_prompt):
	* keymap.c (silly_event_symbol_error, describe_vector):
	* menu.c (single_menu_item):
	* minibuf.c (Fread_buffer):
	* process.c (status_message, Fformat_network_address)
	(server_accept_connection): Use make_local_string and
	build_local_string.  Prefer compound literals where appropriate.

2014-09-15  Daniel Colascione  <dancol@dancol.org>

	* fns.c (Fsort): Tweak sort docstring.

2014-09-15  Eli Zaretskii  <eliz@gnu.org>

	* w32.c (fcntl): Support O_NONBLOCK fcntl on the write side of pipes.
	(sys_write): When a write to a non-blocking pipe returns ENOSPC,
	set errno to EAGAIN instead, to allow the caller to retry the
	write after some waiting.  Fixes deadlocks when Emacs exchanges a
	lot of data through the pipe.  (Bug#18420)

	* sound.c (Fplay_sound_internal): Encode the sound file name in
	the ANSI codepage.  Expand it against data-directory, as per docs,
	not against the current directory.  No need to make a local copy
	of the file name; pass the encoded file name directly to
	do_play_sound.  (Bug#18463)

	* w32.c (ansi_encode_filename): If w32_get_short_filename returns
	NULL, and the file name is not encodable in ANSI codepage, return
	the string with "?" replacement characters, which will fail the
	caller.  This avoids returning a random value in that case.

2014-09-15  Martin Rudalics  <rudalics@gmx.at>

	* window.c (Fresize_mini_window_internal): Set w->total_lines
	from w->pixel_height (Bug#18422).

2014-09-15  Jan Djärv  <jan.h.d@swipnet.se>

	* nsterm.m (updateFrameSize:, initFrameFromEmacs:)
	(toggleFullScreen:): Take frame_resize_pixelwise into account when
	setting resize increments (Bug#18435).

2014-09-15  Eli Zaretskii  <eliz@gnu.org>

	* xdisp.c (pos_visible_p): Properly save and restore the iterator
	state around the call to line_bottom, since it can move the
	iterator to another screen line.  This fixes off-by-one errors in
	the reported row in some rare cases.

2014-09-14  Jan Djärv  <jan.h.d@swipnet.se>

	* callproc.c (init_callproc): Fix bug introduced at
	2014-09-07 (Bug#18474).

2014-09-13  Dmitry Antipov  <dmantipov@yandex.ru>

	Prefer ptrdiff_t to int and avoid integer overflows.
	* fileio.c (make_temp_name):
	* font.c (font_parse_family_registry): Avoid integer
	overflow on string size calculation.
	* data.c (Faset): Likewise for byte index.

2014-09-12  Detlev Zundel  <dzu@member.fsf.org>

	* buffer.c (syms_of_buffer): DEFSYM Qchoice (Bug#18337).

2014-09-11  Dmitry Antipov  <dmantipov@yandex.ru>

	* lisp.h (make_local_string): Nitpick indent.
	* print.c (Fprin1_to_string): Remove unused GCPROs.

	More debugging aids around GCPROs.
	* lisp.h (struct gcpro) [DEBUG_GCPRO]: Add extra members.
	(GCPRO1, GCPRO2, GCPRO3, GCPRO4, GCPRO5, GCPRO6, GCPRO7):
	Minor restyle.  If DEBUG_GCPRO, initialize extra fields.

	* lread.c (readevalloop_eager_expand_eval): Add GCPRO and fix
	bootstrap broken if GC_MARK_STACK == GC_USE_GCPROS_AS_BEFORE.

	Remove redundant GCPROs around Ffuncall and Fapply calls.
	This is safe because Ffuncall protects all of its arguments by itself.
	* charset.c (map_charset_for_dump): Remove redundant GCPRO.
	* eval.c (Fapply, apply1, call0, call1, call2, call3, call4, call5)
	(call6, call7): Likewise.  Use compound literals where applicable.
	(run_hook_with_args_2): Use compound literal.

2014-09-11  Paul Eggert  <eggert@cs.ucla.edu>

	Pacify --enable-gcc-warnings when no window system is used.
	These warnings found that subscript error, so they seem worthwhile.
	* composite.c (char_composable_p): Simplify a bit.
	* frame.c (x_set_frame_parameters): Add an IF_LINT.
	* frame.c (x_set_horizontal_scroll_bars, x_set_scroll_bar_height):
	* frame.h (FRAME_HAS_HORIZONTAL_SCROLL_BARS):
	* window.c (set_window_scroll_bars):
	Use USE_HORIZONTAL_SCROLL_BARS for simplicity.
	* frame.h [! USE_HORIZONTAL_SCROLL_BARS]:
	Ignore -Wsuggest-attribute=const.
	* window.h (USE_HORIZONTAL_SCROLL_BARS): New macro.
	(WINDOW_HAS_HORIZONTAL_SCROLL_BAR): Use it.

2014-09-10  Paul Eggert  <eggert@penguin.cs.ucla.edu>

	* charset.c (Fget_unused_iso_final_char): Fix subscript error.
	Use check_iso_charset_parameter instead of doing the checks by hand.
	(check_iso_charset_parameter): Move up.  Check parameters a bit
	more carefully, and return true for 96-char sets.  All callers changed.

2014-09-10  Paul Eggert  <eggert@cs.ucla.edu>

	Simplify lisp.h by removing the __COUNTER__ business.
	Reported by Dmitry Antipov in:
	https://lists.gnu.org/r/emacs-devel/2014-09/msg00220.html
	* lisp.h (make_local_vector, make_local_string)
	(build_local_string): Simplify by not bothering with __COUNTER__.
	The __COUNTER__ business wasn't working properly, and was needed
	only for hypothetical future expansion anyway.

2014-09-10  Alp Aker  <alp.tekin.aker@gmail.com>

	* nsterm.m (ns_draw_fringe_bitmap): Use the same logic as other
	terms to determine bitmap color.  (Bug#18437)

2014-09-10  Eli Zaretskii  <eliz@gnu.org>

	* w32.c (sys_write): Use SAFE_NALLOCA for the NL -> CRLF
	translation buffer.

2014-09-10  Paul Eggert  <eggert@cs.ucla.edu>

	* xterm.c (handle_one_xevent): Add braces to pacify gcc -Wall.

2014-09-10  Jan Djärv  <jan.h.d@swipnet.se>

	* xterm.c (handle_one_xevent): Detect iconified by looking at
	_NET_WM_STATE_HIDDEN.

2014-09-10  Paul Eggert  <eggert@cs.ucla.edu>

	* lisp.h (DEFINE_GDB_SYMBOL_ENUM): Remove.
	These can generate a constant with the correct value but the wrong
	width, which doesn't work as a printf argument.  All uses removed.
	Reported by Dmitry Antipov in:
	https://lists.gnu.org/r/emacs-devel/2014-09/msg00213.html
	(ENUMABLE): Remove; no longer needed.
	(ARRAY_MARK_FLAG_val, PSEUDOVECTOR_FLAG_val, VALMASK_val):
	Remove; no longer needed because of the above change.
	Each definiens moved to the only use.

	Improve the experimental local and scoped allocation.
	* alloc.c (local_string_init, local_vector_init):
	New functions, defined if USE_LOCAL_ALLOCATORS.
	Mostly, these are moved here from lisp.h, as it's not
	clear it's worth making them inline.
	* lisp.h (USE_STACK_LISP_OBJECTS): Default to false.
	(GCALIGNED): Depend on HAVE_STRUCT_ATTRIBUTE_ALIGNED and
	USE_STACK_LISP_OBJECTS, not on a laundry list.
	(local_string_init, local_vector_init): New decls.
	(union Aligned_Cons): New type.
	(scoped_cons): Use it.  Give up on the char trick, as it's a too
	much of a maintenance hassle; if someone wants this speedup
	they'll just need to convince their compiler to align properly.
	Conversely, use the speedup if struct Lisp_Cons happens to
	be aligned even without a directive.  Better yet, help it along
	by using union Aligned_Cons rather than struct Lisp_Cons.
	(pointer_valid_for_lisp_object): Remove.  This check is not
	necessary, since make_lisp_ptr is already doing it.  All uses removed.
	(local_vector_init, local_string_init): Move to alloc.c.
	(build_local_vector): Remove this awkward macro, replacing with ...
	(make_local_vector): New macro, which acts more like a function.
	Use statement expressions and use __COUNTER__ to avoid macro
	capture.  Fall back on functions if these features are not supported.
	(build_local_string, make_local_string): Likewise.

2014-09-09  Dmitry Antipov  <dmantipov@yandex.ru>

	* xterm.c (x_term_init): Consolidate duplicated code.
	[USE_LUCID]: Revert 2014-04-02 change (Bug#18403).  Add comment.
	(x_delete_terminal): Do not close X connection fd (Bug#18403).
	Add eassert and mark dpyinfo as dead only if it was alive.

	Add macros to allocate temporary Lisp objects with alloca.
	Respect MAX_ALLOCA and fall back to regular GC for large objects.
	* character.h (parse_str_as_multibyte): Move prototype to ...
	* lisp.h (parse_str_as_multibyte): ... here.
	(struct Lisp_Cons): Add GCALIGNED attribute if supported.
	(scoped_cons, scoped_list2, build_local_vector, build_local_string):
	New macros.
	(scoped_cons_init, pointer_valid_for_lisp_object, local_vector_init)
	(local_string_init): New functions.
	* alloc.c (verify_alloca) [ENABLE_CHECKING]: New function.
	(init_alloc_once): Call it.

	Cleanup last change and make all new stuff conditional.
	* lisp.h (build_local_string): Rename to ...
	(make_local_string): ... this macro.
	(build_local_string, scoped_list1, scoped_list3): New macros.
	(toplevel) [USE_STACK_LISP_OBJECTS]: Define all new macros
	and functions as such, use regular fallbacks otherwise.
	* alloc.c (verify_alloca) [USE_STACK_LISP_OBJECTS]: Define
	conditionally.

2014-09-08  Eli Zaretskii  <eliz@gnu.org>

	* dispnew.c (prepare_desired_row): When MODE_LINE_P is zero,
	always make sure the marginal areas of the row are in sync with
	what the window wants.  (Bug#18419)

	* data.c (set_internal): Use assq_no_quit, not Fassq, to find an
	existing binding of a variable, to avoid silently aborting
	commands that use specbind.  (Bug#18331)

2014-09-07  Paul Eggert  <eggert@cs.ucla.edu>

	Fix bug uncovered by changing alloca to auto buffer (Bug#18410).
	* coding.c (growable_destination): New function.
	(produce_chars): Use it for sanity checks.  Do not fiddle with
	dst_end if the source and destination are both nil, as it's
	the caller's responsibility to avoid overlap.
	* keyboard.c (read_decoded_event_from_main_queue):
	The destination must be MAX_MULTIBYTE_LENGTH times the max source
	length, not 4 times, to prevent decode_coding_c_string from trying
	to reallocate a destination.  This removes the need for the FIXME.

	* callproc.c (exec_failed) [DOS_NT]: Define a dummy.
	All callers simplified.  Add a comment about exec_failed, vfork,
	and alloca.

	Adjust drag-and-drop fix when window is above top (Bug#18303).
	* xselect.c (x_fill_property_data): Don't let sign bit of negative
	XCDR bleed into XCAR's encoded value.  Improve checks for
	out-of-range data while we're at it.

2014-09-07  Jan Djärv  <jan.h.d@swipnet.se>

	* xselect.c (x_fill_property_data): Handle negative XCDR when data
	is CONSP (Bug#18303).

2014-09-07  Eli Zaretskii  <eliz@gnu.org>

	* callproc.c (child_setup) [WINDOWSNT]: Don't call exec_failed if
	'alloca' gets passed arguments larger than MAX_ALLOCA.

	* font.c (MAX): Define if not defined elsewhere.

2014-09-07  Paul Eggert  <eggert@cs.ucla.edu>

	* keyboard.c (read_decoded_event_from_main_queue): Reinstitute alloca
	here for destination buffer, to work around what appears to be a
	bug in decode_coding_c_string when the source and destination are
	both C strings.

	Use SAFE_ALLOCA etc. to avoid unbounded stack allocation (Bug#18410).
	This follows up on the recent thread in emacs-devel on alloca; see:
	https://lists.gnu.org/r/emacs-devel/2014-09/msg00042.html
	This patch also cleans up alloca-related glitches noted while
	examining the code looking for unbounded alloca.
	* alloc.c (listn):
	* callproc.c (init_callproc):
	Rewrite to avoid need for alloca.
	* buffer.c (mouse_face_overlay_overlaps)
	(report_overlay_modification):
	* buffer.h (GET_OVERLAYS_AT):
	* coding.c (make_subsidiaries):
	* doc.c (Fsnarf_documentation):
	* editfns.c (Fuser_full_name):
	* fileio.c (Ffile_name_directory, Fexpand_file_name)
	(search_embedded_absfilename, Fsubstitute_in_file_name):
	* fns.c (Fmake_hash_table):
	* font.c (font_vconcat_entity_vectors, font_update_drivers):
	* fontset.c (fontset_pattern_regexp, Ffontset_info):
	* frame.c (Fmake_terminal_frame, x_set_frame_parameters)
	(xrdb_get_resource, x_get_resource_string):
	* ftfont.c (ftfont_get_charset, ftfont_check_otf, ftfont_drive_otf):
	* ftxfont.c (ftxfont_draw):
	* image.c (xbm_load, xpm_load, jpeg_load_body):
	* keyboard.c (echo_add_key, menu_bar_items, tool_bar_items)

	* keymap.c (Fdescribe_buffer_bindings, describe_map):
	* lread.c (openp):
	* menu.c (digest_single_submenu, find_and_call_menu_selection)
	(find_and_return_menu_selection):
	* print.c (PRINTFINISH):
	* process.c (Fformat_network_address):
	* scroll.c (do_scrolling, do_direct_scrolling, scrolling_1):
	* search.c (search_buffer, Fmatch_data, Fregexp_quote):
	* sound.c (wav_play, au_play):
	* syntax.c (skip_chars):
	* term.c (tty_menu_activate, tty_menu_show):
	* textprop.c (get_char_property_and_overlay):
	* window.c (Fset_window_configuration):
	* xdisp.c (safe__call, next_overlay_change, vmessage)
	(compute_overhangs_and_x, draw_glyphs, note_mouse_highlight):
	* xfaces.c (face_at_buffer_position):
	* xmenu.c (x_menu_show):
	Use SAFE_ALLOCA etc. instead of plain alloca, since the
	allocation size isn't bounded.
	* callint.c (Fcall_interactively): Redo memory_full check
	so that it can be done at compile-time on some platforms.
	* coding.c (MAX_LOOKUP_MAX): New constant.
	(get_translation_table): Use it.
	* callproc.c (call_process): Use SAFE_NALLOCA instead of
	SAFE_ALLOCA, to catch integer overflows on size calculation.
	(exec_failed) [!DOS_NT]: New function.
	(child_setup) [!DOS_NT]: Use it.
	* editfns.c (Ftranspose_regions):
	Hoist USE_SAFE_ALLOC + SAFE_FREE out of 'if'.
	* editfns.c (check_translation):
	Allocate larger buffers on the heap.
	* eval.c (internal_lisp_condition_case):
	Check for MAX_ALLOCA overflow.
	* fns.c (sort_vector): Use SAFE_ALLOCA_LISP rather than Fmake_vector.
	(Fbase64_encode_region, Fbase64_decode_region):
	Avoid unnecessary calls to SAFE_FREE before 'error'.
	* buffer.c (mouse_face_overlay_overlaps):
	* editfns.c (Fget_pos_property, check_translation):
	* eval.c (Ffuncall):
	* font.c (font_unparse_xlfd, font_find_for_lface):
	* ftfont.c (ftfont_drive_otf):
	* keyboard.c (echo_add_key, read_decoded_event_from_main_queue)
	(menu_bar_items, tool_bar_items):
	* sound.c (Fplay_sound_internal):
	* xdisp.c (load_overlay_strings, dump_glyph_row):
	Use an ordinary auto buffer rather than alloca, since the
	allocation size is fixed and small.
	* ftfont.c: Include <c-strcase.h>.
	(matching_prefix): New function.
	(get_adstyle_property): Use it, to avoid need for alloca.
	* keyboard.c (echo_add_key):
	* keymap.c (describe_map): Use ptrdiff_t, not int.
	* keyboard.c (echo_add_key): Prefer sizeof to strlen.
	* keymap.c (Fdescribe_buffer_bindings): Use SBYTES, not SCHARS,
	when counting bytes.
	* lisp.h (xlispstrdupa): Remove, replacing with ...
	(SAFE_ALLOCA_STRING): ... new macro with different API.
	This fixes a portability problem, namely, alloca result
	passed to another function.  All uses changed.
	(SAFE_ALLOCA, SAFE_ALLOCA_LISP): Check for MAX_ALLOCA,
	not MAX_ALLOCA - 1.
	* regex.c (REGEX_USE_SAFE_ALLOCA, REGEX_SAFE_FREE)
	(REGEX_ALLOCATE): New macros.
	(REGEX_REALLOCATE, REGEX_ALLOCATE_STACK, REGEX_REALLOCATE_STACK)
	(REGEX_FREE_STACK, FREE_VARIABLES, re_match_2_internal):
	Use them.
	* xdisp.c (message3): Use SAFE_ALLOCA_STRING rather than doing it
	by hand.
	(decode_mode_spec_coding): Store directly into buf rather than
	into an alloca temporary and copying the temporary to the buf.

2014-09-06  Eli Zaretskii  <eliz@gnu.org>

	* Makefile.in (EMACS_HEAPSIZE): Remove, no longer used.  (Bug#18416)

2014-09-04  Jan D  <jan.h.d@swipnet.se>

	* xterm.c (x_term_init): Don't call x_session_initialize if running
	as a daemon (Bug#18375).

	* xsmfns.c: Initialize ice_fd.

2014-09-04  Paul Eggert  <eggert@cs.ucla.edu>

	Less chatter in 'make' output.
	* Makefile.in (AM_V_GEN, am__v_GEN_, am__v_GEN_0, am__v_GEN_1, AM_V_at)
	(am__v_at_, am__v_at_0, am__v_at_1):  New macros, taken from Automake.
	($(etc)/DOC, buildobj.h, gl-stamp): Use them.

2014-09-03  Martin Rudalics  <rudalics@gmx.at>

	* buffer.c (scroll-bar-height): Fix typo in doc-string.
	* frame.c (Vdefault_frame_horizontal_scroll_bars):
	Remove variable.
	* nsfns.m (Fx_create_frame):
	* w32fns.c (Fx_create_frame):
	* xfns.c (Fx_create_frame): Default horizontal scroll bars to
	nil.

2014-09-03  Eli Zaretskii  <eliz@gnu.org>

	* dispnew.c (buffer_posn_from_coords): Fix an off-by-one error in
	the reported row in the case of a window with a header line, by
	improving on the fix committed in 2011-10-08T10:58:50Z!eliz@gnu.org
	eliz@gnu.org-20111008105850-ht4tvsayohvr1kjc.  (Bug#18384)

2014-09-03  Paul Eggert  <eggert@cs.ucla.edu>

	* eval.c (internal_lisp_condition_case): Don't overrun the stack
	when configured --with-wide-int on typical 32-bit platforms.

2014-09-03  Eli Zaretskii  <eliz@gnu.org>

	* xdisp.c (display_and_set_cursor): Call erase_phys_cursor also
	when HPOS is negative, for the benefit of R2L glyph rows whose
	newline overflows into the fringe.

2014-09-03  Ken Brown  <kbrown@cornell.edu>

	* conf_post.h (strnicmp) [CYGWIN && HAVE_NTGUI]: Define.  (Bug#18366)

2014-09-02  Paul Eggert  <eggert@cs.ucla.edu>

	Minor cleanup of recent strlen-avoiding patch.
	* fileio.c (CHECK_LENGTH): Remove.
	Rewrite callers so that they don't need it.
	(Fexpand_file_name) [DOS_NT]: Fix a case where directory length
	variable wasn't set.

2014-09-02  Dmitry Antipov  <dmantipov@yandex.ru>

	* fileio.c (CHECK_LENGTH): New macro.
	(Fexpand_file_name): Use it and get rid of a few more calls
	to strlen and strcat.
	* callproc.c (egetenv_internal): Add arg and rename from egetenv ...
	* lisp.h (egetenv): ... because of a new inline function used to
	avoid calls to strlen for a compile-time constants.

	* buffer.h (decode_buffer): New function.
	* buffer.c (Fbuffer_name, Fbuffer_file_name, Fbuffer_base_buffer)
	(Fbuffer_local_variables, Fbuffer_modified_p, Fbuffer_modified_tick)
	(Fbuffer_chars_modified_tick, Fdelete_all_overlays):
	* data.c (Flocal_variables_p):
	* fileio.c (Fverify_visited_file_modtime):
	* marker.c (live_buffer): Use it.

2014-09-01  Dmitry Antipov  <dmantipov@yandex.ru>

	Avoid extra calls to strlen in filesystem I/O routines.
	* fileio.c (Fexpand_file_name): Avoid calls to strlen if
	the length of 'newdir' is known or may be precalculated.
	(file_accessible_directory_p): Prefer to pass Lisp_Object,
	not 'char *', and so use precalculated length.
	(Ffile_accessible_directory_p):
	* callproc.c (encode_current_directory, init_callproc):
	* charset.c (init_charset):
	* lread.c (load_path_check, load_path_default): Adjust users.
	* lisp.h (file_accessible_directory_p): Tweak prototype.

2014-09-01  Eli Zaretskii  <eliz@gnu.org>

	* w32proc.c (w32_compare_strings): Support "C" and "POSIX"
	locales.

2014-09-01  Paul Eggert  <eggert@cs.ucla.edu>

	--enable-silent-rules now suppresses more chatter.
	* Makefile.in (AM_DEFAULT_VERBOSITY, AM_V_CC, am__v_CC_)
	(am__v_CC_0, am__v_CC_1, AM_V_CCLD, am__v_CCLD_, am__v_CCLD_0)
	(am__v_CCLD_1): New macros, taken from Automake.
	(.c.o, .m.o, temacs$(EXEEXT)): Use them.

	Clean up extern decls a bit.
	* bytecode.c: Include blockinput.h and keyboard.h rather
	than rolling their APIs by hand.
	* emacs.c: Include regex.h and rely on its and lisp.h's API
	rather than rolling them by hand.
	* lastfile.c: Include lisp.h, to check this file's API.
	* lisp.h (lisp_eval_depth, my_edata, my_endbss, my_endbss_static):
	New decls.
	* regex.h (re_max_failures): New decl.
	* unexcw.c, unexmacosx.c, unexw32.c:
	Rely on lisp.h's API rather than rolling it by hand.
	* vm-limit.c (__after_morecore_hook, __morecore, real_morecore):
	Declare at top level, to pacify GCC -Wnested-externs.

2014-08-31  Eli Zaretskii  <eliz@gnu.org>

	* xdisp.c (get_glyph_string_clip_rects): Don't let the width of a
	clipping rectangle become negative (i.e. large positive, since
	it's an unsigned data type).  This can happen in R2L hscrolled
	glyph rows, and caused us to draw the cursor glyph on the fringe.
	For the details, see
	https://lists.gnu.org/r/emacs-devel/2014-08/msg00543.html.

2014-08-31  Ken Brown  <kbrown@cornell.edu>

	* gmalloc.c: Don't include <stdlib.h>.  Declare system malloc and
	friends before defining hybrid_malloc and friends if HYBRID_MALLOC
	is defined.  (Bug#18368)

2014-08-30  Paul Eggert  <eggert@cs.ucla.edu>

	Vector-sorting fixes (Bug#18361).
	It's not safe to call qsort or qsort_r, since they have undefined
	behavior if the user-specified predicate is not a total order.
	Also, watch out for garbage-collection while sorting vectors.
	* fns.c: Include <vla.h>.
	(sort_vector_predicate) [!HAVE_QSORT_R]: Remove.
	(sort_vector_compare): Remove, replacing with ....
	(inorder, merge_vectors, sort_vector_inplace, sort_vector_copy):
	... these new functions.
	(sort_vector): Rewrite to use the new functions.
	GCPRO locals, since the predicate can invoke the GC.
	Since it's in-place return void; caller changed.
	(merge): Use 'inorder', for clarity.

	* sysdep.c (str_collate): Clear errno just before wcscoll(_l).
	One can't hoist this out of the 'if', because intervening calls to
	newlocale, twolower, etc. can change errno.

2014-08-30  Eli Zaretskii  <eliz@gnu.org>

	* sysdep.c (str_collate) [__STDC_ISO_10646__]: Improve the
	wording of the error messages.
	(str_collate) [WINDOWSNT]: Signal an error if w32_compare_strings
	sets errno.

	* w32proc.c (get_lcid_callback): Accept locale specifications
	without the country part, as in "enu" vs "enu_USA".
	(w32_compare_strings): Signal an error if a locale was specified,
	but couldn't be translated into a valid LCID.

2014-08-29  Michael Albinus  <michael.albinus@gmx.de>

	* sysdep.c (str_collate) [__STDC_ISO_10646__]: Move up setting errno.

2014-08-29  Paul Eggert  <eggert@cs.ucla.edu>

	* sysdep.c (str_collate) [__STDC_ISO_10646__]: Do not look at
	errno after towlower_l.  errno's value is not specified after
	towlower_l.  Instead, assume that towlower_l returns its argument
	on failure, which is portable in practice.

2014-08-29  Eli Zaretskii  <eliz@gnu.org>

	* fns.c (Fstring_collate_lessp, Fstring_collate_equalp): Doc fix.

	* w32proc.c (w32_compare_strings): Accept additional argument
	IGNORE_CASE.  Set up the flags for CompareStringW to ignore case
	if requested.  If w32-collate-ignore-punctuation is non-nil, add
	NORM_IGNORESYMBOLS to the flags.
	(LINGUISTIC_IGNORECASE): Define if not already defined.
	(syms_of_ntproc) <Vw32_collate_ignore_punctuation>: New variable.

	* sysdep.c (str_collate) [WINDOWSNT]: Adapt to the interface
	change.

2014-08-29  Michael Albinus  <michael.albinus@gmx.de>

	* sysdep.c (LC_CTYPE, LC_CTYPE_MASK, towlower_l):
	Define substitutes for platforms that lack them.
	(str_collate): Add arguments locale and ignore_case.

	* fns.c (Fstring_collate_lessp, Fstring_collate_equalp):
	Add optional arguments LOCALE and IGNORE-CASE.

	* lisp.h (str_collate): Adapt argument list.

2014-08-29  Dmitry Antipov  <dmantipov@yandex.ru>

	Add vectors support to Fsort.
	* fns.c (sort_vector, sort_vector_compare): New functions.
	(sort_list): Likewise, refactored out of ...
	(Fsort): ... adjusted user.  Mention vectors in docstring.
	(sort_vector_predicate) [!HAVE_QSORT_R]: New variable.
	* alloc.c (make_save_int_obj): New function.
	* lisp.h (enum Lisp_Save_Type): New member SAVE_TYPE_INT_OBJ.
	(make_save_int_obj): Add prototype.

	Fix last change to support Darwin/OSX and FreeBSD (Bug#18354).
	* sysdep.c (sort_vector_compare) [DARWIN_OS || __FreeBSD__]:
	Conditionally define to match system's qsort_r signature.
	(sort_vector) [DARWIN_OS || __FreeBSD__]: Likewise in call to qsort_r.

2014-08-28  Ken Brown  <kbrown@cornell.edu>

	Add support for HYBRID_MALLOC, allowing the use of gmalloc before
	dumping and the system malloc after dumping.  (Bug#18222)

	* conf_post.h (malloc, realloc, calloc, free) [HYBRID_MALLOC]:
	Define as macros, expanding to hybrid_malloc, etc.
	(HYBRID_GET_CURRENT_DIR_NAME): New macro.
	(get_current_dir_name) [HYBRID_GET_CURRENT_DIR_NAME]: Define as
	macro.
	* gmalloc.c: Set up the infrastructure for HYBRID_MALLOC, with a
	full implementation on Cygwin.  Remove Cygwin-specific code that
	is no longer needed.
	(malloc, realloc, calloc, free, aligned_alloc) [HYBRID_MALLOC]:
	Redefine as macros expanding to gmalloc, grealloc, etc.
	(DUMPED, ALLOCATED_BEFORE_DUMPING) [CYGWIN]: New macros.
	(get_current_dir_name) [HYBRID_GET_CURRENT_DIR_NAME]: Undefine.
	(USE_PTHREAD, posix_memalign) [HYBRID_MALLOC]: Don't define.
	(hybrid_malloc, hybrid_calloc, hybrid_free, hybrid_realloc)
	[HYBRID_MALLOC]:
	(hybrid_get_current_dir_name) [HYBRID_GET_CURRENT_DIR_NAME]:
	(hybrid_aligned_alloc) [HYBRID_MALLOC && (HAVE_ALIGNED_ALLOC ||
	HAVE_POSIX_MEMALIGN)]: New functions.
	* alloc.c (aligned_alloc) [HYBRID_MALLOC && (ALIGNED_ALLOC ||
	HAVE_POSIX_MEMALIGN)]: Define as macro expanding to
	hybrid_aligned_alloc; declare.
	(USE_ALIGNED_ALLOC) [HYBRID_MALLOC && (ALIGNED_ALLOC ||
	HAVE_POSIX_MEMALIGN)]: Define.
	(refill_memory_reserve) [HYBRID_MALLOC]: Do nothing.
	* sysdep.c (get_current_dir_name) [HYBRID_GET_CURRENT_DIR_NAME]:
	Define as macro, expanding to gget_current_dir_name, and define
	the latter.
	* emacs.c (main) [HYBRID_MALLOC]: Don't call memory_warnings() or
	malloc_enable_thread().  Don't initialize malloc.
	* lisp.h (NONPOINTER_BITS) [CYGWIN]: Define (because GNU_MALLOC is
	no longer defined on Cygwin).
	(refill_memory_reserve) [HYBRID_MALLOC]: Don't declare.
	* sheap.c (bss_sbrk_buffer_end): New variable.
	* unexcw.c (__malloc_initialized): Remove variable.
	* ralloc.c: Throughout, treat HYBRID_MALLOC the same as
	SYSTEM_MALLOC.
	* xdisp.c (decode_mode_spec) [HYBRID_MALLOC]: Don't check
	Vmemory_full.

2014-08-28  Martin Rudalics  <rudalics@gmx.at>

	* w32term.c (w32_horizontal_scroll_bar_handle_click):
	In `event->y' return entire range (the size of the scroll bar minus
	that of the thumb).
	* xterm.c (xm_scroll_callback, xaw_jump_callback): In `whole'
	return entire range (the scaled size of the scroll bar minus
	that of the slider).  In `portion' return the scaled position of
	the slider.
	(xaw_jump_callback): Restore part of code for vertical scroll
	bar broken in change from 2014-07-27.
	(xaw_scroll_callback): Provide incremental scrolling with
	horizontal scroll bars.

2014-08-28  Eli Zaretskii  <eliz@gnu.org>

	* conf_post.h (_GL_EXECINFO_INLINE) [MSDOS]: Don't define.

	* indent.c (Fvertical_motion): Fix vertical motion up through a
	display property after a newline.  (Bug#18276)

	* xdisp.c (display_line): Don't assume that the call to
	reseat_at_next_visible_line_start ends up at a character
	immediately following the newline on the previous line.
	Avoids setting the ends_at_zv_p flag on screen lines that are not at or
	beyond ZV, which causes infloop in redisplay.  For the details, see
	https://lists.gnu.org/r/emacs-devel/2014-08/msg00368.html.

	* dispnew.c (buffer_posn_from_coords): Fix mirroring of X
	coordinate for hscrolled R2L screen lines.  (Bug#18277)

2014-08-28  Paul Eggert  <eggert@cs.ucla.edu>

	* sysdep.c (LC_COLLATE, LC_COLLATE_MASK): Give individual defaults
	(Bug#18051).

2014-08-27  Eli Zaretskii  <eliz@gnu.org>

	* syntax.c (scan_lists): Don't examine positions before BEGV.
	(Bug#18339)

2014-08-27  Paul Eggert  <eggert@cs.ucla.edu>

	Improve robustness of new string-collation code (Bug#18051).
	* sysdep.c (LC_COLLATE, LC_COLLATE_MASK, freelocale, locale_t)
	(newlocale, wcscoll_l): Define substitutes for platforms that
	lack them, so as to simplify the mainline code.
	(str_collate): Simplify the code by assuming the above definitions.
	Use wcscoll_l, not uselocale, as uselocale is too fragile.
	For example, the old version left the Emacs in the wrong locale if
	wcscoll reported an error.  Use 'int', not ptrdiff_t, for the int
	result.  Report an error if newlocale fails.

2014-08-27  Michael Albinus  <michael.albinus@gmx.de>

	* lisp.h (str_collate):
	* sysdep.c (str_collate): Return int.
	(str_collate) [__STDC_ISO_10646__]: Propagate error of wcscoll.

2014-08-27  Dmitry Antipov  <dmantipov@yandex.ru>

	Fix some glitches in previous change.
	* sysdep.c (stack_direction): Replace stack_grows_down
	to simplify calculation of stack boundaries.
	(handle_sigsegv): Check whether we really crash somewhere near
	to stack boundary, and handle fatal signal as usual if not.
	(init_sigsegv): Adjust accordingly.
	* keyboard.c (Vtop_level_message): Rename to
	Vinternal__top_level_message, as suggested by Stefan Monnier in
	https://lists.gnu.org/r/emacs-devel/2014-08/msg00493.html
	All related users changed.

2014-08-26  Dmitry Antipov  <dmantipov@yandex.ru>

	Handle C stack overflow caused by too nested Lisp evaluation.
	* lisp.h (toplevel) [HAVE_STACK_OVERFLOW_HANDLING]: Declare
	siglongjmp point to transfer control from SIGSEGV handler.
	* keyboard.c (return_to_command_loop, recover_top_level_message)
	[HAVE_STACK_OVERFLOW_HANDLING]: New variables.
	(regular_top_level_message): New variable.
	(command_loop) [HAVE_STACK_OVERFLOW_HANDLING]: Handle non-local
	exit from SIGSEGV handler and adjust message displayed by Vtop_level
	if appropriate.
	(syms_of_keyboard): DEFVAR Vtop_level_message and initialize
	new variables described above.
	* sysdep.c [HAVE_SYS_RESOURCE_H]: Include sys/resource.h as such.
	(stack_grows_down, sigsegv_stack, handle_sigsegv)
	[HAVE_STACK_OVERFLOW_HANDLING]: New variables and function.
	(init_sigsegv): New function.
	(init_signals): Use it.

2014-08-25  Ken Brown  <kbrown@cornell.edu>

	* emacs.c (main): Remove use of obsolete macro
	G_SLICE_ALWAYS_MALLOC.

2014-08-25  Eli Zaretskii  <eliz@gnu.org>

	Implement locale-sensitive string collation for MS-Windows.
	* w32proc.c (get_lcid_callback, get_lcid, w32_compare_strings):
	New functions.  (Bug#18051)

	* w32.h (w32_compare_strings): Add prototype.

	* w32.c <g_b_init_compare_string_w>: New global flag.
	(globals_of_w32): Initialize it.

	* sysdep.c (str_collate) [WINDOWSNT]: Implementation for MS-Windows.

	* fns.c (Fstring_collate_lessp, Fstring_collate_equalp)
	[WINDOWSNT]: Call str_collate on MS-Windows.

2014-08-25  Dmitry Antipov  <dmantipov@yandex.ru>

	One more minor cleanup of font subsystem.
	* font.h (struct font_driver): Convert text_extents to
	return void because returned value is never actually used.
	* macfont.m (macfont_text_extents):
	* w32font.c (w32font_text_extents):
	* xftfont.c (xftfont_text_extents): Adjust to return void
	and assume that 'metrics' argument is always non-NULL.
	* ftfont.c (ftfont_text_extents):
	* xfont.c (xfont_text_extents): Likewise.  Avoid redundant memset.

2014-08-25  Paul Eggert  <eggert@cs.ucla.edu>

	Minor cleanups of str_collate fix (Bug#18051).
	* fns.c (str_collate): Move decl from here ...
	* lisp.h (str_collate): ... to here.
	* sysdep.c (str_collate): Prune away some of the forest of ifdefs.
	Remove unnecessary casts.  Use SAFE_NALLOCA to avoid
	potential problems with integer overflow.  Don't assume
	setlocale succeeds.  Remove unnecessary test before restoring
	locale via setlocale, and free the copied setlocale string
	when done with it.

2014-08-24  Michael Albinus  <michael.albinus@gmx.de>

	* fns.c (Fstring_collate_lessp, Fstring_collate_equalp): New DEFUNs.

	* sysdep.c (str_collate): New function.  (Bug#18051)

2014-08-23  Karol Ostrovsky  <karol.ostrovsky@gmail.com>  (tiny change)

	* Makefile.in (emacs$(EXEEXT)): Retry deletion of bootstrap-emacs
	if the initial "rm -f" fails.  This is for MinGW builds, where
	MS-Windows will not allow deleting the executable file of a
	running program.

2014-08-20  Eli Zaretskii  <eliz@gnu.org>

	* w32term.c (w32_scroll_bar_handle_click)
	(w32_horizontal_scroll_bar_handle_click)
	(x_scroll_bar_report_motion)
	(x_horizontal_scroll_bar_report_motion): For SB_THUMBPOSITION and
	SB_THUMBTRACK, use the 32-bit position information returned by
	GetScrollInfo, not the 16-bit information returned in the Windows
	message sent to us.

2014-08-19  Eli Zaretskii  <eliz@gnu.org>

	* w32term.c (w32_horizontal_scroll_bar_handle_click): Fix the
	second coordinate ('y') reported for dragging the horizontal
	scroll bar thumb.

2014-08-19  YAMAMOTO Mitsuharu  <mituharu@math.s.chiba-u.ac.jp>

	* xdisp.c (erase_phys_cursor): Fix confusion between window-relative
	and text area-relative x-coordinates.

2014-08-17  Eli Zaretskii  <eliz@gnu.org>

	Avoid overwriting the reversed_p flags in the glyph matrices when
	init_iterator or start_display are called.
	* xdisp.c (init_iterator): Don't initialize the reversed_p flag of
	the glyph row here.
	(tool_bar_height, redisplay_tool_bar, try_window)
	(try_window_reusing_current_matrix, try_window_id)
	(get_overlay_arrow_glyph_row, display_menu_bar): Initialize the
	reversed_p flag of the iterator's glyph row where the glyph row
	is going to be redrawn.

2014-08-16  Paul Eggert  <eggert@cs.ucla.edu>

	* xdisp.c (set_horizontal_scroll_bar): Don't use uninitialized local.

2014-08-16  Martin Rudalics  <rudalics@gmx.at>

	* w32term.c (w32_horizontal_scroll_bar_handle_click): In y part
	of emacs_event return length from si.nPage to si.nMax.
	* xdisp.c (set_horizontal_scroll_bar): For right-to-left text
	interchange start and end of thumb.

2014-08-15  Ken Brown  <kbrown@cornell.edu>

	* gmalloc.c (_malloc_mutex, _aligned_blocks_mutex) [CYGWIN]: Use
	ERRORCHECK mutexes.  (Bug#18222)

2014-08-12  Martin Rudalics  <rudalics@gmx.at>

	* frame.c (set_menu_bar_lines_1): Remove.
	(set_menu_bar_lines): Call change_frame_size instead of
	set_menu_bar_lines_1.

2014-08-11  Jan Djärv  <jan.h.d@swipnet.se>

	* nsfns.m (Fx_create_frame): Call adjust_frame_size,
	set f->official.

2014-08-11  Glenn Morris  <rgm@gnu.org>

	* fileio.c: Revert 2013-01-31 change, which chose coding system for
	writing before backing up, since it causes a more serious problem
	than the one it solves.  (Closes Bug#18141, reopens Bug#13522.)
	(choose_write_coding_system): No longer callable from Lisp.
	Move last piece back here from Fwrite_region.
	(Fwrite_region, syms_of_fileio): Update for above changes.

2014-08-11  Martin Rudalics  <rudalics@gmx.at>

	* window.c (Fwindow_valid_p): Fix doc-string (Bug#18194).
	(Fwindow_new_total, Fwindow_normal_size, Fwindow_new_normal)
	(Fwindow_new_pixel, Fset_window_new_pixel)
	(Fset_window_new_total, Fset_window_new_normal)
	(Fwindow_resize_apply): Fix doc-strings (see Bug#18112).
	See also:
	https://lists.gnu.org/r/bug-gnu-emacs/2014-08/msg00287.html

2014-08-11  Eli Zaretskii  <eliz@gnu.org>

	* fontset.c (Finternal_char_font): Recompute basic faces if the
	frame's face cache was cleared.  (Bug#18162)

2014-08-11  Dmitry Antipov  <dmantipov@yandex.ru>

	Fix bug with uninitialized undo list of an indirect buffer (Bug#18180).
	* buffer.c (Fmake_indirect_buffer): Initialize undo list with the
	base buffer's undo list.

2014-08-10  Reuben Thomas  <rrt@sc3d.org>

	Fix a couple of recent inadvertent breaks of the MSDOS port.
	* msdos.c: include required menu.h
	* term.c: set correct menu_show_hook on MSDOS.

2014-08-10  Martin Rudalics  <rudalics@gmx.at>

	Fix handling of menu bar line on TTY frames (Bug#18136)
	(Bug#18196).
	* dispnew.c (handle_window_change_signal):
	* keyboard.c (Fsuspend_emacs): Call change_frame_size with
	frame's menu bar lines subtracted from height.
	* frame.c (frame_inhibit_resize): Inhibit resizing of TTY
	frames.
	(adjust_frame_size): Count in menu bar when setting FrameRows.
	(make_terminal_frame): When setting up the frame's lines and
	text height don't count in the menu bar.
	(Fmake_terminal_frame): Call adjust_frame_size with menu bar
	lines subtracted from height.
	(do_switch_frame): Set tty's FrameRows to number of total lines
	of frame.
	(Fframe_pixel_height, Fframe_pixel_width): If no window system
	is used, return total number of lines and columns.
	* menu.c (emulate_dialog_with_menu): Use FRAME_TOTAL_LINES instead
	of FRAME_LINES.
	* term.c (OUTPUT, tty_set_terminal_modes)
	(tty_set_terminal_window, tty_set_scroll_region)
	(tty_clear_to_end, tty_write_glyphs, tty_write_glyphs_with_face)
	(tty_ins_del_lines, tty_menu_display, tty_menu_activate):
	Use FRAME_TOTAL_LINES instead of FRAME_LINES.
	(Fresume_tty): Use FRAME_TOTAL_LINES instead of FRAME_LINES.
	Call change_frame_size with frame's menu bar lines subtracted
	from height.
	* w32console.c (w32con_clear_to_end, w32con_clear_frame)
	(w32con_ins_del_lines): Use FRAME_TOTAL_LINES instead of
	FRAME_LINES.

2014-08-09  Reuben Thomas  <rrt@sc3d.org>

	* alloc.c (Fmemory_info): Remove a stray brace.

	* process.c: Fix a comment typo.

	* msdos.c, dosfns.c (init_dosfns): Remove support for DJGPP < 2.02.

2014-08-09  Jan Djärv  <jan.h.d@swipnet.se>

	* widgetprv.h (EmacsFramePart): Remove font.

	* widget.c (DEFAULT_FACE_FONT, EmacsFrameSetValues, setup_frame_gcs)
	(resources, setup_frame_cursor_bits): Remove unused variables and
	functions, esp. wrt. font (Bug#18227).

2014-08-07  Paul Eggert  <eggert@cs.ucla.edu>

	* xterm.c (x_delete_terminal): Plug file descriptor leak (Bug#17691).

2014-08-07  Reuben Thomas  <rrt@sc3d.org>

	Refer to MS-DOS using the same name everywhere.

	* editfns.c: Fix a couple of ``MS-DOG''s missed in the previous
	commit.
	* xfaces.c: ditto.

2014-08-05  Martin Rudalics  <rudalics@gmx.at>

	* w32term.c (w32_redeem_scroll_bar):
	* xterm.c (XTredeem_scroll_bar): Revert part of last change by
	not redeeming scroll bars that have been turned off.

2014-08-05 Dmitry Antipov  <dmantipov@yandex.ru>

	* keyboard.c (safe_run_hooks): Follow the convenient style to bind
	inhibit-quit to t and pass 2 args to safe_run_hook_funcall.  See
	<https://lists.gnu.org/r/emacs-devel/2014-08/msg00077.html>.
	(safe_run_hook_funcall): Adjust accordingly.

2014-08-04  Martin Rudalics  <rudalics@gmx.at>

	* frame.h (FRAME_HAS_HORIZONTAL_SCROLL_BARS):
	Condition correctly according to toolkit used.
	* frame.c (make_initial_frame, make_terminal_frame)
	(x_set_horizontal_scroll_bars, x_set_scroll_bar_height)
	(Vdefault_frame_horizontal_scroll_bars): Correctly condition
	assignments according to presence of toolkit scrollbars.
	* window.h (WINDOW_HAS_HORIZONTAL_SCROLL_BAR):
	Condition correctly according to toolkit used.
	* window.c (set_window_scroll_bars): Set horizontal scroll bar
	only if toolkit supports it.
	* w32term.c (w32_redeem_scroll_bar): Always redeem scroll bar if
	present.
	* xterm.c (x_scroll_bar_create): Initialize horizontal slot for
	non-toolkit builds.
	(XTredeem_scroll_bar): Always redeem scroll bar if present.

2014-08-04 Dmitry Antipov  <dmantipov@yandex.ru>

	* keyboard.c (safe_run_hook_funcall): Avoid consing around
	Vinhibit_quit and prefer internal_condition_case_n to pass args.
	(safe_run_hooks_error, safe_run_hooks_1): Adjust accordingly.
	(safe_run_hooks): Remove comment which is not relevant any more.

2014-08-03  Paul Eggert  <eggert@cs.ucla.edu>

	Don't let big frames overrun the stack.
	* dispnew.c (mirrored_line_dance, mirror_line_dance, scrolling):
	Use SAFE_NALLOCA, not alloca.

	Fix bug with clang + directory_files_internal + GC (Bug#16986).
	* dired.c (directory_files_internal): Use a volatile variable
	to prevent the compiler from optimizing away all copies of a local.
	I wonder how many other GC-related bugs like this lurk elsewhere?

	Avoid 100% CPU utilization on ssh session exit (Bug#17691).
	* xterm.h (struct x_display_info): New member 'connection'.
	* xterm.c (x_term_init, x_delete_terminal): Set and use it,
	so that x_delete_terminal has a file descriptor to pass to
	delete_keyboard_wait_descriptor.

	Don't mishandle year-9999 dates (Bug#18176).
	* editfns.c (decode_time_components): Store an invalid timespec
	on overflow, instead of returning false, so that the caller can
	distinguish overflow from other errors.
	(lisp_time_argument, lisp_seconds_argument): If the time is out
	of range, signal a time overflow instead of an invalid time spec.
	* keyboard.c (decode_timer): Treat time overflow like other
	timespec errors.

	Avoid undefined behavior with signed left shift.
	Caught by 'gcc -fsanitize=undefined'.
	* dispextern.h, scroll.c (scrolling_max_lines_saved, scrolling_1):
	* dispnew.c (line_hash_code, scrolling):
	* scroll.c (calculate_scrolling, calculate_direct_scrolling):
	Use 'unsigned', not 'int', for line hashes.
	(scrolling_max_lines_saved): Avoid mystery constants for hash sizes.

2014-08-02  Paul Eggert  <eggert@cs.ucla.edu>

	Make compare-strings more compatible with old behavior (Bug#17903).
	* fns.c (Fcompare_strings): Silently bring too-large ends into range.

2014-08-02  Jan Djärv  <jan.h.d@swipnet.se>

	* gtkutil.c (create_dialog): Force min spacing 10 between buttons.
	Don't add label between left and right buttons (Bug#18129).

2014-08-01  Paul Eggert  <eggert@cs.ucla.edu>

	Make functions static that no longer need to be extern.
	* frame.c, frame.h (set_menu_bar_lines):
	* keyboard.c (Qleftmost, Qrightmost):
	* xfns.c, frame.h, menu.h (x_set_menu_bar_lines, x_set_tool_bar_lines)
	(x_set_internal_border_width):
	Now static.

2014-08-01  Eli Zaretskii  <eliz@gnu.org>

	Fix display of R2L lines when the last character fits only partially.
	See https://lists.gnu.org/r/emacs-devel/2014-07/msg00476.html
	for the details.
	* xdisp.c (extend_face_to_end_of_line): If the last glyph of an
	R2L row is visible only partially, give the row a negative x
	offset.
	(display_line): Fix the calculation of the glyph whose pixel width
	is used to decide whether the last produced glyph fits on the
	line.  When the last glyph fits only partially, give the row a
	negative x offset.

	Fix hscroll of R2L lines that begin with a TAB or another wide glyph.
	* xdisp.c (append_stretch_glyph): In a R2L glyph row, decrease the
	pixel width of the first glyph that is hscrolled from display.
	(display_line): In R2L glyph rows, don't give a negative offset to
	row->x when the first glyph begins before first_visible_x.

	* xdisp.c (display_line): If called with iterator set up to write
	to a marginal area, delay the call to handle_line_prefix until we
	switch back to the text area.  (Bug#18035)

	* .gdbinit (xwindow): The members total_cols, total_lines,
	left_col, and top_line are C integers (and has been so for the
	last 1.5 years).

2014-08-01  Andreas Schwab  <schwab@suse.de>

	* macros.c (Fstart_kbd_macro): Initialize kbd_macro_ptr and
	kbd_macro_end together with kbd_macro_buffer.  (Bug#18140)

2014-08-01  Dmitry Antipov  <dmantipov@yandex.ru>

	* atimer.c (toplevel) [HAVE_TIMERFD]: Include errno.h.
	(timerfd_callback): Ignore weird events with no data.  Add tight
	assertions and comments.
	(init_atimer) [HAVE_TIMERFD]: Add environment variable to optionally
	disable timerfd-based timer.  Use TFD_NONBLOCK for timer descriptor.

2014-08-01  Paul Eggert  <eggert@cs.ucla.edu>

	* frame.c (x_set_frame_parameters): Fix typo in previous patch.
	I had confused && with ||.

2014-07-31  Paul Eggert  <eggert@cs.ucla.edu>

	Simplify timerfd configuration and fix some minor glitches.
	* atimer.c (TIMERFD_CREATE_FLAGS): Remove; we now assume TFD_CLOEXEC.
	(alarm_timer, alarm_timer_ok, set_alarm, init_atimer):
	Fall back on timer_create if timerfd_create fails at runtime.
	(resolution) [HAVE_CLOCK_GETRES]: Remove; we now rely on the
	kernel primitives to do resolution.  All uses removed.
	(timerfd) [!HAVE_TIMERFD]: Define to be -1, for convenience.
	(turn_on_atimers): Clear timer_create-based timers too,
	for consistency.

	* frame.c (x_set_frame_parameters): Don't use uninitialized locals.
	Without this change, the code can access the local variable 'width'
	even when it has not been initialized, and likewise for 'height';
	in either case this leads to undefined behavior.

2014-07-30  Dmitry Antipov  <dmantipov@yandex.ru>

	* xrdb.c (x_load_resources) [USE_MOTIF]: Although not strictly
	necessary, put horizontal scroll bar resources as well.  See
	<https://lists.gnu.org/r/emacs-devel/2014-07/msg00430.html>.
	* xterm.c (x_sync_with_move): Really wait 0.5s, not 0.0005s.

2014-07-29  Dmitry Antipov  <dmantipov@yandex.ru>

	* xrdb.c (x_load_resources) [!USE_MOTIF]: Put horizontal scroll bar
	background value to match the resource of its vertical counterpart.

2014-07-29  Martin Rudalics  <rudalics@gmx.at>

	* frame.c (adjust_frame_size): Use FRAME_WINDOW_P instead of
	FRAME_X_WINDOW when calling x_set_window_size (Bug#18138).

2014-07-28  Martin Rudalics  <rudalics@gmx.at>

	* frame.c (x_set_frame_parameters): Revert part of 2014-07-24
	change that added the top margin height to the requested height
	and revert (undocumented) part of 2014-07-28 change that changed
	the logic of whether a size change occurred.

2014-07-28  Eli Zaretskii  <eliz@gnu.org>

	* .gdbinit (xwindow): The members total_cols, total_lines,
	left_col, and top_line are C integers (and has been so for the
	last 1.5 years).

	* .gdbinit (xsubchartable): The members 'depth' and 'min_char' are
	now C integers.

2014-07-28  Dmitry Antipov  <dmantipov@yandex.ru>

	On GNU/Linux, use timerfd for asynchronous timers.
	* atimer.c (toplevel) [HAVE_TIMERFD]: Include sys/timerfd.h.
	(toplevel): Rename alarm_timer_ok to special_timer_available.
	[HAVE_TIMERFD]: Declare timerfd.
	[HAVE_CLOCK_GETRES]: Declare resolution.
	(start_atimer) [HAVE_CLOCK_GETRES]: Round up timestamp to
	system timer resolution.
	(set_alarm) [HAVE_TIMERFD]: Use timerfd_settime.
	(timerfd_callback) [HAVE_TIMERFD]: New function.
	(atimer_result, debug_timer_callback, Fdebug_timer_check)
	[ENABLE_CHECKING]: New function for the sake of automated tests.
	(init_atimer) [HAVE_TIMERFD]: Setup timerfd.
	[HAVE_CLOCK_GETRES]: Likewise for system timer resolution.
	[ENABLE_CHECKING]: Defsubr test function.
	* atimer.h (timerfd_callback) [HAVE_TIMERFD]: Add prototype.
	* lisp.h (add_timer_wait_descriptor) [HAVE_TIMERFD]: Likewise.
	* process.c (add_timer_wait_descriptor) [HAVE_TIMERFD]: New function.

	Fix --without-x build and pacify --enable-gcc-warnings.
	Problems reported in Bug#18122 and Bug#18124.
	* frame.c (get_frame_param): Define even if !HAVE_WINDOW_SYSTEM.
	(frame_windows_min_size): Now static.
	* frame.h (FRAME_HAS_HORIZONTAL_SCROLL_BARS) [!HAVE_WINDOW_SYSTEM]:
	Define as no-op.
	(adjust_frame_size): Always declare prototype.

	Fix Gnus-related issues reported by David Kastrup <dak@gnu.org> in
	<https://lists.gnu.org/r/emacs-devel/2014-07/msg00370.html>.
	* atimer.c (timerfd_callback): Always read expiration data.
	Add comment.
	(turn_on_atimers) [HAVE_TIMERFD]: Disarm timerfd timer.
	* process.c (add_timer_wait_descriptor): Add timer descriptor
	to input_wait_mask and non_process_wait_mask as well.

2014-07-28  Paul Eggert  <eggert@cs.ucla.edu>

	* frame.c (x_set_frame_parameters): Don't use uninitialized locals.

2014-07-27  Jan Djärv  <jan.h.d@swipnet.se>

	* nsterm.m (applicationDidFinishLaunching antialiasThresholdDidChange):
	Reinstate code removed by the prevoius commit to this file.

2014-07-27  Martin Rudalics  <rudalics@gmx.at>

	* buffer.h (struct buffer): New fields scroll_bar_height and
	horizontal_scroll_bar_type.
	* buffer.c (bset_scroll_bar_height)
	(bset_horizontal_scroll_bar_type): New functions.
	(Fbuffer_swap_text): Handle old_pointm field.
	(init_buffer_once): Set defaults for scroll_bar_height and
	horizontal_scroll_bar_type.
	(syms_of_buffer): New variables scroll_bar_height and
	horizontal_scroll_bar_type.
	* dispextern.h (window_part): Rename ON_SCROLL_BAR to
	ON_VERTICAL_SCROLL_BAR.  Add ON_HORIZONTAL_SCROLL_BAR.
	(set_vertical_scroll_bar): Remove prototype.
	(x_change_tool_bar_height): Add prototype.
	* dispnew.c (adjust_frame_glyphs_for_frame_redisplay)
	(window_to_frame_vpos, update_frame_1, scrolling, init_display):
	Use FRAME_TOTAL_COLS and FRAME_TOTAL_LINES instead of FRAME_COLS
	and FRAME_LINES.
	(adjust_frame_glyphs_for_window_redisplay): Rearrange lines.
	(update_window): Start mode_line_row->y after horizontal scroll
	bar.
	(change_frame_size_1): Call adjust_frame_size.
	(init_display): When changing the size of a tty frame do not
	pass height of menu bar.
	(Qframe_windows_min_size): New symbol.
	* frame.h (struct frame): List tool bar fields after menu bar
	fields.  Add official, total_lines, horizontal_scroll_bars,
	config_scroll_bar_height and config_scroll_bar_lines fields.
	(FRAME_HAS_HORIZONTAL_SCROLL_BARS)
	(FRAME_CONFIG_SCROLL_BAR_HEIGHT, FRAME_CONFIG_SCROLL_BAR_LINES)
	(FRAME_SCROLL_BAR_AREA_HEIGHT, FRAME_SCROLL_BAR_COLS)
	(FRAME_SCROLL_BAR_LINES, FRAME_TOTAL_LINES, SET_FRAME_LINES)
	(FRAME_WINDOWS_HEIGHT): New macros.
	(SET_FRAME_HEIGHT, FRAME_TEXT_LINES_TO_PIXEL_HEIGHT)
	(FRAME_PIXEL_Y_TO_LINE, FRAME_PIXEL_HEIGHT_TO_TEXT_LINES)
	(FRAME_TEXT_TO_PIXEL_HEIGHT): Separately count top margin and
	horizontal scroll bar.
	(frame_inhibit_resize, adjust_frame_size)
	(frame_windows_min_size): Add declarations.
	(Qscroll_bar_height, Qhorizontal_scroll_bars)
	(x_set_scroll_bar_default_height, x_set_left_fringe)
	(x_set_right_fringe, x_set_vertical_scroll_bars)
	(x_set_horizontal_scroll_bars, x_set_scroll_bar_width)
	(x_set_scroll_bar_height): Add external declarations.
	* frame.c: (frame_inhibit_resize, frame_windows_min_size)
	(adjust_frame_size): New functions.
	(make_frame): Initial horizontal_scroll_bars field.
	Use SET_FRAME_LINES.  Don't allow horizontal scroll bar in
	minibuffer window.
	(make_initial_frame, make_terminal_frame): No horizontal scroll
	bar in initial and terminal frames.  Use adjust_frame_size.
	(Fframe_total_cols): Fix doc-string.
	(Fframe_total_lines, Fscroll_bar_height): New Lisp functions.
	(Fset_frame_height, Fset_frame_width, Fset_frame_size):
	Rewrite using adjust_frame_size.
	(Qscroll_bar_height, Qhorizontal_scroll_bars)
	(Qframe_windows_min_size): New symbols.
	(x_set_frame_parameters): Remove call of check_frame_size.
	(x_report_frame_params): Return scroll_bar_height value.
	(x_set_left_fringe, x_set_right_fringe): New functions.
	(adjust_frame_height, x_set_internal_border_width)
	(x_set_fringe_width): Remove.
	(x_set_internal_border_width, x_set_vertical_scroll_bars)
	(x_set_scroll_bar_width, x_set_right_divider_width)
	(x_set_bottom_divider_width): Rewrite using adjust_frame_size.
	(x_set_horizontal_scroll_bars, x_set_scroll_bar_height):
	New functions.
	(x_figure_window_size): Rewrite to make frame display the
	expected number of lines.
	(Vdefault_frame_scroll_bars): Rewrite doc-string.
	(Vdefault_frame_horizontal_scroll_bars)
	(Vframe_initial_frame_tool_bar_height)
	(frame_inhibit_implied_resize): New variables.
	* fringe.c (compute_fringe_widths): Remove.
	* gtkutil.h (YG_SB_MIN, YG_SB_MAX, YG_SB_RANGE): Define.
	(xg_create_horizontal_scroll_bar)
	(xg_update_horizontal_scrollbar_pos)
	(xg_set_toolkit_horizontal_scroll_bar_thumb)
	(xg_get_default_scrollbar_height)
	(xg_clear_under_internal_border): Extern.
	* gtkutil.c (xg_frame_resized): Call do_pending_window_change.
	(xg_frame_set_char_size): Use adjust_frame_size.
	(style_changed_cb): Call update_theme_scrollbar_height and
	x_set_scroll_bar_default_height.
	(x_wm_set_size_hint): Don't call check_frame_size.
	(update_theme_scrollbar_height)
	(xg_get_default_scrollbar_height)
	(xg_create_horizontal_scroll_bar)
	(xg_update_horizontal_scrollbar_pos)
	(xg_set_toolkit_horizontal_scroll_bar_thumb): New functions.
	(xg_create_scroll_bar): Set horizontal slot of bar.
	(xg_initialize): Call update_theme_scrollbar_height.
	(xg_clear_under_internal_border): No more static.
	* insdel.c (adjust_suspend_auto_hscroll): New function.
	(adjust_markers_for_delete, adjust_markers_for_insert)
	(adjust_markers_for_replace): Call adjust_suspend_auto_hscroll.
	* keyboard.c (readable_events, discard_mouse_events)
	(make_lispy_event): Handle horizontal scroll bar click events.
	(Fsuspend_emacs): When changing the size of a tty frame do not
	pass height of menu bar.
	(Qbefore_handle, Qhorizontal_handle, Qafter_handle, Qleft)
	(Qright, Qleftmost, Qrightmost): New symbols.
	* menu.c (Fx_popup_dialog): Use FRAME_TOTAL_LINES instead of
	FRAME_LINES.
	* minibuf.c (read_minibuf): Initialize suspend_auto_hscroll.
	* nsfns.m (x_set_internal_border_width): New function.
	* nsterm.m (ns_draw_fringe_bitmap, ns_set_vertical_scroll_bar):
	Remove extended fringe code.
	(x_set_window_size, x_new_font): Don't call
	compute_fringe_widths.
	* term.c (Fresume_tty): When changing the size of a tty frame do
	not pass height of menu bar.
	(clear_tty_hooks, set_tty_hooks):
	Clear horizontal_scroll_bar_hook.
	(init_tty): Frame has no horizontal scroll bars.
	* termhooks.h (enum scroll_bar_part): Add scroll_bar_move_ratio,
	scroll_bar_before_handle, scroll_bar_horizontal_handle,
	scroll_bar_after_handle, scroll_bar_left_arrow,
	scroll_bar_right_arrow, scroll_bar_to_leftmost and
	scroll_bar_to_rightmost entries.
	(enum event_kind): Add HORIZONTAL_SCROLL_BAR_CLICK_EVENT
	(struct terminal): Add set_horizontal_scroll_bar_hook.
	* w32console.c (initialize_w32_display):
	Clear horizontal_scroll_bar_hook.
	* w32fns.c (x_set_mouse_color): Use FRAME_W32_DISPLAY instead of
	FRAME_X_DISPLAY.
	(x_clear_under_internal_border, x_set_internal_border_width):
	New functions.
	(x_set_menu_bar_lines): Rewrite using frame_inhibit_resize.
	Set windows_or_buffers_changed when adding the menu bar.
	(x_set_tool_bar_lines): Rewrite using adjust_frame_size.
	(x_change_tool_bar_height, x_set_scroll_bar_default_height)
	(w32_createhscrollbar): New functions.
	(w32_createscrollbar): Rename to w32_createvscrollbar.
	(w32_createwindow): Init WND_HSCROLLBAR_INDEX.
	(w32_name_of_message): Replace WM_EMACS_CREATESCROLLBAR by
	WM_EMACS_CREATEVSCROLLBAR and WM_EMACS_CREATEHSCROLLBAR.
	Add WM_EMACS_SHOWCURSOR.
	(w32_wnd_proc): Handle WM_HSCROLL case.  In WM_WINDOWPOSCHANGING
	case do not artificially impose WM size hints.
	Handle WM_EMACS_SHOWCURSOR case.  Replace WM_EMACS_CREATESCROLLBAR case
	by WM_EMACS_CREATEVSCROLLBAR and WM_EMACS_CREATEHSCROLLBAR
	cases.
	(my_create_tip_window): Replace WND_SCROLLBAR_INDEX by
	WND_VSCROLLBAR_INDEX and WND_HSCROLLBAR_INDEX.
	(unwind_create_frame_1): Remove.
	(Fx_create_frame): Make both scrollbars the system standard
	width and height.  Use official field of frame structure to
	inhibit running window-configuration-change-hook.
	(x_create_tip_frame): Call SET_FRAME_LINES and change_frame_size
	pixelwise.  Handle frame's official field.
	(w32_frame_parm_handlers): Remove x_set_fringe_width
	entries. Add x_set_scroll_bar_height,
	x_set_horizontal_scroll_bars, x_set_left_fringe and
	x_set_right_fringe.
	* w32inevt.c (resize_event, maybe_generate_resize_event): Do not
	pass height of menu bar to change_frame_size.
	* w32menu.c (set_frame_menubar): Rewrite using
	frame_inhibit_resize.
	* w32term.h (struct w32_display_info):
	Add horizontal_scroll_bar_cursor and cursor_display_counter.
	(struct scroll_bar): Add horizontal.
	(HORIZONTAL_SCROLL_BAR_INSIDE_HEIGHT)
	(HORIZONTAL_SCROLL_BAR_LEFT_RANGE)
	(HORIZONTAL_SCROLL_BAR_INSIDE_WIDTH)
	(HORIZONTAL_SCROLL_BAR_LEFT_BORDER)
	(HORIZONTAL_SCROLL_BAR_RIGHT_BORDER)
	(HORIZONTAL_SCROLL_BAR_TOP_BORDER)
	(HORIZONTAL_SCROLL_BAR_BOTTOM_BORDER)
	(HORIZONTAL_SCROLL_BAR_MIN_HANDLE): New macros.
	(WM_EMACS_CREATEVSCROLLBAR, WM_EMACS_CREATEHSCROLLBAR):
	Define instead of WM_EMACS_CREATESCROLLBAR.
	(WND_VSCROLLBAR_INDEX, WND_HSCROLLBAR_INDEX): Define instead of
	WND_SCROLLBAR_INDEX.
	* w32term.c (horizontal_scroll_bar_min_handle)
	(horizontal_scroll_bar_left_border)
	(horizontal_scroll_bar_right_border): New integers.
	(x_set_frame_alpha): Replace x_highlight_frame by
	w32_focus_frame.
	(x_window_to_scroll_bar): New argument "type".  Update callers
	accordingly.
	(w32_set_horizontal_scroll_bar_thumb)
	(x_horizontal_scroll_bar_report_motion)
	(w32_set_horizontal_scroll_bar)
	(w32_horizontal_scroll_bar_handle_click)
	(x_horizontal_scroll_bar_report_motion): New functions.
	(w32_mouse_position): Discriminate horizontal and vertical
	scrollbar cases.
	(my_create_scrollbar): Replace with two new functions
	my_create_vscrollbar and my_create_hscrollbar.
	(x_scroll_bar_create): New argument "horizontal".
	Update callers accordingly.
	(x_scroll_bar_remove, w32_condemn_scroll_bars)
	(w32_redeem_scroll_bar, x_scroll_bar_clear): Handle horizontal
	scroll bar case.
	(w32_read_socket): Handle WM_HSCROLL cae.
	(x_new_font): Don't recompute fringe widths.
	Use frame_inhibit_resize.  Calculate new menu bar height iff we
	build without toolkit.  Always clear under internal border.
	(x_set_window_size): Don't check frame size or recompute
	fringes.  Reset fullscreen status before applying sizes.
	Always resize as requested by pixelwise argument.  Call
	do_pending_window_change.
	(x_wm_set_size_hint): Add call for FRAME_SCROLL_BAR_AREA_HEIGHT.
	(w32_initialize_display_info): Initialize dpyinfo's
	horizontal_scroll_bar_cursor entry.
	(w32_create_terminal): Add set_horizontal_scroll_bar_hook.
	(w32_initialize): Init horizontal_scroll_bar_min_handle and
	horizontal_scroll_bar_left_border.
	(w32fullscreen_hook): Intermittently resize window to normal
	when switching from fullscreen to maximized state.
	(run_window_configuration_change_hook): Don't run it if frame is
	not official yet.
	(unwind_change_frame): Remove.
	(Fset_window_configuration): Rewrite using frame's official field.
	* widget.c (set_frame_size): Don't call compute_fringe_widths.
	(EmacsFrameSetCharSize): Obey frame_inhibit_resize.
	* window.h (struct window): New fields old_pointm,
	horizontal_scroll_bar, horizontal_scroll_bar_type, hscroll_whole,
	scroll_bar_height and suspend_auto_hscroll.
	(wset_horizontal_scroll_bar, wset_horizontal_scroll_bar_type):
	New functions.
	(sanitize_window_sizes): Extern.
	(MINI_NON_ONLY_WINDOW_P, MINI_ONLY_WINDOW_P, WINDOW_PSEUDO_P)
	(WINDOW_TOPMOST_P, WINDOW_HAS_HORIZONTAL_SCROLL_BAR)
	(WINDOW_CONFIG_SCROLL_BAR_HEIGHT)
	(WINDOW_CONFIG_SCROLL_BAR_LINES)
	(WINDOW_SCROLL_BAR_LINES, WINDOW_SCROLL_BAR_AREA_HEIGHT):
	New macros.
	(WINDOW_LEFT_FRINGE_COLS, WINDOW_RIGHT_FRINGE_COLS)
	(WINDOW_FRINGE_COLS, WINDOW_FRINGE_EXTENDED_P): Remove macros.
	(WINDOW_VERTICAL_SCROLL_BAR_TYPE)
	(WINDOW_HAS_VERTICAL_SCROLL_BAR_ON_LEFT)
	(WINDOW_HAS_VERTICAL_SCROLL_BAR_ON_RIGHT)
	(WINDOW_HAS_VERTICAL_SCROLL_BAR): Minor rewrite.
	(WINDOW_BOX_HEIGHT_NO_MODE_LINE, WINDOW_BOX_TEXT_HEIGHT)
	(WINDOW_SCROLL_BAR_AREA_Y): Count in scroll bar height.
	* window.c (wset_old_pointm, Fwindow_scroll_bar_height)
	(Fwindow_old_point, sanitize_window_sizes): New functions.
	(Qwindow_sanitize_window_sizes): New symbol.
	(window_body_height): Count in horizontal scroll bar.
	(set_window_hscroll, Fscroll_left, Fscroll_right):
	Set suspend_auto_hscroll slot.
	(Fwindow_inside_edges): Count fringes pixelwise.
	(coordinates_in_window, Fcoordinates_in_window_p):
	Consider horizontal scroll bar.
	(check_frame_size, adjust_window_margins): Remove functions and
	corresponding calls.
	(set_window_buffer): Initialize old_pointm and horizontal scroll bars.
	(temp_output_buffer_show): Reset hscroll related fields.
	Initialize old_pointm.
	(make_parent_window): Initialize old_pointm.
	(make_window): Initialize old_pointm, horizontal scroll bar type,
	and scroll bar height.
	(resize_frame_windows): Don't count top margin in new sizes.
	Don't use safe sizes when shrinking a frame; let the window
	manager do the clipping.
	(Fsplit_window_internal): Inherit horizontal scroll bar type and
	height.
	(Fdelete_window_internal): Unchain old_pointm marker.
	(window_scroll_pixel_based, Fscroll_other_window):
	Adjust old_pointm.
	(Fwindow_text_width, Fwindow_text_height): New argument
	"pixelwise".
	(struct saved_window): New fields, old_pointm, hscroll_whole,
	suspend_auto_hscroll, scroll_bar_height and
	horizontal_scroll_bar_type.
	(Fset_window_configuration, save_window_save): Set new fields of
	saved_window.
	(apply_window_adjustment): Don't call adjust_window_margins.
	(set_window_margins): Don't change margins if new sizes don't
	fit into window.
	(set_window_scroll_bars): New argument "horizontal_type".
	Handle horizontal scroll bars.  Don't change scroll bars if they
	don't fit into window.
	(Fset_window_scroll_bars): New argument "horizontal_type".
	(Fwindow_scroll_bars): Return values for horizontal scroll bars.
	(compare_window_configurations): Compare horizontal scroll bar
	settings.
	* xdisp.c (window_text_bottom_y, window_box_height): Count in
	horizontal scroll bar height.
	(pixel_to_glyph_coords, init_xdisp): Use FRAME_TOTAL_LINES
	instead of FRAME_LINES.
	(remember_mouse_glyph): Case ON_SCROLL_BAR changed to
	ON_VERTICAL_SCROLL_BAR.
	(with_echo_area_buffer): Initialize old_pointm.
	(with_echo_area_buffer_unwind_data): Store old_pointm values in
	vector.
	(unwind_with_echo_area_buffer): Handle old_pointm.
	(update_tool_bar): Set do_update when the tool bar window has at
	least one line (since this is what the user sets).
	(MAX_FRAME_TOOL_BAR_HEIGHT): Remove macro.
	(redisplay_tool_bar): Return early when toolbar has zero lines.
	Call x_change_tool_bar_height.  Don't use max_tool_bar_height.
	(hscroll_window_tree): Handle suspension of auto_hscroll and
	old_pointm.
	(set_horizontal_scroll_bar): New function.
	(redisplay_window): Set ignore_mouse_drag_p when tool bar has
	more than one line.  Handle horizontal scroll bars.
	(note_mouse_highlight): Handle horizontal scrol bars.
	(expose_frame): Set dimensions of XRectangle from frame's text
	sizes.
	(Vvoid_text_area_pointer): Update doc-string.
	* xfns.c (x_set_menu_bar_lines): Use adjust_frame_size.
	(x_change_tool_bar_height, x_set_scroll_bar_default_height)
	(x_set_internal_border_width): New functions.
	(x_set_tool_bar_lines): Call x_change_tool_bar_height.
	(unwind_create_frame_1): Remove.
	(Fx_create_frame): Handle horizontal scroll bars.  Use official
	field of frame structure to inhibit running
	window-configuration-change-hook.
	(x_create_tip_frame): Call SET_FRAME_LINES and change_frame_size
	pixelwise.  Handle frame's official field.
	(x_frame_parm_handlers): Add x_set_scroll_bar_height,
	x_set_horizontal_scroll_bars, x_set_left_fringe,
	x_set_right_fringe.
	* xmenu.c (update_frame_menubar, free_frame_menubar):
	Use adjust_frame_size.
	* xterm.h (struct x_display_info):
	Add horizontal_scroll_bar_cursor and Xatom_Horizontal_Scrollbar
	slots.
	(struct scroll_bar): Add horizontal slot.
	(HORIZONTAL_SCROLL_BAR_INSIDE_HEIGHT)
	(HORIZONTAL_SCROLL_BAR_LEFT_RANGE)
	(HORIZONTAL_SCROLL_BAR_INSIDE_WIDTH): New macros.
	(HORIZONTAL_SCROLL_BAR_LEFT_BORDER)
	(HORIZONTAL_SCROLL_BAR_RIGHT_BORDER)
	(HORIZONTAL_SCROLL_BAR_TOP_BORDER)
	(HORIZONTAL_SCROLL_BAR_BOTTOM_BORDER)
	(HORIZONTAL_SCROLL_BAR_MIN_HANDLE): Define.
	(x_clear_under_internal_border): Remove.
	* xterm.c (XTmouse_position): Handle horizontal scroll bars.
	(x_window_to_scroll_bar): New argument TYPE.  Update callers.
	(x_send_scroll_bar_event, x_scroll_bar_create): New arguments
	HORIZONTAL.  Update callers.
	(horizontal_action_hook_id): New action hook id.
	(x_horizontal_scroll_bar_to_input_event)
	(x_create_horizontal_toolkit_scroll_bar)
	(xt_horizontal_action_hook)
	(x_set_toolkit_horizontal_scroll_bar_thumb)
	(XTset_horizontal_scroll_bar, x_net_wm_state)
	(x_horizontal_scroll_bar_report_motion): New functions.
	(xg_scroll_callback, x_scroll_bar_handle_click):
	Handle horizontal scroll bars.
	(SCROLL_BAR_HORIZONTAL_NAME): Define.
	(XTset_vertical_scroll_bar): Attempt to clear areas not covered
	by scroll bar.
	(XTcondemn_scroll_bars, XTredeem_scroll_bar): Rewrite.
	Handle horizontal scroll bars.
	(handle_one_xevent): Handle horizontal scroll bar events.
	Call x_net_wm_state.
	(x_set_window_size_1, x_wm_set_size_hint): Don't call
	check_frame_size.
	(x_set_window_size): Don't call check_frame_size.  Call
	do_pending_window_change.
	(x_term_init): Init horizontal_scroll_bar_cursor display info.
	(x_create_terminal): Add set_horizontal_scroll_bar_hook.
	(x_scroll_bar_set_handle): Add some checks when calling
	x_clear_area.

2014-07-26  Paul Eggert  <eggert@cs.ucla.edu>

	Revert previous change.
	There is certainly nothing wrong with writing code like 'lo <= i
	&& i <= hi', even if LO happens to a constant.  There isn't even
	anything wrong in general with writing 'a <= b' if A happens to
	be a constant.  At any rate stylistic changes shouldn't
	be done like this without discussion.

2014-07-26  Andreas Schwab  <schwab@linux-m68k.org>

	* alloc.c (xnmalloc, xnrealloc, xpalloc, make_save_value)
	(Fgarbage_collect): Reorder conditions that are written backwards.
	* data.c (cons_to_unsigned): Likewise.
	* dispnew.c (update_frame_1, sit_for): Likewise.
	* fileio.c (file_offset): Likewise.
	* filelock.c (read_lock_data, lock_file): Likewise.
	* fns.c (larger_vector, make_hash_table, Fmake_hash_table):
	Likewise.
	* font.c (font_intern_prop, font_style_symbolic): Likewise.
	* lisp.h (FIXNUM_OVERFLOW_P): Likewise.
	* lread.c (read1): Likewise.
	* minibuf.c (read_minibuf_noninteractive): Likewise.
	* nsterm.m (x_set_frame_alpha): Likewise.
	* process.c (wait_reading_process_output): Likewise.
	* region-cache.c (delete_cache_boundaries): Likewise.
	* xterm.c (x_set_frame_alpha): Likewise.

2014-07-25  Paul Eggert  <eggert@cs.ucla.edu>

	* dispextern.h, xdisp.c (hourglass_shown_p, hourglass_atimer):
	Now static.

2014-07-26  Dmitry Antipov  <dmantipov@yandex.ru>

	* atimer.c (set_alarm) [HAVE_ITIMERSPEC]: Use TIMER_ABSTIME
	because atimer expiration is absolute rather than relative.

2014-07-25  Eli Zaretskii  <eliz@gnu.org>

	* w32term.h (current_popup_menu, menubar_in_use):
	Move declarations from w32term.c.

2014-07-25  Martin Rudalics  <rudalics@gmx.at>

	* w32fns.c (menubar_in_use): No more static.
	* w32term.c (current_popup_menu, menubar_in_use): Declare.

2014-07-25  Dmitry Antipov  <dmantipov@yandex.ru>

	Move hourglass machinery to RIF.
	* dispextern.h (struct redisplay_interface): New members
	show_hourglass and hide_hourglass.  Indent comments.
	(show_hourglass, hide_hourglass): Remove prototypes.
	* nsterm.m (show_hourgass, hide_hourglass): Refactor to ...
	(ns_show_hourglass, ns_hide_hourglass): ... new no-ops.
	(ns_redisplay_interface): Add them.
	* w32fns.c (show_hourglass, hide_hourglass): Refactor to ...
	* w32term.c (w32_show_hourglass, w32_hide_hourglass): ... these.
	(w32_arrow_cursor): New function to hack around non-GUI frames.
	(w32_redisplay_interface): Add new functions.
	* w32term.h (w32_arror_cursor): Add prototype.
	* xdisp.c (show_hourglass): New function, refactored out from
	platform-dependent code.
	(cancel_hourglass): Now call to RIF function.
	* xfns.c (show_hourglass, hide_hourglass): Refactor to ...
	* xterm.c (x_show_hourglass, x_hide_hourglass): ... these.
	(x_redisplay_interface): Add new functions.

2014-07-24  Dmitry Antipov  <dmantipov@yandex.ru>

	Fix error reported by Angelo Graziosi <angelo.graziosi@alice.it> in
	<https://lists.gnu.org/r/emacs-devel/2014-07/msg00274.html>
	and complete previous change.
	* frame.c (adjust_frame_height): New function.
	(Fset_frame_height, Fset_frame_size): Use it.
	(x_set_frame_parameters): Take frame top margin into account.

2014-07-23  Dmitry Antipov  <dmantipov@yandex.ru>

	* frame.c (Fset_frame_height): Take frame top margin into account.
	Incorrect behavior was reported by Martin Rudalics <rudalics@gmx.at> in
	<https://lists.gnu.org/r/emacs-devel/2014-07/msg00258.html>

2014-07-22  Dmitry Antipov  <dmantipov@yandex.ru>

	* xterm.h (struct x_output) [USE_X_TOOLKIT || USE_GTK]: Define
	menubar_height as such.  Tweak comment.
	[USE_LUCID && USE_TOOLKIT_SCROLL_BARS]: Likewise for
	scroll_bar_top_shadow_pixel and scroll_bar_bottom_shadow_pixel.
	All related users changed.
	(FRAME_MENUBAR_HEIGHT) [!USE_X_TOOLKIT && !USE_GTK]: No-op.
	* xterm.c (handle_one_xevent):
	* gtkutil.c (xg_event_is_for_menubar):
	* xfns.c (x_window) [USE_X_TOOLKIT]:
	* xmenu.c (set_frame_menubar, free_frame_menubar):
	Prefer to use FRAME_MENUBAR_HEIGHT.

2014-07-21  Dmitry Antipov  <dmantipov@yandex.ru>

	* frame.c (Fframe_parameters): Always report frame height without
	menu and tool bar lines.

2014-07-21  Jan Djärv  <jan.h.d@swipnet.se>

	* nsterm.m (applicationDidFinishLaunching:): Call
	antialiasThresholdDidChange, register for antialias changes (Bug#17534).
	(antialiasThresholdDidChange:): New method for EmacsApp.

	* nsterm.h (EmacsApp): Add antialiasThresholdDidChange.

	* macfont.m (macfont_update_antialias_threshold): Remove static.

	* macfont.h (macfont_update_antialias_threshold): Declare.

2014-07-21  Eli Zaretskii  <eliz@gnu.org>

	* w32select.c (setup_windows_coding_system):
	Apply CODING_ANNOTATION_MASK to the common_flags member of struct
	coding_system.  Reported by martin rudalics <rudalics@gmx.at>.

	* w16select.c (Fw16_get_clipboard_data):
	Apply CODING_ANNOTATION_MASK to the common_flags member of struct
	coding_system.

	* xdisp.c (init_iterator): Initialize it->stop_charpos to the
	buffer position where we are to start the iteration.
	(handle_invisible_prop): Record in it->stop_charpos the position
	where the invisible text ends.  (Bug#18035)
	(hscroll_window_tree): Don't try hscrolling windows whose cursor
	row has zero buffer position as their start position.
	Reported by martin rudalics <rudalics@gmx.at>.

	* xdisp.c (move_it_vertically_backward, move_it_by_lines): Prevent
	infinite looping in redisplay when display lines don't have enough
	space to display even a single character.  (Bug#18036)

2014-07-20  Dmitry Antipov  <dmantipov@yandex.ru>

	* frame.h (struct frame) [USE_X_TOOLKIT]: New member shell_position.
	* xfns.c (x_window): Use it to allow xfree later.
	(x_encode_text): Drop 3rd arg; unused.  Tweak comment and adjust users
	where appropriate.  Use bool for booleans and remove redundant checks.
	(Fx_backspace_delete_keys_p): Use XkbFreeKeyboard; explain why.
	* xterm.c (x_free_frame_resources): Free shell_position.

2014-07-19  K. Handa  <handa@gnu.org>

	* xfaces.c (realize_x_face): Call font_load_for_lface with no
	mandatory font spec (Bug#17973).

2014-07-19  Stefan Monnier  <monnier@iro.umontreal.ca>

	* font.c (font_score): Return the worst score if the size of
	ENTITY is wrong by more than a factor 2 (Bug#17973).

2014-07-18  Dmitry Antipov  <dmantipov@yandex.ru>

	* frame.c (frame_unspecified_color): New function
	refactored out from ...
	(Fframe_parameters, Fframe_parameter): ... adjusted users.
	(x_fullscreen_adjust, set_frame_param): Move Windows-specific
	function to ...
	* w32term.c (x_fullscreen_adjust, set_frame_param): ... static here.
	* frame.h (x_fullscreen_adjust) [HAVE_NTGUI]:
	* lisp.h (set_frame_param): Remove prototype.
	* xterm.c (x_display_pixel_width, x_display_pixel_height): Now ...
	* xterm.h (x_display_pixel_width, x_display_pixel_height): ...
	inlined from here.

	Prefer 'x_display_info *' to 'Display *' in X selection code.
	This helps to avoid unneeded calls to x_display_info_for_display.
	* xterm.h (struct selection_input_event): Record 'x_display_info *'
	instead of 'Display *'.
	(SELECTION_EVENT_DPYINFO): New macro.
	(SELECTION_EVENT_DISPLAY): Now inline function to prohibit using
	it as an lvalue.  Mention this in comment.
	* xterm.c (handle_one_xevent): Use SELECTION_EVENT_DPYINFO.
	* xselect.c (x_get_window_property_as_lisp_data, x_atom_to_symbol)
	(selection_data_to_lisp_data, receive_incremental_selection):
	Convert to use 'x_display_info *'.  Adjust users where appropriate.
	(lisp_data_to_selection_data): Likewise.  Also pass 'struct
	selection data *' as last arg to not return values in args.
	(unexpect_property_change): Use common removal technique.

2014-07-17  Dmitry Antipov  <dmantipov@yandex.ru>

	* print.c (print_preprocess): Adjust to match changed
	sub char-table structure and avoid crash (Bug#18038).

	* data.c (wrong_choice): Not static any more.
	* lisp.h (wrong_choice): Add prototype.
	* frame.h (struct frame) [USE_X_TOOLKIT || HAVE_NTGUI]:
	Declare namebuf as such.  Tweak comment.
	[USE_GTK]: Likewise for tool_bar_position.
	(fset_tool_bar_position) [USE_GTK]: Ditto.
	(FRAME_TOOL_BAR_POSITION): New macro.
	* frame.c (x_report_frame_params):
	* gtkutil.c (update_frame_tool_bar):
	* xfns.c (Fx_create_frame): Use it.
	(x_set_tool_bar_position): Add meaningful diagnostic messages.

2014-07-16  Eli Zaretskii  <eliz@gnu.org>

	* xdisp.c (decode_mode_spec): Call file-remote-p on the current
	buffer's default-directory only if it is a string.  (Bug#17986)

2014-07-16  Dmitry Antipov  <dmantipov@yandex.ru>

	More precise control over values of some buffer-local variables.
	* keyboard.c (Qvertical_scroll_bar):
	* frame.c (Qleft, Qright): Move to ...
	* buffer.c (Qleft, Qright, Qvertical_scroll_bar): ... here.
	* buffer.c (Qchoice, Qrange, Qoverwrite_mode, Qfraction): New symbols.
	(syms_of_buffer): DEFSYM all of the above, attach special properties.
	Use special symbols to DEFVAR_PER_BUFFER overwrite-mode,
	vertical-scroll-bar, scroll-up-aggressively
	and scroll-down-aggressively.
	* buffer.h (Qchoice, Qrange, Qleft, Qright, Qvertical_scroll_bar):
	Add declarations.
	* nsfns.m, frame.h (Qleft, Qright):
	* nsterm.m (Qleft): Remove declarations.
	* gtkutil.c (toplevel): Include buffer.h.
	* data.c (wrong_choice, wrong_range): New functions.
	(store_symval_forwarding): Handle special properties of buffer-local
	variables and use functions from the above to signal error, if any.

	* frame.h (enum fullscreen_type) [HAVE_WINDOW_SYSTEM]: Use more natural
	values.  Add comment.
	(struct frame): Re-arrange layout to avoid extra padding and use bit
	fields for output_method, want_fullscreen and vertical_scroll_bar_type.
	(FRAME_VERTICAL_SCROLL_BAR_TYPE, FRAME_HAS_VERTICAL_SCROLL_BARS)
	(FRAME_HAS_VERTICAL_SCROLL_BARS_ON_LEFT)
	(FRAME_HAS_VERTICAL_SCROLL_BARS_ON_RIGHT) [!HAVE_WINDOW_SYSTEM]:
	Define as no-ops because there are no scroll bars anyway.
	* frame.c (make_frame, make_terminal_frame, make_initial_frame):
	Adjust users.

	* font.c (fset_font_data) [HAVE_XFT || HAVE_FREETYPE]:
	Add convenient setter.
	(font_put_frame_data, font_get_frame_data): Use it.

2014-07-15  Daiki Ueno  <ueno@gnu.org>

	* nsgui.h (XCHAR2B_BYTE1): Add missing parentheses around
	pointer argument, before dereferencing.
	(XCHAR2B_BYTE2): Likewise.

2014-07-15  Dmitry Antipov  <dmantipov@yandex.ru>

	* xmenu.c (toplevel): Use LWLIB_ID for next_menubar_widget_id.
	(pop_down_menu) [USE_X_TOOLKIT]: Accept integer arg.
	(create_and_show_popup_menu, create_and_show_dialog) [USE_X_TOOLKIT]:
	Use record_unwind_protect_int and avoid consing.
	(syms_of_xmenu) [USE_X_TOOLKIT]: Declare WIDGET_ID_TICK_START.

	* regex.c (re_search_2): Use ssize_t to avoid integer overflow.

2014-07-14  Paul Eggert  <eggert@cs.ucla.edu>

	Use binary-io module, O_BINARY, and "b" flag (Bug#18006).
	* callproc.c (create_temp_file): Use mkostemp's O_BINARY flag.
	* emacs.c [MSDOS]:
	* emacs.c (main) [DOS_NT]: Don't mess with _fmode.
	(main) [MSDOS]: Use SET_BINARY instead of setmode.
	* minibuf.c: Include binary-io.h instead of fcntl.h.
	(read_minibuf_noninteractive):
	Use set_binary_mode instead of handcrafted code.
	Don't call emacs_set_tty if emacs_get_tty failed.
	* sysdep.c, systty.h (emacs_get_tty): Return int, not void.
	* sysdep.c (emacs_open, emacs_pipe): Use O_BINARY.
	* w32.c (pipe2): Adjust eassert to include O_BINARY.

	* macros.c (Fstart_kbd_macro): Avoid need for overflow check.
	This works around a GCC compiler bug when Emacs is configured with
	--enable-gcc-warnings.

2014-07-14  Dmitry Antipov  <dmantipov@yandex.ru>

	* lisp.h (CHECK_VECTOR_OR_STRING): Return number of elements
	or characters in string, respectively.  Add comment.
	* fringe.c (Fdefine_fringe_bitmap):
	* fns.c (Fsubstring, substring_both): Use it.
	* keymap.c (Fdefine_key, Flookup_key):
	* macros.c (Fstart_kbd_macro): Likewise.  Avoid call to Flength.

	* term.c (tty_menu_add_pane, tty_menu_add_selection):
	Use menu_item_width.
	(tty_menu_show): Simplify because tty_menu_create never return NULL.

2014-07-13  Paul Eggert  <eggert@cs.ucla.edu>

	Improve behavior of 'bzr up; cd src; make -k'.
	* Makefile.in (top_srcdir): New var.
	(ntsource, lispsource, ALL_CFLAGS, gl-stamp, emacs.res):
	Use '$(top_srcdir)' instead of '$(srcdir)/..';
	its expansion is a bit shorter.
	(../config.status): Actually build config.status instead of
	just complaining.
	(ACLOCAL_INPUTS, AUTOCONF_INPUTS):
	New macros, copied and relocated from ../Makefile.in.
	($(top_srcdir)/aclocal.m4, $(top_srcdir)/configure, config.in)
	(../config.status, Makefile): New dependencies and rules,
	copied with relocation from ../Makefile.in.  This should be more
	likely to rebuild the build machinery properly if you do a 'make'
	in the src directory.

2014-07-12  Eli Zaretskii  <eliz@gnu.org>

	* xdisp.c (display_line): Don't call FETCH_BYTE with argument less
	than 1.  (Bug#17962)

	* w32fns.c (Fx_file_dialog): Mention in the doc string the
	behavior on Windows 7 and later when the function is repeatedly
	invoked with the same value of DIR.  (Bug#17950)

	* xfns.c (Fx_file_dialog) [USE_MOTIF, USE_GTK]: Update the doc
	string to match the one in w32fns.c.

	* minibuf.c (read_minibuf_noninteractive) [WINDOWSNT]: Switch
	stdin to binary mode only if it is connected to a terminal.

2014-07-11  Paul Eggert  <eggert@cs.ucla.edu>

	Coalesce extern decls.
	* minibuf.c (emacs_get_tty, emacs_set_tty, suppress_echo_on_tty):
	* sysdep.c (emacs_get_tty, emacs_set_tty):
	Move duplicate extern decls from here ...
	* systty.h: ... to here, so that there's just one copy.

2014-07-11  Jan Djärv  <jan.h.d@swipnet.se>

	* nsterm.m (changeFont:): Add ifdef NS_IMPL_COCOA.

	* nsfns.m (Fns_popup_font_panel): Ditto.

2014-07-11  Eli Zaretskii  <eliz@gnu.org>

	* minibuf.c (read_minibuf_noninteractive): Finish reading on '\r',
	not only on '\n'.
	[WINDOWSNT]: Switch stdin to binary mode when not echoing input.

	* sysdep.c (emacs_get_tty, emacs_set_tty, suppress_echo_on_tty)
	[DOS_NT]: Implement for WINDOWSNT.

	* systty.h (struct emacs_tty) [DOS_NT]: The struct member is now
	unsigned.

2014-07-11  Michael Albinus  <michael.albinus@gmx.de>

	* sysdep.c (suppress_echo_on_tty): New function.
	* minibuf.c (read_minibuf_noninteractive): Use it.

2014-07-11  Dmitry Antipov  <dmantipov@yandex.ru>

	* alloc.c (Fmemory_info) [HAVE_LINUX_SYSINFO]: Return nil if
	sysinfo failed.  Adjust docstring.

2014-07-11  Eli Zaretskii  <eliz@gnu.org>

	Implement memory-info for MS-DOS.
	* dosfns.c (dos_memory_info): New function.
	* dosfns.h (dos_memory_info): Add prototype.
	* alloc.c (Fmemory_info) [MSDOS]: Call dos_memory_info.
	* vm-limit.c (get_lim_data) [MSDOS]: Call dos_memory_info, instead
	of doing some of its job.

	* minibuf.c (read_minibuf_noninteractive) [WINDOWSNT]: Don't
	reference termios structure members.

2014-07-11  Michael Albinus  <michael.albinus@gmx.de>

	* sysdep.c (emacs_get_tty, emacs_set_tty): Make them externally visible.

	* minibuf.c (top): Include systty.h.  Declare external
	emacs_get_tty and emacs_set_tty.
	(Vread_hide_char): New lisp variable.
	(read_minibuf_noninteractive): Hide characters with
	Vread_hide_char if it is a character.  (Bug#17839)

2014-07-10  Eli Zaretskii  <eliz@gnu.org>

	Implement memory-info for MS-Windows.
	* w32.c (w32_memory_info): New function.
	* w32.h (w32_memory_info): Prototype it.
	* alloc.c (Fmemory_info) [WINDOWSNT]: Call it.

2014-07-10  Dmitry Antipov  <dmantipov@yandex.ru>

	* coding.h (struct coding_system): Remove 'error_positions' (unused)
	and 'errors' (set but unused) fields.  Use bitfields for 'eol_seen',
	'mode', 'common_flags' and 'result' fields, adjust layout to avoid
	extra padding and shrink struct coding_system by 56 bytes (x86_64).
	* coding.c (decode_coding_utf_8, decode_coding_utf_16)
	(decode_coding_emacs_mule, decode_coding_iso_2022, decode_coding_sjis)
	(decode_coding_big5, decode_coding_charset, decode_coding)
	(encode_coding): Adjust users.

	* alloc.c (Fmemory_info): New function.

2014-07-09  Paul Eggert  <eggert@cs.ucla.edu>

	* syntax.c (back_comment): Use more-natural location for label.

	* font.c, font.h (font_unparse_fcname): Now static.
	Define only if HAVE_XFT || HAVE_FREETYPE || HAVE_NS.

2014-07-09  Dmitry Antipov  <dmantipov@yandex.ru>

	Next minor cleanup of font subsystem.
	* font.h (enum font_property_index): Remove FONT_ENTITY_INDEX (no
	users) and FONT_FORMAT_INDEX (set by a few font drivers but never
	really used).
	(FONT_ENTITY_NOT_LOADABLE, FONT_ENTITY_SET_NOT_LOADABLE): Remove;
	unused.
	* ftfont.h (ftfont_font_format): Remove prototype.
	* ftfont.c (ftfont_font_format): Remove; now unused.
	(ftfont_open):
	* nsfont.m (nsfont_open):
	* w32font.c (w32font_open_internal):
	* w32uniscribe.c (uniscribe_open):
	* xfont.c (xfont_open):
	* xftfont.c (xftfont_open): All users changed.

	* coding.c (ALLOC_CONVERSION_WORK_AREA): Prefer ptrdiff_t to int and
	so avoid integer overflow if decoded gap size exceeds INT_MAX bytes.

2014-07-09  Eli Zaretskii  <eliz@gnu.org>

	* xdisp.c (move_it_to): Adjust calculation of line_start_x to what
	x_produce_glyphs does when it generates a stretch glyph that
	represents a TAB.  (Bug#17969)

	* xdisp.c (pos_visible_p): If CHARPOS is at beginning of window,
	and there is a display property at that position, don't call
	move_it_to to move to a position before window start.  (Bug#17942)
	Fix condition for finding CHARPOS by the first call to move_it_to.
	(Bug#17944)

2014-07-09  Stefan Monnier  <monnier@iro.umontreal.ca>

	* syntax.c (find_defun_start): Try the cache even
	if !open_paren_in_column_0_is_defun_start.
	(back_comment): If find_defun_start was pessimistic, use the
	scan_sexps_forward result to improve the cache (bug#16526).

2014-07-09  Eli Zaretskii  <eliz@gnu.org>

	* xdisp.c (redisplay_window): If redisplay of a window ends up
	with point in a partially visible line at end of the window, make
	sure the amended position of point actually has smaller Y
	coordinate; if not, give up and scroll the display.  (Bug#17905)

	* window.c (window_scroll_pixel_based): When point ends up at the
	last fully visible line, don't let move_it_to stop at the left
	edge of the line and dupe us into thinking point is inside the
	scroll margin.

	* w32.c (network_interface_info): Make sure the argument is a
	Lisp string.

2014-07-08  Paul Eggert  <eggert@cs.ucla.edu>

	* process.c (read_and_dispose_of_process_output): Fix typo
	in previous patch: we want nonnegative fds, not nonzero fds.

2014-07-08  Dmitry Antipov  <dmantipov@yandex.ru>

	* chartab.c (char_table_translate): Move to...
	* character.h (char_table_translate): ... inline function here.
	Avoid Faref and assume that args are always valid.  This helps to
	speedup search, which is especially important for a huge buffers.
	* lisp.h (char_table_translate): Remove prototype.

	* nsfont.m (nsfont_close): Free glyphs and metrics arrays as well.
	* font.c (font_build_object) [HAVE_XFT || HAVE_FREETYPE || HAVE_NS]:
	New function, with an intention to avoid code duplication between
	a few font drivers.
	* font.h (font_build_object) [HAVE_XFT || HAVE_FREETYPE || HAVE_NS]:
	Add prototype.
	* ftfont.c (ftfont_open):
	* macfont.m (macfont_open):
	* xftfont.c (xftfont_open): Use it.

2014-07-08  Paul Eggert  <eggert@cs.ucla.edu>

	* process.c: Add sanity checks for file descriptors (Bug#17844).
	(wait_reading_process_output, Fprocess_filter_multibyte_p):
	Check that infd is nonnegative before using it as an fd.
	(read_and_dispose_of_process_output, Fprocess_send_eof):
	Likewise, for outfd.
	(wait_reading_process_output): Omit unnecessary check of infd.

2014-07-07  Paul Eggert  <eggert@cs.ucla.edu>

	Minor fixups related to usage of the 'long' type.
	* gnutls.c (emacs_gnutls_handshake):
	* xfaces.c (dump_realized_face):
	Work even if 'long' is narrower than 'void *'.
	* termcap.c (scan_file):
	* xselect.c (x_decline_selection_request)
	(x_reply_selection_request, x_get_window_property):
	* xterm.c (x_set_frame_alpha):
	Remove unnecessary 'L' suffixes of integer constants.
	* xfns.c (hack_wm_protocols):
	* xselect.c (x_fill_property_data):
	* xterm.c (x_set_offset, x_set_window_size_1, x_make_frame_invisible):
	Remove unnecessary casts to 'long'.
	(set_machine_and_pid_properties): Don't assume pid_t fits in 32 bits.

	Minor ImageMagick safety fixes.
	* image.c (imagemagick_compute_animated_image):
	Remove useless assignment to local.  Avoid problems if dest_width is 0.
	(imagemagick_load_image): Use int for pixel counts that can't
	exceed INT_MAX.  Avoid problem if PixelGetNextIteratorRow returns
	a row width greater than the image width (or greater than LONG_MAX!).

2014-07-04  K. Handa  <handa@gnu.org>

	* coding.c (MIN_CHARBUF_SIZE): Delete it.
	(MAX_CHARBUF_EXTRA_SIZE): New macro.
	(ALLOC_CONVERSION_WORK_AREA): Use MAX_CHARBUF_EXTRA_SIZE.

2014-07-04  Dmitry Antipov  <dmantipov@yandex.ru>

	* font.h (struct font_driver): Remove get_outline and free_outline;
	not used by any font driver.
	* ftfont.c (ftfont_driver):
	* macfont.m (macfont_driver):
	* nsfont.m (nsfont_driver):
	* w32font.c (w32font_driver):
	* w32uniscribe.c (uniscribe_font_driver):
	* xfont.c (xfont_driver): Related users changed.
	* xselect.c (x_get_window_property): Use convenient xmalloc.
	Call to xfree only if some data was really allocated.

2014-07-03  Dmitry Antipov  <dmantipov@yandex.ru>

	On MS-Windows, display busy cursor on all GUI frames.
	This is similar to what we have on X.  Quickly tested by Dani Moncayo.
	* w32fns.c (toplevel): Remove hourglass_hwnd; no longer used.
	(w32_show_hourglass, w32_hide_hourglass, w32_note_current_window):
	Likewise.
	(hide_hourglass, show_hourglass): Redesign to match X counterparts.
	* xdisp.c (start_hourglass): Remove Windows-specific bits.

2014-07-03  Dmitry Antipov  <dmantipov@yandex.ru>

	Use convenient alists to manage per-frame font driver-specific data.
	* frame.h (struct frame): Rename font_data_list to...
	[HAVE_XFT || HAVE_FREETYPE]: ... font_data, which is a Lisp_Object now.
	* font.h (struct font_data_list): Remove; no longer need a special
	data type.
	(font_put_frame_data, font_get_frame_data) [HAVE_XFT || HAVE_FREETYPE]:
	Adjust prototypes.
	* font.c (font_put_frame_data, font_get_frame_data)
	[HAVE_XFT || HAVE_FREETYPE]: Prefer alist functions to ad-hoc list
	management.
	* xftfont.c (xftfont_get_xft_draw, xftfont_end_for_frame):
	Related users changed.
	* ftxfont.c (ftxfont_get_gcs, ftxfont_end_for_frame): Likewise.
	Prefer convenient xmalloc and xfree.

2014-07-03  Eli Zaretskii  <eliz@gnu.org>

	* dispnew.c (prepare_desired_row): Accept 2 additional arguments:
	the window whose glyph row is being prepared and a flag whether it
	is for mode/header line.  Make sure the glyph row's marginal areas
	are in sync with what the window wants.
	(Bug#17892)

	* xdisp.c (display_line, display_mode_line):
	Call prepare_desired_row with additional arguments, as appropriate.

	* dispextern.h (prepare_desired_row): Adjust prototype.

2014-07-03  Dmitry Antipov  <dmantipov@yandex.ru>

	* xfaces.c (init_frame_faces): Always realize basic faces (Bug#17889).
	* menu.c (Fx_popup_dialog): Set Vmenu_updating_frame to avoid crash
	caused by xw_popup_dialog in daemon mode (Bug#17891).

2014-07-03  Eli Zaretskii  <eliz@gnu.org>

	* frame.c (do_switch_frame): When switching to another TTY frame,
	make sure FrameCols and FrameRows are in sync with the new frame's
	data.  (Bug#17875)

2014-07-02  Dmitry Antipov  <dmantipov@yandex.ru>

	Shrink Lisp_Sub_Char_Table by preferring C integers to Lisp_Objects.
	* lisp.h (struct Lisp_Sub_Char_Table): Use C integers for depth and
	min_char slots.  Adjust comment.
	(enum char_table_specials): Rename from CHAR_TABLE_STANDARD_SLOTS.
	Add SUB_CHAR_TABLE_OFFSET member.
	(make_uninit_sub_char_table): New function.
	(toplevel): Add compile-time assert to verify suitable member layout
	in Lisp_Sub_Char_Table.
	* alloc.c (mark_char_table): Add extra argument to denote char table
	subtype.  Adjust to match new layout of sub char-table.
	(mark_object): Always mark sub char-tables with mark_char_table.
	* chartab.c (make_sub_char_table, copy_sub_char_table)
	(sub_char_table_ref, sub_char_table_ref_and_range, sub_char_table_set)
	(sub_char_table_set_range, optimize_sub_char_table, map_sub_char_table)
	(map_sub_char_table_for_charset, uniprop_table_uncompress):
	All related users changed.
	* lread.c (read1): Adjust to match new layout of sub char-table.
	* print.c (print_object): Likewise (Bug#17898).

2014-07-02  Stefan Monnier  <monnier@iro.umontreal.ca>

	* keymap.c (get_keyelt): Simplify.
	(copy_keymap_item): Remove left-over code for when we had
	key-shortcut caches.

2014-06-30  Jan Djärv  <jan.h.d@swipnet.se>

	* nsterm.m (judge): EmacsScroller: Move dealloc code here.
	(dealloc): Remove for EmacsScroller.

	* nsterm.h (EmacsScroller): Remove dealloc.

2014-06-30  Eli Zaretskii  <eliz@gnu.org>

	* coding.c (MIN_CHARBUF_SIZE): Enlarge to 32.  (Bug#17881)

2014-06-30  Jan Djärv  <jan.h.d@swipnet.se>

	* nsmenu.m (update_frame_tool_bar): Set wait_for_tool_bar to NO
	when setNeedsDisplay is called so we don't trigger redisplay for every
	tool bar update.

	* nsterm.m (any_help_event_p): New variable.
	(mouseMoved:): Set any_help_event_p to YES if help event is
	generated.  Remove else with empty help event that triggered redisplay
	for every mouse move.
	(windowDidResignKey:): If any_help_event_p, generate empty help event.

2014-06-29  Dmitry Antipov  <dmantipov@yandex.ru>

	* xfns.c (Qsuppress_icon): Remove; no real users.
	(syms_of_xfns): Don't DEFSYM it.  Remove ancient comments.
	* w32fns.c (Qsuppress_icon): Remove, for the same reason.
	(syms_of_w32fns): Don't DEFSYM it.

2014-06-29  Glenn Morris  <rgm@gnu.org>

	* Makefile.in (ns-app): Mark as PHONY.

2014-06-28  Glenn Morris  <rgm@gnu.org>

	* Makefile.in (mostlyclean): There are no libXMenu11.a,
	liblw.a in this directory.

2014-06-28  Andreas Schwab  <schwab@linux-m68k.org>

	* coding.c (encode_coding_utf_8): Correctly count produced_chars
	also in unibyte case.  (Bug#17865)

2014-06-28  K. Handa  <handa@gnu.org>

	* coding.c (MAX_CHARBUF_SIZE): Rename from CHARBUF_SIZE.
	(MIN_CHARBUF_SIZE): New macro.
	(ALLOC_CONVERSION_WORK_AREA): New arg SIZE.  Callers changed.

2014-06-27  Glenn Morris  <rgm@gnu.org>

	* Makefile.in: Replace BOOTSTRAPEMACS sleight-of-hand
	with an order-only dependence on bootstrap-emacs.  (Bug#2151)
	(.el.elc): Replace suffix rule with pattern rule.
	(%.elc): New pattern rule, with order-only prerequisite.
	($(lisp)): No more need to depend on BOOTSTRAPEMACS.
	($(lispsource)/loaddefs.el): Use an order-only prerequisite
	in place of BOOTSTRAPEMACS.

2014-06-26  Dmitry Antipov  <dmantipov@yandex.ru>

	* fns.c (Fcompare_strings): Use FETCH_STRING_CHAR_AS_MULTIBYTE_ADVANCE.

2014-06-25  Dmitry Antipov  <dmantipov@yandex.ru>

	Consistently use validate_subarray to verify substring.
	* fns.c (validate_substring): Not static any more.  Adjust to
	use ptrdiff_t, not EMACS_INT, because string and vector limits
	can't exceed ptrdiff_t even if EMACS_INT is wider.
	(Fcompare_strings, Fsubstring, Fsubstring_no_properties)
	(secure_hash): Adjust user.
	* lisp.h (validate_subarray): Add prototype.
	* coding.c (Fundecodable_char_position):
	* composite.c (Fcomposition_get_gstring, Fcompose_string_internal):
	Use validate_subarray.  Adjust comment to mention substring.

2014-06-25  Dmitry Antipov  <dmantipov@yandex.ru>

	Do not allow out-of-range character position in Fcompare_strings.
	* fns.c (validate_subarray): Add prototype.
	(Fcompare_substring): Use validate_subarray to check ranges.
	Adjust comment to mention that the semantics was changed.  Also see
	https://lists.gnu.org/r/emacs-devel/2014-06/msg00447.html.

2014-06-24  Paul Eggert  <eggert@cs.ucla.edu>

	Be more consistent about the 'Qfoo' naming convention.
	* image.c (Fimagemagick_types):
	* lisp.h (lisp_h_CHECK_TYPE, CHECK_TYPE, CHECK_ARRAY):
	* process.c (Fmake_network_process):
	Rename C local identifier 'Qfoo to avoid giving the false
	impression that it stands for the symbol 'foo'.

2014-06-23  Dmitry Antipov  <dmantipov@yandex.ru>

	Simplify and cleanup character conversion stuff.
	* lisp.h (multibyte_char_to_unibyte, multibyte_char_to_unibyte_safe):
	Remove prototypes.
	* character.c (multibyte_char_to_unibyte)
	(multibyte_char_to_unibyte_safe): Remove; no longer used.
	* character.h (make_char): Remove; unused.
	(CHAR_TO_BYTE8, CHAR_TO_BYTE_SAFE): Simplify.
	(ASCII_BYTE_P): Remove; ASCII_CHAR_P does the same thing.
	* buffer.c, charset.c, charset.h, cmds.c, coding.c, editfns.c:
	* fileio.c, indent.c, insdel.c, keyboard.c, lread.c, print.c:
	* search.c, term.c, xdisp.c, xterm.c: Related users changed.

2014-06-22  Mario Lang  <mlang@delysid.org>

	* w32fns.c (Fw32_shell_execute): The the -> the.

2014-06-22  Dmitry Antipov  <dmantipov@yandex.ru>

	* xmenu.c (mouse_position_for_popup):
	* xselect.c (mouse_position_for_drop): Do not duplicate ...
	* xfns.c (x_relative_mouse_position): ... and prefer this function.
	* menu.c (Fx_popup_menu):
	* xselect.c (x_handle_dnd_message): Adjust users.
	* menu.h (mouse_position_for_popup): Remove prototype.
	* xterm.h (x_relative_mouse_position): Add prototype.
	* xterm.c (x_find_topmost_parent): Break from the loop and do not
	call XFree if XQueryTree returns zero.

2014-06-21  Eli Zaretskii  <eliz@gnu.org>

	* indent.c (Fvertical_motion): Doc fix.
	Move to the goal column, if any, with a single call to
	move_it_in_display_line, not in two calls.  Doing this with two
	calls causes move_it_in_display_line apply the line-prefix
	handling twice instead of just once.  (Bug#17823)

2014-06-21  Paul Eggert  <eggert@cs.ucla.edu>

	Port to OS X ACLs (Bug#17810).
	* fileio.c (Ffile_acl): Port to OS X, where acl_get_file (...,
	ACL_TYPE_ACCESS) doesn't work.

2014-06-21  Stefan Monnier  <monnier@iro.umontreal.ca>

	* keyboard.c (read_key_sequence): Don't invoke Vprefix_help_command
	before checking key-translation-map (bug#17659).

2014-06-21  Dmitry Antipov  <dmantipov@yandex.ru>

	* font.c (font_make_object): Avoid dangling pointer which may
	crash GC (Bug#17771).

2014-06-21  Eli Zaretskii  <eliz@gnu.org>

	* image.c [5 < GIFLIB_MAJOR + (1 <= GIFLIB_MINOR)]: Declare the
	prototype of DGifCloseFile as appropriate for older and newer
	versions of giflib.
	(gif_close): New function, encapsulates the differences in the
	calling sequence of DGifCloseFile before v5.1.0 and after it.
	(gif_load): Call gif_close instead of DGifCloseFile.  Divulge the
	error string where appropriate.  (Bug#17790)

	* xdisp.c (Fmove_point_visually): Instead of testing for keyboard
	macro execution, make sure point didn't move since last complete
	redisplay, as the condition for using the glyph matrix
	information.  (Bug#17777)

2014-06-19  Dmitry Antipov  <dmantipov@yandex.ru>

	Minor cleanup of fonset code.
	* fontset.c (FONTSET_ID, set_fontset_id, FONTSET_NAME)
	(set_fontset_name, FONTSET_ASCII, set_fontset_ascii)
	(FONTSET_BASE, set_fontset_base, FONTSET_FRAME)
	(set_fontset_frame, FONTSET_NOFONT_FACE, set_fontset_nofont_face)
	(FONTSET_DEFAULT, set_fontset_default, FONTSET_FALLBACK)
	(set_fontset_fallback): Reorder extra slots and avoid unused slots.
	(free_realized_fontset): Remove because a no-op since 2008.
	(free_face_fontset): Adjust user.
	(syms_of_fontset): Shrink fontset by one extra slot.

2014-06-17  Paul Eggert  <eggert@cs.ucla.edu>

	Omit redundant extern decls.
	Most of this patch is from Dmitry Antipov, in:
	https://lists.gnu.org/r/emacs-devel/2014-06/msg00263.html
	* commands.h (update_mode_lines):
	* frame.h (Qbackground_color, Qforeground_color)
	(x_set_menu_bar_lines):
	* ftfont.c (ftfont_font_format):
	* intervals.h (Qkeymap, Qfont):
	* keyboard.c (timer_check, safe_run_hooks, Qregion_extract_function):
	* lisp.h (Ffboundp, Qnil, Qt, Qlambda, Qintegerp, Qwholenump)
	(Qsymbolp, Qlisp, Qconsp, Qstringp, Qarrayp, Qbufferp, Qmarkerp)
	(Qvectorp, Qbuffer_or_string_p, Qchar_table_p, Qvector_or_char_table_p)
	(Qfloatp, Qnumberp, Qfont_spec, Qfont_entity, Qfont_object)
	(Fbyteorder, wrong_type_argument, Fmax_char, syms_of_composite)
	(Fidentity, extract_float, init_display, syms_of_display, Qdisplay):
	(Qimage, Qbox, redisplay_preserve_echo_area, char_table_ref)
	(char_table_set, char_table_translate, Qautoload, Qbottom, Qtop)
	(Qvisible, Qfont, Qfront_sticky, Qrear_nonsticky, init_sigio)
	(Qtool_bar, Qheader_line):
	* macros.c (Fexecute_kbd_macro):
	* xdisp.c (Ftool_bar_height, Ftool_bar_height):
	* xterm.c (x_delete_terminal, XSetIMValues):
	* xterm.h (x_set_window_size, x_query_color, x_get_focus_frame)
	(x_implicitly_set_name, popup_activated)
	(widget_store_internal_border):
	Remove redundant decls.
	* frame.c [USE_X_TOOLKIT]: Include widget.h.
	* keyboard.c (Fexit_recursive_edit, Fabort_recursive_edit):
	Remove _Noreturn, as make-docfile now does that for us.
	* lisp.h (DEFUN): Don't declare fnname here; rely on make-docfile.
	(Qregion_extract_function): New decl.
	* window.c, xfns.c: Include menu.h.

2014-06-17  Stefan Monnier  <monnier@iro.umontreal.ca>

	* callint.c (Fcall_interactively): Fix up last change (bug#17701).

2014-06-17  Dmitry Antipov  <dmantipov@yandex.ru>

	* fileio.c (Fread_file_name): Do not pass redundant args and ...
	* callint.c (read_file_name): ... convert to static here.
	* lisp.h (Fread_file_name): Do not EXFUN it.
	(STRING_COPYIN): Remove; unused.
	* composite.c (CHAR_COMPOSABLE_P): Replace unsafe macro with ...
	(char_composable_p): ... static function.  All users changed.
	* eval.c (toplevel): Remove redundant #include directives.
	* xterm.c (x_initialize): Add static to match prototype.
	* ccl.c (Fccl_execute_on_string):
	* font.c (fon_intern_prop): Use make_specified_string.

2014-06-16  Paul Eggert  <eggert@cs.ucla.edu>

	* Makefile.in (ns-app): Fix typo that broke build on OS X.
	Reported by David Caldwell in:
	https://lists.gnu.org/r/emacs-devel/2014-06/msg00251.html

2014-06-16  Dmitry Antipov  <dmantipov@yandex.ru>

	Do not ask for XRender extension each time XFT font is opened.
	* xftfont.c (xftfont_open): Move call to XRenderQueryExtension ...
	* xterm.c (x_term_init) [HAVE_XFT]: ... to here.  Adjust comment.

2014-06-15  Glenn Morris  <rgm@gnu.org>

	* Makefile.in: Use `make -C' rather than `cd && make' throughout.

2014-06-15  Eli Zaretskii  <eliz@gnu.org>

	* xdisp.c (Fmove_point_visually): Don't use the glyph matrix
	information if we are in the middle of executing a keyboard macro,
	since redisplay doesn't update the screen until the macro is
	finished.  (Bug#17777)

	* alloc.c (cleanup_vector): Don't dereference a font driver
	pointer if it is NULL.  (Bug#17771)

2014-06-13  Glenn Morris  <rgm@gnu.org>

	* Makefile.in ($(leimdir)/leim-list.el, $(srcdir)/macuvs.h)
	($(lispsource)/international/charprop.el)
	($(libsrc)/make-docfile$(EXEEXT), $(lwlibdir)/liblw.a)
	($(oldXMenudir)/libXMenu11.a, ns-app, .el.elc)
	($(lispsource)/loaddefs.el, bootstrap-emacs$(EXEEXT)):
	GNU make automatically passes command-line arguments to sub-makes.

2014-06-13  Paul Eggert  <eggert@cs.ucla.edu>

	Avoid hangs in accept-process-output (Bug#17647).
	* lisp.h, process.c (wait_reading_process_input):
	Return int, not bool.  All uses changed.
	* process.c (SELECT_CANT_DO_WRITE_MASK):
	Remove macro, replacing with ...
	(SELECT_CAN_DO_WRITE_MASK): ... new constant, with inverted sense.
	All uses changed.
	(status_notify): New arg WAIT_PROC.  Return int, not void.
	All uses changed.

2014-06-13  Eli Zaretskii  <eliz@gnu.org>

	* menu.c (Fx_popup_menu): Don't call the frame's menu_show_hook if
	the frame is the initial frame, because the hook is not set up
	then, and Emacs crashes.
	Reported by Fabrice Popineau <fabrice.popineau@gmail.com>.

2014-06-12  Stefan Monnier  <monnier@iro.umontreal.ca>

	* keymap.c (silly_event_symbol_error): Don't recommend the use
	of strings.

2014-06-11  Eli Zaretskii  <eliz@gnu.org>

	* xdisp.c (set_cursor_from_row): Fix an off-by-one error when
	matching overlay strings with 'cursor' property against buffer
	positions traversed in the glyph row.  (Bug#17744)

2014-06-11  Jan Djärv  <jan.h.d@swipnet.se>

	* nsterm.h (EmacsApp): Always compile in shouldKeepRunning, isFirst
	on Cocoa.

	* nsterm.m (run): Always compile for Cocoa.  Use runtime check to
	determine 10.9 (Bug#17751).

	* macfont.m (macfont_draw): Positions were not freed.

2014-06-10  Dmitry Antipov  <dmantipov@yandex.ru>

	* dispextern.h (PREPARE_FACE_FOR_DISPLAY): Remove as a duplicate of ...
	* xfaces.c (prepare_face_for_display) [HAVE_WINDOW_SYSTEM]: ... this
	function.  Also adjust comment.
	* fringe.c, w32term.c, xdisp.c, xterm.c: All users changed.

	* dispextern.h (struct face) [HAVE_XFT]: Ifdef 'extra' member.
	* font.c (font_done_for_face):
	* xfaces.c (realize_non_ascii_face): Adjust user.
	* font.h (struct font_driver): Convert 'prepare_face' to return
	void because its return value is never used anyway.
	* xfont.c (xfont_prepare_face): Return void.
	* xftfont.c (xftfont_prepare_face): Likewise.  Use xmalloc.
	(xftfont_done_face): Use xfree.

	* dispextern.h (last_tool_bar_item): Remove declaration.
	* frame.h (struct frame): New member last_tool_bar_item.
	* frame.c (make_frame): Initialize it.
	* xdisp.c (toplevel): Remove last_tool_bar_item.
	(handle_tool_bar_click, note_tool_bar_highlight):
	* w32term.c (w32_read_socket, w32_initialize):
	* xterm.c (handle_one_xevent, x_initialize): Adjust users.

	* frame.h (window_system_available) [!HAVE_WINDOW_SYSTEM]: Always false.
	* frame.c (window_system_available) [HAVE_WINDOW_SYSTEM]: Now here.

2014-06-09  Paul Eggert  <eggert@cs.ucla.edu>

	Say (accept-process-output P)'s result pertains to P if P is non-nil.
	* process.c (Faccept_process_output)
	(wait_reading_process_output): Mention that if PROCESS is non-nil,
	the return value is about PROCESS, not about other processes.

2014-06-09  Dmitry Antipov  <dmantipov@yandex.ru>

	Further adjustments to mark_object and friends.
	Now the mark_object's stack is just 32 bytes on a 64-bit
	system, which means extra 20% off the stack usage.
	* alloc.c (mark_save_value): As before, refactored out from ...
	(mark_object): ... adjusted user.  Also add comment.

2014-06-09  Paul Eggert  <eggert@cs.ucla.edu>

	Fix core dump after a dropped X connection (Bug#17704).
	* sysdep.c (stuff_char): Don't abort merely because the selected frame
	is dead, as we may be shutting down.

2014-06-08  Glenn Morris  <rgm@gnu.org>

	* fileio.c (write-region-inhibit-fsync): Doc tweak.

	* data.c (Flss, Fgtr, Fleq, Fgeq): Doc tweaks.

2014-06-08  Paul Eggert  <eggert@cs.ucla.edu>

	If a C name must be extern on some platforms, make it extern on all.
	* dispextern.h (set_vertical_scroll_bar, erase_phys_cursor)
	(load_color):
	* font.h (ftxfont_driver) [HAVE_XFT]:
	* keyboard.h (menu_items_inuse, ignore_mouse_drag_p, make_ctrl_char):
	* lisp.h (get_frame_param):
	* menu.h (tty_menu_show):
	* process.h (conv_sockaddr_to_lisp, catch_child_signal):
	* termhooks.h (encode_terminal_code):
	* xterm.h (x_menu_wait_for_event):
	Always declare.
	* frame.c (get_frame_param):
	* fringe.c (max_used_fringe_bitmap):
	* ftxfont.c (ftxfont_driver):
	* keyboard.c (ignore_mouse_drag_p, make_ctrl_char):
	* menu.c (menu_items_inuse):
	* process.c (conv_sockaddr_to_lisp, catch_child_signal):
	* term.c (encode_terminal_code, tty_menu_show):
	* xdisp.c (set_vertical_scroll_bar, erase_phys_cursor):
	* xfaces.c (load_color):
	* xmenu.c (x_menu_wait_for_event):
	Now always extern.

2014-06-08  Dmitry Antipov  <dmantipov@yandex.ru>

	Change object marking routines to minimize stack usage.
	This change moves a few cold paths from mark_object to NO_INLINE
	functions and adjusts symbol marking loop.  According to GCC 4.8.2
	-Wstack-usage, this reduces mark_object's stack usage from 80 to
	48 bytes on a 64-bit system.  For a long byte-force-recompile runs,
	stack usage at the mark phase is reduced up to 28%.  Surprisingly,
	it also gains up to 3% in speed (with default '-O2 -g3' flags).
	* alloc.c (mark_compiled, mark_localized_symbol): New functions,
	refactored out from ...
	(mark_object): ... adjusted user.  Also mark symbols in a tight
	inner loop.
	(mark_face_cache): Add NO_INLINE.

2014-06-08  Eli Zaretskii  <eliz@gnu.org>

	* sysdep.c (reset_sys_modes): Use cursorX, not curX, as the latter
	contains garbage on WINDOWSNT (which could potentially infloop at
	exit).

	Minimize cursor motion during TTY menu updates.
	* term.c (tty_menu_display): Don't position cursor here.
	Instead, pass the cursor coordinates to update_frame_with_menu.
	(tty_menu_activate): Send the hide cursor command only once in an
	iteration through the outer 'while' loop.

	* dispnew.c (update_frame_1): Accept an additional argument
	SET_CURSOR_P, and position the cursor at the end of the frame
	update only if that argument is non-zero.  All callers changed to
	provide the additional argument as non-zero, except for
	update_frame_with_menu.
	(update_frame_with_menu): Accept 2 additional arguments ROW and
	COL; if they are non-negative, instruct update_frame_1 not to
	position the cursor, and instead position it according to ROW and COL.

	* dispextern.h (update_frame_with_menu): Update prototype.

2014-06-08  Stefan Monnier  <monnier@iro.umontreal.ca>

	* callproc.c (call_process): Don't check read-only if we don't insert
	anything (bug#17666).

2014-06-08  Eli Zaretskii  <eliz@gnu.org>

	* dispnew.c (update_frame_with_menu): Set display_completed.

2014-06-07  Eli Zaretskii  <eliz@gnu.org>

	* term.c (tty_menu_show) [WINDOWSNT]: Make tty_menu_show extern
	only for WINDOWSNT.
	* menu.h (tty_menu_show) [WINDOWSNT]: Declare extern only for WINDOWSNT.

2014-06-06  Paul Eggert  <eggert@cs.ucla.edu>

	* term.c (tty_menu_show) [!HAVE_NTGUI]: Now static.
	* menu.h (tty_menu_show) [!HAVE_NTGUI]: Omit extern decl.

2014-06-06  Stefan Monnier  <monnier@iro.umontreal.ca>

	* window.c (Frecenter): Signal an error if window-buffer is not
	current-buffer.

	* keyboard.c (make_lispy_position): Don't include a buffer position in
	mode/header-line mouse events.

	* keyboard.c (read_char): Handle (t . <event>) in the second use of
	Vunread_command_events (bug#17650).

2014-06-06  Dmitry Antipov  <dmantipov@yandex.ru>

	* xterm.c (x_setup_pointer_blanking):
	Conditionally probe Xfixes until this stuff is stabilized (Bug#17609).

2014-06-05  Dmitry Antipov  <dmantipov@yandex.ru>

	* keyboard.c, process.c: Do not define POLL_FOR_INPUT here
	because it will be defined in generated config.h if needed.

2014-06-04  Dmitry Antipov  <dmantipov@yandex.ru>

	Use terminal-specific hooks to display popup dialogs.
	* termhooks.h (struct terminal): New field popup_dialog_hook.
	* menu.c (emulate_dialog_with_menu): New function, refactored from ...
	(Fx_popup_dialog): ... adjusted user.  Also remove old #if 0
	code and use popup_dialog_hook.
	* nsmenu.m (ns_popup_dialog): Make hook-compatible.
	* nsterm.h (ns_popup_dialog): Adjust prototype.
	* nsterm.m (ns_create_terminal):
	* w32term.c (w32_create_terminal):
	* xterm.c (x_create_terminal) [USE_X_TOOLKIT || USE_GTK]:
	Setup popup_dialog_hook.

2014-06-04  Eli Zaretskii  <eliz@gnu.org>

	* w32heap.c (report_temacs_memory_usage): Improve the report by
	reporting the large blocks that are actually occupied at dump time.

	* w32console.c (initialize_w32_display): Set the console
	menu_show_hook, otherwise TTY menus are broken on w32.

2014-06-04  Dmitry Antipov  <dmantipov@yandex.ru>

	Use terminal-specific hooks to display menus.
	* termhooks.h (struct terminal): New field menu_show_hook.
	* menu.h (<anonymous enum>): Bit flags for menu hooks.
	(x_menu_show, w32_menu_show, ns_menu_show, tty_menu_show):
	Adjust prototypes.
	* menu.c (Fx_popup_menu): Use bit flags and menu_show_hook.
	* nsmenu.m (ns_menu_show):
	* w32menu.c (w32_menu_show):
	* xmenu.c (x_menu_show):
	* term.c (tty_menu_show): Adjust to use bit flags.
	(set_tty_hooks): Set menu_show_hook.
	* xterm.c (x_create_terminal):
	* nsterm.m (ns_create_terminal):
	* msdos.c (initialize_msdos_display):
	* w32term.c (w32_create_terminal): Likewise.

2014-06-03  Juanma Barranquero  <lekktu@gmail.com>

	* w32heap.c (DUMPED_HEAP_SIZE) [!_WIN64]: Reduce to 11 MB.

2014-06-03  Eli Zaretskii  <eliz@gnu.org>

	* sysselect.h (fd_CLR, fd_ISSET, fd_SET, FD_CLR, FD_ISSET)
	(FD_SET): Don't define on WINDOWSNT.

2014-06-03  Paul Eggert  <eggert@cs.ucla.edu>

	* emacs.c: Include "sysselect.h", to define its inline functions.
	Reported by Glenn Morris in:
	https://lists.gnu.org/r/emacs-devel/2014-06/msg00077.html

	Do not require libXt-devel when building with gtk.
	* gtkutil.h, menu.h: Include lwlib-widget.h, not lwlib-h, to avoid
	dependency on libXt-devel.
	* menu.h [HAVE_NTGUI]: Include lwlib-widget.h in this case too.
	(enum button_type, widget_value) [HAVE_NTGUI]: Remove, as
	lwlib-widget.h now does this.
	* nsmenu.m (ns_menu_show): "enabled" -> "enable" to fix typo.

2014-06-03  Paul Eggert  <eggert@penguin.cs.ucla.edu>

	If ENABLE_CHECKING, range-check args of FD_CLR, FD_ISSET, FD_SET.
	* process.c (add_read_fd, delete_read_fd, add_write_fd)
	(delete_write_fd, wait_reading_process_output):
	Remove now-redundant easserts.
	* sysselect.h (SYSSELECT_H): New macro, to avoid double-inclusion woes.
	Use INLINE_HEADER_BEGIN, INLINE_HEADER_END.
	(fd_CLR, fd_ISSET, fd_SET): New inline functions.
	(FD_CLR, FD_ISSET, FD_SET): Redefine in terms of these functions.

2014-06-03  Eli Zaretskii  <eliz@gnu.org>

	* w32heap.c (DUMPED_HEAP_SIZE): Move from w32heap.h.  Don't use
	HEAPSIZE; instead, define separate values for the 32- and 64-bit builds.
	(calloc): Don't undef, it is never defined.
	(HEAP_ENTRY_SHIFT): Remove unused macro.

	* Makefile.in (C_HEAP_SWITCH): Remove.
	(ALL_CFLAGS): Don't use $(C_HEAP_SWITCH).

	Fix MS-Windows build broken by menu changes on 2014-06-02.
	* w32menu.c (w32_menu_show): Fix a typo that broke compilation.

	* menu.h (enum button_type, struct _widget_value) [HAVE_NTGUI]:
	Define instead of including ../lwlib/lwlib.h, which causes
	compilation errors due to missing X11 headers.

2014-06-03  Paul Eggert  <eggert@cs.ucla.edu>

	* process.c (wait_reading_process_output): Omit incorrect test of
	p->infd against zero.  Add easserts for infd having a plausible value.

2014-06-02  Dmitry Antipov  <dmantipov@yandex.ru>

	Adjust to match recent lwlib changes.
	* menu.h (xmalloc_widget_value): Replace by ...
	(make_widget_value): ... new prototype.
	* menu.c (xmalloc_widget_value): Replace by ...
	(make_widget_value): ... new function.
	(free_menubar_widget_value_tree, digest_single_submenu): Adjust users.
	* gtkutil.c (malloc_widget_value, free_widget_value):
	(widget_value_free_list, malloc_cpt): Remove old lwlib-compatible code.
	* keyboard.h (enum button_type, struct _widget_value):
	* gtkutil.h, nsgui.h, w32gui.h (malloc_widget_value, free_widget_value):
	Likewise.
	* nsmenu.m (ns_update_menubar, ns_menu_show):
	* w32menu.c (set_frame_menubar, w32_menu_show, w32_dialog_show):
	* xmenu.c (set_frame_menubar, xmenu_show, x_dialog_show): Adjust users.
	* xterm.h (XtParent) [USE_GTK]: Remove unused macro.

2014-06-02  Dmitry Antipov  <dmantipov@yandex.ru>

	* image.c (x_query_frame_background_color)
	[HAVE_PNG || HAVE_NS || HAVE_IMAGEMAGICK || HAVE_RSVG]:
	Fix --enable-gcc-warnings compilation without image libraries.

2014-06-02  Eli Zaretskii  <eliz@gnu.org>

	* w32heap.c (malloc_after_dump, realloc_after_dump): Update the
	emulated break value only if it goes up.
	(sbrk): Add assertion that the INCREMENT argument is strictly
	zero.  Improve and correct the commentary.

2014-06-02  Paul Eggert  <eggert@cs.ucla.edu>

	Improve AIX-related merge from emacs-24.
	* conf_post.h (FLEXIBLE_ARRAY_MEMBER): Fix comment.
	* lisp.h (ENUMABLE) [!_AIX]: Don't define to 0 merely because we're
	not on AIX; since we're on the trunk we can use enums more broadly.

	* frame.c (x_set_frame_parameters): Don't read uninitialized storage.

2014-06-02  Jan Djärv  <jan.h.d@swipnet.se>

	* xterm.c (xg_scroll_callback): Remove position, for jump set portion
	to min(value, whole).

2014-06-02  Paul Eggert  <eggert@cs.ucla.edu>

	Bring back the changes to GDB-visible symbols, but only on AIX.
	And only if it's not pre-4.2 GCC.
	* lisp.h (ENUMABLE, DEFINE_GDB_SYMBOL_ENUM): New macros.
	(ARRAY_MARK_FLAG, PSEUDOVECTOR_FLAG, VALMASK): Use them.
	(ARRAY_MARK_FLAG_val, PSEUDOVECTOR_FLAG_val, VALMASK_val):
	New macros.

2014-06-02  Eli Zaretskii  <eliz@gnu.org>

	* fileio.c (Finsert_file_contents): Call prepare_to_modify_buffer
	with PT, not GPT.  (Bug#16433)

	Revert last changes to GDB-visible symbols.
	* lisp.h (ENUMABLE, DEFINE_GDB_SYMBOL_ENUM): Delete macros.
	(ARRAY_MARK_FLAG, PSEUDOVECTOR_FLAG, VALMASK): Don't use them.
	(ARRAY_MARK_FLAG_val, PSEUDOVECTOR_FLAG_val, VALMASK_val):
	Delete macros.

2014-06-02  Glenn Morris  <rgm@gnu.org>

	* cmds.c (Fself_insert_command): Allow zero repeat count.  (Bug#17649)

2014-06-02  Paul Eggert  <eggert@cs.ucla.edu>

	Fix port to 32-bit AIX with xlc (Bug#17598).
	* alloc.c (gdb_make_enums_visible): Remove FLOAT_TO_STRING_BUFSIZE.
	* conf_post.h (FLEXIBLE_ARRAY_MEMBER) [__IBMC__]: Don't define to empty.
	* lisp.h (FLOAT_TO_STRING_BUFSIZE): Make it a macro, instead of an enum,
	to work around a compiler bug in IBM xlc 12.1.

2014-06-02  Eli Zaretskii  <eliz@gnu.org>

	* xterm.c (x_update_window_end): Don't invalidate the entire
	mouse-highlight info, just signal frame_up_to_date_hook that mouse
	highlight needs to be redisplayed.  (Bug#17588)

2014-06-02  Paul Eggert  <eggert@cs.ucla.edu>

	Port the GDB-visible symbols to AIX.
	Without them, GDB doesn't work to debug Emacs, since the AIX linker
	optimizes away the relevant external symbols.  Use enums instead;
	this suffices for the AIX port, which is 32-bit-only anyway.
	* lisp.h (ENUMABLE, DEFINE_GDB_SYMBOL_ENUM): New macros.
	(ARRAY_MARK_FLAG, PSEUDOVECTOR_FLAG, VALMASK): Use them.
	(ARRAY_MARK_FLAG_val, PSEUDOVECTOR_FLAG_val, VALMASK_val):
	New macros.

	Include sources used to create macuvs.h.
	* Makefile.in ($(srcdir)/macuvs.h): New rule.
	* macuvs.h: Use automatically-generated header.

2014-06-01  Paul Eggert  <eggert@cs.ucla.edu>

	Port signal-handling to DragonFly BSD (Bug#17646).
	* callproc.c, sysdep.c (block_child_signal, unblock_child_signal):
	Move implementations from callproc.c to sysdep.c.
	* process.h, syssignal.h (block_child_signal, unblock_child_signal):
	Move declarations from process.h to syssignal.h.

2014-06-01  Juanma Barranquero  <lekktu@gmail.com>

	* callint.c (Ffuncall_interactively): Add usage.

2014-06-01  Jan Djärv  <jan.h.d@swipnet.se>

	* nsfns.m (ns_appkit_version_str): Add os version for Cocoa.

2014-05-30  Eli Zaretskii  <eliz@gnu.org>

	* w32heap.c (malloc_before_dump, malloc_after_dump)
	(malloc_before_dump, realloc_after_dump, realloc_before_dump)
	(mmap_alloc, mmap_realloc): Check for errors more thoroughly and
	set errno where appropriate to emulate CRT functions.

2014-05-30  Dmitry Antipov  <dmantipov@yandex.ru>

	Debugging facility to check whether 'const char *' points to
	relocatable data of non-pure Lisp string.
	* alloc.c (maybe_lisp_pointer): New function, refactored out of ...
	(mark_maybe_pointer): ... adjusted user.
	(relocatable_string_data_p): New function.
	* lisp.h (relocatable_string_data_p): Add prototype.
	* xdisp.c (message_with_string): If ENABLE_CHECKING, make sure
	the pointer to relocatable Lisp data is not used.

2014-05-30  Paul Eggert  <eggert@cs.ucla.edu>

	Don't let SIGINT handling block SIGCHLD indefinitely (Bug#17561).
	* atimer.c (block_atimers):
	* callproc.c (block_child_signal): Block SIGINT too;
	otherwise, its handler might now unblock signals that it shouldn't.
	* keyboard.c (read_char): Clear signal mask, since we may
	be in a SIGINT handler, and many signals may be masked.
	* keyboard.c (handle_interrupt):
	* sysdep.c (handle_arith_signal):
	Clear signal mask instead of just unblocking the signal that
	was received, since several signals may be blocked at this point.

2014-05-29  Eli Zaretskii  <eliz@gnu.org>

	* Makefile.in (TEMACS_POST_LINK): Remove target.
	(emacs$(EXEEXT)): Remove $(ADDSECTION) from prerequisites.
	(temacs$(EXEEXT)): Remove $(TEMACS_POST_LINK) from the recipe.

2014-05-29  Dmitry Antipov  <dmantipov@yandex.ru>

	* xmenu.c (xdialog_show): Remove prototype, rename to
	x_dialog_show, remove 2nd arg because it's always zero
	and simplify accordingly.
	(xw_popup_dialog): Adjust user.
	* w32menu.c (w32_dialog_show): Adjust prototype, remove
	2nd arg because it's always zero and simplify accordingly.
	(w32_popup_dialog): Adjust user.

2014-05-29  Eli Zaretskii  <eliz@gnu.org>

	* w32heap.c (report_temacs_memory_usage): New function.

	* unexw32.c (unexec) [ENABLE_CHECKING]:
	Call report_temacs_memory_usage.

	* w32heap.h (report_temacs_memory_usage): Add prototype.

2014-05-29  Paul Eggert  <eggert@cs.ucla.edu>

	Don't substitute sigprocmask for pthread_sigmask (Bug#17561).
	* Makefile.in (LIB_PTHREAD_SIGMASK): Remove; all uses removed.

2014-05-29  Eli Zaretskii  <eliz@gnu.org>

	* buffer.c (init_buffer): Accept an argument 'initialized'.
	[USE_MMAP_FOR_BUFFERS]: If 'initialized' is non-zero, reset
	mmap_regions and mmap_fd, to avoid referencing stale data from the
	dump phase.  Add an assertion for buffer text of buffers created
	in temacs before this function is called.  (Bug#17622)
	(mmap_regions_1, mmap_fd_1): Remove unused variables.

	* lisp.h (init_buffer): Update prototype.

	* emacs.c (main): Pass 'initialized' as the argument to init_buffer.

2014-05-29  Dmitry Antipov  <dmantipov@yandex.ru>

	* alloc.c (Fgarbage_collect): Fix compilation with
	GC_MARK_STACK == GC_USE_GCPROS_AS_BEFORE.

2014-05-29  Paul Eggert  <eggert@cs.ucla.edu>

	* frame.c, frame.h (frame_char_to_pixel_position)
	(frame_set_mouse_position): Now static, and made private in
	frame.c rather than public in frame.h.

2014-05-28  Dmitry Antipov  <dmantipov@yandex.ru>

	Refactor mouse positioning stuff to avoid code duplication.
	* frame.h (frame_char_to_pixel_position): New function.
	(x_set_mouse_position): Rename to...
	(frame_set_mouse_position): ...new function.
	(frame_set_mouse_pixel_position): Add prototype.
	* nsterm.m, w32term.c, xterm.c (x_set_mouse_pixel_position):
	Rename to frame_set_mouse_pixel_position.
	* frame.c (Fset_mouse_pixel_position, Fset_mouse_position):
	Adjust users.
	* xterm.h, w32term.h ( x_set_mouse_position)
	(x_set_mouse_pixel_position): Remove prototypes.

2014-05-28  Dmitry Antipov  <dmantipov@yandex.ru>

	On X, always make pointer visible when deleting frame (Bug#17609).
	* frame.c (frame_make_pointer_visible, frame_make_pointer_invisible):
	Pass frame as arg.
	* frame.h (frame_make_pointer_visible, frame_make_pointer_invisible):
	Adjust prototypes.
	* cmds.c (Fself_insert_command): Use SELECTED_FRAME.
	* keyboard.c (gobble_input): If there is no terminal input error,
	make sure the pointer is visible for all frames on this terminal.
	* xterm.c (x_free_frame_resources): Enable pointer visibility if
	it was previously disabled.

2014-05-28  Stefan Monnier  <monnier@iro.umontreal.ca>

	* data.c (Fzerop): Move to Elisp.
	(syms_of_data): Don't defsubr it.
	* keyboard.c (echo_keystrokes_p): New function.
	(read_char, record_menu_key, read_key_sequence): Use it.

	* callint.c (Qfuncall_interactively): New var.
	(Qcall_interactively): Remove.
	(Ffuncall_interactively): New function.
	(Fcall_interactively): Use it.
	(syms_of_callint): Defsubr it.

2014-05-27  Stefan Monnier  <monnier@iro.umontreal.ca>

	* bytecode.c (FETCH) [BYTE_CODE_SAFE]: Check the bytecode wasn't
	relocated from under us.

2014-05-27  Fabrice Popineau  <fabrice.popineau@gmail.com>

	Use mmap(2) emulation for allocating buffer text on MS-Windows.
	* Makefile.in (C_HEAP_SWITCH): Get the predefined heap size from
	configure, not from HEAPSIZE.
	(ADDSECTION, MINGW_TEMACS_POST_LINK): Remove, no longer used.

	* lisp.h (NONPOINTER_BITS): Modify the condition to define to zero
	for MinGW, since it no longer uses gmalloc.

	* buffer.c: Do not define mmap allocations functions for Windows.
	Remove mmap_find which is unused. Remove mmap_set_vars which does
	nothing useful.
	[WINDOWSNT]: Include w32heap.h.
	(init_buffer): Always allocate new memory for buffers.

	* emacs.c: Remove mmap_set_vars calls.

	* image.c (free_image): Undef free for Windows because it is
	redirected to our private version.

	* unexw32.c (COPY_PROC_CHUNK): Use %p format for 64bits compatibility.
	(copy_executable_and_dump_data): Remove dumping the heap section.
	(unexec): Restore using_dynamic_heap after dumping.

	* w32heap.c (dumped_data_commit, malloc_after_dump)
	(malloc_before_dump, realloc_after_dump, realloc_before_dump)
	(free_after_dump, free_before_dump, mmap_alloc, mmap_realloc)
	(mmap_free): New functions.

	* w32heap.h: Declare dumped_data and mmap_* function prototypes.

2014-05-27  Paul Eggert  <eggert@cs.ucla.edu>

	* image.c (imagemagick_load_image): Use MagickRealType for local
	'color_scale', instead of double, to avoid a GCC warning about
	double promotion.

	* xfns.c (Fx_window_property): Remove unused local.

	Don't kill already-reaped process (Bug#17561).
	* process.c (process_send_signal): Fix race condition where a
	subprocess was reaped by a signal handler between the check for
	liveness and calling 'kill', which meant that Emacs could in
	theory kill an innocent bystander process.  Do the fix by blocking
	SIGCHLD in a critical section that checks liveness before killing.

2014-05-26  Eli Zaretskii  <eliz@gnu.org>

	* w32.c (_ANONYMOUS_UNION, _ANONYMOUS_STRUCT): Define only if undefined.

2014-05-26  Ken Brown  <kbrown@cornell.edu>

	* w32term.c (x_delete_display): Don't free dpyinfo->w32_id_name,
	even if !CYGWIN (see bug#17510).

2014-05-26  Jan Djärv  <jan.h.d@swipnet.se>

	* nsfns.m (Fns_do_applescript): Surround NSApp run
	with calls to ns_init_events, ns_finish_events (Bug#17424).

	* nsterm.h (ns_init_events, ns_finish_events): Declare.

	* nsterm.m (ns_init_events, ns_finish_events): New functions.
	(ns_read_socket, ns_select): Call ns_init_events, ns_finish_events.

	* nsfns.m (ns_do_applescript): Surround executeAndReturnError
	with calls to ns_init_events, ns_finish_events (Bug#17424).

2014-05-26  Eli Zaretskii  <eliz@gnu.org>

	* xdisp.c (move_it_in_display_line_to): Don't record wrap position
	if we are iterating over an object that generates glyphs for
	marginal areas.  (Bug#17585)

2014-05-26  Paul Eggert  <eggert@cs.ucla.edu>

	* xdisp.c (safe__call1, safe__eval): Now static.

2014-05-26  Eli Zaretskii  <eliz@gnu.org>

	* xdisp.c (safe__call): Accept va_list argument instead of '...'.
	(safe_call, safe__call1): Construct a va_list argument for safe_call.
	(safe_call1): Call safe_call instead of safe__call directly.

2014-05-26  Ken Brown  <kbrown@cornell.edu>

	* w32term.c (x_delete_display) [CYGWIN]: Don't free
	dpyinfo->w32_id_name, to make sure it doesn't get freed more than
	once.  (Bug#17510)

2014-05-26  Stefan Monnier  <monnier@iro.umontreal.ca>

	* xdisp.c: Bind inhibit-quit during pre-redisplay-function.
	(safe__call, safe__call1, safe__eval): New functions.
	(safe_call): Use it.
	(prepare_menu_bars): Use it for pre-redisplay-function (bug#17577).
	(display_mode_element): Same for `:eval'.

2014-05-26  Paul Eggert  <eggert@cs.ucla.edu>

	Fix port to 32-bit AIX (Bug#17540).
	* unexaix.c (copy_text_and_data): Don't add text_scnptr to ptr
	twice.  _text already includes this offset.
	(unrelocate_symbols): Don't cast 64-bit integer to pointer.

2014-05-26  Eli Zaretskii  <eliz@gnu.org>

	* xdisp.c (move_it_in_display_line_to): Avoid infinite recursion:
	when closest_pos is identical to to_charpos, don't recurse, since
	we already tried that, and failed.  (Bug#17539)

	* w32fns.c (unwind_create_frame) [GLYPH_DEBUG]: If we are
	unwinding when frame's faces were not initialized yet, increment
	the frame's image-cache reference count before calling
	x_free_frame_resources.  Don't dereference
	dpyinfo->terminal->image_cache if it is NULL.  (Bug#17524)

2014-05-25  Jan Djärv  <jan.h.d@swipnet.se>

	* nsfont.m (nsfont_draw): Simplify as arguments are adjusted in
	nsterm.m now.

	* nsterm.m (ns_draw_glyph_string): Move isComposite and end from
	macfont.m, call draw with adjusted arguments so font drivers
	don't need to do that.

	* macfont.m (macfont_draw): Merge changes from Macport.

2014-05-24  Eli Zaretskii  <eliz@gnu.org>

	* alloc.c (garbage_collect_1): New function, with all of the guts
	of Fgarbage_collect.
	(mark_stack): Accept an argument END and don't mark Lisp objects
	on the stack beyond the address given by END.  Calculation of END
	was moved to Fgarbage_collect.
	(Fgarbage_collect): Calculate the end address of the stack portion
	that needs to be examined by mark_stack, and pass that address to
	garbage_collect_1, which will pass it to mark_stack.
	See https://lists.gnu.org/r/emacs-devel/2014-05/msg00270.html
	for more details about the underlying problems.  In particular,
	this avoids dumping Emacs with the large hash-table whose value is
	held in purify-flag for most of the time loadup.el runs.

2014-05-24  Jan Djärv  <jan.h.d@swipnet.se>

	* xfns.c (x_window_property_intern): New function (code from
	x_window_property).
	(Fx_window_property): Call x_window_property_intern.  If property
	not found and NILP (source) and outer window != inner window,
	check outer window for property (Bug#17537).

2014-05-22  Paul Eggert  <eggert@cs.ucla.edu>

	Supply malloc and alloc_size attributes for extern allocators.
	This documents the C API, and helps GCC generate a bit better code.
	* conf_post.h (ATTRIBUTE_MALLOC, ATTRIBUTE_ALLOC_SIZE)
	(ATTRIBUTE_MALLOC_SIZE): New macros.
	* gmalloc.c (malloc, realloc, calloc):
	* gtkutil.h (malloc_widget_value):
	* lisp.h (ralloc, r_re_alloc, xmalloc, xzalloc, xrealloc, xnmalloc)
	(xnrealloc, xstrdup, xlispstrdup, record_xmalloc):
	Use them.

2014-05-21  Paul Eggert  <eggert@cs.ucla.edu>

	Don't assume that ImageMagick uses a 16-bit quantum (Bug#17519).
	* image.c (imagemagick_load_image): Port to hosts that do not use
	a 16-bit quantum, i.e., QuantumRange does not equal 65535.

2014-05-21  Leo Liu  <sdl.web@gmail.com>

	* fns.c (Fnreverse): Accept strings for SEQ and update doc-string.

2014-05-20  Michael Albinus  <michael.albinus@gmx.de>

	* dbusbind.c (xd_signature): Revert last 2 patches.

2014-05-19  Paul Eggert  <eggert@cs.ucla.edu>

	Allow any non-nil value to count as true in bool-vector.
	Likewise for xd_signature in dbusbind.c.
	This is more consistent with the usual practice in Emacs, which is
	that any non-nil value counts as true.
	* alloc.c (Fbool_vector): Don't require args to be t or nil.
	* dbusbind.c (xd_signature): Likewise, for booleans.
	* data.c, lisp.h (Qbooleanp):
	* lisp.h (CHECK_BOOLEAN): Remove.  All uses removed.

2014-05-19  Dmitry Antipov  <dmantipov@yandex.ru>

	* lisp.h (CHECK_BOOLEAN): New function.
	* alloc.c (Fbool_vector): New function.
	(syms_of_alloc): Defsubr it.
	* data.c (Qbooleanp): New symbol.
	(syms_of_data): DEFSYM it.
	* dbusbind.c (xd_signature): Use CHECK_BOOLEAN.

	* font.c (font_matching_entity): Extract font-entity object
	from the vector of matching entities (Bug#17486).

2014-05-17  Paul Eggert  <eggert@cs.ucla.edu>

	Assume C99 or later (Bug#17487).
	* bytecode.c (B__dummy__): Remove.
	* conf_post.h (bool_bf) [!NS_IMPL_GNUSTEP]: Use bool.
	(FLEXIBLE_ARRAY_MEMBER): Now always empty.
	* dbusbind.c (XD_DEBUG_MESSAGE) [!DBUS_DEBUG]:
	* regex.c (DEBUG_PRINT): Assume varargs macros.
	* lisp.h (DEFUN_FUNCTION_INIT): Remove.  All uses now assume C99.

2014-05-17  Fabrice Popineau  <fabrice.popineau@gmail.com>

	* buffer.c (init_buffer) [USE_MMAP_FOR_BUFFERS]: Always map new
	memory for every buffer that was dumped.

2014-05-15  Dmitry Antipov  <dmantipov@yandex.ru>

	* fns.c (Freverse): Allow vectors, bool vectors and strings.
	(Fnreverse): Allow vectors and bool vectors.

2014-05-14  Dmitry Antipov  <dmantipov@yandex.ru>

	Minor cleanup for terminal setup.
	* termhooks.h (create_terminal): Adjust prototype.
	* terminal.c (create_terminal): Pass output method and RIF as args.
	(init_initial_terminal):
	* nsterm.m (ns_create_terminal):
	* term.c (init_tty):
	* w32term.c (w32_create_terminal):
	* xterm.c (x_create_terminal): Adjust users.
	Avoid redundant NULL initializers and add comments.

2014-05-13  Paul Eggert  <eggert@cs.ucla.edu>

	* keyboard.c (Qdeactivate_mark): Now static.

2014-05-13  Dmitry Antipov  <dmantipov@yandex.ru>

	If available, use Xfixes extension to do pointer blanking.
	* Makefile.in (XFIXES_CFLAGS, XFIXES_LIBS): New var.
	* xfns.c (x_set_mouse_color): Do not call make_invisible_cursor here.
	(make_invisible_cursor): Move to...
	* xterm.c (make_invisible_cursor): ...here.
	(x_probe_xfixes_extension, xfixes_toggle_visible_pointer)
	(x_toggle_visible_pointer, x_setup_pointer_blanking): New functions.
	(x_term_init): Call to x_setup_pointer_blanking.
	(XTtoggle_invisible_pointer): Use blanking specific to this display.
	* xterm.h (struct x_display_info): New member toggle_visible_pointer.

2014-05-12  YAMAMOTO Mitsuharu  <mituharu@math.s.chiba-u.ac.jp>

	* xdisp.c (draw_glyphs): Set clipping to highlight boundaries.

2014-05-12  Glenn Morris  <rgm@gnu.org>

	* fileio.c (Ffile_executable_p): Doc tweak.

2014-05-12  Jan Djärv  <jan.h.d@swipnet.se>

	* xsettings.c (init_gsettings): Use g_settings_schema_source_lookup
	instead of deprecated g_settings_list_schemas if possible (Bug#17434).

2014-05-08  Paul Eggert  <eggert@cs.ucla.edu>

	* minibuf.c (read_minibuf): Avoid C99ism in previous patch (Bug#17430).

2014-05-08  Jarek Czekalski  <jarekczek@poczta.onet.pl>

	Fix initialization of minibuffer history variable (Bug#17430).
	* minibuf.c (read_minibuf): Initialize histval to Qnil if unbound.
	Move the initialization up to prevent any "value void" message.

2014-05-08  Samuel Bronson  <naesten@gmail.com>

	* keyboard.c (Frecursive_edit): Ensure inc&dec of command_loop_level
	are matched (bug#17413).

2014-05-08  Jarek Czekalski  <jarekczek@poczta.onet.pl>

	Stop tooltips pulling Emacs window to front (Bug#17408).
	* w32fns.c (Fx_show_tip): Add SWP_NOOWNERZORDER flag to
	SetWindowPos invocations.

2014-05-08  Jan Djärv  <jan.h.d@swipnet.se>

	* nsselect.m (Fx_selection_exists_p): Just return Qnil if window system
	not initialized (Bug#17398).

2014-05-07  Paul Eggert  <eggert@cs.ucla.edu>

	* image.c: Include <png.h> before <setjmp.h> (Bug#17429).

2014-05-06  Paul Eggert  <eggert@cs.ucla.edu>

	* image.c: Do not use libpng if HAVE_NS, as NS does its own thing.
	[HAVE_NS]: Do not include png.h.
	(x_query_frame_background_color): New function.
	(png_load_body, imagemagick_load_image, svg_load_image): Use it.
	(png_load_body): Coalesce duplicate code.

2014-05-04  Paul Eggert  <eggert@cs.ucla.edu>

	Consult libpng-config more consistently (Bug#17339).
	* Makefile.in (PNG_CFLAGS): New var.
	(ALL_CFLAGS): Use it.
	* image.c [HAVE_PNG]: Don't worry about <libpng/png.h>, as
	CFLAGS now handles this.

2014-05-03  Paul Eggert  <eggert@cs.ucla.edu>

	Handle systems without WCONTINUED consistently.  (Bug#15110, 17339)
	* process.c (handle_child_signal): Remove WCONTINUED ifdef,
	because WCONTINUED is always defined now.
	* syswait.h (WCONTINUED): Move here from ../lib-src/emacsclient.c.

2014-05-03  Eli Zaretskii  <eliz@gnu.org>

	* buffer.c (overlay_strings): Fix the wording of the commentary.

2014-05-01  Glenn Morris  <rgm@gnu.org>

	* floatfns.c (Fisnan):
	* profiler.c (Fprofiler_cpu_running_p): Doc fix (replace `iff').

2014-05-01  Eli Zaretskii  <eliz@gnu.org>

	* term.c (tty_menu_activate): A better initialization for cursor
	coordinates.

2014-05-01  Stefan Monnier  <monnier@iro.umontreal.ca>

	* intervals.c: Tighten assertions.
	(create_root_interval): Make sure the interval is not empty.
	(intervals_equal): Use booleans.
	(rotate_right, rotate_left): Check LENGTHs rather than TOTAL_LENGTH.
	(balance_an_interval): Sanity check LENGTHs and TOTAL_LENGTHs.
	(balance_possible_root_interval): Simplify and use booleans.
	(split_interval_right, split_interval_left): Check LENGTH, and remove
	now redundant assertion.
	(adjust_intervals_for_insertion): Remove now redundant assertions.
	(delete_node, interval_deletion_adjustment)
	(adjust_intervals_for_deletion, merge_interval_right)
	(merge_interval_left): Check LENGTH rather than TOTAL_LENGTH.
	(reproduce_interval): Make sure the interval is not empty.

2014-04-30  Paul Eggert  <eggert@cs.ucla.edu>

	* term.c (tty_menu_activate): Don't assume row and col are initialized.
	GCC 4.9.0 warned about this, and I couldn't easily prove to my own
	satisfaction that they would always be initialized.

2014-04-30  Eli Zaretskii  <eliz@gnu.org>

	* term.c (tty_menu_display): Move the cursor to the active menu item.
	(tty_menu_activate): Return the cursor to the active menu item
	after displaying the menu and after displaying help-echo.
	See https://lists.gnu.org/r/emacs-devel/2014-04/msg00402.html
	for the details of why this is needed by screen readers and
	Braille displays.

2014-04-30  Glenn Morris  <rgm@gnu.org>

	* process.c (handle_child_signal):
	Handle systems without WCONTINUED.  (Bug#15110, 17339)

2014-04-29  Stefan Monnier  <monnier@iro.umontreal.ca>

	* window.c (struct saved_window): Remove mark.
	(Fset_window_configuration, save_window_save)
	(compare_window_configurations): Don't touch marks any more.

2014-04-28  Paul Eggert  <eggert@cs.ucla.edu>

	Use bits_word for gcmarkbits.
	* alloc.c (struct cons_block, struct float_block): On 64-bit hosts,
	bits_word is typically a tad more efficient for mark bits than
	unsigned is, so use bits_word.  All uses changed.
	* lisp.h (BITS_PER_INT): Remove; no longer used.

	Avoid undefined behavior in signed left shift.
	This ports to GCC 4.9.0 with -fsanitize=undefined.
	* alloc.c (bool_vector_fill, SETMARKBIT, UNSETMARKBIT):
	* data.c (Fash):
	* regex.c (extract_number):
	* lisp.h (make_number, XINT):
	Do not shift a 1 bit left into a sign bit.
	* alloc.c (struct cons_block, struct float_block): Use unsigned,
	not int, for gcmarkbits.  All uses changed.

2014-04-25  Eli Zaretskii  <eliz@gnu.org>

	* search.c (Fnewline_cache_check): Don't try to count newlines
	outside the buffer's restriction, as find_newline doesn't support that.

2014-04-24  Stefan Monnier  <monnier@iro.umontreal.ca>

	* window.c (Fset_window_configuration): Deactivate the mark before
	unsetting the mark.
	(set_window_buffer): Ignore window_initialized.
	(window_initialized): Remove.
	* keyboard.c (Qdeactivate_mark): Not static any more.
	* buffer.c (buffer_local_value): Rename from buffer_local_value_1.
	Update all callers.

2014-04-23  Paul Eggert  <eggert@cs.ucla.edu>

	* conf_post.h (ADDRESS_SANITIZER_WORKAROUND): Port to GCC 4.9.0
	and to clang 3.4, which have fixed the bug.  This should let us
	run a bit faster on these platforms when address sanitization is
	in effect.

2014-04-22  Paul Eggert  <eggert@cs.ucla.edu>

	Port to GCC 4.9.0 with --enable-gcc-warnings.
	* image.c (struct my_jpeg_error_mgr) [lint]: Remove member fp.
	All uses removed.
	(jpeg_load_body) [lint]: Add a 'volatile' to pacify a buggy GCC in
	a way that also works with GCC 4.9.0.

	* search.c (Fnewline_cache_check): Remove unused locals.

2014-04-22  Eli Zaretskii  <eliz@gnu.org>

	* search.c (find_newline1): New subroutine.
	(Fnewline_cache_check): New function.
	(syms_of_search): Defsubr it.

2014-04-22  Jarek Czekalski  <jarekczek@poczta.onet.pl>

	Fix freezing with scroll bars of GTK3 Toolkit (bug#15801).
	* keyboard.c (unblock_input): Add comment.
	* xgselect.c (xg_select): Prevent Glib main loop recursion.

2014-04-22  Daniel Colascione  <dancol@dancol.org>

	* lread.c (readevalloop_eager_expand_eval): New function
	that can recurse into toplevel forms.
	(readevalloop): Call it.
	* lisp.h: Declare Qprogn.
	* callint.c (Qprogn): No longer static.

2014-04-19  Stefan Monnier  <monnier@iro.umontreal.ca>

	* intervals.c (rotate_right, rotate_left): Fix up length computation.
	Also change identifiers to match the comments, and add more assertions
	(bug#16234).

2014-04-18  Paul Eggert  <eggert@cs.ucla.edu>

	* emacs.c (close_output_streams): Don't clear and restore errno.

2014-04-18  Jan Djärv  <jan.h.d@swipnet.se>

	* xterm.c (x_make_frame_visible): Prevent endless loop when frame
	never becomes visible, i.e. using XMonad  (Bug#17237).

2014-04-18  Eli Zaretskii  <eliz@gnu.org>

	* xdisp.c (insert_left_trunc_glyphs): Ensure the left truncation
	glyph is written to TEXT_AREA of the temporary glyph_row.  (Bug#17288)
	(Fline_pixel_height): Don't assume that the current buffer and the
	selected window's buffer are one and the same.  (Bug#17281)

	* insdel.c (invalidate_buffer_caches): Invalidate the bidi
	paragraph-start cache before the newline cache.  (Bug#17269)

2014-04-17  Paul Eggert  <eggert@cs.ucla.edu>

	* term.c (tty_send_additional_strings): No need to fflush here,
	as callers fflush.
	(tty_set_terminal_modes): fflush after sending additional strings,
	not before.

2014-04-17  Daniel Colascione  <dancol@dancol.org>

	* term.c (Qtty_mode_set_strings, Qtty_mode_reset_strings):
	New symbols.
	(tty_send_additional_strings): New function.
	(tty_set_terminal_modes, tty_reset_terminal_modes): Use it.
	(syms_of_term): Intern tty-mode-set-strings and
	tty-mode-reset-strings.

2014-04-16  Stefan Monnier  <monnier@iro.umontreal.ca>

	* window.c (save_window_save): Lookup window_point_insertion_type in
	the right buffer (bug#15457).
	(Qwindow_point_insertion_type): New var.
	(syms_of_window): Initialize it.

2014-04-16  Eli Zaretskii  <eliz@gnu.org>

	Fix the MSDOS build.
	* unexcoff.c [MSDOS]: Include libc/atexit.h.
	(copy_text_and_data): Zero out the atexit chain pointer before
	dumping Emacs.

	* termhooks.h (encode_terminal_code): Update prototype.

	* term.c (encode_terminal_code) [DOS_NT]: Make it externally
	visible for all DOS_NT ports, not just WINDOWSNT.
	(syms_of_term) [!MSDOS]: Don't define 'tty-menu-*' symbols on MSDOS.

	* sysdep.c (emacs_sigaction_init, init_signals): Don't use SIGCHLD
	unless it is defined.
	(emacs_pipe) [MSDOS]: Redirect to 'pipe'.

	* process.c (close_on_exec, accept4, process_socket): Move into
	the "ifdef subprocesses" part.
	(catch_child_signal): Condition by "ifdef subprocesses".
	(syms_of_process) <Qinternal_default_process_sentinel>
	<Qinternal_default_process_filter>: Condition by "ifdef subprocesses".

	* msdos.h: Add prototypes for new functions.
	(EINPROGRESS): Define.
	(O_CLOEXEC): Define to zero.

	* msdos.c (check_window_system): Remove unnecessary an
	incompatible duplicate function.
	(sys_opendir, readlinkat, faccessat, fstatat, unsetenv):
	New functions in support of new functionality.

	* menu.c (single_menu_item): Add visual indication  of submenu
	also for menus on MSDOS frames.
	(Fx_popup_menu) [!MSDOS]: Do not call tty_menu_show on MSDOS.

	* lisp.h (CHECK_PROCESS) [!subprocesses]: Do not define
	when async subprocesses aren't supported.

	* font.h (FONT_WIDTH) [MSDOS]: MSDOS-specific definition.

	* emacs.c (close_output_streams): Zero out errno before calling
	close_stream.

	* dired.c [MSDOS]: Include msdos.h.

	* conf_post.h (opendir) [MSDOS]: Redirect to sys_opendir.
	(DATA_START) [MSDOS]: Define.
	(SYSTEM_PURESIZE_EXTRA) [MSDOS]: Enlarge by 25K.

	* callproc.c (block_child_signal, unblock_child_signal) [MSDOS]:
	Ifdef away for MSDOS.
	(record_kill_process) [MSDOS]: Ifdef away the entire body for MSDOS.
	(call_process_cleanup) [MSDOS]: Ifdef away portions not relevant
	for MSDOS.
	(call_process) [MSDOS]: Fix call sequence of dostounix_filename.
	Use temporary file template that is compatible with mkostemp.
	Move vfork-related portions under #ifndef MSDOS.
	(syms_of_callproc): Unify templates of MSDOS and WINDOWSNT.

2014-04-16  Stefan Monnier  <monnier@iro.umontreal.ca>

	* buffer.c (Foverlays_at): Add argument `sorted'.

2014-04-16  Eli Zaretskii  <eliz@gnu.org>

	* insdel.c (invalidate_buffer_caches): When deleting or replacing
	text, invalidate the bidi_paragraph_cache upto and including the
	preceding newline.

2014-04-16  Paul Eggert  <eggert@cs.ucla.edu>

	Port to IRIX 6.5 (Bug#9684).
	* conf_post.h (INET6) [IRIX6_5]: Define.
	(HAVE_GETADDRINFO) [IRIX6_5]: Undef.
	* data.c (BITS_PER_ULL): Don't assume ULLONG_MAX is defined.

2014-04-16  Eli Zaretskii  <eliz@gnu.org>

	* keyboard.c (Fopen_dribble_file): Encode the dribble file-name
	before passing it to system APIs.

2014-04-16  Stefan Monnier  <monnier@iro.umontreal.ca>

	* bytecode.c (exec_byte_code): Rework the volatiles.  Most importantly,
	make sure stack.byte_string_start is not de-adjusted by pushhandler.

2014-04-16  Paul Eggert  <eggert@cs.ucla.edu>

	* keyboard.c (Fopen_dribble_file): Avoid some races.  (Bug#17187)

2014-04-15  Paul Eggert  <eggert@cs.ucla.edu>

	Remove DATA_SEG_BITS.
	The DATA_SEG_BITS hack was needed for older 32 bit platforms.
	As a result of this change, Emacs won't work on IRIX 6.5 with IRIX
	cc, but that platform is so old that SGI itself stopped supporting
	it in December 2013.  If you still need Emacs on IRIX, please
	either compile with GCC and port the undumping code, or run
	'./configure --with-wide-int'.
	* alloc.c (gdb_make_enums_visible): Update to match lisp.h.
	* lisp.h (GCTYPEBITS): Move definition up, and switch to the
	DEFINE_GDB_SYMBOL_START way to define it.
	(NONPOINTER_BITS): New macro.
	(EMACS_INT): Use it.
	[!USE_LSB_TAG && !WIDE_EMACS_INT]: Fail, and suggest reporting
	the problem and/or configuring --with-wide-int.
	(USE_LSB_TAG): Simplify, based on above changes.
	(gdb_DATA_SEG_BITS): Remove.  All uses removed.
	* vm-limit.c (exceeds_lisp_ptr): Remove.  All uses removed.

2014-04-12  Eli Zaretskii  <eliz@gnu.org>

	* xdisp.c (move_it_by_lines): If a large portion of buffer text is
	covered by a display string that ends in a newline, and that cases
	going back by DVPOS lines to hit the search limit, lift the limit
	and go back until DVPOS is reached.  (Bug#17244)

	* indent.c (Fvertical_motion): Handle correctly the case when the
	display string is preceded by an empty line.

	* w32.c (sys_umask) <WRITE_USER>: Remove redundant constant, and
	use S_IWRITE instead.

2014-04-11  Glenn Morris  <rgm@gnu.org>

	* keyboard.c (Fopen_dribble_file): Make file private.  (Bug#17187)

2014-04-11  Ken Brown  <kbrown@cornell.edu>

	* Makefile.in (EMACS_MANIFEST): Revert last change.

2014-04-10  Daniel Colascione  <dancol@dancol.org>

	* puresize.h (BASE_PURESIZE): Increase.

2014-04-09  Stefan Monnier  <monnier@iro.umontreal.ca>

	* keyboard.c (syms_of_keyboard): Make deactivate-mark buffer-local.

	* insdel.c (prepare_to_modify_buffer_1): Cancel lock-file checks and
	region handling (and don't call signal_before_change) if
	inhibit_modification_hooks is set.
	(signal_before_change): Don't check inhibit_modification_hooks any more.

2014-04-08  Daniel Colascione  <dancol@dancol.org>

	* alloc.c (sweep_symbols, mark_object): Assert that symbol
	function cells contain valid lisp objects.  (Modified version of
	patch from Dmitry).

	* alloc.c (detect_suspicious_free): Split actual stack capturing
	out into new function for easier breakpoint setting.
	(note_suspicious_free): New function.

2014-04-07  Stefan Monnier  <monnier@iro.umontreal.ca>

	* lisp.h (struct Lisp_Symbol): New bitfield `pinned'.

	* alloc.c: Keep track of symbols referenced from pure space (bug#17168).
	(symbol_block_pinned): New var.
	(Fmake_symbol): Initialize `pinned'.
	(purecopy): New function, extracted from Fpurecopy.  Mark symbols as
	pinned and signal an error for un-purifiable objects.
	(pure_cons): Use it.
	(Fpurecopy): Use it, except for objects that can't be purified.
	(mark_pinned_symbols): New function.
	(Fgarbage_collect): Use it.
	(gc_sweep): Remove hack made unnecessary.

2014-04-07  Glenn Morris  <rgm@gnu.org>

	* keyboard.c (Fopen_dribble_file): Doc tweak.

2014-04-07  Ken Brown  <kbrown@cornell.edu>

	* Makefile.in (EMACS_MANIFEST): Update comment.  (Bug#17176)

2014-04-07  Paul Eggert  <eggert@cs.ucla.edu>

	* alloc.c: Simplify by removing use of HAVE_EXECINFO_H.
	We have a substitute execinfo.h on hosts that lack it.
	(suspicious_free_history): Make it EXTERNALLY_VISIBLE so it
	isn't optimized away.

2014-04-05  Paul Eggert  <eggert@cs.ucla.edu>

	Prefer 'ARRAYELTS (x)' to 'sizeof x / sizeof *x'.
	* alloc.c (memory_full):
	* charset.c (syms_of_charset):
	* doc.c (Fsnarf_documentation):
	* emacs.c (main):
	* font.c (BUILD_STYLE_TABLE):
	* keyboard.c (make_lispy_event):
	* profiler.c (setup_cpu_timer):
	* xgselect.c (xg_select):
	* xterm.c (record_event, STORE_KEYSYM_FOR_DEBUG):
	Use ARRAYELTS.
	* font.c (FONT_PROPERTY_TABLE_SIZE): Remove.
	Replace the only use with ARRAYELTS (font_property_table).
	* xfaces.c (DIM): Remove.  All uses replaced by ARRAYELTS.

2014-04-03  Daniel Colascione  <dancol@dancol.org>

	* xterm.c (x_term_init):
	* xfns.c (best_xim_style):
	* xfaces.c (Fdump_colors):
	* w32fns.c (w32_default_color_map):
	* w32.c (init_environment, N_ENV_VARS):
	* unexcw.c (read_exe_header):
	* term.c (term_get_fkeys_1):
	* sysdep.c (init_baud_rate):
	* nsterm.m (ns_convert_key):
	* nsfns.m (get_geometry_from_preferences):
	* msdos.c (dos_set_window_size, init_environment):
	* macfont.m (mac_font_get_glyph_for_cid)
	(macfont_store_descriptor_attributes)
	(macfont_create_attributes_with_spec, mac_ctfont_get_glyph_for_cid):
	* keyboard.c (command_loop_1, read_menu_command, make_lispy_event)
	(NUM_MOD_NAMES, read_key_sequence_vs, Fcurrent_input_mode)
	(syms_of_keyboard):
	* image.c (xpm_str_to_color_key):
	* fringe.c (MAX_STANDARD_FRINGE_BITMAPS):
	* frame.c (x_set_frame_parameters):
	* fileio.c (Ffile_selinux_context):
	* emacs.c (sort_args):
	* dosfns.c (msdos_stdcolor_name):
	* dired.c (file_attributes):
	* chartab.c (uniprop_decoder_count, uniprop_encode_count):
	Change expressions of the form sizeof(arr) / sizeof(arr[0])
	to ARRAYELTS (arr).

2014-04-02  Daniel Colascione  <dancol@dancol.org>

	* data.c (Ffset): Abort if we're trying to set a function call to
	a dead lisp object.

	* lisp.h (ARRAYELTS): New macro.

	* alloc.c: Include execinfo.h if available.
	(SUSPICIOUS_OBJECT_CHECKING): New macro; define unconditionally.
	(suspicious_free_record): New structure.
	(suspicious_objects, suspicious_object_index)
	(suspicious_free_history, suspicious_free_history_index):
	New variables.
	(find_suspicious_object_in_range, detect_suspicious_free)
	(Fsuspicious_object): New functions.
	(cleanup_vector): Call find_suspicious_object_in_range.

2014-04-02  Martin Rudalics  <rudalics@gmx.at>

	* xterm.c (x_new_font): Don't calculate non-toolkit scrollbar
	width from font width (Bug#17163).

	* frame.c (x_set_frame_parameters): Calculate default values of
	new frame sizes only after all other frame parameters have been
	processed (Bug#17142).

2014-04-02  Ken Brown  <kbrown@cornell.edu>

	* conf_post.h (SYSTEM_PURESIZE_EXTRA) [CYGWIN]: Set to 10000.
	(Bug#17112)

2014-04-02  YAMAMOTO Mitsuharu  <mituharu@math.s.chiba-u.ac.jp>

	* xterm.c (x_draw_image_glyph_string): Adjust image background
	width accordingly when its x position is adjusted.  (Bug#17115)

2014-04-02  Dmitry Antipov  <dmantipov@yandex.ru>

	* font.c (font_list_entities): Do not add empty vector to font cache.
	(font_matching_entity): Likewise.  If matching entity is found, insert
	1-item vector with this entity instead of entity itself (Bug#17125).

	* xterm.c (x_term_init) [USE_LUCID]: Fix minor memory leak.

2014-04-01  Paul Eggert  <eggert@cs.ucla.edu>

	* fns.c (validate_subarray): Rename from validate_substring,
	since it works for vectors too.  New arg ARRAY.  Optimize for the
	non-nil case.  Instead of returning bool, throw an error if out of
	range, so that the caller needn't do that.  All uses changed.
	Report original values if out of range.
	(Fsubstring, Fsubstring_no_properties, secure_hash):
	Also optimize the case where FROM is 0 or TO is the size.

2014-03-31  Dmitry Antipov  <dmantipov@yandex.ru>

	* search.c (Freplace_match): Use make_specified_string.
	* xterm.c, w32term.c (x_set_glyph_string_gc): Use emacs_abort
	to catch bogus override face of glyph strings.
	* fns.c (Fsubstring, Fsubstring_no_properties, secure_hash):
	Move common substring range checking code to...
	(validate_substring): ...this function.

2014-03-31  Jan Djärv  <jan.h.d@swipnet.se>

	* nsmenu.m (free_frame_tool_bar): Set wait_for_tool_bar = NO (Bug#16976)

2014-03-30  Jan Djärv  <jan.h.d@swipnet.se>

	* nsterm.m (updateFrameSize:): If waiting for the tool bar and tool
	bar is zero height, just return (Bug#16976).
	(initFrameFromEmacs:): Initialize wait_for_tool_bar.

	* nsterm.h (EmacsView): Add wait_for_tool_bar.

	* nsmenu.m (update_frame_tool_bar): Return early if view or toolbar
	is nil.  If waiting for toolbar to complete, force a redraw.

2014-03-28  Glenn Morris  <rgm@gnu.org>

	* emacs.c (emacs_version): Use PACKAGE_VERSION rather than VERSION.
	(emacs_bugreport): New variable.
	(usage_message): Use PACKAGE_BUGREPORT.
	(syms_of_emacs) <report-emacs-bug-address>: New variable.

	* emacs.c (syms_of_emacs) <system-configuration-features>: New var.

2014-03-27  Paul Eggert  <eggert@cs.ucla.edu>

	Port recent signal-related changes to FreeBSD.
	Reported by Herbert J. Skuhra.
	* lisp.h (block_tty_out_signal, unblock_tty_out_signal):
	Move decls from here ...
	* syssignal.h: ... to here, so that lisp.h doesn't depend on signal.h.

2014-03-27  YAMAMOTO Mitsuharu  <mituharu@math.s.chiba-u.ac.jp>

	* w32term.c (x_draw_image_glyph_string): Fix computation of height
	and width of image background when it is displayed with a 'box'
	face.  (Bug#17115)

2014-03-27  Paul Eggert  <eggert@penguin.cs.ucla.edu>

	More backward-compatible fix to char-equal core dump (Bug#17011).
	* editfns.c (Fchar_equal): In unibyte buffers, assume values in
	range 128-255 are raw bytes.  Suggested by Eli Zaretskii.

2014-03-27  Juanma Barranquero  <lekktu@gmail.com>

	* image.c (init_svg_functions): When loading SVG-related libraries,
	free already loaded libraries if the initialization fails.
	(rsvg_handle_set_size_callback): Remove declaration, unused.

2014-03-26  Paul Eggert  <eggert@cs.ucla.edu>

	Fix core dump in char-equal (Bug#17011).
	* editfns.c (Fchar_equal): Do not use MAKE_CHAR_MULTIBYTE in
	unibyte buffers, as we can't tell whether the characters are
	actually unibyte.

	* insdel.c (adjust_markers_for_delete): Remove unused local.

2014-03-26  Barry O'Reilly  <gundaetiapo@gmail.com>

	Have (MARKER . ADJUSTMENT) undo records always be immediately
	after their corresponding (TEXT . POS) record in undo list.
	(Bug#16818)
	* lisp.h (record-delete): New arg record_markers.
	(record_marker_adjustment): No longer needed outside undo.c.
	* insdel.c (adjust_markers_for_delete): Move calculation of marker
	adjustments to undo.c's record_marker_adjustments.  Note that
	fileio.c's decide_coding_unwind is another caller to
	adjust_markers_for_delete.  Because it has undo list bound to t,
	it does not rely on adjust_markers_for_delete to record marker
	adjustments.
	(del_range_2): Swap call to record_delete and
	adjust_markers_for_delete so as undo marker adjustments are
	recorded before current deletion's adjustments, as before.
	(adjust_after_replace):
	(replace_range): Pass value for new record_markers arg to
	delete_record.
	* undo.c (record_marker_adjustment): Rename to
	record_marker_adjustments and made static.
	(record_delete): Check record_markers arg and call
	record_marker_adjustments.
	(record_change): Pass value for new record_markers arg to
	delete_record.
	(record_point): at_boundary calculation no longer needs to account
	for marker adjustments.

2014-03-26  Martin Rudalics  <rudalics@gmx.at>

	* w32term.c (x_set_window_size): Refine fix from 2014-03-14
	(Bug#17077).

2014-03-26  Glenn Morris  <rgm@gnu.org>

	* fileio.c (Ffile_symlink_p): Doc fix. (Bug#17073)

2014-03-26  Stefan Monnier  <monnier@iro.umontreal.ca>

	* buffer.c (struct sortvec): Add field `spriority'.
	(compare_overlays): Use it.
	(sort_overlays): Set it.

2014-03-26  Eli Zaretskii  <eliz@gnu.org>

	* xdisp.c (redisplay_window): If all previous attempts to find the
	cursor row failed, try a few alternatives before falling back to
	the top-most row of the window.  Use row_containing_pos.  (Bug#17047)

2014-03-26  Juanma Barranquero  <lekktu@gmail.com>

	* image.c (x_bitmap_height, x_bitmap_width) [HAVE_X_WINDOWS]:
	* sysdep.c (reset_sigio) [!DOS_NT]: Declare conditionally.

	* keyboard.c (read_decoded_event_from_main_queue): #ifdef out
	variables on Windows.

	* w32fns.c (Ffile_system_info): Use parenthesis in and/or expression.

	* w32.c (unsetenv): Remove unused var `retval'.
	(emacs_gnutls_pull): Remove unused vars `fdset' and `timeout'.

	* w32notify.c (watch_worker): Remove unnecesary var sleep_result.
	(start_watching): Remove unused var `thr'.

	* w32proc.c (sys_spawnve): Comment out unused vars `first', `last'.
	(find_child_console): Remove unnecesary var `thread_id'.

	* w32term.c (w32_read_socket): Comment out unused vars `row', `columns'.
	(x_focus_frame): #ifdef 0 unused variable `dpyinfo'.

2014-03-26  Glenn Morris  <rgm@gnu.org>

	* filelock.c (Flock_buffer): Doc tweak.

	* buffer.c (Frestore_buffer_modified_p, Fkill_buffer):
	* emacs.c (shut_down_emacs):
	* fileio.c (Finsert_file_contents, write_region):
	* filelock.c (top-level, syms_of_filelock):
	* insdel.c (prepare_to_modify_buffer_1):
	CLASH_DETECTION is always defined now.

2014-03-25  Eli Zaretskii  <eliz@gnu.org>

	* w32.c (w32_delayed_load): Call DisableThreadLibraryCalls on the
	DLL handle, to speed up thread startup.

2014-03-25  Paul Eggert  <eggert@cs.ucla.edu>

	Handle sigmask better with nested signal handlers  (Bug#15561).
	* atimer.c (sigmask_atimers): Remove.
	Remaining use rewritten to use body of this function.
	* atimer.c (block_atimers, unblock_atimers):
	* callproc.c (block_child_signal, unblock_child_signal):
	* sysdep.c (block_tty_out_signal, unblock_tty_out_signal):
	New arg OLDSET.  All callers changed.
	* atimer.c (block_atimers, unblock_atimers):
	* callproc.c (block_child_signal, unblock_child_signal):
	* keyboard.c (handle_interrupt):
	* sound.c (vox_configure, vox_close):
	Restore the old signal mask rather than unilaterally clearing bits
	from the mask, in case a handler is running within another
	handler.  All callers changed.
	* lisp.h, process.c, process.h, term.c:
	Adjust decls and callers to match new API.
	* sysdep.c (emacs_sigaction_init): Don't worry about masking SIGFPE;
	signal handlers aren't supposed to use floating point anyway.
	(handle_arith_signal): Unblock just SIGFPE rather than clearing mask.

2014-03-23  Daniel Colascione  <dancol@dancol.org>

	Split gc_sweep into discrete functions for legibility and better
	stack traces.

	* alloc.c (sweep_strings, sweep_vectors): Add NO_INLINE
	(sweep_vectors): Fix typo in comment.
	(sweep_conses, sweep_floats, sweep_intervals)
	(sweep_symbols, sweep_misc, sweep_buffers): New functions.
	(gc_sweep): Call new functions, to which existing functionality is
	moved.
	* fns.c (sweep_weak_hash_tables): Add NO_INLINE.

2014-03-23  Juanma Barranquero  <lekktu@gmail.com>

	* w32fns.c (Fw32_shell_execute): Declare `result' only on Cygwin.

2014-03-23  Daniel Colascione  <dancol@dancol.org>

	* xfns.c (create_frame_xic): Pass XNStatusAttributes to XCreateIC
	only if xic_style calls for it.  This change allows Emacs to work
	with ibus.  Also, don't leak resources if create_frame_xic fails,
	and stop caching xic_style across different displays.
	(supported_xim_styles): Make const.
	(best_xim_style): Remove first parameter: it's always just
	supported_xim_styles.  Change to look at supported_xim_styles
	directly.

2014-03-23  Daniel Colascione  <dancol@dancol.org>

	* term.c (init_tty): Rearrange condition for clarity; print
	appropriate diagnostic.

2014-03-23  Daniel Colascione  <dancol@dancol.org>

	* process.c (DATAGRAM_CONN_P): Don't underflow datagram_address
	array.  (ASAN caught.)

2014-03-22  Glenn Morris  <rgm@gnu.org>

	* callproc.c (init_callproc): In etc, look for NEWS rather than GNU.

2014-03-22  Daniel Colascione  <dancol@dancol.org>

	* process.c (conv_sockaddr_to_lisp): When extracting the string
	names of AF_LOCAL sockets, stop before reading uninitialized memory.

2014-03-21  YAMAMOTO Mitsuharu  <mituharu@math.s.chiba-u.ac.jp>

	Fix regression introduced by patch for Bug#10500.
	* xterm.c (x_draw_image_relief): Respect Vtool_bar_button_margin.
	* w32term.c (x_draw_image_relief): Likewise.

2014-03-21  Martin Rudalics  <rudalics@gmx.at>

	* w32fns.c (w32_wnd_proc): For WM_WINDOWPOSCHANGING don't
	constrain frame size in SW_SHOWMAXIMIZED case so we can truly
	maximize a frame for odd default fonts.

2014-03-21  Glenn Morris  <rgm@gnu.org>

	* minibuf.c (history-length): Increase default from 30 to 100.

2014-03-21  Daniel Colascione  <dancol@dancol.org>

	* xterm.c (x_bitmap_icon): Stop reading the icon bitmap from disk
	every time we switch to minibuffer.

	* alloc.c (lisp_align_malloc, allocate_string_data)
	(allocate_vectorlike): Allow mmap allocation of lisp objects.
	(pointers_fit_in_lispobj_p, mmap_lisp_allowed_p): New functions.

2014-03-21  Eli Zaretskii  <eliz@gnu.org>

	* w32fns.c (Fw32_shell_execute) [!CYGWIN]: Use ShellExecuteEx, to
	support more "verbs".

2014-03-21  Daniel Colascione  <dancol@dancol.org>

	Always prohibit dumping a dumped Emacs.

	* emacs.c (might_dump): New variable.
	(Fdump_emacs): Always prohibit dumping of dumped Emacs.
	* lisp.h (might_dump): Declare.
	* unexcw.c (unexec): Remove now-redundant multiple-dump detection code.

2014-03-20  Paul Eggert  <eggert@cs.ucla.edu>

	* doc.c (store_function_docstring): Fix pointer signedness mismatch.

2014-03-20  Stefan Monnier  <monnier@iro.umontreal.ca>

	* doc.c (store_function_docstring): Warn when we don't know where to
	put a docstring.
	(Fsubstitute_command_keys): Don't advertise the fact that
	text-properties are dropped, since we think it's a bug that we'll fix.

	* frame.h (SET_FRAME_VISIBLE): Keep frame_garbaged up to date.
	* xterm.c (handle_one_xevent) <MapNotify>: Don't garbage the frame.
	* frame.c (frame_garbaged): Make "docstring" more precise.

2014-03-20  Glenn Morris  <rgm@gnu.org>

	* charset.c (init_charset): When we cannot find the charsets directory,
	mention if EMACSDATA is set.

2014-03-19  Paul Eggert  <eggert@cs.ucla.edu>

	* fns.c (Frandom): Fix rare bug where the result isn't random.

	Fix porting inconsistency about rounding to even.
	* floatfns.c (emacs_rint) [!HAVE_RINT]: Round to even.
	This way, the unusual !HAVE_RINT case acts like the usual
	HAVE_RINT case, and we can fix the documentation accordingly.

2014-03-19  Eli Zaretskii  <eliz@gnu.org>

	* w32fns.c (reset_modifiers): Zero out keystate[] before using it.
	(w32_wnd_proc): Initialize the dwHoverTime member of
	TRACKMOUSEEVENT structure.

2014-03-17  Teodor Zlatanov  <tzz@lifelogs.com>

	* gnutls.c (Fgnutls_boot): Fix case of :verify-error = t.

2014-03-16  Eli Zaretskii  <eliz@gnu.org>

	* search.c (find_newline): Speed up the function when using the
	newline cache, by halving the number of calls to
	region_cache_forward and region_cache_backward.  (Bug#16830)

2014-03-15  Juanma Barranquero  <lekktu@gmail.com>

	* buffer.c (Fset_buffer): Document return value (bug#17015).

2014-03-14  Martin Rudalics  <rudalics@gmx.at>

	* w32term.c (x_set_window_size): When frame-resize-pixelwise is
	nil, always resize character wise to avoid potential loss of the
	mode line (Bug#16923 related).

2014-03-12  Martin Rudalics  <rudalics@gmx.at>

	* frame.c (x_set_frame_parameters): Always calculate new sizes
	pixelwise to avoid potential loss when rounding.

2014-03-11  Dmitry Antipov  <dmantipov@yandex.ru>

	* xfns.c (x_set_mouse_color): Recolor vertical_drag_cursor.
	* xterm.c (x_free_frame_resources): Free all allocated cursors.

2014-03-10  Eli Zaretskii  <eliz@gnu.org>

	* w32.c (fstatat): Don't add an extra slash if the argument ends
	with a slash: this fails the subsequent call to stat_worker on
	Windows 9X.  Reported by oslsachem <oslsachem@gmail.com>.

2014-03-09  Martin Rudalics  <rudalics@gmx.at>

	* xdisp.c (Fwindow_text_pixel_size): Adjust doc-string.

2014-03-08  Jan Djärv  <jan.h.d@swipnet.se>

	* nsterm.h (MAC_OS_X_VERSION_10_9): Add.

	* nsterm.m (constrainFrameRect:toScreen:): Constrain normally
	when frame is only on one screen (Bug#14713).

2014-03-08  Eli Zaretskii  <eliz@gnu.org>

	* xdisp.c (move_it_in_display_line_to): If word-wrap is ON, and
	there's a valid wrap point in the display line, the last glyph
	cannot "just barely fit" on this row, because display_line doesn't
	let it.  Instead, proceed as if the last glyph didn't fit, so that
	we eventually back up the iterator to the wrap point.  This avoids
	delusional behavior of move_it_to, whereby it proceeds to the next
	display line, but sets current_x to zero for all the glyphs that
	without word-wrap would fit on the previous display line.
	One result was that visual-order cursor movement behaved erratically
	under word-wrap.
	(Fmove_point_visually): Add code to find the x coordinate of the
	last character before wrap point, under word-wrap on a TTY.

2014-03-07  Eli Zaretskii  <eliz@gnu.org>

	* xdisp.c (Fmove_point_visually): When under word-wrap, accept
	also return value of MOVE_POS_MATCH_OR_ZV from
	move_it_in_display_line_to, when moving from beginning of line to
	point's position.  (Bug#16961)

2014-03-07  Martin Rudalics  <rudalics@gmx.at>

	* buffer.c (Vbuffer_list_update_hook): Doc-string fix.
	* window.c (Fselect_window): Explain NORECORD and
	`buffer-list-update-hook' in doc-string.

2014-03-06  Martin Rudalics  <rudalics@gmx.at>

	* window.c (Fother_window_for_scrolling): Check that
	Vother_window_scroll_buffer is a buffer.

2014-03-06  Dmitry Antipov  <dmantipov@yandex.ru>

	* xterm.c (xim_initialize): Always pass a copy of resource name
	to XRegisterIMInstantiateCallback and eassert whether return
	value is True.  Passing copy is important because Xlib doesn't
	make its own copy and resource name argument usually points to
	SSDATA (Vx_resource_name), which may be changed from Lisp.
	(xim_close_display): For XUnregisterIMInstantiateCallback,
	always eassert return value and pass exactly the same values
	as were used for XRegisterIMInstantiateCallback.
	Otherwise XUnregisterIMInstantiateCallback will always fail.  See Xlib
	sources to check why if you are interested.

2014-03-05  Martin Rudalics  <rudalics@gmx.at>

	* dispnew.c (change_frame_size_1): Add new_lines instead of
	new_height, the latter may be still zero if passed as such.
	* window.c (Fwindow_pixel_height): Mention bottom divider in
	doc-string.

2014-03-05  Paul Eggert  <eggert@cs.ucla.edu>

	Fix "resource temporarily unavailable" with xgselect
	(Bug#16925).
	* xgselect.c: Include <stdbool.h>.
	(xg_select) [!USE_GTK]: Don't lose track of errno.

	Fix minor --enable-gcc-warnings issues.
	* widget.c (update_various_frame_slots, EmacsFrameResize):
	Avoid unused locals.  Prefer 'if' to '#if' when either will do.

2014-03-04  Ken Brown  <kbrown@cornell.edu>

	* gmalloc.c (aligned_alloc): Clarify the code by making `adj'
	represent the actual adjustment needed for alignment.

2014-03-04  Eli Zaretskii  <eliz@gnu.org>

	* gmalloc.c (aligned_alloc): Don't allocate more memory than
	needed, and don't reallocate if the initial allocation already
	fits the bill.  Suggested by Ken Brown <kbrown@cornell.edu>.

2014-03-04  YAMAMOTO Mitsuharu  <mituharu@math.s.chiba-u.ac.jp>

	* xterm.c (x_draw_stretch_glyph_string): Reset clipping.
	(Bug#16932)

2014-03-04  Michal Nazarewicz  <mina86@mina86.com>

	* cmds.c (delete-char): Update docstring pointing out that the
	function ignores `delete-active-region' and `overwrite-mode'.

2014-03-03  Eli Zaretskii  <eliz@gnu.org>

	* font.c (Fframe_font_cache): Fix last change.  (Bug#16930)

	* gmalloc.c (aligned_alloc): Fix adjustment of size of the
	allocated buffer due to alignment.
	(freehook): If the block to be freed was allocated by
	'aligned_alloc', find its real pointer before calling 'free'.
	(Bug#16901)
	(mabort) [emacs]: Call 'emacs_abort', not 'abort', to provide a
	backtrace.

2014-03-03  Dmitry Antipov  <dmantipov@yandex.ru>

	* font.c (toplevel): Adjust comment about font cache layout.
	(font_clear_cache): Fix to match real font cache layout.
	Suggested by <namespace_collision@yahoo.com> in Bug#16069.
	(Fframe_font_cache) [FONT_DEBUG]: New function.
	(syms_of_font) [FONT_DEBUG]: Defsubr it.

	Avoid crashes when X fonts are erroneously freed on reused X
	'Display *' connection data (Bug#16069).  Note that X font
	resources still may be leaked, but currently there is no way
	to completely avoid it.
	* xterm.h (struct x_display_info): New member x_id.  Add comments.
	* xterm.c (x_display_id): New variable.
	(x_term_init): Assign identifier to each opened X connection.
	* xfont.c (struct xfont): New member x_display_id.
	(xfont_open): Initialize it with frame's display id.
	(xfont_close): Check whether font's display id matches the one
	recorded for the given display.  Adjust comment.
	* xftfont.c (struct xftfont_info):
	(xftfont_open, xftfont_close): Exactly as above with xfont stuff.

2014-03-01  Martin Rudalics  <rudalics@gmx.at>

	Consider Vother_window_scroll_buffer valid iff it's a live buffer.
	* window.c (Fother_window_for_scrolling): Don't try to scroll a
	killed Vother_window_scroll_buffer.
	(Vother_window_scroll_buffer): Fix doc-string accordingly.

2014-03-01  Eli Zaretskii  <eliz@gnu.org>

	* fileio.c (Fexpand_file_name) [WINDOWSNT]: Don't treat file names
	that start with more than 2 slashes as UNCs.  (Bug#16751)

2014-02-28  Paul Eggert  <eggert@penguin.cs.ucla.edu>

	Fix a few crashes and leaks when cloning C strings.
	* alloc.c, lisp.h (dupstring): New function.
	* gtkutil.c (xg_get_font):
	* term.c (tty_default_color_capabilities):
	* xsettings.c (store_monospaced_changed)
	(store_font_name_changed, parse_settings)
	(read_and_apply_settings, init_gsettings, init_gconf): Use it.
	This avoids some unlikely crashes due to accessing freed storage,
	and avoids some minor memory leaks in the more-typical case.

2014-02-28  Martin Rudalics  <rudalics@gmx.at>

	* xdisp.c (note_mode_line_or_margin_highlight): Don't show drag
	cursor when modeline can't be dragged (Bug#16647).

2014-02-28  Glenn Morris  <rgm@gnu.org>

	* doc.c (Fsnarf_documentation): Snarf not-yet-bound variables
	from custom-delayed-init-variables.  (Bug#11565)

2014-02-27  Martin Rudalics  <rudalics@gmx.at>

	More fixes for mouse glyph calculations (Bug#16647).
	* window.c (coordinates_in_window): In intersection of
	horizontal and vertical window dividers prefer the horizontal
	one.  Add some extra parens to last fix.
	(window_relative_x_coord): Return x-coordinate for header and
	mode line too.
	* xdisp.c (remember_mouse_glyph): In text area don't extend
	glyph into mode line to show the vertical drag cursor there
	immediately.  Subdivide mouse glyphs in right fringes to show a
	horizontal drag cursor as soon as we enter the "grabbable width"
	portion.  Handle vertical border case separately.  Do not
	subdivide window divider areas.
	(note_mouse_highlight): On bottom divider of bottommost windows
	show vertical drag cursor only when the minibuffer window can be
	resized.

2014-02-27  Eli Zaretskii  <eliz@gnu.org>

	* xdisp.c (pop_it): Restore the it->face_box_p flag which could be
	reset by the face of the object just displayed.  See also bug#76.
	(get_next_display_element): If the string came from a display
	property, examine the box face attribute at it->position, not at
	it->current.pos, since the latter was not updated yet.  (Bug#16870)
	(handle_face_prop): Improve commentary.

2014-02-27  Michael Albinus  <michael.albinus@gmx.de>

	* dbusbind.c (Fdbus__init_bus, Qdbus__init_bus, Sdbus__init_bus):
	Rename from Fdbus_init_bus_1, Qdbus_init_bus_1, Sdbus_init_bus_1.

2014-02-26  Martin Rudalics  <rudalics@gmx.at>

	Fixes around Bug#16647.
	* xdisp.c (remember_mouse_glyph): Handle ON_RIGHT_DIVIDER and
	ON_BOTTOM_DIVIDER cases.
	* window.c (coordinates_in_window): Return ON_VERTICAL_BORDER
	only if the window has no right divider.
	(Fcoordinates_in_window_p): Fix doc-string.

2014-02-25  Juanma Barranquero  <lekktu@gmail.com>

	* lread.c (Funintern): Fix doc to match advertised calling convention.

2014-02-24  Daniel Colascione  <dancol@dancol.org>

	* keyboard.c (read_char): Close race that resulted in lost events.

2014-02-22  Glenn Morris  <rgm@gnu.org>

	* frame.c (frame-alpha-lower-limit, frame-resize-pixelwise):
	* window.c (window-resize-pixelwise): Doc fixes.

	* process.c (Finternal_default_process_filter)
	(Finternal_default_process_sentinel): Doc tweaks.

2014-02-21  Glenn Morris  <rgm@gnu.org>

	* process.c (Fprocess_buffer, Faccept_process_output)
	(Finternal_default_process_filter, Finternal_default_process_sentinel):
	Doc fixes.

2014-02-21  Martin Rudalics  <rudalics@gmx.at>

	* window.c (Fwindow_scroll_bar_width): New function.

2014-02-21  Paul Eggert  <eggert@cs.ucla.edu>

	Pacify GCC when configuring with --enable-gcc-warnings.
	* xdisp.c (move_it_in_display_line_to) [lint]:
	Initialize recently-added local.

2014-02-21  Daniel Colascione  <dancol@dancol.org>

	* dbusbind.c: Rename dbus-init-bus to dbus-init-bus-1.

2014-02-20  Eli Zaretskii  <eliz@gnu.org>

	* xdisp.c (init_iterator): Don't dereference a bogus face
	pointer.  (Bug#16819)
	(try_cursor_movement): Don't use cursor position if
	set_cursor_from_row failed to compute it.  This avoids assertion
	violations in MATRIX_ROW.
	(move_it_in_display_line_to): Save the iterator state in ppos_it
	only once per call.  Reimplement the method used to return to the
	best candidate position if all the positions found in display line
	are beyond TO_CHARPOS.  This cuts down the number of calls to
	bidi_shelve_cache, which moves a lot of stuff when lines are long
	and include bidirectional text.  (Bug#15555)

2014-02-20  Glenn Morris  <rgm@gnu.org>

	* data.c (Fdefalias): Doc fix.

2014-02-19  Eli Zaretskii  <eliz@gnu.org>

	* xdisp.c (display_line): Fix horizontal scrolling of large images
	when fringes are turned off.  This comes at a price of not
	displaying the truncation/continuation glyphs in this case.
	(Bug#16806)

	* image.c (x_create_x_image_and_pixmap) [HAVE_NTGUI]: If
	CreateDIBSection returns an error indication, zero out *ximg after
	destroying the image.  This avoids crashes in memory allocations
	due to the fact that some of the callers also call
	x_destroy_x_image, which will attempt to free an already free'd
	block of memory.

2014-02-18  Martin Rudalics  <rudalics@gmx.at>

	* widget.c (update_various_frame_slots): Don't set
	FRAME_PIXEL_HEIGHT and FRAME_PIXEL_WIDTH here (Bug#16736).

2014-02-18  Michael Albinus  <michael.albinus@gmx.de>

	* dbusbind.c (xd_close_bus): Apply proper check on busobj.

2014-02-17  Paul Eggert  <eggert@cs.ucla.edu>

	temacs --daemon fix (Bug#16599).
	* emacs.c (main): Initialize daemon_pipe[1] here ...
	(syms_of_emacs): ... instead of here.

2014-02-16  Anders Lindgren  <andlind@gmail.com>

	* nsterm.m (keyDown:): Check for normal key even if NSNumericPadKeyMask
	is set (Bug#16505).

2014-02-16  Daniel Colascione  <dancol@dancol.org>

	* dbusbind.c (xd_lisp_dbus_to_dbus): New function.
	(xd_get_connection_address): Use it.
	(xd_close_bus): Use xd_lisp_dbus_to_dbus to instead of
	xd_get_connection_address because the latter signals if the bus
	we're trying to close is already disconnected.

2014-02-13  Eli Zaretskii  <eliz@gnu.org>

	* w32proc.c (start_timer_thread): Pass a non-NULL pointer as last
	argument to CreateThread.  This avoids segfaults on Windows 9X.
	Reported by oslsachem <oslsachem@gmail.com>.

2014-02-13  Paul Eggert  <eggert@cs.ucla.edu>

	Fix subspace record bug on HP-UX 10.20 (Bug#16717).
	* unexhp9k800.c (unexec_error): New function, to simplify the code.
	(check_lseek): New function, to report lseek errors.
	(save_data_space, update_file_ptrs, read_header, write_header)
	(copy_file, copy_rest, unexec): Use these news functions.
	(update_file_ptrs): Don't assume wraparound behavior when
	converting a large size_t value to off_t.

2014-02-13  Dmitry Antipov  <dmantipov@yandex.ru>

	* composite.c (fill_gstring_header): Pass positions as C integers
	and move parameters checking to...
	(Fcomposition_get_gstring): ...this function.  Handle case when
	buffer positions are in reversed order and avoid crash (Bug#16739).
	Adjust docstring.
	* buffer.c (validate_region): Mention current buffer in error message.

2014-02-12  Marcus Karlsson  <mk@acc.umu.se>  (tiny change)

	* image.c (pbm_load): Set to NO_PIXMAP on error (Bug#16683).

2014-02-12  Lars Ingebrigtsen  <larsi@gnus.org>

	* buffer.c (syms_of_buffer): Doc clarification (bug#9981).

2014-02-11  Glenn Morris  <rgm@gnu.org>

	* nsfns.m (ns_display_info_for_name, Fx_open_connection):
	Replace refs to "OpenStep" in messages.

2014-02-10  Paul Eggert  <eggert@cs.ucla.edu>

	Avoid "." at end of error diagnostics.
	* cmds.c (Fself_insert_command): Reword and avoid "." at end.
	* font.c (Ffont_at):
	* nsfns.m (ns_display_info_for_name):
	* nsselect.m (Fx_own_selection_internal):
	* nsterm.m (performDragOperation:):
	Remove "." from end of diagnostic.

2014-02-10  Lars Ingebrigtsen  <larsi@gnus.org>

	* fns.c (Fmaphash): Say what `maphash' returns, since it may be
	unintuitive (bug#15824).
	(Fyes_or_no_p): Doc fix (bug#15456).

2014-02-10  Dmitry Antipov  <dmantipov@yandex.ru>

	* cmds.c (Fself_insert_command): Respect the width of EMACS_INT
	and avoid warning.
	* eval.c (call_debugger): When exiting the debugger, do not allow
	max_specpdl_size less than actual binding depth (Bug#16603).
	(syms_of_eval): Adjust docstring.

2014-02-09  Lars Ingebrigtsen  <larsi@gnus.org>

	* cmds.c (Fself_insert_command): Output a clearer error message on
	negative repetitions (bug#9476).

	* macros.c (Fexecute_kbd_macro): Doc fix (bug#14206).

2014-02-08  Lars Ingebrigtsen  <larsi@gnus.org>

	* syntax.c (Fskip_syntax_backward): Doc clarification (bug#15115).

	* minibuf.c (Fread_string): Doc clarification (bug#15422).

	* buffer.c (Fmake_overlay): Doc clarification (bug#15489).

2014-02-08  Juanma Barranquero  <lekktu@gmail.com>

	* keyboard.c (Frecursive_edit): Fix typo in docstring.

2014-02-08  Lars Ingebrigtsen  <larsi@gnus.org>

	* xdisp.c (syms_of_xdisp): Doc clarification (bug#15657).

	* keyboard.c (Frecursive_edit): Say more precicely how throwing
	`exit' works (bug#15865).

2014-02-07  Martin Rudalics  <rudalics@gmx.at>

	Constrain window box/body sizes and margin widths (Bug#16649).
	* xdisp.c (window_box_width): Don't return less than zero.
	(window_box_left_offset, window_box_right_offset): Don't return
	more than the window's pixel width.
	* window.c (window_body_height, window_body_width): Don't return
	negative value.
	(window_resize_apply): Adjust margin width, if necessary.

2014-02-07  Glenn Morris  <rgm@gnu.org>

	* nsterm.m (syms_of_nsterm): Doc fix.

2014-02-06  Eli Zaretskii  <eliz@gnu.org>

	* w32.c (pMultiByteToWideChar, pWideCharToMultiByte):
	New variables: pointers through which to call the respective APIs.
	(filename_to_utf16, filename_from_utf16, filename_to_ansi)
	(filename_from_ansi, sys_link, check_windows_init_file):
	Call MultiByteToWideChar and WideCharToMultiByte through pointers.
	This is required on Windows 9X, where we dynamically load
	UNICOWS.DLL which has their non-stub implementations.
	(maybe_load_unicows_dll): Assign addresses to these 2 function
	pointers after loading UNICOWS.DLL.

	* w32fns.c (Fx_file_dialog, Fw32_shell_execute) [!CYGWIN]: Call
	MultiByteToWideChar and WideCharToMultiByte through function
	pointers.

	* w32.h (pMultiByteToWideChar, pWideCharToMultiByte):
	New declarations.

2014-02-06  Jan Djärv  <jan.h.d@swipnet.se>

	* nsterm.m (toggleFullScreen:): Hide menubar on secondary monitor
	for OSX >= 10.9 if separate spaces are used.
	(toggleFullScreen:): Use screen of w instead of fw (Bug#16659).

2014-02-06  Glenn Morris  <rgm@gnu.org>

	* buffer.c (cache-long-scans): Doc fix.

2014-02-05  Eli Zaretskii  <eliz@gnu.org>

	* w32fns.c (Fw32_shell_execute): Doc fix.

2014-02-05  Bastien Guerry  <bzg@gnu.org>

	* syntax.c (Fforward_word): Call Fconstrain_to_field with
	ESCAPE-FROM-EDGE set to `nil' (Bug#16453).

2014-02-05  Martin Rudalics  <rudalics@gmx.at>

	* fringe.c (draw_fringe_bitmap_1): Don't draw a fringe if it's
	outside the window (Bug#16649).

	* xdisp.c (note_mouse_highlight): When entering a margin area show
	a non-text cursor (Bug#16647).

2014-02-04  Paul Eggert  <eggert@cs.ucla.edu>

	* menu.c (Fx_popup_dialog): Remove label 'dialog_via_menu'.
	It prompted a compile-time diagnostic on GNU/Linux.
	Simplify to remove the need for the label.

2014-02-04  Eli Zaretskii  <eliz@gnu.org>

	* w32menu.c (w32_popup_dialog): Don't condition the whole function
	on HAVE_DIALOGS.  If the dialog is "simple", pop up a message box
	to show it; otherwise return 'unsupported--w32-dialog' to signal
	to the caller that emulation with menus is necessary.
	This resurrects code inadvertently deleted by the 2013-10-08 commit.
	(Bug#16636)
	(syms_of_w32menu): DEFSYM Qunsupported__w32_dialog.

	* w32term.h (w32_popup_dialog): Prototype is no longer conditioned
	by HAVE_DIALOGS.

	* menu.c (Fx_popup_dialog): Don't condition the call to
	w32_popup_dialog on HAVE_DIALOGS.  If w32_popup_dialog returns a
	special symbol 'unsupported--w32-dialog', emulate the dialog with
	a menu by calling x-popup-menu.

	* menu.h (Qunsupported__w32_dialog): New extern variable.

2014-02-04  Michael Albinus  <michael.albinus@gmx.de>

	* keyboard.c (kbd_buffer_get_event): Read file notification events
	also in batch mode.

	* xgselect.c (xg_select): Read glib events in any case, even if
	there are no file descriptors to watch for.  (Bug#16519)

2014-02-03  Martin Rudalics  <rudalics@gmx.at>

	* dispextern.h (face_id): Add WINDOW_DIVIDER_FIRST_PIXEL_FACE_ID
	and WINDOW_DIVIDER_LAST_PIXEL_FACE_ID.
	* w32term.c (w32_draw_window_divider): Handle first and last
	pixels specially.
	* w32term.h (w32_fill_area_abs): New function.
	* xdisp.c (x_draw_right_divider): Don't draw over bottom
	divider.
	* xfaces.c (realize_basic_faces): Handle new face ids.
	* xfns.c (Fx_create_frame): Call x_default_parameter for right
	and bottom divider width.
	* xterm.c (x_draw_window_divider): Handle first and last pixels
	specially.

2014-02-03  Dmitry Antipov  <dmantipov@yandex.ru>

	* print.c (Fexternal_debugging_output): Add cast to pacify
	--enable-gcc-warnings.
	* eval.c (call_debugger): Grow specpdl if the debugger was
	entered due to specpdl overflow (Bug#16603) and allow more
	specpdl space for the debugger itself.

2014-02-02  Martin Rudalics  <rudalics@gmx.at>

	* w32fns.c (Fx_create_frame): Process frame alpha earlier.
	(Bug#16619)

2014-02-01  Eli Zaretskii  <eliz@gnu.org>

	* w32fns.c (Ffile_system_info): Use WINAPI in the function
	pointers that get the address of GetDiskFreeSpaceEx.  (Bug#16615)

	* print.c (Fexternal_debugging_output): If the argument character
	is non-ASCII, encode it with the current locale's encoding before
	writing the result to the terminal.  (Bug#16448)

	* w32fns.c (Fw32_shell_execute): Don't call file-exists-p for
	DOCUMENT that is a "remote" file name, i.e. a file-handler exists
	for it.  (Bug#16558)

2014-01-30  Andreas Schwab  <schwab@linux-m68k.org>

	* process.c (create_process): Reset SIGPROF handler in the child.
	* callproc.c (call_process): Likewise.

2014-01-29  Paul Eggert  <eggert@cs.ucla.edu>

	* xmenu.c (create_and_show_popup_menu): Port comment to C89.

2014-01-29  Eli Zaretskii  <eliz@gnu.org>

	* .gdbinit (xprintstr, xprintbytestr): Don't use repetition count
	of zero to print strings, GDB doesn't like it.

	* print.c (print_object): Use FETCH_STRING_CHAR_ADVANCE, not
	STRING_CHAR_AND_LENGTH, so that if the string is relocated by GC,
	we still use correct addresses.  (Bug#16576)

2014-01-27  K. Handa  <handa@gnu.org>

	Fix bug#16286 by a different method from 2014-01-26T00:32:30Z!eggert@cs.ucla.edu,
	to preserve the code detection behavior of 24.3.
	* coding.h (struct coding_system): New member detected_utf8_bytes.
	* coding.c (detect_coding_utf_8): Set coding->detected_utf8_bytes.
	(decode_coding_gap): Use short cut for UTF-8 file reading only
	when coding->detected_utf8_bytes equals to coding->src_bytes.
	* fileio.c (Finsert_file_contents): Cancel the previous change.

2014-01-29  Martin Rudalics  <rudalics@gmx.at>

	* w32fns.c (x_set_tool_bar_lines): Don't clear area on frames
	that are not visible.

2014-01-29  Jan Djärv  <jan.h.d@swipnet.se>

	* xmenu.c (create_and_show_popup_menu): Handle case when no key
	is grabbed (Bug#16565).

2014-01-28  Martin Rudalics  <rudalics@gmx.at>

	* xdisp.c (last_max_ascent): Re-remove after erroneously
	reintroducing it on 2013-11-30 and abolishing Dmitry's removal
	from 2013-03-29.
	(move_it_to): Re-remove reference to last_max_ascent.
	(Fwindow_text_pixel_size): Add iterator's max_ascent and
	max_descent here instead of calling line_bottom_y.
	Fix doc-string.

2014-01-28  Dmitry Antipov  <dmantipov@yandex.ru>

	* terminal.c (initial_free_frame_resources): New function.
	(init_initial_terminal): Install new hook to free face cache
	on initial frame and avoid memory leak.  For details, see
	<https://lists.gnu.org/r/emacs-devel/2014-01/msg01974.html>.
	* xfaces.c (free_frame_faces): Adjust comment.

2014-01-26  Paul Eggert  <eggert@cs.ucla.edu>

	* data.c (Fstring_to_number): Document results if unparsable
	(Bug#16551).

2014-01-26  Jan Djärv  <jan.h.d@swipnet.se>

	* xterm.c (x_focus_changed): Check for non-X terminal-frame (Bug#16540)

2014-01-26  Paul Eggert  <eggert@cs.ucla.edu>

	When decoding, prefer ptrdiff_t to int for buffer positions etc.
	* coding.c (detect_coding_utf_8, emacs_mule_char)
	(detect_coding_iso_2022, encode_coding_iso_2022, check_ascii)
	(check_utf_8, decode_coding):
	* coding.h (struct coding_system.errors):
	Use ptrdiff_t, not int, for integer values derived from buffer and
	string positions.

	Fix crash with insert-file-contents and misdecoded text (Bug#16286).
	* fileio.c (Finsert_file_contents): Set CODING_MODE_LAST_BLOCK
	before invoking decode_coding_gap, since there's just one block.

2014-01-25  Martin Rudalics  <rudalics@gmx.at>

	Fix handling of face attributes in Fx_create_frame (Bug#16529).
	* w32fns.c (Fx_create_frame): Don't inhibit running Lisp code
	too early.  Again run change_frame_size before assigning menu-
	and tool-bar-lines.

2014-01-25  Fabrice Popineau  <fabrice.popineau@gmail.com>

	* w32term.c (w32_read_socket): When the WM_DISPLAYCHANGE message
	arrives, call x_check_fullscreen, in case the new display has a
	different resolution.  (Bug#16517)

2014-01-25  Eli Zaretskii  <eliz@gnu.org>

	* term.c (read_menu_input): If the selected frame changes, exit
	the menu.
	(tty_menu_show): If the selected frame changes while we displayed
	a menu, throw to top level.  (Bug#16479)

2014-01-25  Stefan Monnier  <monnier@iro.umontreal.ca>

	* eval.c (Fsignal): Fix `debug' handling to match 2013-10-03 change.

2014-01-24  Paul Eggert  <eggert@cs.ucla.edu>

	Fix bool-vector-count-population bug on MinGW64 (Bug#16535).
	* data.c (count_one_bits_word): Fix bug (negated comparison)
	when BITS_PER_ULL < BITS_PER_BITS_WORD.

2014-01-24  Dmitry Antipov  <dmantipov@yandex.ru>

	* xdisp.c (reseat_1, Fcurrent_bidi_paragraph_direction):
	Avoid undefined behavior by initializing display property bit of a
	string processed by the bidirectional iterator.  For details, see
	<https://lists.gnu.org/r/emacs-devel/2014-01/msg01920.html>.

2014-01-23  Paul Eggert  <eggert@cs.ucla.edu>

	Minor cleanup of previous change.
	* image.c (imagemagick_error, Fimagemagick_types):
	Omit some recently-introduced and unnecessary casts and assignments.

2014-01-23  Dmitry Antipov  <dmantipov@yandex.ru>

	Fix two memory leaks discovered with Valgrind.
	* ftfont.c (ftfont_list) [HAVE_LIBOTF]: Call OTF_close.
	* image.c (Fimagemagick_types): Call MagickRelinquishMemory.

2014-01-22  Martin Rudalics  <rudalics@gmx.at>

	Fixes in window size functions around Bug#16430 and Bug#16470.
	* window.c (Fwindow_pixel_width, Fwindow_pixel_height)
	(Fwindow_mode_line_height, Fwindow_header_line_height)
	(Fwindow_right_divider_width, Fwindow_bottom_divider_width):
	Minor doc-string adjustments.
	(Fwindow_total_height, Fwindow_total_width): New argument ROUND.
	Rewrite doc-strings.
	(window_body_height, window_body_width): Do not count partially
	visible lines/columns when PIXELWISE is nil (Bug#16470).
	(Qfloor, Qceiling): New symbols.

2014-01-21  Eli Zaretskii  <eliz@gnu.org>

	* w32fns.c (unwind_create_frame): Avoid crashing inside assertion
	when the image cache is not yet allocated.  (Bug#16509)

2014-01-21  Dmitry Antipov  <dmantipov@yandex.ru>

	* buffer.c (Fkill_buffer): When killing an indirect buffer,
	re-attach intervals to its base buffer (Bug#16502).
	* intervals.c (set_interval_object): Move from here...
	* intervals.h (set_interval_object): ... to here.  Fix comments.

2014-01-20  Paul Eggert  <eggert@cs.ucla.edu>

	Avoid undefined behavior by initializing buffer redisplay bit.
	Reported by Dmitry Antipov in
	<https://lists.gnu.org/r/emacs-devel/2014-01/msg01756.html>.
	* buffer.c (Fget_buffer_create): Initialize redisplay bit.

	Revert some of the CANNOT_DUMP fix (Bug#16494).
	* lread.c (init_lread): Fix typo: NILP, not !NILP.

2014-01-19  Eli Zaretskii  <eliz@gnu.org>

	* w32font.c (w32_load_unicows_or_gdi32, get_outline_metrics_w)
	(get_text_metrics_w, get_glyph_outline_w, get_char_width_32_w)
	[!WINDOWSNT]: These functions are no longer compiled on Cygwin;
	they are replaced by macros that expand into direct calls to the
	corresponding functions from GDI32.DLL.
	(globals_of_w32font) [WINDOWSNT]: Don't initialize g_b_* static
	variables in the Cygwin build, they are unused.

2014-01-19  K. Handa  <handa@gnu.org>

	* composite.c (composition_update_it): Fix previous change.

2014-01-18  Eli Zaretskii  <eliz@gnu.org>

	Fix file name handling on MS-Windows 9X.
	* w32.c (maybe_load_unicows_dll): New function.

	* emacs.c (main) [WINDOWSNT]: Call maybe_load_unicows_dll early
	on, to make sure we can convert file names to and from UTF-8 on
	Windows 9X.  This fixes a failure to start up because Emacs cannot
	find term/w32-win.el.  Reported by oslsachem <oslsachem@gmail.com>.

	* w32font.c [WINDOWSNT]: Include w32.h.
	(w32_load_unicows_or_gdi32): Call maybe_load_unicows_dll, instead
	of implementing the same stuff.
	Remove now unused g_b_init_is_windows_9x.

	* w32.h (maybe_load_unicows_dll): Add prototype.

2014-01-17  Eli Zaretskii  <eliz@gnu.org>

	* menu.c (Fx_popup_menu): When invoking tty_menu_show, temporarily
	switch to single keyboard.  Prevents daemon crashes when a new
	client connects while we show a TTY menu in an existing client.
	(Bug#16479)

2014-01-14  Paul Eggert  <eggert@cs.ucla.edu>

	Fix MinGW64 porting problem with _setjmp.
	Reported by Eli Zaretskii in:
	https://lists.gnu.org/r/emacs-devel/2014-01/msg01297.html
	* image.c (FAST_SETJMP, FAST_LONGJMP): New macros, replacing
	the old _setjmp and _longjmp.  All uses changed.

2014-01-13  Daniel Colascione  <dancol@dancol.org>

	* textprop.c (Fremove_list_of_text_properties):
	Correctly handle reaching the end of the interval tree. (Bug#15344)

2014-01-13  Martin Rudalics  <rudalics@gmx.at>

	* xdisp.c (resize_mini_window): Round height to a multiple of
	frame's line height.  Fix bug in calculation of window start
	position (Bug#16424).

2014-01-13  Jan Djärv  <jan.h.d@swipnet.se>

	* macfont.m: Include termchar.h.
	(CG_SET_FILL_COLOR_WITH_FACE_FOREGROUND)
	(CG_SET_FILL_COLOR_WITH_FACE_BACKGROUND)
	(CG_SET_STROKE_COLOR_WITH_FACE_FOREGROUND): Modify from
	*_WITH_GC_* to take face and f as parameters.
	(macfont_draw): Check for DRAW_MOUSE_FACE and set face accordingly.
	Use *_WITH_FACE_*, and pass face as parameter (Bug#16425).

2014-01-13  Daniel Colascione  <dancol@dancol.org>

	Fix menu item updating in the presence of the Unity global menu
	GTK+ module.

	* gtkutil.h (xg_have_tear_offs): Add frame parameter
	* gtkutil.c (xg_have_tear_offs): Count the global menu as a
	tear-off.
	(xg_update_menubar, xg_update_menu_item): Call g_object_notify when
	updating menus; explain why.
	(xg_update_frame_menubar): Remove the 23px hack: I can't repro the
	problem it's supposed to solve and it interferes with detecting
	the presence of a global menu.
	* xmenu.c (set_frame_menubar): Call xg_have_tear_offs with new
	parameter.

2014-01-11  K. Handa  <handa@gnu.org>

	* composite.c (composition_update_it): Fix indexing of
	LGSTRING_CHAR (Bug#15984).

2014-01-11  Fabrice Popineau  <fabrice.popineau@gmail.com>

	* unexw32.c (_start) [__MINGW64__]: Define to __start.

2014-01-11  Eli Zaretskii  <eliz@gnu.org>

	* xdisp.c (try_window_id): Don't use this function's optimizations
	if overlays in the buffer displayed by the window have changed
	since last redisplay.  (Bug#16347)
	(message_dolog): Fix indentation.

2014-01-11  Martin Rudalics  <rudalics@gmx.at>

	* frame.c (frame_resize_pixelwise): Fix doc-string.

2014-01-10  Martin Rudalics  <rudalics@gmx.at>

	Fix handling of internal borders (Bug#16348).
	* dispnew.c (adjust_frame_glyphs_for_window_redisplay):
	Remove internal border width from pixel width of windows.
	(change_frame_size_1): Don't return early when frame's pixel
	size changes - we still have to record the new sizes in the
	frame structure.
	* w32fns.c (x_set_tool_bar_lines): Clear internal border width
	also when toolbar gets larger.
	* window.c (check_frame_size): Include internal_border_width in
	check.
	* xdisp.c (Ftool_bar_height): Fix doc-string typo.
	* xfns.c (x_set_menu_bar_lines, x_set_tool_bar_lines):
	In non-toolkit/non-GTK version clear internal border.
	* xterm.c (x_clear_under_internal_border): New function for
	non-toolkit/non-GTK version.
	(x_after_update_window_line): In non-toolkit/non-GTK version
	don't do that.
	(handle_one_xevent, x_set_window_size):
	Call x_clear_under_internal_border in non-toolkit/non-GTK version.
	* xterm.h (x_clear_under_internal_border): Extern it.

2014-01-07  Paul Eggert  <eggert@cs.ucla.edu>

	Fix misdisplay of interlaced GIFs with libgif5 (Bug#16372).
	* image.c (gif_load): libgif5 deinterlaces for us, so don't do
	it again.

2014-01-06  Eli Zaretskii  <eliz@gnu.org>

	* xdisp.c (redisplay_window): Don't skip window redisplay if the
	last value of point is not equal to buffer's point.  (Bug#16129)

2014-01-05  Paul Eggert  <eggert@cs.ucla.edu>

	Spelling fixes.
	* nsterm.h (updateCollectionBehavior): Rename from
	updateCollectionBehaviour.  All uses changed.

	Port to GNU/Linux with recent grsecurity/PaX patches (Bug#16343).
	* Makefile.in (SETFATTR): New macro.
	(temacs$(EXEEXT)): Use it.

2014-01-04  Martin Rudalics  <rudalics@gmx.at>

	Fix maximization behavior on Windows (Bug#16300).
	* w32fns.c (w32_fullscreen_rect): Don't handle
	FULLSCREEN_MAXIMIZED and FULLSCREEN_NONE specially.
	* w32term.c (w32fullscreen_hook): Use SetWindowPlacement instead
	of SetWindowPos.  Restore last placement also when leaving
	FULLSCREEN_HEIGHT and FULLSCREEN_WIDTH.  Call ShowWindow in all
	but the FULLSCREEN_BOTH case.

2014-01-03  Paul Eggert  <eggert@cs.ucla.edu>

	Port to C89.
	* data.c (arithcompare_driver):
	* fileio.c (Fcar_less_than_car):
	* fns.c (internal_equal):
	* frame.c (delete_frame):
	* lisp.h (enum More_Lisp_Bits):
	* lread.c (read1):
	Avoid C99 constructs that don't work in C89.
	* data.c (ULL_MAX, count_trailing_zeros_ll): New macros,
	to port to C89, which doesn't have 'long long'.
	(count_trailing_zero_bits): Use them.

2014-01-03  Chong Yidong  <cyd@gnu.org>

	* doc.c (Fdocumentation): Remove dynamic-docstring-function.

2014-01-02  Martin Rudalics  <rudalics@gmx.at>

	Further adjust frame/window scrollbar width calculations.
	* window.c (apply_window_adjustment):
	Set windows_or_buffers_changed.
	(Fwindow_scroll_bars): Return actual scrollbar width.
	* xfns.c (x_set_scroll_bar_default_width): Rename wid to unit.
	For non-toolkit builds again use 14 as minimum width and set
	FRAME_CONFIG_SCROLL_BAR_WIDTH accordingly.
	* xterm.c (XTset_vertical_scroll_bar): Take width from
	WINDOW_SCROLL_BAR_AREA_WIDTH.
	(x_new_font): Rename wid to unit.  Base calculation of new
	scrollbar width on toolkit used and make it analogous to that of
	x_set_scroll_bar_default_width.
	* w32fns.c (x_set_scroll_bar_default_width): Rename wid to unit.
	(Fx_create_frame): Call x_set_scroll_bar_default_width instead
	of GetSystemMetrics.
	* w32term.c (w32_set_vertical_scroll_bar): Take width from
	WINDOW_SCROLL_BAR_AREA_WIDTH.
	(x_new_font): Make it correspond to changes in xterm.c.

2014-01-01  Paul Eggert  <eggert@cs.ucla.edu>

	* lisp.h (EMACS_INT): Configure based on INTPTR_MAX, not LONG_MAX.
	This is a cleaner way to fix the MinGW-w64 porting problem.
	Check for INTPTR_MAX misconfiguration.

2014-01-01  Eli Zaretskii  <eliz@gnu.org>

	* search.c (newline_cache_on_off, find_newline): In indirect
	buffers, use the newline cache of the base buffer.

	* insdel.c (invalidate_buffer_caches): If BUF is an indirect
	buffer, invalidate the caches of its base buffer.  (Bug#16265)

	* indent.c (width_run_cache_on_off, compute_motion): In indirect
	buffers, use the width-run cache of the base buffer.

	* xdisp.c (redisplay_window): When the window displays an indirect
	buffer, and the character widths in the display table have
	changed, invalidate the width-run cache of the corresponding base
	buffer.

	* fileio.c (Finsert_file_contents): When invalidating the newline
	cache, consider the case of inserting into indirect buffer.

	* bidi.c (bidi_paragraph_cache_on_off, bidi_find_paragraph_start):
	In indirect buffers, use the paragraph cache of the base buffer.

2013-12-31  Martin Rudalics  <rudalics@gmx.at>

	* window.c (grow_mini_window): Fix last change.

2013-12-31  Jan Djärv  <jan.h.d@swipnet.se>

	* nsterm.m (windowDidResignKey:): Set mouse_moved to 0 (Bug#8421).

2013-12-31  Fabrice Popineau  <fabrice.popineau@supelec.fr>

	* w32term.c (w32_initialize): Use LCID and LOWORD.

	* w32proc.c (create_child): Use pid_t for 5th argument.
	(IsValidLocale): Don't provide prototype for MinGW64.
	(Fw32_get_valid_keyboard_layouts, Fw32_get_keyboard_layout)
	(Fw32_set_keyboard_layout): Use HKL and HIWORD/LOWORD.

	* w32heap.c (allocate_heap) [_WIN64]: Use "ull", not "i64", which
	MinGW64 doesn't support.

	* lisp.h (EMACS_INT) [_WIN64]: Define for the MinGW64 build.

	* w32.c (set_named_security_info): New function.
	(acl_set_file): Fall back on set_named_security_info if
	set_file_security fails.
	(g_b_init_set_named_security_info_w)
	(g_b_init_set_named_security_info_a): New static variables.
	(globals_of_w32): Initialize them to zero.
	(set_named_security_info): Set them to non-zero if the
	corresponding API is available.
	(SetNamedSecurityInfoW_Proc, SetNamedSecurityInfoA_Proc):
	New function typedefs.

2013-12-31  Martin Rudalics  <rudalics@gmx.at>

	Some more fixes following pixelwise resize changes including one
	for Bug#16306.
	* gtkutil.c (x_wm_set_size_hint): Have size hints respect value
	of frame_resize_pixelwise.
	* widget.c (pixel_to_text_size): New function.
	(update_wm_hints): Have size hints respect value of
	frame_resize_pixelwise.
	(EmacsFrameResize): Alway process resize requests pixelwise.
	* window.c (grow_mini_window): Make sure mini window is at least
	one line tall.
	* xdisp.c (display_menu_bar): Make sure menubar extends till
	right end of frame.
	* xfns.c (x_set_menu_bar_lines): Resize frame windows pixelwise.
	(x_set_tool_bar_lines): Calculate pixelwise.
	* xterm.c (x_wm_set_size_hint): Have size hints respect value of
	frame_resize_pixelwise.

2013-12-30  Juanma Barranquero  <lekktu@gmail.com>

	* fileio.c (Fcopy_file) [!WINDOWSNT]: Don't declare on Windows
	variables not used there.

2013-12-30  Eli Zaretskii  <eliz@gnu.org>

	* w32.c (sys_umask): New function.  (Bug#16299)

2013-12-30  Martin Rudalics  <rudalics@gmx.at>

	* dispnew.c (change_frame_size_1): Take old width of root window
	from that window's pixel width.  (Bug#16284)

2013-12-29  Paul Eggert  <eggert@cs.ucla.edu>

	Plain copy-file no longer chmods an existing destination (Bug#16133).
	* fileio.c (realmask): Now a static var, not a local.
	(barf_or_query_if_file_exists): New arg KNOWN_TO_EXIST.
	Remove arg STATPTR.  All uses changed.
	(Fcopy_file): Do not alter permissions of existing destinations,
	unless PRESERVE-PERMISSIONS (renamed from
	PRESERVE-EXTENDED-ATTRIBUTES) is non-nil.
	Avoid race when testing for existing destinations and for
	when input and output files are the same.
	If changing the group fails, adjust both default and
	preserved permissions so that access is not granted to the
	wrong group.
	(Fset_default_file_modes, init_fileio): Update realmask.
	(Fdefault_file_modes): Use realmask instead of calling umask.

2013-12-28  Paul Eggert  <eggert@cs.ucla.edu>

	Fix pipe bug with OS X emacs --daemon (Bug#16262).
	* emacs.c (main) [DAEMON_MUST_EXEC]: Clear the close-on-exec
	flags on the daemon pipe ends before execing.

2013-12-28  Eli Zaretskii  <eliz@gnu.org>

	* w32fns.c (Fx_create_frame): Error out if called from a TTY
	session.  (Bug#14739)

2013-12-27  Jarek Czekalski  <jarekczek@poczta.onet.pl>

	* callproc.c (Vexec_path): Document that exec-directory is in it.

2013-12-27  Steve Purcell  <steve@sanityinc.com>  (tiny change)

	* nsterm.m (syms_of_nsterm): Enable ns-use-srgb-colorspace by
	default.

2013-12-27  Chong Yidong  <cyd@gnu.org>

	* data.c (Fsymbol_function): Doc fix.

2013-12-26  Martin Rudalics  <rudalics@gmx.at>

	Some more tinkering with Bug#16051.
	* window.c (resize_frame_windows): Don't let the size of the
	root window drop below the frame's default character size.
	Never ever delete any subwindows - let the window manager do the
	clipping.

	* w32fns.c (x_set_tool_bar_lines): Rewrite calculation of number
	of toolbar lines needed when they exceed the height of the root
	window.
	(unwind_create_frame_1): New function.
	(Fx_create_frame): Generally inhibit calling the window
	configuration change hook here.  Remove extra call to
	change_frame_size - it's not needed when we don't run the
	configuration change hook.

2013-12-26  Paul Eggert  <eggert@cs.ucla.edu>

	Fix core dumps with gcc -fsanitize=address and GNU/Linux.
	On my Fedora 19 platform the core dumps were so big that
	my desktop became nearly catatonic.
	* alloc.c (no_sanitize_memcpy) [MAX_SAVE_STACK > 0]: New function.
	(Fgarbage_collect) [MAX_SAVE_STACK > 0]: Use it.
	(USE_ALIGNED_MALLOC): Do not define if addresses are sanitized.
	(mark_memory): Use ATTRIBUTE_NO_SANITIZE_ADDRESS rather than
	a clang-only syntax.
	* conf_post.h (__has_feature): New macro, if not already defined.
	(ADDRESS_SANITIZER, ADDRESS_SANITIZER_WORKAROUND)
	(ATTRIBUTE_NO_SANITIZE_ADDRESS): New macros.

2013-12-25  Eli Zaretskii  <eliz@gnu.org>

	* w32fns.c (Fw32_shell_execute): Make DOCUMENT absolute only if it
	is a file name.  (Bug#16252)

2013-12-25  Chong Yidong  <cyd@gnu.org>

	* keyboard.c (Voverriding_terminal_local_map)
	(Voverriding_local_map): Doc fix.

	* keymap.c (Vemulation_mode_map_alists): Doc fix.

2013-12-24  Eli Zaretskii  <eliz@gnu.org>

	* w32fns.c (Fw32_shell_execute): Ensure DOCUMENT is an absolute
	file name when it is submitted to ShellExecute.  Simplify code.
	Don't test DOCUMENT for being a string, as that is enforced by
	CHECK_STRING.  Doc fix.

2013-12-23  Eli Zaretskii  <eliz@gnu.org>

	* xdisp.c (tool_bar_height): Use WINDOW_PIXEL_WIDTH to set up the
	iterator X limits, not FRAME_TOTAL_COLS, for consistency with what
	redisplay_tool_bar does.  Improve and fix commentary.
	(hscroll_window_tree): Don't assume w->cursor.vpos is within the
	limits of the glyph matrices.  (Bug#16051)
	(redisplay_tool_bar): Modify the tool-bar-lines frame parameter
	only when the new size is different from the old one, and the new
	size can be achieved given the frame height.

2013-12-23  Jan Djärv  <jan.h.d@swipnet.se>

	* conf_post.h: Use unsigned it for bool_bf if GNUSTEP (Bug#16210).

2013-12-23  Glenn Morris  <rgm@gnu.org>

	* lread.c (Fload): Mention load-prefer-newer in doc.

2013-12-22  Martin Rudalics  <rudalics@gmx.at>

	Handle Bug#16207 by being more restrictive when running hooks.
	* window.c (unwind_change_frame): New function.
	(Fset_window_configuration): Don't run configuration change hook
	while the frame configuration is unsafe.  Call select_window
	twice.

2013-12-22  Xue Fuqiao  <xfq.free@gmail.com>

	* lread.c (syms_of_lread) <load_prefer_newer>: Doc fix.

2013-12-21  Jan Djärv  <jan.h.d@swipnet.se>

	* nsterm.h: Declare EmacsColor category.

	* nsterm.m (NSColor): Implement EmacsColor category.
	(ns_get_color): Use colorUsingDefaultColorSpace.
	(ns_get_color, ns_term_init): Use colorForEmacsRed.

	* nsfns.m (Fxw_color_values): Use colorUsingDefaultColorSpace.

2013-12-21  Eli Zaretskii  <eliz@gnu.org>

	* image.c (fn_png_longjmp) [WINDOWSNT]: Mark the function as
	having the PNG_NORETURN attribute, to avoid compiler warning in
	my_png_error.

2013-12-21  YAMAMOTO Mitsuharu  <mituharu@math.s.chiba-u.ac.jp>

	* w32term.h (struct scroll_bar): Remove member `fringe_extended_p'.

	* w32term.c (w32_draw_fringe_bitmap, x_scroll_run): Remove code for
	fringe background extension.
	(x_scroll_bar_create): Remove variables `sb_left' and `sb_width',
	because they are now always the same as `left' and `width',
	respectively.  Remove code for the case that `width' and
	`sb_width' are different.

2013-12-20  Martin Rudalics  <rudalics@gmx.at>

	Remove scroll_bar_actual_width from frames.
	* frame.h (struct frame): Remove scroll_bar_actual_width slot.
	* frame.c (Fscroll_bar_width): Return scroll bar area width.
	(x_figure_window_size):
	* nsterm.m (x_set_window_size):
	* widget.c (set_frame_size):
	* w32term.c (x_set_window_size):
	* xterm.c (x_set_window_size, x_set_window_size_1): Don't set
	scroll_bar_actual_width.

	Convert scroll_bar members to integers on Windows.
	* w32term.h (struct scroll_bar): Convert top, left, width,
	height, start, end and dragging to integers.
	* w32fns.c (w32_createscrollbar): Remove XINT conversions for
	scroll_bar members.
	* w32term.c (w32_set_scroll_bar_thumb)
	(w32_scroll_bar_handle_click): Remove XINT conversions for
	scroll_bar members.  Treat bar->dragging as integer.
	(x_scroll_bar_create): Call ALLOCATE_PSEUDOVECTOR with "top" as
	first element.  Remove XINT conversions for scroll_bar members.
	(w32_set_vertical_scroll_bar, x_scroll_bar_report_motion):
	Remove XINT conversions for scroll_bar members.

	Fix assignment for new window total sizes.
	* window.c (Fwindow_resize_apply_total): Assign values for
	minibuffer window.

2013-12-20  Chong Yidong  <cyd@gnu.org>

	* textprop.c (Fadd_face_text_property): Doc fix.  Rename `appendp'
	argument to `append'.

2013-12-19  Eli Zaretskii  <eliz@gnu.org>

	* xdisp.c (extend_face_to_end_of_line): Use default face, not the
	current text face, for extending the face of the display margins.
	(Bug#16192)

	* casefiddle.c (Fupcase_word, Fdowncase_word, Fcapitalize_word):
	Doc fix.  (Bug#16190)

2013-12-19  Jan Djärv  <jan.h.d@swipnet.se>

	* nsterm.h (KEY_NS_DRAG_FILE, KEY_NS_DRAG_COLOR, KEY_NS_DRAG_TEXT):
	Remove.

	* nsterm.m (Qfile, Qurl): New.
	(EV_MODIFIERS2): New macro.
	(EV_MODIFIERS): Use EV_MODIFIERS2.
	(ns_term_init): Remove font and color from DND, does not work on
	newer OSX, and other ports don't have them.
	(performDragOperation:): Handle modifiers used during drag.
	Use DRAG_N_DROP_EVENT instead of NS specific events (Bug#8051).
	Remove global Lisp variables used to communicate with ns-win.el.
	Remove font and color handling.
	(syms_of_nsterm): Defsym Qfile and Qurl.

2013-12-19  Anders Lindgren  <andlind@gmail.com>

	* nsterm.m (NSTRACE_SIZE, NSTRACE_RECT): New macros.
	(ns_constrain_all_frames, x_set_offset): Remove assignment to
	dont_constrain.
	(updateFrameSize:, windowWillResize:toSize:): Add trace.
	(constrainFrameRect): Remove special case nr_screens == 1.
	Don't constrain size to size of view.

	* nsterm.h (ns_output): Remove dont_constrain.

2013-12-19  Anders Lindgren  <andlind@gmail.com>

	* nsterm.m (mouseDown:): Generate HORIZ_WHEEL_EVENT.

2013-12-18  Paul Eggert  <eggert@cs.ucla.edu>

	Minor fixes for recent openp changes.
	* lisp.h (GCPRO7): New macro.
	* lread.c (openp): Use bool for boolean; all callers changed.
	Protect save_string from GC.  Don't assume that file descriptors
	are nonzero.  Redo save_mtime comparison to avoid bogus GCC
	warning about uninitialized variable.

2013-12-18  Eli Zaretskii  <eliz@gnu.org>

	* w32fns.c (emacs_abort): Use intptr_t as argument of
	INT_BUFSIZE_BOUND, to avoid compiler warnings.

2013-12-18  Glenn Morris  <rgm@gnu.org>

	* lread.c (Fload): Pass load_prefer_newer to openp.
	Don't bother checking mtime if openp already did it.
	(openp): Add `newer' argument, to check all suffixes
	and find the newest file.
	(syms_of_lread) <load_prefer_newer>: New option.  (Bug#2061)
	* callproc.c (call_process):
	* charset.c (load_charset_map_from_file):
	* emacs.c (init_cmdargs):
	* image.c (x_create_bitmap_from_file, x_find_image_file):
	* lisp.h (openp):
	* lread.c (Flocate_file_internal):
	* process.c (Fformat_network_address):
	* sound.c (Fplay_sound_internal):
	* w32.c (check_windows_init_file):
	* w32proc.c (sys_spawnve): Update for new arg spec of openp.

	* emacs.c (standard_args) [HAVE_NS]: Remove -disable-font-backend.

2013-12-17  Eli Zaretskii  <eliz@gnu.org>

	* w32.c (getloadavg): Don't index samples[] array with negative
	indices.  Recover from wall-clock time being set backwards.

	* w32term.c (w32_initialize): Declare the argument of
	set_user_model as const.

	* w32menu.c <MessageBoxW_Proc>: Fix argument declarations.
	(w32_menu_show): Constify some arguments passed to MessageBox.

	* w32uniscribe.c (uniscribe_font_driver): Use LISP_INITIALLY_ZERO
	to initialize Lisp objects.

	* w32font.c (w32font_driver): Use LISP_INITIALLY_ZERO to
	initialize Lisp objects.

	* frame.c (x_set_frame_parameters) [HAVE_X_WINDOWS]: Declare and
	use variables used only on X under that condition.

	* fileio.c (Fcopy_file) [!WINDOWSNT]: Don't declare on Windows
	variables not used there.

2013-12-16  Paul Eggert  <eggert@cs.ucla.edu>

	Fix problems with CANNOT_DUMP and EMACSLOADPATH.
	* lread.c (init_lread): If CANNOT_DUMP, we can't be dumping.

2013-12-16  Eli Zaretskii  <eliz@gnu.org>

	* xdisp.c (Fmove_point_visually): Fix subtle bugs in the fallback
	code, revealed in presence of R2L characters, character
	compositions, and display vectors.  A better fix for Bug#16148.
	(extend_face_to_end_of_line): Don't reference tool_bar_window in
	GTK and NS builds, they don't have this member of struct frame.

	* dispextern.h (struct composition_it): Correct a comment for the
	'width' member.

2013-12-16  Paul Eggert  <eggert@cs.ucla.edu>

	* font.h (valid_font_driver) [!ENABLE_CHECKING]: Define a dummy.
	This prevents a compilation error on C compilers that do not
	default functions to return 'int' if not declared.  Also, add
	INLINE_HEADER_BEGIN and INLINE_HEADER_END to this include file,
	since it now uses inline functions.

2013-12-16  Eli Zaretskii  <eliz@gnu.org>

	* xdisp.c (extend_face_to_end_of_line): Don't fill background of
	display margins on mode line, header line, and in the frame's
	tool-bar window.  (Bug#16165)

2013-12-16  Andreas Schwab  <schwab@suse.de>

	* gnutls.c (Fgnutls_boot): Properly check Flistp return value.

2013-12-16  Teodor Zlatanov  <tzz@lifelogs.com>

	* gnutls.c (Fgnutls_boot): Use `Flistp' instead of
	`CHECK_LIST_CONS'.

2013-12-16  Martin Rudalics  <rudalics@gmx.at>

	* w32term.c (w32_enable_frame_resize_hack): Default to 1.

2013-12-16  Dmitry Antipov  <dmantipov@yandex.ru>

	* font.c (valid_font_driver) [ENABLE_CHECKING]: New function
	intended to find bogus pointers in font objects (Bug#16140).
	* font.h (valid_font_driver) [ENABLE_CHECKING]: Add prototype.
	* alloc.c (cleanup_vector): Use valid_font_driver in eassert.
	(compact_font_cache_entry, compact_font_caches) [!HAVE_NTGUI]:
	Disable for MS-Windows due to Bug#15876; apparently this
	requires more or less substantial changes in fontset code.
	* xfont.c (xfont_close):
	* xftfont.c (xftfont_close): Call x_display_info_for_display
	to check whether 'Display *' is valid (Bug#16093 and probably
	Bug#16069).

2013-12-15  Eli Zaretskii  <eliz@gnu.org>

	* fileio.c (Fexpand_file_name) [WINDOWSNT]: Fix conditionals.
	Reported by Juanma Barranquero <lekktu@gmail.com>.

	* process.c (Fprocess_send_eof): Don't crash if someone tries to
	open a pty on MS-Windows.  (Bug#16152)

	* emacs.c (decode_env_path): Fix bogus comparison against
	emacs_dir.  Reported by Juanma Barranquero <lekktu@gmail.com>.

2013-12-15  Juanma Barranquero  <lekktu@gmail.com>

	* w32fns.c (Fw32_shell_execute): Remove unused local variable.
	(Fx_file_dialog): Add parentheses around && to silence warning.

	* w32term.c (construct_drag_n_drop): Remove unused local variable.

2013-12-15  Eli Zaretskii  <eliz@gnu.org>

	* xdisp.c (extend_face_to_end_of_line): Extend background of
	non-default face in margin areas as well.  (Bug#16151)
	(display_line): Call extend_face_to_end_of_line for continued
	lines as well, if the display margins have non-zero width.
	(set_glyph_string_background_width): When needed, set the
	extends_to_end_of_line_p flag on glyph strings to be drawn in
	margin areas, not only in the text area.

	* frame.h (FRAME_MOUSE_UPDATE): Fix a typo that caused infloop at
	startup.

2013-12-15  Paul Eggert  <eggert@cs.ucla.edu>

	* gnutls.c (Fgnutls_boot): Fix typo; "!" applied to a Lisp_Object.
	Don't worry about verify_error being t, since it has to be a list.

2013-12-14  Paul Eggert  <eggert@cs.ucla.edu>

	Use bool for boolean, focusing on headers.
	* atimer.h, lisp.h, syssignal.h, syswait.h, unexelf.c:
	No need to include <stdbool.h>, since conf_post.h does it now.
	* buffer.h (BUF_COMPUTE_UNCHANGED, DECODE_POSITION)
	(BUFFER_CHECK_INDIRECTION, GET_OVERLAYS_AT, PER_BUFFER_VALUE_P)
	(SET_PER_BUFFER_VALUE_P):
	* ccl.c, ccl.h (setup_ccl_program):
	* ccl.h (CHECK_CCL_PROGRAM):
	* character.h (MAKE_CHAR_UNIBYTE, CHECK_CHARACTER_CAR)
	(CHECK_CHARACTER_CDR, CHAR_STRING_ADVANCE, NEXT_CHAR_BOUNDARY)
	(PREV_CHAR_BOUNDARY, FETCH_STRING_CHAR_ADVANCE)
	(FETCH_STRING_CHAR_AS_MULTIBYTE_ADVANCE)
	(FETCH_STRING_CHAR_ADVANCE_NO_CHECK, FETCH_CHAR_ADVANCE)
	(FETCH_CHAR_ADVANCE_NO_CHECK, INC_POS, DEC_POS, INC_BOTH)
	(DEC_BOTH, BUF_INC_POS, BUF_DEC_POS):
	* charset.h (CHECK_CHARSET, CHECK_CHARSET_GET_ID)
	(CHECK_CHARSET_GET_ATTR, CHECK_CHARSET_GET_CHARSET)
	(CHARSET_FAST_MAP_SET):
	* coding.c (decode_coding_ccl, encode_coding_ccl):
	* coding.h (CHECK_CODING_SYSTEM, CHECK_CODING_SYSTEM_GET_SPEC)
	(CHECK_CODING_SYSTEM_GET_ID, SJIS_TO_JIS, SJIS_TO_JIS2)
	(JIS_TO_SJIS, JIS_TO_SJIS2, ENCODE_FILE, DECODE_FILE)
	(ENCODE_SYSTEM, DECODE_SYSTEM, ENCODE_UTF_8)
	(decode_coding_c_string):
	* composite.h (COMPOSITION_DECODE_REFS, COMPOSITION_DECODE_RULE):
	* conf_post.h (has_attribute):
	* dispextern.h (trace_redisplay_p)
	(INC_TEXT_POS, DEC_TEXT_POS, SET_GLYPH_FROM_GLYPH_CODE)
	(SET_CHAR_GLYPH, SET_CHAR_GLYPH_FROM_GLYPH)
	(SET_GLYPH_FROM_CHAR_GLYPH)
	(WINDOW_WANTS_MODELINE_P, WINDOW_WANTS_HEADER_LINE_P)
	(FACE_SUITABLE_FOR_ASCII_CHAR_P, FACE_SUITABLE_FOR_CHAR_P)
	(PRODUCE_GLYPHS, reset_mouse_highlight, in_display_vector_p)
	(cursor_in_mouse_face_p):
	* dispnew.c (adjust_glyph_matrix, clear_glyph_matrix_rows)
	(blank_row, prepare_desired_row)
	(build_frame_matrix_from_leaf_window, make_current)
	(mirror_make_current, mirrored_line_dance, mirror_line_dance)
	(update_window, scrolling_window, update_frame_line):
	* disptab.h (GLYPH_FOLLOW_ALIASES):
	* editfns.c (Fformat):
	* font.h (FONT_WEIGHT_SYMBOLIC, FONT_SLANT_SYMBOLIC)
	(FONT_WIDTH_SYMBOLIC, FONT_WEIGHT_FOR_FACE, FONT_SLANT_FOR_FACE)
	(FONT_WIDTH_FOR_FACE, FONT_WEIGHT_NAME_NUMERIC)
	(FONT_SLANT_NAME_NUMERIC, FONT_WIDTH_NAME_NUMERIC)
	(FONT_SET_STYLE, CHECK_FONT, CHECK_FONT_SPEC, CHECK_FONT_ENTITY)
	(CHECK_FONT_OBJECT, CHECK_FONT_GET_OBJECT, FONT_ADD_LOG)
	(FONT_DEFERRED_LOG):
	* frame.h (FRAME_W32_P, FRAME_MSDOS_P, FRAME_WINDOW_P)
	(FRAME_EXTERNAL_TOOL_BAR, FRAME_EXTERNAL_MENU_BAR, FOR_EACH_FRAME)
	(FRAME_MOUSE_UPDATE):
	* fringe.c (Fdefine_fringe_bitmap):
	* image.c (x_create_bitmap_from_data, x_create_bitmap_mask)
	(x_create_bitmap_from_xpm_data, xpm_load_image):
	* intervals.h (INTERVAL_HAS_PARENT, INTERVAL_PARENT)
	(set_interval_parent, RESET_INTERVAL, COPY_INTERVAL_CACHE)
	(MERGE_INTERVAL_CACHE):
	* keymap.h (KEYMAPP):
	* lisp.h (eassert, USE_LSB_TAG, CHECK_LISP_OBJECT_TYPE)
	(STRING_SET_UNIBYTE, STRING_SET_MULTIBYTE, DEFSYM, PSEUDOVECTORP)
	(CHECK_RANGED_INTEGER, CHECK_TYPE_RANGED_INTEGER)
	(CHECK_NUMBER_COERCE_MARKER, CHECK_NUMBER_OR_FLOAT_COERCE_MARKER)
	(DEFVAR_LISP, DEFVAR_LISP_NOPRO, DEFVAR_BOOL, DEFVAR_INT)
	(DEFVAR_BUFFER_DEFAULTS, DEFVAR_KBOARD, QUIT)
	(RETURN_UNGCPRO, USE_SAFE_ALLOCA, SAFE_NALLOCA, SAFE_FREE)
	(SAFE_ALLOCA_LISP, FOR_EACH_ALIST_VALUE, functionp):
	* syntax.h (SYNTAX_ENTRY, SYNTAX_WITH_FLAGS, SYNTAX)
	(UPDATE_SYNTAX_TABLE_FORWARD, UPDATE_SYNTAX_TABLE_BACKWARD)
	(SETUP_BUFFER_SYNTAX_TABLE):
	* systime.h (timespec_valid_p):
	* term.c (save_and_enable_current_matrix):
	* window.h (WINDOW_MENU_BAR_P, WINDOW_TOOL_BAR_P):
	* xdisp.c (in_display_vector_p, display_tool_bar_line)
	(redisplay_internal, try_window_reusing_current_matrix)
	(sync_frame_with_window_matrix_rows, try_window_id)
	(display_menu_bar, display_tty_menu_item, display_mode_line)
	(coords_in_mouse_face_p, cursor_in_mouse_face_p):
	* xdisp.c (trace_redisplay_p) [GLYPH_DEBUG]:
	* xmenu.c (xmenu_show):
	* xterm.c (use_xim, x_term_init):
	* xterm.h (XSync, GTK_CHECK_VERSION, use_xim, SET_SCROLL_BAR_X_WIDGET)
	(struct x_bitmap_record):
	Use bool for booleans.
	* ccl.c (struct buffer_text):
	* ccl.h (struct ccl_program):
	* charset.h (struct charset):
	* cm.h (struct cm):
	* coding.h (struct iso_2022_spec, struct coding_system):
	* dispextern.h (struct glyph, struct glyph_matrix, struct glyph_row)
	(struct glyph_string, struct face, struct face_cache)
	(struct bidi_string_data, struct bidi_it)
	(struct draw_fringe_bitmap_params, struct it, Mouse_HLInfo)
	(struct image):
	* editfns.c (Fformat):
	* frame.h (struct frame):
	* fringe.c (struct fringe_bitmap):
	* intervals.h (struct interval):
	* keyboard.h (struct kboard):
	* lisp.h (struct Lisp_Symbol, struct Lisp_Misc_Any, struct Lisp_Marker)
	(struct Lisp_Overlay, struct Lisp_Save_Value, struct Lisp_Free)
	(struct Lisp_Buffer_Local_Value, union specbinding):
	* macfont.m (struct macfont_info):
	* process.h (struct Lisp_Process):
	* termchar.h (struct tty_display_info):
	* window.h (struct window):
	* xterm.h (struct x_output):
	Use bool_bf for boolean bit-fields.
	* ccl.c (setup_ccl_program): Now returns bool instead of -1 or 0.
	All callers changed.
	* ccl.h (struct ccl_program): Remove unused members private_state,
	src_multibyte, dst_multibyte, cr_consumed, suppress_error,
	eight_bit_control.
	(struct ccl_spec): Remove unused members cr_carryover,
	eight_bit_carryover.
	* conf_post.h: Include <stdbool.h>.
	(bool_bf): New type.
	* dispextern.h (TRACE, PREPARE_FACE_FOR_DISPLAY):
	* intervals.h (RESET_INTERVAL, COPY_INTERVAL_CACHE)
	(MERGE_INTERVAL_CACHE): Surround statement macro with proper
	'do { ... } while (false)' brackets.
	* dispextern.h (IF_DEBUG): Properly parenthesize and convert to void.
	Args must now be expressions; all callers changed.
	(SET_MATRIX_ROW_ENABLED_P): Assume 2nd arg is bool.
	(PRODUCE_GLYPHS): Simplify use of boolean.
	* fileio.c (Fcopy_file):
	If I is an integer, prefer 'if (I != 0)' to 'if (I)'.
	* lisp.h (UNGCPRO): Return void, not int.
	(FOR_EACH_TAIL): Use void expression, not int expression.
	* region-cache.c: Reindent.
	* region-cache.h: Copy comments from region-cache.c, to fix
	incorrect remarks about booleans.

2013-12-14  Eli Zaretskii  <eliz@gnu.org>

	* xdisp.c (Fmove_point_visually): Expect overshoot in move_it_to
	when character at point is displayed from a display vector.
	(Bug#16148)

2013-12-14  Teodor Zlatanov  <tzz@lifelogs.com>

	* gnutls.c: Replace `:verify_hostname_error' with `:verify_error',
	now a list of certificate validation checks that will abort a
	connection with an error.
	(Fgnutls_boot): Document it and use it.

2013-12-14  Martin Rudalics  <rudalics@gmx.at>

	* w32term.c (w32_enable_frame_resize_hack): New variable.
	(x_set_window_size): Use it to hack frame resizing on Windows
	(Bug#16028).

2013-12-14  Eli Zaretskii  <eliz@gnu.org>

	* fileio.c (Fcopy_file) [WINDOWSNT]: Move most of the
	Windows-specific code to w32.c.  Change error message text to
	match that of Posix platforms.

	* w32.c (w32_copy_file): New function, most of the code copied and
	reworked from Fcopy_file.  Improve error handling.  Plug memory
	leak when errors are thrown.  Support file names outside of the
	current codepage.  (Bug#7100)

2013-12-13  Paul Eggert  <eggert@cs.ucla.edu>

	* lread.c (load_path_default): Prototype.

2013-12-13  Glenn Morris  <rgm@gnu.org>

	* lread.c: Unconditionally reset load-path after dumping.  (Bug#16107)
	(dump_path): Remove.
	(load-path-default): Remove `changed' argument.
	Do not set dump_path permanently.  Simplify.
	(init_lread): Simplify.
	(syms_of_lread): Remove dump_path.

2013-12-13  Dmitry Antipov  <dmantipov@yandex.ru>

	* alloc.c, font.c, font.h, ftfont.c, ftxfont.c, macfont.m,
	* nsfont.m, w32font.c, xfont.c, xftfont.c: Revert last and
	2013-12-12 font-related change to avoid Bug#16128, which
	is quite hard to fix without even more substantial changes.

2013-12-13  Dmitry Antipov  <dmantipov@yandex.ru>

	* font.c (font_close_object): Check for live frame (Bug#16128).

2013-12-13  Paul Eggert  <eggert@cs.ucla.edu>

	* gnutls.c, gnutls.h (emacs_gnutls_record_check_pending):
	Return ptrdiff_t, not int, since it's a buffer size.
	Reindent/reparen some macros to a more Gnuish style.

2013-12-12  Paul Eggert  <eggert@cs.ucla.edu>

	Avoid undefined behavior with huge regexp interval counts.
	* regex.c (GET_INTERVAL_COUNT): Rename from 'GET_UNSIGNED_NUMBER',
	since it's now specialized to interval counts.  All uses changed.
	Do not assume wraparound on signed integer overflow.
	(regex_compile): Simplify based on the above changes.

2013-12-12  Eli Zaretskii  <eliz@gnu.org>

	Support file names on MS-Windows that use characters outside of
	the current system codepage.  (Bug#7100)

	* w32.c (get_file_security, set_file_security)
	(create_symbolic_link): Separate pointers and boolean flags for
	ANSI and Unicode APIs.  Use the latter if w32_unicode_filenames is
	non-zero, else the former.
	(codepage_for_filenames, filename_to_utf16, )
	(filename_from_utf16, filename_to_ansi, filename_from_ansi):
	New functions.
	(init_user_info): Allow $HOME and $SHELL to include non-ANSI
	characters.
	(normalize_filename): Lose the DBCS code, now works on UTF-8.
	Accept only one argument; all callers changed.
	(dostounix_filename): Remove the second argument, now works in
	UTF-8.  All callers changed.
	(parse_root): Lose DBCS code.
	(get_long_basename, w32_get_short_filename, init_environment)
	(GetCachedVolumeInformation, sys_readdir, open_unc_volume)
	(read_unc_volume, logon_network_drive, faccessat, sys_chdir)
	(sys_chmod, sys_creat, sys_fopen, sys_link, sys_mkdir, sys_open)
	(sys_rename_replace, sys_rmdir, sys_unlink, stat_worker, utime)
	(is_symlink, readlink, chase_symlinks, w32_delayed_load): Work in
	Unicode mode if w32_unicode_filenames is non-zero, in ANSI mode
	otherwise.
	(ansi_encode_filename): New function.
	(get_emacs_configuration, get_emacs_configuration_options):
	Functions deleted.
	(add_volume_info, GetCachedVolumeInformation): Run the input file
	name through unixtodos_filename, to ensure it is stored and
	referenced in canonical form.
	(get_volume_info): Lose the DBCS code, now works in UTF-8.
	(logon_network_drive, sys_link, utime): Improve error handling.
	(sys_access): New function.
	(hashval, generate_inode_val): Unused functions deleted.
	(symlink, readlink, readlinkat): Lose DBCS code, now works in UTF-8.
	(check_windows_init_file): Convert error message from UTF-8 to
	ANSI codepage, for display in the message box.
	(globals_of_w32): Set w32_unicode_filenames according to the OS
	version.

	* w32term.c (construct_drag_n_drop): Work in Unicode mode when
	w32_unicode_filenames is non-zero, ANSI mode otherwise.
	(syms_of_w32term): Declare w32-unicode-filenames.

	* w32proc.c (new_child, delete_child): Remove code that handled
	unused pending_deletion and input_file members of the child struct.
	(create_child, sys_spawnve): Convert all file names to ANSI
	codepage.  Use ANSI APIs explicitly; forcibly fail if any file
	name cannot be encoded in ANSI codepage.  Don't use
	unixtodos_filename, mirror slashes by hand.
	(record_infile, record_pending_deletion): Functions deleted.
	(Fw32_short_file_name): Call w32_get_short_filename instead of
	GetShortPathName.

	* w32notify.c (add_watch): Work in Unicode mode when
	w32_unicode_filenames is non-zero, ANSI mode otherwise.
	(Fw32notify_add_watch): Rewrite to avoid using GetFullPathName;
	instead, do the same with Lisp primitives.

	* w32fns.c (file_dialog_callback, Fx_file_dialog)
	(Fsystem_move_file_to_trash, Fw32_shell_execute)
	(Ffile_system_info, Fdefault_printer_name): Work in Unicode mode
	when w32_unicode_filenames is non-zero, ANSI mode otherwise.
	(Fw32_shell_execute): Improve error reporting.
	(Fdefault_printer_name): Ifdef away for Cygwin.

	* w32.h (struct _child_process): Remove input_file and
	pending_deletion members that are no longer used.
	(dostounix_filename, w32_get_short_filename, filename_from_ansi)
	(filename_to_ansi, filename_from_utf16, filename_to_utf16)
	(ansi_encode_filename): New and updated prototypes.

	* unexw32.c (open_input_file, open_output_file, unexec): Use ANSI
	APIs explicitly.
	(unexec): Don't use dostounix_filename, it expects a file name in
	UTF-8.  Instead, mirror backslashes by hand.  Convert NEW_NAME to
	ANSI encoding.

	* fileio.c (Ffile_name_directory, file_name_as_directory)
	(directory_file_name, Fexpand_file_name)
	(Fsubstitute_in_file_name) [WINDOWSNT]: Adapt to the change in
	arguments of dostounix_filename.
	(Fexpand_file_name) [WINDOWSNT]: Convert value of $HOME to UTF-8.
	use MAX_UTF8_PATH for size of file-name strings.
	(emacs_readlinkat): Build an explicitly unibyte string for file
	names.
	(syms_of_fileio) <file-name-coding-system>:
	<default-file-name-coding-system>: Mention MS-Windows peculiarities.

	* emacs.c (init_cmdargs) [WINDOWSNT]: Convert argv[0] to UTF-8.
	(main) [WINDOWSNT]: Convert the argv[] elements that are files or
	directories to UTF-8.
	(decode_env_path) [WINDOWSNT]: Convert file names taken from the
	environment, and each element of the input PATH, to UTF-8.

	* dired.c (file_attributes): Use build_unibyte_string explicitly
	to make Lisp strings from user and group names.

	* coding.h (ENCODE_FILE, DECODE_FILE): Just call encode_file and
	decode_file.

	* coding.c (decode_file_name, encode_file_name): New functions.

	* termcap.c (tgetent): Adapt to the change in arguments of
	dostounix_filename.

	* sysdep.c (sys_subshell) [WINDOWSNT]: Use MAX_UTF8_PATH for file
	names.

	* msdos.c (dostounix_filename, init_environment): Adapt to the
	change in arguments of dostounix_filename.

	* image.c (xpm_load, tiff_load, gif_load, imagemagick_load)
	[WINDOWSNT]: Encode file names passed to the image libraries in
	ANSI codepage.

	* gnutls.c (Fgnutls_boot): Encode all file names passed to GnuTLS.
	[WINDOWSNT]: Convert file names to the current ANSI codepage.

	* filelock.c (lock_file) [WINDOWSNT]: Adapt to the change in
	arguments of dostounix_filename.

2013-12-12  Dmitry Antipov  <dmantipov@yandex.ru>

	* font.h (struct font_entity) [HAVE_NS]: New field to record
	font driver which was used to create this entity.
	(struct font) [HAVE_WINDOW_SYSTEM]: New field to record
	frame where the font was opened.
	(font_close_object): Add prototype.
	* font.c (font_make_entity) [HAVE_NS]: Zero out driver field.
	(font_close_object): Not static any more.  Lost frame arg.
	Adjust comment and users.
	* alloc.c (cleanup_vector): Call font_close_object to adjust
	per-frame font counters correctly.  If HAVE_NS, also call
	driver-specific cleanup for font-entity objects.
	* ftfont.c (ftfont_open):
	* nsfont.m (nsfont_open):
	* w32font.c (w32font_open_internal):
	* xfont.c (xfont_open):
	* xftfont.c (xftfont_open): Save frame pointer in font object.
	* macfont.m (macfont_open): Likewise.
	(macfont_descriptor_entity): Save driver pointer to be able
	to call its free_entity routine when font-entity is swept.
	* ftxfont.c (ftxfont_open): Add eassert because frame
	pointer should be saved by ftfont_driver.open.

2013-12-12  Dmitry Antipov  <dmantipov@yandex.ru>

	* xterm.c (x_make_frame_visible): Restore hack which is needed when
	input polling is used.  This is still meaningful for Cygwin, see
	https://lists.gnu.org/r/emacs-devel/2013-12/msg00351.html.
	* keyboard.c (poll_for_input_1, input_polling_used):
	Define unconditionally.
	* dispextern.h (FACE_SUITABLE_FOR_CHAR_P): Remove unused macro.
	(FACE_FOR_CHAR): Simplify because face_for_char does the same.
	* fontset.c (face_suitable_for_char_p) [0]: Remove unused function.
	(font_for_char): Prefer ptrdiff_t to int for buffer position.
	(face_for_char): Likewise.  Rearrange eassert and return ASCII
	face for CHAR_BYTE8_P.
	* fontset.h (font_for_char, face_for_char): Adjust prototypes.

2013-12-11  Ken Brown  <kbrown@cornell.edu>

	* dispextern.h (erase_phys_cursor):
	* keyboard.h (make_ctrl_char): Declare prototypes if HAVE_NTGUI.

2013-12-11  Dmitry Antipov  <dmantipov@yandex.ru>

	* nsterm.m (x_free_frame_resources):
	* term.c (tty_free_frame_resources):
	* xterm.c (x_free_frame_resources): Do not check for non-NULL
	face cache because it's implied by free_frame_faces anyway.
	* w32term.c (x_free_frame_resources): Likewise.  Do not call
	free_frame_faces twice.

2013-12-11  Rüdiger Sonderfeld  <ruediger@c-plusplus.de>

	* editfns.c (Fformat_time_string): Mention %F in the doc.

2013-12-11  Martin Rudalics  <rudalics@gmx.at>

	* window.c (resize_frame_windows): Don't return immediately when
	the root window's size doesn't change - the minibuffer window
	may still have to be repositioned/resized.
	* xfns.c (Fx_create_frame): Always change the frame size after
	initializing the frame's faces.
	* xterm.c (handle_one_xevent): Don't set pixel sizes here,
	change_frame_size should already have done it.
	(x_new_font): Assign new tool- and menu-bar heights.
	(x_set_window_size_1): Account for tool- and menu-bar heights
	(Bug#16013).  Don't set pixel sizes since change_frame_size
	should already have done it.

2013-12-11  Paul Eggert  <eggert@cs.ucla.edu>

	Remove the option of using libcrypto.
	* Makefile.in (LIB_CRYPTO): Remove.
	(LIBES): Don't use it.

2013-12-11  Juri Linkov  <juri@jurta.org>

	* term.c (term_get_fkeys_1): Remove non-standard IBM terminfo
	as obsolete to avoid conflicts with <S-up>.  (Bug#13471)

2013-12-10  Dmitry Antipov  <dmantipov@yandex.ru>

	* xdisp.c (display_tool_bar_line): Don't extend on a previously
	drawn tool bar items (Bug#16058).
	* font.c (font_find_for_lface): Ensure SAFE_FREE on return.

2013-12-09  Ken Brown  <kbrown@cornell.edu>

	* frame.c (get_frame_param): Make extern if HAVE_NTGUI.

	* lisp.h (get_frame_param): Adjust conditions for prototype
	declaration.

2013-12-09  Dmitry Antipov  <dmantipov@yandex.ru>

	* gtkutil.c (USE_NEW_GTK_FONT_CHOOSER) [HAVE_FREETYPE]:
	Avoid unused macro warning if configured --without-xft.

2013-12-09  Jan Djärv  <jan.h.d@swipnet.se>

	* alloc.c (Fmemory_limit): Avoid compiler warning.  Return 0 always.

2013-12-08  Jan Djärv  <jan.h.d@swipnet.se>

	* nsterm.m (updateFrameSize:): Fix GNUstep toolbar not updating.

	* emacs.c (main): Call fixup_locale a second time for GNUstep.

2013-12-08  Martin Rudalics  <rudalics@gmx.at>

	* frame.c (x_set_font): Mark frame as garbaged (Bug#16028).

2013-12-08  Paul Eggert  <eggert@cs.ucla.edu>

	Use libcrypto's checksum implementations if available, for speed.
	* Makefile.in (LIB_CRYPTO): New macro.
	(LIBES): Use it.

	* frame.h (SET_FRAME_VISIBLE): Now an inline function.
	The macro didn't conform to C99 due to type mismatch,
	which caused compilation failure with Sun C 5.12,
	and it was confusing anyway.  Include window.h to declare
	redisplay_other_windows.

2013-12-08  Stefan Monnier  <monnier@iro.umontreal.ca>

	* window.c (set_window_buffer): Update mode line (bug#16084).

2013-12-07  Paul Eggert  <eggert@cs.ucla.edu>

	Fix minor problems found by static checking.
	* keyboard.c (poll_for_input_1, input_polling_used):
	Define only if HAVE_NTGUI.
	* xmenu.c (popup_activate_callback): Omit unnecessary
	check against USE_X_TOOLKIT, which must be defined here anyway.
	* xterm.c, xterm.h (x_dispatch_event) [! (USE_X_TOOLKIT || USE_MOTIF)]:
	Now static.

2013-12-07  Martin Rudalics  <rudalics@gmx.at>

	* w32term.c (w32_read_socket): Fix int/Lisp_Object type mixup.

2013-12-07  Jan Djärv  <jan.h.d@swipnet.se>

	* gtkutil.c (tb_size_cb): Call xg_height_or_width_changed.

	* nsterm.m (x_set_window_size): Remove fprintf.
	(init): Define always.  Set applicationDidFinishLaunchingCalled
	for GNUstep.
	(applicationDidFinishLaunching:):
	Set applicationDidFinishLaunchingCalled.
	(applicationDidBecomeActive:): Call applicationDidFinishLaunching if
	not called.

	* nsterm.h (EmacsApp): Add applicationDidFinishLaunchingCalled.

	Pixel resize changes for NS (Bug#16049).
	* nsterm.m (x_set_window_size): Change parameters rows/cols to
	height/width.  row/cols are locals.
	Pass pixelwise to check_frame_size.  Don't set FRAME_PIXEL_WIDTH/HEIGHT.
	(updateFrameSize:): Remove gsextra.  Adjust for pixelwise resize.
	(windowWillResize): Remove gsextra.  Calculate extra as in
	updateFrameSize.
	(x_new_font): Don't change frame size if fullscreen.
	Change size pixelwise.

	* nsfns.m (Fx_create_frame): Call change_frame_size twice as per
	comment in xfns.c.  Change to pixelwise call.

2013-12-06  Eli Zaretskii  <eliz@gnu.org>

	* buffer.c (Fset_buffer_multibyte): Invalidate buffer caches.
	(Bug#16070)

2013-12-06  Dmitry Antipov  <dmantipov@yandex.ru>

	* xterm.c (input_signal_count): Remove.
	(x_dispatch_event): Define unconditionally.
	(x_make_frame_visible): Process X events until the frame
	is really visible (Bug#16027).
	* xterm.h (x_dispatch_event): Declare unconditionally.

2013-12-05  Jan Djärv  <jan.h.d@swipnet.se>

	* nsfns.m (ns_frame_parm_handlers): Add right/bottom_divider_width.

	* nsterm.m (x_set_window_size): Handle pixelwise.

2013-12-05  Martin Rudalics  <rudalics@gmx.at>

	* w32term.c (x_new_font):
	* xterm.c (x_new_font): Calculate new frame size from new font
	size (Bug#16028).

2013-12-04  Stefan Monnier  <monnier@iro.umontreal.ca>

	* lisp.h (FOR_EACH_TAIL): New macro.
	* fns.c (Fdelq): Use it to avoid inf-loops; remove QUIT.

	* window.c (select_window): Call second wset_redisplay before we change
	selected_window (bug#16034).

2013-12-04  Paul Eggert  <eggert@cs.ucla.edu>

	* bidi.c (LRM_CHAR, RLM_CHAR): Remove; no longer used.

2013-12-04  Eli Zaretskii  <eliz@gnu.org>

	* w32xfns.c: Include window.h, to avoid a compiler warning.

2013-12-04  Stefan Monnier  <monnier@iro.umontreal.ca>

	* window.c (window_scroll): Mark window for redisplay (bug#16034).
	(scroll_command, Fscroll_other_window): Don't cause redisplay now that
	window_scroll takes care of it.
	(Fset_window_point, Fdelete_other_windows_internal)
	(set_window_buffer, Fwindow_resize_apply, resize_frame_windows)
	(Fsplit_window_internal, Fdelete_window_internal)
	(Fresize_mini_window_internal, Fset_window_configuration)
	(apply_window_adjustment): Use fset_redisplay and wset_redisplay to
	cause redisplay instead of forcing a complete redisplay.
	* xdisp.c (wset_redisplay): Don't set windows_or_buffers_changed if
	we're only affecting the selected_window.

2013-12-04  Eli Zaretskii  <eliz@gnu.org>

	* bidi.c (bidi_get_type, bidi_get_category): Handle the isolate
	directional control characters.  Update type and category
	determination according to the UBA from Unicode v6.3.
	(bidi_category_t): New category EXPLICIT_FORMATTING.

	* dispextern.h (bidi_type_t): Update to include new bidirectional
	properties introduced with Unicode v6.3.  (Bug#16043)

2013-12-04  Martin Rudalics  <rudalics@gmx.at>

	* xterm.c (XTflash): Fix coordinate of bottom area to flash
	(Bug#16044).

2013-12-04  Dmitry Antipov  <dmantipov@yandex.ru>

	* font.c (font_list_entities): Remove dummy assignment.
	* font.h (struct font) [HAVE_WINDOW_SYSTEM]: Group members which are
	used on graphic displays only.  Remove unused 'font_encoder' member.
	(struct font_bitmap): Remove unused 'extra' member.
	* nsfont.m (nsfont_open):
	* w32font.c (w32font_open_internal):
	* ftfont.c (ftfont_get_bitmap): Adjust users.

2013-12-03  Paul Eggert  <eggert@cs.ucla.edu>

	Use bool for boolean.
	* tparam.c (tparam1):
	* undo.c (record_point, record_property_change):
	Use bool for boolean, for local vars that are always true or false.

	Minor integer overflow fixes (Bug#16033).
	* window.c (Fset_window_new_pixel): Don't let new_pixel go negative.
	This improves on the previous fix to this function.
	(window_resize_check): When summing up pixel counts, don't rely on
	undefined behavior if the sum overflows.

2013-12-03  Martin Rudalics  <rudalics@gmx.at>

	* window.c (Fset_window_new_pixel): Don't choke at negative
	argument value (Bug#16033).

	* xfns.c (Fx_create_frame): Add another call to change_frame_size
	to avoid crash in window_box_height.

	* gtkutil.h: Fix external declaration of xg_frame_set_char_size.
	* gtkutil.c (xg_frame_set_char_size, style_changed_cb): Fix size
	calculation.
	* xterm.c (x_set_window_size): Fix size calculation (Bug#16013).

2013-12-03  Paul Eggert  <eggert@cs.ucla.edu>

	Minor integer overflow fixes.
	* window.c (Fset_window_new_pixel, grow_mini_window):
	* xdisp.c (Fwindow_text_pixel_size):
	Avoid undefined behavior on signed integer overflow.
	* xfns.c (x_set_mouse_color):
	Check that drag shape fits in 'unsigned', since that's what X wants.

2013-12-02  Eli Zaretskii  <eliz@gnu.org>

	Improve reporting of fatal exception on MS-Windows.
	* w32fns.c (my_exception_handler): New function.
	(globals_of_w32fns): Set it up as the unhandled exception
	handler.  Initialize exception code and address to zeros.
	(emacs_abort): If the exception code and address are available,
	print them at the beginning of the backtrace.  Fix the format of
	printing addresses (was producing 0x0x12345678 on XP).
	(Bug#15994)

2013-12-02  Helmut Eller  <eller.helmut@gmail.com>

	* eval.c (Fbacktrace__locals): New function.
	(syms_of_eval): Defsubr it.

2013-12-02  Dmitry Antipov  <dmantipov@yandex.ru>

	* font.h (FONT_WIDTH, FONT_HEIGHT, FONT_BASE, FONT_DESCENT):
	Define here to unify between...
	* nsterm.h, w32term.h, xterm.h: ...port-specific headers.
	* w32term.h (CHECK_W32_FRAME): Remove unused macro.

2013-12-02  YAMAMOTO Mitsuharu  <mituharu@math.s.chiba-u.ac.jp>

	* xterm.h (struct scroll_bar): Remove member `fringe_extended_p'.

	* xterm.c (x_draw_fringe_bitmap, x_scroll_run): Remove code for
	fringe background extension.
	(x_scroll_bar_create): Remove variables `sb_left' and `sb_width',
	because they are now always the same as `left' and `width',
	respectively.  Remove code for the case that `width' and
	`sb_width' are different.

2013-12-01  Paul Eggert  <eggert@cs.ucla.edu>

	Fix minor problems found by static checking.
	* dispextern.h, xdisp.c (x_draw_bottom_divider): Now static.
	* frame.c (set_frame_param) [!HAVE_NTGUI]: Remove.
	* xdisp.c (Ftool_bar_height) [USE_GTK || HAVE_NS]: Now const function.

2013-12-01  Lars Magne Ingebrigtsen  <larsi@gnus.org>

	* image.c (imagemagick_compute_animated_image): Don't crash if we
	have an animation with different-sized images (bug#15313).

2013-11-30  Martin Rudalics  <rudalics@gmx.at>

	Remove some unused items introduced during pixelwise change.
	* window.c (window_resize_total_check): Remove unused function.
	* xdisp.c (remember_mouse_glyph): Remove unused label.
	(Ftool_bar_height): Move declaration inside #if.
	* xterm.c (x_set_window_size): Don't use r and c.

2013-11-30  Juanma Barranquero  <lekktu@gmail.com>

	* xdisp.c (Fwindow_text_pixel_size): Remove unused variables
	`value' and `endp'.

	* window.c (Fset_window_configuration): Comment out unused variables.

	* w32term.c (w32_read_socket): Remove unused variable `buf'.

2013-11-30  Jan Djärv  <jan.h.d@swipnet.se>

	* xdisp.c (redisplay_internal): unrequest_sigio => request_sigio.

	* xfaces.c (NEAR_SAME_COLOR_THRESHOLD): Move inside HAVE_WINDOW_SYSTEM.

	* gnutls.c (gnutls_audit_log_function): Only declare and define if
	HAVE_GNUTLS3 (Bug#16001).

	* xdisp.c (redisplay_internal): Call request_sigio at end_of_redisplay
	if interrupts are deferred (Bug#15801).

2013-11-30  Martin Rudalics  <rudalics@gmx.at>

	Support resizing frames and windows pixelwise.
	* dispextern.h (enum window_part): Add ON_SCROLL_BAR,
	ON_RIGHT_DIVIDER and ON_BOTTOM_DIVIDER.
	(struct glyph_matrix): Replace window_left_col and
	window_top_line by window_pixel_left and window_pixel_top.
	(WINDOW_WANTS_MODELINE_P, WINDOW_WANTS_HEADER_LINE_P):
	Minor rewrite.
	(enum face_id): Add WINDOW_DIVIDER_FACE_ID.
	(draw_window_divider, move_it_to, x_draw_right_divider)
	(x_draw_bottom_divider, change_frame_size): Add or fix
	declarations.
	* dispnew.c (change_frame_size_1): Change prototype.
	(adjust_glyph_matrix, required_matrix_width)
	(adjust_frame_glyphs_for_window_redisplay): Use pixel
	values instead of lines and columns.
	(marginal_area_string): Use WINDOW_FRINGES_WIDTH instead of
	WINDOW_TOTAL_FRINGE_WIDTH.
	(handle_window_change_signal, do_pending_window_change)
	(init_display): Adjusts calls of change_frame_size.
	(change_frame_size, change_frame_size_1): Handle pixelwise
	changes.
	* frame.c (Qright_divider_width, Qbottom_divider_width):
	New Lisp objects.
	(set_menu_bar_lines_1, set_menu_bar_lines, make_frame)
	(make_terminal_frame, Fmake_terminal_frame, Fframe_parameters)
	(x_set_internal_border_width, x_set_vertical_scroll_bars)
	(x_set_scroll_bar_width, x_figure_window_size): Handle pixel
	values.
	(set_frame_param): New function.
	(Fframe_text_cols, Fframe_text_lines, Fframe_total_cols)
	(Fframe_text_width, Fframe_text_height, Fscroll_bar_width)
	(Ffringe_width, Fborder_width, Fright_divider_width)
	(Fbottom_divider_width): New functions, defsubr them.
	(Fset_frame_height, Fset_frame_width, Fset_frame_size):
	New argument pixelwise.
	(struct frame_parm_table): New members Qright_divider_width and
	Qbottom_divider_width.
	(x_set_frame_parameters): Handle parameters for pixelwise sizes.
	(x_report_frame_params): Handle Qright_divider_width and
	Qbottom_divider_width.
	(x_set_right_divider_width, x_set_bottom_divider_width):
	New functions.
	(frame_resize_pixelwise): New option.
	* frame.h (struct frame): Add tool_bar_height, menu_bar_height,
	new_pixelwise, right_divider_width and bottom_divider_width;
	remove total_lines; rename text_lines, text_cols, new_text_lines
	and new_text_cols to text_height, text_width, new_height and
	new_width respectively.
	(FRAME_LINES, FRAME_COLS): Rename to FRAME_TEXT_HEIGHT and
	FRAME_TEXT_WIDTH respectively.
	(FRAME_MENU_BAR_HEIGHT, FRAME_TOOL_BAR_HEIGHT)
	(FRAME_RIGHT_DIVIDER_WIDTH, FRAME_BOTTOM_DIVIDER_WIDTH)
	(FRAME_TEXT_TO_PIXEL_WIDTH, FRAME_PIXEL_TO_TEXT_WIDTH):
	New macros.
	(FRAME_TOP_MARGIN_HEIGHT, FRAME_LEFT_SCROLL_BAR_AREA_WIDTH)
	(FRAME_RIGHT_SCROLL_BAR_AREA_WIDTH, FRAME_SCROLL_BAR_AREA_WIDTH)
	(SET_FRAME_COLS, SET_FRAME_WIDTH, SET_FRAME_HEIGHT)
	(FRAME_TEXT_COLS_TO_PIXEL_WIDTH, FRAME_PIXEL_WIDTH_TO_TEXT_COLS)
	(FRAME_TEXT_COLS_TO_PIXEL_WIDTH): Rewrite macros.
	(FRAME_TOTAL_COLS_ARG): Remove macro.
	* fringe.c (draw_fringe_bitmap_1): Handle right divider.
	* gtkutil.c (xg_frame_resized, xg_frame_set_char_size)
	(x_wm_set_size_hint): Handle frame pixel sizes.
	* indent.c (compute_motion, Fcompute_motion):
	Call window_body_width instead of window_body_cols.
	* keyboard.c (Qright_divider, Qbottom_divider): New symbols.
	(make_lispy_position): Handle right and bottom dividers.
	(Fsuspend_emacs): Pixelize call of change_frame_size.
	* keyboard.h: Extern Qright_divider, Qbottom_divider.
	* lisp.h: Extern set_frame_param.
	* nsfns.m (x_set_tool_bar_lines): Pixelize call of
	x_set_window_size.
	(Fx_create_frame): Add entry for vertical_drag_cursor.
	Pixelize call of change_frame_size.
	* nsterm.h (struct ns_output): Add vertical_drag_cursor.
	* nsterm.m (ns_update_window_end): Optionally draw right
	divider.
	(x_set_window_size): Add argument pixelwise.
	Call check_frame_size and change_frame_size with pixelwise zero.
	(ns_draw_window_divider): New function.
	(ns_redisplay_interface): Add ns_draw_window_divider.
	(updateFrameSize:): Call change_frame_size with pixelwise zero.
	(x_new_font): Call x_set_window_size with pixelwise zero.
	* print.c (print_object): For a window print its sequence
	number again.
	* term.c (Fresume_tty): Pixelize call of change_frame_size.
	* w32fns.c (x_set_mouse_color): Handle vertical drag cursor.
	(x_set_menu_bar_lines, x_set_tool_bar_lines): Calculate pixelwise.
	(w32_createwindow): Use scroll bar area width.
	(w32_wnd_proc): Handle bottom divider width.
	For WM_WINDOWPOSCHANGING return zero if we resize pixelwise.
	(Fx_create_frame): Default divider width parameters.
	Caclulate sizes pixelwise.  Add vertical drag cursor support.
	(x_create_tip_frame): Default divider widths to zero.
	Pixelize call to change_frame_size.
	(Fx_show_tip): Add handling of divider widths.  Pixelize window
	position and sizes.
	(Fw32_frame_rect): New function.
	(frame_parm_handler w32_frame_parm_handlers): Add divider
	widths.
	(Vx_window_vertical_drag_shape): Add variable.
	* w32inevt.c (resize_event, maybe_generate_resize_event):
	Pixelize change_frame_size calls.
	* w32menu.c (set_frame_menubar): Pixelize x_set_window_size
	call.
	* w32term.c (w32_draw_window_divider): New function.
	(x_update_window_end): Handle right divider.
	(w32_draw_fringe_bitmap, x_scroll_run)
	(w32_set_vertical_scroll_bar): Pixelize scrollbar widths.
	(w32_read_socket): Handle SIZE_MAXIMIZED separately.
	Calculate new frame sizes pixelwise.
	(x_new_font): Pixelize call to x_set_window_size.
	(x_check_fullscreen): Pixelize call to change_frame_size.
	(x_set_window_size_1, x_set_window_size): New argument
	pixelwise.  Calculate pixelwise.
	(x_wm_set_size_hint): Use scroll bar area width.
	(w32_redisplay_interface): Add w32_draw_window_divider.
	* w32term.h (struct w32_output): Add vertical drag cursor.
	* widget.c (set_frame_size, update_wm_hints)
	(EmacsFrameResize, EmacsFrameSetValues): Pixelize calls of
	change_frame_size.
	(EmacsFrameSetCharSize): Pixelize call of x_set_window_size.
	* window.c (sequence_number): Restore.
	(Fwindow_pixel_width, Fwindow_pixel_height)
	(Fwindow_mode_line_height, Fwindow_header_line_height)
	(window_pixel_to_total, Frun_window_scroll_functions)
	(Fset_window_new_pixel, window_resize_apply_total)
	(Fwindow_resize_apply_total): New functions.
	(window_body_height, window_body_width): Rename from
	window_body_lines.  New argument PIXELWISE.
	Calculate pixelwise.
	(Fwindow_body_height, Fwindow_body_width): New argument
	PIXELWISE.
	(coordinates_in_window, window_relative_x_coord): Use window's
	pixel width instead of total width.
	(replace_window, recombine_windows): Initialize pixel values.
	(resize_root_window, resize_frame_windows, grow_mini_window)
	(shrink_mini_window): New argument PIXELWISE.
	Calculate pixelwise.
	(Fdelete_other_windows_internal, adjust_window_margins)
	(window_resize_check, window_resize_apply)
	(Fdelete_window_internal, Fresize_mini_window_internal)
	(Fwindow_text_width, Fwindow_text_height): Calculate pixelwise.
	(check_frame_size): Rename arguments.  New argument PIXELWISE.
	Calculate pixelwise.
	(set_window_buffer): Make samebuf bool.  Run configuration change
	hook only if buffer changed.
	(Fset_window_buffer): Rewrite doc-string.
	(make_window): Initialize new_pixel slot.
	(Fwindow_resize_apply): Check pixel size of root window.
	(Fsplit_window_internal): Call 2nd argument pixel_size.
	Calculate pixelwise.
	(Fscroll_left, Fscroll_right): Call window_body_width instead of
	window_body_cols.
	(save_window_data): New slots frame_text_width,
	frame_text_height, frame_menu_bar_height, frame_tool_bar_height.
	(saved_window): New slots pixel_left, pixel_top, pixel_height,
	pixel_width.
	(Fcurrent_window_configuration, Fset_window_configuration)
	(save_window_save, compare_window_configurations): Handle new
	slots in save_window_data and saved_window.
	(Fset_window_scroll_bars): Fix doc-string.
	(window_resize_pixelwise): New variable.
	(coordinates_in_window, Fcoordinates_in_window_p):
	Handle dividers.
	(make_parent_window): Adjust sequence_number.
	(Fwindow_right_divider_width, Fwindow_bottom_divider_width):
	New functions.
	* window.h (struct window): New members new_pixel, pixel_left,
	pixel_top, pixel_width, pixel_height.  Restore sequence_number.
	(wset_new_pixel): New function.
	(WINDOW_PIXEL_WIDTH, WINDOW_PIXEL_HEIGHT)
	(MIN_SAFE_WINDOW_PIXEL_WIDTH, MIN_SAFE_WINDOW_PIXEL_HEIGHT)
	(WINDOW_LEFT_PIXEL_EDGE, WINDOW_RIGHT_PIXEL_EDGE)
	(WINDOW_TOP_PIXEL_EDGE, WINDOW_BOTTOM_PIXEL_EDGE)
	(WINDOW_BOTTOMMOST_P, WINDOW_BOX_LEFT_PIXEL_EDGE)
	(WINDOW_BOX_RIGHT_PIXEL_EDGE, WINDOW_MARGINS_COLS)
	(WINDOW_MARGINS_WIDTH, WINDOW_RIGHT_DIVIDER_WIDTH)
	(WINDOW_BOTTOM_DIVIDER_WIDTH): New macros.
	(WINDOW_TOTAL_FRINGE_WIDTH): Rename to WINDOW_FRINGES_WIDTH.
	(WINDOW_TOTAL_WIDTH, WINDOW_TOTAL_HEIGHT): Remove macros.
	(WINDOW_RIGHT_EDGE_X, WINDOW_LEFT_EDGE_X, WINDOW_TOP_EDGE_Y)
	(WINDOW_BOTTOM_EDGE_Y, WINDOW_FULL_WIDTH_P, WINDOW_LEFTMOST_P)
	(WINDOW_RIGHTMOST_P, WINDOW_BOX_LEFT_EDGE_X)
	(WINDOW_BOX_RIGHT_EDGE_X, WINDOW_FRINGE_COLS)
	(WINDOW_BOX_HEIGHT_NO_MODE_LINE, WINDOW_BOX_TEXT_HEIGHT):
	Rewrite.
	(resize_frame_windows, grow_mini_window, shrink_mini_window)
	(window_body_width, check_frame_size): Adapt external declarations.
	* xdisp.c (last_max_ascent): New integer.
	(window_text_bottom_y): Handle bottom divider.
	(window_box_width, window_box_height): Calculate pixelwise.
	(get_glyph_string_clip_rects): Handle right divider.
	(remember_mouse_glyph): When windows are resized pixelwise
	proceed with width and height set to 1.
	(init_iterator): Use WINDOW_PIXEL_WIDTH instead of
	WINDOW_TOTAL_WIDTH.
	(move_it_to): Calculate and return maximum x position
	encountered.
	(Fwindow_text_pixel_size): New function.
	(resize_mini_window, update_tool_bar): Calculate pixelwise.
	(tool_bar_lines_needed): Rename to tool_bar_height.
	Calculate pixelwise.
	(Ftool_bar_lines_needed): Rename to Ftool_bar_height.
	Calculate pixelwise.
	(redisplay_tool_bar): Calculate pixelwise.
	(redisplay_window): Calculate pixelwise.  Handle dividers.
	(draw_glyphs, x_clear_end_of_line, note_mouse_highlight)
	(x_draw_vertical_border): Handle dividers.
	(define_frame_cursor1): Handle vertical drag cursor.
	(x_draw_right_divider, x_draw_bottom_divider): New functions.
	(expose_window): Calculate pixelwise.  Handle dividers.
	(init_xdisp): Initialize pixel values.
	* xfaces.c (Qwindow_divider): New face.
	(realize_basic_faces): Realize it.
	* xfns.c (x_set_mouse_color): Handle vertical_drag_cursor.
	(x_set_menu_bar_lines, x_set_tool_bar_lines): Calculate pixelwise.
	(x_set_scroll_bar_default_width): Default actual width to 16.
	(Fx_create_frame): Set sizes pixelwise.
	(x_create_tip_frame): Default divider widths to zero.
	Pixelize call of change_frame_size.
	(Fx_show_tip): Handle divider widths.  Initial pixel position
	and sizes.
	(frame_parm_handler x_frame_parm_handlers): Add divider widths.
	(Vx_window_vertical_drag_shape): New option.
	* xmenu.c (free_frame_menubar): Pixelize call of
	x_set_window_size.
	* xterm.c (x_draw_window_divider): New function.
	(x_update_window_end): Optionally draw right divider.
	(x_draw_fringe_bitmap, x_scroll_run, x_scroll_bar_create)
	(XTset_vertical_scroll_bar): Use scroll bar pixel width.
	(handle_one_xevent, x_new_font): Calculate pixelwise.
	(x_set_window_size_1, x_set_window_size): New argument
	pixelwise.  Calculate pixelwise.
	(x_wm_set_size_hint): Pixelize call of check_frame_size.
	(struct x_redisplay_interface): Add x_draw_window_divider.
	* xterm.h (struct x_output): Add vertical_drag_cursor.

2013-11-30  Stefan Monnier  <monnier@iro.umontreal.ca>

	* xdisp.c (redisplay_internal): Don't call set_window_update_flags.
	Set invisible frames's `redisplay' when a full redisplay is requested.
	(redisplay_window): Set must_be_updated_p instead (bug#15999).
	(redisplay_mode_lines): Don't set must_be_updated_p any more.
	(display_mode_lines): Set it here instead.

	* dispnew.c (set_window_update_flags): Remove `b' argument; make static.

	* dispextern.h (set_window_update_flags): Remove.

2013-11-29  Stefan Monnier  <monnier@iro.umontreal.ca>

	* fns.c (internal_equal): Add a hash_table argument to handle cycles.

	* xdisp.c (REDISPLAY_SOME_P): New macro.
	(redisplay_internal): Use it (bug#15999).
	(prepare_menu_bars, redisplay_window): Use it as well.

	* lisp.mk (lisp): Add electric.elc and uniquify.elc.

2013-11-29  Tom Seddon  <emacs@tomseddon.plus.com>  (tiny change)

	* w32font.c (g_b_init_get_char_width_32_w): New static var.
	(globals_of_w32font): Zero it out.
	(GetCharWidth32W_Proc): New function pointer.
	(get_char_width_32_w): New function.
	(compute_metrics): If get_glyph_outline_w returns an error, try
	get_char_width_32_w before declaring a failure.  This avoids
	punishing raster (a.k.a. "bitmap") fonts by slowing down
	redisplay.  (Bug#6364).

2013-11-29  Eli Zaretskii  <eliz@gnu.org>

	* xdisp.c (clear_mouse_face): Don't invalidate the entire
	mouse-highlight info, just signal frame_up_to_date_hook that mouse
	highlight needs to be redisplayed.  (Bug#15913)

2013-11-29  Paul Eggert  <eggert@cs.ucla.edu>

	Fix minor problems found by static checking.
	* buffer.h (struct buffer_text, struct buffer):
	* frame.h (struct frame):
	* window.h (struct window):
	Avoid 'bool foo : 1;', as it's not portable to pre-C99 compilers,
	as described in ../lib/stdbool.in.h.  Use 'unsigned foo : 1;' instead.
	* menu.c (syms_of_menu): Define x-popup-dialog, removing a
	no-longer-valid use of HAVE_MENUS.
	* xdisp.c (propagate_buffer_redisplay): Now static.

2013-11-29  Stefan Monnier  <monnier@iro.umontreal.ca>

	* xmenu.c (Fmenu_or_popup_active_p):
	* window.c (Fset_window_configuration):
	* menu.c (Fx_popup_menu, Fx_popup_dialog):
	* keyboard.c (record_menu_key, read_char_x_menu_prompt):
	* fns.c (Fyes_or_no_p):
	* editfns.c (Fmessage_box, Fmessage_or_box):
	* alloc.c (make_save_ptr_ptr):
	* xdisp.c, w32menu.c, term.c, xterm.h, xterm.c: Remove HAVE_MENUS.

	* window.c (Fset_window_configuration): Move select_window later.

2013-11-28  Stefan Monnier  <monnier@iro.umontreal.ca>

	Refine redisplay optimizations to only redisplay *some* frames/windows
	rather than all of them.
	* xdisp.c (REDISPLAY_SOME): New constant.
	(redisplay_other_windows, wset_redisplay, fset_redisplay)
	(bset_redisplay, bset_update_mode_line): New functions.
	(message_dolog): Use bset_redisplay.
	(clear_garbaged_frames): Use fset_redisplay.
	(echo_area_display): Use wset_redisplay.
	(buffer_shared_and_changed): Remove.
	(prepare_menu_bars): Call Vpre_redisplay_function before updating
	frame titles.  Compute the actual set of windows redisplayed.
	Don't update frame titles and menu bars for frames that don't need to
	be redisplayed.
	(propagate_buffer_redisplay): New function.
	(AINC): New macro.
	(redisplay_internal): Use it.  Be more selective in the set of windows
	we redisplay.  Propagate windows_or_buffers_changed to
	update_mode_lines a bit later to simplify the code.
	(mark_window_display_accurate_1): Reset window and buffer's
	`redisplay' flag.
	(redisplay_window): Do nothing if neither the window nor the buffer nor
	the frame needs redisplay.
	* window.h (struct window): Add `redisplay' field.
	(wset_redisplay, fset_redisplay, bset_redisplay, bset_update_mode_line)
	(redisplay_other_windows, window_list): New declarations.
	* window.c (select_window, Fset_window_start): Use wset_redisplay.
	(window_list): Not static any more.
	(grow_mini_window, shrink_mini_window): Use fset_redisplay.
	* minibuf.c (read_minibuf_unwind): Don't redisplay everything.
	* insdel.c (prepare_to_modify_buffer_1): Use bset_redisplay.
	* frame.c (Fmake_frame_visible): Don't redisplay everything.
	* frame.h (struct frame): Add `redisplay' field.
	Move `external_menu_bar' bitfield next to other bit-fields.
	(SET_FRAME_GARBAGED): Use fset_redisplay.
	(SET_FRAME_VISIBLE): Don't garbage the frame;
	Use redisplay_other_windows.
	* buffer.h (struct buffer): Add `redisplay' field.
	* buffer.c (Fforce_mode_line_update): Pay attention to the `all' flag.
	(modify_overlay): Use bset_redisplay.
	* alloc.c (gc_sweep): Don't unmark strings while sweeping symbols.

2013-11-28  Eli Zaretskii  <eliz@gnu.org>

	Support w32 file notifications in batch mode.
	* w32proc.c (sys_select): Don't wait on interrupt_handle if it is
	invalid (which happens in batch mode).  If non-interactive, call
	handle_file_notifications to store file notification events in the
	input queue.  (Bug#15933)

	* w32notify.c (send_notifications): Handle FRAME_INITIAL frames as well.

	* w32inevt.c (handle_file_notifications): Now external, not static.

	* w32term.h (handle_file_notifications): Provide prototype.

	* emacs.c (main) [HAVE_W32NOTIFY]: When non-interactive, call
	init_crit, since init_display, which does that otherwise, is not
	called.

2013-11-27  Glenn Morris  <rgm@gnu.org>

	* Makefile.in ($(lispsource)/international/charprop.el): New.
	(emacs$(EXEEXT)): Depend on charprop.el.

2013-11-27  Eli Zaretskii  <eliz@gnu.org>

	* fileio.c (Finsert_file_contents): Invalidate buffer caches when
	deleting portions of the buffer under non-nil REPLACE argument.
	(Bug#15973)

	* w32notify.c (Fw32notify_add_watch): If the argument FILE is a
	directory, watch it and not its parent.
	(add_watch): Allow empty string in FILE.

2013-11-27  Martin Rudalics  <rudalics@gmx.at>

	* window.c (Fset_window_start, window_resize_apply)
	(window_scroll): Reset window_end_valid (Bug#15957).

2013-11-27  Glenn Morris  <rgm@gnu.org>

	* Makefile.in (leimdir): Now in lisp source directory.
	($(leimdir)/leim-list.el): Just use ../leim .
	* epaths.in (PATH_DUMPLOADSEARCH):
	* lread.c (load_path_default):
	* nsterm.m (ns_load_path): No more leim directory.

2013-11-26  Andreas Schwab  <schwab@suse.de>

	* .gdbinit (xgettype): Add cast.

2013-11-26  Glenn Morris  <rgm@gnu.org>

	Preload leim-list.el.
	* epaths.in (PATH_DUMPLOADSEARCH): Add leim/.
	* callproc.c (init_callproc): Don't assume PATH_DUMPLOADSEARCH
	is a single directory.

2013-11-25  Paul Eggert  <eggert@cs.ucla.edu>

	bool-vector-subsetp is now the normal direction (Bug#15912).
	* data.c (Fbool_vector_subsetp): Test whether the first argument
	is a subset of the second one, not the reverse.  Add doc string.

	Fix minor problems found by static checking.
	* lread.c (load_path_default): Now static.
	* textprop.c (text_property_stickiness): Be consistent about the
	test used when deciding whether to consider the previous character.
	This simplifies the code a bit.

2013-11-25  Stefan Monnier  <monnier@iro.umontreal.ca>

	* textprop.c (text_property_stickiness): Fix front-stickiness at BOB.

	* frame.c (Fhandle_focus_in, Fhandle_focus_out): Move to frame.el.
	(syms_of_frame): Don't defsubr them.

2013-11-25  Glenn Morris  <rgm@gnu.org>

	* lread.c (load_path_default): Change the sense of the argument.
	(init_lread): When EMACSLOADPATH is set, do not ignore changes
	from dump_path.  When it is not, avoid checking dump_path twice.

	* lread.c (init_lread): Fix 2013-11-23 goof that was checking
	uninstalled dump_path against installed Vload_path.  (Bug#15964)

2013-11-24  Stefan Monnier  <monnier@iro.umontreal.ca>

	Export get_pos_property to Elisp.
	* editfns.c (Fget_pos_property): Rename from get_pos_property.
	(syms_of_editfns): Export it to Elisp.

	* data.c (Fmake_variable_buffer_local): Mention `permanent-local'.

2013-11-23  Romain Francoise  <romain@orebokech.com>

	* fileio.c (init_fileio): Move `write_region_inhibit_fsync'
	initialization here ...
	(syms_of_fileio): ... from here.

2013-11-23  Stefan Monnier  <monnier@iro.umontreal.ca>

	* lread.c (init_lread): Fix int/Lisp_Object mixup.
	Please use --enable-check-lisp-object-type.

2013-11-23  Glenn Morris  <rgm@gnu.org>

	* process.c (get_process): Explicit error for dead buffers.

2013-11-23  Andreas Schwab  <schwab@linux-m68k.org>

	* process.c (get_process): Check that OBJ is a live buffer.  (Bug#15923)

2013-11-23  Glenn Morris  <rgm@gnu.org>

	Empty elements in EMACSLOADPATH stand for the default.  (Bug#12100)
	* lread.c (load_path_check): Take path to check as argument.
	(load_path_default): New, split from init_lread.
	(init_lread): Move calc of default load-path to load_path_default.
	Empty elements in EMACSLOADPATH now stand for the default.
	(load-path): Doc fix.
	* emacs.c (decode_env_path): Add option to treat empty elements
	as nil rather than ".".
	* callproc.c (init_callproc_1, init_callproc):
	* image.c (Vx_bitmap_file_path):
	* lisp.h (decode_env_path):
	* lread.c (Vsource_directory):
	Update for new argument spec of decode_env_path.

2013-11-22  Eli Zaretskii  <eliz@gnu.org>

	* bidi.c (bidi_find_paragraph_start): Limit the returned positions
	to BEGV_BYTE..ZV_BYTE range.  (Bug#15951)

2013-11-21  Paul Eggert  <eggert@cs.ucla.edu>

	Fix some dependency problems that cause unnecessary recompiles.
	Reported by RMS in
	<https://lists.gnu.org/r/emacs-devel/2013-11/msg00421.html>.
	* Makefile.in (OLDXMENU_TARGET, OLDXMENU, OLDXMENU_DEPS)
	(really-lwlib, really-oldXMenu, stamp-oldxmenu)
	(../src/$(OLDXMENU), $(OLDXMENU)): Remove.
	(temacs$(EXEEXT)): Depend on $(LIBXMENU), not stamp-oldxmenu.
	($(lwlibdir)/liblw.a, $(oldXMenudir)/libXMenu11.a, FORCE): New targets.
	(boostrap-clean): No need to remove stamp-oldxmenu.

	Fix recently introduced bool vector overrun.
	This was due to an optimization that went awry.
	Reported by Glenn Morris in
	<https://lists.gnu.org/r/emacs-devel/2013-11/msg00622.html>.
	* alloc.c (make_uninit_bool_vector): Don't allocate a dummy word
	for empty vectors, undoing the 2013-11-18 change.
	* data.c (bool_vector_binop_driver): Rely on this.
	Fix bug that occasionally overran the destination.
	* lisp.h (struct Lisp_Bool_vector): Document this.

2013-11-20  Jan Djärv  <jan.h.d@swipnet.se>

	* nsterm.m (init, run, stop:): Enable again.  stop calls super stop
	to handle dialogs.

	* nsterm.m (init, run, stop:): Comment out for now, does not work
	with dialogs.

2013-11-19  Paul Eggert  <eggert@cs.ucla.edu>

	* charset.c (syms_of_charset): Don't read past end of string.

2013-11-19  Glenn Morris  <rgm@gnu.org>

	* frame.c (Fhandle_focus_in, Fhandle_focus_out): Doc fixes.

2013-11-19  Brian Jenkins  <brian@brianjenkins.org>  (tiny change)

	Add hooks to run on gaining/losing focus.  (Bug#15029)
	* frame.c (Qfocus_in_hook, Qfocus_out_hook): New static lisp objects.
	(Fhandle_focus_in, Fhandle_focus_out): Run focus hooks.
	(syms_of_frame): Add focus-in-hook, focus-out-hook.

2013-11-18  Paul Eggert  <eggert@cs.ucla.edu>

	* data.c (bool_vector_binop_driver): Rename locals for sanity's sake.
	The old names predated the API change that put destination at end.

	Improve API of recently-added bool vector functions (Bug#15912).
	The old API had (bool-vector-count-matches A B)
	and (bool-vector-count-matches-at A B I), which gave the
	misleading impression that the two functions were variants, one
	with a location I.  The new API has (bool-vector-count-population A)
	and (bool-vector-count-consecutive A B I) to make the distinction
	clearer.  The first function no longer has a B argument, since the
	caller can easily determine the number of nils if the length and
	number of ts is known.
	* data.c (Fbool_vector_count_population): Rename from
	bool_vector_count_matches, and accept just 1 argument.
	(Fbool_vector_count_consecutive): Rename from
	Fbool_vector_count_matches_at.

	Always allocate at least one bits_word per bool vector.
	See Daniel Colascione in:
	https://lists.gnu.org/r/emacs-devel/2013-11/msg00518.html
	* alloc.c (make_uninit_bool_vector): Always allocate at least one word.
	* data.c (bool_vector_binop_driver): Rely on this.  Tune.
	* lisp.h (struct Lisp_Bool_vector): Document this.

2013-11-18  Eli Zaretskii  <eliz@gnu.org>

	* insdel.c (invalidate_buffer_caches): New function, consolidated
	from part of prepare_to_modify_buffer.
	(insert_from_gap, prepare_to_modify_buffer):
	* coding.c (code_convert_region, code_convert_string):
	Call invalidate_buffer_caches.  (Bug#15841)

	* lisp.h (invalidate_buffer_caches): Add prototype.

2013-11-17  Eli Zaretskii  <eliz@gnu.org>

	* w32term.c (x_update_window_end): Don't invalidate the entire
	mouse-highlight info, just signal frame_up_to_date_hook that mouse
	highlight needs to be redisplayed.  (Bug#15913)

2013-11-17  Paul Eggert  <eggert@cs.ucla.edu>

	* lisp.h (DEBUGGER_SEES_C_MACROS): Remove.

2013-11-16  Eli Zaretskii  <eliz@gnu.org>

	* doc.c (Fsubstitute_command_keys): Inhibit modification hooks
	while we are using Vprin1_to_string_buffer.

	* keymap.c (describe_map): Don't crash if PT is 1 both before and
	after inserting the description string.  (Bug#15907)

2013-11-15  Paul Eggert  <eggert@cs.ucla.edu>

	* data.c: Work around bogus GCC diagnostic about shift count.
	Reported by Eli Zaretskii in
	<https://lists.gnu.org/r/emacs-devel/2013-11/msg00489.html>.
	(pre_value): New function.
	(count_trailing_zero_bits): Use it.

2013-11-15  Eli Zaretskii  <eliz@gnu.org>

	* lisp.h (DEBUGGER_SEES_C_MACROS) [GCC < v3.5]: Pessimistically
	assume C macros are not supported even under -g3 in these old GCC
	versions.

2013-11-15  Leo Liu  <sdl.web@gmail.com>

	* minibuf.c (Ftry_completion, Fall_completions)
	(Ftest_completion): Use FUNCTIONP.  (Bug#15889)

2013-11-15  Paul Eggert  <eggert@cs.ucla.edu>

	* lisp.h (DEFINE_GDB_SYMBOL_BEGIN, DEFINE_GDB_SYMBOL_END):
	Define to empty if DEBUGGER_SEES_C_MACROS is defined.
	This avoids placing unnecessary constants into the Emacs code.

2013-11-14  Kazuhiro Ito  <kzhr@d1.dion.ne.jp>  (tiny change)

	* keyboard.c (make_ctrl_char) [HAVE_NTGUI]: Now externally visible
	for Cygwin w32 build.

	* xdisp.c (erase_phys_cursor) [HAVE_NTGUI]: Now externally visible
	for Cygwin w32 build.  (Bug#15892)

2013-11-14  Paul Eggert  <eggert@cs.ucla.edu>

	Simplify, port and tune bool vector implementation.
	* alloc.c (bool_vector_exact_payload_bytes)
	(bool_vector_payload_bytes): Remove.
	(bool_vector_fill): Return its argument.
	* alloc.c (bool_vector_fill):
	* lread.c (read1):
	* print.c (print_object):
	Simplify by using bool_vector_bytes.
	* alloc.c (make_uninit_bool_vector):
	New function, broken out from Fmake_bool_vector.
	(Fmake_bool_vector): Use it.  Use tail call.
	(make_uninit_bool_vector, vector_nbytes): Simplify size calculations.
	* data.c (BITS_PER_ULL): New constant.
	(ULLONG_MAX, count_one_bits_ll): Fall back on long counterparts
	if long long versions don't exist.
	(shift_right_ull): New function.
	(count_one_bits_word): New function, replacing popcount_bits_word
	macro.  Don't assume that bits_word is no wider than long long.
	(count_one_bits_word, count_trailing_zero_bits):
	Don't assume that bits_word is no wider than long long.
	* data.c (bool_vector_binop_driver, bool_vector_not):
	* fns.c (Fcopy_sequence):
	* lread.c (read1):
	Create an uninitialized destination, to avoid needless work.
	(internal_equal): Simplify.
	(Ffillarray): Prefer tail call.
	* data.c (bool_vector_binop_driver): Don't assume bit vectors always
	contain at least one word.
	(bits_word_to_host_endian): Prefer if to #if.  Don't assume
	chars are narrower than ints.
	* data.c (Fbool_vector_count_matches, Fbool_vector_count_matches_at):
	* fns.c (Fcopy_sequence):
	Simplify and tune.
	* lisp.h (bits_word, BITS_WORD_MAX, BITS_PER_BITS_WORD):
	Don't try to port to hosts where bits_word values have holes; the
	code wouldn't work there anyway.  Verify this assumption, though.
	(bool_vector_bytes): New function.
	(make_uninit_bool_vector): New decl.
	(bool_vector_fill): Now returns Lisp_Object.

	* xfns.c (xic_create_fontsetname):
	* xrdb.c (gethomedir): Prefer tail calls.

2013-11-12  Paul Eggert  <eggert@cs.ucla.edu>

	* xterm.c (syms_of_xterm): staticpro Qmodifier_value, Qalt, Qhyper,
	Qmeta, and Qsuper.  This is safer, and it's what w32fns.c does.

	* buffer.c (Fforce_mode_line_update): Don't fall off end of function
	that requires a return value.
	(Fset_buffer_modified_p): Take advantage of this change to do
	a tail call.

2013-11-11  Stefan Monnier  <monnier@iro.umontreal.ca>

	* buffer.c (Frestore_buffer_modified_p): Sync it with
	Fset_buffer_modified_p.
	(Fforce_mode_line_update): New function, moved from subr.el.
	(Fset_buffer_modified_p): Use them.
	(syms_of_buffer): Defsubr Fforce_mode_line_update.

2013-11-11  Paul Eggert  <eggert@cs.ucla.edu>

	* search.c (find_newline): Rewrite to prefer offsets to pointers.
	This avoids undefined behavior when subtracting pointers into
	different aways.  On my platform it also makes the code a tad
	smaller and presumably faster.

2013-11-11  Stefan Monnier  <monnier@iro.umontreal.ca>

	* keyboard.c (command_loop_1): Use region-extract-function.
	* insdel.c (Qregion_extract_function): Not static any more (can we
	stop pretending that these vars can benefit from being marked static?).

2013-11-09  Eli Zaretskii  <eliz@gnu.org>

	* search.c (find_newline): If buffer text is relocated during the
	"dumb loop", adjust C pointers into buffer text to follow suit.
	(Bug#15841)

2013-11-09  Łukasz Stelmach  <stlman@poczta.fm>  (tiny change)

	* gtkutil.c (xg_check_special_colors): Use rgb: instead of rgbi:
	for conversion (Bug#15837).

2013-11-09  Eli Zaretskii  <eliz@gnu.org>

	* fileio.c (Finsert_file_contents): Invalidate the newline cache
	for the entire range of inserted characters.  (Bug#15841)

2013-11-08  Jan Djärv  <jan.h.d@swipnet.se>

	* xfaces.c (lface_fully_specified_p): Let distant-foreground be
	unspecified.
	(realize_default_face): Remove assignment to distant-foreground if
	unspecified (Bug#15815).

2013-11-08  Eli Zaretskii  <eliz@gnu.org>

	* xdisp.c (message_dolog): Make sure the *Messages* buffer has its
	cache-long-scans disabled, since we don't want to call
	prepare_to_modify_buffer (in insert_1_both) for each message we
	display.

	* buffer.h (bset_cache_long_scans): New INLINE function, moved
	from buffer.c.  Improve commentary to the buffer field setter
	functions.

	* buffer.c (bset_cache_long_scans): Static function deleted.
	Improve commentary to the buffer field setter functions.
	(init_buffer_once): Default for cache-long-scans changed to t.
	(Bug#15797)

2013-11-08  Paul Eggert  <eggert@cs.ucla.edu>

	* gmalloc.c (special_realloc, calloc, mallochook): Use tail calls.

	* chartab.c (make_sub_char_table): Fix size typo (Bug#15825).
	This bug was introduced in my 2013-06-21 change, and caused
	struct Lisp_Sub_Char_Table objects to be given too many slots,
	which broke 'make -C admin/unidata'.

2013-11-07  Jan Djärv  <jan.h.d@swipnet.se>

	Import changes from mac-port 4.5.
	* macfont.m (mac_font_copy_default_descriptors_for_language)
	(mac_font_copy_default_name_for_charset_and_languages): Declare.
	(cf_charset_table): big-5-0 has uniquifier 0x4EDC.
	(macfont_language_default_font_names): New.
	(macfont_list): Rearrange language/charset code.
	(macfont_close): Don't check for macfont_info->cache.
	(mac_ctfont_create_preferred_family_for_attributes): New font
	selection code, call
	mac_font_copy_default_name_for_charset_and_languages.
	(mac_font_copy_default_descriptors_for_language)
	(mac_font_copy_default_name_for_charset_and_languages): New functions.

	* macfont.h (kCTVersionNumber10_9): Define if not defined.

2013-11-07  Paul Eggert  <eggert@cs.ucla.edu>

	Port to C11 aligned_alloc, and fix some integer overflows.
	* alloc.c (USE_ALIGNED_ALLOC): New symbol.
	(USE_POSIX_MEMALIGN): Remove.  All uses replaced with USE_ALIGNED_ALLOC,
	and use of posix_memalign replaced with aligned_alloc.
	(aligned_alloc): New function, defined or declared as needed.
	* conf_post.h (HAVE_POSIX_MEMALIGN) [DARWIN_OS]:
	Don't undef; configure.ac now does this.
	* gmalloc.c (aligned_alloc) [MSDOS]: New decl.
	(calloc, aligned_alloc): Check for integer overflow.
	(aligned_alloc): Rename from memalign.  All uses changed.
	(memalign): New function, an alias for aligned_alloc.

2013-11-06  Stefan Monnier  <monnier@iro.umontreal.ca>

	* xdisp.c (redisplay_internal): Fix typo in last change.

2013-11-06  Paul Eggert  <eggert@cs.ucla.edu>

	* regex.c: Fix --enable-gcc-warning glitch with GCC 4.5.2.

2013-11-06  Stefan Monnier  <monnier@iro.umontreal.ca>

	* xdisp.c (syms_of_xdisp): New vars redisplay--all-windows-cause and
	redisplay--mode-lines-cause.
	(redisplay_internal): Keep them uptodate.  Remove redundant check of
	buffer_shared_and_changed.
	* *.[chm]: Number every assignment to update_mode_lines so we
	can track why it is set.

2013-11-06  Eli Zaretskii  <eliz@gnu.org>

	* editfns.c (Fformat_time_string): Doc fix.  (Bug#15816)

2013-11-06  Stefan Monnier  <monnier@iro.umontreal.ca>

	* *.[chm]: Number every assignment to windows_or_buffers_changed so we
	can track why it is set.

2013-11-06  Paul Eggert  <eggert@cs.ucla.edu>

	Integer-related fixes for term.c etc.
	* dispextern.h (face_tty_specified_color): New function.
	* term.c (turn_on_face): Don't rely on undefined behavior when
	assigning an out-of-range value to 'long'.
	Simplify test for toggling highlight.
	(tty_capable_p): Omit last two (unused) args.  All callers changed.
	* term.c (tty_capable_p, tty_menu_display, tty_menu_add_selection)
	(read_menu_input, tty_menu_activate, tty_menu_show):
	* xfaces.c (x_supports_face_attributes_p)
	(tty_supports_face_attributes_p):
	Use bool for boolean.  All callers changed.
	(tty_supports_face_attributes_p): Omit defaults for color indices;
	no longer needed.  Simplify tail call.

2013-11-05  Stefan Monnier  <monnier@iro.umontreal.ca>

	* xdisp.c (prepare_menu_bars): Mark static.
	* lisp.h (prepare_menu_bars): Don't declare.
	* xselect.c (x_handle_selection_clear):
	* callproc.c (call_process): Remove redundant call to prepare_menu_bars.

2013-11-05  Paul Eggert  <eggert@cs.ucla.edu>

	* keyboard.c (Fcommand_error_default_function): Fix pointer signedness
	glitch.  Eliminate 'sz' prefix; Hungarian notation is not helpful here.

2013-11-05  Stefan Monnier  <monnier@iro.umontreal.ca>

	* keyboard.c (Fcommand_error_default_function): Rename from
	Fdefault_error_output.

2013-11-05  Jarek Czekalski  <jarekczek@poczta.onet.pl>  (tiny change)

	* keyboard.c (Fdefault_error_output): New function, extracted from
	cmd_error_internal.
	(syms_of_keyboard): Use it for Vcommand_error_function.

2013-11-05  Stefan Monnier  <monnier@iro.umontreal.ca>

	* eval.c (handlerlist_sentinel): New variable (bug#15802).
	(init_eval): Use it to ensure handlerlist is non-NULL.
	(unwind_to_catch): Make sure we never set handlerlist to NULL.
	(Fsignal): Adjust NULLness test of handlerlist.
	* lisp.h (PUSH_HANDLER): Assume handlerlist is non-NULL.

2013-11-05  Eli Zaretskii  <eliz@gnu.org>

	* callproc.c (call_process): Call prepare_to_modify_buffer before
	decoding text read from the sub-process, as the decoded stuff will
	be inserted into the buffer.  This will invalidate the various
	caches maintained for the buffer.  (Bug#15148)

2013-11-05  Xue Fuqiao  <xfq.free@gmail.com>

	* xdisp.c (syms_of_xdisp): Mention the active display table in doc
	string of glyphless-char-display.

2013-11-05  Jan Djärv  <jan.h.d@swipnet.se>

	* nsfns.m (ns_get_name_from_ioreg): New function.
	(ns_screen_name): Don't use deprecated CGDisplayIOServicePort on
	OSX >= 10.9.  Use ns_get_name_from_ioreg.

2013-11-05  Paul Eggert  <eggert@cs.ucla.edu>

	Simplify and port recent bool vector changes.
	* alloc.c (ROUNDUP): Move here from lisp.h, since it's now used
	only in this file.  Use a more-efficient implementation if the
	second argument is a power of 2.
	(ALIGN): Rewrite in terms of ROUNDUP.  Make it a function.
	Remove no-longer-necessary compile-time checks.
	(bool_vector_exact_payload_bytes): New function.
	(bool_vector_payload_bytes): Remove 2nd arg; callers that need
	exact payload changed to call the new function.  Do not assume
	that the arg or result fits in ptrdiff_t.
	(bool_vector_fill): New function.
	(Fmake_bool_vector): Use it.  Don't assume bit counts fit
	in ptrdiff_t.
	(vroundup_ct): Don't assume arg fits in size_t.
	* category.c (SET_CATEGORY_SET): Remove.  All callers now just
	invoke set_category_set.
	(set_category_set): 2nd arg is now EMACS_INT and 3rd is now bool.
	All callers changed.  Use bool_vector_set.
	* category.h (XCATEGORY_SET): Remove; no longer needed.
	(CATEGORY_MEMBER): Now a function.  Rewrite in terms of
	bool_vector_bitref.
	* data.c (Faref): Use bool_vector_ref.
	(Faset): Use bool_vector_set.
	(bits_word_to_host_endian): Don't assume you can shift by CHAR_BIT.
	(Fbool_vector_not, Fbool_vector_count_matches)
	(Fbool_vector_count_matches_at): Don't assume CHAR_BIT == 8.
	* fns.c (concat): Use bool_vector_ref.
	(Ffillarray): Use bool_vector_fill.
	(mapcar1): Use bool_vector_ref.
	(sxhash_bool_vector): Hash words, not bytes.
	* lisp.h (BOOL_VECTOR_BITS_PER_CHAR): Now a macro as well as
	a constant, since it's now used in #if.
	(bits_word, BITS_WORD_MAX, BITS_PER_BITS_WORD): Fall back on
	unsigned char on unusual architectures, so that we no longer
	assume that the number of bits per bits_word is a power of two or
	is a multiple of 8 or of CHAR_BIT.
	(Qt): Add forward decl.
	(struct Lisp_Bool_Vector): Don't assume EMACS_INT is aligned
	at least as strictly as bits_word.
	(bool_vector_data, bool_vector_uchar_data): New accessors.
	All data structure accesses changed to use them.
	(bool_vector_words, bool_vector_bitref, bool_vector_ref)
	(bool_vector_set): New functions.
	(bool_vector_fill): New decl.
	(ROUNDUP): Move to alloc.c as described above.

	Fix recent gnutls changes.
	* gnutls.c (Fgnutls_boot): Don't assume C99.
	* process.c (wait_reading_process_output): Fix typo in recent change.

2013-11-05  Teodor Zlatanov  <tzz@lifelogs.com>

	* process.c (wait_reading_process_output, read_process_output)
	(send_process): Check gnutls_state is not NULL.

	* gnutls.c (emacs_gnutls_handle_error): Adjust log level for EAGAIN.
	(Fgnutls_boot): Set process gnutls_p later, after initialization.

2013-11-04  Jan Djärv  <jan.h.d@swipnet.se>

	* nsterm.m (init, run, stop:): New methods in EmacsApp for
	OSX >= 10.9 to prevent memory leak of GCD dispatch source.

	* nsterm.h (EmacsApp): Add shouldKeepRunning and isFirst for
	OSX >= 10.9.

	* nsfns.m (Fx_create_frame): Fix memory leak.

	* macfont.m (CG_SET_FILL_COLOR_WITH_GC_FOREGROUND)
	(CG_SET_FILL_COLOR_WITH_GC_BACKGROUND)
	(CG_SET_STROKE_COLOR_WITH_GC_FOREGROUND): Fix memory leak.

2013-11-04  Eli Zaretskii  <eliz@gnu.org>

	* xdisp.c (message3_nolog, message_with_string): Encode the string
	before writing it to the terminal in a non-interactive session.

	* lread.c (openp): If both FILENAME and SUFFIX are unibyte, make
	sure we concatenate them into a unibyte string.

	* fileio.c (make_temp_name): Encode PREFIX, and decode the
	resulting temporary name before returning it to the caller.
	(Fexpand_file_name): If NAME is pure-ASCII and DEFAULT_DIRECTORY
	is a unibyte string, convert NAME to a unibyte string to ensure
	that the result is also a unibyte string.

	* emacs.c (init_cmdargs): Use build_unibyte_string to make sure we
	create unibyte strings from default paths and directory/file
	names.

	* coding.h (ENCODE_FILE): Do not attempt to encode a unibyte
	string.

	* callproc.c (init_callproc): Use build_unibyte_string to make
	sure we create unibyte strings from default paths and
	directory/file names.

	* buffer.c (init_buffer): Don't store default-directory of
	*scratch* in multibyte form.  The original problem which led to
	that is described in
	https://lists.gnu.org/r/emacs-pretest-bug/2004-11/msg00532.html,
	but it was solved long ago.  (Bug#15260)

2013-11-04  Paul Eggert  <eggert@cs.ucla.edu>

	Port to stricter C99 platforms.
	Especially, C99 prohibits nesting a struct X inside struct Y if
	struct X has a flexible array member.
	* alloc.c (struct sdata): New type.
	(sdata): Implement in terms of struct sdata.
	Remove u member; all uses replaced by next_vector, set_next_vector.
	(SDATA_SELECTOR, SDATA_DATA, SDATA_DATA_OFFSET): Adjust to sdata change.
	(SDATA_DATA_OFFSET): Now a constant, not a macro.
	(struct sblock): Rename first_data member to data, which is now
	a flexible array member.  All uses changed.
	(next_vector, set_next_vector, large_vector_vec): New functions.
	(vector_alignment): New constant.
	(roundup_size): Make it a multiple of ALIGNOF_STRUCT_LISP_VECTOR, too.
	(struct large-vector): Now merely a NEXT member, since the old approach
	ran afoul of stricter C99.  All uses changed to use
	large_vector_vec or large_vector_offset.
	(large_vector_offset): New constant.
	* dispnew.c: Include tparam.h, for tgetent.
	Do not include term.h; no longer needed.
	* gnutls.c (Fgnutls_boot): Don't continue after calling a _Noreturn.
	* lisp.h (ENUM_BF) [__SUNPRO_C && __STDC__]: Use unsigned int.
	(struct Lisp_Vector): Use a flexible array member for contents,
	instead of a union with a member that is an array of size 1.
	All uses changed.
	(ALIGNOF_STRUCT_LISP_VECTOR): New constant, to make up for the
	fact that the struct no longer contains a union.
	(struct Lisp_Misc_Any, struct Lisp_Marker, struct Lisp_Overlay)
	(struct Lisp_Save_Value, struct Lisp_Free):
	Use unsigned, not int, for spacers, to avoid c99 warning.
	(union specbinding): Use unsigned, not bool, for bitfield, as
	bool is not portable to pre-C99 hosts.

2013-11-04  Glenn Morris  <rgm@gnu.org>

	* emacs.c (usage_message): Mention that `-L :...' appends.

2013-11-02  Glenn Morris  <rgm@gnu.org>

	* Makefile.in (abs_builddir): Remove.
	(bootstrap_exe): Use relative filename.

	Use relative filenames in TAGS files.
	* Makefile.in (abs_srcdir): Remove it again.
	(.PHONY): Remove frc.
	(maintainer-clean): No more TAGS-LISP file.
	(TAGS): Pass relative file names to etags.
	(../lisp/TAGS): Rename from TAGS-LISP.  Work in ../lisp.

	* Makefile.in (abs_srcdir): New, set by configure.
	(lispdir): Remove.
	(maintainer-clean): Remove pointless echo.  That should be in the
	top-level Makefile, if anywhere.  Delete TAGS-LISP.
	(extraclean): No s/ and m/ directories for some time.
	(TAGS): Also depend on ctagsfiles3.
	Remove no-longer-defined S_FILE.
	Pass absolute filenames to etags once more.
	(TAGS-LISP): Replace lispdir with its expansion.
	(TAGS-LISP, $(lwlibdir)/TAGS): Correctly pass ETAGS to sub-makes.
	($(lwlibdir)/TAGS): Remove useless subshell, check cd return value.

2013-11-02  Jan Djärv  <jan.h.d@swipnet.se>

	* xfaces.c (check_lface_attrs, realize_default_face):
	Add LFACE_DISTANT_FOREGROUND_INDEX (Bug#15788).
	(realize_default_face): Set DISTANT_FOREGROUND to unspecified_fg.

2013-11-02  Paul Eggert  <eggert@cs.ucla.edu>

	* emacs.c (original_pwd): Remove global var by making it local.
	(init_cmdargs): New arg ORIGINAL_PWD; caller changed.

2013-11-01  Jan Djärv  <jan.h.d@swipnet.se>

	* xfaces.c: Declare color_distance.
	(QCdistant_foreground): New variable.
	(NEAR_SAME_COLOR_THRESHOLD): New define.
	(load_color2): New function.
	(load_color): Call load_color2.
	(load_face_colors): Call load_color2 and if distant-color is specified
	calculate distant and use distant-color if colors are near.
	(LFACE_DISTANT_FOREGROUND): New define.
	(merge_face_ref, Finternal_set_lisp_face_attribute)
	(Finternal_get_lisp_face_attribute)
	(x_supports_face_attributes_p): Handle distant-foreground similar to
	foreground.
	(syms_of_xfaces): DEFSYM QCdistant_foreground.

	* dispextern.h (lface_attribute_index):
	Add LFACE_DISTANT_FOREGROUND_INDEX.

2013-11-01  Claudio Bley  <claudio.bley@googlemail.com>

	* image.c (pbm_next_char): New function.
	See http://netpbm.sourceforge.net/doc/pbm.html for the details.
	(pbm_scan_number): Use it.
	(Qlibjpeg_version): New variable.
	(syms_of_image): DEFSYM and initialize it.

2013-10-31  Jan Djärv  <jan.h.d@swipnet.se>

	* emacs.c (main): Skip -psn args on OSX even if ! isatty (0).

2013-10-31  Glenn Morris  <rgm@gnu.org>

	* emacs.c (original_pwd): New char.
	(main): If using --chdir, store original_pwd.
	(init_cmdargs): When setting Vinvocation_directory based on a
	relative argv[0], use original_pwd if set.  (Bug#15768)

2013-10-29  Stefan Monnier  <monnier@iro.umontreal.ca>

	* keyboard.c (command_loop_1): If command is nil, call `undefined'.

2013-10-29  Paul Eggert  <eggert@cs.ucla.edu>

	* insdel.c: Fix minor problems found by static checking.
	(Qregion_extract_function): Now static.
	(prepare_to_modify_buffer_1): Remove unused locals.

2013-10-29  Stefan Monnier  <monnier@iro.umontreal.ca>

	* xdisp.c (prepare_menu_bars): Call Vpre_redisplay_function.
	(syms_of_xdisp): Declare pre-redisplay-function.
	(markpos_of_region): Remove function.
	(init_iterator, compute_stop_pos, handle_face_prop)
	(face_before_or_after_it_pos, reseat_to_string)
	(get_next_display_element, window_buffer_changed)
	(redisplay_internal, try_cursor_movement, redisplay_window)
	(try_window_reusing_current_matrix, try_window_id, display_line)
	(note_mode_line_or_margin_highlight, note_mouse_highlight)
	(display_string, mouse_face_from_buffer_pos): Remove region handling.
	* window.h (struct window): Remove field `region_showing'.
	* dispextern.h (struct it): Remove region_beg/end_charpos.
	(face_at_buffer_position, face_for_overlay_string)
	(face_at_string_position): Update prototypes.
	* xfaces.c (face_at_buffer_position, face_for_overlay_string)
	(face_at_string_position): Remove `region_beg' and `region_end' args.
	* fontset.c (Finternal_char_font):
	* font.c (font_at, font_range): Adjust calls accordingly.
	* insdel.c (Qregion_extract_function): New var.
	(syms_of_insdel): Initialize it.
	(prepare_to_modify_buffer_1): Use it.

2013-10-29  Dmitry Antipov  <dmantipov@yandex.ru>

	Prefer 'unsigned long' to 'long unsigned int' and 'unsigned long int'.
	* ftxfont.c (ftxfont_get_gcs):
	* gtkutil.c (xg_set_widget_bg, xg_set_background_color):
	* xfaces.c (x_free_colors, x_free_dpy_colors)
	(x_create_gc, unload_color):
	* xselect.c (x_property_data_to_lisp):
	* xsettings.c (parse_settings):
	* xterm.c (x_copy_color, x_alloc_lighter_color, x_setup_relief_color)
	(get_bits_and_offset): Adjust definition.
	* frame.c (XParseGeometry): Adjust locals.
	* lisp.h (toplevel): Adjust EMACS_UINT type definition.
	* regex.h (toplevel): Likewise for reg_syntax_t.

2013-10-29  Stefan Monnier  <monnier@iro.umontreal.ca>

	* eval.c (run_hook_with_args): Use FUNCTIONP.

2013-10-29  Dmitry Antipov  <dmantipov@yandex.ru>

	* xterm.h (struct x_output): For 'black_relief' and 'white_relief'
	fields, drop 'allocated_p' member and use -1 for uninitialized value.
	* w32term.h (struct w32_output): Similarly but do not use -1 because...
	* xfaces.c (unload_color) [HAVE_X_WINDOWS]: ...this function is a no-op
	on MS-Windows anyway.
	(free_face_colors): Define only if HAVE_X_WINDOWS and...
	(free_realized_face): ...adjust user.
	* xfns.c (Fx_create_frame, x_create_tip_frame): Initialize black and
	white relief pixels to -1.
	* xterm.c (x_setup_relief_color, x_free_frame_resources): Adjust users.
	* w32term.c (w32_setup_relief_color, x_free_frame_resources): Likewise.
	* dispextern.h (unload_color): Move prototype under HAVE_X_WINDOWS.

2013-10-28  Paul Eggert  <eggert@cs.ucla.edu>

	* dispextern.h, image.c (x_bitmap_height, x_bitmap_width): Now static.
	* xfaces.c (load_pixmap): Omit last two args, which are always NULL
	in practice now.  All callers changed.

2013-10-28  Dmitry Antipov  <dmantipov@yandex.ru>

	* dispextern.h (struct face): Use bitfields for 'underline_type'
	and 'box' members.  Remove set-but-unused members 'pixmap_w' and
	'pixmap_h'.  If not HAVE_WINDOW_SYSTEM, also remove dummy
	'stipple' member.  Move 'lface' member up to help...
	* xfaces.c (make_realized_face): ...this function to find and
	clear just the members that need clearing.
	(load_face_colors, realize_x_face):
	* xdisp.c (extend_face_to_end_of_line): Adjust user.

2013-10-27  Dmitry Antipov  <dmantipov@yandex.ru>

	* xftfont.c (struct xftfont_info): Remove set-but-unused
	'screen' member.
	(xftfont_open): Adjust user.
	(xftfont_get_colors): Remove useless prototype.

2013-10-26  Eli Zaretskii  <eliz@gnu.org>

	* emacs.c (Fdump_emacs): Encode FILENAME and SYMFILE arguments
	before passing them to 'unexec'.  (Bug#15260)

2013-10-26  Xue Fuqiao  <xfq.free@gmail.com>

	* fringe.c (set_fringe_bitmap_face): Add usage note from lispref.

2013-10-25  Eli Zaretskii  <eliz@gnu.org>

	* w32uniscribe.c (uniscribe_close): Adjust the argument list to
	the changed signature of the font driver's 'close' method.

	* w32font.h (w32font_close): Adjust the prototype to the change in
	function definition.

	* w32font.c (w32font_close): Reintroduce deleted declaration of i.

	* w32uniscribe.c (uniscribe_close): Adapt the call to
	w32font_close to its new prototype.

2013-10-25  Dmitry Antipov  <dmantipov@yandex.ru>

	Omit unused frame argument of font API's close function.
	* font.h (struct font): Drop frame argument.  Adjust comment.
	* font.c (font_clear_cache, font_close_object): Adjust users.
	* ftfont.c (ftfont_close):
	* ftxfont.c (ftxfont_close):
	* macfont.m (macfont_close):
	* nsfont.m (nsfont_close):
	* w32font.c (w32font_close):
	* xfont.c (xfont_close):
	* xftfont.c (xftfont_close): Adjust driver-specific close functions,
	tweak comments and make functions safe if called more than once for
	the same font object.

	Perform font-specific cleanup when font object is swept by GC.  See
	https://lists.gnu.org/r/emacs-devel/2013-10/msg00740.html.
	* alloc.c (cleanup_vector): New function.
	(sweep_vector): Call it for each reclaimed vector object.
	* font.h (struct font): Adjust comment.

2013-10-24  Glenn Morris  <rgm@gnu.org>

	* Makefile.in (abs_top_srcdir): New, set by configure.

2013-10-23  Dmitry Antipov  <dmantipov@yandex.ru>

	Adjust recent font-related changes to fix bug#15686.
	* alloc.c (mark_object) [HAVE_WINDOW_SYSTEM]: If marked frame
	is a live window system frame, mark its default font too.

2013-10-23  Glenn Morris  <rgm@gnu.org>

	* Makefile.in (RUN_TEMACS): Make relative (again).
	($(leimdir)/leim-list.el, .el.elc, $(lispsource)/loaddefs.el)
	(bootstrap-emacs$(EXEEXT)):
	Quote entities that might contain whitespace.

2013-10-23  Paul Eggert  <eggert@cs.ucla.edu>

	Port to Solaris 10 and its bundled GCC.  Reported by Timothy C. Burt.
	* floatfns.c (isfinite, isnan): Redefine unconditionally.

2013-10-21  Dmitry Antipov  <dmantipov@yandex.ru>

	Do not allow font caches to grow too large.
	* alloc.c (compact_font_cache_entry, compact_font_caches):
	New functions or stub if not HAVE_WINDOW_SYSTEM.
	(compact_undo_list): Factor out from Fgarbage_collect.
	Add comment.
	(mark_face_cache): Mark face font.  Move down to avoid
	extra prototypes.
	(mark_terminals): Do not mark font cache here.
	(Fgarbage_collect): Call compaction functions described
	above.  Adjust comment.

2013-10-20  Jan Djärv  <jan.h.d@swipnet.se>

	* emacs.c (main): On Cocoa, if GUI session and 0 is not a tty,
	chdir to HOME (bug#15607).

	* nsterm.m (Qcocoa, Qgnustep): New variables.
	(syms_of_nsterm): Defsym Qcocoa, Qgnustep.  Fprovide appropriate one.
	(ns_get_color): Make selection color work for GNUstep also.

2013-10-18  Eli Zaretskii  <eliz@gnu.org>

	* keyboard.c (make_lispy_event): Remove GPM-specific code that
	handles mouse clicks.  Instead, let GPM use the same code as all
	the other mice use.  See the discussion starting at
	https://lists.gnu.org/r/emacs-devel/2013-10/msg00521.html
	for the details of the problem with the menu bar this fixes.

2013-10-18  Dmitry Antipov  <dmantipov@yandex.ru>

	Remove port-specific display name lists to avoid extra
	complexity and data duplication with display info lists.
	* xterm.h (x_display_name_list): Remove declaration.
	* xterm.c (x_display_name_list): Remove.
	(x_term_init, x_delete_display, syms_of_xterm): Adjust users.
	* xfns.c (x_display_info_for_name, Fx_display_list):
	Likewise.  Use x_display_list where appropriate.
	* w32term.h (w32_display_name_list): Remove declaration.
	* w32term.c (w32_display_name_list): Remove.
	(w32_initialize_display_info, x_delete_display, syms_of_w32term):
	Adjust users.
	* w32fns.c (x_display_info_for_name, Fx_display_list):
	Likewise.  Use x_display_list where appropriate.
	* nsterm.h (ns_display_name_list): Remove declaration.
	* nsterm.m (ns_display_name_list): Remove.
	(ns_term_init, syms_of_nsterm): Adjust users.
	* nsfns.m (ns_display_info_for_name, Fx_display_list):
	Likewise.  Use x_display_list where appropriate.
	* termhooks.h (TERMINAL_FONT_CACHE): New macro.
	* alloc.c (toplevel) [HAVE_WINDOW_SYSTEM]: Include TERM_HEADER.
	(mark_terminals): Mark per-terminal font cache.

2013-10-17  Barry O'Reilly  <gundaetiapo@gmail.com>

	Don't run timers in input-pending-p.  Its new check-timers param
	provides the prior behavior.  (Bug#15045).
	* keyboard.c (Finput_pending_p): Accept optional check-timers param.

2013-10-17  Paul Eggert  <eggert@cs.ucla.edu>

	Make some functions static in non-Microsoft builds.
	On my platform (Fedora 19 x86-64), this shrinks the
	Emacs executable (text+data) by 0.25%.
	* dispextern.h (erase_phys_cursor) [!WINDOWSNT]:
	(load_color) [!MSDOS]:
	* gnutls.h (emacs_gnutls_transport_set_errno) [!WINDOWSNT]:
	* keyboard.h (make_ctrl_char) [!WINDOWSNT]:
	* lisp.h (check_existing):
	* process.h (conv_sockaddr_to_lisp, network_interface_list)
	(network_interface_info) [!WINDOWSNT]:
	* termhooks.h (encode_terminal_code) [!WINDOWSNT]:
	Remove extern decls.
	* fileio.c (check_existing):
	* keyboard.c (make_ctrl_char) [!WINDOWSNT]:
	* process.c (conv_sockaddr_to_lisp, network_interface_list)
	(network_interface_info) [!WINDOWSNT]:
	* term.c (encode_terminal_code) [!WINDOWSNT]:
	* xdisp.c (erase_phys_cursor) [!WINDOWSNT]:
	* xfaces.c (load_color) [!MSDOS]:
	Now static.
	* fileio.c (check_existing, check_executable, check_writable):
	* process.c (network_interface_list, network_interface_info):
	Move earlier, so that we don't need forward decls.
	* gnutls.c (fn_gnutls_transport_set_errno)
	(emacs_gnutls_transport_set_errno) [!WINDOWNT]:
	Remove; unused.
	* w32.c (init_environment): Use faccessat rather than
	check_existing, partly for consistency with the rest of the code
	in this file, partly so that check_existing can be static.

	Make VALMASK visible to GDB even if clang is used (Bug#15574).
	* emacs.c (MAIN_PROGRAM): New macro.
	* lisp.h (DEFINE_GDB_SYMBOL_BEGIN, DEFINE_GDB_SYMBOL_END): New macros.
	(ARRAY_MARK_FLAG, PSEUDOVECTOR_FLAG, VALMASK): Use them.

	bool vector int width fixes
	* data.c (bool_vector_spare_mask, Fbool_vector_count_matches)
	(Fbool_vector_count_matches_at):
	Use EMACS_INT, not ptrdiff_t, to record bit counts, as a bit count
	can exceed PTRDIFF_MAX, at least in theory.
	(Fbool_vector_count_matches_at):
	Use int, not ptrdiff_t, to record a value that can't exceed INT_MAX.

2013-10-16  Paul Eggert  <eggert@cs.ucla.edu>

	* process.h (conv_sockaddr_to_lisp): New decl, for newly-extern func.
	(struct sockaddr): Add forward decl, for platforms that lack it.

2013-10-16  Jan Djärv  <jan.h.d@swipnet.se>

	* nsselect.m (ns_string_from_pasteboard): Remove Fquit, just return
	Qnil (Bug#15628).

2013-10-16  Eli Zaretskii  <eliz@gnu.org>

	* w32.c (network_interface_get_info, network_interface_list)
	(network_interface_info): New functions.  (Bug#15610)
	(GetAdaptersInfo_Proc): New typedef.
	(get_adapters_info): New wrapper function.
	(globals_of_w32): Initialize g_b_init_get_adapters_info.

	* process.h (network_interface_list, network_interface_info):
	New prototypes.

	* process.c (conv_sockaddr_to_lisp): Now externally-visible.
	(Fnetwork_interface_list, Fnetwork_interface_info): Define for
	all systems.  Return non-nil for systems that HAVE_NET_IF_H and
	for WINDOWSNT.  Doc fix.
	(syms_of_process): Defsubr Snetwork_interface_list and
	Snetwork_interface_info unconditionally.

	* menu.c (have_boxes): Fix redundant simulation of radio buttons
	in NS GUI sessions.  (Bug#15629)

2013-10-16  Dmitry Antipov  <dmantipov@yandex.ru>

	* fns.c (Fstring_as_unibyte): Use xlispstrdup.

2013-10-15  Paul Eggert  <eggert@cs.ucla.edu>

	* print.c (print_object): Print " ..." when truncating bool vectors.

2013-10-15  Eli Zaretskii  <eliz@gnu.org>

	* w32inevt.c (do_mouse_event): Support mouse wheel and all the 5
	standard mouse buttons.

	* termhooks.h (struct input_event): Remove incorrect commentary.

2013-10-15  Paul Eggert  <eggert@cs.ucla.edu>

	Disallow bool vector operations on mixed-length operands.
	The old behavior left garbage in the result vector sometimes,
	and didn't seem to be useful.
	* data.c (Qwrong_length_argument): New static var.
	(wrong_length_argument): New function.
	(bool_vector_binop_driver): Check that args agree in length.

	* keyboard.c, keyboard.h (all_kboards): Now static.

2013-10-15  Xue Fuqiao  <xfq.free@gmail.com>

	* buffer.c (syms_of_buffer) <buffer-invisibility-spec>: Add usage
	note from the lispref.

2013-10-15  Dmitry Antipov  <dmantipov@yandex.ru>

	* nsterm.h (struct ns_display_info): Remove set-but-unused
	member image_cache (image caches are per-terminal anyway).
	(FRAME_X_IMAGE_CACHE): Remove.
	* nsterm.m (ns_initialize_display_info): Adjust user.

2013-10-14  Eli Zaretskii  <eliz@gnu.org>

	* w32proc.c: Include mingw_time.h.

	* w32.c: Include mingw_time.h.

	Implement scrolling of TTY menus when the screen is too short.

	* term.c (tty_menu_display): Accept an additional argument, the
	menu item from which to start displaying the menu.  Account for
	the value of Y when limiting the menu to the number of available
	screen lines.
	(mi_result): New enumeration.
	(read_menu_input): Return enumerated value.  When the y coordinate
	hits min_y or max_y, return scroll indication instead of wrapping
	around the menu.
	(tty_menu_activate): Handle the scrolling indications from
	read_menu_input.  Compute the first menu item to display and pass
	it to tty_menu_display.

2013-10-14  Dmitry Antipov  <dmantipov@yandex.ru>

	* termhooks.h (FRAME_MUST_WRITE_SPACES, FRAME_LINE_INS_DEL_OK)
	(FRAME_CHAR_INS_DEL_OK, FRAME_SCROLL_REGION_OK)
	(FRAME_SCROLL_REGION_COST, FRAME_MEMORY_BELOW_FRAME):
	Adjust to match the change described below.
	(struct terminal): Move must_write_spaces, line_ins_del_ok,
	char_ins_del_ok, scroll_region_ok, scroll_region_cost and
	memory_below_frame members to...
	* termchar.h (struct tty_display_info): ...here because they're
	relevant only on TTYs.  Prefer unsigned bitfield where appropriate.
	* term.c (init_tty):
	* nsterm.m (ns_create_terminal):
	* w32term.c (w32_create_terminal):
	* xterm.c (x_create_terminal): Adjust users.
	* dispnew.c (line_hash_code, line_draw_cost): Pass frame arg
	to filter out non-TTY frames.  Adjust comment.
	(scrolling): Adjust user.  Prefer eassert for debugging check.

2013-10-14  Dmitry Antipov  <dmantipov@yandex.ru>

	* xfaces.c (PT_PER_INCH): Remove unused macro.
	* termhooks.h (struct terminal): Remove set-but-unused
	member fast_clear_end_of_line.
	(FRAME_FAST_CLEAR_END_OF_LINE): Remove.
	* nsterm.m (ns_create_terminal):
	* term.c (init_tty):
	* w32term.c (w32_create_terminal):
	* xterm.c (x_create_terminal): Adjust users.

2013-10-14  Paul Eggert  <eggert@cs.ucla.edu>

	* lisp.h (bool_vector_size): New function.
	All uses of XBOOL_VECTOR (x)->size changed to bool_vector_size (x).
	* data.c (bool_vector_spare_mask, bool_vector_binop_driver)
	(Fbool_vector_not, Fbool_vector_count_matches_at):
	Remove uses of 'eassume' that should no longer be needed,
	because they are subsumed by the 'eassume' in bool_vector_size.

2013-10-12  Eli Zaretskii  <eliz@gnu.org>

	* image.c (GIFLIB_MAJOR, GIFLIB_MINOR, GIFLIB_RELEASE): Move back
	after inclusion of gif_lib.h, thus fixing compiler warnings caused
	by 2013-10-10T19:15:33Z!eggert@cs.ucla.edu.

2013-10-11  Eli Zaretskii  <eliz@gnu.org>

	* xdisp.c (deep_copy_glyph_row): Handle the case that FROM and TO
	have different dimensions.  (Bug#15575)

	* dispnew.c (fill_up_frame_row_with_spaces): Now has external
	visibility.

	* dispextern.h (fill_up_frame_row_with_spaces): Add prototype.

2013-10-11  Dmitry Antipov  <dmantipov@yandex.ru>

	* term.c (tty_menu_show): Never return with unbalanced
	specpdl.  Use eassert for debugging check.  Adjust style.

2013-10-11  Eli Zaretskii  <eliz@gnu.org>

	* term.c (read_menu_input): Make selection of menu items
	cyclical.  Suggested by Dmitry Antipov <dmantipov@yandex.ru>.
	(tty_menu_activate): Fix off-by-one error when computing max_y.

2013-10-11  Teodor Zlatanov  <tzz@lifelogs.com>

	* gnutls.c (gnutls_audit_log_function): Add function for GnuTLS
	audit logging (only used with GnuTLS 3.x) and enable it.

2013-10-11  Dmitry Antipov  <dmantipov@yandex.ru>

	* dispnew.c (redraw_frame): Remove useless #ifdef because
	FRAME_MSDOS_P is a compile-time zero everywhere except MS-DOS.
	Also, move TTY fflush to...
	* term.c (tty_update_end): ...this function.

2013-10-11  Eli Zaretskii  <eliz@gnu.org>

	* xdisp.c (display_tty_menu_item): Make sure we never write beyond
	the end of the frame's glyph matrix.  (Bug#15575)

	* term.c (tty_menu_display): Don't move cursor while overwriting
	frame's glyphs with menu items.  Limit the number of items
	displayed to what can be shown on the available screen lines,
	excluding the echo area.
	(tty_menu_activate): Limit the Y coordinate allowed by
	read_menu_input to the last screen line used for menu display.

2013-10-11  Paul Eggert  <eggert@cs.ucla.edu>

	* lisp.h (eassume): New macro.
	Also, include <verify.h>, for 'assume'.
	* alloc.c (bool_vector_payload_bytes, Fmake_bool_vector)
	(vroundup, vector_nbytes):
	* data.c (bool_vector_spare_mask, bool_vector_binop_driver)
	(Fbool_vector_not, Fbool_vector_count_matches)
	(Fbool_vector_count_matches_at):
	Use eassume, not eassert.
	* casetab.c (set_identity, shuffle):
	* composite.c (composition_gstring_put_cache):
	* dispnew.c (update_frame_1):
	* ftfont.c (ftfont_shape_by_flt):
	* image.c (gif_load):
	* intervals.c (offset_intervals):
	* macfont.m (macfont_shape):
	Remove calls to 'assume' that are no longer needed, because
	--enable-gcc-warnings no longer generates bogus warnings
	when these calls are removed.

2013-10-11  Dmitry Antipov  <dmantipov@yandex.ru>

	* xdisp.c (deep_copy_glyph_row): Remove unused locals.

2013-10-10  Stefan Monnier  <monnier@iro.umontreal.ca>

	* fileio.c (Fsubstitute_in_file_name): Use substitute-env-in-file-name.
	(Qsubstitute_env_in_file_name): New var.
	(syms_of_fileio): Define it.

2013-10-10  Eli Zaretskii  <eliz@gnu.org>

	* xdisp.c (deep_copy_glyph_row): Assert that the 'used' counts of
	FROM and TO are identical.  Copy only the glyphs of TEXT_AREA.
	(Bug#15575)

	* term.c (save_and_enable_current_matrix): Don't allocate and
	don't save margin areas.
	(restore_desired_matrix): Don't restore margin areas.
	(free_saved_screen): Don't free margin areas.

2013-10-10  Paul Eggert  <eggert@cs.ucla.edu>

	* image.c: Pacify --enable-gcc-warnings.
	(GIFLIB_MAJOR, GIFLIB_MINOR, GIFLIB_RELEASE, fn_GifErrorString):
	#define only if used.

2013-10-10  Eli Zaretskii  <eliz@gnu.org>

	* image.c (GIFLIB_MAJOR): Define to 4 if undefined.
	(GIFLIB_MINOR, GIFLIB_RELEASE): Define to zero if undefined.
	(GifErrorString) [GIFLIB_MAJOR >= 5]: Define a function pointer.
	(gif_load): For giflib v5.x and later, display the error message
	produced by giflib when its functions fail.
	(syms_of_image) <Qlibgif_version> [HAVE_NTGUI]: New DEFSYM.
	(Bug#15531)

2013-10-10  Dmitry Antipov  <dmantipov@yandex.ru>

	* keyboard.c (last_event_timestamp): Remove.  For X selection and
	GTK popup menus, it may be obtained from per-frame X display info.
	(kbd_buffer_store_event_hold, kbd_buffer_get_event)
	(process_special_events): Adjust users.
	* keyboard.h (last_event_timestamp): Remove declaration.
	* xmenu.c (xmenu_show, create_and_show_popup_menu): Lost last arg.
	Use FRAME_DISPLAY_INFO (f)->last_user_time for gtk_menu_popup.
	* menu.h (xmenu_show): Adjust prototype.
	* menu.c (Fx_popup_menu): Adjust user.
	* xselect.c (x_own_selection, x_get_foreign_selection)
	(Fx_disown_selection_internal): Use dpyinfo->last_user_time.

2013-10-10  Dmitry Antipov  <dmantipov@yandex.ru>

	* keyboard.c (init_kboard): Now static.  Add arg
	to denote window system.  Adjust comment.
	(init_keyboard): Adjust user.
	(allocate_kboard): New function.
	(syms_of_keyboard):
	* nsterm.m (ns_term_init):
	* term.c (init_tty):
	* w32term.c (w32_create_terminal):
	* xterm.c (x_term_init): Use it.
	* keyboard.h (init_kboard): Remove prototype.
	(allocate_kboard): Add prototype.

2013-10-10  Barry Fishman  <barry_fishman@acm.org>  (tiny change)

	* image.c (GIFLIB_MAJOR): Ensure it's defined.
	(DGifOpen, DGifOpenFileName): Handle giflib 5 syntax.  (Bug#15531)

2013-10-09  Paul Eggert  <eggert@cs.ucla.edu>

	* fns.c (sxhash_bool_vector): Fix buffer read overrun.

2013-10-09  Eli Zaretskii  <eliz@gnu.org>

	* term.c (tty_menu_activate): Flush the output stream after
	showing the cursor, and don't mark the frame garbaged at exit from
	the function.  Fixes redisplay glitches when moving from one menu
	to another.

2013-10-09  Jan Djärv  <jan.h.d@swipnet.se>

	* nsfns.m (Fns_convert_utf8_nfd_to_nfc): Check input for valid UTF-8
	or throw error (Bug#15570).

2013-10-09  Paul Eggert  <eggert@cs.ucla.edu>

	* intervals.c (temp_set_point_both): Move test into 'eassert',
	for speed.

	* lisp.h (eassert): Don't use 'assume'.
	Sometimes 'assume' wins in performance, and sometimes it loses,
	so it shouldn't be used all the time.  Perhaps we need two
	flavors of 'eassert', one for where 'assume' is far more likely
	to help or to hurt; but that can be done later.
	Reported by Dmitry Antipov in
	<https://lists.gnu.org/r/emacs-devel/2013-10/msg00276.html>.
	Also, don't include <verify.h>; no longer needed.

2013-10-09  Glenn Morris  <rgm@gnu.org>

	* eval.c (Fcond): Doc tweak.

2013-10-09  Eli Zaretskii  <eliz@gnu.org>

	* xfaces.c (x_free_gc) [HAVE_X_WINDOWS, HAVE_NTGUI]: Don't pass
	expressions with side effects to eassert.  (Bug#15565)

2013-10-09  Stefan Monnier  <monnier@iro.umontreal.ca>

	* fns.c (hashfn_user_defined): Allow hash functions to return any
	Lisp_Object.

2013-10-08  Paul Eggert  <eggert@cs.ucla.edu>

	Fix minor problems found by static checking.
	* dispnew.c (save_current_matrix): Omit unnecessary casts.
	* dispnew.c (update_frame_with_menu): Mark debug local as used.
	* keyboard.c, keyboard.h (Qmouse_movement): Now static.
	* keyboard.c (read_menu_command): Remove unused local.
	* lisp.h (read_menu_command): New decl.
	* menu.c, menu.h (menu_item_width): Arg is now unsigned char *, for
	benefit of STRING_CHAR_AND_LENGTH.  All uses changed.
	Return ptrdiff_t, not int.
	* term.c (tty_menu_struct): 'allocated' member is now ptrdiff_t,
	not int, for benefit of xpalloc.
	(tty_menu_create, tty_menu_make_room): Simplify by using xzalloc
	and xpalloc.
	(have_menus_p): Remove; unused.
	(tty_menu_add_pane, tty_menu_add_selection): Change signedness of
	local char * pointer to pacify STRING_CHAR_AND_LENGTH.
	(tty_menu_add_selection, tty_menu_locate, tty_meny_destroy):
	Now static.
	(save_and_enable_current_matrix): Omit unnecessary casts.
	(read_menu_input): Omit local extern decl (now in lisp.h).
	Don't access uninitialized storage if mouse_get_xy fails.
	(tty_menu_activate): Mark local as initialized, for lint.
	(tty_menu_activate, tty_meny_show): Remove unused locals.

2013-10-08  Eli Zaretskii  <eliz@gnu.org>

	Support menus on text-mode terminals.
	* xterm.h (xw_popup_dialog): Add prototype.

	* xmenu.c (Fx_popup_dialog): Function moved to menu.c.
	(xmenu_show): Block input here, instead in Fx_popup_menu.
	(xw_popup_dialog): New function, with X-specific bits of popup
	dialogs.

	* xdisp.c (deep_copy_glyph_row, display_tty_menu_item):
	New functions.

	* window.c (Fset_window_configuration): Use run-time tests of the
	frame type instead of compile-time conditionals, when menu-bar
	lines are considered.

	* w32term.h (w32con_hide_cursor, w32con_show_cursor)
	(w32_popup_dialog): New prototypes.

	* w32menu.c (Fx_popup_dialog): Function deleted.
	(w32_popup_dialog): New function, with w32 specific bits of popup
	dialogs.  Block input here.

	* w32inevt.c (w32_console_read_socket): Minor change to add
	debugging TTY events.

	* w32fns.c (show_hourglass): If returning early because the frame
	is not a GUI frame, unblock input.

	* w32console.c (w32con_hide_cursor, w32con_show_cursor, cursorX)
	(cursorY): New functions.

	* termhooks.h (cursorX, cursorY): Prototypes of functions on
	WINDOWSNT, macros that call curX and curY elsewhere.

	* termchar.h (struct tty_display_info) <showing_menu>: New flag.

	* term.c (tty_hide_cursor, tty_show_cursor) [WINDOWSNT]: Call w32
	specific function to hide and show cursor on a text-mode terminal.
	(tty_menu_struct, struct tty_menu_state): New structures.
	(tty_menu_create, tty_menu_make_room, tty_menu_search_pane)
	(tty_menu_calc_size, mouse_get_xy, tty_menu_display)
	(have_menus_p, tty_menu_add_pane, tty_menu_add_selection)
	(tty_menu_locate, save_and_enable_current_matrix)
	(restore_desired_matrix, screen_update, read_menu_input)
	(tty_menu_activate, tty_menu_destroy, tty_menu_help_callback)
	(tty_pop_down_menu, tty_menu_last_menubar_item)
	(tty_menu_new_item_coords, tty_menu_show): New functions.
	(syms_of_term): New DEFSYMs for tty-menu-* symbols.

	* nsterm.h (ns_popup_dialog): Adjust prototype.

	* nsmenu.m (ns_menu_show): Block and unblock input here, instead
	of in x-popup-menu.
	(ns_popup_dialog): Adapt order of arguments to the other
	*_menu_show implementations.
	(Fx_popup_dialog): Function deleted.

	* msdos.c (x_set_menu_bar_lines): Delete unused function.

	* menu.h (tty_menu_show, menu_item_width): Provide prototypes.

	* menu.c (have_boxes): New function.
	(single_keymap_panes): Use it instead of a compile-time
	conditional.
	(single_menu_item): Use run-time tests of the frame type instead
	of compile-time conditionals.
	(encode_menu_string): New function.
	(list_of_items, list_of_panes): Use it instead of ENCODE_STRING
	the macro, since different types of frame need different encoding
	of menu items.
	(digest_single_submenu): Use run-time tests of frame type instead
	of, or in addition to, compile-time conditionals.
	(menu_item_width, Fmenu_bar_menu_at_x_y): New functions.
	(Fx_popup_menu): Detect when the function is called from keyboard
	on a TTY.  Don't barf when invoked on a text-mode frame.
	Check frame type at run time, instead of compile-time conditionals for
	invoking terminal-specific menu-show functions.
	Call tty_menu_show on text-mode frames.
	(Fx_popup_dialog): Move here from xmenu.c.  Test frame types at
	run time to determine which alternative to invoke; support dialogs
	on TTYs.

	* keyboard.h <Qmouse_movement>: Declare.

	* keyboard.c <Qmouse_movement>: Now extern.
	<Qecho_keystrokes>: New static variable.
	(read_key_sequence): Accept an additional argument, a flag to
	prevent redisplay during reading of the key sequence.  All callers
	changed.
	(read_menu_command): New function.
	(read_char): When COMMANDFLAG is -2, do not redisplay and do not
	autosave.
	(toolkit_menubar_in_use): New function.
	(make_lispy_event): Use it instead of a compile-time test.

	* fns.c (Fyes_or_no_p) [HAVE_MENUS]: Don't condition on
	window-system being available.

	* editfns.c (Fmessage_box) [HAVE_MENUS]: Don't condition the call
	to x-popup-dialog on the frame type, they all now support popup
	dialogs.

	* dispnew.c (save_current_matrix): Save the margin areas.
	(restore_current_matrix): Restore margin areas.
	(update_frame_with_menu): New function.

	* dispextern.h (display_tty_menu_item, update_frame_with_menu):
	Add prototypes.

	* alloc.c (make_save_ptr): Now compiled unconditionally.

2013-10-08  Dmitry Antipov  <dmantipov@yandex.ru>

	* dispnew.c (set_window_update_flags): Add buffer arg.  Adjust comment.
	(redraw_frame, update_frame): Adjust users.
	* dispextern.h (set_window_update_flags): Adjust prototype.
	* xdisp.c (redisplay_internal): When updating all frames with zero
	windows_or_buffers_changed, assume that only the windows that shows
	current buffer should be really updated.

2013-10-08  Dmitry Antipov  <dmantipov@yandex.ru>

	Do not allocate huge temporary memory areas and objects while encoding
	for file I/O, thus reducing an enormous memory usage for large buffers.
	See https://lists.gnu.org/r/emacs-devel/2013-10/msg00180.html.
	* coding.h (struct coding_system): New member raw_destination.
	* coding.c (setup_coding_system): Initialize it to zero.
	(encode_coding_object): If raw_destination is set, do not create
	dst_object.  Add comment.
	* fileio.c (toplevel): New constant E_WRITE_MAX.
	(e_write): Do not encode more than E_WRITE_MAX characters per one loop
	iteration.  Use raw_destination if E_WRITE_MAX characters is encoded.

2013-10-08  Jan Djärv  <jan.h.d@swipnet.se>

	* nsterm.m (windowDidExitFullScreen:)
	(toggleFullScreen:): Change NS_IMPL_COCOA to HAVE_NATIVE_FS.

2013-10-08  Paul Eggert  <eggert@cs.ucla.edu>

	Fix race where emacs aborts when sent SIGTERM (Bug#15534).
	* keyboard.c (unblock_input_to): Don't process pending signals
	if a fatal error is in progress.

	* lisp.h (bits_word, BITS_WORD_MAX): New type and macro.
	All uses of 'size_t' and 'SIZE_MAX' changed to use them, when
	they're talking about words in Lisp bool vectors.
	(BITS_PER_BITS_WORD): Rename from BITS_PER_SIZE_T.  All uses changed.
	* data.c (popcount_bits_word): Rename from popcount_size_t.
	(bits_word_to_host_endian): Rename from size_t_to_host_endian.
	All uses changed.

2013-10-07  Paul Eggert  <eggert@cs.ucla.edu>

	Improve support for popcount and counting trailing zeros (Bug#15550).
	* data.c: Include <count-one-bits.h>, <count-trailing-zeros.h>.
	(USE_MSC_POPCOUNT, POPCOUNT_STATIC_INLINE)
	(NEED_GENERIC_POPCOUNT, popcount_size_t_generic)
	(popcount_size_t_msc, popcount_size_t_gcc):
	Remove; now done by Gnulib.
	(popcount_size_t): Now a macro that defers to Gnulib.
	(count_trailing_zero_bits): Return int, for consistency with
	Gnulib and because Emacs prefers signed to unsigned int.
	Don't assume that size_t is either unsigned int or unsigned long
	or unsigned long long.
	(size_t_to_host_endian): Do not assume that size_t is either
	exactly 32 or exactly 64 bits wide.
	* lisp.h (BITS_PER_SIZE_T): Define consistently with BITS_PER_LONG
	etc., so that it's now an enum constant, not a macro.
	No need to assume that it's either 32 or 64.

2013-10-07  Jan Djärv  <jan.h.d@swipnet.se>

	* nsterm.m (windowDidEnterFullScreen:): setPresentationOptions only
	on >= 10.7.

2013-10-07  Dmitry Antipov  <dmantipov@yandex.ru>

	* insdel.c (insert_from_gap): Prefer ptrdiff_t to int where needed.
	* xdisp.c (handle_fontified_prop): Likewise.  Use bool for boolean.

2013-10-07  Paul Eggert  <eggert@cs.ucla.edu>

	emacs_read and emacs_write now use void *, not char *.
	* alloc.c (valid_pointer_p) [!WINDOWSNT]: Remove now-unnecessary cast.
	* sysdep.c (emacs_read, emacs_write, emacs_write_sig):
	Buffer arg is now void *, not char *.  This matches plain
	'read' and 'write' better, and avoids a constraint violation
	on Solaris 9 with Oracle Studio.

2013-10-07  Dmitry Antipov  <dmantipov@yandex.ru>

	* alloc.c (Fmake_string): For ASCII char initializer, prefer
	memset to explicit loop.  Otherwise copy largest possible chunk
	from initialized to uninitialized part, thus allowing the longer
	memcpy runs and reducing the number of loop iterations.

2013-10-06  Jan Djärv  <jan.h.d@swipnet.se>

	* nsterm.m (ns_update_begin): If native fullscreen and no toolbar,
	hide toolbar (Bug#15388).
	(windowDidEnterFullScreen:): If presentation options are zero,
	set them here (Bug#15388).
	(ns_update_auto_hide_menu_bar): Remove runtime check.
	Don't auto hide dock unless menubar is also auto hidden.

2013-10-05  Xue Fuqiao  <xfq.free@gmail.com>

	* editfns.c (message): Mention batch mode in doc string.

2013-10-05  Jan Djärv  <jan.h.d@swipnet.se>

	* nsterm.m (check_native_fs): Remove erroneous comment.

2013-10-04  Dmitry Antipov  <dmantipov@yandex.ru>

	* xdisp.c (redisplay_internal): Simplify because scan_for_column now
	uses find_newline instead of scan_newline and so doesn't move point.

2013-10-04  Paul Eggert  <eggert@cs.ucla.edu>

	Use hardware support for byteswapping on glibc x86 etc.
	On Fedora 19 x86-64, the new bswap_64 needs 1 instruction,
	whereas the old swap64 needed 30.
	* fringe.c (init_fringe_bitmap) [WORDS_BIGENDIAN]:
	* sound.c (le2hl, le2hs, be2hl) [!WINDOWSNT]:
	Use byteswap.h's macros to swap bytes.
	* lisp.h (swap16, swap32, swap64): Remove.
	All uses replaced by bswap_16, bswap_32, bswap_64.

	* bytecode.c (exec_byte_code): Use some more volatile variables
	to work around local variables getting clobbered by longjmp.
	Port to pre-C99, which doesn't allow decls after stmts.

2013-10-03  Paul Eggert  <eggert@cs.ucla.edu>

	* lisp.h (eassert): Assume that COND is true when optimizing.
	In other words, take on the behavior of eassert_and_assume.
	This makes Emacs 0.2% smaller on my platform (Fedora 19, x86-64).
	(eassert_and_assume): Remove.  All uses replaced by eassert.

	* xdisp.c (Qglyphless_char): Now static.

	Adjust to merge from gnulib.
	* conf_post.h (__has_builtin, assume): Remove; gnulib now does these.
	* lisp.h: Include <verify.h>, for 'assume'.

	* eval.c (clobbered_eassert): New macro.
	(internal_catch, internal_condition_case)
	(internal_condition_case_1, internal_condition_case_2)
	(internal_condition_case_n): Use it instead of eassert
	when the argument contains locals clobbered by longjmp.
	Don't use clobbered locals outside of clobbered_eassert.
	(internal_lisp_condition_case): Use a volatile variable
	to work around a local variable's getting clobbered.

2013-10-03  Stefan Monnier  <monnier@iro.umontreal.ca>

	* lisp.h (struct handler): Merge struct handler and struct catchtag.
	(PUSH_HANDLER): New macro.
	(catchlist): Remove.
	(handlerlist): Always declare.

	* eval.c (catchlist): Remove (merge with handlerlist).
	(handlerlist, lisp_eval_depth): Not static any more.
	(internal_catch, internal_condition_case, internal_condition_case_1)
	(internal_condition_case_2, internal_condition_case_n):
	Use PUSH_HANDLER.
	(unwind_to_catch, Fthrow, Fsignal): Adjust to merged
	handlerlist/catchlist.
	(internal_lisp_condition_case): Use PUSH_HANDLER.  Adjust to new
	handlerlist which can only handle a single condition-case handler at
	a time.
	(find_handler_clause): Simplify since we only a single branch here
	any more.

	* bytecode.c (BYTE_CODES): Add Bpushcatch, Bpushconditioncase
	and Bpophandler.
	(bcall0): New function.
	(exec_byte_code): Add corresponding cases.  Improve error message when
	encountering an invalid byte-code.  Let Bunwind_protect accept
	a function (rather than a list of expressions) as argument.

	* alloc.c (Fgarbage_collect): Merge scans of handlerlist and catchlist,
	and make them unconditional now that they're heap-allocated.

2013-10-03  Stefan Monnier  <monnier@iro.umontreal.ca>

	* charset.c (Fdecode_char, Fencode_char): Remove description of
	`restriction' arg. now that it's hidden by advertised-calling-convention.

2013-10-02  Jan Djärv  <jan.h.d@swipnet.se>

	* macfont.m (mac_ctfont_create_preferred_family_for_attributes):
	Remove unused variable (from mac-port).
	(macfont_draw): Use s->ybase for correct y position.

2013-10-02  Dmitry Antipov  <dmantipov@yandex.ru>

	* frame.h (struct frame): Drop has_minibuffer member because...
	(FRAME_HAS_MINIBUF_P): ...this macro can be implemented without it.
	* frame.c (make_frame, make_minibuffer_frame): Adjust users.

2013-10-02  Dmitry Antipov  <dmantipov@yandex.ru>

	* window.h (struct window): Prefer enum text_cursor_kinds to int
	for phys_cursor_type member.  Move the latter, phys_cursor_width,
	phys_cursor_ascent and phys_cursor_height under HAVE_WINDOW_SYSTEM.
	* window.c (replace_window, make_window): Adjust users.

2013-10-02  Dmitry Antipov  <dmantipov@yandex.ru>

	* fringe.c (toplevel): Do not use HAVE_WINDOW_SYSTEM because
	this module is never compiled otherwise.

2013-10-01  Alp Aker  <alp.tekin.aker@gmail.com>

	* macfont.m (macfont_draw): Use CGRectMake rather than NSMakeRect
	(Bug#15500).

2013-09-29  Eli Zaretskii  <eliz@gnu.org>

	* xdisp.c (get_next_display_element): Don't call face_for_font in
	a build configured --without-x.  (Bug#15484)

2013-09-29  Jan Djärv  <jan.h.d@swipnet.se>

	* window.c (calc_absolute_offset): #elif should be #elif defined.

	* frame.c (delete_frame): Block/unblock input to overcome race
	condition (Bug#15475).

2013-09-29  Andreas Politz  <politza@hochschule-trier.de>

	* frame.c (delete_frame): Record selected frame only after
	calling Qdelete_frame_functions (Bug#15477).

2013-09-28  Jan Djärv  <jan.h.d@swipnet.se>

	* nsterm.m (ns_selection_color): Remove.
	(ns_get_color): Check for ns_selection_(fg|bg)_color using
	NSColor selectedText(Background)Color.  Only for COCOA.
	(ns_term_init): Remove assignment of ns_selection_color, logic
	moved to ns_get_color.

	* nsterm.h (NS_SELECTION_BG_COLOR_DEFAULT): Rename from
	NS_SELECTION_COLOR_DEFAULT.
	(NS_SELECTION_FG_COLOR_DEFAULT): New.

2013-09-28  Eli Zaretskii  <eliz@gnu.org>

	* xdisp.c (Fdump_tool_bar_row): Ifdef away the body if 'struct
	frame' does not have the tool_bar_window member.

2013-09-26  Barry O'Reilly  <gundaetiapo@gmail.com>

	Signal error when reading an empty byte-code object (Bug#15405)
	* lread.c (read1): Signal error.
	* alloc.c (make_byte_code): eassert header size.
	(sweep_vectors): Change an int to size_t.

2013-09-24  Paul Eggert  <eggert@cs.ucla.edu>

	* dispnew.c (clear_glyph_row, copy_row_except_pointers): Use enums
	instead of ints, as it's the usual style for offsetof constants.  See:
	https://lists.gnu.org/r/emacs-devel/2013-09/msg00478.html

	* data.c (POPCOUNT_STATIC_INLINE): New macro, as a hack for popcount.
	This is ugly, but it should fix the performance problem for older
	GCC versions in the short run.  I'll look into integrating the
	Gnulib module for popcount, as a better fix.
	See the thread starting in:
	https://lists.gnu.org/r/emacs-devel/2013-09/msg00474.html
	(popcount_size_t_generic) [NEED_GENERIC_POPCOUNT]:
	(popcount_size_t_msc) [USE_MSC_POPCOUNT]:
	(popcount_size_t_gcc) [USE_GCC_POPCOUNT]:
	(popcount_size_t): Use it.

2013-09-24  Daniel Colascione  <dancol@dancol.org>

	* process.c (Fnetwork_interface_info): Fix build break due to
	vector changes.

2013-09-24  Paul Eggert  <eggert@cs.ucla.edu>

	* dispnew.c (clear_glyph_row, copy_row_except_pointers):
	Prefer signed to unsigned integers where either will do.
	No need for 'const' on locals that do not escape.
	Omit easserts with unnecessary and unportable assumptions about
	alignment.  Avoid unnecessary casts to char *.

2013-09-24  Dmitry Antipov  <dmantipov@yandex.ru>

	Use union for the payload of struct Lisp_Vector.
	This helps to avoid a few glitches dictated by C's aliasing rules.
	* lisp.h (struct Lisp_Vector): Use union for next and
	contents member.  Adjust comment.  Change related users.
	* alloc.c (next_in_free_list, set_next_in_free_list): Remove.
	Related users changed.
	* buffer.c, bytecode.c, ccl.c, character.h, chartab.c, composite.c:
	* composite.h, disptab.h, fns.c, fontset.c, indent.c, keyboard.c:
	* lread.c, msdos.c, process.c, w32menu.c, window.c, xdisp.c:
	* xfaces.c, xfont.c, xmenu.c: Related users changed.

2013-09-24  Dmitry Antipov  <dmantipov@yandex.ru>

	Optimize glyph row clearing and copying routines.
	* dispextern.h (struct glyph_row): Change layout of struct
	glyph_row to help copy_row_except_pointers.  Adjust comment.
	* dispnew.c (null_row): Remove.
	(clear_glyph_row): Use offsetof and memset to find and clear
	just the members that need clearing.  Adjust comment.
	(copy_row_except_pointers): Likewise for copying.

2013-09-24  Paul Eggert  <eggert@cs.ucla.edu>

	Some minor cleanups of recently-added bool vector code.
	* conf_post.h (assume): Always return void.  Use lint version
	only if GCC and MSC versions don't apply.
	* conf_post.h (assume):
	* data.c (USC_MSC_POPCOUNT, count_trailing_zero_bits):
	Depend on _MSC_VER, not __MSC_VER, for consistency with
	the rest of Emacs.
	* data.c (bool_vector_spare_mask, popcount_size_t_generic)
	(popcount_size_t_msc, popcount_size_t_gcc, popcount_size_t)
	(bool_vector_binop_driver, count_trailing_zero_bits)
	(size_t_to_host_endian): Now static, not static inline;
	the latter isn't needed with modern compilers and doesn't
	work with older compilers anyway.

	* alloc.c (valgrind_p): Use bool for boolean.

2013-09-23  Dmitry Antipov  <dmantipov@yandex.ru>

	* xdisp.c (noninteractive_need_newline, message_log_need_newline)
	(overlay_arrow_seen, message_enable_multibyte, line_number_displayed)
	(display_last_displayed_message_p, message_buf_print)
	(message_cleared_p, help_echo_showing_p, hourglass_shown_p):
	Use bool for boolean.
	* dispextern.h (cancel_line, init_desired_glyphs):
	Remove ancient leftover.
	(help_echo_showing_p, hourglass_shown_p):
	* lisp.h (noninteractive_need_newline): Adjust declaration.

2013-09-23  Dmitry Antipov  <dmantipov@yandex.ru>

	* dispnew.c (frame_garbaged, selected_frame, last_nonminibuf_frame):
	Move to...
	* frame.c (frame_garbaged, selected_frame, last_nonminibuf_frame):
	...this file and convert the latter to static.  Adjust comment.
	(make_initial_frame):
	* window.c (init_window_once): Adjust user.
	* frame.h (last_nonminibuf_frame): Remove declaration.
	* lisp.h (selected_frame): Likewise.
	* msdos.c (the_only_display_info): Adjust comment.

2013-09-23  Eli Zaretskii  <eliz@gnu.org>

	* xdisp.c (mouse_face_from_string_pos): Fix off-by-one error in
	computing the end column of mouse-highlight that comes from
	display or overlay strings.  (Bug#15437)
	(note_mouse_highlight): Adapt calculation of last argument to
	mouse_face_from_string_pos to the above change.

	* conf_post.h (__has_builtin): Define to zero, if undefined, on
	all platforms, not just for clang.

2013-09-23  Jan Djärv  <jan.h.d@swipnet.se>

	* filelock.c (lock_file_1): Rearrange to remove compiler warning
	about excess arguments to snprintf.

	* conf_post.h(assume): Use __builtin_unreachable for clang.

2013-09-23  Juanma Barranquero  <lekktu@gmail.com>

	* w32console.c (initialize_w32_display): Remove unused variable hlinfo.
	* w32term.c (w32_scroll_bar_handle_click): Remove unused variable f.

2013-09-23  Daniel Colascione  <dancol@dancol.org>

	* alloc.c (USE_VALGRIND): New macro; on by default
	when ENABLE_CHECKING.
	(mark_maybe_object, mark_maybe_pointer)
	[USE_VALGRIND]: Mark conservatively-scanned regions valid for
	valgrind purposes.
	(valgrind_p) [USE_VALGRIND]: New variable.
	(init_alloc) [USE_VALGRIND]: Initialize valgrind_p.

2013-09-22  Jan Djärv  <jan.h.d@swipnet.se>

	* process.c (wait_reading_process_output): Change int pnamelen to
	socklen_t.

	* nsterm.m (setMarkedText:selectedRange:, deleteWorkingText):
	* nsmenu.m (addDisplayItemWithImage:idx:tag:helpText:enabled:):
	* nsfont.m (ns_get_covering_families, ns_findfonts): Cast NSLog
	argument to unsigned long to avoid warning.
	(nsfont_draw): Use 0.25 instead of  Fix2X (kATSItalicQDSkew).

	* conf_post.h (assume): Fix compiler error: x shall be cond.

2013-09-22  Daniel Colascione  <dancol@dancol.org>

	* xfns.c (x_get_monitor_attributes): Suppress unused variable
	warning when compiling without a window system.

2013-09-22  Daniel Colascione  <dancol@dancol.org>

	* data.c (Qbool_vector_p): New symbol.
	(bool_vector_spare_mask, popcount_size_t_generic)
	(popcount_size_t_msc, popcount_size_t_gcc)
	(popcount_size_t)
	(bool_vector_binop_driver)
	(count_trailing_zero_bits, size_t_to_host_endian)
	(Fbool_vector_exclusive_or)
	(Fbool_vector_union)
	(Fbool_vector_intersection, Fbool_vector_set_difference)
	(Fbool_vector_subsetp, Fbool_vector_not)
	(Fbool_vector_count_matches)
	(Fbool_vector_count_matches_at): New functions.
	(syms_of_data): Intern new symbol, functions.
	* alloc.c (bool_vector_payload_bytes): New function.
	(Fmake_bool_vector): Instead of calling Fmake_vector,
	which performs redundant initialization and argument checking,
	just call allocate_vector ourselves.  Make sure we clear any
	terminating padding to zero.
	(vector_nbytes, sweep_vectors): Use bool_vector_payload_bytes
	instead of open-coding the size calculation.
	(vroundup_ct): New macro.
	(vroundup): Assume argument >= 0; invoke vroundup_ct.
	* casetab.c (shuffle, set_identity): Change lint_assume to assume.
	* composite.c (composition_gstring_put_cache):
	Change lint_assume to assume.
	* conf_post.h (assume): New macro.
	(lint_assume): Remove.
	* dispnew.c (update_frame_1): Change lint_assume to assume.
	* ftfont.c (ftfont_shape_by_flt): Change lint_assume
	to assume.
	* image.c (gif_load): Change lint_assume to assume.
	* lisp.h (eassert_and_assume): New macro.
	(Qbool_vector_p): Declare.
	(CHECK_BOOL_VECTOR, ROUNDUP, BITS_PER_SIZE_T): New macros.
	(swap16, swap32, swap64): New inline functions.
	* macfont.m (macfont_shape): Change lint_assume to assume.
	* ralloc.c: Rename ROUNDUP to PAGE_ROUNDUP throughout.
	* xsettings.c (parse_settings): Use new swap16 and
	swap32 from lisp.h instead of file-specific macros.

2013-09-22  Eli Zaretskii  <eliz@gnu.org>

	* xdisp.c (try_window_id): Don't abort if cursor row could not be
	found (which can legitimately happen when the glyph row at the
	window start is disabled in the current_matrix.  (Bug#15365)

2013-09-22  Paul Eggert  <eggert@cs.ucla.edu>

	Fix syntax.h bug introduced by recent INLINE change.
	syntax.h defined an extern inline function SYNTAX_ENTRY that was
	conditionally compiled one way in some modules, and a different
	way in others.  This doesn't work with extern inline functions,
	which must have the same definition in all modules, because the
	defining code might be shared across modules, depending on the
	implementation.  Symptoms reported by Martin Rudalics in:
	https://lists.gnu.org/r/emacs-devel/2013-09/msg00414.html
	* regex.c, syntax.c (SYNTAX_ENTRY_VIA_PROPERTY): Remove.
	(SYNTAX, SYNTAX_ENTRY, SYNTAX_WITH_FLAGS): New macros,
	overriding the corresponding functions in syntax.h.
	* syntax.h (syntax_property_entry, syntax_property_with_flags)
	(syntax_property): New inline functions.
	(SYNTAX_ENTRY, SYNTAX_WITH_FLAGS, SYNTAX):
	Rewrite in terms of these new functions.

2013-09-21  Eli Zaretskii  <eliz@gnu.org>

	* dired.c (directory_files_internal): Use multibyte_chars_in_text,
	not chars_in_text, whose result depends on the multibyteness of
	the current buffer.  (Bug#15426)

2013-09-20  Paul Eggert  <eggert@cs.ucla.edu>

	Port recent change to hosts where pointers aren't 'long'.
	* xterm.c (x_send_scroll_bar_event, x_scroll_bar_to_input_event):
	Don't assume that pointers are the same width as 'long'.
	Add a compile-time check that a pointer fits into two X slots.

	A simpler, centralized INLINE.
	* conf_post.h (INLINE): Define only if not already defined.
	This allows us to use a single INLINE, defined by one file
	per executable.
	* emacs.c (INLINE): Define it.
	Also, include category.h, charset.h, composite.h, dispextern.h,
	syntax.h, systime.h, so that their INLINE definitions are expanded
	properly for Emacs.
	* blockinput.h, keyboard.c (BLOCKINPUT_INLINE):
	* buffer.h, buffer.c (BUFFER_INLINE):
	* category.h, category.c (CATEGORY_INLINE):
	* character.h, character.c (CHARACTER_INLINE):
	* charset.h, charset.c (CHARSET_INLINE):
	* composite.h, composite.c (COMPOSITE_INLINE):
	* dispextern.h, dispnew.c (DISPEXTERN_INLINE):
	* frame.h, frame.c (FRAME_INLINE):
	* intervals.h, intervals.c (INTERVALS_INLINE):
	* keyboard.h, keyboard.c (KEYBOARD_INLINE):
	* lisp.h, alloc.c (LISP_INLINE):
	* process.h, process.c (PROCESS_INLINE):
	* syntax.h, syntax.c (SYNTAX_INLINE):
	* systime.h, sysdep.c (SYSTIME_INLINE):
	* termhooks.h, terminal.c (TERMHOOKS_INLINE):
	* window.h, window.c (WINDOW_INLINE):
	Remove.  All uses replaced with INLINE.

2013-09-20  Dmitry Antipov  <dmantipov@yandex.ru>

	* xterm.c (handle_one_xevent): Revert part of 2013-09-17 change
	to avoid Bug#15398.

2013-09-19  Eli Zaretskii  <eliz@gnu.org>

	* w32reg.c (w32_get_string_resource): Make the first 2 arguments
	'const char *' to avoid compiler warnings due to similar change in
	the prototype of x_get_string_resource.

2013-09-19  Dmitry Antipov  <dmantipov@yandex.ru>

	* xterm.h (struct x_display_info): New members last_mouse_glyph_frame,
	last_mouse_scroll_bar, last_mouse_glyph and last_mouse_movement_time,
	going to replace static variables below.  Adjust comments.
	* xterm.c (last_mouse_glyph, last_mouse_glyph_frame)
	(last_mouse_scroll_bar, last_mouse_movement_time): Remove.
	(note_mouse_movement, XTmouse_position, x_scroll_bar_note_movement)
	(x_scroll_bar_report_motion, handle_one_xevent, syms_of_xterm):
	Related users changed.
	* w32term.h (struct w32_display_info): New members last_mouse_glyph_frame,
	last_mouse_scroll_bar, last_mouse_scroll_bar_pos, last_mouse_glyph and
	last_mouse_movement_time, going to replace static variables below.
	Adjust comments.
	* w32term.c (last_mouse_glyph_frame, last_mouse_scroll_bar)
	(last_mouse_scroll_bar_pos, last_mouse_glyph, last_mouse_movement_time):
	Remove.
	(note_mouse_movement, w32_mouse_position, w32_scroll_bar_handle_click)
	(x_scroll_bar_report_motion, syms_of_w32term): Related users changed.
	* nsterm.h (struct ns_display_info): New members last_mouse_glyph,
	last_mouse_movement_time and last_mouse_scroll_bar, going to replace
	static variables below.
	* nsterm.m (last_mouse_glyph, last_mouse_movement_time)
	(last_mouse_scroll_bar): Remove.
	(note_mouse_movement, ns_mouse_position, mouseMoved, mouseEntered)
	(mouseExited): Related users changed.

2013-09-19  Dmitry Antipov  <dmantipov@yandex.ru>

	Do not use external array to process X scroll bar messages.
	* xterm.c (scroll_bar_windows, scroll_bar_windows_size): Remove.
	(x_send_scroll_bar_event): Pack window pointer into two slots
	of XClientMessageEvent if we're 64-bit.  Adjust comment.
	(x_scroll_bar_to_input_event): Unpack accordingly.

2013-09-18  Dmitry Antipov  <dmantipov@yandex.ru>

	Ifdef away recent changes which aren't relevant to NS port.
	* dispextern.h (x_mouse_grabbed, x_redo_mouse_highlight)
	[!HAVE_NS]: Declare as such.
	* frame.c (x_mouse_grabbed, x_redo_mouse_highlight)
	[!HAVE_NS]: Define as such.

2013-09-18  Dmitry Antipov  <dmantipov@yandex.ru>

	* frame.c (x_redo_mouse_highlight): New function
	to factor out common code used in W32 and X ports.
	* dispextern.h (x_redo_mouse_highlight): Add prototype.
	* xterm.h (struct x_display_info):
	* w32term.h (struct w32_display_info):
	* nsterm.h (struct ns_display_info): New members
	last_mouse_motion_frame, last_mouse_motion_x and
	last_mouse_motion_y, going to replace static variables below.
	* xterm.c (last_mouse_motion_event, last_mouse_motion_frame)
	(redo_mouse_highlight): Remove.
	(note_mouse_movement, syms_of_xterm): Adjust user.
	(handle_one_xevent): Likewise.  Use x_redo_mouse_highlight.
	* w32term.c (last_mouse_motion_event, last_mouse_motion_frame)
	(redo_mouse_highlight): Remove.
	(note_mouse_movement, syms_of_w32term): Adjust user.
	(w32_read_socket): Likewise.  Use x_redo_mouse_highlight.
	* nsterm.m (last_mouse_motion_position, last_mouse_motion_frame):
	Remove.
	(note_mouse_movement, mouseMoved, syms_of_nsterm):
	* nsfns.m (compute_tip_xy): Adjust user.

2013-09-18  Dmitry Antipov  <dmantipov@yandex.ru>

	* frame.c (x_mouse_grabbed): New function.
	* dispextern.h (x_mouse_grabbed): Add prototype.
	(last_mouse_frame): Remove declaration.
	* xterm.h (struct x_display_info):
	* w32term.h (struct w32_display_info):
	* nsterm.h (struct ns_display_info): New member
	last_mouse_frame, going to replace...
	* xdisp.c (last_mouse_frame): ...global variable.
	(note_tool_bar_highlight):
	* w32term.c (w32_mouse_position, w32_read_socket):
	* xterm.c (XTmouse_position, handle_one_xevent):
	Use x_mouse_grabbed.
	* nsterm.m (ns_mouse_position, mouseDown): Adjust user.

2013-09-17  Dmitry Antipov  <dmantipov@yandex.ru>

	* w32term.c (w32_read_socket): Avoid temporary
	variables in a call to x_real_positions.
	* xterm.c (handle_one_xevent): Likewise.

2013-09-17  Dmitry Antipov  <dmantipov@yandex.ru>

	* frame.h (x_set_bitmap_icon) [!HAVE_NS]: New function.
	(x_icon_type): Remove prototype.
	(x_bitmap_icon) [!HAVE_NS]: Declare as such.
	* frame.c (x_icon_type): Remove.
	* w32term.c (x_make_frame_visible, x_iconify_frame):
	* xterm.c (x_make_frame_visible, x_iconify_frame):
	Use x_set_bitmap_icon to factor out common code.

2013-09-17  Dmitry Antipov  <dmantipov@yandex.ru>

	* dispextern.h (check_x_display_info, x_get_string_resource):
	Declare here just once and unify the latter.
	* frame.c (check_x_display_info, x_get_string_resource):
	* nsterm.h (check_x_display_info):
	* xrdb.c (x_get_string_resource):
	* xterm.h (check_x_display_info): Remove prototypes.
	* nsfns.m (x_get_string_resource): Likewise.  Adjust definition.
	* w32reg.c (x_get_string_resource): Likewise.
	(w32_get_rdb_resource): Adjust user.

2013-09-17  Dmitry Antipov  <dmantipov@yandex.ru>

	* xterm.h (struct x_display_info): New member
	x_pending_autoraise_frame, going to replace...
	* xterm.c (pending_autoraise_frame): ...static variable.
	(x_new_focus_frame, XTread_socket): Adjust users.
	* w32term.h (struct w32_display_info): New member
	w32_pending_autoraise_frame, going to replace...
	* w32term.c (pending_autoraise_frame): ...global variable.
	(x_new_focus_frame, w32_read_socket): Adjust users.

2013-09-17  Glenn Morris  <rgm@gnu.org>

	* xdisp.c (message_dolog): If we create *Messages*,
	switch it to messages-buffer-mode.

2013-09-17  Paul Eggert  <eggert@cs.ucla.edu>

	Don't overuse 'const' in types of locals.
	* bidi.c (bidi_count_bytes):
	* gtkutil.c, gtkutil.h (xg_event_is_for_menubar)
	(xg_event_is_for_scrollbar):
	* xselect.c (x_handle_property_notify)
	(x_handle_selection_notify, x_handle_dnd_message):
	* xsettings.c, xsettings.h (xft_settings_event):
	* xterm.c (x_handle_net_wm_state, handle_one_event)
	(x_menubar_window_to_frame, x_detect_focus_change)
	(construct_mouse_click, note_mouse_movement)
	(x_scroll_bar_to_input_event, x_scroll_bar_expose)
	(x_scroll_bar_handle_click, x_scroll_bar_note_movement)
	(handle_one_xevent, x_handle_net_wm_state):
	* xterm.h (x_handle_property_notify, x_handle_selection_notify)
	(x_handle_dnd_message):
	Avoid unnecessary 'const', typically the second 'const' in
	'const foo * const arg', a 'const' that does not affect the API
	and doesn't significantly help the human reader.

2013-09-17  Dmitry Antipov  <dmantipov@yandex.ru>

	* image.c (fn_g_type_init) [WINDOWSNT]: Define and load
	only if Glib < 2.36.0.
	(fn_g_type_init) [!WINDOWSNT]: Define only if Glib < 2.36.0.
	* xsettings.c (init_gconf, init_gsettings): Do not check
	for g_type_init.
	* xterm.c (handle_one_xevent): Do not call to x_clear_area
	if GTK >= 2.7.0.
	(toplevel) [USE_MOTIF]: Include xlwmenu.h to pacify GCC.

2013-09-16  Jan Djärv  <jan.h.d@swipnet.se>

	* xsettings.c (init_gconf, init_gsettings): Check for Glib 2.36.0
	before calling g_type_init.

	* font.c (syms_of_font): Move call to syms_of_(ns|mac)font ...

	* nsterm.m (syms_of_nsterm): ... to here.

2013-09-16  Dmitry Antipov  <dmantipov@yandex.ru>

	* xterm.c (toolkit_scroll_bar_interaction): Use bool for boolean.
	(ignore_next_mouse_click_timeout): Use Time as X does.
	(handle_one_xevent): Avoid cast and use unsigned comparison.

2013-09-16  Dmitry Antipov  <dmantipov@yandex.ru>

	Do not copy X event in handle_one_xevent except KeyPress case.
	Wnen XEvent is processed, it is unlikely to be changed except
	KeyPress case, so we can avoid copying and use const pointer to
	const data to make sure that an event is not changed elsewhere.
	* xterm.c (handle_one_xevent): Change 2nd arg to 'const XEvent *
	const' and do not create local copy except for the KeyPress event.
	Use casts to avoid a few glitches.  Adjust formatting.  Add comments.
	(SET_SAVED_BUTTON_EVENT): Remove and move the code to the only user.
	(x_handle_net_wm_state, x_menubar_window_to_frame)
	(x_detect_focus_change, construct_mouse_click, note_mouse_movement)
	(x_scroll_bar_to_input_event, x_scroll_bar_expose)
	(x_scroll_bar_handle_click, x_scroll_bar_note_movement):
	* gtkutil.c (xg_event_is_for_menubar, xg_event_is_for_scrollbar):
	* xselect.c (x_handle_property_notify, x_handle_selection_notify)
	(x_handle_dnd_message):
	* xsettings.c (xft_settings_event):
	Use 'const XEvent * const' where appropriate.
	* xterm.h, gtkutil.h, xsettings.h: Adjust related prototypes.

2013-09-16  Dmitry Antipov  <dmantipov@yandex.ru>

	Fix X event waiting to handle multiple frames.
	* frame.h (struct frame) [HAVE_X_WINDOWS]: New member wait_event_type.
	* xterm.c (pending_event_wait): Remove.  Adjust users.
	(x_detect_focus_change): Pass frame arg.
	(handle_one_xevent): Find related frame early and clear per-frame
	wait_event_type only if this is an event for the relevant frame.
	(x_wait_for_event): Use per-frame wait_event_type.

2013-09-15  Jan Djärv  <jan.h.d@swipnet.se>

	* nsfns.m (Fx_create_frame): Fix font driver registration for
	GNUstep.

	* font.c (syms_of_font): Check MAC_OS_X_VERSION_MAX_ALLOWED >= 1050
	for syms_of_macfont.

	* nsterm.m: Include macfont.h.
	(ns_tmp_flags, ns_tmp_font): Remove.
	(ns_compute_glyph_string_overhangs): Check for driver Qns.
	(ns_draw_glyph_string): Use local variables instead of ns_tmp_flags,
	ns_tmp_font.  Call ns_draw_text_decoration here instead of nsfont.m.
	(changeFont:): Fix code style.  Check for font driver type when
	getiing font.

	* nsterm.h (FONT_DESCENT, FONT_ASCENT): Define to (f)->ascent and
	(f)->descent.

	* nsfont.m (ns_tmp_flags, ns_tmp_font): Remove.
	(nsfont_open): Set font driver type.
	Set font->ascent and font->descent.  Figure out font instead of
	ns_tmp_font, and flags instead of ns_tmp_flags.
	Fix indentation.  Remove call to ns_draw_text_decoration,
	moved to nsterm.

	* nsfns.m: Include macfont.h.
	(Fx_create_frame): Register macfont driver, make a better default font.
	(Fns_popup_font_panel): Get font from macfont driver, if used.

	* macfont.m, macfont.h, macuvs.h: New files.

	* font.h: Declare syms_of_macfont.

	* font.c (syms_of_font): Call syms_of_macfont.

	* Makefile.in (NS_OBJ, SOME_MACHINE_OBJECTS): Add macfont.o.

2013-09-15  Dmitry Antipov  <dmantipov@yandex.ru>

	Drop VERTICAL_SCROLL_BAR_WIDTH_TRIM.  For X, it is zero since 1999,
	and it is always zero for others, so I assume that this is an ancient
	leftover which nobody will want to change any more.
	* xterm.h, w32term.h, nsterm.h (VERTICAL_SCROLL_BAR_WIDTH_TRIM): Remove.
	(VERTICAL_SCROLL_BAR_INSIDE_WIDTH):
	* frame.c (x_set_scroll_bar_width):
	* w32fns.c (w32_createscrollbar):
	* w32term.c (w32_set_vertical_scroll_bar):
	* xfns.c (x_set_scroll_bar_default_width):
	* xterm.c (XTflash, x_scroll_bar_create, XTset_vertical_scroll_bar)
	(x_scroll_bar_expose): Related users changed.

2013-09-15  Dmitry Antipov  <dmantipov@yandex.ru>

	* xterm.h (FRAME_X_SCREEN_NUMBER): Add comment.
	(BLACK_PIX_DEFAULT, WHITE_PIX_DEFAULT): Use FRAME_X_SCREEN_NUMBER.
	(SCROLL_BAR_X_WIDGET, SET_SCROLL_BAR_X_WIDGET) [USE_X_TOOLKIT]:
	Define as such.
	* frame.h (FRAME_SMALLEST_CHAR_WIDTH, FRAME_SMALLEST_FONT_HEIGHT):
	Define once here...
	* nsterm.h, w32term.h, xterm.h: ...and not here.
	* w32term.h (SCROLL_BAR_X_WIDGET, SET_SCROLL_BAR_X_WIDGET):
	Remove unused Xisms.
	* xterm.c, xfns.c (toplevel): Remove #ifdef HAVE_X_WINDOWS because
	these modules are never compiled otherwise.

2013-09-14  Eli Zaretskii  <eliz@gnu.org>

	* buffer.c (syms_of_buffer) <left-margin-width, right-margin-width>:
	Doc fix.  (Bug#15375)

2013-09-13  Dmitry Antipov  <dmantipov@yandex.ru>

	Unify Fx_focus_frame between all ports.
	* frame.h (x_focus_frame): New prototype.
	* xfns.c (Fx_focus_frame): Remove.
	(syms_of_xfns): Do not defsubr it.
	(x_focus_frame): X implementation.
	* nsfns.m (Fx_focus_frame): Remove.
	(syms_of_nsfns): Do not defsubr it.
	(x_focus_frame): NS implementation.
	* w32term.c (Fx_focus_frame): Remove.
	(x_focus_on_frame): Rename to...
	(x_focus_frame): W32 implementation.
	* w32term.h (x_focus_on_frame): Remove prototype.
	* w32fns.c (Fx_focus_frame): Remove.
	(syms_of_w32fns): Do not defsubr it.
	* frame.c (Fx_focus_frame): Define here.
	(syms_of_frame): Defsubr here.
	* gtkutil.c (xg_tool_bar_callback): Use x_focus_frame.

2013-09-13  Dmitry Antipov  <dmantipov@yandex.ru>

	Unify FRAME_window_system_DISPLAY_INFO macros between all ports.
	All of them are replaced with FRAME_DISPLAY_INFO, defined in
	each port to reference the port-specific window system data.
	* msdos.h (FRAME_X_DISPLAY_INFO): Remove.
	(FRAME_DISPLAY_INFO): Define.
	* w32term.h (FRAME_W32_DISPLAY_INFO, FRAME_X_DISPLAY_INFO): Remove.
	(FRAME_DISPLAY_INFO): Define.  Adjust users.
	* xterm.h (FRAME_X_DISPLAY_INFO): Remove.
	(FRAME_DISPLAY_INFO): Define.  Adjust users.
	* frame.h (FRAME_RES_X, FRAME_RES_Y): Unify.
	* font.c, frame.c, gtkutil.c, image.c, menu.c, msdos.c, nsfns.m:
	* nsfont.m, nsterm.m, w32fns.c, w32font.c, w32menu.c, w32term.c:
	* w32xfns.c, widget.c, xdisp.c, xfaces.c, xfns.c, xfont.c, xmenu.c:
	* xselect.c, xterm.c: All related users changed.

2013-09-13  Dmitry Antipov  <dmantipov@yandex.ru>

	* xterm.h (x_window_to_frame, x_any_window_to_frame)
	(x_menubar_window_to_frame): Remove prototypes.
	* xfns.c (x_window_to_frame, x_any_window_to_frame)
	(x_menubar_window_to_frame, x_top_window_to_frame):
	Move from here...
	* xterm.c (x_window_to_frame, x_any_window_to_frame)
	(x_menubar_window_to_frame, x_top_window_to_frame):
	...to here and convert all but the last to static.

2013-09-12  Eli Zaretskii  <eliz@gnu.org>

	* lisp.mk (lisp): Add w32-common-fns.elc.

2013-09-12  Xue Fuqiao  <xfq.free@gmail.com>

	* charset.c (char_charset): Document an exception for char-charset.

2013-09-12  Dmitry Antipov  <dmantipov@yandex.ru>

	* xterm.h (x_display_info): New field last_user_time...
	* xterm.c (toplevel): ...to replace static last_user_time.
	(handle_one_xevent, x_ewmh_activate_frame): Adjust users.

2013-09-12  Dmitry Antipov  <dmantipov@yandex.ru>

	* xterm.c (x_set_scroll_bar_thumb) [USE_LUCID && !HAVE_XAW3D]: Clip
	scroll bar values to prevent thumb from disappear and update comment.

2013-09-11  Glenn Morris  <rgm@gnu.org>

	* emacs.c (usage_message): Possessive apostrophe tweak.

2013-09-11  Dmitry Antipov  <dmantipov@yandex.ru>

	* nsterm.m (syms_of_nsterm): Use Qns.
	* w32fns.c (Fx_open_connection): Remove old '#if 0' code.
	* w32term.c (w32_create_terminal, syms_of_w32term): Use Qw32.
	* xfns.c (x_display_info_for_name, Fx_open_connection):
	Remove old '#if 0' code.
	(syms_of_xfns): Use Qx.
	* termhooks.h (fullscreen_hook): Remove the leftover.
	(struct terminal): Fix typo in comment.

2013-09-11  Dmitry Antipov  <dmantipov@yandex.ru>

	Cleaning up a few X scroll bar bits.
	* termhooks.h (enum scroll_bar_part): Add scroll_bar_nowhere member.
	* xterm.h (struct scroll_bar) [USE_TOOLKIT_SCROLL_BARS && USE_LUCID]:
	New member last_seen_part, going to replace...
	* xterm.c [USE_TOOLKIT_SCROLL_BARS]: ...global last_scroll_bar_part.
	(xt_action_hook) [USE_LUCID]: Adjust user.
	(xm_scroll_callback, xg_scroll_callback): Do not bloat with
	Lucid-specific scroll bar support.
	(xaw_jump_callback, xaw_scroll_callback): Prefer enum scroll_par_part
	to int and adjust to use last_seen_part member.
	(x_set_toolkit_scroll_bar_thumb) [USE_LUCID]: Adjust user.
	(x_scroll_bar_create) [USE_TOOLKIT_SCROLL_BARS && USE_LUCID]:
	Initialize last_seen_part.

2013-09-11  Stefan Monnier  <monnier@iro.umontreal.ca>

	* insdel.c (insert_from_buffer_1): Don't mark buffer as modified when
	insert-buffer-substring an empty string.

2013-09-11  Paul Eggert  <eggert@cs.ucla.edu>

	* xdisp.c (Ftool_bar_lines_needed): Declare as 'const' if ifdeffed out,
	avoiding a GCC warning.

2013-09-11  Dmitry Antipov  <dmantipov@yandex.ru>

	Ifdef away frame tool bar code when it is not really used.
	* frame.h (struct frame) [HAVE_WINDOW_SYSTEM && !USE_GTK && !HAVE_NS]:
	Move tool_bar_window, desired_tool_bar_string, current_tool_bar_string
	and minimize_tool_bar_window_p under the above.
	(fset_current_tool_bar_string, fset_desired_tool_bar_string)
	(fset_tool_bar_window): Likewise.
	* dispnew.c (clear_current_matrices, clear_desired_matrices)
	(adjust_frame_glyphs_for_window_redisplay, free_glyphs, update_frame)
	(change_frame_size_1):
	* window.c (window_from_coordinates, Frecenter): Adjust users.
	* window.h (WINDOW_TOOL_BAR_P): Define to zero when frame tool bar
	code is not really used.
	* xdisp.c (build_desired_tool_bar_string, display_tool_bar_line)
	(tool_bar_lines_needed, MAX_FRAME_TOOL_BAR_HEIGHT, tool_bar_item_info)
	(get_tool_bar_item, handle_tool_bar_click, note_tool_bar_highlight)
	[!USE_GTK && !HAVE_NS]: Define as such.
	(Ftool_bar_lines_needed, redisplay_tool_bar, show_mouse_face)
	(note_mouse_highlight, expose_frame):
	* xfns.c (x_set_tool_bar_lines):
	* xterm.c (handle_one_xevent): Adjust users.

2013-09-11  Paul Eggert  <eggert@cs.ucla.edu>

	Fix corruption with multiple emacsclient -t instances (Bug#15222).
	This bug was introduced by my 2013-08-26 patch, which incorrectly
	assumed that the terminfo implementation doesn't use termcap buffers.
	* term.c (init_tty) [TERMINFO]: Remove optimization, as
	these buffers apparently are used after all.
	* termchar.h (TERMCAP_BUFFER_SIZE) [TERMINFO]: Define here too.
	(struct tty_display_info): Define members termcap_term_buffer and
	termcap_strings_buffer even if TERMINFO.

2013-09-11  Dmitry Antipov  <dmantipov@yandex.ru>

	Fix last change.
	* data.c (Feqlsign, Flss, Fgtr, Fleq, Fgeq): Add convenient
	'usage' docstring entry to pacify make-docfile.

2013-09-11  Barry O'Reilly  <gundaetiapo@gmail.com>

	Change comparison functions =, <, >, <=, >= to take many arguments.
	* data.c: Change comparison functions' interface and implementation.
	* lisp.h: Make arithcompare available for efficient two arg
	comparisons.
	* bytecode.c: Use arithcompare.
	* fileio.c: Use new interface.

2013-09-11  Stefan Monnier  <monnier@iro.umontreal.ca>

	* keyboard.c (read_char): Don't break immediate_echo (bug#15332).

2013-09-10  Stefan Monnier  <monnier@iro.umontreal.ca>

	* eval.c (Feval): Document the new use of `lexical'.

2013-09-09  Dmitry Antipov  <dmantipov@yandex.ru>

	Review and drop old frame resize hack.
	* frame.h (struct frame): Remove force_flush_display_p.
	* dispnew.c (update_frame): Adjust user and don't call
	flush_frame here.  The comment has said that there was an issues
	with redisplaying fringes, but I don't see any differences with
	and without this hack.  Hopefully we can continue without it.
	* xdisp.c (clear_garbaged_frames): Adjust user and do not clear
	current frame matrices twice if resized_p is set.

2013-09-09  Dmitry Antipov  <dmantipov@yandex.ru>

	Do not populate pure Xism x_sync to other ports.
	* frame.h (x_sync): Move under HAVE_X_WINDOWS.
	* frame.c (other_visible_frames) [HAVE_X_WINDOWS]: Use as such.
	* nsfns.m, w32xfns.c (x_sync): Remove no-op.
	* w32term.h (x_sync): Remove prototype.

2013-09-09  Dmitry Antipov  <dmantipov@yandex.ru>

	Cleanup frame flushing.
	* dispextern.h (struct redisplay_interface):
	Drop flush_display_optional because flush_display is enough
	for X and flushing via RIF is just a no-op for others.
	* frame.h (flush_frame): New function.
	* dispnew.c (update_frame):
	* minibuf.c (read_minibuf):
	* xdisp.c (echo_area_display, redisplay_preserve_echo_area):
	Use it.
	* keyboard.c (detect_input_pending_run_timers): Do not flush
	all frames but selected one in redisplay_preserve_echo_area.
	* nsterm.m (ns_flush): Remove no-op.
	(ns_redisplay_interface): Adjust user.
	* w32term.h (x_flush): Remove no-op.
	(w32_redisplay_interface): Adjust user.
	* xterm.c (x_flush): Simplify because we do not flush all
	frames at once any more.  Adjust comment.
	(x_redisplay_interface): Adjust user.

2013-09-07  Paul Eggert  <eggert@cs.ucla.edu>

	Port --without-x --enable-gcc-warnings to Fedora 19.
	* gfilenotify.c (globals_of_gfilenotify):
	Call g_type_init only if using an older glib version that needs it.

2013-09-06  Dmitry Antipov  <dmantipov@yandex.ru>

	* lisp.h (last_glyphless_glyph_frame, last_glyphless_glyph_face_id)
	(last_glyphless_glyph_merged_face_id): Remove declarations.
	* dispextern.h (merge_glyphless_glyph_face): Add prototype.
	* xdisp.c (last_glyphless_glyph_frame, last_glyphless_glyph_face_id)
	(last_glyphless_glyph_merged_face_id): Now static.
	(merge_escape_glyph_face): New function, refactored from...
	(get_next_display_element): ...here.
	(merge_glyphless_glyph_face): New function, refactored from...
	(produce_glyphless_glyph): ...here...
	* term.c (produce_glyphless_glyph): ...and here.

2013-09-06  Stefan Monnier  <monnier@iro.umontreal.ca>

	* eval.c (eval_sub): Only call Ffunction if necessary.

2013-09-06  Dmitry Antipov  <dmantipov@yandex.ru>

	Attempt to make redisplay more selective when changing cursor type.
	* frame.h (struct frame): New bitfield cursor_type_changed.
	* xdisp.c (cursor_type_changed): Remove.
	(try_cursor_movement, redisplay_window, try_window_id)
	(set_frame_cursor_types, try_window_reusing_current_matrix):
	Adjust to use per-frame bitfield.
	(redisplay_internal): Look for cursor type change on each visible
	frame and consider all frames if cursor type has been changed on
	the frame other than selected.  If cursor type has been changed on
	selected frame only, do not use fast update.

2013-09-06  Dmitry Antipov  <dmantipov@yandex.ru>

	Attempt to make redisplay more selective when changing fonts.
	* frame.h (struct frame): New bitfield fonts_changed.
	* dispextern.h (fonts_changed_p, adjust_glyphs): Remove declaration.
	(adjust_frame_glyphs): Add prototype.
	* dispnew.c (fonts_changed_p): Remove.
	(adjust_glyphs): Remove because we do not
	adjust matrices on all frames at once any more.
	(adjust_frame_glyphs): Block and unblock input here.
	(adjust_glyph_matrix): Use fonts_changed.
	(change_frame_size_1): Use adjust_frame_glyphs.
	* font.c (font_open_entity): Use fonts_changed.
	* frame.c (set_menu_bar_lines, Fmake_terminal_frame):
	* w32fns.c (x_set_menu_bar_lines, x_set_tool_bar_lines, Fx_show_tip):
	* window.c (Fdelete_other_windows_internal, Fwindow_resize_apply)
	(Fsplit_window_internal, Fdelete_window_internal, grow_mini_window)
	(shrink_mini_window, Fresize_mini_window_internal)
	(window_scroll_pixel_based, Fset_window_configuration)
	(apply_window_adjustment, Fset_window_vscroll):
	* xfns.c (x_set_menu_bar_lines, x_set_tool_bar_lines, Fx_show_tip):
	Use adjust_frame_glyphs.
	* xdisp.c (redisplay_tool_bar, redisplay_window, try_window)
	(try_window_reusing_current_matrix, try_window_id, display_line)
	(IT_EXPAND_MATRIX_WIDTH): Use fonts_changed.
	(redisplay_internal): Consider fonts_changed and adjust frame
	matrices for each frame only if the frame is visible.  If font
	has been changed on some frame during full redisplay, retry
	only visible frames where the font has been actually changed.

2013-09-05  Dmitry Antipov  <dmantipov@yandex.ru>

	Cache current header and mode line height for each window.
	* window.h (struct window): New fields mode_line_height
	and header_line_height.
	* window.c (make_window): Initialize them.
	* dispextern.h (CURRENT_MODE_LINE_HEIGHT)
	(CURRENT_HEADER_LINE_HEIGHT): Use them.  Adjust comment.
	(current_mode_line_height, current_header_line_height):
	Remove declaration.
	* xdisp.c (current_mode_line_height, current_header_line_height):
	Remove.
	(pos_visible_p, init_xdisp): Adjust user.
	(redisplay_window): Invalidate mode_line_height and
	header_line_height if current and desired matrices do not agree.

2013-09-05  Dmitry Antipov  <dmantipov@yandex.ru>

	* fontset.c, window.c, xdisp.c (toplevel): Use TERM_HEADER.
	* xfaces.c (toplevel) [HAVE_X_WINDOWS]: Do not include xterm.h twice.

2013-09-05  Dmitry Antipov  <dmantipov@yandex.ru>

	Make --without-x compatible with --enable-gcc-warnings.
	* font.c (register_font_driver): Move check under HAVE_WINDOW_SYSTEM.
	* font.h (struct font_driver): Move draw, get_bitmap and free_bitmap
	members under HAVE_WINDOW_SYSTEM.
	* keyboard.c (make_lispy_focus_out): Likewise.
	(record_menu_key): Move under HAVE_MENUS.
	* xdisp.c (toplevel): Move hourglass_shown_p, hourglass_atimer and
	THIN_SPACE_WIDTH under HAVE_WINDOW_SYSTEM.
	(syms_of_xdisp): Adjust user.
	(window_box_edges): Define only if HAVE_WINDOW_SYSTEM.
	(start_hourglass, cancel_hourglass):
	* xfaces.c (toplevel): Likewise with PT_PER_INCH,
	clear_font_table_count, CLEAR_FONT_TABLE_COUNT
	and CLEAR_FONT_TABLE_NFONTS.
	(set_font_frame_param, clear_face_gcs, realize_non_ascii_face):
	Declare only if HAVE_WINDOW_SYSTEM.
	(lface_same_font_attributes_p, clear_face_gcs): Define only
	if HAVE_WINDOW_SYSTEM.

2013-09-05  Dmitry Antipov  <dmantipov@yandex.ru>

	* frame.c (check_minibuf_window): Update 'frame' with frame pointer.
	* xterm.c (x_scroll_bar_handle_click) [!USE_TOOLKIT_SCROLL_BARS]:
	Don't pass C integer to XINT (tiny fix for 2013-09-03 change).

2013-09-05  Stefan Monnier  <monnier@iro.umontreal.ca>

	* cmds.c (Fself_insert_command): Don't pass a non-integer to XINT.

2013-09-04  Paul Eggert  <eggert@cs.ucla.edu>

	* alloc.c (make_event_array): First arg is now ptrdiff_t, not int.
	This fixes a type error on hosts where ptrdiff_t is wider than int.

2013-09-04  Stefan Monnier  <monnier@iro.umontreal.ca>

	* keyboard.c (read_key_sequence_vs): New function.
	(Fread_key_sequence_vector, Fread_key_sequence): Use it to factor out
	common code.

	* callint.c (Fcall_interactively): Always return a vector for 'K'.

2013-09-04  Paul Eggert  <eggert@cs.ucla.edu>

	Makefile improvements.
	* Makefile.in (config.status): Don't use double-colon rules, as
	they are not portable according to POSIX.  Fix shell typo with `;
	I guess this rule has never been tested?
	(VCSWITNESS): New macro, to override any environment var.

2013-09-04  Dmitry Antipov  <dmantipov@yandex.ru>

	* xterm.h (struct x_display_info): Do not track X connection
	fd separately because it is always available from Display.
	* xterm.c (x_term_init, x_delete_terminal, x_delete_display):
	Adjust users.

2013-09-03  Dmitry Antipov  <dmantipov@yandex.ru>

	* buffer.c (drop_overlay):
	* fileio.c (restore_point_unwind): Prefer unchain_marker to
	Fset_marker (X, Qnil, ...) (which is the same but a bit slower).

2013-09-03  Dmitry Antipov  <dmantipov@yandex.ru>

	* buffer.c (Fmake_overlay, Fmove_overlay):
	* intervals.c (set_point_from_marker):
	* print.c (PRINTPREPARE): Prefer signal_error
	to plain error and report unsuitable marker too.

2013-09-03  Dmitry Antipov  <dmantipov@yandex.ru>

	* xterm.h (struct scroll_bar): Prefer int to Lisp_Object
	for 'dragging' member.
	(struct x_output): Remove set-but-unused leftovers
	'left_before_move' and 'top_before_move'.
	* gtkutil.c (xg_set_toolkit_scroll_bar_thumb):
	* xterm.c (xt_action_hook, xm_scroll_callback, xg_scroll_callback)
	(xg_end_scroll_callback, xaw_jump_callback, xaw_scroll_callback)
	(x_set_toolkit_scroll_bar_thumb, x_scroll_bar_create)
	(x_scroll_bar_set_handle, XTset_vertical_scroll_bar)
	(x_scroll_bar_handle_click, x_scroll_bar_note_movement)
	(x_scroll_bar_report_motion, x_set_offset): Related users changed.
	* xfns.c, image.c (XLIB_ILLEGAL_ACCESS): No longer needed.

2013-09-03  Jan Djärv  <jan.h.d@swipnet.se>

	* nsfont.m (INVALID_GLYPH): New define.
	(nsfont_encode_char): Use INVALID_GLYPH.
	(ns_uni_to_glyphs): Ditto, check for NSNullGlyph (Bug#15138).

2013-09-02  Dmitry Antipov  <dmantipov@yandex.ru>

	* xterm.c (x_last_mouse_movement_time): Revert last change.
	This code should use XDisplayMotionBufferSize to check display's
	motion history first, and there are few other issues as well.
	(x_scroll_bar_note_movement): Pass XMotionEvent rather than XEvent.
	(handle_one_xevent): Adjust user.

2013-09-02  Martin Rudalics  <rudalics@gmx.at>

	* dispnew.c (Flast_nonminibuf_frame): Move from here ...
	* frame.c (Flast_nonminibuf_frame): ... to here.
	(check_minibuf_window): Don't abort if no window was found
	(Bug#15247).

2013-09-02  Dmitry Antipov  <dmantipov@yandex.ru>

	Use XGetMotionEvents to ask the last mouse motion time from X server.
	* xterm.c (X_MOTION_HISTORY): Default to 1.
	(x_last_mouse_movement_time) [X_MOTION_HISTORY]: New function.
	(x_last_mouse_movement_time) [!X_MOTION_HISTORY]: Legacy version.
	(note_mouse_movement, x_scroll_bar_note_movement) [!X_MOTION_HISTORY]:
	Ifdef away legacy code.
	(XTmouse_position, x_scroll_bar_report_motion):
	Use x_last_mouse_movement_time.
	(handle_one_xevent): Use event.xunmap and not event.xmap when handling
	UnmapNotify event.

2013-09-02  Dmitry Antipov  <dmantipov@yandex.ru>

	* msdos.c (last_mouse_window): Move to...
	(dos_rawgetc): ...this function and adjust comment.
	* nsterm.m (last_window): Rename to last_mouse_window, move to...
	(mouseMoved): ...this function and adjust comment.
	* w32term.c (last_window): Likewise with...
	(w32_read_socket): ...this function.
	* xterm.c (last_window): Likewise with...
	(handle_one_xevent): ...this function.

2013-09-02  Dmitry Antipov  <dmantipov@yandex.ru>

	* window.h (Vmouse_window, Vmouse_event): Remove the leftovers.
	* xterm.c (toplevel): Drop obsolete comment and move compose_status...
	(handle_one_xevent): ...to here.
	(STORE_KEYSYM_FOR_DEBUG): Move under ENABLE_CHECKING and make no-op
	otherwise.

2013-09-02  Dmitry Antipov  <dmantipov@yandex.ru>

	* msdos.c (IT_set_terminal_window): Remove no-op.
	(initialize_msdos_display): Adjust terminal setup.
	* w32console.c (w32con_set_terminal_window): Remove no-op.
	(initialize_w32_display): Adjust terminal setup.
	* w32term.c (w32_set_terminal_window): Remove no-op.
	(w32_create_terminal): Adjust terminal setup.
	* xterm.c (XTset_terminal_window): Remove no-op.
	(x_create_terminal): Adjust terminal setup.

2013-09-01  Dmitry Antipov  <dmantipov@yandex.ru>

	* nsterm.m (ns_set_terminal_modes, ns_reset_terminal_modes):
	Remove no-ops.
	(ns_create_terminal): Adjust terminal setup.
	* w32term.c (w32_set_terminal_modes, w32_reset_terminal_modes):
	Remove no-ops.
	(w32_create_terminal): Adjust terminal setup.
	* xterm.c (XTset_terminal_modes, XTreset_terminal_modes):
	Remove no-ops.
	(x_create_terminal): Adjust terminal setup.

2013-09-01  Dmitry Antipov  <dmantipov@yandex.ru>

	* dispextern.h (SET_TEXT_POS_FROM_MARKER): Indent.
	(CLIP_TEXT_POS_FROM_MARKER): New macro.
	* dispnew.c (buffer_posn_from_coords):
	* window.c (Fwindow_end, displayed_window_lines):
	* xdisp.c (redisplay_mode_lines): Use it.

2013-09-01  Jan Djärv  <jan.h.d@swipnet.se>

	* fontset.c (face_for_char): Check char in the current face font first
	if HAVE_NS (Bug#15138).

2013-08-31  Martin Rudalics  <rudalics@gmx.at>

	* window.c (temp_output_buffer_show): Make sure window returned
	by display_buffer is live (Bug#15213).

2013-08-30  Dmitry Antipov  <dmantipov@yandex.ru>

	Minor cleanup to avoid forward declarations.
	* coding.h (struct ccl_spec): Remove forward declaration.
	* composite.h (toplevel): Include font.h.
	(struct composition_it, struct face, struct font_metrics):
	Remove forward declaration.
	* dispextern.h (struct image, struct atimer): Likewise.
	* emacsgtkfixed.h (struct frame): Likewise.
	* emacsgtkfixed.c (toplevel): Reorder headers and drop stdio.h.
	* font.h (struct font_driver, struct font, struct glyph_string)
	(struct face): Remove forward declaration.
	* fontset.h (struct face, struct font): Likewise.
	* frame.h (toplevel): Style cleanup.
	(enum output_method): Move to...
	* termhooks.h (enum output_method): ...here.
	(struct glyph, struct frame, struct ns_display_info)
	(struct x_display_info, struct w32_display_info):
	Remove forward declaration.
	* xterm.h (toplevel): Include termhooks.h.
	(struct font, struct window, struct glyph_matrix, struct frame)
	(struct input_event, struct face, struct image): Remove forward
	declaration.
	* gtkutil.h (struct _widget_value): Likewise.
	* keyboard.h (toplevel): Include termhooks.h.
	(struct input_event): Remove forward declaration.

2013-08-29  Dmitry Antipov  <dmantipov@yandex.ru>

	* intervals.c (set_point_from_marker): New function.
	* editfns.c (Fgoto_char):
	* process.c (Finternal_default_process_filter):
	* window.c (select_window_1): Use it.
	* buffer.h (set_point_from_marker): Add prototype.

2013-08-29  Eli Zaretskii  <eliz@gnu.org>

	* w32.c (term_winsock): Call release_listen_threads before calling
	WSACleanup.
	(_sys_wait_accept): Wait for accept event in a loop with a finite
	timeout, instead of waiting indefinitely.  Will hopefully avoid
	hanging during exit because WSACleanup deadlocks waiting for the
	event object to be released.  (Bug#14333)

	* w32proc.c (release_listen_threads): New function, signals all
	the reader threads that listen for connections to stop waiting.

	* w32.h (release_listen_threads): Add prototype.

2013-08-29  Dmitry Antipov  <dmantipov@yandex.ru>

	* alloc.c (Fmake_marker, build_marker): Zero need_adjustment
	field of new marker (for sanity and safety).
	* lisp.h (XSETMARKER): Remove unused macro (it doesn't work
	anyway because XMISCTYPE is a function and can't be an lvalue).

2013-08-29  Dmitry Antipov  <dmantipov@yandex.ru>

	* xterm.c (x_clear_area): Lost 7th arg because it is always False.
	(x_after_update_window_line, x_scroll_bar_create)
	(x_scroll_bar_set_handle, XTset_vertical_scroll_bar)
	(handle_one_xevent, x_clear_frame_area):
	* gtkutil.c (xg_clear_under_internal_border, xg_update_scrollbar_pos):
	* xfns.c (x_set_menu_bar_lines, x_set_tool_bar_lines): Adjust users.
	* xterm.h (x_clear_area): Adjust prototype.

2013-08-29  Dmitry Antipov  <dmantipov@yandex.ru>

	Hook scanning and indentation functions to find_newline.  This helps
	to avoid duplicated code and renders more respect to newline cache.
	* lisp.h (scan_newline): Prefer ptrdiff_t to EMACS_INT.
	* cmds.c (Fforward_line):
	* indent.c (scan_for_column, Fcurrent_indentation, indented_beyond_p):
	Use find_newline and avoid unnecessary point movements.
	* search.c (scan_newline): Implement on top of find_newline.

2013-08-28  Stefan Monnier  <monnier@iro.umontreal.ca>

	* eval.c (Ffuncall): Fix handling of ((lambda ..) ..) in lexically
	scoped code (bug#11258).

2013-08-28  Davor Cubranic  <cubranic@stat.ubc.ca>  (tiny change)

	* nsterm.m (last_window): New variable.
	(EV_TRAILER2): New macro.
	(EV_TRAILER): Call EV_TRAILER2.
	(mouseMoved:): Add support for mouse-autoselect-window
	on nextstep (Bug#6888).

2013-08-28  Andreas Schwab  <schwab@suse.de>

	* regex.c (CHAR_CHARSET, CHARSET_LEADING_CODE_BASE, CHAR_HEAD_P)
	(SINGLE_BYTE_CHAR_P, SAME_CHARSET_P, MAKE_CHAR, BYTE8_TO_CHAR):
	Remove unused macro definitions.
	(CHARSET_RANGE_TABLE_BITS, EXTEND_RANGE_TABLE)
	(SET_RANGE_TABLE_WORK_AREA_BIT, SET_RANGE_TABLE_WORK_AREA):
	Only define if emacs.

2013-08-28  Dmitry Antipov  <dmantipov@yandex.ru>

	Prefer enum glyph_row_area to int where appropriate.
	* dispextern.h (enum glyph_row_area): Add ANY_AREA member.
	Fix comment.
	(window_box, window_box_width, window_box_left, window_box_left_offset)
	(window_box_right, window_box_right_offset): Adjust prototypes.
	* xdisp.c (window_box, window_box_width, window_box_left)
	(window_box_left_offset, window_box_right, window_box_right_offset):
	Use enum glyph_row_area.  Adjust users and tweak comment where needed.
	(window_box_edges): Likewise.  Lost 2nd arg since it is always ANY_AREA.
	* nsterm.m (ns_clip_to_row):
	* w32term.c (w32_clip_to_row):
	* xterm.c (x_clip_to_row): Likewise.

2013-08-28  Dmitry Antipov  <dmantipov@yandex.ru>

	* buffer.c (Foverlays_at, Foverlays_in, Fnext_overlay_change)
	(Fprevious_overlay_change): Fast path for buffer with no overlays.

2013-08-28  Paul Eggert  <eggert@cs.ucla.edu>

	* Makefile.in (SHELL): Now @SHELL@, not /bin/sh,
	for portability to hosts where /bin/sh has problems.

2013-08-28  Dmitry Antipov  <dmantipov@yandex.ru>

	Redesign redisplay interface to drop global output_cursor.
	* dispextern.h (struct redisplay_interface): Remove cursor_to member.
	(toplevel): Remove declaration of output_cursor.
	(set_output_cursor, x_cursor_to): Remove prototype.
	* window.h (struct window): New member output_cursor.
	(output_cursor_to): New function to replace RIF member.
	* dispnew.c (redraw_overlapped_rows, update_marginal_area)
	(update_text_area, set_window_cursor_after_update): Use it.
	* xdisp.c (output_cursor, set_output_cursor, x_cursor_to): Remove.
	(x_write_glyphs, x_insert_glyphs, x_clear_end_of_line):
	* nsterm.m (ns_update_window_begin, ns_update_window_end):
	* w32term.c (x_update_window_begin, x_update_window_end):
	* xterm.c (x_update_window_begin, x_update_window_end):
	Adjust to use per-window output cursor.

2013-08-27  Paul Eggert  <eggert@cs.ucla.edu>

	Simplify SELECT_TYPE-related code.
	Like EMACS_TIME, this portability layer is no longer needed, since
	Emacs has been using fd_set as a portability layer for some time.
	* sysselect.h (FD_SETSIZE): Rename from MAXDESC.  All uses changed.
	(SELECT_TYPE): Remove.  All uses changed to fd_set.
	(fd_set) [!FD_SET]: New typedef.

	Simplify EMACS_TIME-related code.
	This portability layer is no longer needed, since Emacs has been
	using struct timespec as a portability layer for some time.
	* atimer.h, buffer.h, dispextern.h, xgselect.h:
	Include <time.h> rather than "systime.h"; that's all that's needed now.
	* dispnew.c: Include <timespec.h> rather than "systime.h";
	that's all that's needed now.
	* systime.h (EMACS_TIME): Remove.  All uses changed to struct timespec.
	(EMACS_TIME_RESOLUTION): Remove.  All uses changed to
	TIMESPEC_RESOLUTION.
	(LOG10_EMACS_TIME_RESOLUTION): Remove.  All uses changed to
	LOG10_TIMESPEC_RESOLUTION.
	(EMACS_SECS, emacs_secs_addr): Remove.  All uses changed to tv_sec.
	(EMACS_NSECS): Remove.  All uses changed to tv_nsec.
	(make_emacs_time): Remove.  All used changed to make_timespec.
	(invalid_timespec): Rename from invalid_emacs_time.  All uses changed.
	(current_timespec): Rename from current_emacs_time.  All uses changed.
	(add_emacs_time): Remove.  All uses changed to timespec_add.
	(sub_emacs_time): Remove.  All uses change dot timespec_sub.
	(EMACS_TIME_SIGN): Remove.  All uses changed to timespec_sign.
	(timespec_valid_p): Rename from EMACS_TIME_VALID_P.  All uses changed.
	(EMACS_TIME_FROM_DOUBLE): Remove.  All uses changed to dtotimespec.
	(EMACS_TIME_TO_DOUBLE): Remove.  All uses changed to timespectod.
	(current_timespec): Rename from current_emacs_time.  All uses changed.
	(EMACS_TIME_EQ, EMACS_TIME_LT, EMACS_TIME_LE): Remove.  All uses
	changed to timespec_cmp.
	* xgselect.c: Include <timespec.h>, since our .h files don't.

2013-08-27  Dmitry Antipov  <dmantipov@yandex.ru>

	* xterm.h (FONT_TYPE_FOR_UNIBYTE, FONT_TYPE_FOR_MULTIBYTE:)
	* nsterm.h (FONT_TYPE_FOR_UNIBYTE, FONT_TYPE_FOR_MULTIBYTE):
	Remove the leftovers.
	* gtkutil.c (toplevel): Do not declare Qxft but include
	font.h to do so.
	* image.c (toplevel): Do not declare Vlibrary_cache because
	it's already done in lisp.h.

2013-08-27  Dmitry Antipov  <dmantipov@yandex.ru>

	* lisp.h (Mouse_HLInfo): Move from here...
	* dispextern.h (Mouse_HLInfo): ...to here and offload lisp.h.
	(reset_mouse_highlight): New function.
	* msdos.c (dos_set_window_size, IT_update_begin)
	(internal_terminal_init):
	* nsterm.m (ns_update_window_end, x_free_frame_resources)
	(ns_initialize_display_info):
	* w32console.c (initialize_w32_display):
	* w32term.c (x_update_window_end, x_free_frame_resources)
	(w32_initialize_display_info):
	* xterm.c (x_update_window_end, x_free_frame_resources, x_term_init):
	* window.c (Fdelete_other_windows_internal):
	* xdisp.c (clear_mouse_face, cancel_mouse_face): Use it.
	* termchar.h (toplevel):
	* xterm.h (toplevel): Include dispextern.h.

2013-08-26  Paul Eggert  <eggert@cs.ucla.edu>

	Fix minor problems found by static checking.
	* image.c (XGetPixel, XPutPixel) [HAVE_NS]: Now static.
	(expect): Avoid nested-if warning.
	(x_build_heuristic_mask) [HAVE_NS]: Avoid unused-var warning.
	* nsmenu.m (fillWithWidgetValue:): Avoid type warning.
	* nsterm.h, nsterm.m (ns_select):
	* xgselect.c, xgselect.h (xg_select):
	Adjust signature to better match pselect's.
	* nsterm.m (ns_select):
	Don't set *TIMEOUT, since pselect doesn't.
	* regex.c (whitespace_regexp): Now const_re_char *, to avoid
	diagnostic about assigning const char * to it.
	* xfaces.c (x_display_info) [HAVE_NS]: Remove; unused.

2013-08-26  Stefan Monnier  <monnier@iro.umontreal.ca>

	* lread.c (substitute_object_recurse): Handle hash-tables as well
	(bug#15190).

2013-08-26  Paul Eggert  <eggert@cs.ucla.edu>

	Fix unlikely core dump in init_tty, and simplify terminfo case.
	* term.c (init_tty) [TERMINFO]: Fix check for buffer overrun.
	The old version incorrectly dumped core if malloc returned a
	buffer containing only non-NUL bytes.
	(init_tty): Do not allocate or free termcap buffers; the
	struct does that for us now.
	* termchar.h (TERMCAP_BUFFER_SIZE) [!TERMINFO]: New constant.
	(struct tty_display_info): Define members termcap_term_buffer and
	termcap_strings_buffer only if !TERMINFO, since terminfo doesn't
	use them.  Allocate them directly in struct rather than indirectly
	via a pointer, to simplify init_tty.

	* frame.c (check_minibuf_window): Initialize 'window' properly,
	so that Emacs reliably aborts later if 'window' is not initialized.

2013-08-26  Jan Djärv  <jan.h.d@swipnet.se>

	* gtkutil.c (xg_initialize): Set gtk-menu-bar-accel to "" instead
	of VoidSymbol (Bug#15154).

2013-08-26  Dmitry Antipov  <dmantipov@yandex.ru>

	* lisp.h (Mouse_HLInfo): Drop set-but-unused members
	mouse_face_beg_y and mouse_face_end_y.
	* xdisp.c (note_tool_bar_highlight, mouse_face_from_buffer_pos)
	(mouse_face_from_string_pos, note_mode_line_or_margin_highlight):
	Adjust users and update comment where appropriate.

2013-08-26  Martin Rudalics  <rudalics@gmx.at>

	* frame.c (check_minibuf_window): New function.
	(delete_frame, Fmake_frame_invisible, Ficonify_frame):
	Call check_minibuf_window (Bug#15183).

2013-08-26  Dmitry Antipov  <dmantipov@yandex.ru>

	* window.h (struct window): Replace last_cursor with last_cursor_vpos
	because this is the only last cursor data we need to keep and consult.
	* window.c (replace_window, set_window_buffer, Fsplit_window_internal):
	* xdisp.c (mark_window_display_accurate_1, try_cursor_movement):
	Adjust users.

2013-08-26  Dmitry Antipov  <dmantipov@yandex.ru>

	Fix recovering from possible decompression error.
	Since insert_from_gap doesn't always move point, we can't use PT as
	the position where the partially decompressed data ends, and
	should count how many bytes was produced so far.
	* decompress.c (struct decompress_unwind_data): Add nbytes member.
	(unwind_decompress): Really delete partially uncompressed data.
	(Fzlib_decompress_region): Take decompressed data size into account.

2013-08-26  Dmitry Antipov  <dmantipov@yandex.ru>

	* syntax.c (init_syntax_once): Adjust comment and do an early
	initialization of Qchar_table_extra_slots just once...
	* casetab.c (init_casetab_once):
	* category.c (init_category_once):
	* character.c (syms_of_character):
	* coding.c (syms_of_coding):
	* xdisp.c (syms_of_xdisp): ...and omit it here.

2013-08-24  Eli Zaretskii  <eliz@gnu.org>

	* xdisp.c (get_next_display_element): Don't apply to characters
	from a display vector the logic of setting it->end_of_box_run_p
	suitable for characters from a buffer.  (Bug#15175)

	* w32.c (fdutimens): Call 'utime', which is implemented on w32.c
	to handle directories, rather than '_utime' which doesn't.
	(Bug#15176)

2013-08-24  Jan Djärv  <jan.h.d@swipnet.se>

	* gtkutil.c (x_wm_set_size_hint): Don't set hints when maximized
	or fullscreen (Bug#14627).

2013-08-24  Paul Eggert  <eggert@cs.ucla.edu>

	System-dependent integer overflow fixes.
	* process.c (Fset_process_window_size): Signal an error if
	the window size is outside the range supported by the lower level.
	* sysdep.c (set_window_size): Return negative on error,
	nonnegative on success, rather than -1, 0, 1 on not in system,
	failure, success.  This is simpler.  Caller changed.
	(serial_configure): Remove unnecessary initialization of local.
	(procfs_get_total_memory) [GNU_LINUX]: Don't assume system memory
	size fits in unsigned long; this isn't true on some 32-bit hosts.
	Avoid buffer overrun if some future version of /proc/meminfo has a
	variable name longer than 20 bytes.
	(system_process_attributes) [__FreeBSD__]:
	Don't assume hw.availpages fits in 'int'.

2013-08-23  Paul Eggert  <eggert@cs.ucla.edu>

	Don't let very long directory names overrun the stack.
	Fix some related minor problems involving "//", vfork.
	* callproc.c (encode_current_directory): New function.
	(call_process): Don't append "/"; not needed.
	* fileio.c (file_name_as_directory_slop): New constant.
	(file_name_as_directory): Allow SRC to be longer than SRCLEN;
	this can save the caller having to alloca.
	(Ffile_name_as_directory, Fdirectory_file_name, Fexpand_file_name):
	Use SAFE_ALLOCA, not alloca.
	(directory_file_name, Fexpand_file_name): Leave leading "//"
	alone, since it can be special even on POSIX platforms.
	* callproc.c (call_process):
	* process.c (Fformat_network_address):
	* sysdep.c (sys_subshell):
	Use encode_current_directory rather than rolling our own.
	(create_process): No need to encode directory; caller does that now.
	* process.h (encode_current_directory): New decl.
	* sysdep.c (sys_subshell): Work even if vfork trashes saved_handlers.
	Rework to avoid 'goto xyzzy;'.

2013-08-23  Eli Zaretskii  <eliz@gnu.org>

	* xdisp.c (handle_face_prop): If the default face was remapped use
	the remapped face for strings from prefix properties.  (Bug#15155)

2013-08-23  Dmitry Antipov  <dmantipov@yandex.ru>

	Minor cleanup for redisplay interface and few related functions.
	* frame.h (enum text_cursor_kinds): Move from here...
	* dispextern.h (enum text_cursor_kinds): ...to here.
	(toplevel): Drop unnecessary declarations.
	(struct redisplay_interface): Use bool and enum text_cursor_kinds
	in update_window_end_hook and draw_window_cursor functions.
	(display_and_set_cursor, x_update_cursor): Adjust prototypes.
	* nsterm.m (ns_update_window_end, ns_draw_window_cursor):
	* w32term.c (x_update_window_end, w32_draw_window_cursor):
	* xterm.c (x_update_window_end, x_draw_window_cursor):
	* xdisp.c (display_and_set_cursor, update_window_cursor)
	(update_cursor_in_window_tree, x_update_cursor): Use bool and
	enum text_cursor_kinds where appropriate.

2013-08-23  Dmitry Antipov  <dmantipov@yandex.ru>

	Redesign redisplay interface to drop updated_row and updated_area.
	* dispextern.h (updated_row, updated_area): Remove declaration.
	(struct redisplay_interface): Pass glyph row and row area parameters
	to write_glyphs, insert_glyphs and clear_end_of_line functions.
	(x_write_glyphs, x_insert_glyphs, x_clear_end_of_line):
	Adjust prototypes.
	* dispnew.c (updated_row, updated_area): Remove.
	(redraw_overlapped_rows, update_window_line): Adjust user.
	(update_marginal_area, update_text_area): Likewise.  Pass updated row
	as a parameter.  Prefer enum glyph_row_area to int where appropriate.
	* xdisp.c (x_write_glyphs, x_insert_glyphs, x_clear_end_of_line):
	Adjust users.

2013-08-22  Paul Eggert  <eggert@cs.ucla.edu>

	* process.c (flush_pending_output): Remove stub.
	All uses removed.

2013-08-21  Paul Eggert  <eggert@cs.ucla.edu>

	* callproc.c: Fix race that killed background processes (Bug#15144).
	(call_process): New arg TEMPFILE_INDEX.  Callers changed.
	Record deleted process-id in critical section, not afterwards.
	Don't mistakenly kill process created by a call-process invocation
	that discards output and does not wait.

2013-08-21  Dmitry Antipov  <dmantipov@yandex.ru>

	Fix compilation with GC_MARK_STACK == GC_USE_GCPROS_AS_BEFORE
	and GC_MARK_STACK == GC_USE_GCPROS_CHECK_ZOMBIES.
	* alloc.c (toplevel): Remove unnecessary nested #if...#endif.
	(mark_maybe_object) [!GC_MARK_STACK]: Define to emacs_abort
	to shut up compiler in mark_object.
	(dump_zombies): Convert to global and add EXTERNALLY_VISIBLE.

2013-08-21  Paul Eggert  <eggert@cs.ucla.edu>

	* process.c (allocate_pty) [PTY_OPEN]: Set fd's FD_CLOEXEC flag.
	We can't portably rely on PTY_OPEN doing that, even if
	it calls posix_openpt with O_CLOEXEC.

2013-08-20  Kenichi Handa  <handa@gnu.org>

	* character.c (string_char): Improve commentary.

2013-08-20  Paul Eggert  <eggert@cs.ucla.edu>

	* image.c (SIGNATURE_DIGESTSIZE): Remove.
	(struct animation_cache): Make signature a flexible array member.
	All uses changed.  This is a tad slower but may insulate us better
	from future changes to ImageMagick.

2013-08-19  Paul Eggert  <eggert@cs.ucla.edu>

	* image.c: Shrink memory needed for animation cache.
	(SIGNATURE_DIGESTSIZE): New constant.
	(struct animation_cache): Make 'signature' a fixed size array of bytes.
	(imagemagick_create_cache): Copy the signature.  This saves
	several KB of memory that ImageMagick wastes per signature.
	Don't bother updating the update_time, as the caller does that now.
	(imagemagick_prune_animation_cache): Don't destroy the signature, as
	it's a fixed size struct member now.
	(imagemagick_get_animation_cache): Always destroy the signature,
	as it's now imagemagick_create_cache's responsibility to copy it.
	Avoid duplicate calls to strcmp and to imagemagick_create_cache,
	and use memcmp rather than strcmp.
	eassert that ImageMagick returns a signature of the specified length.

2013-08-19  Lars Magne Ingebrigtsen  <larsi@gnus.org>

	* image.c (imagemagick_get_animation_cache): Don't segfault on
	each invocation.
	(imagemagick_get_animation_cache): Revert to previous definition
	so that it actually works.  But keep the memory leak fix.
	(imagemagick_get_animation_cache): Fix memory leak.

2013-08-19  Paul Eggert  <eggert@cs.ucla.edu>

	* image.c: Fix animation cache signature memory leak.
	Fix some other minor performance problems while we're at it.
	(imagemagick_create_cache): Clear just the members that
	need clearing.  Don't set update_time, as caller does that now.
	(imagemagick_prune_animation_cache, imagemagick_get_animation_cache):
	Simplify by using pointer-to-pointer instead of a prev pointer.
	(imagemagick_prune_animation_cache): Use make_emacs_time rather
	than EMACS_TIME_FROM_DOUBLE, and DestroyString rather than free.
	(imagemagick_get_animation_cache): Don't xstrdup the image signature;
	it's already a copy.  Free the signature probe unless it's cached.

	* process.c (handle_child_signal): Fix crash; deleted pid (Bug#15106).
	This was introduced by my 2013-08-12 fix for Bug#15035.

2013-08-19  Dmitry Antipov  <dmantipov@yandex.ru>

	* image.c (imagemagick_create_cache, imagemagick_get_animation_cache)
	(imagemagick_prune_animation_cache): Now static.

2013-08-18  Lars Magne Ingebrigtsen  <larsi@gnus.org>

	* image.c (imagemagick_get_animation_cache): Don't segfault when
	pruning all entries.

2013-08-18  Ken Brown  <kbrown@cornell.edu>

	* sheap.c (STATIC_HEAP_SIZE): Adjust to current needs; use bigger
	static heap if ENABLE_CHECKING is defined.
	(max_bss_sbrk_ptr): New variable.
	(bss_sbrk): Use it.
	(report_sheap_usage): Report maximum static heap usage instead of
	ending static heap usage.

2013-08-17  Eli Zaretskii  <eliz@gnu.org>

	* decompress.c (Fzlib_available_p) [WINDOWSNT]: Update the value
	of zlib_initialized according to the results of calling
	init_zlib_functions.

2013-08-16  Lars Magne Ingebrigtsen  <larsi@gnus.org>

	* image.c: Implement an ImageMagick per-image cache.
	(imagemagick_get_animation_cache): Fix a double-free error.
	(imagemagick_load_image): Remove the ping_wand code, which only
	apparently saved time on invalid animated images, and slowed down
	everything else.  Optimize for the common case.

2013-08-16  Xue Fuqiao  <xfq.free@gmail.com>

	* buffer.c (syms_of_buffer) <buffer-undo-list>: Doc fix.

	* editfns.c (insert_before_markers): Mention overlay in the doc string.

	* marker.c (set_marker): Remove documentation of undefined behavior.

2013-08-15  Lars Magne Ingebrigtsen  <larsi@gnus.org>

	* image.c (imagemagick_compute_animated_image): Animate correctly
	when sub-images are smaller than the main image.
	(imagemagick_compute_animated_image): Setting the iterator row to
	zero is apparently not allowed.
	(imagemagick_compute_animated_image): Allow images that say they
	have sub-images that are bigger than the main image, but just crop
	them.

2013-08-15  Jan Djärv  <jan.h.d@swipnet.se>

	* nsmenu.m (menuWillOpen:): Fix preprocessor test (Bug#15001).

2013-08-15  Lars Magne Ingebrigtsen  <larsi@gnus.org>

	* image.c (imagemagick_compute_animated_image): Respect the GIF
	disposal methods.

2013-08-15  Ken Brown  <kbrown@cornell.edu>

	* emacs.c (main): Update comment about G_SLICE_ALWAYS_MALLOC.
	* gmalloc.c (memalign) [CYGWIN]: Revert last change; it's not
	needed.

2013-08-15  Paul Eggert  <eggert@cs.ucla.edu>

	Fix minor problems found by static checking.
	* frame.c (delete_frame):
	* xdisp.c (next_element_from_display_vector):
	Avoid uninitialized local.
	* image.c (imagemagick_compute_animated_image): Port to C89.
	Prefer usual GNU indentation style for loops.
	Be more careful about bizarrely large sizes, by using ptrdiff_t
	instead of int.

2013-08-15  Dmitry Antipov  <dmantipov@yandex.ru>

	Fix infinite frame selection loop (Bug#15025).
	* frame.c (delete_frame): Prefer fast ad-hoc loop to next_frame.

2013-08-15  Eli Zaretskii  <eliz@gnu.org>

	* xdisp.c (compute_window_start_on_continuation_line):
	When WORD_WRAP is in effect, use move_it_to instead of move_it_by_lines
	to make sure we end up setting the window start at the leftmost
	visible character of the display line.  This avoids funky
	horizontal shifting because the window start is not kept on the
	same position.  (Bug#15090)
	(next_element_from_display_vector): Support 'box' face attribute
	in the face definitions of a display vector.  (Bug#15099)

2013-08-15  Lars Magne Ingebrigtsen  <larsi@gnus.org>

	* image.c (imagemagick_compute_animated_image): Implement animated
	images (bug#14700).
	(imagemagick_compute_animated_image): Fix some compilation
	warnings.  Implement a very simple cache to make the animation
	usable at all, but it should be replaced with a per-image cache.

2013-08-15  Dmitry Antipov  <dmantipov@yandex.ru>

	* lisp.h (FOR_EACH_ALIST_VALUE): New macro
	to do `for' loops over alist values.
	* buffer.h (FOR_EACH_BUFFER):
	* process.c (FOR_EACH_PROCESS): Use it.
	(handle_child_signal, status_notify, Fget_buffer_process)
	(kill_buffer_processes): Use FOR_EACH_PROCESS.

2013-08-15  Dmitry Antipov  <dmantipov@yandex.ru>

	* term.c (get_named_tty, create_tty_output, tty_free_frame_resources)
	(tty_free_frame_resources, delete_tty): Prefer eassert to emacs_abort.
	* image.c (make_image_cache): For struct image_cache, prefer xmalloc
	to xzalloc and so avoid redundant call to memset.
	* xterm.c (x_term_init): Avoid unnecessary initializations of dpyinfo
	members because it is allocated with xzalloc and so already zeroed.

2013-08-14  Ken Brown  <kbrown@cornell.edu>

	* gmalloc.c (memalign) [CYGWIN]: Rename to emacs_memalign
	(Bug#15094).

2013-08-14  Dmitry Antipov  <dmantipov@yandex.ru>

	Utility function and macro to copy Lisp string to C string.
	* lisp.h (xlispstrdupa): New macro.
	(xlispstrdup): New prototype.
	* alloc.c (xlispstrdup): New function.
	* callint.c (Fcall_interactively):
	* fileio.c (Ffile_name_directory, Fexpand_file_name)
	(Fsubstitute_in_file_name):
	* frame.c (Fmake_terminal_frame): Use xlispstrdupa.
	* image.c (x_create_bitmap_from_file):
	* w32term.c (w32_term_init):
	* xterm.c (x_term_init): Use xlispstrdup.

2013-08-14  Lars Magne Ingebrigtsen  <larsi@gnus.org>

	* image.c (imagemagick_load_image): Make animated pictures work.
	There's still some problems with background color settings, though
	(bug#14700).

	* decompress.c (unwind_decompress): Always restore point.

2013-08-14  Xue Fuqiao  <xfq.free@gmail.com>

	* marker.c (set_marker): Reformat documentation.

2013-08-14  Paul Eggert  <eggert@cs.ucla.edu>

	* xdisp.c (cursor_type_changed): Now static.

	* image.c (imagemagick_filename_hint): New arg HINT_BUFFER.
	Use changed.  This avoids the need to call xmalloc and for the
	caller to call xfree, and avoids memory leaks in some situations.

2013-08-14  Dmitry Antipov  <dmantipov@yandex.ru>

	* xdisp.c (adjust_window_ends): Move duplicated code to new function.
	(try_window, try_window_reusing_current_matrix, try_window_id): Use it.
	(redisplay_window): If window_end_valid is cleared due to non-zero
	windows_or_buffers_changed, clear current_matrix_up_to_date_p and
	so do not call to try_cursor_movement for that window.

2013-08-14  Dmitry Antipov  <dmantipov@yandex.ru>

	* window.h (struct window): Convert window_end_pos and
	window_end_vpos from Lisp_Object to ptrdiff_t and int, respectively.
	(wset_window_end_pos, wset_window_end_vpos): Remove.
	* dispnew.c (adjust_glyph_matrix):
	* window.c (Fwindow_end, replace_window, set_window_buffer)
	(make_window):
	* xdisp.c (check_window_end, move_it_to, redisplay_internal)
	(set_vertical_scroll_bar, redisplay_window, try_window)
	(try_window_reusing_current_matrix, find_first_unchanged_at_end_row)
	(try_window_id, decode_mode_spec, mouse_face_from_buffer_pos)
	(note_mouse_highlight): Adjust users.
	(try_cursor_movement): Likewise.  Convert old precondition to eassert.
	Add comment.

2013-08-14  Dmitry Antipov  <dmantipov@yandex.ru>

	Fix --enable-gcc-warnings errors introduced in 2013-08-13 commit.
	* image.c (imagemagick_filename_hint): Use `const char *' and
	prefer SSDATA to SDATA to avoid warnings.

2013-08-14  Dmitry Antipov  <dmantipov@yandex.ru>

	Cleanup window fringes, margins and scroll bars adjustments.
	* window.c (set_window_fringes, set_window_margins)
	(set_window_scroll_bars, apply_window_adjustment): New functions.
	(set_window_buffer, Fset_window_margins, Fset_window_fringes)
	(Fset_window_scroll_bars): Use them.

2013-08-14  Dmitry Antipov  <dmantipov@yandex.ru>

	* window.h (struct window): Convert scroll_bar_width
	from Lisp_Object to integer.  Adjust comment.
	(WINDOW_CONFIG_SCROLL_BAR_WIDTH, WINDOW_CONFIG_SCROLL_BAR_COLS):
	Adjust users.
	* window.c (wset_scroll_bar_width): Remove.
	(make_window): Initialize scroll_bar_width.
	(Fsplit_window_internal): Use direct assignment.
	(Fset_window_configuration, save_window_save):
	Convert Lisp_Object to integer and back where appropriate.
	(Fset_window_scroll_bars): Adjust user.  Return t if any scroll
	bar was actually changed, and mention this in docstring.

2013-08-13  Paul Eggert  <eggert@cs.ucla.edu>

	* decompress.c: Minor simplifications.
	(Fzlib_decompress_region): Don't bother verifying
	that avail_out <= UINT_MAX, as that was confusing.
	Mention the restriction in a comment instead.
	Prefer 'int' to 'ptrdiff_t' when 'int' is wide enough.

2013-08-13  Jan Djärv  <jan.h.d@swipnet.se>

	* nsmenu.m (x_activate_menubar): Check for OSX >= 10.5
	(trackingNotification:): Call ns_check_menu_open only for OSX >= 10.5.

2013-08-13  Lars Magne Ingebrigtsen  <larsi@gnus.org>

	* image.c (imagemagick_filename_hint): Check for errors in the
	alist structure.

2013-08-13  Eli Zaretskii  <eliz@gnu.org>

	* window.c (Fwindow_margins): Return nil when there's no marginal
	area, as per the documented API.

	* w32term.c (x_scroll_bar_create): Use ALLOCATE_PSEUDOVECTOR, not
	Fmake_vector, as scroll bar's struct members are not all Lisp
	objects now.  This avoids crashes in GC.

	* w32term.h (struct scroll_bar): Convert fringe_extended_p to a
	bool, so its address could be taken.

2013-08-13  Lars Magne Ingebrigtsen  <larsi@gnus.org>

	* image.c (imagemagick_filename_hint): New function to possibly
	apply `image-content-type-suffixes'.
	(imagemagick_load_image): Use it.

2013-08-13  Eli Zaretskii  <eliz@gnu.org>

	* decompress.c (Fzlib_decompress_region) [WINDOWSNT]: Return Qnil
	if loading zlib failed.

2013-08-13  Jan Djärv  <jan.h.d@swipnet.se>

	* nsterm.m (ns_set_vertical_scroll_bar): Fix breakage intruduced by
	2013-08-13 checkin below.  Change bool to BOOL, rule is:
	All Obj-C code uses BOOL, except for interfaces callable from C.

	* nsterm.h: Fix CGFloat for OSX 10.4 (Bug#15086).

2013-08-13  Dmitry Antipov  <dmantipov@yandex.ru>

	* window.h (WINDOW_FRINGE_EXTENDED_P): New macro.
	* nsterm.m (ns_set_vertical_scroll_bar): Use it.  Use convenient
	bool instead of BOOL.
	* w32term.h (struct scroll_bar): Convert fringe_extended_p
	from Lisp_Object to bitfield.  Adjust comment.
	* w32term.c (x_scroll_bar_create): Adjust user.
	Use WINDOW_FRINGE_EXTENDED_P and bool for boolean.
	* xterm.c (XTset_vertical_scroll_bar): Likewise.
	Use bool for boolean.
	* xterm.h (struct scroll_bar): Prefer commonly used `unsigned'
	to `unsigned int' when defining a bitfield.

2013-08-13  Paul Eggert  <eggert@cs.ucla.edu>

	* decompress.c (Fzlib_decompress_region): Try to clarify 'avail_out'.

2013-08-13  Dmitry Antipov  <dmantipov@yandex.ru>

	* window.h (struct window): Convert left_margin_cols and
	right_margin_cols from Lisp_Objects to integers.  Adjust comment.
	(WINDOW_LEFT_MARGIN_COLS, WINDOW_RIGHT_MARGIN_COLS)
	(WINDOW_LEFT_MARGIN_WIDTH, WINDOW_RIGHT_MARGIN_WIDTH):
	Adjust users.
	* dispnew.c (margin_glyphs_to_reserve): Convert 3rd arg to int.
	Adjust comment.
	(showing_window_margins_p, update_window_line, update_frame_1):
	* fringe.c (draw_fringe_bitmap_1):
	* xdisp.c (window_box_width): Adjust users.
	* window.c (wset_left_margin_cols, wset_right_margin_cols): Remove.
	(adjust_window_margins, set_window_buffer, Fsplit_window_internal):
	Use direct assignment.
	(Fset_window_configuration, save_window_save, Fwindow_margins):
	Convert Lisp_Object to integer and back where appropriate.
	(Fset_window_margins): Adjust user.  Return t if any margin
	was actually changed, and mention this in docstring.

2013-08-13  Xue Fuqiao  <xfq.free@gmail.com>

	* syntax.c (forward_word):
	* cmds.c (forward_char, backward_char): Mention the optional argument.

2013-08-13  Dmitry Antipov  <dmantipov@yandex.ru>

	* window.h (struct window): Convert left_fringe_width
	and right_fringe_width from Lisp_Objects to integers.
	Adjust comment.
	(WINDOW_FRINGE_COLS, WINDOW_LEFT_FRINGE_WIDTH)
	(WINDOW_RIGHT_FRINGE_WIDTH): Adjust users.
	* window.c (wset_left_fringe_width, wset_right_fringe_width):
	Remove.
	(make_window): Initialize new integer fields to -1.
	(Fsplit_window_internal): Use direct assignment.
	(Fset_window_configuration, save_window_save):
	Convert Lisp_Object to integer and back where appropriate.
	(Fset_window_fringes): Adjust user.  Return t if any fringe
	was actually changed, and mention this in docstring.

2013-08-13  Dmitry Antipov  <dmantipov@yandex.ru>

	* keyboard.c (Fdiscard_input): Do not increment update_mode_lines.
	* nsfns.m (x_set_cursor_type):
	* w32fns.c (x_set_cursor_type):
	* xfns.c (x_set_cursor_type): Do not set cursor_type_changed here...
	* xdisp.c (set_frame_cursor_types): ...but in common code.

2013-08-13  Dmitry Antipov  <dmantipov@yandex.ru>

	* font.c (clear_font_cache): New function, stripped from...
	(Fclear_font_cache): ...here, which now uses the function
	above.  Adjust comment.
	* font.h (clear_font_cache): Add prototype.
	* xfaces.c (clear_face_cache): Use clear_font_cache.

2013-08-13  Dmitry Antipov  <dmantipov@yandex.ru>

	* window.c (Fset_window_start): Compare `w', not `window' because
	`w' might not be equal to `window' after call to decode_live_window.

2013-08-12  Paul Eggert  <eggert@cs.ucla.edu>

	* process.c (deactivate_process): Reset fds to -1 (Bug#15035).
	This fixes a problem introduced by the Bug#15035 patch
	when using GPG.  Reported by Herbert J. Skuhra.

2013-08-12  Eli Zaretskii  <eliz@gnu.org>

	* decompress.c <zlib_initialized> [WINDOWSNT]: New static variable.
	(Fzlib_decompress_region) [WINDOWSNT]: Call init_zlib_functions if
	not yet initialized.

2013-08-12  Lars Magne Ingebrigtsen  <larsi@gnus.org>

	* decompress.c (Fzlib_decompress_region): Support zlib
	decompression, too, and rename.

2013-08-12  Paul Eggert  <eggert@cs.ucla.edu>

	Minor zlib configuration tweaks.
	* decompress.c (fn_inflateInit2) [!WINDOWSNT]:
	Don't assume presence of fn_inflateInit2_ zlib internal function.

2013-08-12  Lars Magne Ingebrigtsen  <larsi@gnus.org>

	* decompress.c (Fzlib_decompress_gzipped_region): Rename to
	include the zlib prefix.

2013-08-12  Eli Zaretskii  <eliz@gnu.org>

	* decompress.c [WINDOWSNT]: Include windows.h and w32.h.
	(DEF_ZLIB_FN, LOAD_ZLIB_FN) [WINDOWSNT]: New macros.  Use them to
	define static variables that are pointers to zlib functions to be
	dynamically loaded.
	(init_zlib_functions) [WINDOWSNT]: New function.
	(fn_inflateInit2_, fn_inflate, fn_inflateEnd, fn_inflateInit2):
	New macros.
	(Fdecompress_gzipped_region, unwind_decompress): Use the fn_*
	macros instead of invoking the zlib functions directly.
	(syms_of_decompress): DEFSYM Qzlib_dll.
	Staticpro Szlib_available_p.

2013-08-12  Dmitry Antipov  <dmantipov@yandex.ru>

	Avoid looping over all frame windows to freeze and unfreeze.
	* window.h (struct window): Drop frozen_window_start_p.
	(freeze_window_starts): Drop prototype.
	* frame.h (struct frame): New frozen_window_starts flag.
	(FRAME_WINDOWS_FROZEN): New macro.
	* window.c (freeze_window_start, freeze_window_starts):
	Remove.
	(select_window, replace_window): Adjust users.
	* xdisp.c (resize_mini_window): Use FRAME_WINDOWS_FROZEN.
	(window_frozen_p): New function.
	(redisplay_window): Use it.

2013-08-12  Paul Eggert  <eggert@cs.ucla.edu>

	Fix some fd issues when running subprocesses (Bug#15035).
	Fix bugs that can leak files or file descriptors on errors.
	Don't unlink open temp files, as that's hard for users to diagnose
	when things go awry (e.g., temp disk exhausted).
	Don't bother to lock temp files.  Check for invalid recursion.
	* callproc.c (synch_process_fd): Remove.  All uses removed.
	(synch_process_tempfile): New var or macro.
	(CALLPROC_STDOUT, CALLPROC_STDERR, CALLPROC_PIPEREAD, CALLPROC_FDS):
	New constants.
	(record_kill_process): New arg, the temp name.  All callers changed.
	(delete_temp_file): Now just a simple wrapper around unlink.
	(call_process_kill): New arg, the call_process_fd array.
	Close them all.  Clear synch_process_pid.  Remove the temp file,
	or arrange for it to be removed.
	(call_process_cleanup) [MSDOS]: Arg no longer contains file name;
	that's been moved to synch_process_tempfile.  Caller changed.
	Do not remove the tempfile; that's now call_process_kill's
	responsibility.
	(call_process_cleanup) [!MSDOS]: Do not record unwind-protect for
	call_process_kill; the caller now does that.
	(call_process_cleanup): Do not close the process fd; that's now
	call_process_kill's responsibility.
	(Fcall_process): Implement via new function call_process, which
	has most of the old body of Fcall_process, but with a different API.
	(call_process): New function that does not open or close filefd if
	it is nonnegative.  Record which fds need to be closed, and let
	call_process_kill close (and remove the tempfile, on MSDOS) on error.
	Signal an error if invoked recursively (could be done via a hook).
	Simplify creation of the tempfile in the MSDOS case.
	Don't create the output file until after checking for the executable.
	Report any failure to open /dev/null.
	Don't open /dev/null for writing twice; once is enough.
	Don't create pipe if all output is being discarded or sent to file.
	Don't worry about setting up the coding system or reading from the
	pipe if all output is being discarded.
	Hoist fd_error local into top level, to lessen block nesting.
	Don't record deleted pid here; now done by Fcall_process_region.
	(Fcall_process) [MSDOS]: Report mktemp failure immediately,
	and note its success in synch_process_tempfile.
	Do not leak resources when child_setup fails.
	(Fcall_process) [!MSDOS && !WINDOWSNT]: Remove duplicate assignment
	to child_errno.  Remove unnecessary close of fd0; it's close-on-exec.
	(create_temp_file): Now returns open fd, with an additional
	Lisp_Object * argument to return the name.  All callers changed.
	Do not close the file; rewind it instead, and leave it open for
	the caller.  Do not lock the temp file.  Unwind-protect the file
	and the file-descriptor.
	(Fcall_process_region): If the input is /dev/null, unwind-protect it.
	If an asynchrounous process, record it here, not in call_process.
	(syms_of_callproc) [MSDOS]: Initialize synch_process_tempfile.
	* eval.c (set_unwind_protect): New function.
	* fileio.c (write_region): New function, generalized from the
	old Fwrite_region.  Do not lock temp files.
	(Fwrite_region): Use it.
	* lisp.h (set_unwind_protect, write_region): New decls.
	* process.c: Include <verify.h>.
	(make_process): Mark fds as initially closed.
	(deleted_pid_list): Now a list of pid-filename pairs.
	All uses changed.
	(close_process_fd): New function.
	(SUBPROCESS_STDIN, WRITE_TO_SUBPROCESS, READ_FROM_SUBPROCESS)
	(SUBPROCESS_STDOUT, READ_FROM_EXEC_MONITOR, EXEC_MONITOR_OUTPUT):
	New constants.  Verify that their number matches PROCESS_OPEN_FDS.
	(create_process, create_pty, Fmake_serial_process)
	(server_accept_connection): Record which fds need to be closed,
	and let deactivate_process close them.
	(Fmake_network_process): Do not discard the unwind-protect
	until it's safe to do so.
	(deactivate_process): Close the fds opened by create_process etc.
	(Fprocess_send_eof): Adjust to new way of recording open fds.
	Report an error if /dev/null can't be opened, instead of aborting.
	* process.h (PROCESS_OPEN_FDS): New constant.
	(struct Lisp_Process): New member open_fds.
	(record_kill_process, record_deleted_pid): Adjust signatures.
	(record_deleted_pid): Move decl here ...
	* syswait.h (record_deleted_pid): ... from here.

2013-08-11  Paul Eggert  <eggert@cs.ucla.edu>

	* decompress.c: Fix bugs with large buffers and weird inputs.
	Tune a bit.  Reindent as per usual Emacs style.
	(BUFFER_SIZE): Remove.
	(Fdecompress_gzipped_region): Do not mishandle input buffers with
	more than UINT_MAX bytes.  Decompress into the gap instead of into
	an auto buffer, as this should avoid copying.  Return nil if
	'inflate' returns Z_NEED_DICT, as we have no dictionary.  Do not
	set immediate_quit; we shouldn't trust zlib code that much.

2013-08-11  Lars Magne Ingebrigtsen  <larsi@gnus.org>

	* decompress.c (Fdecompress_gzipped_region): Respect all zlib
	errors, and really move the gap to where we want it.

	* lisp.h: Include decompress.c support.

	* emacs.c (main): Include decompress.c support.

	* Makefile.in: Include -lz if present.

2013-08-11  Jan Djärv  <jan.h.d@swipnet.se>

	* nsmenu.m (ns_update_menubar): Call fillWithWidgetValue:frame:
	(initWithTitle:): Initialize frame to 0.
	(fillWithWidgetValue:): Call fillWithWidgetValue:frame.
	(fillWithWidgetValue:frame:): Rename from
	fillWithWidgetValue:setDelegate, call initWithTile:frame: if f.

	* nsterm.h (EmacsMenu): fillWithWidgetValue:setDelegate renamed to
	fillWithWidgetValue:frame:

	* nsfns.m (Fns_convert_utf8_nfd_to_nfc): Allocate and release pool to
	remove memory leak warnings.

	* nsterm.m (menu_pending_title, ns_get_pending_menu_title): Remove.
	(ns_check_menu_open): Handle menu == nil.  Remove assignment to
	menu_pending_title.

	* nsmenu.m (ns_update_menubar): Call fillWithWidgetValue:setDelegate.
	(x_activate_menubar): Update the whole menu.
	(trackingNotification:): Call ns_check_menu_open if tracking ends.
	(menuWillOpen:): Increment trackingMenu.  For OSX <= 10.6, exit if
	current event is not NSSystemDefined (Bug#15001).
	Call ns_check_menu_open only if trackingMenu is 2.
	(menuDidClose:): New method, decrease trackingMenu.
	(fillWithWidgetValue:setDelegate:): New method.
	(fillWithWidgetValue:): Call the above.

	* nsterm.h (EmacsMenu): Add fillWithWidgetValue:setDelegate:

2013-08-11  Paul Eggert  <eggert@cs.ucla.edu>

	Omit some unnecessary casts.
	Many of these go back to the old pre-C89 days, when they may have
	been needed, but we've been assuming C89 or later for a while now.
	* alloc.c (live_string_p, live_cons_p, live_symbol_p)
	(live_float_p, live_misc_p, live_vector_p):
	* buffer.c (compare_overlays, cmp_for_strings, mmap_find)
	(mmap_alloc, alloc_buffer_text, enlarge_buffer_text)
	(defvar_per_buffer):
	* callint.c (Fcall_interactively):
	* doc.c (Fsubstitute_command_keys):
	* filelock.c (get_boot_time):
	* frame.c (xrdb_get_resource):
	* gtkutil.c (hierarchy_ch_cb, qttip_cb, style_changed_cb)
	(delete_cb, xg_dialog_response_cb, xg_maybe_add_timer)
	(xg_get_file_name_from_selector, menuitem_destroy_callback)
	(menuitem_highlight_callback, menu_destroy_callback)
	(xg_update_menu_item, xg_modify_menubar_widgets, menubar_map_cb)
	(xg_tool_bar_callback, xg_get_tool_bar_widgets)
	(xg_tool_bar_detach_callback, xg_tool_bar_attach_callback)
	(xg_tool_bar_help_callback, tb_size_cb):
	* image.c (xpm_alloc_color, png_read_from_memory)
	(png_read_from_file, png_load_body, our_memory_skip_input_data)
	(jpeg_memory_src, jpeg_file_src, imagemagick_load_image)
	(syms_of_image):
	* keymap.c (describe_map):
	* nsfns.m (Fns_display_monitor_attributes_list):
	* nsmenu.m (process_dialog:):
	* nsterm.m (hold_event):
	* process.c (wait_reading_process_output):
	* regex.c (REGEX_REALLOCATE, re_set_registers, re_exec, regexec):
	* scroll.c (do_direct_scrolling, scrolling_1):
	* termcap.c (tgetent):
	* window.c (check_window_containing, add_window_to_list)
	(freeze_window_starts):
	* xdisp.c (compare_overlay_entries, vmessage):
	* xfns.c (x_window, x_get_monitor_attributes_xinerama)
	(x_get_monitor_attributes_xrandr)
	(Fx_display_monitor_attributes_list, x_display_info_for_name)
	(Fx_open_connection, file_dialog_cb, file_dialog_unmap_cb):
	* xfont.c (xfont_match, xfont_open):
	* xmenu.c (x_menu_wait_for_event, menu_highlight_callback)
	(menubar_selection_callback, menu_position_func)
	(popup_selection_callback, create_and_show_popup_menu)
	(dialog_selection_callback, create_and_show_dialog):
	* xrdb.c (x_get_string_resource)
	(main) [TESTRM]:
	* xsmfns.c (x_session_check_input):
	* xterm.c (x_draw_glyphless_glyph_string_foreground)
	(xm_scroll_callback, xg_scroll_callback, xg_end_scroll_callback)
	(xaw_jump_callback, xaw_scroll_callback):
	Omit unnecessary casts.

2013-08-10  Paul Eggert  <eggert@cs.ucla.edu>

	Minor string-length refactoring.
	* alloc.c (xstrdup): Use memcpy, not strcpy, since the length's known.
	* frame.c (make_monitor_attribute_list):
	Prefer build_string to strlen + make_string.

2013-08-10  Jan Djärv  <jan.h.d@swipnet.se>

	* xterm.c (x_error_handler): Also ignore BadWindow for X_SetInputFocus,
	don't check minor_code (Bug#14417).

2013-08-09  Eli Zaretskii  <eliz@gnu.org>

	* xdisp.c (draw_glyphs): Don't compare row pointers, compare row
	vertical positions instead.  This avoids calling MATRIX_ROW with
	row numbers that are possibly beyond valid limits.  (Bug#15064)

2013-08-09  Dmitry Antipov  <dmantipov@yandex.ru>

	Use xstrdup and build_unibyte_string where applicable.
	* alloc.c (xstrdup): Tiny cleanup.  Add eassert.
	* xfns.c (x_window):
	* xrdb.c (x_get_customization_string):
	* xterm.c (xim_initialize):
	* w32fns.c (w32_window): Use xstrdup.
	(w32_display_monitor_attributes_list):
	* emacs.c (init_cmdargs):
	* keyboard.c (PUSH_C_STR):
	* nsfont.m (nsfont_open):
	* sysdep.c (system_process_attributes):
	* w32.c (system_process_attributes):
	* xdisp.c (message1, message1_nolog): Use build_unibyte_string.

2013-08-09  Eli Zaretskii  <eliz@gnu.org>

	* w32.c (PEXCEPTION_POINTERS, PEXCEPTION_RECORD, PCONTEXT): Define
	variables of these types so that GDB would know about them, as aid
	for debugging fatal exceptions.  (Bug#15024)  See also
	http://sourceware.org/ml/gdb/2013-08/msg00010.html for related
	discussions.

2013-08-08  Jan Djärv  <jan.h.d@swipnet.se>

	* nsterm.m (ns_update_begin): Don't change clip path if it would be
	larger than the NSWindow (Bug#14934).

2013-08-08  Dmitry Antipov  <dmantipov@yandex.ru>

	Redesign redisplay interface to drop global variable updated_window.
	Always pass currently updated window as a parameter to update routines.
	* dispextern.h (updated_window): Remove declaration.
	(struct redisplay_interface): Pass window parameter to
	write_glyphs, insert_glyphs, clear_end_of_line, cursor_to
	and after_update_window_hook.
	(x_write_glyphs, x_insert_glyphs, x_clear_end_of_line, x_cursor_to):
	Adjust prototypes.
	* dispnew.c (updated_window): Remove.
	(redraw_overlapped_rows, update_marginal_area, update_text_area)
	(update_window_line): Adjust to match redisplay interface changes.
	* nsterm.m (ns_update_window_begin, ns_update_window_end)
	(ns_scroll_run, ns_after_update_window_line):
	* w32term.c (x_update_window_begin, x_update_window_end)
	(x_after_update_window_line, x_scroll_run):
	* xterm.c (x_update_window_begin, x_update_window_end)
	(x_after_update_window_line, x_scroll_run):
	* xdisp.c (x_write_glyphs, x_insert_glyphs, x_clear_end_of_line):
	Likewise.  Adjust comments where appropriate.
	(x_cursor_to): Simplify because this is always called during window
	update (but install debugging check anyway).
	(expose_window): Check must_be_updated_p flag to see whether this
	function is called during window update.

2013-08-08  Dmitry Antipov  <dmantipov@yandex.ru>

	Do not reset window modification event counters excessively.
	These leftovers and poor man's tricky methods to catch extra
	redisplay's attention are no longer needed.
	* frame.c (set_menu_bar_lines_1):
	* minibuf.c (read_minibuf_unwind):
	* window.c (Fset_window_start, set_window_buffer, window_resize_apply)
	(grow_mini_window, shrink_mini_window, window_scroll_pixel_based)
	(window_scroll_line_based, Fset_window_configuration):
	* xdisp.c (redisplay_window): Do not reset last_modified and
	last_overlay_modified counters.

2013-08-07  Jan Djärv  <jan.h.d@swipnet.se>

	* xselect.c (x_send_client_event): Set send_event and serial, memset
	data.l as it might be bigger than data.b.   Use 24 bit mask to
	XSendEvent (Bug#15034).

2013-08-07  Eli Zaretskii  <eliz@gnu.org>

	* xdisp.c (prepare_menu_bars): Don't call x_consider_frame_title
	for TTY frames that are not the top frame on their console.
	(Bug#14616)

2013-08-07  Martin Rudalics  <rudalics@gmx.at>

	* w32term.c (w32fullscreen_hook): Really maximize frame when
	asked for (Bug#14841).

2013-08-07  Dmitry Antipov  <dmantipov@yandex.ru>

	Prefer selected_window to Fselected_window, likewise for frames.
	* buffer.c (Fbuffer_swap_text):
	* data.c (Fvariable_binding_locus):
	* window.c (run_window_configuration_change_hook): Adjust users.
	* w16select.c (Fw16_set_clipboard_data, Fw16_get_clipboard_data):
	Use decode_live_frame.

2013-08-07  Dmitry Antipov  <dmantipov@yandex.ru>

	Be more careful if selected window shows the buffer other than current,
	use window_outdated only if this is not so.  This change should also
	address some weird issues discussed in Bug#13012.
	* window.h (window_outdated): New prototype.
	* window.c (window_outdated): Now here.  Convert from static and
	always assume window's buffer.
	(Fwindow_end, Fwindow_line_height): Use it.
	* xdisp.c (reconsider_clip_changes): Remove prototype, drop 2nd arg
	and always assume window's buffer.
	(redisplay_window): Adjust user.
	(redisplay_internal): Call to reconsider_clip_changes once and
	check whether mode line should be updated only if selected window
	shows current buffer.
	(run_window_scroll_functions): Use eassert for debugging check.
	(Fmove_point_visually, note_mouse_highlight): Use window_outdated.

2013-08-06  Dmitry Antipov  <dmantipov@yandex.ru>

	* window.c (window_scroll, window_scroll_pixel_based)
	(window_scroll_line_based): Use bool for booleans.

2013-08-06  Paul Eggert  <eggert@cs.ucla.edu>

	* process.c: Fix minor off-by-one issues in descriptor counts.
	This shouldn't fix any real bugs, but it cleans up the code a bit.
	(max_process_desc, max_input_desc): -1, not 0, means none.
	All uses changed.
	(delete_input_desc): New function.
	(delete_write_fd, delete_keyboard_wait_descriptor): Use it.
	(deactivate_process): Scan backwards when recomuting max_process_desc;
	that should be faster.
	(init_process_emacs): Initialize max_input_desc.

2013-08-06  Dmitry Antipov  <dmantipov@yandex.ru>

	Use region cache to speedup bidi_find_paragraph_start.
	* buffer.h (struct buffer): New member bidi_paragraph_cache.
	Rename cache_long_line_scans to cache_long_scans.
	* buffer.c (bset_cache_long_line_scans): Rename to
	bset_cache_long_scans.
	(Fget_buffer_create, Fmake_indirect_buffer, Fkill_buffer)
	(Fbuffer_swap_text, init_buffer_once): Take bidi_paragraph_cache
	into account.
	(syms_of_buffer): Rename cache-long-line-scans to
	cache-long-scans.  Adjust docstring.
	* search.c (newline_cache_on_off):
	* indent.c (width_run_cache_on_off): Adjust users.
	* bidi.c (bidi_paragraph_cache_on_off): New function.
	(bidi_find_paragraph_start): Use bidi_paragraph_cache if needed.
	* insdel.c (prepare_to_modify_buffer):
	Invalidate bidi_paragraph_cache if enabled.

2013-08-06  Dmitry Antipov  <dmantipov@yandex.ru>

	Invalidate region caches only if buffer text is going to be changed.
	* lisp.h (modify_region_1): Remove 3rd arg and rename to...
	(modify_text): ...new prototype.
	(prepare_to_modify_buffer_1): New prototype.
	* textprop.c (modify_region): Rename to...
	(modify_text_properties): ...new function.
	(add_text_properties_1, set_text_properties, Fremove_text_properties)
	(Fremove_list_of_text_properties): Adjust users.
	* insdel.c (modify_region_1): Remove 3rd arg and reimplement as...
	(modify_text): ...new function.
	(prepare_to_modify_buffer): Reimplement mostly as a wrapper for...
	(prepare_to_modify_buffer_1): ...new function.
	* casefiddle.c (casify_region):
	* editfns.c (Fsubst_char_in_region, Ftranslate_region_internal)
	(Ftranspose_regions): Use modify_text.

2013-08-05  Stefan Monnier  <monnier@iro.umontreal.ca>

	* lisp.mk (lisp): Add nadvice.elc.

2013-08-05  Dmitry Antipov  <dmantipov@yandex.ru>

	New macro to iterate over live buffers similar to frames.
	* buffer.h (FOR_EACH_LIVE_BUFFER): New macro.
	(Vbuffer_alist, Qpriority, Qbefore_string, Qafter_string):
	Declare buffer-related variables here to offload lisp.h.
	* buffer.c (Vbuffer_alist): Adjust comment.
	(Fget_file_buffer, get_truename_buffer, Fother_buffer)
	(other_buffer_safely):
	* data.c (store_symval_forwarding):
	* dispnew.c (Fframe_or_buffer_changed_p):
	* fileio.c (Fdo_auto_save):
	* filelock.c (unlock_all_files):
	* minibuf.c (read_minibuf): Use FOR_EACH_LIVE_BUFFER.

2013-08-04  Paul Eggert  <eggert@cs.ucla.edu>

	Fix some minor races in hosts lacking mkostemp (Bug#15015).
	* callproc.c (create_temp_file):
	* filelock.c (create_lock_file):
	Assume mkostemp, since it's now provided by Gnulib.

2013-08-04  Eli Zaretskii  <eliz@gnu.org>

	* w32.c (mkostemp): New function.
	(mktemp): Remove, no longer used.  Most of the code reused in
	mkostemp.  (Bug#15015)
	(mktemp): Don't undef.

2013-08-04  Dmitry Antipov  <dmantipov@yandex.ru>

	* dispnew.c (glyph_matrix_count, glyph_pool_count):
	Move under GLYPH_DEBUG and ENABLE_CHECKING.
	(new_glyph_matrix, free_glyph_matrix, new_glyph_pool)
	(free_glyph_pool, check_glyph_memory): Likewise for
	all users.  Adjust comments where appropriate.

2013-08-03  Paul Eggert  <eggert@cs.ucla.edu>

	* composite.h: Minor fixups.
	(composition_registered_p): Rename from COMPOSITION_REGISTERD_P
	to fix a misspelling, and change it to an inline function while
	we're at it (it need not be a macro).  All uses changed.
	(composition_method, composition_valid_p):
	Rewrite to avoid assignments in if-conditions.

2013-08-03  Dmitry Antipov  <dmantipov@yandex.ru>

	Do not use global Lisp_Object in composition macros.
	* composite.h (composition_temp): Remove declaration.
	(COMPOSITION_METHOD, COMPOSITION_VALID_P): Replace with...
	(composition_method, composition_valid_p): ...inline functions.
	(compose_region): Remove the leftover.
	* composite.c (composition_temp): Remove.
	(run_composition_function, update_compositions)
	(composition_compute_stop_pos, composition_adjust_point)
	(Ffind_composition_internal):
	* coding.c (handle_composition_annotation):
	* xdisp.c (handle_composition_prop, check_point_in_composition):
	Related users changed.

2013-08-03  Dmitry Antipov  <dmantipov@yandex.ru>

	Drop FRAME_PTR typedef.
	* composite.c, font.c, font.h, fontset.c, fontset.h, frame.c, frame.h:
	* ftfont.c, ftxfont.c, gtkutil.c, gtkutil.h, image.c, keyboard.c:
	* menu.c, menu.h, msdos.c, nsfns.m, nsfont.m, nsmenu.m, nsterm.h:
	* nsterm.m, scroll.c, term.c, w32fns.c, w32font.c, w32font.h:
	* w32inevt.c, w32inevt.h, w32menu.c, w32notify.c, w32term.c, w32term.h:
	* w32uniscribe.c, w32xfns.c, widget.c, window.c, xdisp.c, xfaces.c:
	* xfns.c, xfont.c, xftfont.c, xmenu.c, xselect.c, xterm.c:
	All related users changed.

2013-08-02  Stefan Monnier  <monnier@iro.umontreal.ca>

	* eval.c (default_toplevel_binding): New function.
	(Fdefvar): Use it.
	(unbind_to, backtrace_eval_unrewind): Do a bit of CSE simplification.
	(Fdefault_toplevel_value, Fset_default_toplevel_value): New subrs.
	(syms_of_eval): Export them.
	* data.c (Fdefault_value): Micro cleanup.
	* term.c (init_tty): Use "false".

2013-08-02  Dmitry Antipov  <dmantipov@yandex.ru>

	Fix X GC leak in GTK and raw (no toolkit) X ports.
	* xterm.c (x_free_frame_resources): If white and black relief
	GCs are allocated, always free them here.
	* xfns.c (x_make_gc): Omit redundant initialization.
	* widget.c (create_frame_gcs): Remove the leftover.
	(EmacsFrameDestroy): Do nothing because all GCs are now freed
	in x_free_frame_resources.

2013-08-02  Jan Djärv  <jan.h.d@swipnet.se>

	* nsterm.m (windowWillResize:toSize:): Only change title if
	! maximizing_resize && FULLSCREEN_NONE (Bug#15005).  strdup title before
	modifying it.
	(viewDidEndLiveResize): New method.

	* nsterm.h (EmacsView): Add maximizing_resize, put it and old_title
	inside NS_IMPL_COCOA.

2013-08-02  Dmitry Antipov  <dmantipov@yandex.ru>

	* insdel.c (adjust_after_replace, replace_range, del_range_2):
	Do not check whether undo is enabled because record_insert and
	record_delete does that themselves.

2013-08-02  Dmitry Antipov  <dmantipov@yandex.ru>

	* xterm.h (struct x_output) [HAVE_X_I18N]: Remove xic_base_fontname
	member which is not really used any more.
	(FRAME_XIC_BASE_FONTNAME): Remove.
	* xfns.c (xic_free_fontset): Adjust user.
	* xmenu.c (mouse_position_for_popup, x_activate_menubar)
	(update_frame_menubar, set_frame_menubar, free_frame_menubar)
	(create_and_show_popup_menu, xmenu_show, create_and_show_dialog)
	(xdialog_show): Use eassert for debugging check.
	* w32term.c (x_unfocus_frame): Remove unused dummy function.

2013-08-01  Paul Eggert  <eggert@cs.ucla.edu>

	* fileio.c, fns.c (merge): Move extern decl from here ...
	* lisp.h (merge): ... to here.

2013-08-01  Dmitry Antipov  <dmantipov@yandex.ru>

	Fix last font-related change.
	* w32font.h (w32font_list_internal, w32font_match_internal):
	Fix prototype.
	* w32uniscribe.c (uniscribe_list, uniscribe_match)
	(uniscribe_list_family): Adjust to match font API change.
	MS-Windows breakage reported by Juanma Barranquero <lekktu@gmail.com>
	at https://lists.gnu.org/r/emacs-devel/2013-08/msg00006.html.

2013-08-01  Dmitry Antipov  <dmantipov@yandex.ru>

	* frame.h (FRAME_MOUSE_UPDATE):
	* nsterm.m (ns_frame_up_to_date): Omit redundant check
	whether hlinfo->mouse_face_mouse_frame is non-NULL.

2013-08-01  Dmitry Antipov  <dmantipov@yandex.ru>

	Avoid redundant Lisp_Object <-> struct frame conversions in font API.
	* font.h (struct font_driver): Change list, match, and list_family
	functions to accept struct frame * as first arg.
	* font.c (font_score, font_compare, font_sort_entities):
	Remove prototypes.
	(font_sort_entities, font_list_entities, font_select_entity)
	(font_find_for_lface, Flist_fonts, Ffont_family_list): Adjust to
	match font API change.
	* xfont.c (xfont_list, xfont_match, xfont_list_family):
	* ftfont.c (ftfont_list, ftfont_match, ftfont_list_family):
	* ftxfont.c (ftxfont_list, ftxfont_match):
	* xftfont.c (xftfont_list, xftfont_match):
	* nsfont.m (nsfont_list, nsfont_match, nsfont_list_family):
	* w32font.c (w32font_list, w32font_match, w32font_list)
	(w32font_list_internal, w32_font_match_internal): Likewise.
	* xfaces.c (Fx_family_fonts): Adjust user.

2013-08-01  Dmitry Antipov  <dmantipov@yandex.ru>

	Do not use pure Xism x_wm_set_icon_position in non-X ports.
	* frame.c (x_set_frame_parameters): Call to x_wm_set_icon_position
	only if HAVE_X_WINDOWS is in use.
	* frame.h (x_set_frame_parameters): Move under HAVE_X_WINDOWS.
	* nsterm.m (x_wm_set_icon_position): Remove no-op.
	* w32term.c (x_wm_set_icon_position): Likewise.
	* w32fns.c (x_icon): Adjust user.

2013-08-01  Dmitry Antipov  <dmantipov@yandex.ru>

	* xterm.c (last_mouse_press_frame): Remove the
	leftover which is not really used any more.
	(handle_one_xevent, syms_of_xterm): Adjust users.
	(x_flush): Call XFlush once per each X display, not frame.
	This is better because this code always unconditionally skips
	non-X frames in Vframe_list and issues the only XFlush if we
	have more than one X frame on the same X display.
	(any_help_event_p, x_draw_glyph_string_background, x_display_ok):
	Use bool for booleans.
	(x_draw_glyph_string_background, cvt_string_to_pixel)
	(cvt_pixel_dtor): Drop unnecessary prototypes.
	* xterm.h (x_display_ok): Adjust prototype.

2013-07-31  Dmitry Antipov  <dmantipov@yandex.ru>

	Drop unnecessary functions that deals with frame pixel size.
	* frame.h, msdos.h, w32term.h, xterm.h (x_pixel_width)
	(x_pixel_height): Drop prototypes.
	* msdos.c, nsfns.m, w32fns.c, xfns.c (x_pixel_width)
	(x_pixel_height): Drop implementations.
	* frame.c (Fframe_pixel_height): Use FRAME_PIXEL_HEIGHT
	which should be always valid for window frame.
	(Frame_pixel_width): Likewise with FRAME_PIXEL_WIDTH.
	* w32menu.c (Fx_popup_dialog):
	* xmenu.c (Fx_popup_dialog): Likewise for both.

2013-07-31  Dmitry Antipov  <dmantipov@yandex.ru>

	* frame.c (Fmake_terminal_frame): Use store_in_alist to setup
	frame parameters and call to Fmodify_frame_parameters just once.
	(Fset_frame_height, Fset_frame_width): Mention nil frame in docstring.
	(Fset_frame_size, Fset_frame_position): Use decode_live_frame
	and mention nil frame in docstring.

2013-07-31  Dmitry Antipov  <dmantipov@yandex.ru>

	* frame.c (make_frame, x_set_frame_parameters): Use bool for boolean.
	(x_figure_window_size): Likewise.  Adjust to return long.
	(syms_of_frame): Do not DEFSYM Qterminal_live_p.
	(toplevel): Move Qterminal_live_p to...
	* terminal.c (toplevel): ...here, make it static, and...
	(syms_of_terminal): ...DEFSYM here.
	* frame.h (Qterminal_live_p): Remove declaration.
	(make_frame, x_figure_window_size): Adjust prototype.
	* nsfns.m (Fx_create_frame): Use long for window flags.

2013-07-30  Paul Eggert  <eggert@cs.ucla.edu>

	Fix tempfile bug on platforms lacking mkostemp and mkstemp (Bug#14986).
	* callproc.c (create_temp_file) [! (HAVE_MKOSTEMP || HAVE_MKSTEMP)]:
	Do not assume that emacs_close (INT_MAX) is a no-op.

2013-07-30  Dmitry Antipov  <dmantipov@yandex.ru>

	* xfaces.c (make_face_cache): For struct face_cache, prefer
	xmalloc to xzalloc and so avoid redundant call to memset.
	(Finternal_set_lisp_face_attribute): Fix comment typo and style.

2013-07-30  Dmitry Antipov  <dmantipov@yandex.ru>

	* fringe.c (draw_window_fringes, update_window_fringes)
	(compute_fringe_widths):
	* w32term.c (x_draw_glyph_string):
	* window.c (candidate_window_p, Frecenter):
	* xfaces.c (realize_basic_faces, realize_default_face)
	(Fbitmap_space_p, Finternal_set_lisp_face_attribute)
	(x_update_menu_appearance, face_attr_equal_p, lface_equal_p):
	* xfns.c (x_set_cursor_color, xic_free_xfontset):
	* xmenu.c (Fx_menu_bar_open_internal):
	* xselect.c (x_reply_selection_request, Fx_get_atom_name):
	* xsettings.c (xft_settings_event):
	* xterm.c (x_draw_glyph_string, x_had_errors_p):
	Use bool for booleans.  Adjust style and comments where
	appropriate.
	* dispextern.h (draw_window_fringes, update_window_fringes)
	(compute_fringe_widths):
	* xterm.h (x_had_errors_p): Adjust prototype.

2013-07-30  Dmitry Antipov  <dmantipov@yandex.ru>

	* frame.c (Fmodify_frame_parameters): Always check 2nd arg with
	CHECK_LIST.  Rewrite the loop to avoid useless local variable.

2013-07-29  Dmitry Antipov  <dmantipov@yandex.ru>

	* fns.c (toplevel): Remove comment before Fsafe_length because
	it checks for QUIT.

2013-07-28  Paul Eggert  <eggert@cs.ucla.edu>

	* frame.c (delete_frame): Avoid unnecessary 'this_f' test (Bug#14970).

2013-07-28  Eli Zaretskii  <eliz@gnu.org>

	* w32fns.c (w32_wnd_proc) <WM_IME_STARTCOMPOSITION>: Make sure the
	frame which got the message is still alive, before dereferencing
	its pointer.  (Bug#14970)

	* frame.c (delete_frame): Test "this" frame's minibuffer window to
	be a live window, before using it as such.  (Bug#14970)

2013-07-27  Eli Zaretskii  <eliz@gnu.org>

	* w32term.c (w32_read_socket) <WM_KILLFOCUS>: Call
	w32_detect_focus_change instead of doing part of its job by hand.
	This fixes the problem whereby FOCUS_OUT events were not sent to
	the event queue.

2013-07-26  Eli Zaretskii  <eliz@gnu.org>

	* process.c (Fprocess_list): Doc fix.

	* w32term.c (w32_read_socket) <WM_EMACS_PAINT>: Warn about frame
	being re-exposed only if it didn't ask to become visible.
	<WM_SIZE>: Under SIZE_RESTORED, only set the frame visible if it
	was previously iconified.  (Bug#14841)
	(x_iconify_frame): Mark the frame iconified.

2013-07-26  Paul Eggert  <eggert@cs.ucla.edu>

	Fix minor problems found by static checking.
	* eval.c (get_backtrace_frame, backtrace_eval_unrewind): Now static.
	(backtrace_eval_unrewind): ';' -> '{}' to pacify GCC.

2013-07-26  Stefan Monnier  <monnier@iro.umontreal.ca>

	* eval.c (set_specpdl_old_value): New function.
	(unbind_to): Minor simplification.
	(get_backtrace_frame): New function.
	(Fbacktrace_frame): Use it.  Add `base' argument.
	(backtrace_eval_unrewind, Fbacktrace_eval): New functions.
	(syms_of_eval): Export backtrace-eval.
	* xterm.c (x_focus_changed): Simplify.

2013-07-25  Paul Eggert  <eggert@cs.ucla.edu>

	* fileio.c (Finsert_file_contents): Avoid double-close (Bug#14936).

2013-07-24  Eli Zaretskii  <eliz@gnu.org>

	* xdisp.c (redisplay_window): Instead of moving point out of
	scroll margin, reject the force_start method, and try scrolling
	instead.  (Bug#14780)

2013-07-24  Ken Brown  <kbrown@cornell.edu>

	* alloc.c (make_save_ptr): Define if HAVE_NTGUI is defined
	(Bug#14944).

2013-07-24  Paul Eggert  <eggert@cs.ucla.edu>

	* eval.c (Fprogn): Do not check that BODY is a proper list.
	This undoes the previous change.  The check slows down the
	interpreter, and is not needed to prevent a crash.  See
	<https://lists.gnu.org/r/emacs-devel/2013-07/msg00693.html>.

2013-07-23  Glenn Morris  <rgm@gnu.org>

	* Makefile.in ($(etc)/DOC, temacs$(EXEEXT)): Ensure etc/ exists.

2013-07-23  Paul Eggert  <eggert@cs.ucla.edu>

	Port to GNU/Linux systems with tinfo but not ncurses.
	* dispnew.c (init_display): Depend on USE_NCURSES, not GNU_LINUX,
	to decide whether ncurses is being used.  Without this change,
	GCC complains about tgetent not being declared, on a system
	that has tinfo installed but ncurses not installed.

	* eval.c (Fprogn): Check that BODY is a proper list.

	Tune UNEVALLED functions by using XCAR instead of Fcar, etc.
	* data.c (Fsetq_default):
	* eval.c (Fif, Fcond, Fprog1, Fsetq, Fquote, Ffunction, Fdefvar)
	(Fdefconst, FletX, Flet, Fwhile, Fcatch, Funwind_protect)
	(Fcondition_case):
	Tune by taking advantage of the fact that ARGS is always a list
	when a function is declared to have UNEVALLED args.

	* emacsgtkfixed.c: Port to GCC 4.6.
	GCC 4.6 complains about -Wunused-local-typedefs, introduced in 4.7.

2013-07-23  Juanma Barranquero  <lekktu@gmail.com>

	* callproc.c (child_setup)[!WINDOWSNT]: Move exec_errno and pid
	here to silence compiler warnings.

2013-07-22  Paul Eggert  <eggert@cs.ucla.edu>

	* sysdep.c (frame) [__FreeBSD__]: #define to freebsd_frame
	when including <sys/user.h>, to prevent Sparc/ARM machine/frame.h
	from messing up Emacs's 'struct frame' (Bug#14923).

2013-07-21  Paul Eggert  <eggert@cs.ucla.edu>

	* alloc.c (make_save_ptr_ptr): Define this function.
	It was inadvertently omitted.  It's needed only if
	HAVE_MENUS && ! (USE_X_TOOLKIT || USE_GTK).

2013-07-21  Jan Djärv  <jan.h.d@swipnet.se>

	* nsterm.m (sendEvent:): Skip mouse moved if no dialog and no Emacs
	frame have focus (Bug#14895).

2013-07-21  Paul Eggert  <eggert@cs.ucla.edu>

	Avoid vfork-related deadlock more cleanly.
	* callproc.c (child_setup): When the child's exec fails, output
	the program name, as that's more useful.  Use O_NONBLOCK to avoid
	deadlock.
	* process.c (create_process_1): Remove; no longer needed.
	(create_process): Remove timer hack; no longer needed, now that
	the child avoids deadlock.

2013-07-20  Glenn Morris  <rgm@gnu.org>

	* image.c (Fimage_flush): Fix doc typo.

2013-07-20  Paul Eggert  <eggert@cs.ucla.edu>

	Fix array bounds violation when pty allocation fails.
	* process.c (PTY_NAME_SIZE): New constant.
	(pty_name): Remove static variable; it's now auto.
	(allocate_pty): Define even if !HAVE_PTYS; that's simpler.
	Take pty_name as an arg rather than using a static variable.
	All callers changed.
	(create_process): Recover pty_flag from process, not from volatile local.
	(create_pty): Stay inside array even when pty allocation fails.
	(Fmake_serial_process): Omit unnecessary initializaiton of pty_flag.

	* lread.c (Fload): Avoid initialization only when lint checking.
	Mention that it's needed only for older GCCs.

2013-07-20  Kenichi Handa  <handa@gnu.org>

	* coding.c (CODING_ISO_FLAG_LEVEL_4): New macro.
	(decode_coding_iso_2022): Check the single-shift area.  (Bug#8522)

2013-07-20  Andreas Schwab  <schwab@linux-m68k.org>

	* lread.c (Fload): Avoid uninitialized warning.

2013-07-19  Paul Eggert  <eggert@cs.ucla.edu>

	Fix some minor file descriptor leaks and related glitches.
	* filelock.c (create_lock_file) [!O_CLOEXEC]: Use fcntl with FD_CLOEXEC.
	(create_lock_file): Use write, not emacs_write.
	* image.c (slurp_file, png_load_body):
	* process.c (Fnetwork_interface_list, Fnetwork_interface_info)
	(server_accept_connection):
	Don't leak an fd on memory allocation failure.
	* image.c (slurp_file): Add a cheap heuristic for growing files.
	* xfaces.c (Fx_load_color_file): Block input around the fopen too,
	as that's what the other routines do.  Maybe input need not be
	blocked at all, but it's better to be consistent.
	Avoid undefined behavior when strlen is zero.

	* alloc.c (staticpro): Avoid buffer overrun on repeated calls.
	(NSTATICS): Now a constant; doesn't need to be a macro.

2013-07-19  Richard Stallman  <rms@gnu.org>

	* coding.c (decode_coding_utf_8): Add simple loop for fast
	processing of ASCII characters.

2013-07-19  Paul Eggert  <eggert@cs.ucla.edu>

	* conf_post.h (RE_TRANSLATE_P) [emacs]: Remove obsolete optimization.

2013-07-19  Eli Zaretskii  <eliz@gnu.org>

	* keyboard.c (kbd_buffer_get_event): Use Display_Info instead of
	unportable 'struct x_display_info'.
	(DISPLAY_LIST_INFO): Delete macro: not needed, since Display_Info
	is a portable type.

2013-07-19  Paul Eggert  <eggert@cs.ucla.edu>

	* sysdep.c [GNU_LINUX]: Fix fd and memory leaks and similar issues.
	(procfs_ttyname): Don't use uninitialized storage if emacs_fopen
	or fscanf fails.
	(system_process_attributes): Prefer plain char to unsigned char
	when either will do.  Clean up properly if interrupted or if
	memory allocations fail.  Don't assume sscanf succeeds.
	Remove no-longer-needed workaround to stop GCC from whining.
	Read command-line once, instead of multiple times.  Check read status a
	bit more carefully.

	Fix obscure porting bug with varargs functions.
	The code assumed that int is treated like ptrdiff_t in a vararg
	function, which is not a portable assumption.  There was a similar
	-- though these days less likely -- porting problem with various
	assumptions that pointers of different types all smell the same as
	far as vararg functions is conserved.  To make this problem less
	likely in the future, redo the API to use varargs functions.
	* alloc.c (make_save_value): Remove this vararg function.
	All uses changed to ...
	(make_save_int_int_int, make_save_obj_obj_obj_obj)
	(make_save_ptr_int, make_save_funcptr_ptr_obj, make_save_memory):
	New functions.
	(make_save_ptr): Rename from make_save_pointer, for consistency with
	the above.  Define only on platforms that need it.  All uses changed.

2013-07-18  Paul Eggert  <eggert@cs.ucla.edu>

	* keyboard.c: Try to fix typos in previous change.
	(DISPLAY_LIST_INFO): New macro.
	(kbd_buffer_get_event): Do not access members that are not present
	in X11.  Revert inadvertent change of "!=" to "=".

2013-07-18  Juanma Barranquero  <lekktu@gmail.com>

	* keyboard.c (kbd_buffer_get_event):
	* w32term.c (x_focus_changed): Port FOCUS_(IN|OUT)_EVENT changes to W32.
	Followup to 2013-07-16T11:41:06Z!jan.h.d@swipnet.se.

2013-07-18  Paul Eggert  <eggert@cs.ucla.edu>

	* filelock.c: Fix unlikely file descriptor leaks.
	(get_boot_time_1): Rework to avoid using emacs_open.
	This doesn't actually fix a leak, but is better anyway.
	(read_lock_data): Use read, not emacs_read.

	* doc.c: Fix minor memory and file descriptor leaks.
	* doc.c (get_doc_string): Fix memory leak when doc file absent.
	(get_doc_string, Fsnarf_documentation):
	Fix file descriptor leak on error.

	* term.c: Fix minor fdopen-related file descriptor leaks.
	* term.c (Fresume_tty) [!MSDOS]: Close fd if fdopen (fd) fails.
	(init_tty) [!DOS_NT]: Likewise.  Also close fd if isatty (fd) fails.

	* charset.c: Fix file descriptor leaks and errno issues.
	Include <errno.h>.
	(load_charset_map_from_file): Don't leak file descriptor on error.
	Use plain record_xmalloc since the allocation is larger than
	MAX_ALLOCA; that's simpler here.  Simplify test for exhaustion
	of entries.
	* eval.c (record_unwind_protect_nothing):
	* fileio.c (fclose_unwind):
	New functions.
	* lread.c (load_unwind): Remove.  All uses replaced by fclose_unwind.
	The replacement doesn't block input, but that no longer seems
	necessary.

2013-07-17  Paul Eggert  <eggert@cs.ucla.edu>

	* lread.c: Fix file descriptor leaks and errno issues.
	(Fload): Close some races that leaked fds or streams when 'load'
	was interrupted.
	(Fload, openp): Report error number of last nontrivial failure to open.
	ENOENT counts as trivial.
	* eval.c (do_nothing, clear_unwind_protect, set_unwind_protect_ptr):
	New functions.
	* fileio.c (close_file_unwind): No need to test whether FD is nonnegative,
	now that the function is always called with a nonnegative arg.
	* lisp.h (set_unwind_protect_ptr, set_unwind_protect_int): Remove.
	All uses replaced with ...
	(clear_unwind_protect, set_unwind_protect_ptr): New decls.

	A few more minor file errno-reporting bugs.
	* callproc.c (Fcall_process):
	* doc.c (Fsnarf_documentation):
	* fileio.c (Frename_file, Fadd_name_to_file, Fmake_symbolic_link):
	* process.c (set_socket_option):
	Don't let a constructor trash errno.
	* doc.c: Include <errno.h>.

2013-07-16  Juanma Barranquero  <lekktu@gmail.com>

	* w32fns.c (unwind_create_tip_frame): Fix declaration.

2013-07-16  Paul Eggert  <eggert@cs.ucla.edu>

	Fix w32 bug with call-process-region (Bug#14885).
	* callproc.c (Fcall_process_region): Pass nil, not "/dev/null",
	to Fcall_process when the input is empty.  This simplifies the
	code a bit.  It makes no difference on POSIXish platforms but
	apparently it fixes a bug on w32.

	Fix bug where insert-file-contents closes a file twice (Bug#14839).
	* fileio.c (close_file_unwind): Don't close if FD is negative;
	this can happen when unwinding a zapped file descriptor.
	(Finsert_file_contents): Unwind-protect the fd before the point marker,
	in case Emacs runs out of memory between the two unwind-protects.
	Don't trash errno when closing FD.
	Zap the FD in the specpdl when closing it, instead of deferring
	the removal of the unwind-protect; this fixes a bug where a child
	function unwinds the stack past us.

	New unwind-protect flavors to better type-check C callbacks.
	This also lessens the need to write wrappers for callbacks,
	and the need for make_save_pointer.
	* alloc.c (free_save_value):
	* atimer.c (run_all_atimers):
	Now extern.
	* alloc.c (safe_alloca_unwind):
	* atimer.c (unwind_stop_other_atimers):
	* keyboard.c (cancel_hourglass_unwind) [HAVE_WINDOW_SYSTEM]:
	* menu.c (cleanup_popup_menu) [HAVE_NS]:
	* minibuf.c (choose_minibuf_frame_1):
	* process.c (make_serial_process_unwind):
	* xdisp.c (pop_message_unwind):
	* xselect.c (queue_selection_requests_unwind):
	Remove no-longer-needed wrapper.  All uses replaced by the wrappee.
	* alloc.c (record_xmalloc):
	Prefer record_unwind_protect_ptr to record_unwind_protect with
	make_save_pointer.
	* alloc.c (Fgarbage_collect):
	Prefer record_unwind_protect_void to passing a dummy.
	* buffer.c (restore_buffer):
	* window.c (restore_window_configuration):
	* xfns.c, w32fns.c (do_unwind_create_frame)
	New wrapper.  All record-unwind uses of wrappee changed.
	* buffer.c (set_buffer_if_live):
	* callproc.c (call_process_cleanup, delete_temp_file):
	* coding.c (code_conversion_restore):
	* dired.c (directory_files_internal_w32_unwind) [WINDOWSNT]:
	* editfns.c (save_excursion_restore)
	(subst_char_in_region_unwind, subst_char_in_region_unwind_1)
	(save_restriction_restore):
	* eval.c (restore_stack_limits, un_autoload):
	* fns.c (require_unwind):
	* keyboard.c (recursive_edit_unwind, tracking_off):
	* lread.c (record_load_unwind, load_warn_old_style_backquotes):
	* macros.c (pop_kbd_macro, restore_menu_items):
	* nsfns.m (unwind_create_frame):
	* print.c (print_unwind):
	* process.c (start_process_unwind):
	* search.c (unwind_set_match_data):
	* window.c (select_window_norecord, select_frame_norecord):
	* xdisp.c (unwind_with_echo_area_buffer, unwind_format_mode_line)
	(fast_set_selected_frame):
	* xfns.c, w32fns.c (unwind_create_tip_frame):
	Return void, not a dummy Lisp_Object.  All uses changed.
	* buffer.h (set_buffer_if_live): Move decl here from lisp.h.
	* callproc.c (call_process_kill):
	* fileio.c (restore_point_unwind, decide_coding_unwind)
	(build_annotations_unwind):
	* insdel.c (Fcombine_after_change_execute_1):
	* keyboard.c (read_char_help_form_unwind):
	* menu.c (unuse_menu_items):
	* minibuf.c (run_exit_minibuf_hook, read_minibuf_unwind):
	* sound.c (sound_cleanup):
	* xdisp.c (unwind_redisplay):
	* xfns.c (clean_up_dialog):
	* xselect.c (x_selection_request_lisp_error, x_catch_errors_unwind):
	Accept no args and return void, instead of accepting and returning
	a dummy Lisp_Object.  All uses changed.
	* cygw32.c (fchdir_unwind):
	* fileio.c (close_file_unwind):
	* keyboard.c (restore_kboard_configuration):
	* lread.c (readevalllop_1):
	* process.c (wait_reading_process_output_unwind):
	Accept int and return void, rather than accepting an Emacs integer
	and returning a dummy object.  In some cases this fixes an
	unlikely bug when the corresponding int is outside Emacs integer
	range.  All uses changed.
	* dired.c (directory_files_internal_unwind):
	* fileio.c (do_auto_save_unwind):
	* gtkutil.c (pop_down_dialog):
	* insdel.c (reset_var_on_error):
	* lread.c (load_unwind):
	* xfns.c (clean_up_file_dialog):
	* xmenu.c, nsmenu.m (pop_down_menu):
	* xmenu.c (cleanup_widget_value_tree):
	* xselect.c (wait_for_property_change_unwind):
	Accept pointer and return void, rather than accepting an Emacs
	save value encapsulating the pointer and returning a dummy object.
	All uses changed.
	* editfns.c (Fformat): Update the saved pointer directly via
	set_unwind_protect_ptr rather than indirectly via make_save_pointer.
	* eval.c (specpdl_func): Remove.  All uses replaced by definiens.
	(unwind_body): New function.
	(record_unwind_protect): First arg is now a function returning void,
	not a dummy Lisp_Object.
	(record_unwind_protect_ptr, record_unwind_protect_int)
	(record_unwind_protect_void): New functions.
	(unbind_to): Support SPECPDL_UNWIND_PTR etc.
	* fileio.c (struct auto_save_unwind): New type.
	(do_auto_save_unwind): Use it.
	(do_auto_save_unwind_1): Remove; subsumed by new do_auto_save_unwind.
	* insdel.c (struct rvoe_arg): New type.
	(reset_var_on_error): Use it.
	* lisp.h (SPECPDL_UNWIND_PTR, SPECPDL_UNWIND_INT, SPECPDL_UNWIND_VOID):
	New constants.
	(specbinding_func): Remove; there are now several such functions.
	(union specbinding): New members unwind_ptr, unwind_int, unwind_void.
	(set_unwind_protect_ptr): New function.
	* xselect.c: Remove unnecessary forward decls, to simplify maintenance.

	Be simpler and more consistent about reporting I/O errors.
	* fileio.c (Fcopy_file, Finsert_file_contents, Fwrite_region):
	Say "Read error" and "Write error", rather than "I/O error", or
	"IO error reading", or "IO error writing", when a read or write
	error occurs.
	* process.c (Fmake_network_process, wait_reading_process_output)
	(send_process, Fprocess_send_eof, wait_reading_process_output):
	Capitalize diagnostics consistently.  Put "failed foo" at the
	start of the diagnostic, so that we don't capitalize the
	function name "foo".  Consistently say "failed" for such
	diagnostics.
	* sysdep.c, w32.c (serial_open): Now accepts Lisp string, not C string.
	All callers changed.  This is so it can use report_file_error.
	* sysdep.c (serial_open, serial_configure): Capitalize I/O
	diagnostics consistently as above.

	* fileio.c (report_file_errno): Fix errno reporting bug.
	If the file name is neither null nor a pair, package it up as a
	singleton list.  All callers changed, both to this function and to
	report_file_error.  This fixes a bug where the memory allocator
	invoked by list1 set errno so that the immediately following
	report_file_error reported the wrong errno value.

	Fix minor problems found by --enable-gcc-warnings.
	* frame.c (Fhandle_focus_in, Fhandle_focus_out): Return a value.
	* keyboard.c (kbd_buffer_get_event): Remove unused local.

2013-07-16  Jan Djärv  <jan.h.d@swipnet.se>

	* xterm.c (x_focus_changed): Always generate FOCUS_IN_EVENT.
	Set event->arg to Qt if switch-event shall be generated.
	Generate FOCUS_OUT_EVENT for FocusOut if this is the focused frame.

	* termhooks.h (enum event_kind): Add FOCUS_OUT_EVENT.

	* nsterm.m (windowDidResignKey): If this is the focused frame, generate
	FOCUS_OUT_EVENT.

	* keyboard.c (Qfocus_in, Qfocus_out): New static objects.
	(make_lispy_focus_in, make_lispy_focus_out): Declare and define.
	(kbd_buffer_get_event): For FOCUS_IN, make a focus_in event if no
	switch frame event is made.  Check ! NILP (event->arg) if X11 (moved
	from xterm.c).  Make focus_out event for FOCUS_OUT_EVENT if NS or X11
	and there is a focused frame.
	(head_table): Add focus-in and focus-out.
	(keys_of_keyboard): Add focus-in and focus-out to Vspecial_event_map,
	bind to handle-focus-in/out.

	* frame.c (Fhandle_focus_in, Fhandle_focus_out): New functions.
	(Fhandle_switch_frame): Call Fhandle_focus_in.
	(syms_of_frame): defsubr handle-focus-in/out.

2013-07-16  Paul Eggert  <eggert@cs.ucla.edu>

	Fix porting bug to older POSIXish platforms (Bug#14862).
	* sysdep.c (emacs_pipe): New function, that implements
	pipe2 (fd, O_CLOEXEC) even on hosts that lack O_CLOEXEC.
	This should port better to CentOS 5 and to Mac OS X 10.6.
	All calls to pipe2 changed.

	Prefer list1 (X) to Fcons (X, Qnil) when building lists.
	This makes the code easier to read and the executable a bit smaller.
	Do not replace all calls to Fcons that happen to create lists,
	just calls that are intended to create lists.  For example, when
	creating an alist that maps FOO to nil, use list1 (Fcons (FOO, Qnil))
	rather than list1 (list1 (FOO)) or Fcons (Fcons (FOO, Qnil), Qnil).
	Similarly for list2 through list5.
	* buffer.c (Fget_buffer_create, Fmake_indirect_buffer):
	* bytecode.c (exec_byte_code):
	* callint.c (quotify_arg, Fcall_interactively):
	* callproc.c (Fcall_process, create_temp_file):
	* charset.c (load_charset_map_from_file)
	(Fdefine_charset_internal, init_charset):
	* coding.c (get_translation_table, detect_coding_system)
	(Fcheck_coding_systems_region)
	(Fset_terminal_coding_system_internal)
	(Fdefine_coding_system_internal, Fdefine_coding_system_alias):
	* composite.c (update_compositions, Ffind_composition_internal):
	* dired.c (directory_files_internal, file_name_completion)
	(Fsystem_users):
	* dispnew.c (Fopen_termscript, bitch_at_user, init_display):
	* doc.c (Fsnarf_documentation):
	* editfns.c (Fmessage_box):
	* emacs.c (main):
	* eval.c (do_debug_on_call, signal_error, maybe_call_debugger)
	(Feval, eval_sub, Ffuncall, apply_lambda):
	* fileio.c (make_temp_name, Fcopy_file, Faccess_file)
	(Fset_file_selinux_context, Fset_file_acl, Fset_file_modes)
	(Fset_file_times, Finsert_file_contents)
	(Fchoose_write_coding_system, Fwrite_region):
	* fns.c (Flax_plist_put, Fyes_or_no_p, syms_of_fns):
	* font.c (font_registry_charsets, font_parse_fcname)
	(font_prepare_cache, font_update_drivers, Flist_fonts):
	* fontset.c (Fset_fontset_font, Ffontset_info, syms_of_fontset):
	* frame.c (make_frame, Fmake_terminal_frame)
	(x_set_frame_parameters, x_report_frame_params)
	(x_default_parameter, Fx_parse_geometry):
	* ftfont.c (syms_of_ftfont):
	* image.c (gif_load):
	* keyboard.c (command_loop_1):
	* keymap.c (Fmake_keymap, Fmake_sparse_keymap, access_keymap_1)
	(Fcopy_keymap, append_key, Fcurrent_active_maps)
	(Fminor_mode_key_binding, accessible_keymaps_1)
	(Faccessible_keymaps, Fwhere_is_internal):
	* lread.c (read_emacs_mule_char):
	* menu.c (find_and_return_menu_selection):
	* minibuf.c (get_minibuffer):
	* nsfns.m (Fns_perform_service):
	* nsfont.m (ns_script_to_charset):
	* nsmenu.m (ns_popup_dialog):
	* nsselect.m (ns_get_local_selection, ns_string_from_pasteboard)
	(Fx_own_selection_internal):
	* nsterm.m (append2):
	* print.c (Fredirect_debugging_output)
	(print_prune_string_charset):
	* process.c (Fdelete_process, Fprocess_contact)
	(Fformat_network_address, set_socket_option)
	(read_and_dispose_of_process_output, write_queue_push)
	(send_process, exec_sentinel):
	* sound.c (Fplay_sound_internal):
	* textprop.c (validate_plist, add_properties)
	(Fput_text_property, Fadd_face_text_property)
	(copy_text_properties, text_property_list, syms_of_textprop):
	* unexaix.c (report_error):
	* unexcoff.c (report_error):
	* unexsol.c (unexec):
	* xdisp.c (redisplay_tool_bar, store_mode_line_string)
	(Fformat_mode_line, syms_of_xdisp):
	* xfaces.c (set_font_frame_param)
	(Finternal_lisp_face_attribute_values)
	(Finternal_merge_in_global_face, syms_of_xfaces):
	* xfns.c (x_default_scroll_bar_color_parameter)
	(x_default_font_parameter, x_create_tip_frame):
	* xfont.c (xfont_supported_scripts):
	* xmenu.c (Fx_popup_dialog, xmenu_show, xdialog_show)
	(menu_help_callback, xmenu_show):
	* xml.c (make_dom):
	* xterm.c (set_wm_state):
	Prefer list1 (FOO) to Fcons (FOO, Qnil) when creating a list,
	and similarly for list2 through list5.

2013-07-15  Paul Eggert  <eggert@cs.ucla.edu>

	* callproc.c (Fcall_process_region): Fix minor race and tune.
	(create_temp_file): New function, with the temp-file-creation part
	of the old Fcall_process_region.  Use Fcopy_sequence to create the
	temp file name, rather than alloca + build_string, for simplicity.
	Don't bother to block input around the temp file creation;
	shouldn't be needed.  Simplify use of mktemp.
	Use record_unwind_protect immediately after creating the temp file;
	this closes an unlikely race where the temp file was not removed.
	Use memcpy rather than an open-coded loop.
	(Fcall_process_region): Use the new function.  If the input is
	empty, redirect from /dev/null rather than from a newly created
	empty temp file; this avoids unnecessary file system traffic.

2013-07-14  Paul Eggert  <eggert@cs.ucla.edu>

	* filelock.c (create_lock_file) [!HAVE_MKOSTEMP && !HAVE_MKSTEMP]:
	Simplify by making this case like the other two.  This is a bit
	slower on obsolete hosts, but the extra complexity isn't worth it.

	* callproc.c (child_setup, relocate_fd) [!DOS_NT]:
	* process.c (create_process) [!DOS_NT]:
	Remove now-unnecessary calls to emacs_close.

2013-07-13  Eli Zaretskii  <eliz@gnu.org>

	* w32term.c (x_draw_hollow_cursor): Delete the brush object when
	returning early.  (Bug#14850)

	* coding.c (syms_of_coding): Set up inhibit-null-byte-detection
	and inhibit-iso-escape-detection attributes of 'undecided'.
	(Bug#14822)

2013-07-13  Paul Eggert  <eggert@cs.ucla.edu>

	* deps.mk (sysdep.o): Remove dependency on ../lib/ignore-value.h.
	Reported by Herbert J. Skuhra in
	<https://lists.gnu.org/r/emacs-devel/2013-07/msg00455.html>.

	Don't lose top specpdl entry when memory is exhausted.
	* eval.c (grow_specpdl): Increment specpdl top by 1 and check for
	specpdl overflow here, to simplify callers; all callers changed.
	Always reserve an unused entry at the stack top; this avoids
	losing the top entry's information when memory is exhausted.

2013-07-12  Paul Eggert  <eggert@cs.ucla.edu>

	Clean up errno reporting and fix some errno-reporting bugs.
	* callproc.c (Fcall_process):
	* fileio.c (Fcopy_file, Finsert_file_contents, Fwrite_region):
	* process.c (create_process, Fmake_network_process):
	* unexaix.c (report_error):
	* unexcoff.c (report_error):
	Be more careful about reporting the errno of failed operations.
	The code previously reported the wrong errno sometimes.
	Also, prefer report_file_errno to setting errno + report_file_error.
	(Fcall_process): Look at openp return value rather than at path,
	as that's a bit faster and clearer when there's a numeric predicate.
	* fileio.c (report_file_errno): New function, with most of the
	old contents of report_file_error.
	(report_file_error): Use it.
	(Ffile_exists_p, Ffile_accessible_directory_p):
	Set errno to 0 when it is junk.
	* fileio.c (Faccess_file):
	* image.c (x_create_bitmap_from_file):
	Use faccessat rather than opening the file, to avoid the hassle of
	having a file descriptor open.
	* lisp.h (report_file_errno): New decl.
	* lread.c (Flocate_file_internal): File descriptor 0 is valid, too.

	Minor EBADF fixes.
	* process.c (create_process, wait_reading_process_output) [AIX]:
	Remove obsolete SIGHUP-related  code, as Emacs no longer disables
	SIGHUP, so EBADF is no longer acceptable here (it wouldn't work in
	a multithreaded environment anyway).
	* sysdep.c (emacs_close): It's not dangerous to invoke emacs_close (-1).

2013-07-12  Andreas Schwab  <schwab@linux-m68k.org>

	* image.c (x_find_image_file): Don't close a remote file handle.

2013-07-12  Paul Eggert  <eggert@cs.ucla.edu>

	Fix races with threads and file descriptors.
	* callproc.c (Fcall_process_region):
	* dired.c (open_directory):
	* emacs.c (main, Fdaemon_initialized):
	* image.c (x_find_image_file):
	* inotify.c (Finotify_rm_watch):
	* lread.c (Flocate_file_internal):
	* process.c (Fnetwork_interface_list, Fnetwork_interface_info):
	* term.c (term_mouse_moveto, init_tty):
	* termcap.c (tgetent):
	* unexaix.c, unexcoff.c (report_error, report_error_1, adjust_lnnoptrs)
	* unexaix.c, unexcoff.c, unexcw.c, unexelf.c (unexec):
	* unexhp9k800.c, unexmacosx.c (unexec):
	* callproc.c (Fcall_process_region):
	Use emacs_close, not close.
	* sysdep.c (POSIX_CLOSE_RESTART, posix_close) [!POSIX_CLOSE_RESTART]:
	New macro and function, which emulates the POSIX_CLOSE_RESTART macro
	and posix_close function on current platforms (which all lack them).
	(emacs_close): Use it.  This should fix the races on GNU/Linux and
	on AIX and on future platforms that support POSIX_CLOSE_RESTART,
	and it should avoid closing random victim file descriptors on
	other platforms.

2013-07-11  Paul Eggert  <eggert@cs.ucla.edu>

	* inotify.c (uninitialized): Remove.  All uses replaced by -1.
	(Finotify_add_watch): Simplify, since -1 means uninitialized now.
	Touch up doc a bit.

	* eval.c (backtrace_function, backtrace_args): Now EXTERNALLY_VISIBLE.
	This is for .gdbinit xbacktrace.

	* sysdep.c, term.c, termcap.c, terminal.c: Integer-related minor fixes.
	* sysdep.c (emacs_get_tty): Return void, since nobody uses the value.
	(emacs_set_tty): Now static.
	* sysdep.c (emacs_set_tty, tabs_safe_p, emacs_close):
	* term.c (tty_capable_p, tty_default_color_capabilities)
	(get_tty_terminal, term_mouse_movement)
	(handle_one_term_event, init_tty, maybe_fatal):
	* termcap.c (tgetst1, struct termcap_buffer, valid_filename_p)
	(tgetent, scan_file, name_match, compare_contin):
	* terminal.c (get_terminal):
	Use bool for boolean.
	* sysdep.c (init_system_name): Don't overflow stack on huge hostname.
	Prefer char to unsigned char if either will do.
	* term.c (OUTPUT, turn_on_face): Omit unnecessary casts to int.
	(tty_write_glyphs): Prefer int to unsigned.
	(produce_glyphless_glyph): Remove 2nd (unused) int arg.
	All callers changed.
	* termcap.c (tprint, main) [TEST]: Remove non-working test.

2013-07-10  Paul Eggert  <eggert@cs.ucla.edu>

	Port to C89.
	* bytecode.c (BYTE_CODE_THREADED): Do not define if __STRICT_ANSI__.
	(B__dummy__): New dummy symbol, to pacify C89.
	* dbusbind.c (XD_DEBUG_MESSAGE): Omit debugging on C89 hosts, since
	they can't grok varargs macros.
	* dispnew.c (add_window_display_history)
	(add_frame_display_history):
	* print.c (print_object):
	* xdisp.c (debug_method_add):
	Use %p printf format only for void pointers.
	* emacs.c (usage_message): New constant, replacing ...
	(USAGE1, USAGE2, USAGE3): Remove; they were too long for C89.
	(main): Adjust to usage reorg.
	* fns.c (syms_of_fns):
	* profiler.c (syms_of_profiler):
	Don't use non-constant struct initializers.
	* gnutls.h (gnutls_initstage_t):
	* lisp.h (enum Lisp_Fwd_Type):
	* lread.c (lisp_file_lexically_bound_p):
	* xsettings.c (anonymous enum):
	Remove trailing comma.
	* xsettings.c (apply_xft_settings): Use %f, not %lf; %lf is a C99ism.
	* lisp.h (ENUM_BF): Use unsigned if pedantic.
	(DEFUN_FUNCTION_INIT): New macro, that falls back on a cast if pre-C99.
	(DEFUN): Use it.
	* regex.c (const_re_char): New type, to pacify strict C89.
	All uses of 'const re_char' replaced to use it.
	* regex.h (_Restrict_): Rename from __restrict, to avoid clash
	with glibc when strict C89.  This change is imported from gnulib.
	All uses changed.
	(_Restrict_arr_): Rename from __restrict_arr, similarly.
	* sysdep.c (time_from_jiffies) [!HAVE_LONG_LONG_INT]:
	Omit GNU_LINUX implementation, since it requires long long.
	* xterm.c (x_draw_underwave):
	Do not assume the traditional order of struct's members.
	(x_term_init): Rewrite to avoid the need for non-constant structure
	initializers.

	Syntax cleanup, mostly replacing macros with functions.
	This removes the need for the syntax_temp hack.
	* search.c: Include syntax.h after buffer.h, since syntax.h uses BVAR.
	* syntax.c (SYNTAX_INLINE): New macro.
	(SYNTAX_FLAGS_COMSTART_FIRST, SYNTAX_FLAGS_COMSTART_SECOND)
	(SYNTAX_FLAGS_COMEND_FIRST, SYNTAX_FLAGS_COMEND_SECOND)
	(SYNTAX_FLAGS_PREFIX, SYNTAX_FLAGS_COMMENT_STYLEB)
	(SYNTAX_FLAGS_COMMENT_STYLEC, SYNTAX_FLAGS_COMMENT_STYLEC2)
	(SYNTAX_FLAGS_COMMENT_NESTED, SYNTAX_FLAGS_COMMENT_STYLE)
	(SYNTAX_COMEND_FIRST): Now functions, not macros.
	(ST_COMMENT_STYLE, ST_STRING_STYLE, INTERVALS_AT_ONCE):
	Now constants, not macros.
	(syntax_temp) [!__GNUC__]: Remove.
	(SYNTAX_PREFIX): Remove; all uses replaced by syntax_prefix_flag_p.
	(syntax_prefix_flag_p): Move implementation of SYNTAX_PREFIX here.
	(SET_RAW_SYNTAX_ENTRY, SET_RAW_SYNTAX_ENTRY_RANGE, SYNTAX_MATCH)
	(SETUP_SYNTAX_TABLE, SETUP_SYNTAX_TABLE_FOR_OBJECT):
	Move here from syntax.h; now functions, not macros.  Except for the
	last function, these are static since only syntax.c uses them.
	(syntax_multibyte): Rename from SYNTAX_WITH_MULTIBYTE_CHECK.
	All uses changed.  Now a function, not a macro; use this fact
	to simplify the code.
	(scan_lists, scan_sexps_forward): Remove workarounds for ancient
	compiler bugs; no longer relevant.
	* syntax.h: Use INLINE_HEADER_BEGIN, INLINE_HEADER_END.
	(SYNTAX_INLINE): New macro.
	(struct gl_state_s, gl_state): Move earlier, so that it's in scope
	for the new functions.  Use bool for boolean member.
	(SYNTAX_ENTRY, SYNTAX, SYNTAX_WITH_FLAGS, SYNTAX_MATCH)
	(SYNTAX_TABLE_BYTE_TO_CHAR, UPDATE_SYNTAX_TABLE_FORWARD)
	(UPDATE_SYNTAX_TABLE_BACKWARD, UPDATE_SYNTAX_TABLE)
	(SETUP_BUFFER_SYNTAX_TABLE):
	Now extern inline functions, not macros.
	(CURRENT_SYNTAX_TABLE, SYNTAX_ENTRY_INT):
	Remove; all uses replaced by implementation.
	(syntax_temp) [!__GNUC__]: Remove decl.
	(SETUP_SYNTAX_TABLE_FOR_OBJECT): New decl.

2013-07-10  Jan Djärv  <jan.h.d@swipnet.se>

	* emacs.c (main): Fix syntax error.

2013-07-10  Paul Eggert  <eggert@cs.ucla.edu>

	Timestamp fixes for undo (Bug#14824).
	* atimer.c (schedule_atimer):
	* fileio.c (Ffile_newer_than_file_p):
	Minor cleanup: use EMACS_TIME_LT so that we can remove EMACS_TIME_GT.
	* buffer.c (buffer-undo-list): Document (t . 0) and (t . -1).
	* fileio.c (Fclear_visited_file_modtime): Move to lisp/files.el.
	(syms_of_fileio): Remove Sclear_visited_file_name.
	(Fvisited_file_modtime): Return -1, not (-1 ...), when the visited
	file doesn't exist; this avoids an ambiguity with negative timestamps.
	(Fset_visited_file_modtime): Accept -1 and 0 as time-list arg.
	* systime.h (make_emacs_time, invalid_emacs_time):
	Don't assume struct timespec layout; POSIX doesn't guarantee it.
	(EMACS_TIME_NE, EMACS_TIME_GT, EMACS_TIME_GE): Remove.
	* undo.c (record_first_change): Push (visited-file-modtime) onto
	undo list rather than reimplementing it by hand, incorrectly.

2013-07-09  Ken Brown  <kbrown@cornell.edu>

	* sheap.c (STATIC_HEAP_SIZE) [__x86_64__]: Increase to 18MB.

2013-07-09  Juanma Barranquero  <lekktu@gmail.com>

	* makefile.w32-in ($(BLD)/emacs.$(O), $(BLD)/sysdep.$(O)): Update.

2013-07-09  Paul Eggert  <eggert@cs.ucla.edu>

	Handle errno and exit status a bit more carefully.
	* callproc.c (child_setup) [!DOS_NT]: Don't try to stuff an error
	number into an exit status.  Instead, use EXIT_CANCELED.
	(child_setup) [!MSDOS]: Avoid possible deadlock with vfork.
	* callproc.c (relocate_fd):
	* emacs.c (close_output_streams, main):
	* process.c (create_process):
	* sysdep.c (sys_subshell) [!DOS_NT || !WINDOWSNT]:
	Use emacs_perror for simplicity.
	* callproc.c (relocate_fd, main):
	* sysdep.c (sys_subshell):
	Exit with EXIT_CANCELED etc., not 1, when exec setup fails.
	(shut_down_emacs): Use emacs_write, not write.
	* emacs.c, sysdep.c: Don't include <ignore-value.h>.
	* fileio.c (Fcopy_file, e_write):
	* nsterm.m (ns_select):
	* process.c (send_process):
	* sound.c (vox_write):
	Use emacs_write_sig, not emacs_write.
	* lisp.h (emacs_write_sig, emacs_perror): New decls.
	* process.h (EXIT_CANCELED), EXIT_CANNOT_INVOKE, EXIT_ENOENT):
	New constants.
	* sysdep.c (emacs_backtrace): Use emacs_write, not ignore_value
	of write.
	(emacs_full_write): New function.
	(emacs_write): Rewrite to use it.
	(emacswrite_sig, emacs_perror): New functions.
	* xrdb.c (fatal): Don't invoke perror, since errno might be garbage.

2013-07-08  Magnus Henoch  <magnus.henoch@gmail.com>  (tiny change)

	* image.c (imagemagick_load_image): Do not use MagickExportImagePixels
	on NS even if it is present.  Pixmap on NS is a void*.

2013-07-07  Paul Eggert  <eggert@cs.ucla.edu>

	Port to Ubuntu 10 (Bug#14803).  Reported by T.V. Raman.
	* process.c (close_on_exec, accept4, process_socket):
	Define these if !HAVE_ACCEPT4, not if !SOCK_CLOEXEC.

2013-07-07  Eli Zaretskii  <eliz@gnu.org>

	* w32.c (sys_dup): Declare prototype.

	* filelock.c:
	* emacs.c:
	* callproc.c [WINDOWSNT]: Include sys/socket.h.

2013-07-07  Paul Eggert  <eggert@cs.ucla.edu>

	Make file descriptors close-on-exec when possible (Bug#14803).
	This simplifies Emacs a bit, since it no longer needs to worry
	about closing file descriptors by hand in some cases.
	It also fixes some unlikely races.  Not all such races, as
	libraries often open files internally without setting
	close-on-exec, but it's an improvement.
	* alloc.c (valid_pointer_p) [!WINDOWSNT]:
	* callproc.c (Fcall_process) [!MSDOS]:
	* emacs.c (main) [!DOS_NT]:
	* nsterm.m (ns_term_init):
	* process.c (create_process):
	Use 'pipe2' with O_CLOEXEC instead of 'pipe'.
	* emacs.c (Fcall_process_region) [HAVE_MKOSTEMP]:
	* filelock.c (create_lock_file) [HAVE_MKOSTEMP]:
	Prefer mkostemp with O_CLOEXEC to mkstemp.
	* callproc.c (relocate_fd) [!WINDOWSNT]:
	* emacs.c (main): Use F_DUPFD_CLOEXEC, not plain F_DUPFD.
	No need to use fcntl (..., F_SETFD, FD_CLOEXEC), since we're
	now using pipe2.
	* filelock.c (create_lock_file) [! HAVE_MKOSTEMP]:
	Make the resulting file descriptor close-on-exec.
	* lisp.h, lread.c, process.c (close_load_descs, close_process_descs):
	* lread.c (load_descriptor_list, load_descriptor_unwind):
	Remove; no longer needed.  All uses removed.
	* process.c (SOCK_CLOEXEC): Define to 0 if not supplied by system.
	(close_on_exec, accept4, process_socket) [!SOCK_CLOEXEC]:
	New functions.
	(socket) [!SOCK_CLOEXEC]: Supply a substitute.
	(Fmake_network_process, Fnetwork_interface_list)
	(Fnetwork_interface_info, server_accept_connection):
	Make newly-created socket close-on-exec.
	* sysdep.c (emacs_open, emacs_fopen):
	Make new-created descriptor close-on-exec.
	* w32.c (fcntl): Support F_DUPFD_CLOEXEC well enough for Emacs.
	* w32.c, w32.h (pipe2): Rename from 'pipe', with new flags arg.

2013-07-07  Jan Djärv  <jan.h.d@swipnet.se>

	* nsterm.m (sendEvent:): Propagate keyboard events to modal windows
	for NS_IMPL_GNUSTEP.

2013-07-07  Paul Eggert  <eggert@cs.ucla.edu>

	Fix openp errno handling.
	* callproc.c (Fcall_process): Preserve openp errno around close.
	* lread.c (openp): Set errno when returning -1, as some callers
	expect this.

2013-07-06  Jan Djärv  <jan.h.d@swipnet.se>

	* nsterm.m (sendEvent:): Handle NSAPP_DATA2_RUNFILEDIALOG.

	* nsterm.h (NSSavePanel): Update comment.
	(NSAPP_DATA2_RUNFILEDIALOG): Define.
	(ns_run_file_dialog): Declare.

	* nsfns.m: Remove panelOK.
	(ns_fd_data): New.
	(ns_run_file_dialog): New function.
	(Fns_read_file_name): Fill in ns_fd_data, post an event and start the
	event loop, so file dialog is popped up by ns_run_file_dialog, called
	by sendEvent (Bug#14578).
	(EmacsSavePanel, EmacsOpenPanel): Remove ok and cancel methods.

2013-07-06  Eli Zaretskii  <eliz@gnu.org>

	* xdisp.c (default_line_pixel_height): New function.
	(pos_visible_p, move_it_vertically_backward, try_scrolling)
	(try_cursor_movement, redisplay_window, try_window)
	(try_window_id): Use it instead of FRAME_LINE_HEIGHT.  (Bug#14771)

	* window.c (window_scroll_pixel_based):
	use default_line_pixel_height.

	* dispextern.h (default_line_pixel_height): Add prototype.

	* frame.c (x_set_line_spacing): Accept a float value for
	line-spacing parameter, per the documentation.

	* data.c (Fmultibyte_string_p): Doc fix.

2013-07-05  Paul Eggert  <eggert@cs.ucla.edu>

	Use emacs_open more consistently when opening files.
	This handles EINTR more consistently now, and makes it easier
	to introduce other uniform changes to file descriptor handling.
	* sysstdio.h: New file.
	* buffer.c (mmap_init):
	* cygw32.c (chdir_to_default_directory):
	* dispnew.c (Fopen_termscript):
	* emacs.c (Fdaemon_initialized):
	* fileio.c (Fdo_auto_save):
	* image.c (slurp_file, png_load_body, jpeg_load_body):
	* keyboard.c (Fopen_dribble_file):
	* lread.c (Fload):
	* print.c (Fredirect_debugging_output):
	* sysdep.c (get_up_time, procfs_ttyname, procfs_get_total_memory):
	* termcap.c (tgetent):
	* unexaix.c, unexcoff.c (unexec, adjust_lnnoptrs):
	* unexcw.c, unexelf.c, unexhp9k800.c, unexmacosx.c (unexec):
	* w32term.c (w32_initialize) [CYGWIN]:
	* xfaces.c (Fx_load_color_file):
	Use emacs_open instead of plain open, and emacs_fopen instead of
	plain fopen.
	* dispnew.c, fileio.c, image.c, keyboard.c, lread.c, print.c, sysdep.c:
	* xfaces.c: Include sysstdio.h rather than stdio.h, for emacs_fopen.
	* callproc.c (default_output_mode): New constant.
	(Fcall_process): Use it to call emacs_open instead of plain creat.
	* dispnew.c (Fopen_termscript): Fix minor race in opening termscript.
	* sysdep.c (emacs_open): Add commentary and don't call file name "path".
	(emacs_fopen): New function.
	* unexaix.c, unexcoff.c, unexelf.c, unexhp9k800.c, unexmacosx.c:
	Include <lisp.h>, for emacs_open.
	* unexelf.c (fatal): Remove decl; not needed with <lisp.h> included.

	Remove duplicate #include directives.
	* alloc.c [GC_MARK_STACK == GC_USE_GCPROS_CHECK_ZOMBIES]:
	* xfaces.c:
	Don't include stdio.h twice.
	* buffer.c [USE_MMAP_FOR_BUFFERS]:
	Don't include sys/types.h or stdio.h twice.
	* fileio.c [WINDOWSNT | MSDOS]: Don't include fcntl.h twice.
	* lread.c: Don't include coding.h twice.
	* nsfont.m: Don't include frame.h twice.
	* process.c [HAVE_RES_INIT]: Don't include <netinet/in.h> twice.
	* ralloc.c: Don't include <unistd.h> twice.
	* xdisp.c: Don't include font.h twice.
	* xterm.c: Don't include fontset.h twice.
	* xterm.h [USE_X_TOOLKIT]: Don't include X11/StringDefs.h twice.

2013-07-04  Paul Eggert  <eggert@cs.ucla.edu>

	Scale ImageMagick images more carefully.
	* image.c (scale_image_size) [HAVE_IMAGEMAGICK]: New function.
	(compute_image_size): Use it.  Define only if HAVE_IMAGEMAGICK.
	Be more careful about avoiding undefined behavior after
	integer overflow and division by zero.

2013-07-04  YAMAMOTO Mitsuharu  <mituharu@math.s.chiba-u.ac.jp>

	* w32fns.c (Qgeometry, Qworkarea, Qmm_size, Qframes): New variables.
	(syms_of_w32fns): DEFSYM them.
	(MONITORINFOF_PRIMARY, SM_XVIRTUALSCREEN, SM_YVIRTUALSCREEN)
	(CCHDEVICENAME): Define macros if not defined.
	(struct MONITOR_INFO_EX): New struct.
	(MonitorEnum_Proc, EnumDisplayMonitors_Proc): New prototypes.
	(enum_display_monitors_fn): New variable.
	(globals_of_w32fns): Initialize it.
	(Fx_display_pixel_width, Fx_display_pixel_height)
	(Fx_display_mm_height, Fx_display_mm_width): Mention behavior on
	multi-monitor setups in docstrings.
	(Fx_display_mm_height, Fx_display_mm_width): Approximate whole
	screen size by primary monitor's millimeter per pixel.
	(w32_monitor_enum, w32_display_monitor_attributes_list)
	(w32_display_monitor_attributes_list_fallback)
	(Fw32_display_monitor_attributes_list): New functions.
	(syms_of_w32fns): Defsubr Sw32_display_monitor_attributes_list.

	* w32term.c (SM_CXVIRTUALSCREEN, SM_CYVIRTUALSCREEN): Define macros
	if not defined.
	(x_display_pixel_height, x_display_pixel_width): Use GetSystemMetrics.

2013-07-04  Michael Albinus  <michael.albinus@gmx.de>

	* fileio.c (Qfile_notify_error): New error symbol.

	* gfilenotify.c (Fgfile_add_watch, Fgfile_rm_watch):
	* inotify.c (inotify_callback, symbol_to_inotifymask)
	(Finotify_add_watch, Finotify_rm_watch): Use it.
	(inotifyevent_to_event): Exchange order of cookie and file name.
	(Finotify_add_watch): Adapt docstring.

	* lisp.h (Qfile_notify_error): Declare.

2013-07-04  Paul Eggert  <eggert@cs.ucla.edu>

	Try again to fix FreeBSD bug re multithreaded memory alloc (Bug#14569).
	* emacs.c (main) [HAVE_PTHREAD && !SYSTEM_MALLOC && !DOUG_LEA_MALLOC]:
	Do not clear _malloc_thread_enabled_p, undoing the previous change,
	which did not work (see <https://bugs.gnu.org/14569#307>).
	(main): Do not invoke malloc_enable_thread if (! CANNOT_DUMP
	&& (!noninteractive || initialized)).  This attempts to thread
	the needle between the Scylla of FreeBSD and the Charybdis of Cygwin.

2013-07-04  Juanma Barranquero  <lekktu@gmail.com>

	* image.c (x_to_xcolors) [HAVE_NTGUI]: Remove unused var `hdc'.
	(x_build_heuristic_mask) [HAVE_NTGUI]: Remove unused var `frame_dc'.

2013-07-04  Paul Eggert  <eggert@cs.ucla.edu>

	Try to fix FreeBSD bug re multithreaded memory allocation (Bug#14569).
	* emacs.c (main) [HAVE_PTHREAD && !SYSTEM_MALLOC && !DOUG_LEA_MALLOC]:
	Clear _malloc_thread_enabled_p at startup.  Reported by Ashish SHUKLA in
	<https://lists.gnu.org/r/emacs-devel/2013-07/msg00088.html>.

2013-07-02  Paul Eggert  <eggert@cs.ucla.edu>

	* sysdep.c (sys_siglist) [HAVE_DECL___SYS_SIGLIST]:
	Define to __sys_siglist.

2013-07-02  Eli Zaretskii  <eliz@gnu.org>

	* xdisp.c (IT_OVERFLOW_NEWLINE_INTO_FRINGE): Don't disallow
	word-wrap, so that overflow-newline-into-fringe would work in
	visual-line-mode.  (Bug#2749)
	(move_it_in_display_line_to): When the last scanned display
	element fits exactly on the display line, and
	overflow-newline-into-fringe is non-nil, but wrap_it is valid,
	don't return MOVE_NEWLINE_OR_CR, but instead back up to the last
	wrap point and return MOVE_LINE_CONTINUED.  Fixes problems with
	finding buffer position that corresponds to pixel coordinates,
	e.g. in buffer_posn_from_coords.

2013-07-02  Jan Djärv  <jan.h.d@swipnet.se>

	* process.c (handle_child_signal): Call catch_child_signal if
	NS_IMPL_GNUSTEP.

2013-07-02  Paul Eggert  <eggert@cs.ucla.edu>

	Don't convert function pointers to void * and back.
	It isn't portable C, and it's easy enough to avoid.
	* alloc.c: Verify SAVE_FUNCPOINTER bits, too.
	(make_save_value): Add support for SAVE_FUNCPOINTER.
	* keymap.c (map_keymap_char_table_item, map_keymap_internal):
	* print.c (print_object):
	Distinguish function from object pointers.
	* lisp.h (SAVE_FUNCPOINTER): New constant.
	(SAVE_SLOT_BITS): Adjust to it.
	(SAVE_TYPE_FUNCPTR_PTR_OBJ): New constant, replacing
	SAVE_TYPE_PTR_PTR_OBJ.  Change the only use.
	(voidfuncptr): New typedef.
	(struct Lisp_Save_Value): New member data[0].funcpointer.
	(XSAVE_FUNCPOINTER): New function.

	Simplify buildobj processing.
	* Makefile.in (buildobj.h): Make it a sequence of strings each
	followed by comma, rather than a single string.  Put it into a
	.tmp file in case there's an error while generating it.
	(gl-stamp): Use .tmp for temp files.
	(mostlyclean): Clean .tmp files.
	* doc.c (buildobj): Move to just the routine that needs it.
	It's now an array of strings, so processing is simpler.

2013-07-01  Paul Eggert  <eggert@cs.ucla.edu>

	Fix bug re noninteractive multithreaded memory allocation (Bug#14569).
	* emacs.c (malloc_enable_thread): Hoist extern decl to top level.
	(main) [HAVE_PTHREAD && !SYSTEM_MALLOC && !DOUG_LEA_MALLOC]:
	Invoke malloc_enable_thread even when not interactive.
	Reported by Ken Brown in <https://bugs.gnu.org/14569#275>.
	* process.c (init_process_emacs) [CYGWIN]: Tickle glib even
	in this case, since the underlying bug has now been fixed.

2013-07-01  Juanma Barranquero  <lekktu@gmail.com>

	* emacs.c (Fkill_emacs): Expand Vauto_save_list_file_name before
	unlinking it (bug#14691).

2013-06-30  Michal Nazarewicz  <mina86@mina86.com>

	* buffer.c (FKill_buffer): Run `kill-buffer-query-functions'
	before checking whether buffer is modified.  This lets
	`kill-buffer-query-functions' cancel killing of the buffer or save
	its content before `kill-buffer' asks user the "Buffer %s
	modified; kill anyway?" question.

2013-06-30  Jan Djärv  <jan.h.d@swipnet.se>

	* nsfns.m (handlePanelKeys): Don't process Command+Function keys.
	Let the super performKeyEquivalent deal with them (Bug#14747).

2013-06-30  Paul Eggert  <eggert@cs.ucla.edu>

	* widget.c (resize_cb): Remove unused local.

	Do not use GTK 3 if it exists but cannot be compiled.
	* xmenu.c (x_menu_wait_for_event) [!USE_GTK]:
	* xterm.c (x_error_handler) [!USE_GTK]:
	Do not use GTK 3.

	* intervals.c (get_local_map): Actually clip POSITION (Bug#14753).

2013-06-30  Eli Zaretskii  <eliz@gnu.org>

	* intervals.c (get_local_map): Instead of aborting, clip POSITION
	to the valid range of values.  (Bug#14753)

	* xdisp.c (Fmove_point_visually): Invalidate the cursor position
	when moving point by using the current glyph matrix.  This avoids
	the need to force redisplay when this function is called in a
	loop.

2013-06-29  Paul Eggert  <eggert@cs.ucla.edu>

	Fix minor problems found by static checking.
	* coding.c (encode_inhibit_flag, inhibit_flag): New functions.
	Redo the latter's body to sidestep GCC parenthesization warnings.
	(setup_coding_system, detect_coding, detect_coding_system): Use them.
	* coding.c (detect_coding, detect_coding_system):
	* coding.h (struct undecided_spec):
	Use bool for boolean.
	* image.c (QCmax_width, QCmax_height): Now static.
	* xdisp.c (Fmove_point_visually): Remove unused local.

2013-06-29  Eli Zaretskii  <eliz@gnu.org>

	* xdisp.c (Fmove_point_visually): New function.

2013-06-28  Kenichi Handa  <handa@gnu.org>

	* coding.h (define_coding_undecided_arg_index): New enum.
	(coding_attr_index): New members
	coding_attr_undecided_inhibit_null_byte_detection,
	coding_attr_undecided_inhibit_iso_escape_detection,
	coding_attr_undecided_prefer_utf_8.
	(undecided_spec): New struct.
	(struct coding_system): New member `undecided' of the member
	`spec'.

	* coding.c (setup_coding_system): Handle CODING->spec.undecided.
	(detect_coding): Likewise.
	(detect_coding_system): Likewise.
	(Fdefine_coding_system_internal): New coding system properties
	:inhibit-null-byte-detection, :inhibit-iso-escape-detection, and
	:prefer-utf-8.
	(syms_of_coding): Adjust for coding_arg_undecided_max.

2013-06-28  Paul Eggert  <eggert@cs.ucla.edu>

	* image.c (x_from_xcolors): Remove unused local.

2013-06-28  YAMAMOTO Mitsuharu  <mituharu@math.s.chiba-u.ac.jp>

	Defer image data transfer between X client and server until actual
	display happens.

	* dispextern.h (struct image) [HAVE_X_WINDOWS]: New members `ximg'
	and `mask_img'.

	* image.c (Destroy_Image): Remove.
	(x_clear_image_1): New arg `flags' instead of 3 bools `pixmap_p',
	`mask_p', and `colors_p'.  All uses changed.
	(x_clear_image_1) [HAVE_X_WINDOWS]: Destroy `ximg' and `mask_img'.
	(CLEAR_IMAGE_PIXMAP, CLEAR_IMAGE_MASK, CLEAR_IMAGE_COLORS):
	New macros for `flags' arg to x_clear_image_1.
	(postprocess_image, xpm_load_image, x_build_heuristic_mask)
	(png_load_body): Use x_clear_image_1 instead of Free_Pixmap.
	(ZPixmap, XGetImage) [HAVE_NS]: Remove.
	(image_get_x_image_or_dc, image_unget_x_image_or_dc)
	(image_get_x_image, image_unget_x_image): New functions or macros.
	(image_background, image_background_transparent, x_to_xcolors)
	(x_build_heuristic_mask): Use image_get_x_image_or_dc instead of
	XGetImage or CreateCompatibleDC.  Use image_unget_x_image_or_dc
	instead of Destroy_Image.
	(image_create_x_image_and_pixmap, image_put_x_image): New functions.
	(xpm_load_image, x_from_xcolors, x_build_heuristic_mask, pbm_load)
	(png_load_body, jpeg_load_body, tiff_load, gif_load)
	(imagemagick_load_image, svg_load_image): Use them instead of
	x_create_x_image_and_pixmap, and x_put_x_image followed by
	x_destroy_x_image, respectively.
	(xpm_load) [HAVE_XPM && !HAVE_NTGUI]: Use XpmReadFileToImage and
	XpmCreateImageFromBuffer instead of XpmReadFileToPixmap and
	XpmCreatePixmapFromBuffer.  Create pixmaps.  Fill background and
	background_transparent fields.
	(image_sync_to_pixmaps) [HAVE_X_WINDOWS]: New function.
	(prepare_image_for_display, x_disable_image) [HAVE_X_WINDOWS]: Use it.

2013-06-27  Paul Eggert  <eggert@cs.ucla.edu>

	Do not tickle glib SIGCHLD handling if Cygwin (Bug#14569).
	This mostly consists of undoing recent changes.
	* callproc.c (Fcall_process):
	* process.c (create_process):
	Do not worry about catching SIGCHLD here, undoing previous change.
	* nsterm.m (ns_term_init): Re-catch SIGCHLD, undoing previous change.
	* process.c, process.h (catch_child_signal):
	No longer extern if !NS_IMPL_GNUSTEP, undoing 06-22 change.
	* process.c (catch_child_handler): Don't worry about being called
	lazily and do not assume caller has blocked SIGCHLD, undoing
	previous change.  Move first-time stuff back to
	init_process_emacs, undoing 06-22 change.  If CYGWIN, do not
	tickle glib, as that causes Cygwin bootstrap to fail.  Do not
	set lib_child_handler if it's already initialized, which may
	help avoid problems on GNUstep.

2013-06-23  Paul Eggert  <eggert@cs.ucla.edu>

	A more-conservative workaround for Cygwin SIGCHLD issues (Bug#14569).
	* callproc.c (Fcall_process):
	* process.c (create_process):
	Make sure SIGCHLD is caught before we fork,
	since Emacs startup no arranges to catch SIGCHLD.
	* process.c (lib_child_handler): Initialize to null, not to
	dummy_handler.
	(catch_child_signal): Allow self to be called lazily.
	Do nothing if it's already been called.
	Assume caller has blocked SIGCHLD (all callers do now).
	* emacs.c (main): Do not catch SIGCHLD here; defer it until
	just before it's really needed.
	* nsterm.m (ns_term_init): No need to re-catch SIGCHLD here,
	since it hasn't been caught yet.

2013-06-23  Lars Magne Ingebrigtsen  <larsi@gnus.org>

	* image.c (compute_image_size): New function to implement
	:max-width and :max-height.
	(imagemagick_load_image): Use it.

2013-06-23  Paul Eggert  <eggert@cs.ucla.edu>

	Try to avoid malloc SEGVs on Cygwin (Bug#14569).
	* callproc.c, process.h (block_child_signal, unblock_child_signal):
	Now extern.
	* emacs.c (main): Catch SIGCHLD just before initializing gfilenotify.
	* process.c (catch_child_signal): Block SIGCHLD while futzing with
	the SIGCHLD handler, since the code is not atomic and (due to glib)
	signals may be arriving now.
	* sysdep.c (init_signals): Do not catch child signals here;
	'main' now does that later, at a safer time.

2013-06-22  Paul Eggert  <eggert@cs.ucla.edu>

	Clean up SIGCHLD handling a bit (Bug#14569).
	* process.c, process.h (catch_child_signal):
	Now always extern, even if !NS_IMPL_GNUSTEP.
	* process.c (catch_child_signal): Move glib tickler here from
	init_process_emacs, so that it's done earlier in Emacs
	initialization.  Also move the noninteractive && !initialized
	check here from init_process_emacs.  This is all a bit cleaner for
	GNUish platforms, and I hope it works around the Cygwin bug.
	* sysdep.c (init_signals): Invoke catch_child_signal here, so
	that glib signal handling is tickled before glib creates threads.

	* process.c (wait_reading_process_output): Avoid int overflow
	when reading more than 2 GiB total from a process.

2013-06-21  Paul Eggert  <eggert@cs.ucla.edu>

	* process.c (create_process): Handle a couple more cases,
	i.e., work even if new_argv and wait_child_setup[i] are cached.
	Use Fcall_process's style for volatile vars.

2013-06-21  Andreas Schwab  <schwab@linux-m68k.org>

	* process.c (create_process): Mark PROCESS volatile.

2013-06-21  Paul Eggert  <eggert@cs.ucla.edu>

	Use C99-style flexible array members if available.
	This avoids some subtle aliasing issues, which typically
	aren't a problem with GCC but may be a problem elsewhere.
	* alloc.c (sdata): New typedef, replacing the old struct sdata.
	It is a struct if GC_CHECK_STRING_BYTES, a union otherwise.
	In either case, it uses a flexible array member rather than
	the old struct hack.  All uses changed.
	(SDATA_NBYTES, sweep_strings) [!GC_CHECK_STRING_BYTES]:
	Adjust to sdata reorganization.
	* alloc.c (VBLOCK_BYTES_MIN, allocate_vectorlike, Fgarbage_collect):
	Use offsetof (struct, flex_array_member), not sizeof (struct), as
	that ports better to pre-C99 non-GCC.
	* chartab.c (Fmake_char_table, make_sub_char_table, copy_char_table):
	Use CHAR_TABLE_STANDARD_SLOTS rather than its definition,
	as the latter has changed.
	* conf_post.h (FLEXIBLE_ARRAY_MEMBER): Move here from w32.c,
	and port better to pre-C99 GCC.
	* image.c (struct xpm_cached_color):
	* lisp.h (struct Lisp_Vector, struct Lisp_Bool_Vector)
	(struct Lisp_Char_Table, struct Lisp_Sub_Char_Table):
	Use FLEXIBLE_ARRAY_MEMBER.
	* lisp.h (string_bytes) [GC_CHECK_STRING_BYTES]:
	Move decl to top level so it gets checked against implementation.
	(CHAR_TABLE_STANDARD_SLOTS): Adjust to struct Lisp_Char_Table change.
	* w32.c (FLEXIBLE_ARRAY_MEMBER): Move to conf_post.h.

2013-06-20  Paul Eggert  <eggert@cs.ucla.edu>

	* syntax.c: Integer cleanups.
	(SYNTAX_FLAGS_COMMENT_STYLEC): Return a boolean, not 0-or-2.
	All uses that need 0-or-2 changed to:
	(SYNTAX_FLAGS_COMMENT_STYLEC2): New macro, with the same semantics
	as the old SYNTAX_FLAGS_COMMENT_STYLEC.
	(struct lisp_parse_state, syntax_prefix_flag_p, update_syntax_table)
	(char_quoted, prev_char_comend_first, back_comment)
	(Finternal_describe_syntax_value, skip_chars, skip_syntaxes)
	(in_classes, forw_comment, scan_lists, scan_sexps_forward):
	Use bool for boolean.
	(update_syntax_table, skip_chars, skip_syntaxes):
	Prefer int to unsigned when either will do.
	(back_comment): Return boolean success flag, like forw_comment,
	instead of positive-or-minus-1 (which might have overflowed int anyway).
	Don't stuff ptrdiff_t into int.
	(syntax_spec_code, syntax_code_spec): Now const.
	(Fmatching_paren, scan_lists, scan_sexps_forward):
	Use enum syntaxcode for syntax code.
	(Fmatching_paren): Check that arg is a character, not just an integer.
	(Fstring_to_syntax): Don't assume 0377 fits in enum syntaxcode.
	(Finternal_describe_syntax_value): Omit no-longer-needed
	comparison to 0.
	(skip_chars): Use char, not unsigned char, when the distinction
	doesn't matter.
	(forw_comment, scan_lists): Prefer A |= B to A = A || B when B's cheap.
	* bytecode.c (exec_byte_code):
	* syntax.c (syntax_spec_code, Fchar_syntax)
	(Finternal_describe_syntax_value, skip_chars, skip_syntaxes)
	(init_syntax_once):
	* syntax.h (SYNTAX_WITH_FLAGS):
	Omit unnecessary casts.

2013-06-20  Eli Zaretskii  <eliz@gnu.org>

	* w32fns.c (w32_wnd_proc): Don't compute the header line and mode
	line dimensions here, to avoid race conditions with the main
	thread.  (Bug#14062, bug#14630, bug#14669)

	* w32term.c (w32_draw_window_cursor): Compute the header line and
	mode line dimensions here.
	<w32_system_caret_window, w32_system_caret_hdr_height>:
	<w32_system_caret_mode_height>: New variables.

	* w32term.h: Declare them.

2013-06-20  Paul Eggert  <eggert@cs.ucla.edu>

	* alloc.c (die): Move "assertion failed" string here ...
	* lisp.h (eassert): ... from here.  Also, suppress evaluation of
	COND when SUPPRESS_CHECKING.  This shrinks the executable text
	size by 0.8% to 2.2% when configured with --enable-checking,
	depending on optimization flags (GCC 4.8.1 x86-64).

	* floatfns.c (Flog10): Move to Lisp (marked obsolete there).

2013-06-20  Rüdiger Sonderfeld  <ruediger@c-plusplus.de>

	* floatfns.c (Flog) [HAVE_LOG2]: Use log2 if available and if the
	base is 2; this is more accurate.

2013-06-19  Juanma Barranquero  <lekktu@gmail.com>

	* sound.c (string_default): Move to !WINDOWSNT section.
	(Fplay_sound_internal) [WINDOWSNT]: Remove i_result to avoid warning.

2013-06-19  Paul Eggert  <eggert@cs.ucla.edu>

	* sound.c: Integer cleanups.
	Remove unnecessary forward decls.
	(struct sound_device): The 'file' member is now a Lisp_Object, not
	a char *, so that we needn't invoke alloca on a huge size.
	(Fplay_sound_internal): Adjust to this.
	(string_default): New function.
	(vox_open, vox_init, alsa_open, alsa_configure, alsa_init):
	Use it to adjust to the struct sound_device change.
	(parse_sound, wav_init, au_init, alsa_init): Use bool for booleans.
	(be2hs) [0]: Remove.

	* syntax.c (skip_chars): Don't use uninitialized storage
	when searching a multibyte buffer for characters that are not in a
	unibyte string that contains non-ASCII characters.

2013-06-18  Jan Djärv  <jan.h.d@swipnet.se>

	* process.c: Include xgselect.h if HAVE_GLIB.  Include glib.h
	if HAVE_GLIB && ! WINDOWSNT (Bug#14654).

2013-06-18  Paul Eggert  <eggert@cs.ucla.edu>

	* conf_post.h: Add comments for INLINE, EXTERN_INLINE, etc.

2013-06-18  Kenichi Handa  <handa@gnu.org>

	* font.c (Ffont_spec): Signal an error for an invalid font name
	(Bug#14648).

2013-06-18  Paul Eggert  <eggert@cs.ucla.edu>

	Porting fixes for merged specpdl and backtrace stacks (Bug#14643).
	In particular this ports to 32-bit sparc Sun cc.
	* eval.c (init_eval_once, grow_specpdl): Allocate a specbinding
	array with a dummy element at specpdl[-1], so that its address can
	be taken portably.
	(unbind_to): Do not copy the binding; not needed, now that we
	copy old_value in the one place where the copy is needed.
	* fileio.c (Fwrite_region): Use ptrdiff_t, not int, for specpdl count.
	* lisp.h (BITS_PER_PTRDIFF_T): Remove; no longer needed.
	(union specbinding): Rename from struct specbinding.  Redo layout
	to avoid the need for 'ptrdiff_t nargs : BITS_PER_PTRDIFF_T - 1;',
	which is not portable.  With Sun C 5.12 32-bit sparc, the
	declaration causes nargs to be an unsigned bitfield, a behavior
	that the C standard allows; but Emacs wants nargs to be signed.
	The overall type is now a union of structures rather than a
	structure of union of structures, and the 'kind' member is now a
	bitfield, so that the overall type doesn't grow.  All uses changed.
	* process.c (Fmake_serial_process): Remove unnecessary initialization.

2013-06-17  Paul Eggert  <eggert@cs.ucla.edu>

	* frame.c (x_report_frame_params): Cast parent_desc to uintptr_t.
	Needed if HAVE_NTGUI.  Reported by Juanma Barranquero.

	* nsfont.m (ns_registry_to_script): Parenthesize while expression.

2013-06-17  Eli Zaretskii  <eliz@gnu.org>

	* w32fns.c (w32_wnd_proc): Don't call WINDOW_HEADER_LINE_HEIGHT
	unless we know that the window w's frame is a frame object.
	Another attempt at solving bug#14062 and bug#14630.

2013-06-17  Lars Magne Ingebrigtsen  <larsi@gnus.org>

	* textprop.c (property_set_type): New enum.
	(add_properties): Allow appending/prepending text properties.
	(add_text_properties_1): Factored out of Fadd_text_properties.
	(Fadd_text_properties): Move all the code into
	add_text_properties_1.
	(Fadd_face_text_property): New function that calls
	add_text_properties_1.

2013-06-17  Paul Eggert  <eggert@cs.ucla.edu>

	Move functions from lisp.h to individual modules when possible.
	From a suggestion by Andreas Schwab in <https://bugs.gnu.org/11935#68>.
	* alloc.c (XFLOAT_INIT, set_symbol_name):
	* buffer.c (CHECK_OVERLAY):
	* chartab.c (CHECK_CHAR_TABLE, set_char_table_ascii)
	(set_char_table_parent):
	* coding.c (CHECK_NATNUM_CAR, CHECK_NATNUM_CDR):
	* data.c (BOOLFWDP, INTFWDP, KBOARD_OBJFWDP, OBJFWDP, XBOOLFWD)
	(XKBOARD_OBJFWD, XINTFWD, XOBJFWD, CHECK_SUBR, set_blv_found)
	(blv_value, set_blv_value, set_blv_where, set_blv_defcell)
	(set_blv_valcell):
	* emacs.c (setlocale) [!HAVE_SETLOCALE]:
	* eval.c (specpdl_symbol, specpdl_old_value, specpdl_where)
	(specpdl_arg, specpdl_func, backtrace_function, backtrace_nargs)
	(backtrace_args, backtrace_debug_on_exit):
	* floatfns.c (CHECK_FLOAT):
	* fns.c (CHECK_HASH_TABLE, CHECK_LIST_END)
	(set_hash_key_and_value, set_hash_next, set_hash_next_slot)
	(set_hash_hash, set_hash_hash_slot, set_hash_index)
	(set_hash_index_slot):
	* keymap.c (CHECK_VECTOR_OR_CHAR_TABLE):
	* marker.c (CHECK_MARKER):
	* textprop.c (CHECK_STRING_OR_BUFFER):
	* window.c (CHECK_WINDOW_CONFIGURATION):
	Move here from lisp.h, and make these functions static rather than
	extern inline.
	* buffer.c (Qoverlayp):
	* data.c (Qsubrp):
	* fns.c (Qhash_table_p):
	* window.c (Qwindow_configuration_p):
	Now static.
	* lisp.h: Remove the abovementioned defns and decls.

	Use functions, not macros, for XINT etc (Bug#11935).
	In lisp.h, prefer functions to function-like macros, and
	constants to object-like macros, when either will do.  This:
	 . simplifies use, as there's no more need to worry about
	   arguments' side effects being evaluated multiple times.
	 . makes the code easier to debug on some platforms.
	However, when using gcc -O0, keep using function-like macros
	for a few critical operations, for performance reasons.
	This sort of thing isn't needed with gcc -Og, but -Og
	is a GCC 4.8 feature and isn't widely-enough available yet.
	* alloc.c (gdb_make_enums_visible) [USE_LSB_TAG]:
	Remove enum lsb_bits; no longer needed.
	(allocate_misc, free_misc): Don't use XMISCTYPE as an lvalue.
	* buffer.c (Qoverlap):
	* data.c (Qsubrp):
	* fns.c (Qhash_table_p):
	Now extern, so lisp.h can use these symbols.
	* dispextern.h: Include character.h, for MAX_CHAR etc.
	(GLYPH, GLYPH_CHAR, GLYPH_FACE, SET_GLYPH_CHAR, SET_GLYPH_FACE)
	(SET_GLYPH, GLYPH_CODE_CHAR, GLYPH_CODE_FACE)
	(SET_GLYPH_FROM_GLYPH_CODE, GLYPH_MODE_LINE_FACE, GLYPH_CHAR_VALID_P)
	(GLYPH_CODE_P): Move here from lisp.h.
	(GLYPH_CHAR, GLYPH_FACE, GLYPH_CODE_CHAR, GLYPH_CODE_FACE)
	(GLYPH_CHAR_VALID_P, GLYPH_CODE_P): Now functions, not macros.
	(GLYPH_MODE_LINE_FACE): Now enums, not macros.
	* eval.c (Fautoload): Cast XUNTAG output to intptr_t, since
	XUNTAG now returns void *.
	* lisp.h (lisp_h_XLI, lisp_h_XIL, lisp_h_CHECK_LIST_CONS)
	(lisp_h_CHECK_NUMBER CHECK_SYMBOL, lisp_h_CHECK_TYPE)
	(lisp_h_CONSP, lisp_h_EQ, lisp_h_FLOATP, lisp_h_INTEGERP)
	(lisp_h_MARKERP, lisp_h_MISCP, lisp_h_NILP)
	(lisp_h_SET_SYMBOL_VAL, lisp_h_SYMBOL_CONSTANT_P)
	(lisp_h_SYMBOL_VAL, lisp_h_SYMBOLP, lisp_h_VECTORLIKEP)
	(lisp_h_XCAR, lisp_h_XCDR, lisp_h_XCONS, lisp_h_XHASH)
	(lisp_h_XPNTR, lisp_h_XSYMBOL):
	New macros, renamed from their sans-lisp_h_ counterparts.
	(XLI, XIL, CHECK_LIST_CONS, CHECK_NUMBER CHECK_SYMBOL)
	(CHECK_TYPE, CONSP, EQ, FLOATP, INTEGERP, MARKERP)
	(MISCP, NILP, SET_SYMBOL_VAL, SYMBOL_CONSTANT_P, SYMBOL_VAL, SYMBOLP)
	(VECTORLIKEP, XCAR, XCDR, XCONS, XHASH, XPNTR, XSYMBOL):
	If compiling via GCC without optimization, define these as macros
	in addition to inline functions.
	To disable this, compile with -DINLINING=0.
	(LISP_MACRO_DEFUN, LISP_MACRO_DEFUN_VOID): New macros.
	(check_cons_list) [!GC_CHECK_CONS_LIST]: Likewise.
	(make_number, XFASTINT, XINT, XTYPE, XUNTAG): Likewise, but
	hand-optimize only in the USE_LSB_TAG case, as GNUish hosts do that.
	(INTMASK, VALMASK): Now macros, since static values cannot be
	accessed from extern inline functions.
	(VALMASK): Also a constant, for benefit of old GDB.
	(LISP_INT_TAG_P): Remove; no longer needed as the only caller
	is INTEGERP, which can fold it in.
	(XLI, XIL, XHASH, XTYPE, XINT, XFASTINT, XUINT)
	(make_number, XPNTR, XUNTAG, EQ, XCONS, XVECTOR, XSTRING, XSYMBOL)
	(XFLOAT, XPROCESS, XWINDOW, XTERMINAL, XSUBR, XBUFFER, XCHAR_TABLE)
	(XSUB_CHAR_TABLE, XBOOL_VECTOR, make_lisp_ptr, CHECK_TYPE)
	(CHECK_STRING_OR_BUFFER, XCAR, XCDR, XSETCAR, XSETCDR, CAR, CDR)
	(CAR_SAFE, CDR_SAFE, STRING_MULTIBYTE, SDATA, SSDATA, SREF, SSET)
	(SCHARS, STRING_BYTES, SBYTES, STRING_SET_CHARS, STRING_COPYIN, AREF)
	(ASIZE, ASET, CHAR_TABLE_REF_ASCII, CHAR_TABLE_REF)
	(CHAR_TABLE_SET, CHAR_TABLE_EXTRA_SLOTS, SYMBOL_VAL, SYMBOL_ALIAS)
	(SYMBOL_BLV, SYMBOL_FWD, SET_SYMBOL_VAL, SET_SYMBOL_ALIAS)
	(SET_SYMBOL_BLV, SET_SYMBOL_FWD, SYMBOL_NAME, SYMBOL_INTERNED_P)
	(SYMBOL_INTERNED_IN_INITIAL_OBARRAY_P, SYMBOL_CONSTANT_P)
	(XHASH_TABLE, HASH_TABLE_P, CHECK_HASH_TABLE, HASH_KEY, HASH_VALUE)
	(HASH_NEXT, HASH_HASH, HASH_INDEX, HASH_TABLE_SIZE)
	(XMISC, XMISCANY, XMARKER, XOVERLAY, XSAVE_VALUE, XFWDTYPE)
	(XINTFWD, XBOOLFWD, XOBJFWD, XBUFFER_OBJFWD, XKBOARD_OBJFWD)
	(XFLOAT_DATA, XFLOAT_INIT, NILP, NUMBERP, NATNUMP)
	(RANGED_INTEGERP, CONSP, FLOATP, MISCP, STRINGP, SYMBOLP)
	(INTEGERP, VECTORLIKEP, VECTORP, OVERLAYP)
	(MARKERP, SAVE_VALUEP, AUTOLOADP, INTFWDP, BOOLFWDP, OBJFWDP)
	(BUFFER_OBJFWDP, KBOARD_OBJFWDP, PSEUDOVECTOR_TYPEP)
	(PSEUDOVECTORP, WINDOW_CONFIGURATIONP, PROCESSP, WINDOWP)
	(TERMINALP, SUBRP, COMPILEDP, BUFFERP, CHAR_TABLE_P)
	(SUB_CHAR_TABLE_P, BOOL_VECTOR_P, FRAMEP, IMAGEP, ARRAYP)
	(CHECK_LIST, CHECK_LIST_CONS, CHECK_LIST_END, CHECK_STRING)
	(CHECK_STRING_CAR, CHECK_CONS, CHECK_SYMBOL, CHECK_CHAR_TABLE)
	(CHECK_VECTOR, CHECK_VECTOR_OR_STRING, CHECK_ARRAY)
	(CHECK_VECTOR_OR_CHAR_TABLE, CHECK_BUFFER, CHECK_WINDOW)
	(CHECK_WINDOW_CONFIGURATION, CHECK_PROCESS, CHECK_SUBR)
	(CHECK_NUMBER, CHECK_NATNUM, CHECK_MARKER, XFLOATINT)
	(CHECK_FLOAT, CHECK_NUMBER_OR_FLOAT, CHECK_OVERLAY)
	(CHECK_NUMBER_CAR, CHECK_NUMBER_CDR, CHECK_NATNUM_CAR)
	(CHECK_NATNUM_CDR, FUNCTIONP, SPECPDL_INDEX, LOADHIST_ATTACH)
	Now functions.
	(check_cons_list) [!GC_CHECK_CONS_LIST]: New empty function.
	(LISP_MAKE_RVALUE, TYPEMASK): Remove; no longer needed.
	(VALMASK): Define in one place rather than in two, merging the
	USE_LSB_TAG parts; this is simpler.
	(aref_addr, gc_aset, MOST_POSITIVE_FIXNUM, MOST_NEGATIVE_FIXNUM)
	(max, min, struct Lisp_String, UNSIGNED_CMP, ASCII_CHAR_P):
	Move up, to avoid use before definition.
	Also include "globals.h" earlier, for the same reason.
	(make_natnum): New function.
	(XUNTAG): Now returns void *, not intptr_t, as this means fewer casts.
	(union Lisp_Fwd, BOOLFWDP, BOOL_VECTOR_P, BUFFER_OBJFWDP, BUFFERP)
	(CHAR_TABLE_P, CHAR_TABLE_REF_ASCII, CONSP, FLOATP, INTEGERP, INTFWDP)
	(KBOARD_OBJFWDP, MARKERP, MISCP, NILP, OBJFWDP, OVERLAYP, PROCESSP)
	(PSEUDOVECTORP, SAVE_VALUEP, STRINGP, SUB_CHAR_TABLE_P, SUBRP, SYMBOLP)
	(VECTORLIKEP, WINDOWP, Qoverlayp, char_table_ref, char_table_set)
	(char_table_translate, Qarrayp, Qbufferp, Qbuffer_or_string_p)
	(Qchar_table_p, Qconsp, Qfloatp, Qintegerp, Qlambda, Qlistp, Qmarkerp)
	(Qnil, Qnumberp, Qsubrp, Qstringp, Qsymbolp, Qvectorp)
	(Qvector_or_char_table_p, Qwholenump, Ffboundp, wrong_type_argument)
	(initialized, Qhash_table_p, extract_float, Qprocessp, Qwindowp)
	(Qwindow_configuration_p, Qimage): New forward declarations.
	(XSETFASTINT): Simplify by rewriting in terms of make_natnum.
	(STRING_COPYIN): Remove; unused.
	(XCAR_AS_LVALUE, XCDR_AS_LVALUE): Remove these macros, replacing with ...
	(xcar_addr, xcdr_addr): New functions.  All uses changed.
	(IEEE_FLOATING_POINT): Now a constant, not a macro.
	(GLYPH, GLYPH_CHAR, GLYPH_FACE, SET_GLYPH_CHAR, SET_GLYPH_FACE)
	(SET_GLYPH, GLYPH_CODE_CHAR, GLYPH_CODE_FACE)
	(SET_GLYPH_FROM_GLYPH_CODE, GLYPH_MODE_LINE_FACE, GLYPH_CHAR_VALID_P)
	(GLYPH_CODE_P): Move to dispextern.h, to avoid define-before-use.
	(TYPE_RANGED_INTEGERP): Simplify.
	(Qsubrp, Qhash_table_p, Qoverlayp): New extern decls.
	(setlocale, fixup_locale, synchronize_system_messages_locale)
	(synchronize_system_time_locale) [!HAVE_SETLOCALE]:
	Now empty functions, not macros.
	(functionp): Return bool, not int.
	* window.c (Qwindow_configuration_p): Now extern,
	so window.h can use it.
	* window.h (Qwindowp): Move decl back to lisp.h.

2013-06-15  Eli Zaretskii  <eliz@gnu.org>

	* xdisp.c (Fline_pixel_height): New function, required for solving
	bug #14567.

2013-06-15  Paul Eggert  <eggert@cs.ucla.edu>

	* fns.c (Fcopy_sequence): Simplify XTYPE calculation.

2013-06-13  Stefan Monnier  <monnier@iro.umontreal.ca>

	* lread.c (syms_of_lread):
	* fns.c (Fprovide): Adjust to new format of after-load-alist.

2013-06-13  Kelly Dean  <kellydeanch@yahoo.com>  (tiny change)

	* fileio.c (Fdo_auto_save): Trap errors in auto-save-hook.  (Bug#14479)

2013-06-12  Xue Fuqiao  <xfq.free@gmail.com>

	* fileio.c (expand_file_name): Doc fix.

2013-06-11  Paul Eggert  <eggert@cs.ucla.edu>

	Tickle glib by waiting for Emacs itself, not for process 0 (Bug#14569).
	* process.c (init_process_emacs) [HAVE_GLIB && !WINDOWSNT]:
	Wait for self, not for 0.  This can't hurt on GNU or similar
	system, and may help with Cygwin.

	* keyboard.c: Don't use PROP (...) as an lvalue.
	(parse_tool_bar_item) [!USE_GTK && !HAVE_NS]:
	Use set_prop (A, B), not PROP (A) = B.

2013-06-10  Eli Zaretskii  <eliz@gnu.org>

	* xdisp.c (get_it_property): Use it->window instead of generating
	a Lisp object from it->w.

2013-06-09  Eli Zaretskii  <eliz@gnu.org>

	* xdisp.c (get_it_property): If it->object is a buffer, pass to
	get-char-property the window that is being rendered, instead of
	the buffer, to support window-specific overlays.  (Bug#14575)
	(compute_display_string_pos): When W is NULL, use the current
	buffer as the object to pass to get-char-property.
	(Fcurrent_bidi_paragraph_direction): Assign NULL to the window
	pointer member of the bidi iterator, since no window is pertinent
	to this function.

2013-06-08  Eli Zaretskii  <eliz@gnu.org>

	* bidi.c (bidi_fetch_char): Accept additional argument, the window
	being displayed, and pass it to compute_display_string_pos.
	(bidi_level_of_next_char, bidi_resolve_explicit_1)
	(bidi_paragraph_init): All callers changed.

	* xdisp.c (init_from_display_pos, init_iterator)
	(handle_single_display_spec, next_overlay_string)
	(get_overlay_strings_1, reseat_1, reseat_to_string)
	(push_prefix_prop, Fcurrent_bidi_paragraph_direction):
	Set bidi_it.w member from it->w.
	(compute_display_string_pos): Accept additional argument, the
	window being displayed, and pass it to Fget_char_property.
	(Bug#14575)

	* dispextern.h (struct bidi_it): New member w, the window being
	displayed.
	(compute_display_string_pos): Adjust prototype.

2013-06-08  Jan Djärv  <jan.h.d@swipnet.se>

	* xgselect.c: Remove unneeded include xterm.h.

	* process.c (wait_reading_process_output): Check for NS before GLIB.
	GLIB may be linked in due to rsvg, but ns_select must be called.

	* xgselect.c (xg_select): Remove call to window_system_available
	and g_main_context_pending at the top, so Gdk events (i.e. file
	notify) are processed when Emacs is started with -nw.

2013-06-07  Eli Zaretskii  <eliz@gnu.org>

	* Makefile.in (ctagsfiles1, ctagsfiles2): Don't include *.m files.
	(ctagsfiles3): New variable, includes only *.m files.
	(TAGS): Use an explicit language name in the regular expressions,
	to avoid transformation of '/SOMETHING' by MSYS to
	'c:\MSYS\SOMETHING'.

2013-06-07  Richard Copley  <rcopley@gmail.com>  (tiny change)

	* epaths.in: Fix commentary to PATH_SITELOADSEARCH.

2013-06-06  Eli Zaretskii  <eliz@gnu.org>

	* xdisp.c (note_mouse_highlight): When mouse-highlight is off,
	still need to set the mouse pointer shape and activate help-echo.
	(Bug#14558)

2013-06-06  Paul Eggert  <eggert@cs.ucla.edu>

	A few porting etc. fixes for the new file monitor code.
	See the thread containing
	<https://lists.gnu.org/r/emacs-devel/2013-06/msg00109.html>.
	* gfilenotify.c (dir_monitor_callback, Fgfile_add_watch)
	(Fgfile_rm_watch): Don't assume EMACS_INT is the same width as a pointer.
	(dir_monitor_callback, Fgfile_rm_watch):
	Use assq_no_quit instead of Fassoc, for speed.
	(dir_monitor_callback, Fgfile_rm_watch):
	eassert that the monitor is a fixnum.
	(dir_monitor_callback): No need for CDR_SAFE.
	Simplify building of lisp with alternative tails.
	(Fgfile_add_watch, Fgfile_rm_watch):
	Do not assume glib functions set errno reliably on failure.
	(Fgfile_add_watch): Check that the monitor survives the XIL trick,
	and signal an error otherwise.
	(Fgfile_rm_watch): Prefer CONSP to !NILP.
	Use Fdelq instead of Fdelete, for speed.

2013-06-05  Eli Zaretskii  <eliz@gnu.org>

	* xdisp.c (handle_tool_bar_click): When mouse-highlight is off,
	don't insist on being invoked on a highlighted tool-bar button.
	Avoids losing tool-bar functionality when mouse-highlight is nil.
	(note_tool_bar_highlight, note_mode_line_or_margin_highlight):
	Don't highlight when mouse-highlight is nil.
	(note_mouse_highlight): When mouse-highlight is nil, don't return
	right away; instead, run tool-bar and mode-line highlight
	subroutine, clear any existing highlight, and revert the mouse
	pointer to its default shape.  (Bug#14558)

2013-06-05  Stefan Monnier  <monnier@iro.umontreal.ca>

	* lisp.mk (lisp): Add prog-mode.el.

2013-06-05  Paul Eggert  <eggert@cs.ucla.edu>

	Chain glib's SIGCHLD handler from Emacs's (Bug#14474).
	* process.c (dummy_handler): New function.
	(lib_child_handler): New static var.
	(handle_child_signal): Invoke it.
	(catch_child_signal): If a library has set up a signal handler,
	save it into lib_child_handler.
	(init_process_emacs): If using glib and not on Windows, tickle glib's
	child-handling code so that it initializes its private SIGCHLD handler.
	* syssignal.h (SA_SIGINFO): Default to 0.
	* xterm.c (x_term_init): Remove D-bus hack that I installed on May
	31; it should no longer be needed now.

2013-06-05  Michael Albinus  <michael.albinus@gmx.de>

	* emacs.c (main) [HAVE_GFILENOTIFY]: Call globals_of_gfilenotify.

	* gfilenotify.c (globals_of_gfilenotify): New function.
	(syms_of_gfilenotify): Move global initialization there.

	* lisp.h (globals_of_gfilenotify) [HAVE_GFILENOTIFY]: Add prototype.

2013-06-05  Stefan Monnier  <monnier@iro.umontreal.ca>

	* keymap.c (Fcurrent_active_maps, Fdescribe_buffer_bindings):
	* keyboard.c (menu_bar_items, tool_bar_items):
	* doc.c (Fsubstitute_command_keys): Voverriding_terminal_local_map does
	not override local keymaps any more.

2013-06-04  Eli Zaretskii  <eliz@gnu.org>

	* window.c (Fpos_visible_in_window_p): Doc fix.  (Bug#14540)

2013-06-03  Eli Zaretskii  <eliz@gnu.org>

	* w32console.c (initialize_w32_display): Return the dimensions of
	the console window via 2 additional arguments, not via the current
	frame.  This avoids crashes due to overrunning the bounds of
	frame's decode_mode_spec_buffer, which is not resized following
	the change of the frame dimensions from the initial 10x10.

	* w32term.h (w32_initialize_display_info): Adjust prototype.

	* term.c (init_tty): Take dimensions of the frame from the values
	returned by initialize_w32_display.

	* Makefile.in (GFILENOTIFY_CFLAGS, GFILENOTIFY_LIBS): New variables.
	(ALL_CFLAGS): Add $(GFILENOTIFY_CFLAGS).
	(LIBES): Add $(GFILENOTIFY_LIBS).

	* w32inevt.c (handle_file_notifications): Add dummy implementation
	for !HAVE_W32NOTIFY.

	* w32term.c: Wrap code with HAVE_W32NOTIFY.

2013-06-03  Jan Djärv  <jan.h.d@swipnet.se>

	* xgselect.c: Replace #if defined ... with #ifdef HAVE_GLIB.

	* process.c (wait_reading_process_output): Call xg_select if HAVE_GLIB.

	* Makefile.in (XGSELOBJ): New, xgselect.o if GLib is used, or empty.

2013-06-03  Paul Eggert  <eggert@cs.ucla.edu>

	Fix minor problems found by static checking.
	* data.c (pure_write_error):
	Use xsignal2, not Fsignal, as Fsignal might return.
	* eval.c (set_backtrace_debug_on_exit): Now static.
	(backtrace_p, backtrace_top, backtrace_next, record_in_backtrace):
	No longer inline.  EXTERN_INLINE is needed only for functions
	defined in .h files.  Reindent function header as per GNU style.
	(backtrace_p, backtrace_top, backtrace_next):
	Mark EXTERNALLY_VISIBLE so they don't get optimized away by the
	compiler or linker.  Add extern decls to pacify gcc -Wall.
	* frame.c, frame.h (Qgeometry, Qworkarea, Qmm_size, Qframes, Qsource):
	Now static.
	* frame.c (free_monitors): Define only on platforms that need it.
	* nsterm.m (ns_term_init):
	* process.c (catch_child_signal):
	Don't worry about whether SIGCHLD is defined, as SIGCHLD is
	defined on all porting targets these days.
	* process.c, process.h (catch_child_signal):
	Make it extern only if NS_IMPL_GNUSTEP is defined.

2013-06-03  Eli Zaretskii  <eliz@gnu.org>

	* w32.c (gettimeofday): Make the signature identical to prototype
	in nt/inc/sys/time.h.

2013-06-03  Stefan Monnier  <monnier@iro.umontreal.ca>

	* eval.c (backtrace_p, backtrace_top, backtrace_next): Export them to
	.gdbinit.

	* keyboard.c (safe_run_hooks_error): Improve error message.

	* data.c (pure_write_error): Add `object' argument.
	* puresize.h (CHECK_IMPURE): Use it.

2013-06-03  Michael Albinus  <michael.albinus@gmx.de>

	* Makefile.in (NOTIFY_OBJ): New variable.
	(base_obj): Replace inotify.o by $(NOTIFY_OBJ).

	* emacs.c (main): Use HAVE_W32NOTIFY to wrap respective code.
	Call syms_of_gfilenotify.

	* gfilenotify.c: New file.

	* keyboard.c (Qfile_notify): New variable.  Replaces Qfile_inotify
	and Qfile_w32notify.
	(top): Wrap respective code by HAVE_GFILENOTIFY, HAVE_INOTIFY,
	HAVE_W32NOTIFY and USE_FILE_NOTIFY.

	* lisp.h: Declare syms_of_gfilenotify.

	* termhooks.h (e): Wrap enum by USE_FILE_NOTIFY.

2013-06-03  Stefan Monnier  <monnier@iro.umontreal.ca>

	Merge the specpdl and backtrace stacks.  Make the structure of the
	specpdl entries more obvious via a tagged union of structs.
	* lisp.h (BITS_PER_PTRDIFF_T): New constant.
	(enum specbind_tag): New enum.
	(struct specbinding): Make it a tagged union of structs.
	Add a case for backtrace records.
	(specpdl_symbol, specpdl_old_value, specpdl_where, specpdl_arg)
	(specpdl_func, backtrace_function, backtrace_nargs, backtrace_args)
	(backtrace_debug_on_exit): New accessors.
	(struct backtrace): Remove.
	(struct catchtag): Remove backlist field.
	* data.c (let_shadows_buffer_binding_p, let_shadows_global_binding_p):
	Move to eval.c.
	(Flocal_variable_p): Speed up the common case where the binding is
	already loaded.
	* eval.c (backtrace_list): Remove.
	(set_specpdl_symbol, set_specpdl_old_value): Remove.
	(set_backtrace_args, set_backtrace_nargs)
	(set_backtrace_debug_on_exit, backtrace_p, backtrace_top)
	(backtrace_next): New functions.
	(Fdefvaralias, Fdefvar): Adjust to new specpdl format.
	(unwind_to_catch, internal_lisp_condition_case)
	(internal_condition_case, internal_condition_case_1)
	(internal_condition_case_2, internal_condition_case_n): Don't bother
	with backtrace_list any more.
	(Fsignal): Adjust to new backtrace format.
	(grow_specpdl): Move up.
	(record_in_backtrace): New function.
	(eval_sub, Ffuncall): Use it.
	(apply_lambda): Adjust to new backtrace format.
	(let_shadows_buffer_binding_p, let_shadows_global_binding_p): Move from
	data.c.
	(specbind): Adjust to new specpdl format.  Simplify.
	(record_unwind_protect, unbind_to): Adjust to new specpdl format.
	(Fbacktrace_debug, Fbacktrace, Fbacktrace_frame): Adjust to new
	backtrace format.
	(mark_backtrace): Remove.
	(mark_specpdl, get_backtrace, backtrace_top_function): New functions.
	* xdisp.c (redisplay_internal): Use record_in_backtrace.
	* alloc.c (Fgarbage_collect): Use record_in_backtrace.
	Use mark_specpdl.
	* profiler.c (record_backtrace): Use get_backtrace.
	(handle_profiler_signal): Use backtrace_top_function.
	* .gdbinit (xbacktrace, hookpost-backtrace): Use new backtrace
	accessor functions.

2013-06-02  Jan Djärv  <jan.h.d@swipnet.se>

	* process.h (catch_child_signal): Declare.

	* process.c (catch_child_signal): New function.
	(init_process_emacs): Call it.

	* nsterm.m: Include process.h if NS_IMPL_GNUSTEP.
	(ns_menu_bar_is_hidden, menu_will_open_state): Define only if
	NS_IMPL_COCOA.
	(x_set_cursor_type): Remove declaration.
	(ns_update_begin): Only use r and bp if NS_IMPL_COCOA.
	(ns_update_end, ns_focus, ns_unfocus): Remove GNUstep specific code.
	(x_set_window_size): Remove 3 pixels from toolbar if NS_IMPL_GNUSTEP.
	(ns_get_color): Use F suffix on float.
	(ns_color_to_lisp, ns_query_color): Use EmacsCGFloat.
	(ns_get_rgb_color): Remove.
	(x_set_frame_alpha): Move view inside NS_IMPL_COCOA.
	(note_mouse_movement): x and y are CGFloat.
	(ns_draw_fringe_bitmap): Remove unused rowY.
	Change #if to COCOA && >= 10_6.
	(ns_draw_window_cursor): Remove unused overspill.
	(ns_draw_underwave): width and x are EmacsCGFloat.
	(ns_draw_box): thickness is CGFloat.
	(ns_dumpglyphs_image): Change #if to COCOA && >= 10_6.
	(ns_send_appdefined): When NS_IMPL_GNUSTEP, redirect to main thread
	if not in main thread.
	(ns_get_pending_menu_title, ns_check_menu_open)
	(ns_check_pending_open_menu): Put inside #if COCOA && >= 10_5.
	(ns_term_init): Call catch_child_signal if NS_IMPL_GNUSTEP && SIGCHLD.
	(sendFromMainThread:): New method.
	(changeFont:): size is CGFloat.
	(keyDown:): Check for Delete when NS_IMPL_GNUSTEP.
	Disable warning about permanent text.
	(characterIndexForPoint:): Adjust return type depending on GNUstep
	version.
	(mouseDown:): delta is CGFloat.
	(updateFrameSize): Remove unused variable f.
	(initFrameFromEmacs): Move toggleButton inside NS_IMPL_COCOA.
	Cast float to EmacsCGFloat.
	(windowWillUseStandardFrame:defaultFrame:): Set maximized_height
	also to -1 when restoring.
	(windowDidExitFullScreen:): Put call to updateCollectionBehaviour
	inside NS_IMPL_COCOA.
	(toggleFullScreen:): Put call to toggleFullScreen inside
	NS_IMPL_COCOA.  Cast float to EmacsCGFloat.
	(setPosition:portion:whole:): por is CGFloat.
	(getMouseMotionPart:window:x:y:): Add F suffix to float.
	(mouseDown:): Use CGFloat.
	(mouseDragged:): Remove unused variable edge.
	(EmacsDocument): Implement for NS_IMPL_GNUSTEP.

	* nsterm.h (EmacsCGFloat): Typedef for OSX and GNUstep when the size
	of CGFloat differs.
	(EmacsApp): New variable nextappdefined.  Declare sendFromMainThread
	when NS_IMPL_GNUSTEP.
	(EmacsDocument): Declare when NS_IMPL_GNUSTEP.
	(EmacsView): Remove unlockFocusNeedsFlush, add windowDidMove.
	(EmacsToolbar): Add clearAll.  Add tag argument to
	addDisplayItemWithImage.
	(EmacsSavePanel, EmacsOpenPanel): Remove getFilename and getDirectory.

	* nsselect.m (ns_get_local_selection): Remove unused variable type.

	* nsmenu.m (ns_update_menubar): Make static.
	(x_activate_menubar): Surround with ifdef NS_IMPL_COCOA
	(fillWithWidgetValue:): Add cast to SEL for setAction.
	(addSubmenuWithTitle:forFrame:): Add cast to SEL for action.
	(update_frame_tool_bar): Update code for GNUstep.
	(clearAll): New method.
	(addDisplayItemWithImage:idx:tag:helpText:enabled:): Handle new tag
	argument.  Call insertItemWithItemIdentifier when NS_IMPL_GNUSTEP.
	Move identifierToItem setObject and activeIdentifiers addObject before
	call to insertItemWithItemIdentifier.
	(validateVisibleItems): Fix indentation.
	(toolbarAllowedItemIdentifiers:): Return activeIdentifiers.
	(initWithContentRect:styleMask:backing:defer:): Add ClosableWindow and
	UtilityWindow to aStyle, remove call to setStyleMask.

	* nsimage.m (setXBMColor:, getPixelAtX:Y:): Use EmacsCGFloat.

	* nsfont.m (ns_attribute_fvalue, ns_spec_to_descriptor)
	(ns_charset_covers, ns_get_covering_families, nsfont_open):
	Use F suffix on floats.
	(ns_char_width): Returns CGFloat.
	(ns_ascii_average_width): w is CGFloat instead of float.
	(nsfont_draw): cbuf and c are unsigned.  Cast to char* in call to
	DPSxshow.
	(ns_glyph_metrics): CGFloat instead of float.

	* nsfns.m (x_set_foreground_color, x_set_background_color):
	Use EmacsCGFloat.
	(ns_implicitly_set_icon_type, Fx_create_frame): Make static,
	remove unused variables.
	(Fns_read_file_name): Keep track if panel is for save.
	Use ns_filename_from_panel/ns_directory_from_panel.
	(Fns_list_services): delegate only used for COCOA.
	(Fns_convert_utf8_nfd_to_nfc): Remove warning for GNUstep.
	Just return the input if GNUstep.
	(x_screen_planes): Remove.
	(Fxw_color_values): Use EmacsCGFloat
	(Fns_display_monitor_attributes_list): Only get screen number for
	Cocoa.
	(getDirectory, getFilename): Remove from EmacsOpenPanel and
	EmacsSavePanel.
	(EmacsOpenPanel:ok:): Use ns_filename_from_panel and
	ns_directory_from_panel.

2013-06-01  Paul Eggert  <eggert@cs.ucla.edu>

	* process.c (handle_child_signal): Also use WCONTINUED.
	This is so that list-processes doesn't mistakenly list the process
	as stopped, when the process has actually been continued and is
	now running.

2013-05-31  Paul Eggert  <eggert@cs.ucla.edu>

	Don't let D-bus autolaunch mess up SIGCHLD handling (Bug#14474).
	* xterm.c (x_term_init): Inhibit D-Bus autolaunch if D-Bus is
	not already configured.

	* fileio.c (Finsert_file_contents): Remove unused local (Bug#8447).

2013-05-29  Eli Zaretskii  <eliz@gnu.org>

	* Makefile.in (mostlyclean): Remove *.res files.

2013-05-29  Stefan Monnier  <monnier@iro.umontreal.ca>

	* fileio.c (Finsert_file_contents): Preserve undo info when reverting
	a buffer (bug#8447).

2013-05-27  Eli Zaretskii  <eliz@gnu.org>

	* xdisp.c (pos_visible_p): When CHARPOS is displayed frrom a
	display vector, and we backtrack, handle the case that the
	previous character position is also displayed from a display
	vector or covered by a display string or image.  (Bug#14476)

2013-05-25  Jan Djärv  <jan.h.d@swipnet.se>

	* xfns.c (Qgeometry, Qworkarea, Qmm_size, Qframes, Qsource): Remove.
	(struct MonitorInfo, free_monitors): Remove.
	(x_make_monitor_attribute_list): Call make_monitor_attribute_list.
	(Fx_display_monitor_attributes_list): Call make_monitor_attribute_list.
	(syms_of_xfns): Remove DEFSYM for Qgeometry, Qworkarea, Qmm_size,
	Qframes, Qsource.

	* nsfns.m (Qgeometry, Qworkarea, Qmm_size, Qframes, Qsource): Remove.
	(struct MonitorInfo, free_monitors): Remove.
	(ns_screen_name): Make static.
	(ns_make_monitor_attribute_list): Call make_monitor_attribute_list.
	(syms_of_nsfns): Remove DEFSYM for Qgeometry, Qworkarea, Qmm_size,
	Qframes, Qsource.

	* frame.h (Qgeometry, Qworkarea, Qmm_size, Qframes, Qsource): Declare.
	(struct MonitorInfo): New struct.
	(free_monitors, make_monitor_attribute_list): Declare.

	* frame.c (Qgeometry, Qworkarea, Qmm_size, Qframes, Qsource):
	New Lisp_Object:s.
	(free_monitors, make_monitor_attribute_list): New functions.
	(syms_of_frame): DEFSYM Qgeometry, Qworkarea, Qmm_size, Qframes,
	Qsource.

2013-05-25  Xue Fuqiao  <xfq.free@gmail.com>

	* callproc.c (call_process): Refine the doc string.  (Bug#14045)

2013-05-23  Stefan Monnier  <monnier@iro.umontreal.ca>

	* keyboard.c: Apply keyboard decoding only to events that come directly
	from the tty, not from unread-command-events (bug#14368).
	(read_event_from_main_queue): New function, extracted from read_char.
	(read_decoded_char): Remove.
	(read_decoded_event_from_main_queue): New function to replace it.
	(read_char): Use it.
	(read_key_sequence): Use read_char rather than read_decoded_char.

	* keyboard.c (read_decoded_char): Don't decode under w32 (bug#14403).

2013-05-22  Barry O'Reilly  <gundaetiapo@gmail.com>

	* casetab.c (init_casetab_once): Fix last change (bug#14424).

2013-05-22  Kenichi Handa  <handa@gnu.org>

	The following changes are to fix the setting of
	buffer-file-coding-system on, for instance, C-x RET c unix RET
	_FILE_OF_DOS_EOL_TYPE_ RET.

	* coding.h (struct coding_system): New member detected_utf8_chars.

	* coding.c (detect_coding_utf_8): Count characters and check EOL
	format.  Include CATEGORY_MASK_UTF_8_AUTO in detect_info->found if
	BOM is there.
	(setup_coding_system): Do not initialize coding->head_ascii.
	(check_ascii): Do not set coding->eol_seen but update it.  Do not
	call adjust_coding_eol_type here.
	(detect_coding): Fix detection of BOM for utf-8 and utf-16.
	If the eol-type of CODING is already specified, adjust the eol type
	of the found coding-system.
	(decode_coding_gap): Cancel previous change.  Utilize the
	character numbers counted by detect_coding_utf_8.  Fix detection
	of BOM for utf-8.

2013-05-21  Barry O'Reilly  <gundaetiapo@gmail.com>

	* search.c (looking_at_1): Only set last_thing_searched if the match
	changed the match-data (bug#14281).

2013-05-21  Dmitry Antipov  <dmantipov@yandex.ru>

	* xdisp.c (reseat_at_previous_visible_line_start):
	Already declared in dispextern.h, so remove it here.
	(move_it_vertically_backward): Likewise.

2013-05-20  YAMAMOTO Mitsuharu  <mituharu@math.s.chiba-u.ac.jp>

	* xfns.c (check_x_display_info): Don't use XINT for terminal object.
	(Fx_display_pixel_width, Fx_display_pixel_height)
	(Fx_display_mm_width, Fx_display_mm_height):
	Mention `display-monitor-attributes-list' in docstrings.

	* nsfns.m (ns_get_screen): Remove function.  All uses removed.
	(check_ns_display_info): Sync with check_x_display_info in xfns.c.
	(Fx_server_max_request_size, Fx_server_vendor, Fx_server_version)
	(Fx_display_screens, Fx_display_mm_width, Fx_display_mm_height)
	(Fx_display_backing_store, Fx_display_visual_class)
	(Fx_display_save_under, Fx_close_connection, Fxw_display_color_p)
	(Fx_display_grayscale_p, Fx_display_pixel_width)
	(Fx_display_pixel_height, Fx_display_planes)
	(Fx_display_color_cells): Sync args and docstrings with xfns.c.
	(Fx_display_screens): Don't confuse X11 screens with NS screens.
	(Fx_display_mm_width, Fx_display_mm_height)
	(Fx_display_pixel_width, Fx_display_pixel_width): Return width or
	height for all physical monitors as in X11.

	* nsterm.m (x_display_pixel_width, x_display_pixel_height):
	Return pixel width or height for all physical monitors as in X11.

2013-05-18  Paul Eggert  <eggert@cs.ucla.edu>

	Port --enable-gcc-warnings to clang.
	* bytecode.c (exec_byte_code):
	* regex.c:
	Redo diagnostic pragmas to pacify clang, too.
	* dbusbind.c (xd_retrieve_arg): Do not use uninitialized variable.
	* editfns.c (Fencode_time):
	* fileio.c (file_accessible_directory_p):
	* font.c (font_unparse_xlfd):
	Use '&"string"[index]' instead of '"string" + (index)'.
	* undo.c (user_error): Remove; unused.

2013-05-16  Eli Zaretskii  <eliz@gnu.org>

	* insdel.c (insert_1_both): Document the arguments, instead of
	referring to insert_1, which no longer exists.

	* xdisp.c (message_dolog): If the *Messages* buffer is shown in
	some window, increment windows_or_buffers_changed, so that
	*Messages* display in that window is updated.  (Bug#14408)

	* w32.c: Include epaths.h.
	(init_environment): Use cmdproxy.exe without leading directories.
	Support emacs.exe in src; point SHELL to cmdproxy in ../nt in that
	case.
	(gettimeofday): Adjust signature and return value to Posix
	expectations.

	* unexw32.c (open_output_file): Delete the existing emacs.exe
	before creating it, to break the hard link to the versioned
	executable.

	* Makefile.in (EMACS_MANIFEST, CM_OBJ, TEMACS_POST_LINK)
	(ADDSECTION, EMACS_HEAPSIZE, MINGW_TEMACS_POST_LINK)
	(FIRSTFILE_OBJ): New variables.
	(W32_RES): Rename to EMACSRES.  All users changed.
	(base_obj): Use $(CM_OBJ).
	(ALLOBJS): Use $(FIRSTFILE_OBJ).
	(emacs$(EXEEXT)): Depend on $(ADDSECTION).
	(temacs$(EXEEXT)): Use $(TEMACS_POST_LINK), and move
	$(W32_RES_LINK) before $(LIBES).
	(emacs.res): Depend on $(EMACS_MANIFEST).  Put emacs.rc in nt.

2013-05-15  Stefan Monnier  <monnier@iro.umontreal.ca>

	* makefile.w32-in (DOC): Use just "DOC".

	* Makefile.in (bootstrap-clean): DOC-* doesn't exist any more.

	* process.c: Export default filters and sentinels to Elisp.
	(Qinternal_default_process_sentinel, Qinternal_default_process_filter):
	New constants.
	(pset_filter, pset_sentinel, make_process, Fset_process_filter)
	(Fset_process_sentinel, Fformat_network_address):
	Default to them instead of nil.
	(server_accept_connection): Sentinels can't be nil any more.
	(read_and_dispose_of_process_output): New function, extracted from
	read_process_output.
	(read_process_output): Use it; filters can't be nil.
	(Finternal_default_process_filter): New function, extracted from
	read_process_output.
	(exec_sentinel_unwind): Remove function.
	(exec_sentinel): Don't zilch sentinel while running.
	(status_notify): Sentinels can't be nil.
	(Finternal_default_process_sentinel): New function extracted from
	status_notify.
	(setup_process_coding_systems): Default filter is not nil any more.
	(syms_of_process): Export new Elisp functions and initialize
	new constants.
	* lisp.h (make_lisp_proc): New function.

2013-05-15  Stefan Monnier  <monnier@iro.umontreal.ca>

	* regex.c (regex_compile) [\=, \>, \<]: Don't forget to set laststart.

2013-05-14  Eli Zaretskii  <eliz@gnu.org>

	* w32fns.c (w32_wnd_proc): Don't call WINDOW_HEADER_LINE_HEIGHT
	unless we know that the window w is a leaf window.
	Another attempt at solving bug#14062.

2013-05-14  Jan Djärv  <jan.h.d@swipnet.se>

	* nsfont.m (ns_spec_to_descriptor): Retain and autorelease
	fdesc (Bug#14375).

2013-05-12  Paul Eggert  <eggert@cs.ucla.edu>

	* image.c (gif_load): Check that subimages fit (Bug#14345).

2013-05-09  Stefan Monnier  <monnier@iro.umontreal.ca>

	* lread.c (skip_dyn_eof): New function.
	(read1): Use it to skip the end of a file in response to #@00.

	* doc.c (get_doc_string): Slightly relax the sanity checking.

2013-05-09  Jan Djärv  <jan.h.d@swipnet.se>

	* nsfns.m: Include IOGraphicsLib.h if Cocoa.
	(Qgeometry, Qworkarea, Qmm_size, Qframes, Qsource): Declare.
	(MonitorInfo): New struct.
	(free_monitors, ns_screen_name, ns_make_monitor_attribute_list)
	(Fns_display_monitor_attributes_list): New functions.
	(display-usable-bounds): Remove.
	(syms_of_nsfns): DEFSYM Qgeometry, Qworkarea, Qmm_size, Qframes and
	Qsource.

2013-05-09  Paul Eggert  <eggert@cs.ucla.edu>

	* xterm.h (GTK_PREREQ): Remove, replacing with GTK_CHECK_VERSION.
	(GTK_CHECK_VERSION): New macro, if not already defined.
	All uses of GTK_PREREQ, GTK_MAJOR_VERSION, etc.
	replaced by GTK_CHECK_VERSION.

2013-05-08  Paul Eggert  <eggert@cs.ucla.edu>

	* xterm.h (GTK_PREREQ): New macro.
	All simple uses of GTK_MAJOR_VERSION and GTK_MINOR_VERSION changed
	to use this macro instead, for consistency and clarity.

2013-05-08  Eli Zaretskii  <eliz@gnu.org>

	* xdisp.c (row_for_charpos_p): New function, with code of
	cursor_row_p, but accepts an additional argument CHARPOS instead
	of using a hardcoded PT.
	(cursor_row_p): Call row_for_charpos_p with 2nd argument PT.
	(row_containing_pos): Call row_for_charpos_p instead of partially
	doing the same.  Fixes cursor positioning under longlines-mode
	when longlines-show-effect includes more than one newline, when
	moving the cursor vertically up.

2013-05-08  Juanma Barranquero  <lekktu@gmail.com>

	* makefile.w32-in (ACL_H): New macro.
	($(BLD)/fileio.$(O)): Update dependencies.

2013-05-07  Paul Eggert  <eggert@cs.ucla.edu>

	Use Gnulib ACL implementation, for benefit of Solaris etc.  (Bug#14295)
	* Makefile.in (LIB_ACL): New macro.
	(LIBACL_LIBS): Remove.
	(LIBES): Use LIB_ACL, not LIBACL_LIBS.
	* fileio.c: Include <acl.h>.
	Use HAVE_ACL_SET_FILE rather than HAVE_POSIX_ACL.
	(ACL_NOT_WELL_SUPPORTED): Remove.  All uses replaced by
	!acl_errno_valid.
	(Fcopy_file) [!WINDOWSNT]: Use qcopy_acl instead of rolling
	it ourselves.

	* unexelf.c: Don't assume ElfW (Half) fits in int.
	(entry_address, find_section, unexec): Use ptrdiff_t, not int,
	when dealing with ElfW (Half) values, since they can exceed 2**31
	on 64-bit OpenBSD hosts.  Reported by Han Boetes (privately).
	(entry_address): Omit unused NUM arg.  All uses changed.

2013-05-07  Juri Linkov  <juri@jurta.org>

	* callint.c (Fcall_interactively): Set `visargs[i]' for code 'n'
	to the string converted from number with `Fnumber_to_string'.
	(Bug#14254)

2013-05-07  Paul Eggert  <eggert@cs.ucla.edu>

	* xfns.c (x_get_net_workarea): Define only if !GTK || GTK<3.4.
	This fixes a problem introduced by my previous change.

2013-05-07  Glenn Morris  <rgm@gnu.org>

	* lread.c (readchar): Don't read from a dead buffer.  (Bug#14280)

2013-05-07  Jan Djärv  <jan.h.d@swipnet.se>

	* xfns.c: Move misplaced ifndef USE_GTK from previous checkin.

2013-05-07  Paul Eggert  <eggert@cs.ucla.edu>

	Static checking by GCC 4.8.0.
	* xfns.c (x_get_net_workarea, struct MonitorInfo, free_monitors)
	(x_get_monitor_for_frame, x_make_monitor_attribute_list)
	(x_get_monitor_attributes_fallback)
	(x_get_monitor_attributes_xinerama)
	(x_get_monitor_attributes_xrandr, x_get_monitor_attributes):
	Define only if USE_GTK.
	(free_monitors): Define only if HAVE_XINERAMA || HAVE_XRANDR.
	(x_get_monitor_attributes_fallback): Omit unused locals.
	(x_get_monitor_attributes_xinerama, Fx_display_monitor_attributes_list):
	Use double, not float, to avoid mixed-mode floating point arithmetic.

2013-05-07  YAMAMOTO Mitsuharu  <mituharu@math.s.chiba-u.ac.jp>
	    Jan Djärv  <jan.h.d@swipnet.se>

	* Makefile.in (XRANDR_LIBS, XRANDR_CFLAGS, XINERAMA_LIBS)
	(XINERAMA_CFLAGS): New macros.
	(ALL_CFLAGS, LIBES): Use them.

	* xfns.c: Include <X11/extensions/Xrandr.h> if HAVE_XRANDR, and
	include <X11/extensions/Xinerama.h> if HAVE_XINERAMA.
	(Qgeometry, Qworkarea, Qmm_size, Qframes, Qsource): New variables.
	(syms_of_xfns): DEFSYM them.
	(struct MonitorInfo): New struct.
	(x_get_net_workarea, free_monitors, x_get_monitor_for_frame)
	(x_make_monitor_attribute_list, x_get_monitor_attributes_fallback)
	(x_get_monitor_attributes_xrandr, x_get_monitor_attributes)
	(x_get_monitor_attributes_xinerama): New functions.
	(Fx_display_monitor_attributes_list): New primitive.
	(syms_of_xfns): Defsubr it.

	* xterm.h (x_display_info): Add Xatom_net_workarea and
	Xatom_net_current_desktop.

	* xterm.c (x_term_init): Initialize dpyinfo->Xatom_net_workarea
	and dpyinfo->Xatom_net_current_desktop.

2013-05-06  Eli Zaretskii  <eliz@gnu.org>

	* xdisp.c (pos_visible_p): Use the special code for finding the
	beginning of a display property or overlay for any "replacing"
	display property, not just for display strings.  This solves
	incorrect reporting of position by posn-at-point.  (Bug#14241)

2013-05-06  Paul Eggert  <eggert@cs.ucla.edu>

	* unexelf.c: Fix some 32-bit integer problems, notably when debugging.
	Include <limits.h>, <stdbool.h>, <intprops.h>, <verify.h>.
	Verify that ElfW (Half) fits in int.
	(fatal): Use same signature as lisp.h.
	(UNEXELF_DEBUG): New macro, replacing DEBUG, so that people can
	configure and build with -DUNEXELF_DEBUG without worrying about
	other modules that use DEBUG.
	(DEBUG_LOG) [UNEXELF_DEBUG]: New macro.  All debug code that prints
	possibly-wide integers now uses it instead of plain fprintf.
	(entry_address): New function, which avoids problems with 32-bit
	overflow on 64-bit hosts.
	(OLD_SECTION_H, NEW_SECTION_H, NEW_PROGRAM_H): Use it.
	(round_up): Don't assume the remainder fits in int.
	(find_section): Use bool for boolean.  Simplify debug code.
	(unexec): Don't assume file sizes fit in int or size_t.
	Omit unnecessary trailing newline in 'fatal' format.
	Use strerror rather than outputting decimal error number.
	Remove unused code when emacs is not defined;
	this file relies on Emacs now.
	Don't assume e_phnum and e_shnum are positive.

	* regex.c: Fix problems when DEBUG is defined.
	(extract_number, extract_number_and_incr): Define regardless of
	whether DEBUG is defined; that's simpler and makes the code less
	likely to go stale in the normal case when DEBUG is not defined.
	Return int rather than taking an int * arg.  All callers changed.
	(DEBUG_PRINT1, DEBUG_PRINT2, DEBUG_PRINT3, DEBUG_PRINT4):
	Remove, replacing with ...
	(DEBUG_PRINT): New macro.  All callers changed.
	(DEBUG_COMPILES_ARGUMENTS): New macro.
	(print_fastmap, print_partial_compiled_pattern) [DEBUG]:
	(print_compiled_pattern, print_double_string) [DEBUG]:
	Use prototype rather than old-style definition.
	(print_partial_compiled_pattern, print_compiled_pattern) [DEBUG]:
	(ENSURE_FAIL_STACK, PUSH_FAILURE_REG) [DEBUG]:
	(POP_FAILURE_REG_OR_COUNT, PUSH_FAILURE_POINT) [DEBUG]:
	(POP_FAILURE_POINT, re_match_2_internal) [DEBUG]:
	Don't assume ptrdiff_t, size_t, and long are the same width as int.
	(POINTER_TO_OFFSET): Return ptrdiff_t, not regoff_t.
	This matters only when DEBUG is defined.

2013-05-05  Eli Zaretskii  <eliz@gnu.org>

	* xdisp.c (set_iterator_to_next): Set the
	ignore_overlay_strings_at_pos_p flag only if we are _really_
	iterating over an overlay string, as indicated by the
	current.overlay_string_index member.  (Bug#14306)

2013-05-05  Jan Djärv  <jan.h.d@swipnet.se>

	* nsmenu.m (ns_update_menubar): Move initialization of submenuTitle
	to where it is used, to avoid autorelease issues (Bug#14050).

2013-05-05  Paul Eggert  <eggert@cs.ucla.edu>

	`write-region-inhibit-fsync' defaults to noninteractive (Bug#14273).
	* fileio.c (syms_of_fileio): Implement this.
	* filelock.c (create_lock_file): If symbolic links don't work, so
	we use a regular file as a lock file, do not fsync the lock file;
	it's not needed.

2013-05-04  Stefan Monnier  <monnier@iro.umontreal.ca>

	* minibuf.c (Fread_minibuffer, Feval_minibuffer): Move to Elisp.
	(syms_of_minibuf): Adjust accordingly.
	* lread.c (Fread):
	* callint.c (Fcall_interactively): Adjust calls accordingly.

2013-05-04  Eli Zaretskii  <eliz@gnu.org>

	* dispextern.h (WINDOW_WANTS_HEADER_LINE_P): Verify that
	w->contents is a buffer before computing everything else.
	Use parentheses to disambiguate last part of the condition.

	* w32fns.c (w32_wnd_proc): Remove temporary code used to trap
	assertion violations.  (Bug#14062)

2013-05-01  David Reitter  <david.reitter@gmail.com>

	* nsfns.m (ns_tooltip): Initialize.

2013-04-28  Eli Zaretskii  <eliz@gnu.org>

	* coding.c (decode_coding_gap): Don't remove the character before
	a newline unless it's a CR character.  (Bug#14287)

2013-04-28  Dan Nicolaescu  <dann@gnu.org>

	* dispextern.h (struct face): Move enum face_underline_type
	earlier so that bitfields can be in the same word.

2013-04-28  Jan Djärv  <jan.h.d@swipnet.se>

	* nsfns.m (handlePanelKeys): New function.
	(EmacsOpenPanel:performKeyEquivalent:)
	(EmacsSavePanel:performKeyEquivalent:): Call handlePanelKeys to handle
	arrows/function/control and copy/paste keys (Bug#14296).

2013-04-27  Juri Linkov  <juri@jurta.org>

	* callint.c (Fcall_interactively): Call `Qread_number' for
	interactive code letter `n' instead of using duplicate code.
	(Bug#14254)

2013-04-27  Paul Eggert  <eggert@cs.ucla.edu>

	* systime.h (make_timeval): Declare as 'const'.

2013-04-27  Kenichi Handa  <handa@gnu.org>

	* font.c (font_open_entity): Always open a font of manageable
	size.

2013-04-26  Paul Eggert  <eggert@cs.ucla.edu>

	Port better to AIX (Bug#14258).
	* lisp.h (ENUM_BF) [__IBMC__]: Make it 'unsigned int' here, too,
	to pacify AIX xlc.

2013-04-24  Kenichi Handa  <handa@gnu.org>

	* coding.c (decode_coding_iso_2022): When an invalid escape
	sequence is encountered, reset the invocation and designation
	status to the safest one.

2013-04-22  Paul Eggert  <eggert@cs.ucla.edu>

	* Makefile.in (bootstrap-clean): Remove stamp-h1 too.
	Without this fix, "make distclean" leaves stamp-h1 behind.

2013-04-20  Erik Charlebois  <erikcharlebois@gmail.com>

	* w32fns.c (w32_fullscreen_rect): New function to compute the
	window rectangle for the given fullscreen mode.
	(w32_wnd_proc): When in a fullscreen mode, WM_WINDOWPOSCHANGING no
	longer tunes the window size.  This keeps the window's edges flush
	with the screen and allows the taskbar to hide itself in fullboth.

	* w32term.c (w32fullscreen_hook): 'fullboth' now shows without
	window decorations and uses the entire screen.

	* w32term.h  (w32_fullscreen_rect) Add prototype.
	(struct w32_output): Replace normal_width, normal_height,
	normal_top, and normal_left members with a single normal_placement
	struct.
	(FRAME_NORMAL_WIDTH, FRAME_NORMAL_HEIGHT, FRAME_NORMAL_TOP):
	Remove macros.
	(FRAME_NORMAL_PLACEMENT): New macro.

2013-04-16  Juanma Barranquero  <lekktu@gmail.com>

	* minibuf.c (Ftest_completion): Silence compiler warning.

2013-04-15  Eli Zaretskii  <eliz@gnu.org>

	* w32fns.c (w32_wnd_proc): Add more assertions to investigate
	bug#14062.

	* frame.h (WINDOW_FRAME): Protect macro and its argument with
	parentheses.

	* dispextern.h (CURRENT_MODE_LINE_HEIGHT)
	(CURRENT_HEADER_LINE_HEIGHT, WINDOW_WANTS_MODELINE_P)
	(WINDOW_WANTS_HEADER_LINE_P): Protect macro arguments with
	parentheses where appropriate.

2013-04-14  Paul Eggert  <eggert@cs.ucla.edu>

	* keyboard.c (timer_start_idle): Remove no-longer-used local.

2013-04-14  Eli Zaretskii  <eliz@gnu.org>

	* buffer.c (syms_of_buffer) <left-margin-width, right-margin-width>:
	<left-fringe-width, right-fringe-width, fringes-outside-margins>:
	Mention in the doc string that setting these variables takes
	effect only after a call to set-window-buffer.  (Bug#14200)

2013-04-13  Eli Zaretskii  <eliz@gnu.org>

	* indent.c (Fvertical_motion): Don't consider display strings on
	overlay strings as display strings on the buffer position we
	started from.  This prevents vertical cursor motion from jumping
	more than one line when there's an overlay string with a display
	property at end of line.
	Reported by Karl Chen <Karl.Chen@quarl.org> in
	https://lists.gnu.org/r/emacs-devel/2013-04/msg00362.html.

2013-04-12  Stefan Monnier  <monnier@iro.umontreal.ca>

	* window.c (select_window): `record_buffer' even if window is
	already selected (bug#14191).

2013-04-11  Eli Zaretskii  <eliz@gnu.org>

	* window.c (Fwindow_end): Test more flags, including the buffer's
	last_overlay_modified flag, to determine whether the window's
	display is really up-to-date.  Prevents the function from
	returning a stale value.  (Bug#14170)
	(Fwindow_line_height): Fix the test for up-to-date-ness of the
	current matrix.

2013-04-10  Eli Zaretskii  <eliz@gnu.org>

	* frame.c (do_switch_frame): Mark the TTY frame we switch to as
	garbaged only if it is not already the top frame on its TTY.
	This prevents flickering due to constant redrawing of TTY frames when
	there are GUI frames open in the same session.  (Bug#13864)

2013-04-10  Stefan Monnier  <monnier@iro.umontreal.ca>

	* keyboard.c (timer_start_idle): Call internal-timer-start-idle instead
	of marking the idle timers directly.

2013-04-09  Stefan Monnier  <monnier@iro.umontreal.ca>

	* minibuf.c (Ftest_completion): Ignore non-string/symbol keys in hash
	tables (bug#14054).

2013-04-08  Stefan Monnier  <monnier@iro.umontreal.ca>

	* window.c (select_window): Don't record_buffer while the invariant is
	temporarily broken (bug#14161).

	* fns.c (Fdelq): Don't assume !NILP => CONSP.

2013-04-07  Eli Zaretskii  <eliz@gnu.org>

	* fileio.c (ACL_NOT_WELL_SUPPORTED): Define macro for WINDOWSNT.

2013-04-07  Romain Francoise  <romain@orebokech.com>

	Ignore additional platform-specific ACL errors (Bug#13702).
	* fileio.c (ACL_NOT_WELL_SUPPORTED): New macro copied from gnulib.
	(Fcopy_file, Fset_file_acl) [HAVE_POSIX_ACL]: Use it.

2013-03-31  Jan Djärv  <jan.h.d@swipnet.se>

	* nsterm.m (ns_mouse_position): Use NS_FRAME_P instead of checking
	f->output_data.ns.

2013-04-07  Paul Eggert  <eggert@cs.ucla.edu>

	Fix --enable-profiling bug introduced by 2013-02-25 change (Bug#13783).
	This bug was introduced by my 2013-02-25 change that simplified
	data_start configuration.  Without this change, on GNU/Linux
	an Emacs configured with --enable-profiling fails immediately
	due to a profiler signal.
	* Makefile.in: Compile with $(PROFILING_CFLAGS), but do not link
	with these flags.  On platforms where special flags are needed
	when linking temacs, the flags are now in LD_SWITCH_SYSTEM_TEMACS.
	(ALL_CFLAGS): Remove $(PROFILING_CFLAGS).
	(.c.o, .m.o): Compile with $(PROFILING_CFLAGS).

2013-04-07  Dmitry Antipov  <dmantipov@yandex.ru>

	Get rid of some platform-specific functions examining window
	system and its capabilities.  This is a partial rework of the
	2013-04-05 change.
	* lisp.h (have_menus_p): Remove prototype.  This function is
	replaced with platform-independent window_system_available.
	(check_window_system): Move to...
	* frame.h (decode_window_system_frame, window_system_available):
	...here, add new prototypes.
	* frame.c (window_system_available, decode_window_system_frame):
	New functions.
	(check_window_system): Platform-independent now.
	* xterm.h (x_in_use): Remove declaration.
	(check_x_frame):
	* w32term.h (check_x_frame):
	* nsterm.h (check_x_frame): Remove prototypes.  This function
	is replaced with platform-independent decode_window_system_frame.
	* msdos.c (have_menus_p): Remove.
	* nsfns.m (check_window_system, have_menus_p, check_ns_frame):
	Remove platform-specific functions.  Use check_window_system,
	decode_window_system_frame and check_ns_display_info where
	appropriate.  Minor style and comment tweaks.
	* w32fns.c (w32_in_use, check_window_system, have_menus_p)
	(check_x_frame): Likewise.
	* xfns.c (x_in_use, check_window_system, have_menus_p, check_x_frame):
	Likewise.
	* fileio.c, fns.c, font.c, fontset.c, image.c, menu.c, nsmenu.m:
	* nsselect.m, nsterm.m, w32font.c, w32menu.c, xfaces.c, xgselect.c:
	* xmenu.c, xselect.c: All related users changed.

2013-04-03  Kenichi Handa  <handa@gnu.org>

	The following changes is to optimize the code for reading UTF-8
	files.

	* coding.c (check_ascii): Rename from detect_ascii.  Return value
	changed.  Check EOL format.  Do not call adjust_coding_eol_type
	here.
	(check_utf_8): New function.
	(adjust_coding_eol_type): Do nothing if already adjusted.
	(detect_coding): Compare the return value of check_ascii with
	coding->src_bytes.  Call adjust_coding_eol_type if necessary.
	(decode_coding_gap): Optimize for valid UTF-8.

2013-03-21  Kenichi Handa  <handa@gnu.org>

	* coding.c (syms_of_coding): Cancel previous change.

	* insdel.c (insert_from_gap): Fix previous change.

2013-04-05  Dmitry Antipov  <dmantipov@yandex.ru>

	Consistently use platform-specific function to detect window system.
	* lisp.h (check_window_system): New prototype.  This function is
	going to replace check_x, check_w32 and check_ns.
	(have_menus_p): Mention msdos.c in comment.
	* fontset.c (check_window_system_func): Remove.  Adjust all users.
	* fontset.h (check_window_system_func): Remove prototype.
	* nsterm.h (check_ns):
	* xterm.h (check_x):
	* w32term.h (check_w32): Likewise.
	* menu.c (Fx_popup_menu): Use check_window_system.
	* msdos.c (check_window_system): Define for MS-DOS.
	* nsfns.m (check_window_system): Define for NS.  Adjust all users.
	* w32fns.c (check_window_system): Likewise for MS-Windows.
	* xfns.c (check_window_system): Likewise for X.
	* font.c, frame.c, nsmenu.m, nsselect.m, nsterm.m, w32menu.c:
	* xfaces.c, xmenu.c: Use check_window_system where appropriate.

2013-04-02  Paul Eggert  <eggert@cs.ucla.edu>

	Prefer < to > in range checks such as 0 <= i && i < N.
	This makes it easier to visualize quantities on a number line.
	This patch doesn't apply to all such range checks,
	only to the range checks affected by the 2013-03-24 change.
	This patch reverts most of the 2013-03-24 change.
	* alloc.c (xpalloc, Fgarbage_collect):
	* ccl.c (ccl_driver, resolve_symbol_ccl_program):
	* character.c (string_escape_byte8):
	* charset.c (read_hex):
	* data.c (cons_to_unsigned):
	* dispnew.c (update_frame_1):
	* doc.c (Fsubstitute_command_keys):
	* doprnt.c (doprnt):
	* editfns.c (hi_time, decode_time_components):
	* fileio.c (file_offset):
	* fns.c (larger_vector, make_hash_table, Fmake_hash_table):
	* font.c (font_intern_prop):
	* frame.c (x_set_alpha):
	* gtkutil.c (get_utf8_string):
	* indent.c (check_display_width):
	* keymap.c (Fkey_description):
	* lisp.h (FIXNUM_OVERFLOW_P, vcopy):
	* lread.c (read1):
	* minibuf.c (read_minibuf_noninteractive):
	* process.c (wait_reading_process_output):
	* search.c (Freplace_match):
	* window.c (get_phys_cursor_glyph):
	* xdisp.c (redisplay_internal):
	* xsmfns.c (smc_save_yourself_CB):
	Prefer < to > for range checks.
	* dispnew.c (sit_for): Don't mishandle NaNs.
	This fixes a bug introduced in the 2013-03-24 change.
	* editfns.c (decode_time_components): Don't hoist comparison.
	This fixes another bug introduced in the 2013-03-24 change.

2013-03-31  Dmitry Antipov  <dmantipov@yandex.ru>

	* frame.h (struct frame): Drop scroll_bottom_vpos
	member becaue all real users are dead long ago.
	(FRAME_SCROLL_BOTTOM_VPOS): Remove.
	* xdisp.c (redisplay_internal): Adjust user.

2013-03-30  Darren Hoo  <darren.hoo@gmail.com>  (tiny change)

	* nsmenu.m (showAtX:Y:for:): setLevel to
	NSPopUpMenuWindowLevel (Bug#13998).

2013-03-30  Jan Djärv  <jan.h.d@swipnet.se>

	* nsterm.h (ns_get_pending_menu_title, ns_check_menu_open)
	(ns_check_pending_open_menu): Declare.

	* nsmenu.m (ns_update_menubar): Correct NSTRACE.
	(x_activate_menubar): Update the menu with title that matches
	ns_get_pending_menu_title, and call
	ns_check_pending_openmenu (Bug#12698).
	(menuWillOpen:): New method.
	(menuNeedsUpdate:): Add check for ! COCOA || OSX < 10.5 (Bug#12698).

	* nsterm.m (menu_will_open_state, menu_mouse_point)
	(menu_pending_title): New varaibles.
	(ns_get_pending_menu_title, ns_check_menu_open)
	(ns_check_pending_open_menu): New functions.

2013-03-29  Dmitry Antipov  <dmantipov@yandex.ru>

	* indent.c (current_column_bol_cache): Remove leftover which is not
	used in Fmove_to_column any more.
	(current_column, scan_for_column): Adjust users.
	* keyboard.c (last_point_position_buffer, last_point_position_window):
	Remove leftovers which are not used for recording undo any more.
	(command_loop_1, syms_of_keyboard): Adjust users.
	* xdisp.c (last_max_ascent): Remove leftover which is not used in
	redisplay_window any more.
	(move_it_to): Adjust user.

2013-03-29  Juanma Barranquero  <lekktu@gmail.com>

	* makefile.w32-in ($(BLD)/filelock.$(O), $(BLD)/filelock.$(O)):
	Update dependencies.

2013-03-28  Stefan Monnier  <monnier@iro.umontreal.ca>

	* lisp.h (save_type, XSAVE_POINTER, set_save_pointer, XSAVE_INTEGER)
	(set_save_integer, XSAVE_OBJECT, XSAVE_VALUE): Move to avoid
	forward references.

2013-03-28  Dmitry Antipov  <dmantipov@yandex.ru>

	* window.h (struct window): Replace hchild, vchild and buffer slots
	with a single slot 'contents'.  This is possible because each valid
	window may have either the child window (in vertical or horizontal
	combination) or buffer to display (for the leaf window).  Using that,
	a lot of operations to traverse and/or change window hierarchies may
	be simplified.  New member horizontal is used to distinguish between
	horizontal and vertical combinations of internal windows.
	(WINDOW_LEAF_P, WINDOW_HORIZONTAL_COMBINATION_P)
	(WINDOW_VERTICAL_COMBINATION_P): New macros.
	(WINDOW_VALID_P, WINDOW_LIVE_P): Adjust to match struct window changes.
	* window.c (wset_hchild, wset_vchild): Remove.  Adjust all users.
	Use contents slot, not buffer, where appropriate.
	(wset_combination): New function.
	(wset_buffer): Add eassert.
	(Fframe_first_window): Simplify the loop reaching first window.
	(Fwindow_buffer): Use WINDOW_LEAF_P.
	(Fwindow_top_child): Use WINDOW_VERTICAL_COMBINATION_P.
	(Fwindow_left_child): Use WINDOW_HORIZONTAL_COMBINATION_P.
	(unshow_buffer): Convert initial debugging check to eassert.
	(replace_window, recombine_windows, Fdelete_other_windows_internal)
	(make_parent_window, window_resize_check, window_resize_apply)
	(resize_frame_windows, Fsplit_window_internal, Fdelete_window_internal)
	(Fset_window_configuration, delete_all_child_windows, save_window_save):
	Adjust to match struct window changes.
	(window_loop): Check for broken markers in CHECK_ALL_WINDOWS.
	(mark_window_cursors_off, count_windows, get_leaf_windows)
	(foreach_window_1): Simplify the loop.
	* alloc.c (mark_object): Do not check for the leaf window because
	internal windows has no glyph matrices anyway.
	* dispnew.c (clear_window_matrices, showing_window_margins_p)
	(allocate_matrices_for_window_redisplay, fake_current_matrices)
	(allocate_matrices_for_frame_redisplay, free_window_matrices)
	(build_frame_matrix_from_window_tree, mirror_make_current)
	(frame_row_to_window, mirror_line_dance, check_window_matrix_pointers)
	(update_window_tree, set_window_update_flags): Simplify the loop.
	(sync_window_with_frame_matrix_rows): Enforce live window.
	Use contents slot, not buffer, where appropriate.
	* frame.c (set_menu_bar_lines_1): Use WINDOW_VERTICAL_COMBINATION_P
	and WINDOW_HORIZONTAL_COMBINATION_P.
	(make_frame_visible_1): Simplify the loop.
	Use contents slot, not buffer, where appropriate.
	* xdisp.c (hscroll_window_tree, mark_window_display_accurate)
	(redisplay_windows, redisplay_mode_lines, update_cursor_in_window_tree)
	(expose_window_tree): Likewise.
	Use contents slot, not buffer, where appropriate.
	* textprop.c (get_char_property_and_overlay): Add CHECK_LIVE_WINDOW
	to avoid deleted windows.  Use contents slot instead of buffer.
	* buffer.c, dispextern.h, editfns.c, fileio.c, font.c, fringe.c:
	* indent.c, insdel.c, keyboard.c, keymap.c, minibuf.c, msdos.c:
	* nsfns.m, nsmenu.m, nsterm.m, print.c, w32fns.c, w32menu.c, xfaces.c:
	* xfns.c, xmenu.c: Use contents slot, not buffer, where appropriate.

2013-03-28  Eli Zaretskii  <eliz@gnu.org>

	* w32fns.c (w32_wnd_proc) [ENABLE_CHECKING]: Add code to help
	identify the reasons for assertion violations in bug#14062 and
	similar ones.
	(Fx_show_tip): Fix compilation error under
	"--enable-check-lisp-object-type".  (Bug#14073)

	* image.c (g_error_free) [WINDOWSNT]: Add DEF_IMGLIB_FN.
	Reported by <rzl24ozi@gmail.com>.

2013-03-28  Dmitry Antipov  <dmantipov@yandex.ru>

	* xdisp.c (with_echo_area_buffer_unwind_data): Save window
	start marker...
	(unwind_with_echo_area_buffer): ...to restore it here.
	This is needed to ensure that...
	(redisplay_window): ...both window markers are valid here,
	which is verified by eassert.
	* editfns.c (save_excursion_save): Do not assume that
	selected_window always displays the buffer.
	* buffer.c (Fbuffer_swap_text): Adjust window start markers.
	Fix comment.

2013-03-27  Stefan Monnier  <monnier@iro.umontreal.ca>

	* casetab.c (init_casetab_once): Don't abuse the ascii eqv table for
	the upcase table.

2013-03-27  rzl24ozi  <rzl24ozi@gmail.com>  (tiny change)

	* image.c [WINDOWSNT]: Fix calls to DEF_IMGLIB_FN for SVG function.

2013-03-27  Eli Zaretskii  <eliz@gnu.org>

	* w32proc.c (IsValidLocale) [__GNUC__]: Don't declare prototype,
	since MinGW's w32api headers do.  This avoids compiler warnings.

	* w32.c (FSCTL_GET_REPARSE_POINT) [_MSC_VER || _W64]: Don't define
	if already defined.

2013-03-26  Eli Zaretskii  <eliz@gnu.org>

	* w32.c (_REPARSE_DATA_BUFFER): Condition by _MSVC and _W64.

2013-03-26  Jan Djärv  <jan.h.d@swipnet.se>

	* gtkutil.c (style_changed_cb): Check if frame is live and an
	X frame (Bug#14038).

2013-03-26  Eli Zaretskii  <eliz@gnu.org>

	* w32.c (_PROCESS_MEMORY_COUNTERS_EX) [_WIN32_WINNT < 0x0500]:
	Define only for _WIN32_WINNT less than 0x0500.
	(_ANONYMOUS_UNION, _ANONYMOUS_STRUCT) [!_W64]: Don't define for
	MinGW64.
	Move inclusion of time.h before sys/time.h, so that MinGW64 could
	see its own definitions of 'struct timeval' and 'struct timezone'.

	Fix incompatibilities between MinGW.org and MinGW64 headers.
	* w32term.c (WCRANGE, GLYPHSET): Don't define if _W64 is defined.

	* w32.c (REPARSE_DATA_BUFFER): Guard with
	MAXIMUM_REPARSE_DATA_BUFFER_SIZE being defined.

2013-03-25  Jan Djärv  <jan.h.d@swipnet.se>

	* xterm.c: Include X11/XKBlib.h
	(XTring_bell): Use XkbBell if HAVE_XKB (Bug#14041).

2013-03-24  Andreas Schwab  <schwab@linux-m68k.org>

	* alloc.c (xpalloc, Fgarbage_collect): Reorder conditions that are
	written backwards.
	* blockinput.h (input_blocked_p): Likewise.
	* bytecode.c (exec_byte_code): Likewise.
	* callproc.c (call_process_kill, call_process_cleanup)
	(Fcall_process): Likewise.
	* ccl.c (ccl_driver, resolve_symbol_ccl_program)
	(Fccl_execute_on_string): Likewise.
	* character.c (string_escape_byte8): Likewise.
	* charset.c (read_hex): Likewise.
	* cm.c (calccost): Likewise.
	* data.c (cons_to_unsigned): Likewise.
	* dired.c (directory_files_internal, file_name_completion):
	Likewise.
	* dispnew.c (scrolling_window, update_frame_1, Fsleep_for)
	(sit_for): Likewise.
	* doc.c (Fsubstitute_command_keys): Likewise.
	* doprnt.c (doprnt): Likewise.
	* editfns.c (hi_time, decode_time_components, Fformat): Likewise.
	* emacsgtkfixed.c: Likewise.
	* fileio.c (file_offset, Fwrite_region): Likewise.
	* floatfns.c (Fexpt, fmod_float): Likewise.
	* fns.c (larger_vector, make_hash_table, Fmake_hash_table):
	Likewise.
	* font.c (font_intern_prop): Likewise.
	* frame.c (x_set_alpha): Likewise.
	* gtkutil.c (get_utf8_string): Likewise.
	* indent.c (check_display_width): Likewise.
	* intervals.c (create_root_interval, rotate_right, rotate_left)
	(split_interval_right, split_interval_left)
	(adjust_intervals_for_insertion, delete_node)
	(interval_deletion_adjustment, adjust_intervals_for_deletion)
	(merge_interval_right, merge_interval_left, copy_intervals)
	(set_intervals_multibyte_1): Likewise.
	* keyboard.c (gobble_input, append_tool_bar_item): Likewise.
	* keymap.c (Fkey_description): Likewise.
	* lisp.h (FIXNUM_OVERFLOW_P, vcopy): Likewise.
	* lread.c (openp, read_integer, read1, string_to_number):
	Likewise.
	* menu.c (ensure_menu_items): Likewise.
	* minibuf.c (read_minibuf_noninteractive): Likewise.
	* print.c (printchar, strout): Likewise.
	* process.c (create_process, Faccept_process_output)
	(wait_reading_process_output, read_process_output, send_process)
	(wait_reading_process_output): Likewise.
	* profiler.c (make_log, handle_profiler_signal): Likewise.
	* regex.c (re_exec): Likewise.
	* regex.h: Likewise.
	* search.c (looking_at_1, Freplace_match): Likewise.
	* sysdep.c (get_child_status, procfs_ttyname)
	(procfs_get_total_memory): Likewise.
	* systime.h (EMACS_TIME_VALID_P): Likewise.
	* term.c (dissociate_if_controlling_tty): Likewise.
	* window.c (get_phys_cursor_glyph): Likewise.
	* xdisp.c (init_iterator, redisplay_internal, redisplay_window)
	(try_window_reusing_current_matrix, try_window_id, pint2hrstr):
	Likewise.
	* xfns.c (Fx_window_property): Likewise.
	* xmenu.c (set_frame_menubar): Likewise.
	* xselect.c (x_get_window_property, x_handle_dnd_message):
	Likewise.
	* xsmfns.c (smc_save_yourself_CB): Likewise.
	* xterm.c (x_scroll_bar_set_handle): Likewise.

2013-03-24  Dmitry Antipov  <dmantipov@yandex.ru>

	* xfaces.c (Finternal_face_x_get_resource): Allow 3rd (frame) argument
	to be optional or nil.  Adjust comment and convert it to docstring.
	* xselect.c (Fx_send_client_event): Rename to Fx_send_client_message.
	* frame.c (display_x_get_resource, Fx_get_resource): Break long line.

2013-03-24  Paul Eggert  <eggert@cs.ucla.edu>

	Static checking by GCC 4.8-20130319.
	* image.c (gif_load): Assume pass < 3 to pacify GCC.
	* process.c (Fset_process_datagram_address)
	(Fmake_network_process): Check get_lisp_to_sockaddr_size return value.
	* xdisp.c (get_char_face_and_encoding)
	(get_glyph_face_and_encoding): Ensure that *CHAR2B is initialized.
	(get_glyph_face_and_encoding): Prepare face before possibly using it.
	(get_per_char_metric): Don't use CHAR2B if it might not be initialized.

2013-03-24  Ken Brown  <kbrown@cornell.edu>

	* w32fns.c (emacs_abort) [CYGWIN]: Define `_open' as a macro to
	fix compilation on 64-bit Cygwin, where underscores are not
	automatically prepended.

	* w32term.c (w32_initialize): Silence compiler warning.

2013-03-23  Eli Zaretskii  <eliz@gnu.org>

	* w32term.c (w32fullscreen_hook): Use FRAME_NORMAL_WIDTH,
	FRAME_NORMAL_HEIGHT, and FRAME_PREV_FSMODE, instead of static
	variables, to save and restore frame dimensions.
	Use FRAME_NORMAL_LEFT and FRAME_NORMAL_TOP to restore frame position
	after returning from a 'fullscreen' configuration.
	use SendMessage instead of PostMessage to send the SC_RESTORE message,
	to avoid races between the main thread and the input thread.

	* w32term.h (struct w32_output): New members normal_width,
	normal_height, normal_top, normal_left, and prev_fsmode.
	(FRAME_NORMAL_WIDTH, FRAME_NORMAL_HEIGHT, FRAME_NORMAL_TOP)
	(FRAME_NORMAL_LEFT, FRAME_PREV_FSMODE): New macros to access these
	members of a frame.

	* w32term.c (w32fullscreen_hook): Record last value of the frame's
	'fullscreen' parameter.  Always record previous width and height
	of the frame, except when switching out of maximized modes, so
	that they could be restored correctly, instead of resetting to the
	default frame dimensions.  Send SC_RESTORE command to the frame,
	unless we are going to send SC_MAXIMIZE, to restore the frame
	resize hints in the mouse pointer shown by the window manager.
	(Bug#14032)

	* frame.c (get_frame_param): Now extern for WINDOWSNT as well.

	* lisp.h (get_frame_param): Adjust conditions for prototype
	declaration.

2013-03-22  Ken Brown  <kbrown@cornell.edu>

	* unexcw.c: Drop unneeded inclusion of w32common.h.
	(report_sheap_usage): Declare.
	(read_exe_header): Add magic numbers for x86_64.
	(fixup_executable): Fix printf format specifier for unsigned long
	argument.

2013-03-22  Dmitry Antipov  <dmantipov@yandex.ru>

	* frame.h (struct frame): Put menu_bar_window under #ifdef
	because this member is not needed when X toolkit is in use.
	(fset_menu_bar_window):
	* dispnew.c (clear_current_matrices, clear_desired_matrices)
	(free_glyphs, update_frame):
	* xdisp.c (expose_frame): Likewise.
	(display_menu_bar): Likewise.  Remove redundant eassert.
	* window.h (WINDOW_MENU_BAR_P): Always define to 0 if X
	toolkit is in use.

2013-03-21  Paul Eggert  <eggert@cs.ucla.edu>

	Use functions and constants to manipulate Lisp_Save_Value objects.
	This replaces code that used macros and strings and token-pasting.
	The change makes the C source a bit easier to follow,
	and shrinks the Emacs executable a bit.
	* alloc.c: Verify some properties of Lisp_Save_Value's representation.
	(make_save_value): Change 1st arg from string to enum.  All callers
	changed.
	(INTX): Remove.
	(mark_object): Use if, not #if, for GC_MARK_STACK.
	* lisp.h (SAVE_VALUEP, XSAVE_VALUE, XSAVE_POINTER, XSAVE_INTEGER)
	(XSAVE_OBJECT): Now functions, not macros.
	(STRING_BYTES_BOUND): Now just a macro, not a constant too;
	the constant was never used.
	(SAVE_SLOT_BITS, SAVE_VALUE_SLOTS, SAVE_TYPE_BITS, SAVE_TYPE_INT_INT)
	(SAVE_TYPE_INT_INT_INT, SAVE_TYPE_OBJ_OBJ, SAVE_TYPE_OBJ_OBJ_OBJ)
	(SAVE_TYPE_OBJ_OBJ_OBJ_OBJ, SAVE_TYPE_PTR_INT, SAVE_TYPE_PTR_OBJ)
	(SAVE_TYPE_PTR_PTR, SAVE_TYPE_PTR_PTR_OBJ, SAVE_TYPE_MEMORY):
	New constants.
	(struct Lisp_Save_Value): Replace members area, type0, type1, type2,
	type3 with a single member save_type.  All uses changed.
	(save_type, set_save_pointer, set_save_integer): New functions.
	* print.c (PRINTX): Remove.

	* alloc.c: Remove redundant static declarations.

2013-03-20  Dmitry Antipov  <dmantipov@yandex.ru>

	* window.h (struct window): Convert left_col, top_line, total_lines
	and total_cols from Lisp_Objects to integers.  Adjust comments.
	(wset_left_col, wset_top_line, wset_total_cols, wset_total_lines):
	Remove.
	(WINDOW_TOTAL_COLS, WINDOW_TOTAL_LINES, WINDOW_LEFT_EDGE_COL)
	(WINDOW_TOP_EDGE_LINE): Drop Lisp_Object to integer conversion.
	* dispnew.c, frame.c, w32fns.c, window.c, xdisp.c, xfns.c:
	Adjust users where appropriate.

2013-03-20  Dmitry Antipov  <dmantipov@yandex.ru>

	* frame.h (struct frame): Drop resx and resy because the same data is
	available from window system-specific output context.  Adjust users.
	(default_pixels_per_inch_x, default_pixels_per_inch_y):
	New functions to provide defaults when no window system available.
	(FRAME_RES_X, FRAME_RES_Y): New macros.
	(NUMVAL): Move from xdisp.c.
	* font.c (font_pixel_size, font_find_for_lface, font_open_for_lface)
	(Ffont_face_attributes, Fopen_font):
	* image.c (gs_load):
	* w32font.c (fill_in_logfont):
	* xdisp.c (calc_pixel_width_or_height):
	* xfaces.c (Fx_family_fonts, set_lface_from_font): Use them.
	* xsettings.c (apply_xft_settings): Drop frame loop and adjust comment.

2013-03-20  Kenichi Handa  <handa@gnu.org>

	* coding.c (syms_of_coding): Initialize disable_ascii_optimization
	to 1 (temporary workaround until a bug related to ASCII
	optimization is fixed).

2013-03-19  Dmitry Antipov  <dmantipov@yandex.ru>

	* window.c (Fwindow_combination_limit, Fset_window_combination_limit):
	Signal error if window is not internal.  Adjust docstring.
	(delete_all_child_windows): Use combination_limit to save the buffer.
	(Fset_window_configuration): Adjust accordingly.
	* print.c (syms_of_print): Initialize debugging output not here...
	(init_print_once): ...but in a new function here.
	* lisp.h (init_print_once): Add prototype.
	* emacs.c (main): Add call to init_print_once.  Adjust comments.

2013-03-18  Dmitry Antipov  <dmantipov@yandex.ru>

	* window.c (window_resize_check, window_resize_apply)
	(window_from_coordinates, recombine_windows, set_window_buffer)
	(make_parent_window, Fwindow_resize_apply, resize_frame_windows)
	(Fsplit_window_internal, Fdelete_window_internal)
	(freeze_window_starts): Use bool for booleans.
	* window.h (window_frame_coordinates, resize_frame_windows)
	(freeze_window_starts, set_window_buffer): Adjust prototypes.

2013-03-17  Stefan Monnier  <monnier@iro.umontreal.ca>

	* dispnew.c (bitch_at_user): Use `user-error'.

2013-03-17  Ken Brown  <kbrown@cornell.edu>

	* dispextern.h (RGB_PIXEL_COLOR): Move here from image.c.  Use it
	as return type of image_background.  (Bug#13981)
	* image.c (RGB_PIXEL_COLOR): Move to dispextern.h.

2013-03-16  Jan Djärv  <jan.h.d@swipnet.se>

	* nsterm.m (updateFrameSize:): Change resize increments if needed.
	(ns_select): Don't return with result uninitialized.

	* nsterm.h (EmacsSavePanel, EmacsOpenPanel): Add getFilename
	and getDirectory.

	* nsfns.m (ns_filename_from_panel, ns_directory_from_panel):
	New functions.
	(Fns_read_file_name): ret is BOOL.  If ! dir_only_p, don't choose
	directories.  If filename is nil, get directory name (Bug#13932).
	Use getFilename and getDirectory.
	(getFilename, getDirectory): New methods for EmacsSavePanel and
	EmacsOpenPanel.
	(ok:): In EmacsOpenPanel, if we can't choose directories, just return.

2013-03-15  Paul Eggert  <eggert@cs.ucla.edu>

	* coding.c (decode_coding_gap): Fix typo caught by static checking.

2013-03-15  Kenichi Handa  <handa@gnu.org>

	* insdel.c (insert_from_gap): New arg text_at_gap_tail.
	(adjust_after_replace): Make it back to static.  Delete the third
	arg text_at_gap_tail.  Cancel the code for handling it.

	* coding.h (struct coding_system): New member eol_seen.

	* coding.c (detect_ascii): New function.
	(detect_coding): Set coding->head_ascii and coding->eol_seen only
	when the source bytes are actually scanned.  On detecting for
	coding_category_utf_8_auto, call detect_ascii instead of scanning
	source bytes directly.
	(produce_chars): Call insert_from_gap with the new arg 0.
	(encode_coding): Likewise.
	(decode_coding_gap): Control ASCII optimization by the variable
	disable_ascii_optimization instead of #ifndef .. #endif.
	Deccode EOL format according to coding->eol_seen.
	(syms_of_coding): Declare disable-ascii-optimization as a Lisp
	variable.

	* lisp.h (adjust_after_replace): Cancel externing it.
	(insert_from_gap): Adjust prototype.

2013-03-15  Eli Zaretskii  <eliz@gnu.org>

	* w32term.c (w32fullscreen_hook): Swap FULLSCREEN_BOTH and
	FULLSCREEN_MAXIMIZED.  (Bug#13935)

2013-03-15  Dmitry Antipov  <dmantipov@yandex.ru>

	* region-cache.c (find_cache_boundary, move_cache_gap)
	(insert_cache_boundary, delete_cache_boundaries, set_cache_region):
	Simplify debugging check and convert to eassert.  Adjust comment.
	(pp_cache): Put under ENABLE_CHECKING.

2013-03-14  Eli Zaretskii  <eliz@gnu.org>

	* w32term.c (w32_read_socket) <WM_WINDOWPOSCHANGED>: Remove old
	and incorrect code.  Treat WM_WINDOWPOSCHANGED like WM_ACTIVATE
	and WM_ACTIVATEAPP.
	(w32fullscreen_hook): If the frame is visible, reset
	f->want_fullscreen flag after changing the frame size.  If the
	frame is not visible, set f->want_fullscreen to FULLSCREEN_WAIT.
	(Bug#13953)

2013-03-13  Daniel Colascione  <dancol@dancol.org>

	* emacs.c (main): Call syms_of_cygw32 on CYGWIN non-NTGUI builds
	too so that these builds can use Cygwin's file conversion
	functions.  (We've been building and linking cygw32.o all along
	and just not using it.)

2013-03-13  Paul Eggert  <eggert@cs.ucla.edu>

	File synchronization fixes (Bug#13944).
	* Makefile.in (LIB_FDATASYNC): New macro.
	(LIBES): Use it.
	* conf_post.h (BSD_SYSTEM, BSD_SYSTEM_AHB): Remove; no longer needed.
	* fileio.c (Fwrite_region, write_region_inhibit_fsync):
	Don't worry about HAVE_FSYNC, since a substitute fsync is
	available if the system lacks one.
	(Fwrite_regin): Retry fsync if interrupted.

2013-03-13  Eli Zaretskii  <eliz@gnu.org>

	* w32term.c (w32_read_socket): If the Emacs frame is being
	activated, call w32fullscreen_hook, to make sure the new frame
	dimensions are in effect.  (Bug#13937)

2013-03-13  Dmitry Antipov  <dmantipov@yandex.ru>

	* xdisp.c (init_iterator): Simplify because both character and byte
	positions are either specified or -1.  Add eassert.  Adjust comment.
	* window.c (Fscroll_other_window): Use SET_PT_BOTH because both
	character and byte positions can be obtained from marker.

2013-03-13  Paul Eggert  <eggert@cs.ucla.edu>

	Static checking by Sun C 5.12.
	* alloc.c (buffer_memory_full) [REL_ALLOC]:
	* bytecode.c (exec_byte_code):
	* dispnew.c (init_display):
	* eval.c (error):
	* fileio.c (Fsubstitute_in_file_name):
	* keyboard.c (Fevent_convert_list):
	* keymap.c (Fsingle_key_description):
	* term.c (maybe_fatal, fatal):
	* xfns.c (Fx_display_backing_store, Fx_display_visual_class):
	* xsmfns.c (Fhandle_save_session):
	Omit unreachable code.
	* keymap.c (map_keymap_char_table_item): Cast void * to
	a function pointer type; the C Standard requires this.

	* sysdep.c: Remove a use of BSD_SYSTEM, which I'm trying to phase out.
	Include <sys/param.h> unconditionally, as that works elsewhere and
	is simpler here.  Include <sys/sysctl.h> if DARWIN_OS ||
	__FreeBSD__, not if BSD_SYSTEM, since it's needed only for Darwin
	and FreeBSD now.

See ChangeLog.12 for earlier changes.

;; Local Variables:
;; coding: utf-8
;; End:

  Copyright (C) 2011-2018 Free Software Foundation, Inc.

  This file is part of GNU Emacs.

  GNU Emacs is free software: you can redistribute it and/or modify
  it under the terms of the GNU General Public License as published by
  the Free Software Foundation, either version 3 of the License, or
  (at your option) any later version.

  GNU Emacs is distributed in the hope that it will be useful,
  but WITHOUT ANY WARRANTY; without even the implied warranty of
  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  GNU General Public License for more details.

  You should have received a copy of the GNU General Public License
  along with GNU Emacs.  If not, see <https://www.gnu.org/licenses/>.
