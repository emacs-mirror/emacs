GNU Emacs NEWS -- history of user-visible changes.

Copyright (C) 2017-2019 Free Software Foundation, Inc.
See the end of the file for license conditions.

Please send Emacs bug reports to 'bug-gnu-emacs@gnu.org'.
If possible, use 'M-x report-emacs-bug'.

This file is about changes in Emacs version 27.

See file HISTORY for a list of GNU Emacs versions and release dates.
See files NEWS.26, NEWS.25, ..., NEWS.18, and NEWS.1-17 for changes
in older Emacs versions.

You can narrow news to a specific version by calling 'view-emacs-news'
with a prefix argument or by typing 'C-u C-h C-n'.

Temporary note:
+++ indicates that all necessary documentation updates are complete.
    (This means all relevant manuals in doc/ AND lisp doc-strings.)
--- means no change in the manuals is needed.
When you add a new item, use the appropriate mark if you are sure it applies,


* Installation Changes in Emacs 27.1

** Emacs now uses GMP, the GNU Multiple Precision library.
By default, if 'configure' does not find a suitable libgmp, it
arranges for the included mini-gmp library to be built and used.
The new 'configure' option '--without-libgmp' uses mini-gmp even if a
suitable libgmp is available.

** The new configure option '--with-json' adds support for JSON using
the Jansson library.  It is on by default; use './configure
--with-json=no' to build without Jansson support.  The new JSON
functions 'json-serialize', 'json-insert', 'json-parse-string', and
'json-parse-buffer' are typically much faster than their Lisp
counterparts from json.el.

** Several configure options now accept an option-argument 'ifavailable'.
For example, './configure --with-xpm=ifavailable' now configures Emacs
to attempt to use libxpm but to continue building even if libxpm is absent.
The other affected options are --with-gif, --with-gnutls, --with-jpeg,
--with-png, and --with-tiff.

** The etags program now uses the C library's regular expression matcher
when possible, and a compatible regex substitute otherwise.  This will
let developers maintain Emacs's own regex code without having to also
support other programs.  The new configure option '--without-included-regex'
forces etags to use the C library's regex matcher even if the regex
substitute ordinarily would be used to work around compatibility problems.

** Emacs has been ported to the '-fcheck-pointer-bounds' option of GCC.
This causes Emacs to check bounds of some arrays addressed by its
internal pointers, which can be helpful when debugging the Emacs
interpreter or modules that it uses.  If your platform supports it you
can enable it when configuring, e.g., './configure CFLAGS="-g3 -O2
-mmpx -fcheck-pointer-bounds"' on Intel MPX platforms.

** Emacs now normally uses a C pointer type instead of a C integer
type to implement Lisp_Object, which is the fundamental machine word
type internal to the Emacs Lisp interpreter.  This change aims to
catch typos and supports '-fcheck-pointer-bounds'.  The 'configure'
option '--enable-check-lisp-object-type' is therefore no longer as
useful and so is no longer enabled by default in developer builds,
to reduce differences between developer and production builds.

+++
** Emacs now uses a "portable dumper" instead of unexec.
This improves compatibility with memory allocation on modern systems,
and in particular better supports the Address Space Layout
Randomization (ASLR) feature, a security technique used by most modern
operating systems.

Portable dumping can be disabled at configure time via the configure
option '--with-dumping=unexec' (but we don't recommend that, unless
the portable dumping doesn't work on your system for some
reason---please report such systems to the Emacs developers as bugs).

When built with the portable dumping support (which is the default),
Emacs looks for the 'emacs.pdmp' file, generated during the build, in
its data directory at startup, and loads the dumped state from there.
The new command-line argument '--dump-file=FILE' allows to specify a
non-default '.pdmp' file to load the state from; see the node "Initial
Options" in the Emacs manual for more information.

+++
** The new configure option '--enable-checking=structs' attempts to
check that the portable dumper code has been updated to match the last
change to one of the data structures that it relies on.

---
** Emacs now requires GTK 2.24 and GTK 3.10 for the GTK 2 and GTK 3
builds respectively.


* Startup Changes in Emacs 27.1

+++
** Emacs can now be configured using an early init file.
The file is called 'early-init.el', in 'user-emacs-directory'.  It is
loaded very early in the startup process: before graphical elements
such as the tool bar are initialized, and before the package manager
is initialized.  The primary purpose is to allow customizing how the
package system is initialized given that initialization now happens
before loading the regular init file (see below).

We recommend against putting any customizations in this file that
don't need to be set up before initializing installed add-on packages,
because the early init file is read too early into the startup
process, and some important parts of the Emacs session, such as
'window-system' and other GUI features, are not yet set up, which could
make some customization fail to work.

+++
** Installed packages are now activated *before* loading the init file.
This is part of a change intended to eliminate the behavior of
package.el inserting a call to 'package-initialize' into the init
file, which was previously done when Emacs was started.  As a result
of this change, it is no longer necessary to call 'package-initialize'
in your init file.

However, if your init file changes the values of 'package-load-list' or
'package-user-dir', or sets 'package-enable-at-startup' to nil then it won't
work right without some adjustment:
- you can move that code to the early init file (see above), so those settings
  apply before Emacs tries to activate the packages.
- you can use the new 'package-quickstart' so activation of packages does not
  need to pay attention to 'package-load-list' or 'package-user-dir' any more.

---
** Emacs now notifies systemd when startup finishes or shutdown begins.
Units that are ordered after 'emacs.service' will only be started
after Emacs has finished initialization and is ready for use.
(If your Emacs is installed in a non-standard location and you copied the
emacs.service file to eg "~/.config/systemd/user/", you will need to copy
the new version of the file again.)


* Changes in Emacs 27.1

** emacsclient

+++
*** emacsclient now supports the 'EMACS_SOCKET_NAME' environment variable.
The behavior is identical to 'EMACS_SERVER_FILE', in that the
command-line value specified via '--socket-name' will override the
environment, and the natural default to TMPDIR, then "/tmp", continues
to apply.

+++
*** Emacs and emacsclient now default to $XDG_RUNTIME_DIR/emacs
as the directory for client/server sockets, if Emacs is running
under an X Window System desktop that sets the XDG_RUNTIME_DIR
environment variable to indicate where session sockets should go.
To get the old, less-secure behavior, you can set the
EMACS_SOCKET_NAME environment variable to an appropriate value.

---
*** When run by root, emacsclient no longer connects to non-root sockets.
(Instead you can use Tramp methods to run root commands in a non-root Emacs.)

---
** Control of the threshold for using the 'distant-foreground' color.
The threshold for color distance below which the 'distant-foreground'
color of the face will be used instead of the foreground color can now
be controlled via the new variable 'face-near-same-color-threshold'.
The default value is 30000, as the previously hard-coded threshold.

+++
** The function 'read-passwd' uses '*' as default character to hide passwords.

---
** The new option 'tooltip-resize-echo-area' avoids truncating tooltip text
on GUI frames when tooltips are displayed in the echo area.  Instead,
it resizes the echo area as needed to accommodate the full tool-tip
text.

---
** Show mode line tooltips only if the corresponding action applies.
Customize the option 'mode-line-default-help-echo' to restore the old
behavior where the tooltip text is also shown when the corresponding
action does not apply.

+++
** New hook 'server-after-make-frame-hook'.
This hook is a convenient place to perform initializations in daemon
mode which require GUI features to be available.  One example is
restoration of the previous session using the desktop.el package: put
the call to 'desktop-read' in this hook, if you want the GUI settings
to be restored, or if desktop.el needs to interact with you during
restoration of the session.

+++
** New function 'logcount' calculates an integer's Hamming weight.

+++
** New function 'libxml-available-p'.
This function returns non-nil if libxml support is both compiled in
and available at run time.  Lisp programs should use this function to
detect built-in libxml support, instead of testing for that
indirectly, e.g., by checking that functions like
'libxml-parse-html-region' return nil.

+++
** 'libxml-parse-xml-region' and 'libxml-parse-html' region take
a parameter that's called DISCARD-COMMENTS, but it really only
discards the top-level comment.  Therefore this parameter is now
obsolete, and the new utility function 'xml-remove-comments' can be
used to remove comments before calling the libxml functions to parse
the data.

+++
** The Network Security Manager now allows more fine-grained control
of what checks to run via the 'network-security-protocol-checks'
variable.

+++
** TLS connections have their security tightened by default.
Most of the checks for outdated, believed-to-be-weak TLS algorithms
and ciphers are now switched on by default.  By default, the NSM will
flag connections using these weak algorithms and ask users whether to
allow them.  To get the old behavior back (where certificates are
checked for validity, but no warnings about weak cryptography are
issued), you can either set 'network-security-protocol-checks' to nil,
or adjust the elements in that variable to only happen on the 'high'
security level (assuming you use the 'medium' level).

+++
** Native GnuTLS connections can now use client certificates.
Previously, this support was only available when using the external
gnutls-cli command.  Call 'open-network-stream' with
':client-certificate t' to trigger looking up of per-server
certificates via 'auth-source'.

+++
** New function 'fill-polish-nobreak-p', to be used in 'fill-nobreak-predicate'.
It blocks line breaking after a one-letter word, also in the case when
this word is preceded by a non-space, but non-alphanumeric character.

+++
** The limit on repetitions in regexps has been raised to 2^16-1.
It was previously limited to 2^15-1.  For example, the following
regular expression was previously invalid, but is now accepted:

   x\{32768\}

---
** The German prefix and postfix input methods now support Capital sharp S.

---
** New input methods 'hawaiian-postfix' and 'hawaiian-prefix'.

---
** New input methods for several variants of the Sami language.
The Sami input methods include: 'norwegian-sami-prefix',
'bergsland-hasselbrink-sami-prefix', 'southern-sami-prefix',
'ume-sami-prefix', 'northern-sami-prefix', 'inari-sami-prefix',
'skolt-sami-prefix', and 'kildin-sami-prefix'.

+++
** In Japanese environments that do not specify encodings and are not
based on MS-Windows, the default encoding is now utf-8 instead of
japanese-iso-8bit.

+++
** New function 'exec-path'.
This function by default returns the value of the corresponding
variable, but can optionally return the equivalent of 'exec-path'
from a remote host.

+++
** The function 'executable-find' supports an optional argument REMOTE.
This triggers to search the program on the remote host as indicated by
'default-directory'.

+++
** New variable 'auto-save-no-message'.
When set to t, no message will be shown when auto-saving (default
value: nil).

---
** The value of 'make-cursor-line-fully-visible' can now be a function.
In addition to nil or non-nil, the value can now be a predicate
function.  Follow mode uses this to control scrolling of its windows
when the last screen line in a window is not fully visible.

+++
** New variable 'emacs-repository-branch'.
It reports the git branch from which Emacs was built.

+++
** New user option 'switch-to-buffer-obey-display-actions'.
When non-nil, 'switch-to-buffer' uses 'pop-to-buffer-same-window' that
respects display actions specified by 'display-buffer-alist' and
'display-buffer-overriding-action'.

** New 'flex' completion style
An implementation of popular "flx/fuzzy/scatter" completion which
matches strings where the pattern appears as a subsequence.  Put
simply, makes "foo" complete to both "barfoo" and "frodo".  Add 'flex'
to 'completion-styles' or 'completion-category-overrides' to use it.

** Connection-local variables

+++
*** Connection-local variables are applied by default like file-local
and directory-local variables.

+++
*** The macro 'with-connection-local-variables' has been renamed from
'with-connection-local-profiles'.  No argument 'profiles' needed any
longer.

---
** next-error-verbose controls when `next-error' outputs a message
   about the error locus.


* Editing Changes in Emacs 27.1

+++
** New command 'make-empty-file'.

---
** New variable 'x-wait-for-event-timeout'.
This controls how long Emacs will wait for updates to the graphical
state to take effect (making a frame visible, for example).

+++
** New user option 'electric-quote-replace-double'.
This option controls whether '"' is replaced in 'electric-quote-mode',
in addition to other quote characters.  If non-nil, ASCII double-quote
characters that quote text "like this" are replaced by double
typographic quotes, “like this”, in text modes, and in comments in
non-text modes.

---
** New user option 'flyspell-case-fold-duplications'.
This option controls whether Flyspell mode considers consecutive words
to be duplicates if they are not in the same case.  If non-nil, the
default, words are considered to be duplicates even if their letters'
case does not match.

---
** 'write-abbrev-file' now includes special properties.
'write-abbrev-file' now writes special properties like ':case-fixed'
for abbrevs that have them.

+++
** 'write-abbrev-file' skips empty tables.
'write-abbrev-file' now skips inserting a 'define-abbrev-table' form for
tables which do not have any non-system abbrevs to save.

+++
** The new functions and commands 'text-property-search-forward' and
'text-property-search-backward' have been added.  These provide an
interface that's more like functions like 'search-forward'.

---
** More commands support noncontiguous rectangular regions, namely
'upcase-dwim', 'downcase-dwim', 'replace-string', 'replace-regexp'.

+++
** When asked to visit a large file, Emacs now offers visiting it literally.
Previously, Emacs would only ask for confirmation before visiting
large files.  Now it also offers a third alternative: to visit the
file literally, as in 'find-file-literally', which speeds up
navigation and editing of large files.

---
** 'add-dir-local-variable' now uses dotted pair notation syntax to
write alists of variables to ".dir-locals.el".  This is the same
syntax that you can see in the example of a ".dir-locals.el" file in
the node "(emacs) Directory Variables" of the user manual.

+++
** Network connections using 'local can now use IPv6.
'make-network-process' now uses the correct loopback address when
asked to use :host 'local and :family 'ipv6.

+++
** The new function `replace-region-contents' replaces the current
region using a given replacement-function in a non-destructive manner
(in terms of `replace-buffer-contents').

+++
** The command `replace-buffer-contents' now has two optional
arguments mitigating performance issues when operating on huge
buffers.

** The command 'delete-indentation' now operates on the active region.
If the region is active, the command joins all the lines in the
region.  When there's no active region, the command works on the
current and the previous or the next line, as before.

+++

* Changes in Specialized Modes and Packages in Emacs 27.1

** compile.el
---
*** In compilation-error-regexp-alist, 'line' (and 'end-line') can be functions

** cl-lib
+++
*** cl-defstruct has a new :noinline argument to prevent inlining its functions

** doc-view-mode
*** New commands doc-view-presentation and doc-view-fit-window-to-page
*** Added support for password-protected PDF files

** map.el
*** Now also understands plists.
*** Now defined via generic functions that can be extended via 'cl-defmethod'.
*** Deprecate the 'map-put' macro in favor of a new 'map-put!' function.
*** 'map-contains-key' now returns a boolean rather than the key.
*** Deprecate the 'testfn' args of 'map-elt' and 'map-contains-key'.
*** New generic function 'map-insert'.

+++
** seq.el
New convenience functions 'seq-first' and 'seq-rest' give easy access
to respectively the first and all but the first elements of sequences.

The new predicate function 'seq-contains-p' should be used instead of
the now obsolete 'seq-contains'.

---
** Follow mode
In the current follow group of windows, "ghost" cursors are no longer
displayed in the non-selected follow windows.  To get the old behavior
back, customize 'follow-hide-ghost-cursors' to nil.

** Windmove

*** 'windmove-create-window' when non-nil makes a new window on moving off
the edge of the frame.

*** Windmove supports directional window display and selection.
The new command 'windmove-display-default-keybindings' binds default
keys with provided modifiers (by default, Shift-Meta) to the commands
that display the next buffer in the window at the specified direction.
This is like 'windmove-default-keybindings' that binds keys to commands
that select the window in the specified direction, but additionally it
displays the buffer from the next command in that window.  For example,
'S-M-right C-h i' displays the *Info* buffer in the right window,
creating the window if necessary.  A special key can be customized to
display the buffer in the same window, for example, 'S-M-0 C-h e'
displays the *Messages* buffer in the same window.

*** Windmove also supports directional window deletion.
The new command 'windmove-delete-default-keybindings' binds default
keys with provided prefix (by default, 'C-x') and modifiers (by default,
'Shift') to the commands that delete the window in the specified
direction.  For example, 'C-x S-down' deletes the window below.
With a prefix arg 'C-u', also kills the buffer in that window.
With 'M-0', deletes the selected window and selects the window
that was in the specified direction.

*** New command 'windmove-swap-states-in-direction' binds default keys
to the commands that swap the states of the selected window with the
window in the specified direction.

** Octave mode
The mode is automatically enabled in files that start with the
'function' keyword.

** project.el
*** New commands 'project-search' and 'project-query-replace-regexp'.

** Etags

+++
*** 'next-file' is now an obsolete alias of 'tags-next-file'.

*** 'tags-loop-revert-buffers' is an obsolete alias of
'fileloop-revert-buffers'.

*** The 'tags-loop-continue' function along with the
'tags-loop-operate' and 'tags-loop-scan' variables are now obsolete;
use the new 'fileloop-initialize' and 'fileloop-continue' functions
instead.

** bibtex

---
*** New commands 'bibtex-next-entry' and 'bibtex-previous-entry'.
In 'bibtex-mode-map', 'forward-paragraph' and 'backward-paragraph' are
remapped to these, respectively.

** Dired

+++
*** New command 'dired-create-empty-file'.

** Change Logs and VC

*** Recording ChangeLog entries doesn't require an actual file.
If a ChangeLog file doesn't exist, and if the new variable
'add-log-dont-create-changelog-file' is non-nil (which is the
default), commands such as 'C-x 4 a' will add log entries to a
suitable named temporary buffer.  (An existing ChangeLog file will
still be used if it exists.)  Set the variable to nil to get the
previous behavior of always creating a buffer that visits a ChangeLog
file.

*** New customizable variable 'vc-find-revision-no-save'.
With non-nil, 'vc-find-revision' doesn't write the created buffer to file.

*** New customizable variable 'vc-git-grep-template'.
This new variable allows customizing the default arguments passed to
'git-grep' when 'vc-git-grep' is used.

*** Command 'vc-git-stash' now respects marks in the '*vc-dir*' buffer.
When some files are marked, only those are stashed.
When no files are marked, all modified files are stashed, as before.

*** The new hook 'vc-retrieve-tag-hook' runs after retrieving a tag.

---
*** 'vc-hg' now invokes 'smerge-mode' when visiting files.
Code that attempted to invoke 'smerge-mode' when visiting an Hg file
with conflicts existed in earlier versions of Emacs, but incorrectly
never detected a conflict due to invalid assumptions about cached
values.

+++
*** 'C-u C-x v D' ('vc-root-version-diff') prompts for two revisions
and compares their entire trees.

*** New user option 'vc-hg-revert-switches' specifies switches to pass
to hg revert.

*** 'C-x v M D' ('vc-diff-mergebase') and 'C-x v M L' ('vc-log-mergebase')
print diffs and logs between the merge base (common ancestor) of two
given revisions.

** Diff mode
+++
*** Hunks are now automatically refined by font-lock.
To disable refinement, set the new defcustom 'diff-refine' to nil.
To get back the old behavior where hunks are refined as you navigate
through a diff, set 'diff-refine' to the symbol 'navigate'.
+++
*** 'diff-auto-refine-mode' is deprecated in favor of 'diff-refine'.
It is no longer enabled by default and binding it no longer has any
effect.

+++
*** Better syntax highlighting of Diff hunks.
Fragments of source in Diff hunks are now by default highlighted
according to the appropriate major mode.  Customize the new option
'diff-font-lock-syntax' to nil to disable this.

*** File headers can be shortened, mimicking Magit's diff format.
To enable it, set the new defcustom 'diff-font-lock-prettify' to t.

+++
*** Prefix arg of 'diff-goto-source' means jump to the old revision
of the file under version control if point is on an old changed line,
or to the new revision of the file otherwise.

** Texinfo

+++
*** New function for inserting @pxref, @xref, or @ref commands.
The function 'texinfo-insert-dwim-@ref', bound to 'C-c C-c r' by
default, inserts one of three types of references based on the text
surrounding point, namely @pxref near a parenthesis, @xref at the
start of a sentence or at (point-min), else @ref.

** Browse-url

*** The function 'browse-url-emacs' can now visit a URL in selected window.
It now treats the optional 2nd argument to mean that the URL should be
shown in the currently selected window.

** Comint

+++
*** 'send-invisible' is now an obsolete alias for 'comint-send-invisible'.
Also, 'shell-strip-ctrl-m' is declared obsolete.

+++
*** 'C-c .' ('comint-insert-previous-argument') no longer interprets '&'.
This feature caused problems when '&&' was present in the previous
command.  Since this command emulates 'M-.' in Bash and zsh, neither
of which treats '&' specially, the feature was removed for
compatibility with these shells.

+++
*** 'comint-insert-previous-argument' can now count arguments from the end.
By default, invoking 'C-c .' with a numeric argument N would copy the
Nth argument, counting from the first one.  But if the new option
'comint-insert-previous-argument-from-end' is non-nil, it will copy
the Nth argument counting from the last one.  Thus 'C-c .' can now
better emulate 'M-.' in both Bash and zsh, since the former counts
from the beginning of the arguments, while the latter counts from the
end.

** SQL

*** SQL Indent Minor Mode

SQL Mode now supports the ELPA 'sql-indent' package for assisting
sophisticated SQL indenting rules.  Note, however, that SQL is not
like other programming languages like C, Java, or Python where code is
sparse and rules for formatting are fairly well established. Instead
SQL is more like COBOL (from which it came) and code tends to be very
dense and line ending decisions driven by syntax and line length
considerations to make readable code.  Experienced SQL developers may
prefer to rely upon existing Emacs facilities for formatting code but
the 'sql-indent' package provides facilities to aid more casual SQL
developers layout queries and complex expressions.

**** 'sql-use-indent-support' (default t) enables SQL indention support.
The 'sql-indent' package from ELPA must be installed to get the
indentation support in 'sql-mode' and 'sql-interactive-mode'.

**** 'sql-mode-hook' and 'sql-interactive-mode-hook' changed.
Both hook variables have had 'sql-indent-enable' added to their
default values. If you have existing customizations to these variables,
you should make sure that the new default entry is included.

*** Connection Wallet

Database passwords can now by stored in NETRC or JSON data files that
may optionally be encrypted. When establishing an interactive session
with the database via 'sql-connect' or a product specific function,
like 'sql-mysql' or 'my-postgres', the password wallet will be
searched for the password. The 'sql-product', 'sql-server',
'sql-database', and the 'sql-username' will be used to identify the
appropriate authorization. This eliminates the discouraged practice of
embedding database passwords in your Emacs initialization.

See the `auth-source' module for complete documentation on the file
formats.  By default, the wallet file is expected to be in the
`user-emacs-directory', named 'sql-wallet' or '.sql-wallet', with
'.json' (JSON) or no (NETRC) suffix.  Both file formats can optionally
be encrypted with GPG by adding an additional '.gpg' suffix.

** Term

---
*** 'term-read-noecho' is now obsolete, use 'read-passwd' instead.

** Flymake

+++
*** The variable 'flymake-diagnostic-types-alist' is obsolete.
You should instead set properties on known diagnostic symbols, like
':error' and ':warning', as demonstrated in the Flymake manual.

*** New customizable variable 'flymake-start-on-save-buffer'.
Control whether Flymake starts checking the buffer on save.

*** Flymake and backend functions may exchange hints about buffer changes.
This enables more efficient backends.  See the docstring of
'flymake-diagnostic-functions' or the Flymake manual for details.

** Ruby

*** The Rubocop Flymake diagnostic function will only run Lint cops if
it can't find the config file.

*** Rubocop is called with 'bundle exec' if Gemfile mentions it.

** Package

*** New function 'package-get-version' lets packages query their own version.
Example use in auctex.el: '(defconst auctex-version (package-get-version))'

*** New 'package-quickstart' feature.
When 'package-quickstart' is non-nil, package.el precomputes a big autoloads
file so that activation of packages can be done much faster, which can speed up
your startup significantly.
It also causes variables like 'package-user-dir' and 'package-load-list' to be
consulted when 'package-quickstart-refresh' is run rather than at startup so
you don't need to set them in your early init file.

*** New function 'package-activate-all'.

** Info

---
*** Info can now follow 'file://' protocol URLs.
The 'file://' URLs in Info documents can now be followed by passing
them to the 'browse-url' function, like the other protocols: ftp,
http, and https.  This allows to have references to local HTML files,
for example.

** Xref

+++
*** New command 'xref-find-definitions-at-mouse'.
This command finds definitions of the identifier at the place of a
mouse click event, and is intended to be bound to a mouse event.

+++
*** Changing 'xref-marker-ring-length' works after 'xref.el' is loaded.
Previously, setting 'xref-marker-ring-length' would only take effect
if set before 'xref.el' was loaded.

---
*** xref-find-definitions now sets the mark at the buffer position
where it was invoked

** Ecomplete

*** The ecomplete sorting has changed to a decay-based algorithm.
This can be controlled by the new 'ecomplete-sort-predicate' variable.

*** The 'ecompleterc' file is now placed in ~/.emacs.d/ecompleterc by default.
Of course it will still find it if you have it in ~/.ecompleterc

** Gnus

---
*** Gnus now maps imaps to 993 only on old MS-Windows versions.
The nnimap backend used to do this unconditionally to work around
problems on old versions of MS-Windows.  This is now done only for
Windows XP and older.

+++
*** The nnimap backend now has support for IMAP namespaces.
This feature can be enabled by setting the new 'nnimap-use-namespaces'
server variable to non-nil.

+++
*** A prefix argument to 'gnus-summary-limit-to-score' will limit reverse.
Limit to articles with score at below.

*** The function 'gnus-score-find-favorite-words' has been renamed
from 'gnus-score-find-favourite-words'.

---
*** Gmane has been removed as an nnir backend, since Gmane no longer
has a search engine.

+++
*** Splitting mail on common mailing list headers has been added.
See the concept index in the Gnus manual for the 'match-list' entry.

+++
*** nil is no longer an allowed value for 'mm-text-html-renderer'.

+++
*** A new Gnus summary mode command, 'S A'
('gnus-summary-attach-article') can be used to attach the current
article(s) to a pre-existing Message buffer, or create a new Message
buffer with the article(s) attached.

---
*** New option 'nnir-notmuch-filter-group-names-function'.
This option controls whether and how to use Gnus search groups as
'path:' search terms to 'notmuch'.

** erc

---
*** 'erc-button-google-url' has been renamed 'erc-button-search-url'
and its value has been changed to Duck Duck Go.

** EUDC

*** XEmacs support has been removed.

** eww/shr

+++
*** The 'eww' command can now create a new EWW buffer.
Invoking the command with a prefix argument will cause it to create a
new EWW buffer for the URL instead of reusing the default one.

+++
*** The 'd' ('eww-download') command now falls back to current page's URL.
If this command is invoked with no URL at point, it now downloads the
current page instead of signaling an error.

*** When opening external links in eww/shr (typically with the
'C-u RET' keystroke on a link), the link will be flashed with the new
'shr-selected-link' face to give the user feedback that the command
has been executed.

+++
*** New option 'shr-discard-aria-hidden'.
If set, shr will not render tags with attribute 'aria-hidden="true"'.
This attribute is meant to tell screen readers to ignore a tag.

---
*** 'shr-tag-ol' now respects the ordered list 'start' attribute.

** Htmlfontify

*** The functions 'hfy-color', 'hfy-color-vals' and
'hfy-fallback-color-values' and the variables 'hfy-fallback-color-map'
and 'hfy-rgb-txt-color-map' have been renamed from names that used
'colour' instead of 'color'.

+++
** Enriched mode supports the 'charset' text property.
You can add or modify the 'charset' text properties of text using the
'Edit->Text Properties->Special Properties' menu, or by invoking the
'facemenu-set-charset' command.  Documents in Enriched mode will be
saved with the charset properties, and those properties will be
restored when the file is visited.

** Smtpmail

Authentication mechanisms can be added via external packages, by
defining new 'cl-defmethod' of 'smtpmail-try-auth-method'.

** Footnote mode

*** Support Hebrew-style footnotes
*** Footnote text lines are now aligned.
Can be controlled via the new variable 'footnote-align-to-fn-text'.

** CSS mode

---
*** A new command 'css-cycle-color-format' for cycling between color
formats (e.g. "black" => "#000000" => "rgb(0, 0, 0)") has been added,
bound to 'C-c C-f'.

---
*** CSS mode, SCSS mode, and Less CSS mode now have support for Imenu.

** SGML mode

---
*** 'sgml-quote' now handles double quotes and apostrophes
when escaping text and in addition all numeric entities when
unescaping text.

** Python mode

---
*** Python mode supports three different font lock decoration levels.
The maximum level is used by default; customize
'font-lock-maximum-decoration' to tone down the decoration.

** Dired

+++
*** The new user option 'dired-create-destination-dirs' controls whether
'dired-do-copy' and 'dired-rename-file' should create non-existent
directories in the destination.

** Help

---
*** Description of variables and functions give an estimated first release

---
*** Output format of 'C-h l' ('view-lossage') has changed.
For convenience, 'view-lossage' now displays the last keystrokes
and commands in the same format as the edit buffer of
'edit-last-kbd-macro'.  This makes it possible to copy the lines from
the buffer generated by 'view-lossage' to the "*Edit Macro*" buffer
created by 'edit-last-kbd-macro', and to save the macro by 'C-c C-c'.

---
*** The list of help commands produced by 'C-h C-h' ('help-for-help')
can now be searched via 'C-s'.

** Ibuffer

---
*** New filter 'ibuffer-filter-by-process'; bound to '/E'.

---
*** All mode filters can now accept a list of symbols.
This means you can now easily filter several major modes, as well
as a single mode.

** Search and Replace

*** Isearch supports a prefix argument for 'C-s' ('isearch-repeat-forward')
and 'C-r' ('isearch-repeat-backward').  With a prefix argument, these
commands repeat the search for the specified occurrence of the search string.
A negative argument repeats the search in the opposite direction.
This makes possible also to use a prefix argument for 'M-s .'
('isearch-forward-symbol-at-point') to find the next Nth symbol.

*** To go to the first/last occurrence of the current search string
is possible now with new commands 'isearch-beginning-of-buffer' and
'isearch-end-of-buffer' bound to 'M-s M-<' and 'M-s M->' in Isearch.
With a numeric argument, they go to the Nth absolute occurrence
counting from the beginning/end of the buffer.  This complements
'C-s'/'C-r' that searches for the next Nth relative occurrence
with a numeric argument.

*** 'isearch-lazy-count' shows the current match number and total number
of matches in the Isearch prompt.  Customizable variables
'lazy-count-prefix-format' and 'lazy-count-suffix-format' define the
format of the current and the total number of matches in the prompt's
prefix and suffix respectively.

*** 'lazy-highlight-buffer' highlights matches in the full buffer.
It is useful in combination with 'lazy-highlight-cleanup' customized to nil
to leave matches highlighted in the whole buffer after exiting isearch.
Also when 'lazy-highlight-buffer' prepares highlighting in the buffer,
navigation through the matches without flickering is more smooth.
'lazy-highlight-buffer-max-at-a-time' controls the number of matches to
highlight in one iteration while processing the full buffer.

+++
*** New isearch bindings.

'C-M-w' in isearch changed from 'isearch-del-char' to the new function
'isearch-yank-symbol-or-char'.  'isearch-del-char' is now bound to
'C-M-d'.

+++
*** New variable 'isearch-yank-on-move' provides options 't' and 'shift'
to extend the search string by yanking text that ends at the new
position after moving point in the current buffer.  'shift' extends
the search string by motion commands while holding down the shift key.

*** 'isearch-allow-scroll' provides new option 'unlimited' to allow
scrolling any distance off screen.

---
*** Isearch now remembers the regexp-based search mode for words/symbols
and case-sensitivity together with search strings in the search ring.

---
*** Isearch now has its own tool-bar and menu-bar menu.

+++
*** flush-lines prints and returns the number of deleted matching lines.

** Debugger

+++
*** The Lisp Debugger is now based on 'backtrace-mode'.
Backtrace mode adds fontification and commands for changing the
appearance of backtrace frames.  See the node "(elisp) Backtraces" in
the Elisp manual for documentation of the new mode and its commands.

** Edebug

+++
*** The runtime behavior of Edebug's instrumentation can be changed
using the new variables 'edebug-behavior-alist',
'edebug-after-instrumentation-function' and
'edebug-new-definition-function'.  Edebug's behavior can be changed
globally or for individual definitions.

+++
*** Edebug's backtrace buffer now uses 'backtrace-mode'.
Backtrace mode adds fontification, links and commands for changing the
appearance of backtrace frames.  See the node "(elisp) Backtraces" in
the Elisp manual for documentation of the new mode and its commands.

The binding of 'd' in Edebug's keymap is now 'edebug-pop-to-backtrace'
which replaces 'edebug-backtrace'.  Consequently Edebug's backtrace
windows now behave like those of the Lisp Debugger and of ERT, in that
when they appear they will be the selected window.

The new 'backtrace-goto-source' command, bound to 's', works in
Edebug's backtraces on backtrace frames whose source code has
been instrumented by Edebug.

** Enhanced xterm support

*** New variable 'xterm-set-window-title' controls whether Emacs sets
the XTerm window title.  This feature is experimental and is disabled
by default.

** Grep

+++
*** rgrep, lgrep and zrgrep now hide part of the command line
that contains a list of ignored directories and files.
Clicking on the button with ellipsis unhides it.
The abbreviation can be disabled by the new option
'grep-find-abbreviate'.  The new command
'grep-find-toggle-abbreviation' toggles it interactively.

** ERT

+++
*** New variable 'ert-quiet' allows to make ERT output in batch mode
less verbose by removing non-essential information.

+++
*** ERT's backtrace buffer now uses 'backtrace-mode'.
Backtrace mode adds fontification and commands for changing the
appearance of backtrace frames.  See the node "(elisp) Backtraces" in
the Elisp manual for documentation of the new mode and its commands.

** Gamegrid

---
*** Gamegrid now determines its default glyph size based on display
dimensions, instead of always using 16 pixels.  As a result, Tetris,
Snake and Pong are more playable on HiDPI displays.

** Filecache

---
*** Completing filenames in the minibuffer via 'C-TAB' now uses the
styles as configured by the variable 'completion-styles'.

** New macros 'thunk-let' and 'thunk-let*'.
These macros are analogue to 'let' and 'let*', but create bindings that
are evaluated lazily.

** next-error

+++
*** New customizable variable 'next-error-find-buffer-function'.
The value should be a function that determines how to find the
next buffer to be used by 'next-error' and 'previous-error'.  The
default is to use the last buffer that navigated to the current
error.

+++
*** New command 'next-error-select-buffer'.
It can be used to set any buffer as the next one to be used by
'next-error' and 'previous-error'.

** nxml-mode

---
*** The default value of 'nxml-sexp-element-flag' is now t.
This means that pressing 'C-M-SPACE' now selects the entire tree by
default, and not just the opening element.

** Eshell

*** TAB completion uses the standard completion-at-point rather than pcomplete
Its UI is slightly different but can be customized to behave similarly,
e.g. Pcomplete's default cycling can be obtained with
(setq completion-cycle-threshold 5).

---
*** Expansion of history event designators is disabled by default.
To restore the old behavior, use

    (add-hook 'eshell-expand-input-functions
              #'eshell-expand-history-references)

---
*** The function 'eshell-uniquify-list' has been renamed from
'eshell-uniqify-list'.

*** The function 'eshell/kill' is now able to handle signal switches.
Previously 'eshell/kill' would fail if provided a kill signal to send
to the process.  It now accepts signals specified either by name or by
its number.

---
*** Emacs now follows symlinks in history-related files.
The files specified by 'eshell-history-file-name' and
'eshell-last-dir-ring-file-name' can include symlinks; these are now
followed when Emacs writes the relevant history variables to the disk.

** Shell

---
*** Program name completion inside remote shells works now as expected.

+++
*** The variable 'shell-file-name' can be set now as connection-local
variable for remote shells.  It still defaults to "/bin/sh".

** Single shell commands

---
*** 'shell-command-width' defines the number of display columns
available for output of asynchronous shell commands.

** Pcomplete

*** The function 'pcomplete-uniquify-list' has been renamed from
'pcomplete-uniqify-list'.

** Auth-source

---
*** The Secret Service backend supports the ':create' key now.

** Tramp

+++
*** New connection method "nextcloud", which allows to access OwnCloud
or NextCloud hosted files and directories.

+++
*** New connection method "rclone", which allows to access system
storages via the 'rclone' program.  This feature is experimental.

+++
*** New connection method "sudoedit", which allows to edit local files
with different user credentials.  Contrary to the "sudo" method, no
session is run permanently in the background.  This is for security
reasons.

+++
*** Connection methods "obex" and "synce" are removed, because they
are obsoleted in GVFS.

+++
*** Validated passwords are saved by auth-source backends which support this.

+++
*** During user and host name completion in the minibuffer, results
from auth-source search are taken into account.  This can be disabled
by setting the user option 'tramp-completion-use-auth-sources' to nil.

+++
*** The user option 'tramp-ignored-file-name-regexp' allows to disable
Tramp for some look-alike remote file names.

+++
*** For some connection methods, like "su" or "sudo", the host name in
ad-hoc multi-hop file names must match the previous hop.  Default host
names are adjusted to the host name from the previous hop.

+++
*** For the connection methods "sudo" and "doas" there exists a
timeout, after which the underlying session is disabled.  This is for
security reasons.

** Rcirc

---
*** New user option 'rcirc-url-max-length'.
Setting this option to an integer causes URLs displayed in Rcirc
buffers to be truncated to that many characters.

** Register
---
*** The return value of method 'register-val-describe' includes the
names of buffers shown by the windows of a window configuration.

---
** The options.el library has been removed.
It was obsolete since Emacs 22.1, replaced by customize.

** The tls.el and starttls.el libraries are now marked obsolete.
Use of built-in libgnutls based functionality (described in the Emacs
GnuTLS manual) is recommended instead.

** Message

+++
*** Messages can now be systematically encrypted
when the PGP keyring contains a public key for every recipient.  To
achieve this, add 'message-sign-encrypt-if-all-keys-available' to
'message-send-hook'.

---
*** When replying a message that have addresses on the form
'"foo@bar.com" <foo@bar.com>', Message will elide the repeated "name"
from the address field in the response.

---
*** The default of 'message-forward-as-mime' has changed from t to nil
as it has been reported that many recipients can't read forwards that
are formatted as MIME digests.

+++
*** 'message-forward-included-headers' has changed its default to
exclude most headers when forwarding.

** EasyPG

---
*** 'epa-pinentry-mode' is renamed to 'epg-pinentry-mode'.
It now applies to epg functions as well as epa functions.

---
*** The alias functions 'epa--encode-coding-string',
'epa--decode-coding-string', and 'epa--select-safe-coding-system' have
been removed.  Use 'encode-coding-string', 'decode-coding-string', and
'select-safe-coding-system' instead.

** Rmail

+++
*** New user option 'rmail-output-reset-deleted-flag'.
If this option is non-nil, messages appended to an output file by the
'rmail-output' command have their Deleted flag reset.

*** The command 'rmail-summary-by-senders' with an empty argument
selects the messages to summarize with a regexp that matches the
sender of the current message.

** Threads

+++
*** New variable 'main-thread' holds Emacs's main thread.
This is handy in Lisp programs that run on a non-main thread and want
to signal the main thread, e.g., when they encounter an error.

+++
*** 'thread-join' returns the result of the finished thread now.

+++
*** 'thread-signal' does not propagate errors to the main thread.
Instead, error messages are just printed in the main thread.

---
*** 'thread-alive-p' is now obsolete, use 'thread-live-p' instead.

+++
*** New command 'list-threads' shows Lisp threads.
See the current list of live threads in a tabulated-list buffer which
automatically updates.  In the buffer, you can use 's q' or 's e' to
signal a thread with quit or error respectively, or get a snapshot
backtrace with 'b'.

---
** thingatpt.el supports a new "thing" called 'uuid'.
A symbol 'uuid' can be passed to 'thing-at-point' and it returns the
UUID at point.

** Interactive automatic highlighting

+++
*** 'highlight-regexp' can now highlight subexpressions.
The new command accepts a prefix numeric argument to choose the
subexpression.

** Mouse display of minor mode menu

---
*** 'minor-mode-menu-from-indicator' now displays full minor mode name.
When there is no menu for a mode, display the mode name after the
indicator instead of just the indicator (which is sometimes cryptic).

** rx

---
*** rx now handles raw bytes in character alternatives correctly,
when given in a string.  Previously, '(any "\x80-\xff")' would match
characters U+0080...U+00FF.  Now the expression matches raw bytes in
the 128...255 range, as expected.

** Frames

+++
*** New command 'make-frame-on-monitor' makes a frame on the specified monitor.

+++
*** New value of 'minibuffer' frame parameter 'child-frame'.
This allows to create and parent immediately a minibuffer-only child
frame when making a frame.

---
*** New predicates 'display-blink-cursor-p' and 'display-symbol-keys-p'.
These predicates are to be preferred over 'display-graphic-p' when
testing for blinking cursor capability and the capability to have
symbols (e.g., [return], [tab], [backspace]) as keys respectively.

** Tabulated List mode

+++
*** New user options for tabulated list sort indicators.
You can now customize which sorting indicator character to display
near the current column in Tabulated Lists (see variables
'tabulated-list-gui-sort-indicator-asc',
'tabulated-list-gui-sort-indicator-desc',
'tabulated-list-tty-sort-indicator-asc', and
'tabulated-list-tty-sort-indicator-desc').

** Text mode

+++
*** 'text-mode-variant' is now obsolete, use 'derived-mode-p' instead.

** CUA mode

---
*** New defcustom 'cua-rectangle-terminal-modifier-key'.
This defcustom allows for the customization of the modifier key used
in a terminal frame.

** JS mode

---
*** JSX syntax is now automatically detected and enabled.
If a file imports Facebook's 'React' library, or if the file uses the
extension '.jsx', then various features supporting XML-like syntax
will be supported in 'js-mode' and derivative modes.  ('js-jsx-mode'
no longer needs to be enabled.)

---
*** New defcustom 'js-jsx-detect-syntax' disables automatic detection.
This is turned on by default.

---
*** New defcustom 'js-jsx-syntax' enables JSX syntax unconditionally.
This is off by default.

---
*** New variable 'js-jsx-regexps' controls JSX detection.

---
*** JSX syntax is now highlighted like SGML.

---
*** JSX code is properly indented in many more scenarios.
Previously, JSX indentation usually only worked when an element was
wrapped in parenthesis (e.g. in a 'return' statement or a function
call).  It would also fail in many intricate cases.  Now, indentation
should work anywhere without parenthesis; many more intricacies are
supported; and, indentation conventions align more closely with those
of the React developer community (see 'js-jsx-align->-with-<'),
otherwise still adhering to SGML conventions.

---
*** New defcustom 'js-jsx-align->-with-<' controls '>' indents.
Commonly in JSX code, a '>' on its own line is indented at the same
level as its opening '<'.  This is the new default for JSX.  This
behavior is slightly different than that used by SGML in Emacs, where
'>' is indented at the same level as attributes, which was also the
old default for JSX.

This is turned on by default.  To get back the old default indentation
behavior of aligning '>' with attributes, set 'js-jsx-align->-with-<'
to nil.

---
*** Indentation uses 'js-indent-level' instead of 'sgml-basic-offset'.
Since JSX is a syntax extension of JavaScript, it makes the most sense
for JSX expressions to be indented the same number of spaces as other
JS expressions.  This is a breaking change, but it probably aligns
with how you'd expect this indentation to behave.  If you want JSX to
be indented like JS, you won't need to change your config.

The old behavior can be emulated by controlling JSX indentation
independently of JS, by setting 'js-jsx-indent-level'.

---
*** New defcustom 'js-jsx-indent-level' for different JSX indentation.
If you wish to indent JSX by a different number of spaces than JS, set
this variable to the desired number.

---
*** New defcustom 'js-jsx-attribute-offset' for JSX attribute indents.

---
*** New variable 'js-syntactic-mode-name' controls mode name display.
Previously, the mode name was simply 'JavaScript'.  Now, when a syntax
extension like JSX is enabled, the mode name is 'JavaScript[JSX]'.
Set this variable to nil to disable the new behavior.

---
*** New function 'js-use-syntactic-mode-name' for deriving modes.
Packages deriving from 'js-mode' with 'define-derived-mode' should
call this function to add enabled syntax extensions to their mode
name, too.


* New Modes and Packages in Emacs 27.1

** fileloop.el lets one setup multifile operations like search&replace.

+++
** Emacs can now visit files in archives as if they were directories.
This feature uses Tramp and works only on systems which support GVFS,
i.e. GNU/Linux, roughly spoken.  See the node "(tramp) Archive file
names" in the Tramp manual for full documentation of these facilities.

+++
** New library for writing JSONRPC applications (https://jsonrpc.org).
The 'jsonrpc' library enables writing Emacs Lisp applications that
rely on this protocol.  Since the protocol is designed to be
transport-agnostic, the library provides an API to implement new
transport strategies as well as a separate API to use them.  A
transport implementation for process-based communication, such as is
used by the Language Server Protocol (LSP), is readily available.

+++
** Backtrace mode improves viewing of Elisp backtraces.
Backtrace mode adds pretty printing, fontification and ellipsis
expansion to backtrace buffers produced by the Lisp debugger, Edebug
and ERT.  See the node "(elisp) Backtraces" in the Elisp manual for
documentation of the new mode and its commands.


* Incompatible Lisp Changes in Emacs 27.1

** In compilation-error-regexp-alist the old undocumented feature where 'line'
could be a function of 2 arguments has been dropped.

** 'define-fringe-bitmap' is always defined, even when Emacs is built
without any GUI support.

---
** Just loading a theme's file no longer activates the theme's settings.
Loading a theme with 'M-x load-theme' still activates the theme, as it
did before.  However, loading the theme's file with 'M-x load-file',
or using 'require' or 'load' in a Lisp program, doesn't actually apply
the theme's settings until you either invoke 'M-x enable-theme' or
type 'M-x load-theme'.  (In a Lisp program, calling 'enable-theme' or
invoking 'load-theme' with NO-ENABLE argument omitted or nil has the
same effect of activating a theme whose file has been loaded.)  The
special case of the 'user' theme is an exception: it is frequently
used for ad-hoc customizations, so the settings of that theme are by
default applied immediately.

The variable 'custom--inhibit-theme-enable' controls this behavior;
its default value changed in Emacs 27.1.

** The REPETITIONS argument of 'benchmark-run' can now also be a variable.

** Interpretation of relative HOME directory has changed.
If $HOME is set to a relative file name, 'expand-file-name' now
interprets it relative to the directory where Emacs was started, not
relative to the 'default-directory' of the current buffer.  We recommend
always setting $HOME to an absolute file name, so that its meaning is
independent of where Emacs was started.

** The FILENAME argument to 'file-name-base' is now mandatory and no
longer defaults to 'buffer-file-name'.

---
** The function 'eldoc-message' now accepts a single argument.
Programs that called it with multiple arguments before should pass
them through 'format' first.  Even that is discouraged: for ElDoc
support, you should set 'eldoc-documentation-function' instead of
calling 'eldoc-message' directly.

** Old-style backquotes now generate an error.
They have been generating warnings for a decade.  To interpret
old-style backquotes as new-style, bind the new variable
'force-new-style-backquotes' to t.

** Defining a Common Lisp structure using 'cl-defstruct' or
'cl-struct-define' whose name clashes with a builtin type (e.g.,
'integer' or 'hash-table') now signals an error.

** When formatting a floating-point number as an octal or hexadecimal
integer, Emacs now signals an error if the number is too large for the
implementation to format.

** logb now returns infinity when given an infinite or zero argument,
and returns a NaN when given a NaN.  Formerly, it returned an extreme
fixnum for such arguments.

---
** Some functions and variables obsolete since Emacs 22 have been removed:
archive-mouse-extract, assoc-ignore-case, assoc-ignore-representation,
backward-text-line, blink-cursor, bookmark-exit-hooks,
comint-use-prompt-regexp-instead-of-fields, compilation-finish-function,
count-text-lines, cperl-vc-header-alist, custom-face-save-command,
cvs-display-full-path, cvs-fileinfo->full-path, delete-frame-hook,
derived-mode-class, describe-char-after, describe-project,
desktop-basefilename, desktop-buffer-handlers, desktop-buffer-misc-functions,
desktop-buffer-modes-to-save, desktop-enable, desktop-load-default,
dired-omit-files-p, disabled-command-hook, dungeon-mode-map,
electric-nroff-mode, electric-nroff-newline, electric-perl-terminator,
focus-frame, forward-text-line, generic-define-mswindows-modes,
generic-define-unix-modes, generic-font-lock-defaults, goto-address-at-mouse,
highlight-changes-colours, ibuffer-elide-long-columns, ibuffer-hooks,
ibuffer-mode-hooks, icalendar-convert-diary-to-ical,
icalendar-extract-ical-from-buffer, imenu-always-use-completion-buffer-p,
ipconfig-program, ipconfig-program-options, isearch-lazy-highlight-cleanup,
isearch-lazy-highlight-initial-delay, isearch-lazy-highlight-interval,
isearch-lazy-highlight-max-at-a-time, iswitchb-use-fonts,
latin1-char-displayable-p, mouse-wheel-click-button, mouse-wheel-down-button,
mouse-wheel-up-button, new-frame, pascal-outline, process-kill-without-query,
recentf-menu-append-commands-p, rmail-pop-password,
rmail-pop-password-required, savehist-load, set-default-font,
spam-list-of-processors, speedbar-add-ignored-path-regexp,
speedbar-buffers-line-path, speedbar-ignored-path-expressions,
speedbar-ignored-path-regexp, speedbar-line-path, speedbar-path-line,
timer-set-time-with-usecs, tooltip-gud-display, tooltip-gud-modes,
tooltip-gud-toggle-dereference, unfocus-frame, unload-hook-features-list,
update-autoloads-from-directories, vc-comment-ring, vc-comment-ring-index,
vc-comment-search-forward, vc-comment-search-reverse, vc-comment-to-change-log,
vc-diff-switches-list, vc-next-comment, vc-previous-comment, view-todo,
x-lost-selection-hooks, x-sent-selection-hooks.

---
** Further functions and variables obsolete since Emacs 24 have been removed:
default-directory-alist, dired-default-directory,
dired-default-directory-alist, dired-enable-local-variables,
dired-hack-local-variables, dired-local-variables-file, dired-omit-here-always.

** Garbage collection no longer treats miscellaneous objects specially;
they are now allocated like any other pseudovector.  As a result, the
'garbage-collect' and 'memory-use-count' functions no longer return a
'misc' component, and the 'misc-objects-consed' variable has been
removed.

+++
** Reversed character ranges are no longer permitted in rx.
Previously, ranges where the starting character is greater than the
ending character were silently omitted.
For example, '(rx (any "@z-a" (?9 . ?0)))' would match '@' only.
Now, such rx expressions generate an error.

+++
** 'text-mode' no longer sets the value of 'indent-line-function'.
The global value of 'indent-line-function', which defaults to
'indent-relative', will no longer be reset locally when turning on
'text-mode'.

To get back the old behavior, add a function to 'text-mode-hook' which
performs (setq-local indent-line-function #'indent-relative).


* Lisp Changes in Emacs 27.1

** New 'help-fns-describe-variable-functions' hook.
Makes it possible to add metadata information to describe-variable.

** i18n (internationalization)

*** ngettext can be used now to return the right plural form
according to the given numeric value.

+++
** inhibit-null-byte-detection is renamed to inhibit-nul-byte-detection

+++
** 'self-insert-command' takes the char to insert as (optional) argument.

** 'lookup-key' can take a list of keymaps as argument.

+++
** 'condition-case' now accepts 't' to match any error symbol.

+++
** New function 'proper-list-p'.
Given a proper list as argument, this predicate returns its length;
otherwise, it returns nil.  'format-proper-list-p' is now an obsolete
alias for the new function.

+++
** Emacs Lisp integers can now be of arbitrary size.
Emacs uses the GNU Multiple Precision (GMP) library to support
integers whose size is too large to support natively.  The integers
supported natively are known as "fixnums", while the larger ones are
"bignums".  The new predicates 'bignump' and 'fixnump' can be used to
distinguish between these two types of integers.

All the arithmetic, comparison, and logical (a.k.a. "bitwise")
operations where bignums make sense now support both fixnums and
bignums.  However, note that unlike fixnums, bignums will not compare
equal with 'eq', you must use 'eql' instead.  (Numerical comparison
with '=' works on both, of course.)

Since large bignums consume a lot of memory, Emacs limits the size of
the largest bignum a Lisp program is allowed to create.  The
nonnegative value of the new variable 'integer-width' specifies the
maximum number of bits allowed in a bignum.  Emacs signals an integer
overflow error if this limit is exceeded.

Several primitive functions formerly returned floats or lists of
integers to represent integers that did not fit into fixnums.  These
functions now simply return integers instead.  Affected functions
include functions like 'encode-char' that compute code-points, functions
like 'file-attributes' that compute file sizes and other attributes,
functions like 'process-id' that compute process IDs, and functions like
'user-uid' and 'group-gid' that compute user and group IDs.

+++
** Although the default timestamp format is still (HI LO US PS),
it is planned to change in a future Emacs version, to exploit bignums.
The documentation has been updated to mention that the timestamp
format may change and that programs should use functions like
'format-time-string', 'decode-time', and 'encode-time' rather than
probing the innards of a timestamp directly, or creating a timestamp
by hand.

+++
** 'encode-time' supports a new API '(encode-time TIME &optional FORM)'.
This can convert decoded times and Lisp time values to Lisp timestamps
of various forms, including a new timestamp form '(TICKS . HZ)', where
TICKS is an integer and HZ is a positive integer denoting a clock
frequency.  The old 'encode-time' API is still supported.

+++
** 'time-add', 'time-subtract', and 'time-less-p' now accept
infinities and NaNs too, and propagate them or return nil like
floating-point operators do.

+++
** New function 'time-equal-p' compares time values for equality.

+++
** 'format-time-string' supports a new conversion specifier flag '+'
that acts like the '0' flag but also puts a '+' before nonnegative
years containing more than four digits.  This is for compatibility
with POSIX.1-2017.

** 'define-minor-mode' automatically documents the meaning of ARG.

+++
** The function 'recenter' now accepts an additional optional argument.
By default, calling 'recenter' will not redraw the frame even if
'recenter-redisplay' is non-nil.  Call 'recenter' with the new second
argument non-nil to force redisplay per 'recenter-redisplay's value.

+++
** New functions 'major-mode-suspend' and 'major-mode-restore'.
Use them when switching temporarily to another major mode, e.g. for
'hexl-mode', or to switch between 'c-mode' and 'image-mode' in XPM.

+++
** New macro 'dolist-with-progress-reporter'.
This works like 'dolist', but reports progress similar to
'dotimes-with-progress-reporter'.

+++
** New hook 'after-delete-frame-functions'.
This works like 'delete-frame-functions', but runs after the frame to
be deleted has been made dead and removed from the frame list.

---
** The function 'provided-mode-derived-p' was extended to support aliases.
The function now returns non-nil when the argument MODE is derived
from any alias of any of MODES.

+++
** New frame focus state inspection interface.
The hooks 'focus-in-hook' and 'focus-out-hook' are now obsolete.
Instead, attach to 'after-focus-change-function' using 'add-function'
and inspect the focus state of each frame using 'frame-focus-state'.

+++
** Emacs now requests and recognizes focus-change notifications from TTYs.
On terminal emulators that support the feature, Emacs can now support
'focus-in-hook' and 'focus-out-hook' for TTY frames.

+++
** Window-specific face remapping.
Face specifications (of the kind used in 'face-remapping-alist')
now support filters, allowing faces to vary between different windows
displaying the same buffer.  See the node "(elisp) Face Remapping"
of the Emacs Lisp Reference manual for more detail.

+++
** Window change functions have been redesigned.

Hooks reacting to window changes run now only when redisplay detects
that a change has actually occurred.  Six hooks are now provided:
'window-buffer-change-functions' (run after window buffers have
changed), 'window-size-change-functions' (run after a window was
assigned a new buffer or size), 'window-configuration-change-hook'
(like the former but run also when a window was deleted),
'window-selection-change-functions' (run when the selected window
changed) and 'window-state-change-functions' and
'window-state-change-hook' (run when any of the preceding ones is
run).  Applications can enforce running the latter two using the new
function 'set-frame-window-state-change'.  'window-scroll-functions'
are unaffected by these changes.

In addition, a number of functions now allow the caller to detect what
has changed since last redisplay: 'window-old-buffer' returns for any
window the buffer it showed at that time.  ‘old-selected-window’ and
'old-selected-frame' return the window and frame that were selected
during last redisplay.  'window-old-pixel-width' (renamed from
'window-pixel-width-before-size-change'), 'window-old-pixel-height'
(renamed from 'window-pixel-height-before-size-change'),
'window-old-body-pixel-width' and 'window-old-body-pixel-height'
return the total and body sizes of any window during last redisplay.

See the section "(elisp) Window Hooks" in the Elisp manual for a
detailed explanation of the new behavior.

+++
*** New option 'resize-mini-frames'.
This option allows to automatically resize minibuffer-only frames
similarly to how minibuffer windows are resized on "normal" frames.

+++
** New buffer display action alist entry 'dedicated'.
Such an entry allows to specify the dedicated status of a window
created by 'display-buffer'.

+++
** New buffer display action alist entry 'window-min-height'.
Such an entry allows to specify a minimum height of the window used
for displaying a buffer.  'display-buffer-below-selected' is the only
action function to respect it at the moment.

+++
** The function 'assoc-delete-all' now takes an optional predicate argument.

+++
** New function 'string-distance' to calculate the Levenshtein distance
between two strings.

** 'print-quoted' now defaults to t, so if you want to see
'(quote x)' instead of 'x you will have to bind it to nil where applicable.

+++
** Numbers formatted via '%o' or '%x' are now formatted as signed integers.
This avoids problems in calls like '(read (format "#x%x" -1))', and is
more compatible with bignums.  To get the traditional machine-dependent
behavior, set the experimental variable 'binary-as-unsigned' to t,
and if the new behavior breaks your code please email
32252@debbugs.gnu.org.  Because '%o' and '%x' can now format signed
integers, they now support the '+' and space flags.

** To avoid confusion caused by "smart quotes", the reader signals an
error when reading Lisp symbols which begin with one of the following
quotation characters: ‘’‛“”‟〞＂＇.  A symbol beginning with such a
character can be written by escaping the quotation character with a
backslash.  For example:

    (read "‘smart") => (invalid-read-syntax "strange quote" "‘")
    (read "\\‘smart") == (intern "‘smart")

+++
** Omitting variables after '&optional' and '&rest' is now allowed.
For example '(defun foo (&optional))' is no longer an error.  This is
sometimes convenient when writing macros.  See the ChangeLog entry
titled "Allow '&rest' or '&optional' without following variable
(Bug#29165)" for a full listing of which arglists are accepted across
versions.

** Internal parsing commands now use 'syntax-ppss' and disregard
'open-paren-in-column-0-is-defun-start'.  This affects mostly things like
'forward-comment', 'scan-sexps', and 'forward-sexp' when parsing backward.
The new variable 'comment-use-syntax-ppss' can be set to nil to recover
the old behavior if needed.

** The 'server-name' and 'server-socket-dir' variables are set when a
socket has been passed to Emacs.

---
** The 'file-system-info' function is now available on all platforms.
instead of just Microsoft platforms.  This fixes a 'get-free-disk-space'
bug on OS X 10.8 and later.

---
** The function 'get-free-disk-space' returns now a non-nil value for
remote systems, which support this check.

+++
** 'memory-limit' now returns a better estimate of memory consumption.

+++
** New macro 'combine-change-calls' arranges to call the change hooks
('before-change-functions' and 'after-change-functions') just once
each around a sequence of lisp forms, given a region.  This is
useful when a function makes a possibly large number of repetitive
changes and the change hooks are time consuming.

+++
** 'eql', 'make-hash-table', etc. now treat NaNs consistently.
Formerly, some of these functions ignored signs and significands of
NaNs.  Now, all these functions treat NaN signs and significands as
significant.  For example, '(eql 0.0e+NaN -0.0e+NaN)' now returns nil
because the two NaNs have different signs; formerly it returned t.
Also, Emacs now reads and prints NaN significands; e.g., if X is a
NaN, '(format "%s" X)' now returns "0.0e+NaN", "1.0e+NaN", etc.,
depending on X's significand.

+++
** The function 'make-string' accepts an additional optional argument.
If the optional third argument is non-nil, 'make-string' will produce
a multibyte string even if its second argument is an ASCII character.

** '(format "%d" X)' no longer mishandles a floating-point number X that
does not fit in a machine integer.

---
** New coding-system 'ibm038'.
This is the International EBCDIC encoding, also available as aliases
'ebcdic-int' and 'cp038'.

+++
** In the DST slot, 'encode-time' and 'parse-time-string' now return -1
if it is not known whether daylight saving time is in effect.
Formerly they were inconsistent: 'encode-time' returned t in this
situation, whereas 'parse-time-string' returned nil.  Now they
consistently use use nil to mean that DST is not in effect, and use -1
to mean that it is not known whether DST is in effect.

** New JSON parsing and serialization functions 'json-serialize',
'json-insert', 'json-parse-string', and 'json-parse-buffer'.  These
are implemented in C using the Jansson library.

+++
** New function 'ring-resize'.
'ring-resize' can be used to grow or shrink a ring.

+++
** New function 'flatten-tree'.
'flatten-list' is provided as an alias. These functions take a tree
and 'flatten' it such that the result is a list of all the terminal
nodes.

+++
** 'zlib-decompress-region' can partially decompress corrupted data.
If the new optional ALLOW-PARTIAL argument is passed, then the data
that was decompressed successfully before failing will be inserted
into the buffer.

** Mailcap

---
*** The new function 'mailcap-file-name-to-mime-type' has been added.
It's a simple convenience function for looking up MIME types based on
file name extensions.

*** The default way the list of possible external viewers for MIME
types is sorted and chosen has changed.  Earlier, the most specific
viewer was chosen, even if there was a general override in "~/.mailcap".
For instance, if "/etc/mailcap" has an entry for "image/gif", that one
will be chosen even if you have an entry for "image/*" in your
"~/.mailcap" file.  But with the new method, entries from "~/.mailcap"
overrides all system and Emacs-provided defaults.  To get the old
method back, set 'mailcap-prefer-mailcap-viewers' to nil.

** URL

*** The 'file:' handler no longer looks for "index.html" in
directories if you ask it for a "file:///dir" URL.  Since this is a
low-level library, such decisions (if they are to be made at all) are
left to higher-level functions.

** Image mode

*** 'image-mode' started using ImageMagick by default for all images
some years back.  It now respects 'imagemagick-types-inhibit' as a way
to disable that.

---
*** Some image-mode variables are now buffer-local.
The image parameters 'image-transform-rotation',
'image-transform-scale' and 'image-transform-resize' are now declared
buffer-local, so each buffer could have its own values for these
parameters.

** The function 'load' now behaves correctly when loading modules.
Specifically, it puts the module name into 'load-history', prints
loading messages if requested, and protects against recursive loads.

+++
** The function 'read-variable' now uses its own history list.
The history of variable names read by 'read-variable' is recorded in
the new variable 'custom-variable-history'.

---
** The function 'string-to-unibyte' is no longer declared obsolete.
We have found that there are legitimate use cases for this function,
where there's no better alternative.  We believe that the incorrect
uses of this function all but disappeared by now, so we are
un-obsoleting it.

+++
** New function 'group-name' returns a group name corresponding to GID.

+++
** 'make-process' now takes a keyword argument ':file-handler'; if
that is non-nil, it will look for a file name handler for the current
buffer's 'default-directory' and invoke that file name handler to make
the process.  That way 'make-process' can start remote processes.

+++
** Emacs now supports resizing (scaling) of images without ImageMagick.
All modern systems are supported by this feature.  (On GNU and Unix
systems, Cairo drawing or the XRender extension to X11 is required for
this to be available; the configure script will test for it and, if
found, enable scaling.)

The new function 'image-scaling-p' can be used to test whether any
given frame supports resizing.

+++
** (locale-info 'paper) now returns the paper size on systems that support it.
This is currently supported on GNUish hosts and on modern versions of
MS-Windows.

** New module environment function 'process_input' to process user
input while module code is running.

+++
** The function 'regexp-opt' accepts an additional optional argument.
By default, the regexp returned by 'regexp-opt' may match the strings
in any order.  If the new third argument is non-nil, the match is
guaranteed to be performed in the order given, as if the strings were
made into a regexp by joining them with '\|'.

+++
** The function 'regexp-opt', when given an empty list of strings, now
returns a regexp that never matches anything, which is an identity for
this operation.  Previously, the empty string was returned in this
case.


* Changes in Emacs 27.1 on Non-Free Operating Systems

---
** Battery status is now supported in all Cygwin builds.
Previously it was supported only in the Cygwin-w32 build.

** Emacs now handles key combinations involving the macOS "command"
and "option" modifier keys more correctly.

** The special handling of 'frame-title-format' on NS where setting it
to 't' would enable the macOS proxy icon has been replaced with a
separate variable, 'ns-use-proxy-icon'.  'frame-title-format' will now
work as on other platforms.

---
** New primitive 'w32-read-registry'.
This primitive lets Lisp programs access the MS-Windows Registry by
retrieving values stored under a given key.  It is intended to be used
for supporting features such as XDG-like location of important files
and directories.

+++
** The default value of 'w32-pipe-read-delay' is now zero.
This speeds up reading output from sub-processes that produce a lot of
data.

This variable may need to be non-zero only when running DOS programs
as Emacs subprocesses, which by now is not supported on modern
versions of MS-Windows.  Set this variable to 50 if for some reason
you need the old behavior (and please report such situations to Emacs
developers).

---
** New variable 'w32-multibyte-code-page'.
This variable holds the value of the multibyte code page used by the
system.  It is usually zero, which indicates that 'w32-ansi-code-page'
is being used, except in Far Eastern locales.  When this variable is
non-zero, Emacs at startup sets 'locale-coding-system' to the
corresponding encoding, instead of using 'w32-ansi-code-page'.

+++
** On NS the behaviour of drag and drop can now be modified by use of
modifier keys in line with Apples guidelines.  This makes the drag and
drop behaviour more consistent, as previously the sending application
was able to 'set' modifiers without the knowledge of the user.


----------------------------------------------------------------------
This file is part of GNU Emacs.

GNU Emacs is free software: you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

GNU Emacs is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with GNU Emacs.  If not, see <https://www.gnu.org/licenses/>.


Local variables:
coding: utf-8
mode: outline
paragraph-separate: "[ 	]*$"
end:
