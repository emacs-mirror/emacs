GNU Emacs NEWS -- history of user-visible changes.

Copyright (C) 2016-2018 Free Software Foundation, Inc.
See the end of the file for license conditions.

Please send Emacs bug reports to bug-gnu-emacs@gnu.org.
If possible, use M-x report-emacs-bug.

This file is about changes in Emacs version 26.

See file HISTORY for a list of GNU Emacs versions and release dates.
See files NEWS.25, NEWS.24, ..., NEWS.18, and NEWS.1-17 for changes
in older Emacs versions.

You can narrow news to a specific version by calling 'view-emacs-news'
with a prefix argument or by typing C-u C-h C-n.


* Installation Changes in Emacs 26.1

** By default libgnutls is now required when building Emacs.
Use 'configure --with-gnutls=no' to build even when GnuTLS is missing.

** GnuTLS version 2.12.2 or later is now required, instead of merely
version 2.6.6 or later.

** The new option 'configure --with-mailutils' causes Emacs to rely on
GNU Mailutils to retrieve email.  It is recommended, and is the
default if GNU Mailutils is installed.  When --with-mailutils is not
in effect, the Emacs build procedure by default continues to build and
install a limited 'movemail' substitute that retrieves POP3 email only
via insecure channels.  To avoid this problem, use either
--with-mailutils or --without-pop when configuring; --without-pop
is the default on platforms other than native MS-Windows.

** The new option 'configure --enable-gcc-warnings=warn-only' causes
GCC to issue warnings without stopping the build.  This behavior is
now the default in developer builds.  As before, use
'--disable-gcc-warnings' to suppress GCC's warnings, and
'--enable-gcc-warnings' to stop the build if GCC issues warnings.

** When GCC warnings are enabled, '--enable-check-lisp-object-type' is
now enabled by default when configuring.

** The Emacs server now has socket-launching support.  This allows
socket based activation, where an external process like systemd can
invoke the Emacs server process upon a socket connection event and
hand the socket over to Emacs.  Emacs uses this socket to service
emacsclient commands.  This new functionality can be disabled with the
configure option '--disable-libsystemd'.

** A systemd user unit file is provided.  Use it in the standard way:
'systemctl --user enable emacs'.
(If your Emacs is installed in a non-standard location, you may
need to copy the emacs.service file to eg ~/.config/systemd/user/)

** New configure option '--disable-build-details' attempts to build an
Emacs that is more likely to be reproducible; that is, if you build
and install Emacs twice, the second Emacs is a copy of the first.
Deterministic builds omit the build date from the output of the
'emacs-version' and 'erc-cmd-SV' functions, and the leave the
following variables nil: 'emacs-build-system', 'emacs-build-time',
'erc-emacs-build-time'.

** Emacs can now be built with support for Little CMS.

If the lcms2 library is installed, Emacs will enable features built on
top of that library.  The new configure option '--without-lcms2' can
be used to build without lcms2 support even if it is installed.  Emacs
linked to Little CMS exposes color management functions in Lisp: the
color metrics 'lcms-cie-de2000' and 'lcms-cam02-ucs', as well as
functions for conversion to and from CIE CAM02 and CAM02-UCS.

** The configure option '--with-gameuser' now defaults to 'no',
as this appears to be the most common configuration in practice.
When it is 'no', the shared game directory and the auxiliary program
update-game-score are no longer needed and are not installed.

** Emacs no longer works on IRIX.  We expect that Emacs users are not
affected by this, as SGI stopped supporting IRIX in December 2013.


* Startup Changes in Emacs 26.1

** New option '--fg-daemon'.  This is the same as '--daemon', except
it runs in the foreground and does not fork.  This is intended for
modern init systems such as systemd, which manage many of the traditional
aspects of daemon behavior themselves.  '--bg-daemon' is now an alias
for '--daemon'.

** New option '--module-assertions'.
When given this option, Emacs will perform expensive correctness
checks when dealing with dynamic modules.  This is intended for module
authors that wish to verify that their module conforms to the module
requirements.  The option makes Emacs abort if a module-related
assertion triggers.

** Emacs now supports 24-bit colors on capable text terminals.
Terminal is automatically initialized to use 24-bit colors if the
required capabilities are found in terminfo.  See the FAQ node
"(efaq) Colors on a TTY" for more information.

** Emacs now obeys the X resource "scrollBar" at startup.
The effect is similar to that of "toolBar" resource on the tool bar.


* Changes in Emacs 26.1

** Option 'buffer-offer-save' can be set to new value, 'always'.  When
set to 'always', the command 'save-some-buffers' will always offer
this buffer for saving.

** Security vulnerability related to Enriched Text mode is removed.

*** Enriched Text mode does not evaluate Lisp in 'display' properties.
This feature allows saving 'display' properties as part of text.
Emacs 'display' properties support evaluation of arbitrary Lisp forms
as part of processing the property for display, so displaying Enriched
Text could be vulnerable to executing arbitrary malicious Lisp code
included in the text (e.g., sent as part of an email message).
Therefore, execution of arbitrary Lisp forms in 'display' properties
decoded by Enriched Text mode is now disabled by default.  Customize
the new option 'enriched-allow-eval-in-display-props' to a non-nil
value to allow Lisp evaluation in decoded 'display' properties.

This vulnerability was introduced in Emacs 21.1.  To work around that
in Emacs versions before 25.3, append the following to your ~/.emacs
init file:

  (eval-after-load "enriched"
    '(defun enriched-decode-display-prop (start end &optional param)
       (list start end)))

** Functions in 'write-contents-functions' can fully short-circuit the
'save-buffer' process.  Previously, saving a buffer that was not
visiting a file would always prompt for a file name.  Now it only does
so if 'write-contents-functions' is nil (or all its functions return
nil).

** New variable 'executable-prefix-env' for inserting magic signatures.
This variable affects the format of the interpreter magic number
inserted by 'executable-set-magic'.  If non-nil, the magic number now
takes the form "#!/usr/bin/env interpreter", otherwise the value
determined by 'executable-prefix', which is by default
"#!/path/to/interpreter".  By default, 'executable-prefix-env' is nil,
so the default behavior is not changed.

** The variable 'emacs-version' no longer includes the build number.
This is now stored separately in a new variable, 'emacs-build-number'.

** Emacs now provides a limited form of concurrency with Lisp threads.
Concurrency in Emacs Lisp is "mostly cooperative", meaning that
Emacs will only switch execution between threads at well-defined
times: when Emacs waits for input, during blocking operations related
to threads (such as mutex locking), or when the current thread
explicitly yields.  Global variables are shared among all threads, but
a 'let' binding is thread-local.  Each thread also has its own current
buffer and its own match data.

See the chapter "(elisp) Threads" in the ELisp manual for full
documentation of these facilities.

** The new user variable 'electric-quote-chars' provides a list
of curved quotes for 'electric-quote-mode', allowing user to choose
the types of quotes to be used.

** The new user option 'electric-quote-context-sensitive' makes
'electric-quote-mode' context sensitive.  If it is non-nil, you can
type an ASCII apostrophe to insert an opening or closing quote,
depending on context.  Emacs will replace the apostrophe by an opening
quote character at the beginning of the buffer, the beginning of a
line, after a whitespace character, and after an opening parenthesis;
and it will replace the apostrophe by a closing quote character in all
other cases.

** The new variable 'electric-quote-inhibit-functions' controls when
to disable electric quoting based on context.  Major modes can add
functions to this list; Emacs will temporarily disable
'electric-quote-mode' whenever any of the functions returns non-nil.
This can be used by major modes that derive from 'text-mode' but allow
inline code segments, such as 'markdown-mode'.

** The new user variable 'dired-omit-case-fold' allows the user to
customize the case-sensitivity of dired-omit-mode.  It defaults to
the same sensitivity as that of the filesystem for the corresponding
dired buffer.

** Emacs now uses double buffering to reduce flicker when editing and
resizing graphical Emacs frames on the X Window System.  This support
requires the DOUBLE-BUFFER extension, which major X servers have
supported for many years.  If your system has this extension, but an
Emacs built with double buffering misbehaves on some displays you use,
you can disable the feature by adding

  '(inhibit-double-buffering . t)

to default-frame-alist.  Or inject this parameter into the selected
frame by evaluating this form:

  (modify-frame-parameters nil '((inhibit-double-buffering . t)))

** The customization group 'wp', whose label was "text", is now
deprecated.  Use the new group 'text', which inherits from 'wp',
instead.

** The new function 'call-shell-region' executes a command in an
inferior shell with the buffer region as input.

** The new user option 'shell-command-dont-erase-buffer' controls
if the output buffer is erased between shell commands; if non-nil,
the output buffer is not erased; this variable also controls where
to set the point in the output buffer: beginning of the output,
end of the buffer or save the point.
When 'shell-command-dont-erase-buffer' is nil, the default value,
the behavior of 'shell-command', 'shell-command-on-region' and
'async-shell-command' is as usual.

** The new user option 'async-shell-command-display-buffer' controls
whether the output buffer of an asynchronous command is shown
immediately, or only when there is output.

** New user option 'mouse-select-region-move-to-beginning'.
This option controls the position of point when double-clicking
mouse-1 on the end of a parenthetical grouping or string-delimiter:
the default value nil keeps point at the end of the region, setting it
to non-nil moves point to the beginning of the region.

** New user option 'mouse-drag-and-drop-region'.
This option allows you to drag the entire region of text to another
place or another buffer.  Its behavior is customizable via the new
options 'mouse-drag-and-drop-region-cut-when-buffers-differ',
'mouse-drag-and-drop-region-show-tooltip', and
'mouse-drag-and-drop-region-show-cursor'.

** The new user option 'confirm-kill-processes' allows the user to
skip a confirmation prompt for killing subprocesses when exiting
Emacs.  When set to t (the default), Emacs will prompt for
confirmation before killing subprocesses on exit, which is the same
behavior as before.

** 'find-library-name' will now fall back on looking at 'load-history'
to try to locate libraries that have been loaded with an explicit path
outside 'load-path'.

** Faces in 'minibuffer-prompt-properties' no longer overwrite properties
in the text in functions like 'read-from-minibuffer', but instead are
added to the end of the face list.  This allows users to say things
like '(read-from-minibuffer (propertize "Enter something: " 'face 'bold))'.

** The new variable 'extended-command-suggest-shorter' has been added
to control whether to suggest shorter 'M-x' commands or not.

** icomplete now respects 'completion-ignored-extensions'.

** Non-breaking hyphens are now displayed with the 'nobreak-hyphen'
face instead of the 'escape-glyph' face.

** Approximations to quotes are now displayed with the new 'homoglyph'
face instead of the 'escape-glyph' face.

** New face 'header-line-highlight'.
This face is the header-line analogue of 'mode-line-highlight'; it
should be the preferred mouse-face for mouse-sensitive elements in the
header line.

** 'C-x h' ('mark-whole-buffer') will now avoid marking the prompt
part of minibuffers.

** 'fill-paragraph' no longer marks the buffer as changed unless it
actually changed something.

** The locale language name 'ca' is now mapped to the language
environment 'Catalan', which has been added.

** 'align-regexp' has a separate history for its interactive argument.
'align-regexp' no longer shares its history with all other
history-less functions that use 'read-string'.

** The networking code has been reworked so that it's more
asynchronous than it was (when specifying :nowait t in
'make-network-process').  How asynchronous it is varies based on the
capabilities of the system, but on a typical GNU/Linux system the DNS
resolution, the connection, and (for TLS streams) the TLS negotiation
are all done without blocking the main Emacs thread.  To get
asynchronous TLS, the TLS boot parameters have to be passed in (see
the manual for details).

Certain process oriented functions (like 'process-datagram-address')
will block until socket setup has been performed.  The recommended way
to deal with asynchronous sockets is to avoid interacting with them
until they have changed status to "run".  This is most easily done
from a process sentinel.

** 'make-network-process' and 'open-network-stream' sometimes allowed
:service to be an integer string (e.g., :service "993") and sometimes
required an integer (e.g., :service 993).  This difference has been
eliminated, and integer strings work everywhere.

** It is possible to disable attempted recovery on fatal signals.
Two new variables support disabling attempts to recover from stack
overflow and to avoid automatic auto-save when Emacs is delivered a
fatal signal.  'attempt-stack-overflow-recovery', if set to nil,
will disable attempts to recover from C stack overflows; Emacs will
then crash as with any other fatal signal.
'attempt-orderly-shutdown-on-fatal-signal', if set to nil, will
disable attempts to auto-save the session and shut down in an orderly
fashion when Emacs receives a fatal signal; instead, Emacs will
terminate immediately.  Both variables are non-nil by default.
These variables are for users who would like to avoid the small
probability of data corruption due to techniques Emacs uses to recover
in these situations.

** File local and directory local variables are now initialized each
time the major mode is set, not just when the file is first visited.
These local variables will thus not vanish on setting a major mode.

** A second dir-local file (.dir-locals-2.el) is now accepted.
See the doc string of 'dir-locals-file' for more information.

** Connection-local variables can be used to specify local variables
with a value depending on the connected remote server.  For details,
see the node "(elisp) Connection Local Variables" in the ELisp manual.

** International domain names (IDNA) are now encoded via the new
puny.el library, so that one can visit Web sites with non-ASCII URLs.

** The new 'list-timers' command lists all active timers in a buffer,
where you can cancel them with the 'c' command.

** 'switch-to-buffer-preserve-window-point' now defaults to t.
Applications that call 'switch-to-buffer' and want to show the buffer at
the position of its point should use 'pop-to-buffer-same-window' in lieu
of 'switch-to-buffer'.

** The new variable 'debugger-stack-frame-as-list' allows displaying
all call stack frames in a Lisp backtrace buffer as lists.  Both
debug.el and edebug.el have been updated to heed to this variable.

** Values in call stack frames are now displayed using 'cl-prin1'.
The old behavior of using 'prin1' can be restored by customizing the
new option 'debugger-print-function'.

** NUL bytes in text copied to the system clipboard are now replaced with "\0".

** The new variable 'x-ctrl-keysym' has been added to the existing
roster of X keysyms.  It can be used in combination with another
variable of this kind to swap modifiers in Emacs.

** New input methods: 'cyrillic-tuvan', 'polish-prefix', 'uzbek-cyrillic'.

** The 'dutch' input method no longer attempts to support Turkish too.
Also, it no longer converts 'IJ' and 'ij' to the compatibility
characters U+0132 LATIN CAPITAL LIGATURE IJ and U+0133 LATIN SMALL
LIGATURE IJ.

** File name quoting by adding the prefix "/:" is now possible for the
local part of a remote file name.  Thus, if you have a directory named
"/~" on the remote host "foo", you can prevent it from being
substituted by a home directory by writing it as "/foo:/:/~/file".

** The new variable 'maximum-scroll-margin' allows having effective
settings of 'scroll-margin' up to half the window size, instead of
always restricting the margin to a quarter of the window.

** Emacs can scroll horizontally using mouse, touchpad, and trackbar.
You can enable this by customizing 'mouse-wheel-tilt-scroll'.  If you
want to reverse the direction of the scroll, customize
'mouse-wheel-flip-direction'.

** The default GnuTLS priority string now includes %DUMBFW.
This is to avoid bad behavior in some firewalls, which causes the
connection to be closed by the remote host.

** Emacsclient changes

*** Emacsclient has a new option '-u' / '--suppress-output'.
This option suppresses display of return values from the server
process.

*** Emacsclient has a new option '-T' / '--tramp'.
This helps with using a local Emacs session as the server for a remote
emacsclient.  With appropriate setup, one can now set the EDITOR
environment variable on a remote machine to emacsclient, and
use the local Emacs to edit remote files via Tramp.  See the node
"(emacs) emacsclient Options" in the user manual for the details.

*** Emacsclient now accepts command-line options in ALTERNATE_EDITOR
and '--alternate-editor'. For example, ALTERNATE_EDITOR="emacs -Q -nw".
Arguments may be quoted "like this", so that for example an absolute
path containing a space may be specified; quote escaping is not
supported.

** New user option 'dig-program-options' and extended functionality
for DNS-querying functions 'nslookup-host', 'dns-lookup-host',
and 'run-dig'.  Each function now accepts an optional name server
argument interactively (with a prefix argument) and non-interactively.

** 'describe-key-briefly' now ignores mouse movement events.

** The new variable 'eval-expression-print-maximum-character' prevents
large integers from being displayed as characters by 'M-:' and similar
commands.

** Two new commands for finding the source code of Emacs Lisp
libraries: 'find-library-other-window' and 'find-library-other-frame'.

** The new variable 'display-raw-bytes-as-hex' allows you to change
the display of raw bytes from octal to hex.

** You can now provide explicit field numbers in format specifiers.
For example, '(format "%2$s %1$s %2$s" "X" "Y")' produces "Y X Y".

** Emacs now supports optional display of line numbers in the buffer.
This is similar to what 'linum-mode' provides, but much faster and
doesn't usurp the display margin for the line numbers.  Customize the
buffer-local variable 'display-line-numbers' to activate this optional
display.  Alternatively, you can use the 'display-line-numbers-mode'
minor mode or the global 'global-display-line-numbers-mode'.  When
using these modes, customize 'display-line-numbers-type' with the same
value as you would use with 'display-line-numbers'.

Line numbers are not displayed at all in minibuffer windows and in
tooltips, as they are not useful there.

Lisp programs can disable line-number display for a particular screen
line by putting the 'display-line-numbers-disable' text property or
overlay property on the first character of that screen line.  This is
intended for add-on packages that need a finer control of the display.

Lisp programs that need to know how much screen estate is used up for
line-number display in a window can use the new function
'line-number-display-width'.

'linum-mode' and all similar packages are henceforth becoming obsolete.
Users and developers are encouraged to switch to this new feature
instead.

** The new user option 'arabic-shaper-ZWNJ-handling' controls how to
handle ZWNJ in Arabic text rendering.


* Editing Changes in Emacs 26.1

** New variable 'column-number-indicator-zero-based'.
Traditionally, in Column Number mode, the displayed column number
counts from zero starting at the left margin of the window.  This
behavior is now controlled by 'column-number-indicator-zero-based'.
If you would prefer for the displayed column number to count from one,
you may set this variable to nil.  (Behind the scenes, there is now a
new mode line construct, '%C', which operates exactly as '%c' does
except that it counts from one.)

** New single-line horizontal scrolling mode.
The 'auto-hscroll-mode' variable can now have a new special value,
'current-line', which causes only the line where the cursor is
displayed to be horizontally scrolled when lines are truncated on
display and point moves outside the left or right window margin.

** New mode line constructs '%o' and '%q', and user option
'mode-line-percent-position'.  '%o' displays the "degree of travel" of
the window through the buffer.  Unlike the default '%p', this
percentage approaches 100% as the window approaches the end of the
buffer.  '%q' displays the percentage offsets of both the start and
the end of the window, e.g. "5-17%".  The new option
'mode-line-percent-position' makes it easier to switch between '%p',
'%P', and these new constructs.

** Two new user options 'list-matching-lines-jump-to-current-line' and
'list-matching-lines-current-line-face' to show the current line
highlighted in *Occur* buffer.

** The 'occur' command can now operate on the region.

** New bindings for 'query-replace-map'.
'undo', undo the last replacement; bound to 'u'.
'undo-all', undo all replacements; bound to 'U'.

** 'delete-trailing-whitespace' deletes whitespace after form feed.
In modes where form feed was treated as a whitespace character,
'delete-trailing-whitespace' would keep lines containing it unchanged.
It now deletes whitespace after the last form feed thus behaving the
same as in modes where the character is not whitespace.

** Emacs no longer prompts about editing a changed file when the file's
content is unchanged.  Instead of only checking the modification time,
Emacs now also checks the file's actual content before prompting the user.

** Various casing improvements.

*** 'upcase', 'upcase-region' et al. convert title case characters
(such as ǲ) into their upper case form (such as Ǳ).

*** 'capitalize', 'upcase-initials' et al. make use of title-case forms
of initial characters (correctly producing for example ǅungla instead
of incorrect Ǆungla).

*** Characters which turn into multiple ones when cased are correctly handled.
For example, ﬁ ligature is converted to FI when upper cased.

*** Greek small sigma is correctly handled when at the end of the word.
Strings such as ΌΣΟΣ are now correctly converted to Όσος when
capitalized instead of incorrect Όσοσ (compare lowercase sigma at the
end of the word).

** Emacs can now auto-save buffers to visited files in a more robust
manner via the new mode 'auto-save-visited-mode'.  Unlike
'auto-save-visited-file-name', this mode uses the normal saving
procedure and therefore obeys saving hooks.
'auto-save-visited-file-name' is now obsolete.

** New behavior of 'mark-defun'.
Prefix argument selects that many (or that many more) defuns.
Negative prefix arg flips the direction of selection.  Also,
'mark-defun' between defuns correctly selects N following defuns (or
-N previous for negative arguments).  Finally, comments preceding the
defun are selected unless they are separated from the defun by a blank
line.

** New command 'replace-buffer-contents'.
This command replaces the contents of the accessible portion of the
current buffer with the contents of the accessible portion of a
different buffer while keeping point, mark, markers, and text
properties as intact as possible.

** New commands 'apropos-local-variable' and 'apropos-local-value'.
These are buffer-local versions of 'apropos-variable' and
'apropos-value', respectively.  They show buffer-local variables whose
names and values, respectively, match a given pattern.

** More user control of reordering bidirectional text for display.
The two new variables, 'bidi-paragraph-start-re' and
'bidi-paragraph-separate-re', allow customization of what exactly are
paragraphs, for the purposes of bidirectional display.

** New variable 'x-wait-for-event-timeout'.
This controls how long Emacs will wait for updates to the graphical
state to take effect (making a frame visible, for example).


* Changes in Specialized Modes and Packages in Emacs 26.1

** Emacs 26.1 comes with Org v9.1.6.
See the file ORG-NEWS for user-visible changes in Org.

** New function 'cl-generic-p'.

** Dired

*** You can answer 'all' in 'dired-do-delete' to delete recursively all
remaining directories without more prompts.

*** Dired supports wildcards in the directory part of the file names.

*** You can now use '`?`' in 'dired-do-shell-command'.
It gets replaced by the current file name, like ' ? '.

*** A new option 'dired-always-read-filesystem' defaulting to nil.
If non-nil, buffers visiting files are reverted before they are
searched; for instance, in 'dired-mark-files-containing-regexp' a
non-nil value of this option means the file is revisited in a
temporary buffer; this temporary buffer is the actual buffer searched:
the original buffer visiting the file is not modified.

*** Users can now customize mouse clicks in Dired in a more flexible way.
The new command 'dired-mouse-find-file' can be bound to a mouse click
and used to visit files/directories in Dired in the selected window.
The new command 'dired-mouse-find-file-other-frame' similarly visits
files/directories in another frame.  You can write your own commands
that invoke 'dired-mouse-find-file' with non-default optional
arguments, to tailor the effects of mouse clicks on file names in
Dired buffers.

*** In wdired, when editing files to contain slash characters,
the resulting directories are automatically created.  Whether to do
this is controlled by the 'wdired-create-parent-directories' variable.

*** 'W' is now bound to 'browse-url-of-dired-file', and is useful for
viewing HTML files and the like.

*** New variable 'dired-clean-confirm-killing-deleted-buffers'
controls whether Dired asks to kill buffers visiting deleted files and
directories.  The default is t, so Dired asks for confirmation, to
keep previous behavior.

** html2text is now marked obsolete.

** smerge-refine-regions can refine regions in separate buffers.

** Info menu and index completion uses substring completion by default.
This can be customized via the 'info-menu' category in
'completion-category-overrides'.

** The ancestor buffer is shown by default in 3-way merges.
A new option 'ediff-show-ancestor' and a new toggle
'ediff-toggle-show-ancestor'.

** TeX: Add luatex and xetex as alternatives to pdftex

** Electric-Buffer-menu

*** Key 'U' is bound to 'Buffer-menu-unmark-all' and key 'M-DEL' is
bound to 'Buffer-menu-unmark-all-buffers'.

** hideshow mode got four key bindings that are analogous to outline
mode bindings: 'C-c @ C-a', 'C-c @ C-t', 'C-c @ C-d', and 'C-c @ C-e'.

** bs

*** Two new commands 'bs-unmark-all', bound to 'U', and
'bs-unmark-previous', bound to <backspace>.

** Buffer-menu

*** Two new commands 'Buffer-menu-unmark-all', bound to 'U' and
'Buffer-menu-unmark-all-buffers', bound to 'M-DEL'.

** Checkdoc

*** 'checkdoc-arguments-in-order-flag' now defaults to nil.

** Gnus

*** The ~/.newsrc file will now only be saved if the native select
method is an NNTP select method.

*** A new command for sorting articles by readedness marks has been
added: 'C-c C-s C-m C-m'.

*** In 'message-citation-line-format' the '%Z' format is now the time
zone name instead of the numeric form.  The '%z' format continues to
be the numeric form.  The new behavior is compatible with
'format-time-string'.

** Ibuffer

*** New command 'ibuffer-jump'.

*** New filter commands 'ibuffer-filter-by-basename',
'ibuffer-filter-by-file-extension', 'ibuffer-filter-by-directory',
'ibuffer-filter-by-starred-name', 'ibuffer-filter-by-modified'
and 'ibuffer-filter-by-visiting-file'; bound respectively
to '/b', '/.', '//', '/*', '/i' and '/v'.

*** Two new commands 'ibuffer-filter-chosen-by-completion'
and 'ibuffer-and-filter', the second bound to '/&'.

*** The commands 'ibuffer-pop-filter', 'ibuffer-pop-filter-group',
'ibuffer-or-filter' and 'ibuffer-filter-disable' have the alternative
bindings '/<up>', '/S-<up>', '/|' and '/DEL', respectively.

*** The data format specifying filters has been extended to allow
explicit logical 'and', and a more flexible form for logical 'not'.
See 'ibuffer-filtering-qualifiers' doc string for full details.

*** A new command 'ibuffer-copy-buffername-as-kill'; bound
to 'B'.

*** New command 'ibuffer-change-marks'; bound to '* c'.

*** A new command 'ibuffer-mark-by-locked' to mark
all locked buffers;  bound to '% L'.

*** A new option 'ibuffer-locked-char' to indicate
locked buffers; Ibuffer shows a new column displaying
'ibuffer-locked-char' for locked buffers.

*** A new command 'ibuffer-unmark-all-marks' to unmark
all buffers without asking confirmation;  bound to
'U'; 'ibuffer-do-replace-regexp' bound to 'r'.

*** A new command 'ibuffer-mark-by-content-regexp' to mark buffers
whose content matches a regexp; bound to '% g'.

*** Two new options 'ibuffer-never-search-content-name' and
'ibuffer-never-search-content-mode' used by
'ibuffer-mark-by-content-regexp'.

** Browse-URL

*** Support for opening links to man pages in Man or WoMan mode.

** Comint

*** New user option 'comint-move-point-for-matching-input' to control
where to place point after 'C-c M-r' and 'C-c M-s'.

*** New user option 'comint-terminfo-terminal'.
This option allows control of the value of the TERM environment
variable Emacs puts into the environment of the Comint mode and its
derivatives, such as Shell mode and Compilation Shell minor-mode.  The
default is "dumb", for compatibility with previous behavior.

** Compilation mode

*** Messages from CMake are now recognized.

*** The number of errors, warnings, and informational messages is now
displayed in the mode line.  These are updated as compilation
proceeds.

** Grep

*** Grep commands will now use GNU grep's '--null' option if
available, which allows distinguishing the filename from contents if
they contain colons.  This can be controlled by the new custom option
'grep-use-null-filename-separator'.

*** The grep/rgrep/lgrep functions will now ask about saving files
before running.  This is controlled by the 'grep-save-buffers'
variable.

** Edebug

*** Edebug can be prevented from pausing 1 second after reaching a
breakpoint (e.g. with "f" and "o") by customizing the new option
'edebug-sit-on-break'.

*** New customizable option 'edebug-max-depth'.
This allows you to enlarge the maximum recursion depth when
instrumenting code.

** Eshell

*** 'eshell-input-filter's value is now a named function
'eshell-input-filter-default', and has a new custom option
'eshell-input-filter-initial-space' to ignore adding commands prefixed
with blank space to eshell history.

** EUDC

*** Backward compatibility support for BBDB versions less than 3
(i.e., BBDB 2.x) is deprecated and will likely be removed in the next
major release of Emacs.  Users of BBDB 2.x should plan to upgrade to
BBDB 3.x.

** eww

*** New 'M-RET' command for opening a link at point in a new eww buffer.

*** A new 's' command for switching to another eww buffer via the minibuffer.

*** The 'o' command ('shr-save-contents') has moved to 'O' to avoid collision
with the 'o' command from 'image-map'.

*** A new command 'C' ('eww-toggle-colors') can be used to toggle
whether to use the HTML-specified colors or not.  The user can also
customize the 'shr-use-colors' variable.

*** Images that are being loaded are now marked with gray
"placeholder" images of the size specified by the HTML.  They are then
replaced by the real images asynchronously, which will also now
respect width/height HTML specs (unless they specify widths/heights
bigger than the current window).

*** The 'w' command on links is now 'shr-maybe-probe-and-copy-url'.
'shr-copy-url' now only copies the url at point; users who wish to
avoid accidentally accessing remote links may rebind 'w' and 'u' in
'eww-link-keymap' to it.

** Ido

*** The commands 'find-alternate-file-other-window',
'dired-other-window', 'dired-other-frame', and
'display-buffer-other-window' are now remapped to Ido equivalents if
Ido mode is active.

** Images

*** Images are automatically scaled before displaying based on the
'image-scaling-factor' variable (if Emacs supports scaling the images
in question).

*** It's now possible to specify aspect-ratio preserving combinations
of :width/:max-height and :height/:max-width keywords.  In either
case, the "max" keywords win.  (Previously some combinations would,
depending on the aspect ratio of the image, just be ignored and in
other instances this would lead to the aspect ratio not being
preserved.)

*** Images inserted with 'insert-image' and related functions get a
keymap put into the text properties (or overlays) that span the
image.  This keymap binds keystrokes for manipulating size and
rotation, as well as saving the image to a file.  These commands are
also available in 'image-mode'.

*** A new library for creating and manipulating SVG images has been
added.  See the "(elisp) SVG Images" section in the ELisp reference
manual for details.

*** New setf-able function to access and set image parameters is
provided: 'image-property'.

*** New commands 'image-scroll-left' and 'image-scroll-right'
for 'image-mode' that complement 'image-scroll-up' and
'image-scroll-down': they have the same prefix arg behavior and stop
at image boundaries.

** Image-Dired

*** Now provides a minor mode 'image-dired-minor-mode' which replaces
the function 'image-dired-setup-dired-keybindings'.

*** Thumbnail generation is now asynchronous.
The number of concurrent processes is limited by the variable
'image-dired-queue-active-limit'.

*** 'image-dired-thumbnail-storage' has a new option 'standard-large'
for generating 256x256 thumbnails according to the Thumbnail Managing
Standard.

*** Inherits movement keys from 'image-mode' for viewing full images.
This includes the usual char, line, and page movement commands.

*** All the -options types have been changed to argument lists
instead of shell command strings.  This change affects
'image-dired-cmd-create-thumbnail-options',
'image-dired-cmd-create-temp-image-options',
'image-dired-cmd-rotate-thumbnail-options',
'image-dired-cmd-rotate-original-options',
'image-dired-cmd-write-exif-data-options',
'image-dired-cmd-read-exif-data-options', and introduces
'image-dired-cmd-pngnq-options', 'image-dired-cmd-pngcrush-options',
'image-dired-cmd-create-standard-thumbnail-options'.

*** Recognizes more tools by default, including pngnq-s9 and OptiPNG.

*** 'find-file' and related commands now work on thumbnails and
displayed images, providing a default argument of the original file name
via an addition to 'file-name-at-point-functions'.

** The default 'Info-default-directory-list' no longer checks some obsolete
directory suffixes (gnu, gnu/lib, gnu/lib/emacs, emacs, lib, lib/emacs)
when searching for info directories.

** The commands that add ChangeLog entries now prefer a VCS root directory
for the ChangeLog file, if none already exists.  Customize
'change-log-directory-files' to nil for the old behavior.

** Support for non-string values of 'time-stamp-format' has been removed.

** Message

*** 'message-use-idna' now defaults to t (because Emacs comes with
built-in IDNA support now).

*** When sending HTML messages with embedded images, and you have
exiftool installed, and you rotate images with EXIF data (i.e.,
JPEGs), the rotational information will be inserted into the outgoing
image in the message.  (The original image will not have its
orientation affected.)

*** The 'message-valid-fqdn-regexp' variable has been removed, since
there are now top-level domains added all the time.  Message will no
longer warn about sending emails to top-level domains it hasn't heard
about.

*** 'message-beginning-of-line' (bound to 'C-a') understands folded headers.
In 'visual-line-mode' it will look for the true beginning of a header
while in non-'visual-line-mode' it will move the point to the indented
header's value.

** Package

*** The new variable 'package-gnupghome-dir' has been added to control
where the GnuPG home directory (used for signature verification) is
located and whether GnuPG's option '--homedir' is used or not.

*** Deleting a package no longer respects 'delete-by-moving-to-trash'.

** Python

*** The new variable 'python-indent-def-block-scale' has been added.
It controls the depth of indentation of arguments inside multi-line
function signatures.

** Tramp

*** The method part of remote file names is mandatory now.
A valid remote file name starts with "/method:host:" or
"/method:user@host:".

*** The new pseudo method "-" is a marker for the default method.
"/-::" is the shortest remote file name then.

*** The command 'tramp-change-syntax' allows you to choose an
alternative remote file name syntax.

*** New connection method "sg", which supports editing files under a
different group ID.

*** New connection method "doas" for OpenBSD hosts.

*** New connection method "gdrive", which allows access to Google
Drive onsite repositories.

*** Gateway methods in Tramp have been removed.
Instead, the Tramp manual documents how to configure ssh and PuTTY
accordingly.

*** Setting the "ENV" environment variable in
'tramp-remote-process-environment' enables reading of shell
initialization files.

*** Tramp is able now to send SIGINT to remote asynchronous processes.

*** Variable 'tramp-completion-mode' is obsoleted.

** 'auto-revert-use-notify' is set back to t in 'global-auto-revert-mode'.

** JS mode

*** JS mode now sets 'comment-multi-line' to t.

*** New variable 'js-indent-align-list-continuation', when set to nil,
will not align continuations of bracketed lists, but will indent them
by the fixed width 'js-indent-level'.

** CSS mode

*** Support for completing attribute values, at-rules, bang-rules,
HTML tags, classes and IDs using the 'completion-at-point' command.
Completion candidates for HTML classes and IDs are retrieved from open
HTML mode buffers.

*** CSS mode now binds 'C-h S' to a function that will show
information about a CSS construct (an at-rule, property, pseudo-class,
pseudo-element, with the default being guessed from context).  By
default the information is looked up on the Mozilla Developer Network,
but this can be customized using 'css-lookup-url-format'.

*** CSS colors are fontified using the color they represent as the
background.  For instance, #ff0000 would be fontified with a red
background.

** Emacs now supports character name escape sequences in character and
string literals.  The syntax variants '\N{character name}' and
'\N{U+code}' are supported.

** Prog mode has some support for multi-mode indentation.
This allows better indentation support in modes that support multiple
programming languages in the same buffer, like literate programming
environments or ANTLR programs with embedded Python code.

A major mode can provide indentation context for a sub-mode.  To
support this, modes should use 'prog-first-column' instead of a
literal zero and avoid calling 'widen' in their indentation functions.
See the node "(elisp) Mode-Specific Indent" in the ELisp manual for
more details.

** ERC

*** New variable 'erc-default-port-tls' used to connect to TLS IRC
servers.

** URL

*** The new function 'url-cookie-delete-cookie' can be used to
programmatically delete all cookies, or cookies from a specific
domain.

*** 'url-retrieve-synchronously' now takes an optional timeout parameter.

*** The URL package now supports HTTPS over proxies supporting CONNECT.

*** 'url-user-agent' now defaults to 'default', and the User-Agent
string is computed dynamically based on 'url-privacy-level'.

** VC and related modes

*** 'vc-dir-mode' now binds 'vc-log-outgoing' to 'O'; and has various
branch-related commands on a keymap bound to 'B'.

*** 'vc-region-history' is now bound to 'C-x v h', replacing the older
'vc-insert-headers' binding.

*** New user option 'vc-git-print-log-follow' to follow renames in Git logs
for a single file.

** CC mode

*** Opening a .h file will turn C or C++ mode depending on language used.
This is done with the help of the 'c-or-c++-mode' function, which
analyzes buffer contents to infer whether it's a C or C++ source file.

** New option 'cpp-message-min-time-interval' to allow user control
of progress messages in cpp.el.

** New DNS mode command 'dns-mode-ipv6-to-nibbles' to convert IPv6 addresses
to a format suitable for reverse lookup zone files.

** Ispell

*** Enchant is now supported as a spell-checker.

Enchant is a meta-spell-checker that uses providers such as Hunspell
to do the actual checking.  With it, users can use spell-checkers not
directly supported by Emacs, such as Voikko, Hspell and AppleSpell,
more easily share personal word-lists with other programs, and
configure different spelling-checkers for different languages.
(Version 2.1.0 or later of Enchant is required.)

** Flymake

*** Flymake has been completely redesigned

Flymake now annotates arbitrary buffer regions, not just lines.  It
supports arbitrary diagnostic types, not just errors and warnings (see
variable 'flymake-diagnostic-types-alist').

It also supports multiple simultaneous backends, meaning that you can
check your buffer from different perspectives (see variable
'flymake-diagnostic-functions').  Backends for Emacs Lisp mode are
provided.

The old Flymake behavior is preserved in the so-called "legacy
backend", which has been updated to benefit from the new UI features.

** Term

*** 'term-char-mode' now makes its buffer read-only.

The buffer is made read-only to prevent changes from being made by
anything other than the process filter; and movements of point away
from the process mark are counter-acted so that the cursor is in the
correct position after each command.  This is needed to avoid states
which are inconsistent with the state of the terminal understood by
the inferior process.

New user options 'term-char-mode-buffer-read-only' and
'term-char-mode-point-at-process-mark' control these behaviors, and
are non-nil by default.  Customize these options to nil if you want
the previous behavior.

** Xref

*** When an *xref* buffer is needed, 'TAB' quits and jumps to an xref.

A new command 'xref-quit-and-goto-xref', bound to 'TAB' in *xref*
buffers, quits the window before jumping to the destination.  In many
situations, the intended window configuration is restored, just as if
the *xref* buffer hadn't been necessary in the first place.


* New Modes and Packages in Emacs 26.1

** New Elisp data-structure library 'radix-tree'.

** New library 'xdg' with utilities for some XDG standards and specs.

** HTML

*** A new submode of 'html-mode', 'mhtml-mode', is now the default
mode for *.html files.  This mode handles indentation,
fontification, and commenting for embedded JavaScript and CSS.

** New mode 'conf-toml-mode' is a sub-mode of 'conf-mode', specialized
for editing TOML files.

** New mode 'conf-desktop-mode' is a sub-mode of 'conf-unix-mode',
specialized for editing freedesktop.org desktop entries.

** New minor mode 'pixel-scroll-mode' provides smooth pixel-level scrolling.

** New major mode 'less-css-mode' (a minor variant of 'css-mode') for
editing Less files.

** New package 'auth-source-pass' integrates 'auth-source' with the
password manager password-store (http://passwordstore.org).


* Incompatible Lisp Changes in Emacs 26.1

** 'password-data' is now a hash-table so that 'password-read' can use
any object for the 'key' argument.

** Command 'dired-mark-extension' now automatically prepends a '.' to the
extension when not present.  The new command 'dired-mark-suffix' behaves
similarly but it doesn't prepend a '.'.

** Certain cond/pcase/cl-case forms are now compiled using a faster jump
table implementation.  This uses a new bytecode op 'switch', which
isn't compatible with previous Emacs versions.  This functionality can
be disabled by setting 'byte-compile-cond-use-jump-table' to nil.

** If 'comment-auto-fill-only-comments' is non-nil, 'auto-fill-function'
is now called only if either no comment syntax is defined for the
current buffer or the self-insertion takes place within a comment.

** The alist 'ucs-names' is now a hash table.

** 'if-let' and 'when-let' now support binding lists as defined by the
SRFI-2 (Scheme Request for Implementation 2).

** 'C-up', 'C-down', 'C-left' and 'C-right' are now defined in term
mode to send the same escape sequences that xterm does.  This makes
things like 'forward-word' in readline work.

** Customizable variable 'query-replace-from-to-separator'
now doesn't propertize the string value of the separator.
Instead, text properties are added by 'query-replace-read-from'.
Additionally, the new nil value restores pre-24.5 behavior
of not providing replacement pairs via the history.

** Some obsolete functions, variables, and faces have been removed:

*** 'make-variable-frame-local'.  Variables cannot be frame-local any more.

*** From subr.el: 'window-dot', 'set-window-dot', 'read-input',
'show-buffer', 'eval-current-buffer', 'string-to-int'.

*** 'icomplete-prospects-length'.

*** All the default-FOO variables that hold the default value of the
FOO variable.  Use 'default-value' and 'setq-default' to access and
change FOO, respectively.  The exhaustive list of removed variables is:
'default-mode-line-format', 'default-header-line-format',
'default-line-spacing', 'default-abbrev-mode', 'default-ctl-arrow',
'default-truncate-lines', 'default-left-margin', 'default-tab-width',
'default-case-fold-search', 'default-left-margin-width',
'default-right-margin-width', 'default-left-fringe-width',
'default-right-fringe-width', 'default-fringes-outside-margins',
'default-scroll-bar-width', 'default-vertical-scroll-bar',
'default-indicate-empty-lines', 'default-indicate-buffer-boundaries',
'default-fringe-indicator-alist', 'default-fringe-cursor-alist',
'default-scroll-up-aggressively', 'default-scroll-down-aggressively',
'default-fill-column', 'default-cursor-type',
'default-cursor-in-non-selected-windows',
'default-buffer-file-coding-system', 'default-major-mode', and
'default-enable-multibyte-characters'.

*** Many variables obsoleted in 22.1 referring to face symbols.

** The variable 'text-quoting-style' is now a customizable option.  It
controls whether to and how to translate ASCII quotes in messages and
help output.  Its possible values and their semantics remain unchanged
from Emacs 25.  In particular, when this variable's value is 'grave',
all quotes in formats are output as-is.

** Functions like 'check-declare-file' and 'check-declare-directory'
now generate less chatter and more-compact diagnostics.  The auxiliary
function 'check-declare-errmsg' has been removed.

** The regular expression character class '[:blank:]' now matches
Unicode horizontal whitespace as defined in the Unicode Technical
Standard #18.  If you only want to match space and tab, use '[ \t]'
instead.

** 'min' and 'max' no longer round their results.
Formerly, they returned a floating-point value if any argument was
floating-point, which was sometimes numerically incorrect.  For
example, on a 64-bit host (max 1e16 10000000000000001) now returns its
second argument instead of its first.

** The variable 'old-style-backquotes' has been made internal and
renamed to 'lread--old-style-backquotes'.  No user code should use
this variable.

** 'default-file-name-coding-system' now defaults to a coding system
that does not process CRLF.  For example, it defaults to 'utf-8-unix'
instead of to 'utf-8'.  Before this change, Emacs would sometimes
mishandle file names containing these control characters.

** 'file-attributes', 'file-symlink-p' and 'make-symbolic-link' no
longer quietly mutate the target of a local symbolic link, so that
Emacs can access and copy them reliably regardless of their contents.
The following changes are involved.

*** 'file-attributes' and 'file-symlink-p' no longer prepend "/:" to
symbolic links whose targets begin with "/" and contain ":".  For
example, if a symbolic link "x" has a target "/y:z:", '(file-symlink-p
"x")' now returns "/y:z:" rather than "/:/y:z:".

*** 'make-symbolic-link' no longer looks for file name handlers of
target when creating a symbolic link.  For example,
'(make-symbolic-link "/y:z:" "x")' now creates a symbolic link to
"/y:z:" instead of failing.

*** 'make-symbolic-link' removes the remote part of a link target if
target and newname have the same remote part.  For example,
'(make-symbolic-link "/x:y:a" "/x:y:b")' creates a link with the
literal string "a"; and '(make-symbolic-link "/x:y:a" "/x:z:b")'
creates a link with the literal string "/x:y:a" instead of failing.

*** 'make-symbolic-link' now expands a link target with leading "~"
only when the optional third arg is an integer, as when invoked
interactively.  For example, '(make-symbolic-link "~y" "x")' now
creates a link with target the literal string "~y"; to get the old
behavior, use '(make-symbolic-link (expand-file-name "~y") "x")'.  To
avoid this expansion in interactive use, you can now prefix the link
target with "/:".  For example, '(make-symbolic-link "/:~y" "x" 1)'
now creates a link to literal "~y".

** 'file-truename' returns a quoted file name if the target of a
symbolic link has remote file name syntax.

** Module functions are now implemented slightly differently; in
particular, the function 'internal--module-call' has been removed.
Code that depends on undocumented internals of the module system might
break.

** The argument LOCKNAME of 'write-region' is propagated to file name
handlers now.

** When built against recent versions of GTK+, Emacs always uses
gtk_window_move for moving frames and ignores the value of the
variable 'x-gtk-use-window-move'.  The variable is now obsolete.

** Several functions that create or rename files now treat their
destination argument specially only when it is a directory name, i.e.,
when it ends in '/' on GNU and other POSIX-like systems.  When the
destination argument D of one of these functions is an existing
directory and the intent is to act on an entry in that directory, D
should now be a directory name.  For example, (rename-file "e" "f/")
renames to 'f/e'.  Although this formerly happened sometimes even when
D was not a directory name, as in (rename-file "e" "f") where 'f'
happened to be a directory, the old behavior often contradicted the
documentation and had inherent races that led to security holes.  A
call like (rename-file C D) that used the old, undocumented behavior
can be written as (rename-file C (file-name-as-directory D)), a
formulation portable to both older and newer versions of Emacs.
Affected functions include 'add-name-to-file', 'copy-directory',
'copy-file', 'format-write-file', 'gnus-copy-file',
'make-symbolic-link', 'rename-file', 'thumbs-rename-images', and
'write-file'.

** The list returned by 'overlays-at' is now in decreasing priority order.
The documentation of this function always said the order should be
that of decreasing priority, if the 2nd argument of the function is
non-nil, but the code returned the list in the increasing order of
priority instead.  Now the code does what the documentation says it
should do.

** 'format' now avoids allocating a new string in more cases.
'format' was previously documented to return a newly-allocated string,
but this documentation was not correct, as (eq x (format x)) returned
t when x was the empty string.  'format' is no longer documented to
return a newly-allocated string, and the implementation now takes
advantage of the doc change to avoid making copies of strings in
common cases like (format "foo") and (format "%s" "foo").

** The function 'eldoc-message' now accepts a single argument.
Programs that called it with multiple arguments before should pass
them through 'format' first.  Even that is discouraged: for ElDoc
support, you should set 'eldoc-documentation-function' instead of
calling 'eldoc-message' directly.

** Using '&rest' or '&optional' incorrectly is now an error.
For example giving '&optional' without a following variable, or
passing '&optional' multiple times:

    (defun foo (&optional &rest x))
    (defun bar (&optional &optional x))

Previously, Emacs would just ignore the extra keyword, or give
incorrect results in certain cases.

** The pinentry.el library has been removed.
That package (and the corresponding change in GnuPG and pinentry)
was intended to provide a way to input passphrase through Emacs with
GnuPG 2.0.  However, the change to support that was only implemented
in GnuPG >= 2.1 and didn't get backported to GnuPG 2.0.  And with
GnuPG 2.1 and later, pinentry.el is not needed at all.  So the
library was useless, and we removed it.  GnuPG 2.0 is no longer
supported by the upstream project.

To adapt to the change, you may need to set 'epa-pinentry-mode' to the
symbol 'loopback'.  Alternatively, leave 'epa-pinentry-mode' at its
default value of nil, and remove the 'allow-emacs-pinentry' setting
from your 'gpg-agent.conf' configuration file, usually found in the
'~/.gnupg' directory.

Note that previously, it was said that passphrase input through
minibuffer would be much less secure than other graphical pinentry
programs.  However, these days the difference is insignificant: the
'read-password' function sufficiently protects input from leakage to
message logs.  Emacs still doesn't use secure memory to protect
passphrases, but it was also removed from other pinentry programs as
the attack is unrealistic on modern computer systems which don't
utilize swap memory usually.


* Lisp Changes in Emacs 26.1

** The function 'assoc' now takes an optional third argument TESTFN.
This argument, when non-nil, is used for comparison instead of
'equal'.

** New optional argument TESTFN in 'alist-get', 'map-elt' and 'map-put'.
If non-nil, the argument specifies a function to use for comparison,
instead of, respectively, 'assq' and 'eql'.

** New function 'seq-set-equal-p' to check if SEQUENCE1 and SEQUENCE2
contain the same elements, regardless of the order.

** The new function 'mapbacktrace' applies a function to all frames of
the current stack trace.

** The new function 'file-name-case-insensitive-p' tests whether a
given file is on a case-insensitive filesystem.

** Several accessors for the value returned by 'file-attributes'
have been added.  They are: 'file-attribute-type',
'file-attribute-link-number', 'file-attribute-user-id',
'file-attribute-group-id', 'file-attribute-access-time',
'file-attribute-modification-time',
'file-attribute-status-change-time', 'file-attribute-size',
'file-attribute-modes', 'file-attribute-inode-number',
'file-attribute-device-number' and 'file-attribute-collect'.

** The new function 'buffer-hash' computes a fast, non-consing hash of
a buffer's contents.

** 'interrupt-process' now consults the list 'interrupt-process-functions',
to determine which function has to be called in order to deliver the
SIGINT signal.  This allows Tramp to send the SIGINT signal to remote
asynchronous processes.  The hitherto existing implementation has been
moved to 'internal-default-interrupt-process'.

** The new function 'read-multiple-choice' prompts for multiple-choice
questions, with a handy way to display help texts.

** 'comment-indent-function' values may now return a cons to specify a
range of indentation.

** New optional argument TEXT in 'make-temp-file'.

** New function 'define-symbol-prop'.

** New function 'secure-hash-algorithms' to list the algorithms that
'secure-hash' supports.
See the node "(elisp) Checksum/Hash" in the ELisp manual for details.

** Emacs now exposes the GnuTLS cryptographic API with the functions
'gnutls-macs' and 'gnutls-hash-mac'; 'gnutls-digests' and
'gnutls-hash-digest'; 'gnutls-ciphers' and 'gnutls-symmetric-encrypt'
and 'gnutls-symmetric-decrypt'.
See the node "(elisp) GnuTLS Cryptography" in the ELisp manual for details.

** The function 'gnutls-available-p' now returns a list of capabilities
supported by the GnuTLS library used by Emacs.

** Emacs now supports records for user-defined types, via the new
functions 'make-record', 'record', and 'recordp'.  Records are now
used internally to represent cl-defstruct and defclass instances, for
example.

If your program defines new record types, you should use
package-naming conventions for naming those types.  This is so any
potential conflicts with other types are avoided.

** 'save-some-buffers' now uses 'save-some-buffers-default-predicate'
to decide which buffers to ask about, if the PRED argument is nil.
The default value of 'save-some-buffers-default-predicate' is nil,
which means ask about all file-visiting buffers.

** string-(to|as|make)-(uni|multi)byte are now declared obsolete.

** New variable 'while-no-input-ignore-events' which allow
setting which special events 'while-no-input' should ignore.
It is a list of symbols.

** New function 'undo-amalgamate-change-group' to get rid of
undo-boundaries between two states.

** New var 'definition-prefixes' is a hash table mapping prefixes to
the files where corresponding definitions can be found.  This can be
used to fetch definitions that are not yet loaded, for example for
'C-h f'.

** New var 'syntax-ppss-table' to control the syntax-table used in
'syntax-ppss'.

** 'define-derived-mode' can now specify an :after-hook form, which
gets evaluated after the new mode's hook has run.  This can be used to
incorporate configuration changes made in the mode hook into the
mode's setup.

** Autoload files are now generated without timestamps.
Set 'autoload-timestamps' to a non-nil value to get timestamps in
autoload files.

** 'gnutls-boot' now takes a parameter ':complete-negotiation' that
says that negotiation should complete even on non-blocking sockets.

** There is now a new variable 'flyspell-sort-corrections-function'
that allows changing the way corrections are sorted.

** The new command 'fortune-message' has been added, which displays
fortunes in the echo area.

** New function 'func-arity' returns information about the argument list
of an arbitrary function.  This generalizes 'subr-arity' for functions
that are not built-in primitives.  We recommend using this new
function instead of 'subr-arity'.

** New function 'region-bounds' can be used in the interactive spec
to provide region boundaries (for rectangular regions more than one)
to an interactively callable function as a single argument instead of
two separate arguments 'region-beginning' and 'region-end'.

** 'parse-partial-sexp' state has a new element.  Element 10 is
non-nil when the last character scanned might be the first character
of a two character construct, i.e., a comment delimiter or escaped
character.  Its value is the syntax of that last character.

** 'parse-partial-sexp's state, element 9, has now been confirmed as
permanent and documented, and may be used by Lisp programs.  Its value
is a list of currently open parenthesis positions, starting with the
outermost parenthesis.

** 'read-color' will now display the color names using the color itself
as the background color.

** The function 'redirect-debugging-output' now works on platforms
other than GNU/Linux.

** The new function 'string-version-lessp' compares strings by
interpreting consecutive runs of numerical characters as numbers, and
compares their numerical values.  According to this predicate,
"foo2.png" is smaller than "foo12.png".

** Numeric comparisons and 'logb' no longer return incorrect answers
due to internal rounding errors.  For example, '(< most-positive-fixnum
(+ 1.0 most-positive-fixnum))' now correctly returns t on 64-bit hosts.

** The functions 'ffloor', 'fceiling', 'ftruncate' and 'fround' now
accept only floating-point arguments, as per their documentation.
Formerly, they quietly accepted integer arguments and sometimes
returned nonsensical answers, e.g., '(< N (ffloor N))' could return t.

** On hosts like GNU/Linux x86-64 where a 'long double' fraction
contains at least EMACS_INT_WIDTH - 3 bits, 'format' no longer returns
incorrect answers due to internal rounding errors when formatting
Emacs integers with '%e', '%f', or '%g' conversions.  For example, on
these hosts '(eql N (string-to-number (format "%.0f" N)))' now returns
t for all Emacs integers N.

** Calls that accept floating-point integers (for use on hosts with
limited integer range) now signal an error if arguments are not
integral.  For example '(decode-char 'ascii 0.5)' now signals an
error.

** Functions 'string-trim-left', 'string-trim-right' and 'string-trim'
now accept optional arguments which specify the regexp of a substring
to trim.

** The new function 'char-from-name' converts a Unicode name string
to the corresponding character code.

** New functions 'sxhash-eq' and 'sxhash-eql' return hash codes of a
Lisp object suitable for use with 'eq' and 'eql' correspondingly.  If
two objects are 'eq' ('eql'), then the result of 'sxhash-eq'
('sxhash-eql') on them will be the same.

** Function 'sxhash' has been renamed to 'sxhash-equal' for
consistency with the new functions.  For compatibility, 'sxhash'
remains as an alias to 'sxhash-equal'.

** 'make-hash-table' now defaults to a rehash threshold of 0.8125
instead of 0.8, to avoid rounding glitches.

** New function 'add-variable-watcher' can be used to call a function
when a symbol's value is changed.  This is used to implement the new
debugger command 'debug-on-variable-change'.

** New variable 'print-escape-control-characters' causes 'prin1' and
'print' to output control characters as backslash sequences.

** Time conversion functions that accept a time zone rule argument now
allow it to be OFFSET or a list (OFFSET ABBR), where the integer
OFFSET is a count of seconds east of Universal Time, and the string
ABBR is a time zone abbreviation.  The affected functions are
'current-time-string', 'current-time-zone', 'decode-time',
'format-time-string', and 'set-time-zone-rule'.

** 'format-time-string' now formats '%q' to the calendar quarter.

** New built-in function 'mapcan'.
It avoids unnecessary consing (and garbage collection).

** 'car' and 'cdr' compositions 'cXXXr' and 'cXXXXr' are now part of Elisp.

** 'gensym' is now part of Elisp.

** Low-level list functions like 'length' and 'member' now do a better
job of signaling list cycles instead of looping indefinitely.

** The new functions 'make-nearby-temp-file' and 'temporary-file-directory'
can be used for creation of temporary files on remote or mounted directories.

** On GNU platforms when operating on a local file, 'file-attributes'
no longer suffers from a race when called while another process is
altering the filesystem.  On non-GNU platforms 'file-attributes'
attempts to detect the race, and returns nil if it does so.

** The new function 'file-local-name' can be used to specify arguments
of remote processes.

** The new functions 'file-name-quote', 'file-name-unquote' and
'file-name-quoted-p' can be used to quote / unquote file names with
the prefix "/:".

** The new error 'file-missing', a subcategory of 'file-error', is now
signaled instead of 'file-error' if a file operation acts on a file
that does not exist.

** The function 'delete-directory' no longer signals an error when
operating recursively and when some other process deletes the directory
or its files before 'delete-directory' gets to them.

** New error type 'user-search-failed' like 'search-failed' but
avoids debugger like 'user-error'.

** The function 'line-number-at-pos' now takes a second optional
argument 'absolute'.  If this parameter is nil, the default, this
function keeps on returning the line number taking potential narrowing
into account.  If this parameter is non-nil, the function ignores
narrowing and returns the absolute line number.

** The function 'color-distance' now takes a second optional argument
'metric'.  When non-nil, it should be a function of two arguments that
accepts two colors and returns a number.

** Changes in Frame and Window Handling

*** Resizing a frame no longer runs 'window-configuration-change-hook'.
'window-size-change-functions' should be used instead.

*** The new function 'frame-size-changed-p' can tell whether a frame has
been resized since the last time 'window-size-change-functions' has been
run.

*** The function 'frame-geometry' now also returns the width of a
frame's outer border.

*** New frame parameters and changed semantics for older ones:

**** 'z-group' positions a frame above or below all others.

**** 'min-width' and 'min-height' specify the absolute minimum size of a
frame.

**** 'parent-frame' makes a frame the child frame of another Emacs
frame.  The section "(elisp) Child Frames" in the ELisp manual
describes the intrinsics of that relationship.

**** 'delete-before' triggers deletion of one frame before that of
another.

**** 'mouse-wheel-frame' specifies another frame whose windows shall be
scrolled instead.

**** 'no-other-frame' has 'next-frame' and 'previous-frame' skip this
frame.

**** 'skip-taskbar' removes a frame's icon from the taskbar and has
'Alt-<TAB>' skip this frame.

**** 'no-focus-on-map' avoids that a frame gets input focus when mapped.

**** 'no-accept-focus' means that a frame does not want to get input
focus via the mouse.

**** 'undecorated' removes the window manager decorations from a frame.

**** 'override-redirect' tells the window manager to disregard this
frame.

**** 'width' and 'height' now allow the specification of pixel values
and ratios.

**** 'left' and 'top' now allow the specification of ratios.

**** 'keep-ratio' preserves size and position of child frames when their
parent frame is resized.

**** 'no-special-glyphs' suppresses display of truncation and
continuation glyphs in a frame.

**** 'auto-hide-function' and 'minibuffer-exit' handle auto hiding of
frames and exiting from minibuffer individually.

**** 'fit-frame-to-buffer-margins' and 'fit-frame-to-buffer-sizes'
handle fitting a frame to its buffer individually.

**** 'drag-internal-border', 'drag-with-header-line',
'drag-with-mode-line', 'snap-width', 'top-visible' and 'bottom-visible'
allow dragging and resizing frames with the mouse.

**** 'minibuffer' is now set to the default minibuffer window when
initially specified as nil and is not reset to nil when initially
specifying a minibuffer window.

*** The new function 'frame-list-z-order' returns a list of all frames
in Z (stacking) order.

*** The function 'x-focus-frame' optionally tries to not activate its
frame.

*** The variable 'focus-follows-mouse' has a third meaningful value
'auto-raise' to indicate that the window manager automatically raises a
frame when the mouse pointer enters it.

*** The new function 'frame-restack' puts a frame above or below
another on the display.

*** The new face 'internal-border' specifies the background of a frame's
internal border.

*** The NORECORD argument of 'select-window' now has a meaningful value
'mark-for-redisplay' which is like any other non-nil value but marks
WINDOW for redisplay.

*** Support for side windows is now official.  The display action
function 'display-buffer-in-side-window' will display its buffer in a
side window.  Functions for toggling all side windows on a frame,
changing and reversing the layout of side windows and returning the
main (major non-side) window of a frame are provided.  For details
consult the section "(elisp) Side Windows" in the ELisp manual.

*** Support for atomic windows - rectangular compositions of windows
treated by 'split-window', 'delete-window' and 'delete-other-windows'
like a single live window - is now official.  For details consult the
section "(elisp) Atomic Windows" in the ELisp manual.

*** New 'display-buffer' alist entry 'window-parameters' allows the
assignment of window parameters to the window used for displaying the
buffer.

*** New function 'display-buffer-reuse-mode-window' is an action function
suitable for use in 'display-buffer-alist'.  For example, to avoid
creating a new window when opening man pages when there's already one,
use

(add-to-list 'display-buffer-alist
     '("\\`\\*Man .*\\*\\'" .
       (display-buffer-reuse-mode-window
        (inhibit-same-window . nil)
        (mode . Man-mode))))

*** New window parameter 'no-delete-other-windows' prevents that
its window gets deleted by 'delete-other-windows'.

*** New window parameters 'mode-line-format' and 'header-line-format'
allow the buffer-local formats for this window to be overridden.

*** New command 'window-swap-states' swaps the states of two live
windows.

*** New functions 'window-pixel-width-before-size-change' and
'window-pixel-height-before-size-change' support detecting which
window changed size when 'window-size-change-functions' are run.

*** The new function 'window-lines-pixel-dimensions' returns the pixel
dimensions of a window's text lines.

*** The new function 'window-largest-empty-rectangle' returns the
dimensions of the largest rectangular area not occupying any text in a
window's body.

*** The semantics of 'mouse-autoselect-window' has changed slightly.
For details see the section "(elisp) Mouse Window Auto-selection" in
the ELisp manual.

*** 'select-frame-by-name' now may return a frame on another display
if it does not find a suitable one on the current display.

** 'tcl-auto-fill-mode' is now declared obsolete.  Its functionality
can be replicated simply by setting 'comment-auto-fill-only-comments'.

** New pcase pattern 'rx' to match against an rx-style regular expression.
For details, see the doc string of 'rx--pcase-macroexpander'.

** New functions to set region from secondary selection and vice versa.
The new functions 'secondary-selection-to-region' and
'secondary-selection-from-region' let you set the beginning and the
end of the region from those of the secondary selection and vice
versa.

** New function 'lgstring-remove-glyph' can be used to modify a
gstring returned by the underlying layout engine (e.g. m17n-flt,
uniscribe).


* Changes in Emacs 26.1 on Non-Free Operating Systems

** Intercepting hotkeys on Windows 7 and later now works better.
The new keyboard hooking code properly grabs system hotkeys such as
'Win-*' and 'Alt-TAB', in a way that Emacs can get at them before the
system.  This makes the 'w32-register-hot-key' functionality work
again on all versions of MS-Windows starting with Windows 7.  On
Windows NT and later you can now register any hotkey combination.  (On
Windows 9X, the previous limitations, spelled out in the Emacs manual,
still apply.)

** 'convert-standard-filename' no longer mirrors slashes on MS-Windows.
Previously, on MS-Windows this function converted slash characters in
file names into backslashes.  It no longer does that.  If your Lisp
program used 'convert-standard-filename' to prepare file names to be
passed to subprocesses (which is not the recommended usage of that
function), you will now have to mirror slashes in your application
code.  One possible way is this:

         (let ((start 0))
           (while (string-match "/" file-name start)
             (aset file-name (match-beginning 0) ?\\)
             (setq start (match-end 0))))

** GUI sessions on MS-Windows now treat SIGINT like Posix platforms do.
The effect of delivering a Ctrl-C (SIGINT) signal to a GUI Emacs on
MS-Windows is now the same as on Posix platforms -- Emacs saves the
session and exits.  In particular, this will happen if you start
emacs.exe from the Windows shell, then type Ctrl-C into that shell's
window.

** 'signal-process' supports SIGTRAP on Windows XP and later.
The 'kill' emulation on Windows now maps SIGTRAP to a call to the
'DebugBreakProcess' API.  This causes the receiving process to break
execution and return control to the debugger.  If no debugger is
attached to the receiving process, the call is typically ignored.
This is in contrast to the default action on POSIX Systems, where it
causes the receiving process to terminate with a core dump if no
debugger has been attached to it.

** 'set-mouse-position' and 'set-mouse-absolute-pixel-position' work
on macOS.

** Emacs can now be run as a GUI application from the command line on
macOS.

** 'ns-appearance' and 'ns-transparent-titlebar' change the appearance
of frame decorations on macOS 10.9+.

** 'ns-use-thin-smoothing' enables thin font smoothing on macOS 10.8+.

** 'process-attributes' on Darwin systems now returns more information.

** Mousewheel and trackpad scrolling on macOS 10.7+ now behaves more
like the macOS default.  The new variables 'ns-mwheel-line-height',
'ns-use-mwheel-acceleration' and 'ns-use-mwheel-momentum' can be used
to customize the behavior.


----------------------------------------------------------------------
This file is part of GNU Emacs.

GNU Emacs is free software: you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

GNU Emacs is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with GNU Emacs.  If not, see <https://www.gnu.org/licenses/>.


Local variables:
coding: utf-8
mode: outline
paragraph-separate: "[ 	]*$"
end:
