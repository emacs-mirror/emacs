### @configure_input@

# Copyright (C) 2000-2018 Free Software Foundation, Inc.

# This file is part of GNU Emacs.

# GNU Emacs is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.

# GNU Emacs is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.

# You should have received a copy of the GNU General Public License
# along with GNU Emacs.  If not, see <https://www.gnu.org/licenses/>.

SHELL = @SHELL@

srcdir = @srcdir@
top_srcdir = @top_srcdir@
lisp = $(srcdir)
VPATH = $(srcdir)
EXEEXT = @EXEEXT@

# Empty for all systems except MinGW, where xargs needs an explicit
# limitation.
XARGS_LIMIT = @XARGS_LIMIT@

# 'make' verbosity.
AM_DEFAULT_VERBOSITY = @AM_DEFAULT_VERBOSITY@

AM_V_ELC = $(am__v_ELC_@AM_V@)
am__v_ELC_ = $(am__v_ELC_@AM_DEFAULT_V@)
am__v_ELC_0 = @echo "  ELC     " $@;
am__v_ELC_1 =

AM_V_GEN = $(am__v_GEN_@AM_V@)
am__v_GEN_ = $(am__v_GEN_@AM_DEFAULT_V@)
am__v_GEN_0 = @echo "  GEN     " $@;
am__v_GEN_1 =

AM_V_at = $(am__v_at_@AM_V@)
am__v_at_ = $(am__v_at_@AM_DEFAULT_V@)
am__v_at_0 = @
am__v_at_1 =


FIND_DELETE = @FIND_DELETE@

# You can specify a different executable on the make command line,
# e.g. "make EMACS=../src/emacs ...".

# We never change directory before running Emacs, so a relative file
# name is fine, and makes life easier.  If we need to change
# directory, we can use emacs --chdir.
EMACS = ../src/emacs${EXEEXT}

# Command line flags for Emacs.

EMACSOPT = -batch --no-site-file --no-site-lisp

# Extra flags to pass to the byte compiler
BYTE_COMPILE_EXTRA_FLAGS =
# For example to not display the undefined function warnings you can use this:
# BYTE_COMPILE_EXTRA_FLAGS = --eval '(setq byte-compile-warnings (quote (not unresolved)))'
# The example above is just for developers, it should not be used by default.

# Those automatically generated autoload files that need special rules
# to build; ie not including things created via generated-autoload-file
# (eg calc/calc-loaddefs.el).
LOADDEFS = $(lisp)/calendar/cal-loaddefs.el \
	$(lisp)/calendar/diary-loaddefs.el \
	$(lisp)/calendar/hol-loaddefs.el \
	$(lisp)/mh-e/mh-loaddefs.el \
	$(lisp)/net/tramp-loaddefs.el

# All generated autoload files.
loaddefs = $(shell find ${srcdir} -name '*loaddefs.el' ! -name '.*')
# Elisp files auto-generated.
AUTOGENEL = ${loaddefs} ${srcdir}/cus-load.el ${srcdir}/finder-inf.el \
  ${srcdir}/subdirs.el ${srcdir}/eshell/esh-groups.el

# Set load-prefer-newer for the benefit of the non-bootstrappers.
BYTE_COMPILE_FLAGS = \
  --eval '(setq load-prefer-newer t)' $(BYTE_COMPILE_EXTRA_FLAGS)

# Files to compile before others during a bootstrap.  This is done to
# speed up the bootstrap process.  They're ordered by size, so we use
# the slowest-compiler on the smallest file and move to larger files as the
# compiler gets faster.  'autoload.elc' comes last because it is not used by
# the compiler (so its compilation does not speed up subsequent compilations),
# it's only placed here so as to speed up generation of the loaddefs.el file.

COMPILE_FIRST = \
	$(lisp)/emacs-lisp/macroexp.elc \
	$(lisp)/emacs-lisp/cconv.elc    \
	$(lisp)/emacs-lisp/byte-opt.elc \
	$(lisp)/emacs-lisp/bytecomp.elc \
	$(lisp)/emacs-lisp/autoload.elc

# Files to compile early in compile-main.  Works around bug#25556.
MAIN_FIRST = ./emacs-lisp/eieio.el ./emacs-lisp/eieio-base.el \
  ./cedet/semantic/db.el

# Prevent any settings in the user environment causing problems.
unexport EMACSDATA EMACSDOC EMACSPATH

# The actual Emacs command run in the targets below.
# Prevent any setting of EMACSLOADPATH in user environment causing problems.
emacs = EMACSLOADPATH= '$(EMACS)' $(EMACSOPT)

## Subdirectories, relative to builddir.
SUBDIRS = $(sort $(shell find ${srcdir} -type d -print))
## Subdirectories, relative to srcdir.
SUBDIRS_REL = $(patsubst ${srcdir}%,.%,${SUBDIRS})
## All subdirectories except 'obsolete' and 'term'.
SUBDIRS_ALMOST = $(filter-out ${srcdir}/obsolete ${srcdir}/term,${SUBDIRS})
## All subdirectories except 'obsolete', 'term', and 'leim' (and subdirs).
## We don't want the leim files listed as packages, especially
## since many share basenames with files in language/.
SUBDIRS_FINDER = $(filter-out ${srcdir}/leim%,${SUBDIRS_ALMOST})
## All subdirectories in which we might want to create subdirs.el.
SUBDIRS_SUBDIRS = $(filter-out ${srcdir}/cedet% ${srcdir}/leim%,${SUBDIRS})

# cus-load and finder-inf are not explicitly requested by anything, so
# we add them here to make sure they get built.
all: compile-main $(lisp)/cus-load.el $(lisp)/finder-inf.el

PHONY_EXTRAS =
.PHONY: all custom-deps finder-data autoloads update-subdirs $(PHONY_EXTRAS)

# custom-deps and finder-data both used to scan _all_ the *.el files.
# This could lead to problems in parallel builds if automatically
# generated *.el files (eg loaddefs etc) were being changed at the same time.
# One solution was to add autoloads as a prerequisite:
# https://lists.gnu.org/r/emacs-pretest-bug/2007-01/msg00469.html
# https://lists.gnu.org/r/bug-gnu-emacs/2007-12/msg00171.html
# However, this meant that running these targets modified loaddefs.el,
# every time (due to time-stamping).  Calling these rules from
# bootstrap-after would modify loaddefs after src/emacs, resulting
# in make install remaking src/emacs for no real reason:
# https://lists.gnu.org/r/emacs-devel/2008-02/msg00311.html
# Nowadays these commands don't scan automatically generated files,
# since they will never contain any useful information
# (see finder-no-scan-regexp and custom-dependencies-no-scan-regexp).
custom-deps:
	$(AM_V_at)$(MAKE) PHONY_EXTRAS=$(lisp)/cus-load.el $(lisp)/cus-load.el
$(lisp)/cus-load.el:
	$(AM_V_GEN)$(emacs) -l cus-dep \
	  --eval '(setq generated-custom-dependencies-file (unmsys--file-name "$(srcdir)/cus-load.el"))' \
	  -f custom-make-dependencies ${SUBDIRS_ALMOST}

finder-data:
	$(AM_V_at)$(MAKE) PHONY_EXTRAS=$(lisp)/finder-inf.el \
	  $(lisp)/finder-inf.el
$(lisp)/finder-inf.el:
	$(AM_V_GEN)$(emacs) -l finder \
	  --eval '(setq generated-finder-keywords-file (unmsys--file-name "$(srcdir)/finder-inf.el"))' \
	  -f finder-compile-keywords-make-dist ${SUBDIRS_FINDER}

## Comments on loaddefs generation:

# loaddefs depends on gen-lisp for two reasons:
# 1) In ../src, the emacs target depends on loaddefs but not on eg leim-list.
# So having leim as a dependency of loaddefs (via gen-lisp) ensures leim-list
# gets created before the final emacs is dumped.  Having leim
# dependencies in ../src as well would create a parallel race condition.
#
# 2) Files that are marked no-update-autoloads still get recorded in loaddefs.
# So those files should be generated before we make autoloads, if we
# don't want a successive make autoloads to change the output file.
# Said changes are trivial (only comments in the "files without autoloads"
# section), but still can be annoying.  Of course, if generated lisp files
# do contain autoloads, it is essential they be built before make autoloads.
# (Also, if a generated file is not written atomically, it is possible that
# in a parallel build, make autoloads could read a partial version of it.)
#
# We'd really like to add "make -C ../admin/unidata all" to gen-lisp
# because of 2) above, but it causes a race condition in parallel
# builds because ../src also runs that rule.  Given the limitations of
# recursive make, the only way to fix that would be to remove unidata
# from ../src rules, but that doesn't seem possible due to the various
# non-trivial dependencies.

# We make $(lisp)/loaddefs.el a dependency of .PHONY to cause Make to
# ignore its time stamp.  That's because the real dependencies of
# loaddefs.el aren't known to Make, they are implemented in
# batch-update-autoloads, which only updates the autoloads whose
# sources have changed.

# Use expand-file-name rather than $abs_scrdir so that Emacs does not
# get confused when it compares file-names for equality.

autoloads .PHONY: $(lisp)/loaddefs.el
$(lisp)/loaddefs.el: gen-lisp $(LOADDEFS)
	@echo Directories for loaddefs: ${SUBDIRS_ALMOST}
	$(AM_V_GEN)$(emacs) -l autoload \
	    --eval '(setq autoload-ensure-writable t)' \
	    --eval '(setq autoload-builtin-package-versions t)' \
	    --eval '(setq generated-autoload-file (expand-file-name (unmsys--file-name "$@")))' \
	    -f batch-update-autoloads ${SUBDIRS_ALMOST}

# autoloads only runs when loaddefs.el is nonexistent, although it
# generates a number of different files. Provide a force option to enable
# regeneration of all these files.
.PHONY: autoloads-force
autoloads-force:
	rm loaddefs.el
	$(MAKE) autoloads

# This is required by the bootstrap-emacs target in ../src/Makefile, so
# we know that if we have an emacs executable, we also have a subdirs.el.
$(lisp)/subdirs.el:
	$(AM_V_GEN)$(MAKE) update-subdirs
update-subdirs:
	$(AM_V_at)for file in ${SUBDIRS_SUBDIRS}; do \
	   $(srcdir)/../build-aux/update-subdirs $$file; \
	done;

.PHONY: updates repo-update update-authors update-gnus-news

# Some modes of make-dist use this.
updates: update-subdirs autoloads finder-data custom-deps

# This is useful after updating from the repository; but it doesn't do
# anything that a plain "make" at top-level doesn't.  The only
# difference between this and this directory's "all" rule is that this
# runs "autoloads" as well (because it uses "compile" rather than
# "compile-main").  In a bootstrap, $(lisp) in src/Makefile triggers
# this directory's autoloads rule.
repo-update: compile finder-data custom-deps

# Update etc/AUTHORS and etc/GNUS-NEWS.

update-authors:
	$(emacs) -L "$(top_srcdir)/admin" -l authors \
	  -f batch-update-authors "$(top_srcdir)/etc/AUTHORS" "$(top_srcdir)"

update-gnus-news:
	$(emacs) -L "$(top_srcdir)/doc/misc" -l gnus-news -f batch-gnus-news \
	  "$(top_srcdir)/doc/misc/gnus-news.texi" \
	  "$(top_srcdir)/etc/GNUS-NEWS"

FORCE:
.PHONY: FORCE

tagsfiles = $(shell find ${srcdir} -name '*.el' \
	        ! -name '.*' ! -name '*loaddefs.el')
tagsfiles := $(filter-out ${srcdir}/ldefs-boot.el,${tagsfiles})
tagsfiles := $(filter-out ${srcdir}/eshell/esh-groups.el,${tagsfiles})

ETAGS = ../lib-src/etags${EXEEXT}

${ETAGS}: FORCE
	${MAKE} -C ../lib-src $(notdir $@)

## The use of xargs is to stop the command line getting too long
## on MS Windows, when the MSYS Bash passes it to a MinGW compiled
## etags.  It might be better to use find in a similar way to
## compile-main.  But maybe this is not even necessary any more now
## that this uses relative filenames.
TAGS: ${ETAGS} ${tagsfiles}
	rm -f $@
	touch $@
	ls ${tagsfiles} | xargs $(XARGS_LIMIT) "${ETAGS}" -a -o $@


# The src/Makefile.in has its own set of dependencies and when they decide
# that one Lisp file needs to be re-compiled, we had better recompile it as
# well, otherwise every subsequent make will again call us, until we finally
# end up deciding that yes, the file deserves recompilation.
# One option is to try and reproduce exactly the same dependencies here as
# we have in src/Makefile.in, but it turns out to be painful
# (e.g. src/Makefile.in may have a dependency for ../lisp/foo.elc where we
# only know of $(lisp)/foo.elc).  So instead we provide a direct way for
# src/Makefile.in to rebuild a particular Lisp file, no questions asked.
# Use byte-compile-refresh-preloaded to try and work around some of
# the most common problems of not bootstrapping from a clean state.
THEFILE = no-such-file
.PHONY: $(THEFILE)c
$(THEFILE)c:
	$(AM_V_ELC)$(emacs) $(BYTE_COMPILE_FLAGS) \
		-l bytecomp -f byte-compile-refresh-preloaded \
		-f batch-byte-compile $(THEFILE)

# Files MUST be compiled one by one. If we compile several files in a
# row (i.e., in the same instance of Emacs) we can't make sure that
# the compilation environment is clean.  We also set the load-path of
# the Emacs used for compilation to the current directory and its
# subdirectories, to make sure require's and load's in the files being
# compiled find the right files.

.SUFFIXES: .elc .el

# An old-fashioned suffix rule, which, according to the GNU Make manual,
# cannot have prerequisites.
.el.elc:
	$(AM_V_ELC)$(emacs) $(BYTE_COMPILE_FLAGS) -f batch-byte-compile $<

.PHONY: compile-first compile-main compile compile-always

compile-first: $(COMPILE_FIRST)

# In 'compile-main' we could directly do
#    ... | xargs $(MAKE)
# and it works, but it generates a lot of messages like
#    make[2]: gnus/gnus-mlspl.elc is up to date.
# so instead, we use "xargs echo" to split the list of file into manageable
# chunks and then use an intermediate 'compile-targets' target so the
# actual targets (the .elc files) are not mentioned as targets on the
# make command line.


.PHONY: compile-targets
# TARGETS is set dynamically in the recursive call from 'compile-main'.
compile-targets: $(TARGETS)

# Compile all the Elisp files that need it.  Beware: it approximates
# 'no-byte-compile', so watch out for false-positives!
compile-main: gen-lisp compile-clean
	@(cd $(lisp) && \
	els=`echo "${SUBDIRS_REL} " | sed -e 's|/\./|/|g' -e 's|/\. | |g' -e 's| |/*.el |g'`; \
	for el in ${MAIN_FIRST} $$els; do \
	  test -f $$el || continue; \
	  test ! -f $${el}c && GREP_OPTIONS= grep '^;.*no-byte-compile: t' $$el > /dev/null && continue; \
	  echo "$${el}c"; \
	done | xargs $(XARGS_LIMIT) echo) | \
	while read chunk; do \
	  $(MAKE) compile-targets TARGETS="$$chunk"; \
	done

.PHONY: compile-clean
# Erase left-over .elc files that do not have a corresponding .el file.
compile-clean:
	@cd $(lisp) && \
	elcs=`echo "${SUBDIRS_REL} " | sed -e 's|/\./|/|g' -e 's|/\. | |g' -e 's| |/*.elc |g'`; \
	for el in `echo $$elcs | sed -e 's/\.elc/\.el/g'`; do \
	  if test -f "$$el" || test ! -f "$${el}c"; then :; else \
	    echo rm "$${el}c"; \
	    rm "$${el}c"; \
	  fi \
	done

.PHONY: gen-lisp leim semantic

## make -C ../admin/unidata all should be here, but that would race
## with ../src.  See comments above for loaddefs.
gen-lisp: leim semantic

leim:
	$(MAKE) -C ../leim all EMACS="$(EMACS)"

semantic:
	$(MAKE) -C ../admin/grammars all EMACS="$(EMACS:.%=../.%)"

# Compile all Lisp files, but don't recompile those that are up to
# date.  Some .el files don't get compiled because they set the
# local variable no-byte-compile.
# Calling make recursively because suffix rule cannot have prerequisites.
compile: $(LOADDEFS) autoloads compile-first
	$(MAKE) compile-main

# Compile all Lisp files.  This is like 'compile' but compiles files
# unconditionally.  Some files don't actually get compiled because they
# set the local variable no-byte-compile.
compile-always:
	find $(lisp) -name '*.elc' $(FIND_DELETE)
	$(MAKE) compile

.PHONY: backup-compiled-files compile-after-backup

# Backup compiled Lisp files in elc.tar.gz.  If that file already
# exists, make a backup of it.

backup-compiled-files:
	-mv $(lisp)/elc.tar.gz $(lisp)/elc.tar.gz~
	-tar czf $(lisp)/elc.tar.gz $(lisp)/*.elc $(lisp)/*/*.elc $(lisp)/*/*/*.elc $(lisp)/*/*/*/*.elc

# Compile Lisp files, but save old compiled files first.

compile-after-backup: backup-compiled-files compile-always

# This does the same job as the "compile" rule, but in a different way.
# Rather than spawning a separate Emacs instance to compile each file,
# it uses the same Emacs instance to compile everything.
# This is faster on a single core, since it avoids the overhead of
# starting Emacs many times (it was 33% faster on a test with a
# random 10% of the .el files needing recompilation).
# Unlike compile, this is not parallelizable; so if you have more than
# one core and use make -j#, compile will be (much) faster.
# This rule also produces less accurate compilation warnings.
# The environment of later files is affected by definitions in
# earlier ones, so it does not produce some warnings that it should.
# It can also produces spurious warnings about "invalid byte code" if
# files that use byte-compile-dynamic are updated.
# There is no reason to use this rule unless you only have a single
# core and CPU time is an issue.
.PHONY: compile-one-process
compile-one-process: $(LOADDEFS) compile-first
	$(emacs) $(BYTE_COMPILE_FLAGS) \
	    --eval "(batch-byte-recompile-directory 0)" $(lisp)

# Update MH-E internal autoloads. These are not to be confused with
# the autoloads for the MH-E entry points, which are already in loaddefs.el.
MH_E_DIR = $(lisp)/mh-e
MH_E_SRC = $(sort $(wildcard ${MH_E_DIR}/mh*.el))
MH_E_SRC := $(filter-out ${MH_E_DIR}/mh-loaddefs.el,${MH_E_SRC})

.PHONY: mh-autoloads
mh-autoloads: $(MH_E_DIR)/mh-loaddefs.el
$(MH_E_DIR)/mh-loaddefs.el: $(MH_E_SRC)
	$(AM_V_GEN)$(emacs) -l autoload \
	   --eval "(setq generate-autoload-cookie \";;;###mh-autoload\")" \
	   --eval "(setq generated-autoload-file (expand-file-name (unmsys--file-name \"$@\")))" \
	   -f batch-update-autoloads $(MH_E_DIR)

# Update TRAMP internal autoloads. Maybe we could move tramp*.el into
# an own subdirectory. OTOH, it does not hurt to keep them in
# lisp/net.
TRAMP_DIR = $(lisp)/net
TRAMP_SRC = $(sort $(wildcard ${TRAMP_DIR}/tramp*.el))
TRAMP_SRC := $(filter-out ${TRAMP_DIR}/tramp-loaddefs.el,${TRAMP_SRC})

$(TRAMP_DIR)/tramp-loaddefs.el: $(TRAMP_SRC)
	$(AM_V_GEN)$(emacs) -l autoload \
	   --eval "(setq generate-autoload-cookie \";;;###tramp-autoload\")" \
	   --eval "(setq generated-autoload-file (expand-file-name (unmsys--file-name \"$@\")))" \
	   -f batch-update-autoloads $(TRAMP_DIR)

CAL_DIR = $(lisp)/calendar
## Those files that may contain internal calendar autoload cookies.
CAL_SRC = $(addprefix ${CAL_DIR}/,diary-lib.el holidays.el lunar.el solar.el)
CAL_SRC := $(sort ${CAL_SRC} $(wildcard ${CAL_DIR}/cal-*.el))
CAL_SRC := $(filter-out ${CAL_DIR}/cal-loaddefs.el,${CAL_SRC})

$(CAL_DIR)/cal-loaddefs.el: $(CAL_SRC)
	$(AM_V_GEN)$(emacs) -l autoload \
	   --eval "(setq generate-autoload-cookie \";;;###cal-autoload\")" \
	   --eval "(setq generated-autoload-file (expand-file-name (unmsys--file-name \"$@\")))" \
	   -f batch-update-autoloads $(CAL_DIR)

$(CAL_DIR)/diary-loaddefs.el: $(CAL_SRC) $(CAL_DIR)/cal-loaddefs.el
	$(AM_V_GEN)$(emacs) -l autoload \
	   --eval "(setq generate-autoload-cookie \";;;###diary-autoload\")" \
	   --eval "(setq generated-autoload-file (expand-file-name (unmsys--file-name \"$@\")))" \
	   -f batch-update-autoloads $(CAL_DIR)

$(CAL_DIR)/hol-loaddefs.el: $(CAL_SRC) $(CAL_DIR)/diary-loaddefs.el
	$(AM_V_GEN)$(emacs) -l autoload \
	   --eval "(setq generate-autoload-cookie \";;;###holiday-autoload\")" \
	   --eval "(setq generated-autoload-file (expand-file-name (unmsys--file-name \"$@\")))" \
	   -f batch-update-autoloads $(CAL_DIR)

.PHONY: bootstrap-clean distclean maintainer-clean

bootstrap-clean:
	find $(lisp) -name '*.elc' $(FIND_DELETE)
	rm -f $(AUTOGENEL)

distclean:
	-rm -f ./Makefile $(lisp)/loaddefs.el~

maintainer-clean: distclean bootstrap-clean
	rm -f TAGS

.PHONY: check-declare

check-declare:
	$(emacs) -l check-declare --eval '(check-declare-directory "$(lisp)")'

## This finds a lot of duplicates between foo.el and obsolete/foo.el.
check-defun-dups:
	sed -n -e '/^(defun /s/\(.\)(.*/\1/p' \
	  $$(find . -name '*.el' ! -name '.*' -print | \
	  grep -Ev '(loaddefs|ldefs-boot)\.el|obsolete') | sort | uniq -d

# Dependencies

## None of the following matters for bootstrap, which is the only way
## to ensure a correct compilation of all lisp files.
## Manually specifying dependencies of a handful of lisp files, (and
## ones that don't change very often at that) seems pretty pointless
## to me.

# https://debbugs.gnu.org/1004
# CC Mode uses a compile time macro system which causes a compile time
# dependency in cc-*.elc files on the macros in other cc-*.el and the
# version string in cc-defs.el.
$(lisp)/progmodes/cc-align.elc\
 $(lisp)/progmodes/cc-cmds.elc $(lisp)/progmodes/cc-compat.elc\
 $(lisp)/progmodes/cc-engine.elc $(lisp)/progmodes/cc-fonts.elc\
 $(lisp)/progmodes/cc-langs.elc $(lisp)/progmodes/cc-menus.elc\
 $(lisp)/progmodes/cc-mode.elc $(lisp)/progmodes/cc-styles.elc\
 $(lisp)/progmodes/cc-vars.elc: \
   $(lisp)/progmodes/cc-bytecomp.elc $(lisp)/progmodes/cc-defs.elc

$(lisp)/progmodes/cc-align.elc $(lisp)/progmodes/cc-cmds.elc: \
   $(lisp)/progmodes/cc-vars.elc $(lisp)/progmodes/cc-engine.elc

$(lisp)/progmodes/cc-compat.elc: \
   $(lisp)/progmodes/cc-vars.elc $(lisp)/progmodes/cc-styles.elc \
   $(lisp)/progmodes/cc-engine.elc

$(lisp)/progmodes/cc-defs.elc: $(lisp)/progmodes/cc-bytecomp.elc

$(lisp)/progmodes/cc-engine.elc: $(lisp)/progmodes/cc-langs.elc \
   $(lisp)/progmodes/cc-vars.elc

$(lisp)/progmodes/cc-fonts.elc: $(lisp)/progmodes/cc-langs.elc \
   $(lisp)/progmodes/cc-vars.elc $(lisp)/progmodes/cc-engine.elc

$(lisp)/progmodes/cc-langs.elc: $(lisp)/progmodes/cc-vars.elc

$(lisp)/progmodes/cc-mode.elc: $(lisp)/progmodes/cc-langs.elc \
   $(lisp)/progmodes/cc-vars.elc $(lisp)/progmodes/cc-engine.elc \
   $(lisp)/progmodes/cc-styles.elc $(lisp)/progmodes/cc-cmds.elc \
   $(lisp)/progmodes/cc-align.elc $(lisp)/progmodes/cc-menus.elc

$(lisp)/progmodes/cc-styles.elc: $(lisp)/progmodes/cc-vars.elc \
   $(lisp)/progmodes/cc-align.elc

# Makefile ends here.
