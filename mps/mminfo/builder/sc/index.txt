                                SUNPRO C
                               builder.sc
                             draft builder
                           richard 1996-06-05

Pre-processor symbol: MPS_BUILD_SC


.what: This is a commercial C compiler from Sun.

.standard: It seems to be quite a good ISO C compiler.

.epcore: EP use this compiler to build ScriptWorks for UltraSPARCs.  [I think 
they used to or were thinking about it.  Do they still?  drj 1998-11-10]

.where: Being a commercial C compiler, it doesn't come bundled with the 
operating system.  It has to be purchased separately.  On Solaris you can find 
out whether it is installed with the command:
pkginfo -l SPROcc
which will either output about a screenful of gumph if the compiler is 
installed, or say something like:
ERROR: information for "SPROcc" was not found
if the compiler is not installed.  You're stuffed if the compiler isn't 
installed.  (try zaphod.cam.harlequin.co.uk (an MM machine) or 
lizard.long.harlequin.co.uk (an EP machine))
.where.path: You usually need to add something to your path to use the SunPro C 
compiler.  Usually it lives in /opt/SUNWspro/bin so you'll need that on your 
path (and it had better be before /usr/ucb (which really ought not to be on 
your path anyway) because that has an incompatible cc command).  If it's not in 
/opt/SUNWspro/bin (unusual) then go "pkginfo -l SPROcc" again and find the 
BASEDIR directory.  It should be in SUNWspro/bin in that directory.  Try asking 
drj (person.drj) if you have any problems.

.doc: The web-based documentation is installed in /u/mm at the hall.  Try <URL: 
http://webhost.cam.harlequin.co.uk/~mm/SUNWspro/index.html>

.flags: It doesn't have as many or as varied flags as GCC, but for building the 
MPS it has:

.flags.standard: -Xc specifies ISO C.

.flags.check: -v: Perform stricter semantic and lint-like checking

.flags.optimize: -xO<n>, where n is 1-5, specifies levels of optimization. -O 
is equivalent to -xO2, and is what we use.

.flags.debug: -g, specifies debug info as for other compilers. (though it's 
level of interoperability with gdb, the favoured debugger, is questionable)

.warn: It generates some warnings not produced by our other compilers. See 
mail.nickb.1997-02-17.17-20, mail.drj.1997-02-17.17-48, 
mail.drj.1997-02-18.11-24, mail.nickb.1997-02-18.11-58 for details.

.warn.enum: It warns if one compares two enum constants from different enums. 
This is not a bad thing, but we do it in mpsi_check. We introduce casts in this 
particular case to avoid the warning.

.warn.loop: By default it warns if a loop has no entry point. This is not a bad 
thing, but our NOTREACHED macro is a loop (since it uses BEGIN ... END), so 
when the compiler can detect that NOTREACHED is not reached, we get a warning. 
There are two solutions: remove NOTREACHED which the compiler can detect or 
turn off the relevant warnings. For now the only example is some badly 
structured code in space.c, so I've rewritten it, but this is a design issue 
really [Nick B 1997-02-20]


