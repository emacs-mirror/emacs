                      DESCRIPTION OF MM CUSTOMERS
                    meeting.doc.1997-03-11.user-prof
                             incomplete doc
                             lmb 1997-04-11

INTRODUCTION

.intro: Richard Brooksby and Leah Bateman met at Longstanton House on
1997-03-11 to discuss internal and external MM customers.


THE CUSTOMER PROFILE

.doc.ch-1: The first chapter of the documentation should be focused on
the customer (which includes the user).  .profile.customer: Therefore,
this profile describes all potential customers and market segments.
.profile.customer.source: The types of customer were drawn from
analysis.product.

[Note: This would work better as a table.]


.dev-man: DEVELOPMENT MANAGER

.dev-man.tasks:
Tasks:  Decide to deploy the MPS
        Manage deployment
        Arrange licensing
        Train staff
        Control usage (e.g., prevent use of malloc)

.dev-man.training: Train staff --
.dev-man.training.presentation: May do a [high-level?]
presentation to staff.
.dev-man.training.buy-in: Has to get buy-in from staff.
.dev-man.training.materials: Needs materials for telling people
about the MM Product.

.dev-man.management: Manage deployment --
.dev-man.management.installation:,
.dev-man.management.low-hassle: Needs smooth installation and
little hassle in adapting to the MPS.  Make this clear in Chapter 1.

.dev-man.decision: Decide to deploy --
.dev-man.decision.facts: Needs facts about effort, time, cost,
and benefits.
.dev-man.decision.effort: Effort refers to installation,
adaptation, and maintenance.
.dev-man.decision.benefits: Some benefits are few bugs and
leaks; faster development; better performance.
.dev-man.decision.licensing: Need licensing summary in first
chapter and details about licensing elsewhere.

.dev-man.control: Control usage --
.dev-man.control.issues: Needs discussion of issues,
which include avoiding abuse; writing guidelines for staff; avoiding
suballocators; gathering and monitoring performance logs; and using
logs for testing.


.oem: OEMS (see also Development Manager)

.oem.tasks:
Tasks:  Decide to deploy the MPS
        Manage deployment
        Reduce risk

.oem.decision: Decide to deploy -- 

.oem.decision.advantange: Wants a competitive advantage.
.oem.decision.consulting: Wants HQN to be responsive to requirements
(e.g., good tech support, good consultancy channels; this must be
clear in Chapter 1).
.oem.decision.analysis: Needs a business-like analysis of
cost/benefit.

.oem.mgmt: Manage deployment -- 
.oem.mgmt.info:Needs information on effort required, reports on
progress and advantages, evaluation, and risk-free trial deployment,
as for EP.  .oem.mgmt.descr: Describe how this was done for EP as an
OEM:
        Define goals.
        Introduce a new layer, which is very cheap.
        Compare and analyze against goals [compare what?]. 
        Deploy.
        Dissolve layer.

.oem.risk: Reduce risk -- 
.oem.risk.adv: This includes risk-free trial deployment and also
reduction of bugs; in "Advantages", list "Less support, less rework,
and higher productivity".


.sys-int: SYSTEMS INTEGRATORS

.sys-int.need:
Needs cooperating, compatible components
      information on integration effort and time
      information on reliability
      integration of existing libraries [?]

.sys-int.comp: Compatible components -- 
The MPS isn't modular (it could be, but that would be very difficult
to implement).  Interfaces cause leaks and bugs because of protocol
differences.  .sys-int.comp.policy: System integrators need a uniform
general policy that we can provide; the documentation must explain how
GC significantly simplifies this policy.

.sys-int.effort: Integration effort -- 
The integrator won't have to insert so much glue between the
components to fix MPS incompatibilities.

.sys-int.libs: Existing libraries --
Integrators might need instructions on how to integrate existing
libraries.  .sys-int.libs.tol: We could have a "tolerant MM" that
notices problems and tries to alleviate them from the outside using GC
-- basically, ignoring what the library says about malloc and free.


.app-user: APPLICATION USERS (talking to Marketing at OEM site [?])

.app-user.desc: These customers probably won't read the documentation,
but may buy a badged product and want to read about the technology.
.app-user.req.poss: We may need badging arrangements (e.g., "Harlequin
at Heart", licensing for the badge, a pricing policy), required
acknowledgements and pointers to our Web site (ancillary marketing),
and splash screen materials.  .app-user.req.def: We definitely need
documentation for end/application users describing memory problems.
.app-user.req.tool: Do we need to develop a tool for application users?


.te: TESTING ENGINEERS (aka QA)

.te.tasks:
Tasks:  Find and report memory problems
        May have to fix memory problems (this would be a different
           person from the bug-finder)
        
.te.find: Find problems -- 
.te.var: Needs debugging varieties (full checking, partial checking,
etc.; backtraces) and to know how to use a variety to find problems
(basically, relink and run tests).

.te.report: Report problems -- 
.te.report.contents: Needs to know what to include in a report
(assertion ID, message ID, information regarding faults, helpful
information for developers, backtrace).

.te.fix: Fix problems -- 
.te.fix.diag: Needs a diagnosis based on the report and suggested
cures for the problem.


.dev: DEVELOPERS (see also Internal Customers, bit about new releases)

.dev.tasks:
Tasks:  Adapt existing code (L2)
        Develop new projects
        Optimize code to improve its quality (L3/4)
        Debug MM problems

.dev.adapt: Adapt existing code -- 
.dev.adapt.malloc: Needs specific instructions as to how to change the
use of malloc to the MPS (e.g., "If you are using malloc thus, you can
use the MPS so and improve so").
.dev.adapt.ts: Needs troubleshooting information.

.dev.dev: Develop new projects -- 
.dev.dev.prob: Needs to know how to solve design and programming
problems using the MPS.  Do we want to include design pattern doc?
.dev.dev.ts: Needs troubleshooting information.

.dev.opt: Optimize code -- 
.dev.opt.goal: The goal is to make existing code faster, smaller,
better behaved.
.dev.opt.process: The developer should set specific targets, measure
current attributes of performance, and analyze the causes of the
attributes (analogous to profiling).
.dev.opt.doc.measure: The documentation should explain how to measure
current attributes using the standard tools (e.g., time) and the MM
tool.
.dev.opt.doc.change: It should also give examples of how to analyze
and decide on a change, and how to make the change.

.dev.debug: Debug MM problems -- 
.dev.debug.te: Needs cross reference to Testing Engineer's "fix
problems" documentation.
.dev.debug.prob: May need a list of typical problems when adapting,
creating, and optimizing code.
.dev.debug.db: Needs information on using debuggers with the MPS
(Windbg, Visual C++, Borland?, gdb, adb, dbx, etc.) -- assertions,
SEGVs, etc.
.dev.debug.error: The documentation must explain that the developer
should expect to see a lot of errors (signals and faults) when using
[debugging, surely] the MPS [I forget why].
.dev.debug.struct: The MPS data structures (internal logs such as
coredumps, allocation points, expose breakpoints [?]) have to be open
enough that developers can debug easily.


.press: PRESS

.press.tasks:
Tasks:  Write reviews
        Compare products

.press.purify: The documentation should stress that the MPS IS NOT A
LEAK DETECTOR AND IS NOT A PURIFY COMPETITOR.  In fact, we hope to
work with Purify, and to have a "Compatible with Purify" sticker up
front so that they know we're not competing.

.press.data: We should supply data as per SmartHeap so that they can
do a competitive analysis.

.press.eval: The press is very much like an evaluator, except with
less time.  The documentation has to make it easy to fast-track
through an evaluation.  (This is a requirement and must be tested.)


.int: INTERNAL CUSTOMERS (see also OEMs)

.int.dylan.desc: Dylan -- GC; language runtime; advanced requirements:
finalization, etc.; new system

.int.ep.desc: EP -- GC; language runtime; general/specialized MM;
replacing their MM for purposes of maintainability

.int.ep.ml: MLWorks (useful potential customer) -- GC; advanced
requirements; GC must be specialized to replace the existing MM, which
is quite good; may be replacing their MM for purposes of flexibility


.dylan: DYLAN

.dylan.tasks:
Tasks:  Install new releases of the MPS
        Use reference information, including customizations

.dylan.install: Install new releases -- 
.dylan.install.change: Need to know new functions, deprecated
functions, obsoleted functions, etc., and how to adapt the system to
the new MPS.
.dylan.install.cons: The documentation must explain the consequences
of each change (release notes; maybe also in appendix to the manual);
how to check compatibility using mps_version; and the version of the
documentation.

.dylan.ref: Use reference information -- 
.dylan.ref.doc.special: How should we do specialized documentation?
Simply as an addition to the manual?  The doc plan should mention this
as a contingency.  Hopefully, the only specialized documentation will
be the pool classes.

.dylan.as: Andy Sizer -- 
.dylan.as.feas: Say what's feasible for the MM Group to put together,
and what's not.
.dylan.as.plans: Say what the MM Group has thought about but hasn't
implemented, or has thought about and plans to implement (i.e., future
plans).
.dylan.as.risk.reduc: This reduces the risk of investment by allowing
the risk of change to be assessed and allowing the customers to plan
and take advantage of new features quickly.


.ep.dtb: EP (DTB)

.ep.dtb.bugs: Wants a list of known bugs.
.ep.dtb.doc-plan: Want to see doc plan; we should send it to all
internal customers.


.ml.db: MLWORKS (Dave Berry)

.ml.db.assess: Performance, risk assessment, interface
.ml.db.alloc: Specify own allocation sequences for invoking the MPS
.ml.db.prof: Need profiling information (attribute control[?]) from
runtime system
.ml.db.facil: Need information on what sort of facilities are possible
(e.g., saying when to GC*, how much memory to use, profile information
from MPS itself, data types, version control, signal handling*,
interaction with threads*)
*general, but may have details that are particular to MLWorks


.random: RANDOM THOUGHTS

.product.req.new: New product requirement -- Supply log dumper to
customers for use with their own QA groups.  The dumper should provide
meaningful diffs of logs.

.doc.ch-1.mktg: Goal: Chapter 1 is the most universal chapter across
the customer list.  It should replace marketing materials.

.doc.chart: Use standard notation and process charts to indicate how
each type of customer should use the MM.

