             NOTES FROM PLANNING MEETING, 1997-04-09, BYRE
                       meeting.general.1997-04-09
                               draft doc
                             drj 1997-04-14

INTRODUCTION

.intro: gavinm, drj, richard, nickb, ptw met to discuss and share current 
status and future plans for the group's projects.

.source: mail.richard.1997-04-07.12-07(0) sets the agenda for this meeting:

.agenda:
  10:00  Project Status and Planning
    - identify current state of all projects
    - identify major risks and work to do
    - analyse risks and design solutions
    - plan implementation of solutions

.projects:
The following list of projects was identified:
- Product
- EPCore
- Dylan
- ML
- Web
- Process
- LFCS
- UKC
- Book
- Tools
- Consulting
(11 in total!)


PRODUCT (richard)

.product: The Product was discussed.


Status

.product.status: Only the core (MM Core) is implemented.


Risks

.product.risk: The following risks were identified:
.product.risk.reqless: There is no requirements specification.
.product.risk.bang: A Big Bang delivery approach.
.product.risk.malloc: Existing bugs in various system's mallocs may/will need 
emulating.
.product.risk.malloc.freefree: Emulate the double free behaviour.
.product.risk.malloc.realloc: Emulate the realloc behaviour (does not move if 
gets smaller, for example).
.product.risk.malloc.bugs: other bugs.
.product.risk.malloc.accept: We may not be accepted due to our unforgiving 
behaviour with respect to interface abuses.


Solutions

.product.sol.incr: Incremental delivery could used to solve 
.product.risk.bang.  What is the minimal release of the product that can be 
made?  Perhaps we can deliver some sub-product thing to UKC.
.product.sol.incr.baseline.deliver: Deliver a baseline product to someone.  
Candidates are UKC, LFCS, ourselves, external partner, clive, jblishen.
.product.sol.incr.baseline: Malloc replacement, doc, disk.
.product.sol.malloc: Discussion of how yukky it would be to emulate various 
mallocs.
.product.sol.malloc.switchable: Malloc behaviour (with respect to bug 
emulation) could be made switchable.
.product.sol.malloc.switchable.link: At link time by linking with different 
libraries.
.product.sol.malloc.switchable.pref: At run time by epxressing behaviour with 
preferences.
.product.sol.malloc.forgive: Be more forgiving of users' interface abuses.
.product.sol.malloc.forgive.less: Give use control about how forgiving the 
library should be (this is old yukky code, be very forgiving; this is brand new 
ANSI compliant code, be very stringent).
.product.sol.malloc.forgive.aver: One of of thinking how to make system more 
tolerant is to consider what happens if AVER returns when condition is not met.


Plan

.product.plan: Assemble the description of the baseline product.


EPCORE (nickb)

.epcore: The EPCore project was discussed.
.epcore.def.cutover: "cutover" is used in the EPCore project to mean that point 
at which EP code uses features and interfaces of the new MM that are not 
available in the "layered" release.  This is significant because at that point 
EP cannot easily go back to their old system.


Status

.epcore.status: MM is in use by most of EP in the guise of the "Trapping" 
release.  pbarada is believed to not be using the MM, but using the old 
system.  MM is available for "cutover" at any time EP desire.


Risks

.epcore.risk: The following risks were identified:
.epcore.risk.cutover: cutover is an inherent risk, it is a pointer of no-return.
.epcore.risk.cutover.1: We could fail after cutover has been made and leave no 
way for EP to return.
.epcore.risk.cutover.2: cutover happens too soon, deliberately or by accident.
.epcore.risk.urgent: GC becomes a super-urgent requirement for ScriptWorks (by 
important customer demand for example).


Solutions

.epcore.sol.approve: To solve .epcore.risk.cutover we should have kap's (EP 
divman) approval and make him very aware of the risks and problems.
.epcore.sol.slow: Delay the dissolution of the glue layer, thereby delaying 
cutover.
.epcore.sol.plan: To solve .epcore.risk.urgent approve current plan with EP.
.epcore.sol.contingency: To solve .epcore.risk.urgent create a contingency plan 
that will allow us to solve GC requirement perhaps with a temporary, expedient, 
throw-away solution.


Plan

.epcore.plan.ping: Ping pbarada to see if new release suits him.
.epcore.plan.beta-4: Trapping beta 4 will be released on Wednesday [1997-04-16].
.epcore.plan.gc: GC will come later, in the form of a PSVM pool.
.epcore.plan.gc.req: PSVM has the following requirements:
.epcore.plan.gc.req.save-restore: Save and Restore need to be fast.
.epcore.plan.gc.req.gc: it is okay for GC to be slow.
.epcore.plan.gc.req.stack: The GC has to maintain the stack-like behaviour of 
save/restore.
.epcore.plan.gc.psvm: Will have a PSVM pool with specific methods for 
operations like save and restore.
.epcore.plan.gc.0: Create design and have it reviewed.
.epcore.plan.gc.1: Emulate / absorb existing functionality.
.epcore.plan.gc.2: Add root finding code, with checks, and functions to search 
memory for likely hidden roots.
.epcore.plan.gc.3: Full GC, GC will probably be mark-sliding compacting GC.
.epcore.plan.glue: During and after work for the GC release, the glue code will 
gradually dissolve.
.epcore.plan.glue.debug: Functionality of debug code from glue will go to MM.
.epcore.plan.glue.psvm: Functionality of PSVM code from glue will go to MM.
.epcore.plan.glue.promise: Functionality of promises in glue may go to MM.
.epcore.plan.glue.lomem: Functionality of low memory code in glue may go to MM.
.epcore.plan.glue.boilerplate: "Functionality" of boilerplate code in glue will 
be left with EP (RIP).
.epcore.plan.os: Better OS intergration (using VM arenas / sparse maps / etc).
.epcore.plan.realloc: More efficient realloc functionality.
.epcore.plan.ap: Add more support for using allocation points (more protocols 
on APs?).


DYLAN (drj)

.dylan: The Dylan project was discussed.


Status

.dylan.status: release.dylan.buffalo.patch.2 has been made to DylanWorks, the 
purpose was to make Dylan's MM more maintainable by us.  It is incremental, 
thread-safe, 3-space (big), slow.


Risks

.dylan.risk.surprise: Surprise Dylan release (remember the "running inside 
Netscape for Object World" episode).
.dylan.risk.underperforms: Performance is too bad.  Too slow, or too big.


Solutions

.dylan.sol.pm: To solve .dylan.risk.suprise we should talk to Dylan Product 
Manager (jblishen).
.dylan.sol.opt: To solve .dylan.risk.underperforms, spend an early phase on 
optimization.  For example, just after / before / around the sunflower release 
(version.dylan.sunflower).


Plan

.dylan.req: Dylan has the following major outstanding requirements:
- Weak Tables
- Performance
- Finalization
- debugger support (for the dylan debugger)
- wrapper pool
- debugging (to make it easy to debug MM problems)
- messaging interface (low memory, and finalization)
- large heap, large objects
.dylan.plan.sunflower: Release sunflower 1997-04-21, it will have weak tables 
and generations.
.dylan.plan.honeybee: Release honeybee 1997-05-06, it will have finalization 
(and a messaging interface).
.dylan.plan.cottonwood: Release cottonwood sometime, it will have debugger 
support, perhaps.
.dylan.plan.vague: Then other releases, probably addressing wrapper pool first.


ML (nickb)

.ml: The ML project was discussed.


Status

.ml.status: MLWorks 1.0 (using the bhaji release of MM/ML) was shipped at about 
Xmas.  MLWorks 1.0r1 (using the bhuna release of MM/ML) was released in 
February (UltraSparc register windows fix).  MLWorks 1.0r2 (using the korma 
release of MM/ML) may be released "soon" (bug-fixing release). MLWorks 1.0r3 
(using the korma release of MM/ML) may be release this summer (Linux release).  
MLWorks 1.1 will be released 1997Q4, it will have the "tikka" release.  Next 
release after tikka is "samosa".


Risks

.ml.risk.popular: ML might suddently become popular and therefore important.


Solutions

.ml.sol.none: No solutions were identified for this risk.


Plan

.ml.req.tikka: Tikka has the following requirements:
- Don't use / assume fixed addresses on UNIX arenas.
- Push args on stack (instead of heap) for intel platforms (modifications to 
stack scan / profile).
- use a trap / interrupt to enter GC on x86 platforms (if that is profitable).
.ml.req.samosa: Samosa has the following requirements (some of the earlier ones 
may go into tikka, some of the later ones may go into the next release after 
samosa).
- use trap / interrupt to enter GC for MIPS platforms.
- non-GC registers.
- unboxing, unboxed slots.
.ml.req.vague: Subsequent releases will have the following requirements:
- don't grab so much address space
- "new" GC (nickb's adaptive stuff)
- finalization
- auto-extending to-space
- locatives / interior pointers
- entry list / entry buffers
- live register map


WEB (gavinm)

.web: The Web project was discussed.


Status

.web.status: Harvestman was released 1997-03-26.  Trapdoor due will be released 
1997-05-28.


Risks

.web.risk.boring: Lack of interest in site.
.web.risk.annoy: We could annoy someone important.


Solutions

.web.sol.sexy: to solve .web.risk.boring add sexy 3D animations to site.
.web.sol.survey: to solve .web.risk.boring survey people to find out what they 
think of site / how it could be improved.
.web.sol.trawl: Trawl net looking for situations where we could usefully 
respond (to usenet postings for example).


Plan

.web.plan.trapdoor: Trapdoor will meet the following requirements:
- Improved Quality
- Perhaps have GC FAQ [sidenote about legal booby trap]
- Improved response to feedback
- Be up to date
- glossary will be (more) complete
.web.plan.money: Next release will be called money, and meet the following 
requirements:
- Have more articles
- Have a documented process for maintaining web (not really a requirement of 
this release).
- Removed dependence on gavinm (see above).
- search engines [eh ??]
- larger bibliography
- documented design.


LFCS (richard)

.lfcs: The LFCS collaboration was discussed.


Status

.lfcs.status: Paul Jackson <pbj@dcs.ed.ac.uk> and Healf Gogen 
<hhg@dcs.ed.ac.uk> want to publish something (a paper).  We have Paul's model 
which is intended to not have any secrets.  drj is more active in LFCS work.  
LFCS are not interested in numbers (preformance modelling etc).

Plan

.lfcs.plan: The future is hazy.


UKC (richard)

.ukc: The UKC (Richard Jones et al) collaboration was discussed.


Status

.ukc.status: Richard has met Richard Jones and Simon Thompson.  They are 
interested in collaboration.  They are interested in cost and measurements and 
things like that.


PROCESS (gavinm)

.process: The Process project was discussed.


Status

.process.status: Process is highly developed in some areas and porrly developed 
in others.  We no have a mapping of our process onto CMM or is that PML 
(Process Maturity Levels).  Our use of Darwin corresponds to the "Repeatable" 
level, aspects of our review process corresponds to the "Defined" level.


Risks

.process.risk.suck: Sucks up too much time
.process.risk.mockery: The group gets laughed at for using all these silly 
processes and we get fired.


Solutions

.process.sol.bound: Time spent on improving process should be only 6% squared.
.process.sol.buy-in: To solve .process.risk.mockery get management buy-in for 
our level of use of processes.
.process.sol.secret: Keep our use of process secret.
.process.sol.delivery: Delivery the right goods and on time.
.process.sol.explicit: Be explicit about how much time we save by applying 
process.
.process.sol.market: Market the use of process so that its image is improved 
(and more people use it!).


Plan

.process.plan.baseline: There will be a baseline release of the process.  It is 
expected to take about 40 hours work.  It will document how process impacts the 
following:
- Configuration management
- Developement
- Inspection
- Infosys
- Process
- The rest (this will be a placeholder for parts where we have no process).
It will also document any generalizations of our existing process that could be 
made.

.process.plan.repeatable There will be a repeatable release (see 
meeting.general.1997-03-19) of the process.  With:
- Commitment discipline.
- Management system
- yada yada

.process.plan.vague: Then "defined", "managed", "optimized"

.process.plan.export: The process may need a plan / modification of goals for 
exporting to other groups.


THE REST

.rest.not: The Book, Tools, and Consulting were not discussed.

