                 MM/ML REQUIREMENTS MEETING 1996-07-10
                         meeting.ml.1996-07-10
                               draft doc
                           gavinm 1996-07-12

INTRODUCTION

.intro: Richard Brooksby <richard>, Gavin Matthews <gavinm>, and Nick Barnes 
<nickb> met Jon Thackray <jont> and Dave Berry <daveb> to discuss MM/ML 
requirements for the full MLWorks release and beyond.

.ref: Background material:
  - Previous meeting: meeting.ml.1996-04-23,
  - Notes from a relevant ML meeting: mail.nickb.1996-07-11.14-56.


AGENDA

  1. Review previous meeting notes (meeting.ml.1996-04-24).
  2. Brainstorm of ideas for full release.
  3. Derivation requirements for full release.
  4. Discussion of ideas for beyond the full release.
  5. Process.


REVIEW PREVIOUS MEETING NOTES


Release Schedule

.rel: The releases discussed in meeting.ml.1996-04-23.rel.* have all slipped by 
about a month.

.rel.beta.limited: This slipped to the early/end of June.  In consequence, we 
can't expect effective feedback yet.

.rel.beta.open: The open beta release has now moved beyond the end of July.

.rel.full: Management still want a full release this calendar year.


Requirements

.req: We discussed the requirements from meeting.ml.1996-04-23.

.req.small: We can't evaluate this properly yet.  We need feedback to decide; 
we should wait and see.

.req.out: NickB has done some work on this:
    - Replaced the old behaviour with a function indirection (for GUI support)
    - He has added a control switch for this behaviour.
    - He didn't write the dialog for the GUI because he didn't think it was our 
responsibility.
    - There was an outstanding problem reported by DaveB whereby MLWorks died 
at an
out-of-memory prompt.
    - There was still a problem with back-tracing whereby MLWorks didn't print 
a backtrace for DaveB when it died.

.req.mach-fix: NickB reported that this was done.

.req.defensive: Nick has done some work on this:
  .req.defensive.req: The requirements are unclear
  .req.defensive.work: There is more work to be done
  .req.defensive.list: NickB needs to make a list of things to be done
  .req.defensive.gc: He needs to make backtrace work under GC
  .req.defensive.linux: There are other problems with backtrace under Linux. 
JonT had a backtrace generating a recursive SEGV; this isn't really 
Linux-specific. 

.req.mips: NickB has improved but not fixed this:
    - NickB had fixed a bad free in X by protecting free() with signature 
checking against attempts to free unallocated blocks.
    - The beta version now includes MIPS in its platforms
    - malloc/free reentrancy requires the locking out of signal handlers.  
StephenB and NickB understand a solution, but have not implemented it.  See 
.req.reentrant.

.req.small.pc: NickB was able to do this with a list-handling exercise from a 
book (book.humphrey89) but was unable to compile a Mandlebrot program, mainly 
because of the X support.  Richard commented that fiddling with the VM setting 
solved many problems, and hoped it wouldn't be a big problem.  We should expect 
some feedback on this.  See .req.small.

.req.pause: Nick has a prototype for a new GC to fix this, but hasn't checked 
it in.  The new GC will mostly meet this requirement.  There will be no more 
very long pauses.  There will be a reduction is unacceptable pauses.  The code 
needs a thorough exercise.  JonT is happy with this.


Provisions for Transition

.transition: NickB has spent time in Manchester helping to debug random bus 
errors with StephenB.

  .transition.writing: NickB has some writings that he ought to pass on, 
including to MM.

  .transition.stephenb-happy: NickB needs to ask StephenB if he's happy.


Levels of Response

.level: The levels described in meeting.ml.1996-04-23.level.* are still 
untested but seem about right.


General Maintenance

.maint: The estimates in meeting.ml.1996-04-23.maint.* seem OK.


Old Actions

.old-act.mark: Not done.

.old-act.list: Not done.

.old-act.doc: (Document approaches to random bus errors)  Done.

.old.mail: (mm-ml) Done.


IDEAS FOR FULL RELEASE

.idea.gc: ML need a better GC and more control.  They will be getting a new GC 
from NickB.

.idea.checking: ML need more debugging in the run-time system for undeclared 
roots.  This involves:
  - Consistency checks
  - The hardest random bus errors are antique non-root pointers into the heap, 
surviving one or more GCs and then being dereferenced.
  - we need to prioritize bugs
  - The runtime allocator could look at the nearby stack for undeclared roots; 
this would be a cheap check.

.idea.win32-image: The Win32 image size is too big.  Hello world is 5Mb.  It 
needs to be comparable with Unix [which is currently about 60Kb].
  - This is a well-understood problem but we haven't yet developed a fix
  - Our image sizes need to be both consistent and small

.idea.unwind: We need to be able to unwind past declared roots.
  - Raise sends control to a handler higher than the declared root  and the 
root is therefore not retracted; this leads to a bus error.
  - This problem is well-understood and shouldn't be too hard to fix.
  - MM need to provide root retraction; ML need to call it.

.idea.diagnosis: ML need better diagnosis of serious problems.
  - The backtrace in GC needs to be more robust (see .req.defensive.gc) and not 
cause problems in itself.
  - We need to broaden and improve backtrace

.idea.protection: We need to be more defensive.  E.g.:
  - Negative non-aligned pointers in a GC-able slot cause a bus error.  This 
could cheaply be ignored or debugged.
  - Can we guarantee that the GC will never cause a fatal error or bus error?  
Only with expensive checks.  Even so, we could add more checks.

.idea.reentrant: ML need reentrant signal handling.  This isn't really memory 
management, but NickB knows how to solve it.  He'll spend some time on this, 
working with StephenB.

.idea.user-image: We considered user assistance with image size.
  - We could extend explorer into something users could use.
  - We could do a little work for something that would explain large images.
  - Essentially this is part of the performance tuning toolkit; the exact 
invocation is not important.
  - The user needs to be able to reduce the image size with one day's work as 
well as we could.

.idea.heap-profile: The heap profiling is not very useful.
  - Is this a problem with the data provided or knowing what to do with it?
  - We will produce an example of a bad program and try it on the student.

.idea.finalization: Stream finalization would help with Windows file handle 
problems. 
  - We could expose weak arrays to users
  - JonT isn't happy about doing general finalization in V1.
  - We shouldn't do general finalization in released ML, but could add stream 
finalization to the internal stuff.
  - Punt this for the moment.

.idea.float-arrays: It would be nice to have inline float arrays, but this 
isn't desperate for release.  This will require MM support if a new format is 
required.  We're under pressure from small PC users who would rather use a bad 
language than buy memory.  There is a speed issue.  Punt this for the moment.

.idea.working-set: We need to reduce the working set size and total image 
size.  The new GC helps.  Mandlebrot wouldn't build on a 32Mb student Sun box.  
What about the PC?  The options need to be set better; we need better 
documentation.

.idea.bug-finding: We need better bug finding.  It takes NickB 2-3 man-hours to 
find (i.e. identify but not fix) a typical random bus error.  Hard examples 
take 8-16 man-hours.  Unreproducable ones are hard to quantify but probably 
take longer.  Our target for this is that MM software shall not prevent the 
identification of bus error bugs within one man-hour.


REQUIREMENTS FOR FULL RELEASE

.req.working-set: Reduce the size of the working set to below 32Mb for 
compiling and running the "Mandelbrot" examine, so that it works on a 
"student-sized" Sun workstation.  It should also work on a PC, modulo the 
problems of porting it from X.

.req.bug-finding: Reduce the time taken for an MLWorks to identify a "random 
bus-error" bug to below one hour.

.req.user-image: With one day's effort, an end user should be able to achieve 
delivered image sizes comparable to those an MLWorker could.

.req.stream-final: It would be nice to facilitate stream finalization.

.req.float-arrays: It would be nice to facilitate float arrays.


BEYOND THE FULL RELEASE

.future: There was some discussion of the future directions of MLWorks beyond 
version 1.

.future.mutiple-images: The current system of either loading modules which run 
their setup functions or loading a single image which is a dump of the heap is 
too coarse as you require many images to represent the possible module sets.  
Instead, it would be nice to be able to load several images and "merge" the 
heaps.

.future.incrementality: The American ice hockey puck company require to do 
real-time image processing in ML.  Is real-time really one of their 
requirements?  We need to identify their real requirements.

.future.interface: We'll need to interface with other GC languages, such as 
Dylan.  Richard says this would be best achieved by swapping to MPS.  Richard 
also said this was mainly about being polite.

.future.foreign: We discussed native object files and better foreign 
interfaces.  It wasn't clear what we wanted to do here.  We need to know about 
interoperability requirements.  We should do a feasibility study on the MPS 
swap.

.future.til: DaveB mentioned the Typed Intermediate Language as a compilation 
technology for ML with tag-free GC.


PROCESS

.review: ML code review was discussed.  Richard offered the services of the MM 
group to help with this.


ACTIONS

.act.mark: (NickB to mark areas of code which mustn't be modified without 
consulting MM)  Still needs doing but not urgent.

.act.list: (NickB to list files which we are going to maintain)  Still needs 
doing but not urgent.

.act.defensive-list: See .req.defensive.

.act.transition.writing: See .transition.writing.

.act.transtition.stephenb-happy: See .transitition.stephenb-happy.

.act.heap-profile: See .req.heap-profile.

.act.write-up: The MM Group will update goal.ml and req.ml and have them 
approved by JonT.

