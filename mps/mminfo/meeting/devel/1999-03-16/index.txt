             NOTES FROM MM DEVELOPMENT AND PRODUCT MEETING
                        meeting.devel.1999-03-16
                             incomplete doc
                            tony 1999-03-18

Start 1999-03-16 11:33 GMT

Telecon: Andy Sizer <andys>, Dave Berry <daveb>, David Jones <drj>, Pekka
Pirinen <pekka>, Richard Tucker <rit>, Tony Mann <tony>.


NEWS

tony: Dr Dobbs is going ahead. I've suggested a timescale of 2 months as
something we might be able to achieve. They're happy with that. We're
likely to appear as what they call a "feature article" (as opposed to a
"column article") although there's a possibility we'll end up in "algorithm
alley". I've had a request from Andrew Shalit that we put in a big plug for
Dylan, and use Dylan for any example code. But we have to think about that.
MM code may need to be lower-level but there may be opportunities for
showing some Dylan usage of the GC.

tony: We did review of design.mps.splay last week. More in work practices.


RELEASES

* Java

tony: drj's making progress on that. Approximately on track. drj?

drj: It's going ok. My comprehension of the Sun code has increased a lot.
This week I should have some idea of what the glue layer between Sun code
and MPS is going to look like.


* brisling.4

tony: Pekka's making progress. Roughly on track. Pekka?

pekka: Yes, it'll be ok, unless I get a virus from drj!


* kinglet

tony: I'm just coming to end of work on sunset on segments. I'll ask rit if
he'll set up some automatic testing of that tonight ...

rit: Sure.

tony: ... and then pass to drj for approval later. drj, is that going to be
problematic -- that Java work's obviously more important.

drj: Hmm, could be difficult.

tony: Well, it's not urgent.

daveb: What does this release offer Dylan?

tony: Well really it's a cleanup of the insides of MPS which will help both
Dylan and EP in the future.


* web.diadem

tony: Goal is to get this out for the CD pressings in April. One question
is how much time can we all spend doing changes to the text in the
glossary. I'm not quite sure what the answer is but clearly there's not
much time between now and then.

pekka: There are a number of things in there that are embarassingly
inadequate. But then, most of them have been that way for a while, so we
can survive it if we don't have time. I do wish you'd think of doing one or
two small things in odd moments as a change from your usual work. Please
let me know. I think I will be able to find some time after brisling.4

rit: Is there any need for new material in the glossary to correspond to
the new features in Java 1.2?

pekka: Ah yes, I was planning to talk about that. I noticed yesterday that
our entry from strong reference is basically wrong. (It's more akin to
strongly reachable). I think we should fix that, and possibly -- given that
we've spent some time thinking about what the Java spec means -- put some
more reachability definitions in the glossary. drj?

drj: Yes, although in general we've shied away from putting
language-specific entries in there. Does the glossary define reachability?
We should perhaps have that and its variants; we could expand it a bit and
mention that Java has these extra concepts.

pekka: That would be nice. Volunteers?

drj: I'll see what I can do, about that and the strong reference definition.

pekka: Thanks.


* qa ...

tony: rit, do you want to say anything?

rit: Not much. I've got various Java functional and performance tests ready
for the JVM release. I'm writing functional tests for SAC's in brisling.4,
but haven't got much farther than a list of ideas yet. I need to talk to
pekka about what the interface will be like. As far as I can see, the plan
includes sufficient time for QA, so I don't expect any big problems.

PLAN

tony: I updated it this morning, but I'm not sure if you'll be able to see
it. I get problems contacting webhost.

rit: Whereas I can see only the old plan, even when I reload.

tony: Main changes: added a new milestone for the web.diadem release, and
scheduled a task for pekka to get that ready. I haven't scheduled other
tasks for writing glossary entries, on the assumption that it'll be done as
background tasks.

tony: I've added a task for the Dr Dobbs article. Currently assigned only
to me, but other people have offered to help. So I'll try to get an
outline first, then we can talk about it.

tony: Added a task for the VXWorks port. Linked to release.epcore.chub, but
that's arbitrary as we don't have any scheduling information.

tony: I had a request to change the colour of completed tasks -- a good
idea I thought, but I haven't found how to do it.

andys: I used to be able to do that...

tony: I guess no-one will be able to give any feedback now as you can't see
the plan, but please mail or tell me your comments when you can see it.


WORK PRACTICES

* review

tony: Had review of design.mps.splay. Managed to log 120 issues, which is
pretty staggering. From drj's estimates of past history, that will
correspond to between 10 and 40 hours of edits. I think that's an
overestimate as many issues shared a common theme. It does raise an issue
though -- how do we make sure edits get done in general? Last week we
talked about having a rule about edits getting done by the next week. If
we're going to have 40 hours of edits (I don't think so in this case)
that's not practical, so we need something more flexible.

daveb: Need to do a cost-benefit analysis -- keep track of how many hours
are spent doing things. And concentrate on major defects.

drj: Yes. Actually I agree with tony -- I doubt it will take 40 hours. We
do have a cost-benefit analysis, at the end of the review.

pekka: I think within a week we should be able to either dispose of all the
issues or identify what needs doing and schedule them. The unproductive
thing is if we just leave them handing indefinitely.

tony: Yes. I'm still concerned that one week is ambitious.

pekka: I don't think so, in principle.

tony: I guess we can see how it goes. I would prefer to have something like
two weeks though. I'm happy to start with one week and see how well we do,
but I'm personally sceptical.

daveb: Perhaps if whoever is the editor spends the day after the review
looking at the edits.

pekka: It's presumably easier to do it soon after the review.

tony: Yes.

rit: I like the idea of having a regular time when we do the edits, like
having a regular time for doing the review logging.

tony, pekka: Don't agree. We don't in general micromanage individual
people's time like that.

daveb: Tony, how much have you managed so far?

tony: I've spent probably no more an hour so far.

daveb: Ok, so maybe if the editor plans their week to include a day's worth
of work on the edits.

pekka: Yes, that's more practical that just saying it's got to be done by then.

tony: Ok, so we should try and do it within a week, and the editor has to
be aware that they must schedule time to do that.

tony: Do we have a plan for the next review?

drj: I don't think so. I'm not sure there's time given the current
schedules? What do other people think?

daveb: Last week we said that probably next week was the really busy time.
Are we now talking about missing two weeks?

tony: Hmm. If we do have a review tomorrow, one way to keep the pressure
off people who are really busy is to choose something else that I would be
the editor for.

rit: I've never done it, but I'd volunteer to organise the review if that
will save drj time.

drj: I estimate it took me about 1 day last time (1/2 day for preparation,
1/2 day in actual review).

drj: I'm just trying to find pekka's list of suggested things to review.
It's something we can talk about after the meeting, I think.

tony: Maybe the bit table design or code?

pekka: I'd like to point out that I missed the CBS out of the list when I
wrote it up. It's not ready for review at the moment, but obviously it's a
major candidate for being reviewed.


* Darwin for Dylan

pekka: Are we going to start rating requests in our database?

drj: I think we should.

rit: Me too. Should the originator of the request do it, or does it come later?

drj: Either of those. Who does it in Dylan?

daveb: It can be anybody. Probably most useful if it's the originator of
the request, but could happen at the defining stage.

drj: Does Dylan have a product manager that's distinct from you?

daveb: No, actually QA own requests when they're created. Once they're
defined then they're handed off to a particular developer.

rit: So different developers do the scheduling?

daveb: No, the scheduling's not really done within Darwin. Assigning the
requests to developers helps the schedulers decide what can be done. In MM,
at least from this distance, your skills seem a lot more transferable.

pekka: I think the whole workflow has been designed to let the product
manager manage the requests and the developers manage the changes.

daveb: That's the original design, but it's quite possible to bypass it. In
fact even in DP&P product managers don't use all of the control flow.

rit: There's a problem in MM evolution: new requests get assigned to Gavin.
Who should they be assigned to?

daveb: Could be anyone.

pekks: ... as long as it's not gavin.

rit: So I can just choose at random for each request.

pekka: Yes.

rit: Ok. So if requests are owned by various different developers, how do
we schedule changes for releases?

tony: Well, e.g. when requests are discussed in these meetings, or when
individual developers discuss their schedules.

drj: Dave, do you have an idea how long it took to design the Dylan rating
system?

daveb: Maybe a morning to come up with the first draft, based on what was
already in Dylan bugs. The difficulty was in getting feedback. Could be
easier here as we're already using Darwin. Feedback is very useful. You
have have a look in Dylan evolution by entering some dummy requests, and
going view->refresh to see the ratings. The rating system is not what
people are complaining about, at least at the moment.


Finish at 12:15.

