             NOTES FROM MM DEVELOPMENT AND PRODUCT MEETING
                        meeting.devel.1999-03-30
                             incomplete doc
                            tony 1999-03-31

Telecon: Andy Sizer <andys>, Dave Berry <daveb>, Pekka
Pirinen <pekka>, Richard Tucker <rit>, Tony Mann <tony>.

David Jones <drj> was absent due to illness.

NEWS

tony: No news not related to releases.

RELEASES

+ release.epcore.brisling.4

tony: Release is imminent. Eric's tried it already, and got some profiling
results from IRIX. They've been a bit of a challenge to interpret, if only
because the profiler has some idiosyncrasies. Hope is that brisling.4 will
get the green light from QA.

rit: Yes. In fact I'm prepared to give it the green light now, for all
platforms except the new linux port (which I'm still testing). I'm happy
that functionally it's ok, and it's not slower than previous releases.

rit: But the segregated allocation cache hasn't brought us the benefits we
originally hoped, so whether epcore will want to use it, or
release.epcore.brisling.4 in general, is up to them.

pekka: I'm going to try to persuade them to use brisling.4. It could be
awkward if we end up having to support old releases. I'm meeting them at
13:00 to discuss this and any other matters arising.

andys: Why didn't we get the speedup we were expecting?

tony: Well, originally we were going on some statistics from Andy Cave.
Recently it turned out the improvement he saw was less than we thought,
because what was reported was the combined improvement from using the cache
_and_ a change from MVFF to MV pool.

tony: Possibly also he was able to make it more efficient than ours by
putting it higher up the call tree...

rit: No, he didn't do that, he did it via the fntable->alloc method, just
like other SW pool types.

andys: Was the SAC something we were going to do anyway?

tony: Yes, we'd considered it, but this made it much more urgent.

rit: One thing we don't know is what version of SW Andy Cave used. We know
that at some point the amount of allocation in the colour pool was reduced,
but I thought that was before his experiments.

pekka: I'm not so sure.

rit: And the allocation in the colour pool has certainly changed again
since then, but we don't know how much.

andys: If you're talking about improvements around the 1% mark, then given
the metering tools we've got that's pretty hard to measure.

tony: Yes, rit did some tests outside SW, replaying allocation logs...

rit: ... and did find a measurable improvement: 1-2 seconds in a 12 second
test, of which 10 seconds was spent processing the log file anyway. I did
see an improvement of 1 second in _a_ SW job (which was less than 1% of
total time), but not really a measurable general improvement. The speedup
in a selection of six biggish jobs (QAtrouble) with a 6-colour output
device was less than the random variation we'd expect in timings.

tony: Another possible benefit of the SAC is that SW could get the
performance they need but use a more stable pool underneath: e.g. SAC on
top of MVFF.

rit: Yes, I've done some experiments using SW with an SAC on top of MVFF
for the colour pool. And I saw that compared to using just MVFF there was a
substantial performance improvement. But MVFF+SAC was about 0.5% slower
than MV (with no cache) (whereas MVFF on its own was about 5% worse).

andys: In general, what kinds of performance changes do you expect to see
when you change SW memory manager?

tony: Generally quite small ones, as MM shouldn't be taking that much time
as a whole.

andys: I was thinking that if three people are spending a day looking at
this kind of thing, it would be more worthwhile getting a better profiler.

rit: More worthwhile perhaps, but harder to arrange 8-).

pekka: Yes -- I think even dtb couldn't get a purchase order through for
Visual Quantify, which EP looked at and thought was a good tool.


+ release.java.amaretto

tony: drj isn't here to give an update, so I don't have much to say. As far
as I'm aware, no big change since last week.


+ release.web.diadem

pekka: Nothing's happened since last week except that the date for
preliminary release is now Easter Monday. That's when we have to give them
the list of files. The final release is a week from that. (These dates are
from Gary Palter.) I don't want too many last minute changes. It's
relatively uncomplicated, and can't be broken by changing one file, but it
would be better if things were done this week rather than next week.

pekka: In particular, I raised this issue about consultancy and the press
release. but we haven't heard anything from people on the business side
yet. I guess if we don't hear anything, I'm going to put in a new page and
summarise the press release myself.

tony: Is that something that could be raised at the quartet meeting?

daveb: Yes, I'll bring it up. I hadn't realised it was still outstanding.



PLAN

tony: I've updated the plan. Changes are minor and reflect what's happened
over the last week.


WORK PRACTICES

tony: We said last week that we'd decide by email what we'd review this
week. But we haven't. Anyone have any suggestions? Do we think we should do
a review this week?

rit: I think we should do a review this week.

tony: I don't know if we'll see drj today, but if he comes in we'll talk to
him about it.

tony: I've done something like 20 or 25 hours of edits on the splay tree
design now. Part of that was down to unfamiliarity with the document and
the process itself. I've nearly finished it now (say 3 or 4 hours to go),
and I hope to get the remaining issues cracked today.

daveb: How have you found the editing process? Has it been worthwhile?

tony: Well, it was a design document, and the changes in practice to the
design aren't substantial -- they're mostly presentational. The document
will definitely be better at the end of it, but whether it will have been
worth 20 hours, I don't know. I have my doubts.

andys: Yeah, especially since it was largely a derivative document -- a lot
of it was just restating things in the Sleator paper.

tony: I think there may be some secondary benefits which are worth noting.
It's been a learning experience for me as it's the first review edit I've
done. It's got everyone thinking about reviews again.

rit: Would like to see better usage documentation.

pekka: We should probably put more effort into documenting how to use things
than into documenting minor code details (which are best placed as comments 
in the code anyhow).

andys: Out of interest, how independent is this implementation of splay
trees from the rest of MPS? Could it be used elsewhere?

tony: It uses MPS types, but otherwise it would be quite straightforward to
get it into reusable form.

pekka: BTW, there's the old HQN Framework, which contains
platform-independent stuff from the SW gui. There's documentation &c. Those
people separated their own code into the framework and the SW-specific
code, but the didn't instigate a process to maintain and re-use it.

daveb: Several software engineering books recommend having a librarian.

andys: Yes. I guess that would be more than just a group thing; more of a
company thing.


AOB

andys: Result about call-sites. I'm pretty confident we can represent all
the call-site stack-maps for the Dylan compiler and DUIM in about 100kB.
That's pretty competitive with other stuff that's been described. Ole
Agesen reports a space overhead of 50% on JVM code size for a similar thing
in Java. We're on less than 1%!

daveb: How did you manage to shrink it so much?

andys: Aha! I'm writing it down now. It involves observations about trying
to share maps (over 80% of call-sites share 4000 maps, and those maps are
only 1 word in size). To make sharing work you can't have naive references
-- a trick makes them more efficient. Also elision: if you get two adjacent
call-sites the same in the code, you can elide the second one. That has a
big effect on e.g. initialisation code.

andys: So I think it's feasible to continue; we don't have to throw it out
at this stage (which I was worried about before).

daveb: Good.

tony: Another observation. Ageson has some statistics about the costs of
rolling threads onto GC-safe points by two different techniques they've
used in their JVM. Such techniques are exactly relevant to whether a
mostly-exact collector is a good thing.

daveb: Andy, what about other parts of the compiler storing call-site 
information in Dylan?

andys: Well, what I'm doing is all in the backend, so it's a bit separate.

daveb: Ah, ok.


