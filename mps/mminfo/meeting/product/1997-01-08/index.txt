               NOTES FORM MM/PRODUCT MEETING, 1997-01-08
                       meeting.product.1997-01-08
                               draft doc
                           richard 1997-01-08

INTRODUCTION

.intro: Richard Brooksby <richard>, Jo Blishen <jblishen>, and Dave Piggott 
<davep> met to run through Dave's view of the Product Evolution process.


PROCESS

.request.wait: Look at requests which are waiting (which should be owned by the 
Product Manager) and decide if there's enough detail to schedule to a release 
(analysis).

.request.define: If there's insufficient analysis set it to "defining" and pass 
ownership on to someone who can analyse it.  That person sets ownership back to 
Product Manager.

.request.schedule: Product Manager decides if and when the request should be 
met.  .request.suspend: If not, suspend (not right now) or decline (never do, 
give reasons).  .request.change: Otherwise, create a change and assign it to a 
release.  Set the request to "scheduling" and set ownership to the development 
manager.

.change.schedule: Development manager tries to schedules the work.  
.change.except: If can't be scheduled, set the exception box and it comes back 
to the Quartet's attention, who must reschedule things.  (EP haven't tested 
this bit because of the migration stuff.)  .change.assign: Assigns people, then 
sets to (request?) "active".  The change is "waiting" at this point.

.change.dev: Developers pick up changes.  .change.impl: When they start work on 
a change they set the status to "implementing".  (In EP, during check-in, the 
status is set to "releasing" so that the trunk is being modified.)  
.change.approve: When the job is done the status goes to "approving".  The 
approver picks up the work and checks it.  Can set status to "complete" and 
approval level indicating confidence, or set it to "reworking" and the 
developer gets to do some more work.  If there's a serious problem raise an 
exception and maybe abort the change.

.change.qa: Product Manager tells QA to pick up releases when all changes are 
complete for a release.  QA status is waiting on those changes.  
.change.qa.check: QA check the release and changes, and reject bad ones.  If 
they reject a rework change is created and must be scheduled for a later 
release.

.rel.qa: When all changes have been tested and passed by QA then there is full 
regression and core testing.  QA enter problems as requests.  Product Manager 
creates a QA release (q) and schedules changes to fix problems.  .rel.qa.cycle: 
The QA release is then tested, cycling through QA releases until the product is 
stable.  (EP go through five QA cycles.)

.rel.cand: A candidate (c) release is created from the stable QA release.  
.rel.cand.null: There are no changes between the two.  .rel.cand.man: The 
candidate release goes to manufacturing.  Media are created, documentation 
printed, boxed up.  .rel.cand.qa: QA check these releases.  There could be 
several candidate stages if things go wrong at this stage.

.rel.cust: A customer release (no letter) is created from the stable candidate 
release and goes out to the customer.  .rel.cust.null: There are no changes 
between the stable candidate and the customer release.


OTHER NOTES

.req.change: Requests shouldn't be changed when requirements change.  Instead, 
create a new request, because the changes needed must be distinguished.  Each 
request should refer to the relevant version of the requirement, e.g. 
req.dylan(3).fun.alloc.

Release Code Letters

m milestone
q from QA
c candidate
cust customization
r patch
b beta
a alpha

See also mail.richard.1996-11-08.12-35 for tagging scheme for MM Product 
Evolution records.

