                  MEETING ABOUT QA RELEASE 1997-02-27
                         meeting.qa.1997-02-27
                             incomplete doc
                           gavinm 1997-02-27

.intro: Richard Brooksby <Richard>, Richard Tucker <RIT>, and Gavin Matthews 
<GavinM> met to discuss issues of release procedure at 12:12.

SUMMARY OF DECISIONS

When a big, external release is coming up, we make a QA release (e.g. q1) in 
Darwin. QA then do a full test of this release and generate reworks (and 
perhaps new requests), which are scheduled for a second QA release (q2). This 
process continues until (say at q4) QA decide that either there are no 
remaining defects, or those that there are are minor enough be in the external 
release. Then an external release (r1) is created: as a Darwin entity this is 
separate from q4, but it corresponds to the same object. This is reasonable 
because releases in Darwin are not pieces of software but _actions_: the same 
software is released to QA (q4) and then released to the outside world (r1).

When a more minor release, for example a patch release to Dylan, is coming up, 
we need a more lightweight procedure. We make a candidate release (c1), set 
status to QA, and QA do a full test. If the product is deemed acceptable, the 
status is set to closed and the product is passed on. If the product is not 
acceptable, then reworks are generated as before and scheduled for a second 
candidate release (c2), which is tested in the same way.

In between such minor releases, there may be milestone releases which require 
limited testing: when these enter the QA stage, QA should check that all 
associated changes have been made, but may not do full testing of the product.

To make it clear what QA means for each release, we will specify in each 
release (in Darwin) whether it requires full QA or testing of changes only.

All releases should be supplied (to QA or to other development groups) on a 
floppy disc, accompanied by release notes. The release notes should say what's 
changed since the last release (remember, customers don't have Darwin). In an 
ideal world, we'd have the documentation too.

NOTES

RIT: How do I know a release if going to happen?

Richard: We should negotiate about when a release is convenient.  There should 
be a dated release in Darwin.

RIT: Your intention is to release to Dylan.  Darwin has a concept of a QA stage.

Richard: Darwin has two QA stages, QA of changes and QA of releases.  The 
former could happen continuously or at a defined phase.

RIT: In SW, the release is made and it goes to QA.  It can't be done 
continuously.

Richard: Dave Pigott says there is a QA of release and a QA of changes.  Let's 
bring in Dave Pigott.  [Phones]

There are these two concepts.  I'm not sure they're very sensible.

RIT: Whatever QA you do on the QA release, you want to do on the main release 
as well.

Richard: Discussion of release naming.  You make Beta release, and then make a 
candidate/QA release (e.g. 1.3Q1), and any problems are assigned to a 
subsequent release.  Eventually there's a null release with no changes and you 
go to manufacturing.

GavinM: Does the null release actually exist?

Richard: Yes.

RIT: Darwin doesn't guarantee that there are no changes.

Richard: That's because we don't do it properly yet.  That's what's supposed to 
be represented in Darwin.  Every release is QA'd, but the null release is 
"passed on" by QA>  A release isn't an object, but an act.

Whether we do this or not is questionable.  If we were doing an external 
product, we'd be more careful, but we can be less formal with an internal patch 
release.

The other model is that the release is in QA, and no development takes place.  
You say QA does its work all at once.

There are some sorts of QA that are time-consuming, not automatic test suites.  
You can get away with testing some of the changes, I think that's the idea.

RIT: Darwin doesn't represent whether the object represented has had a full QA 
or not.

Richard: All the changes have to be accepted.

GavinM: Is QA testing the change set or the new requirements set?

RIT: Scheduling a change is stating that the new release has a requirement that 
that request is satisfied.  QA is seeing which bits have changed and that's a 
help.

Richard: We've been thinking of this wrongly.  A change is a change in the 
spec, or where we haven't met the spec.  QAing a change is testing that the 
requirement has actually been met.

RIT: That's like a more specific form of QA, focussing on the parts of the spec 
which have changed.

When a release goes into QA stage in Darwin, QA people have to test all the 
changes.

Richard: I'm not sure.  Let's see what doc says.

RIT: Is QA supposed to test whole thing.

GavinM: I think it should test whole thing but may focuss.

RIT: [Documentation/How does QA fit into release cycle 5.2]

Richard: In order not to get into heavy weight lots of release, we should 
define what QA should do for each release.  There should be a description of 
what QA has done.

RIT: When you create or make the release?  In advance?  You haven't worked out 
what the changes will be.

Richard: You don't need to list all the changes.

We want a QA person to rubber-stamp the release.

GavinM: If you do a full QA and then make a second release with one change, you 
have poor knowledge of quality if you only test that change.

Richard: Agreed.  You should keep the full QA model, but not use it in all 
releases.

RIT: When you decide on a release, the date of the release gets put in Darwin.  
On the date, the release happens.  What actually happens?

Richard: It depends on the release procedure.  

RIT: I need to be able to get the object and all necessary information.  In an 
ideal work, that would be the documentation.  How do I find out the information?

Richard: We would build the release for you.

RIT: What if the interface has changed?

Richard: Then the release fails QA.

GavinM: The fact that the product meets a different requirement set should be 
represented in Darwin.

Richard: The release notes should document (or refer to documentation of) 
interface changes.

GavinM: For any release, you should be able to generate (from a single point) 
all information about the requirements, including interface.  This is true both 
for QA and customers, perhaps in different ways.

Richard: Remember that you're QAing entire product, not just software.  If the 
packing is wrong, then that's a defect.

GavinM: Arthur says that software is a program accompanied by documentation 
with which it complies.

Richard: When we have a UI, you'll be checking that as well.  Usability.

RIT: Procedure is that, supplied on a floppy should be:
  - Program
  - Release notes

Richard: It should be clear what product consists of when you receive it.  
That's why we supply it to Dylan on a floppy.

[Dave Pigott arrives.]

Richard: [Background.]

We've decided that:
  1. The release document in Darwin represents an act, not a thing or set of 
things;

RIT: You want to release a product, so you make a series of QA releases, and 
one which passes goes on to manufacturing.  You have two separate release to 
represent that.

DaveP: We get to Q5 and create a dummy release called C1 (candidate) which has 
no changes in it.  Then we go through manufacturing.  Any problems in that 
process get put into C1.

Richard: Manufacturing changes get put between Qn and C1?

DaveP: Yes.  It's debatable.  C1 is a placemarker, but we might as well 
populate it.  It has no other meaning than a semantic change.  Internal name is 
Q5, external name is C1.  You will never release C1, practically speaking.  At 
some point you make a release and have an external name that is empty of 
changes, except that we make customizations, etc.

Richard: There seems no point in the large cycling in a patch release to 
Dylan.  We want something lighter weight.  We want a QA phase that's like a 
little release to make sure that all changes are checked and rubber-stamped.  
We don't want to make an extra QA release, but they can certify that they've 
checked all changes, and possibly a full check.  If there is a problem not 
associated with a change, then they should raise a new request.

DaveP: If QA reject a change, they generate a rework, and that might be in the 
same release or a lter one.

Richard: Can you have a change or a rework in the same release?

DaveP: Sort of.

Richard: So if QA come up with a rework, we should really create a new 
release.  You freeze things and stop development.

RIT: One way you QA your changes, the other you do a full test.  When do you do 
which?

DaveP: They happen simultaneously in EP.  Some people check the release, others 
do soak tests.

We have five milestone releases.  QA do change tests on those, but do the soak 
tests on the full thing.

RIT: How do you represent that in Darwin?

DaveP: By the naming.  M (milestones) don't have full checking.  Q releases 
have full checking.

Richard: We could optionally have full checking on a release.  We'll almost 
certainly have to do it on an external release.

DaveP: There are advantages to doing full tests on every milestone.  We'd like 
to be able to do it in EP.  We've had a full year of untested development in 
the trunk.  I'm trying to change it.

Richard: As a side issue, we're having a lot of trouble integrating.


RIT: My other questions are all about what goes into the release notes.

Richard: Bob Matthews <ROM> sent round a big mail about it.

RIT: Request.

GavinM: No, because it's continually resatisfied.

Richard: It's still a change on the product.

DaveP: We did dicusss having a manufacturing release after the C release.  It 
got complicated because of organizational issues.

GavinM: Manufacturing requirements suddenly join your set when you become an 
external release.

DaveP: I wanted an extra change type called an errand which didn't have a 
request.

GavinM: Or it's a request with the special property that needs resatisfying.

RIT: If manufacturing have not enough CDs, that's not a defect in the product.

Richard: The product is 1,000 CDs.  A pretty box is a requirement, but not on 
QA release.  You should have a QC person at the door.

DaveP: Every time we go for an external release, we have checks such as legal 
on splash screen, or patents.

Richard: If you offer a product for sale, then you can't then patent it.

RIT: That's not a requirement.

Richard: A requirement must be that the product is patented.

It is a requirement that the company be able to put out products.

GavinM: This is a dependency between products.

DaveP: There are various things that manufacturing have to do.  You could enter 
54 different errands.

Richard: You could see how you can model all these sorts of things in a system 
like Darwin.

DaveP: Darwin is an abstact model.  It doesn't just have to deal with software.

Richard: Release notes is part of the product.  CDs?

Must be able to use product is a requirement.

GavinM: Darwin does represent othogonal requirement because it has products.

RIT: CD requirements aren't QA-able.  It's not a quality of the product.

Richard: You're thinking of QA as a stage between dev and manufacturing.

DaveP: Manufacturing should have a separate database.

RIT: Shouldn't you have hardware requirements in Darwin?

GavinM: If that were in Darwin, then Systems should have an environment product 
for MM with requirements.

Richard: The company is a box.  Turn the handle and CDs come out.  

DaveP: QA test CDs.

Richard: If I had my way, there would be QA in every step.  Review is QA.

DaveP: What the company calls QA should be QC.

Richard: I would like QA to be involved in making the box, looking at the box.

If we had a box, it would have requirements.  Must have name on it.  QA can 
look at box and check it meets requirements.  

DaveP: Chuck Berry claimed we had Quality Assessment.

Richard,RIT: That's very useful.

DaveP: If you have any questions, give me a call or drop in.


SUBSEQUENT NOTES

.note: The following comments were raised with regard to this document in 
review.process.darwin.1:
  89. PTW meeting.qa.1997-02-27 I Very important that full-QA stay "in 
practice", e.g., on milestone releases
  90. PTW meeting.qa.1997-02-27 I Delivery on floppies - media validation is QA 
of manufacturing process, a separate "product"  QA releases to manufacturing
  91. PTW meeting.qa.1997-02-27 I Release must have a BOM (bill of materials, 
packing list), QA validates everything on that list

