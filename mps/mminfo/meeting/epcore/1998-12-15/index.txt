                     MM/EP-CORE MEETING 1998-12-15
                       meeting.epcore.1998-12-15
                               draft doc
                            pekka 1998-12-15

.intro: Pekka P. Pirinen <pekka> met with Dave T. Berry <dtb> and Eric Penfold 
<ericp> to discuss the current situation of MM/EP-Core and the upcoming 
release, called brisling.

.plans.sw: DTB confirmed that SW 5.0r1 is being worked on but they don't expect 
any MM input for that, and SW 5.1 will be released to QA at end of January and 
MM improvements are requested for that.

.plans.mm: Pekka explained that MM have made plans and scheduled work for 
brisling, tentatively for release on Jan 18, and wanted to tune the plans with 
input from the core group.  The major improvements proposed are: the new color 
pool, speeding up MVFF, speeding up the VM arena, and a new segment placement.  
The latter is a large piece of work and there's no slop at all if it has to fit 
into brisling.

.comment.plans: EricP agreed that VM improvements were promising.  Segment 
placement is important to SW and the core group has ideas on how they could use 
better placement [Pekka will discuss this with them later].  DTB noted that "we 
are down on performance" so performance improvements are welcome.

.allocation-points: Eric wanted allocation points, because they may be of use 
for
listobjects (dl pool) and paths (temp pool) [we need to investigate this 
further].  Pekka warned about allocation points changing placement policy and 
having bad fragmentation in high-churn pools.  Pekka explained that it would 
not be too hard to implement an ap-using variant of some existing pool class, 
but efficiency was a consideration; The MM group will investigate the technical 
options.

.action.eric.config: Pekka asked for more detailed information about SW 
configurations to use when investigating color pool efficiency.  Eric promised 
some by e-mail.

.tool.replay: Eric expressed an interest in writing a tool to replay SW 
allocation sequences from the SW log.  The lower level logging (internally 
referred to as MMI logging) can track psvm allocations and as such is the only 
mm glue-based method to creating a replay tool. The higher level logging (based 
on tagging allocations) doesn't not currently track psvm pools.  He's aware of 
rit's tool to do this from MPS telemetry.  [Telemetry includes PS VM info, 
although rit's tool doesn't parse it out.  See .telemetry for more on 
telemetry.]

.priorities: A list of important changes to MM/EP-Core was drawn up and put in 
order of descreasing priority:
  1. colour pool (better than MV)
  2. VM performance
  3. MVFF performance
  4. segment placement (clever, with hints from client)
  5. SMP VM arenas
  6. meaningful MM asserts
  7. realloc
  8. pool merging
  9. allocation points
  10. garbage collection

.color: Andy got a 3 % improvement (in overall running time) using MV for the 
color pool (over MVFF).  And another 4-5 % using his binary segregated pool.

.realloc: realloc is important for promises (so EPDL should have it) and also 
for somewhat for trapping (so MVFF should have it).  Promises reserve a lot and 
usually use about 2% of it (but sometimes need more than they reserved)

.pool-merge: This is needed, i.a., for managing the font cache: two pools 
(cache from the previous page and the current page), they want to discard some 
cache entries from the old one and keep some.  This could be done by allocating 
new ones and copying, but there might not be
space.  Instead, free the ones you don't want, then ask the new pool (this is 
actually the temp pool) to take over all the memory managed by the old one.  
Compaction would be nice, but requires more changes in the RIP.

.tests.vm: DTB indicated that MNCHENA3.PS, BASS.PS, and SPREAD8.PS were good 
jobs for testing VM performance (lots of promises).  BASS allocates quite a lot 
even at 100 dpi.

.compound: The HOPE compounds for MM/EP-Core have changed on the trunk: There's 
now just SWmm_common.  The directory structure has not changed.

.ansi-c: All compilers are ANSI C, so use of #elif is OK.

.thread-safe: SW linking overrides the thread options in object files so it 
shouldn't matter what thread options MPS is compiled with.

.msvc: SW is using MSVC 5.0 since SW 5.0.  MPS should move, too.  DTB expects 
that to produce an improvement in speed.

.telemetry: Telemetry could be made more useful.  Pekka explained that the MM 
group didn't have tools for viewing telemetry that it would feel able to 
support, but that something could be provided on an as-is basis.  Permission 
was given to change the glue to emit events
labelling low-memory actions (mm_call_low_handler).

