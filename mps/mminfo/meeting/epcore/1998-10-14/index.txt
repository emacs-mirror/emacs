           BRIEF TELEPHONE MEETING WITH EP-CORE ON 1998-10-13
                       meeting.epcore.1998-10-14
                             incomplete doc
                           gavinm 1998-10-14

INTRODUCTION

.intro: Gavin Matthews and Eric Penfold spoke briefly about various issues 
concerning MM/EP-Core.


LUKE'S SOLARIS BUILD

.luke: MM have undertaken to provide Luke's group with a build of the MPS 
(release.epcore.anchovy.3) using GCC 2.8.1 on Solaris (see 
mail.luke.1998-10-14.11-08(0)) which will be done sometime soon.  [This will 
not affect any future release of the MPS to EP-Core until further discussion 
has taken place.]


MVFF 

.mvff.dl: Eric has previously reported problems using MVFF as the display list 
pool because it has a (poorly documented) minimum alignment of 8 bytes (see 
mail.ericp.1998-10-09.16-01(0)).

.mvff.history: The 8-byte restriction arises from the combination of a number 
of factors:
  - In the distant past, EP-Core required that the default alignment of all 
pools that don't have an explicit alignment parameter (in practice this means 
MV) be 8 bytes.  This was implemented in the MPS in a way which seems rather 
hacky in hindsight, by adjusting a configuration parameter that also affects 
assumptions about the necessary alignment for structures.
  - MVFF uses a combination of free list mechanisms that is fast in the normal 
case, but uses inline structures when memory is low.  Because of the inline 
structures, the free memory (and hence allocated memory) dealt with must be of 
a size and alignment to accomodate this.  On some platforms (for example, PC) 
we could get away with an alignment of 4 bytes, but on other platforms (for 
example, Solaris) the alignment requirements on general structures is 8 bytes.  
It appears to be the case that, on the latter type of platforms, specific 
structures (such as those containing members of types not exceeding 4 bytes (in 
practice, not doubles)) can be 4-byte aligned.

.sw.alignment: There was some discussion of whether ScriptWorks allocated 
structures at alignments less strict that the platform alignment for general 
structures.  Eric agreed that this was done, but not if the structures 
contained doubles.  Gavin suggested that, on a platform with 8 byte structure 
alignment, if a pool were created with 4 byte alignment, but all the allocation 
requests in it had sizes that were 8 byte aligned (perhaps because sizeof() 
always returns 8 byte aligned values on that platform), then all allocated 
blocks would happen to be 8 byte aligned regardless of the less strict pool 
alignment; in this way a 4 byte pool alignment might be observed to work 
correctly on such a platform.

.mv.use: Eric confirmed that, as MV is not currently used for any pools in SW, 
MM may drop the 8-byte default alignment in future releases.

.mvff.future: MM propose to do the following two changes in some future version 
of the MPS:
  - Restore assumptions about platform alignments to less conservative values.  
This will have little effect on ScriptWorks.
  - Change the implementation of MVFF so that the minimum alignment required is 
"sizeof(void *)" (and document this clearly).  This alignment is believed to be 
4 bytes on all present EP-Core platforms.  [And make invalid alignments fail 
the pool creation in all varieties, rather than AVER in debug varieties.]

.mvff.patch.estimate: Gavin estimated that providing these changes as a patch 
to version.epcore.anchovy would require substantial MM-QA in order to be sure 
of their reliability, and that it would be hard to deliver them to EP-Core 
before 1998-11-04 Wednesday.

.mvff.patch.response: Eric responded that this was too late in the SW5.0 cycle 
to be useful, and that the case that would potentially be sped up by use of 
MVFF for the display list pool was quite hard to provoke.  It is therefore not 
appropriate to provide these changes in a patch to anchovy.

.mvff.use: Eric reported that MVFF was now being used in ScriptWorks for the 
following pools: temp, PDF, trapping, image, colour, RSD.

.mvff.other: Eric and Gavin discussed other possible approaches to solving the 
problem of vignettes persisting beyond other objects in display lists, but no 
practical alternatives were forthcoming.


AUSENPLN SLOWDOWNS

.ausenpln.report: Gavin reported that, as part of investigating slight 
slowdowns between version.epcore.minnow and version.epcore.anchovy, MM-QA had 
observed curious effects when ripping the same job multiple times with 
intervening jobs.  Richard Tucker had run a test suite that ripped ausenpln, 
did many other jobs, and then ripped ausenpln three more times.  The second rip 
of ausenpln was much slower than the first.  The third was faster than the 
second, but still much slower than the first.  The fourth was the same as the 
third.  Examining the call counts of the first and second rips, it was found 
that approximately ten times as many allocations (and deallocations) were being 
done in the temp pool (MVFF), but the same number in other pools.  None of the 
allocations appeared to be failing.  The time spent in the MPS was commensurate 
with the call counts.

.ausenpln.discusss: Gavin and Eric discussed possible explanations for this 
behaviour, including font caches, but came to no useful conclusions.

.ausenpln.act: Eric will contact Richard Tucker for more information on this.

