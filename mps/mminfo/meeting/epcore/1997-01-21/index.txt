       NOTES FROM THE MM/EPCORE REQUIREMENTS MEETING, 1997-01-21
                       meeting.epcore.1997-01-21
                               draft doc
                           richard 1997-01-22

INTRODUCTION

.intro: Richard Brooksby <richard> and Nick Barnes <nickb> met Dave T Berry 
<dtb>, Andy Cave <andy>, and Hugo Tyson <hugo> to discuss new MM requirements 
generated by urgent Core RIP work to support PDF.


NOTES

.aim: The aim is to develop PDF support in the next month, demo in two months, 
and ship in three.  .ship: June/July for ship date is feasible.

.support: We don't intend to support full PDF (which includes RSA encryption, 
for example), but enough to process almost all PDF documents out there.  It 
depends how much we can get done.  We won't support type 10 halftones, for 
example.

[Andy describes the PDF document format and parsing.]

.pdf-pool: We could allocated PDF objects in a new pool -- they are a tree 
parsed from the file -- then walk down the tree to interpret the PDF stream at 
the leaves, generating a display list for rendering.

.sr: We could do a SAVE and RESTORE before and after PDF processing, and also 
before and after processing each PDF stream object.  Streams are usually pages.

.embed.ps: PDF may have embedded PostScript.  A PDF viewer can ignore the 
PostScript, but we will need to interpret it.  There are lots of unanswered 
questions about how embedded PostScript interacts with the PDF.

.embed.pdf: We may also support PDF embedded in PostScript, so it will need to 
work both ways round.

.no-gc: PDF streams don't have SAVE and RESTORE, or any control flow, 
variables, or stack manipulation operators.  It appears that GC is therefore 
unnecessary.  A stack disciplined pool may be enough to manage the memory.  
(See .act.lang.)

.pressure: However, PDF interpretation may increase memory pressure and 
therefore make general PostScript GC a more urgent requirement.

.acro: We will copy the behaviour of Adobe Acrobat rather than the PDF spec, 
but we don't expect Acrobat to be a superset of the spec.

.class: There are three classes of memory involved:

  .class.xref: The PDF "obj" objects read in from the source file.  We will 
call these "xref objects".

  .class.stream: The PS-like objects created while interpreting PDF streams.  
We will call these "stream objects".

  .class.ps: Objects created by PostScript interpretation (as before) which we 
will call "PS objects".

.plan.init: Initially, Andy will implement the PDF parser and interpreter to 
use "local" PostScript memory, and wrap the whole thing up in SAVE and 
RESTORE.  The PostScript object format will be extended to include xref 
objects, so that these can be managed by standard RIP routines (especially 
dictionary handling) and can be allocated in PostScript memory.  
.plan.init.no-act: There are no extra requirements on MM for this initial phase 
of implementation.

.plan.later: As things develop we may well find ways in which performance can 
be improved by use of specialized MM, such as a pool for xref objects or stream 
objects.  We will have to see.  .plan.req: We should prepare for requirements 
to come in over the next two months.  .plan.impl: We should plan for 
implementation in two months' time.


ACTIONS

.act.lang: Nick will double check Richard's assertion that the PDF language 
doesn't need GC.

.act.think: Nick will give some though to specifying the state of memory on 
transitions from PDF to PS interpretation and vice versa.


