         SUMMARY OF FOURTH EP REQUIREMENTS MEETING, 1995-08-10
                       meeting.epcore.1995-08-10
                               draft doc
                           richard 1995-08-10

INTRODUCTION

.intro: On Thursday 10th August 1995, Richard Brooksby, David Moore, Nick 
Barnes, and Tucker Withington met Andy Cave to discuss EP's requirements for 
Memory Management.  This meeting followed on from meeting.1995-08-08.  We 
continued to go though the requirements list (req.ep(1)).

.scope: This meeting covered the following areas of the requirements:

  - req.ep.fun.env (environment considerations)
  - req.ep.attr (attribute requirements)


REQUIREMENTS

.tickle: Tickles work using a macro SWOFTEN which checks a timer and pokes a 
list of state machines.  (Can we import SWOFTEN, or something?  Is this a 
generally useful interface for the MPM?)

.any32: Must operate on any 32 bit architecture or 64-bit in 32-bit mode.  
Current list (from Andy's memory) is Mac '030 '040 PowerMac, x86, P6 (when 
available), Win3.1 Win32s, WinNT, MacOS 7.5, Alpha NT, SMP variants of Alphas, 
Unices: Irix, R3000/4000 MIPS, SPARC, Solaris.  Kharp = R3000, i960?  (Define 
generic platform type?)

.multiproc: Memory barrier instructions will be necessary on Alpha SMP 
variants.  Only allocate in RIP memory from front-end, so no locking is 
required at present.  The renderer can free memory in parallel, but a simple 
lock is all that's required.  Each renderer has private pool.

.boot: Memory is passed to the core RIP on boot [we will pass it to the 
Arena].  For GUI memory allocation is not critical.  Dynamic extension has been 
requested by some customers.  Might be nice.  [Arena extension protocol?]

.hqrts: We need to worry about the HqRTS only an issue if we supply memory to 
"skin".  Ask PhilC.  Might need to request protection services from them if 
needed.

.debug: Andy would like a "debugging" support requirement stated explicitly, 
rather than "keep available".  FTAOD!

    ATTR                Attributes
      QUALITY           Qualities of the system
        WORK            Ability of the MM system to do work
          THROUGHPUT    ScriptWorks throughput compared to "current" levels
                        scale   Pages ripped against time?
                        test    Comparison of RIP with QA test suite?
                        worst    95%
                        plan      0%

.tp.100: That should be 100%!

.qa-test.level: QA tests are based on PostScript level 1.  New tests will have 
level 2.  .qa-test.log: Tests use log comparison.

.cs.slow: Current system is a bit slow for large objects, and in traversing 
free lists.  

.qa-test.group: We must define _groups_ of acceptance tests and the acceptable 
performance for each group.  For example, some test must run fast to satisfy 
customers.  Some tests could get slower without worry.  Some groups must run 
faster overall, but individual tests could be faster or slower.  Clearly there 
is some work to do here.

                        best    140%
                        source  Andy Cave, 1995-07-18
          RESPONSE       Responsiveness

.tickle: The requirement for tickles depends on the recorder and disk.  A 
millisecond timer in grains of Windows=17/s, Mac=60/s drives the tickle code.  
Tickled code may become greedy when necessary and consume the CPU.  It depends 
on recorder rates and buffer sizes.  Tickles shouldn't consume more than 1/2 
second every 10 secs.

.co-op.suspend: If compacting main memory, can suspend things in interpreter, 
etc.  Can co-operate.

.co-op.halt: The RIP could temporarily disable output, halt the system, wait 
for halt, or wait for safe time to pause.

.co-op.idle: There is an idle time loop while waiting for jobs when output is 
idle.  Sometimes this is a large interval, so opportunistic GC is possible.

.idle.response: Jobs must start within a second (1/4) after idle time.  There 
is some opportunity for GC work during the initial handshaking.  The next job 
is polled on next tick, so a tickle's worth of idle work is free.

          STORAGE       Storage capacity
            MANAGE      Amount of memory to be managed
                        scale   Number of bytes of memory
                        worst   512Mb
                        plan    4Mb, av 32-64, max 500 Mb
                        best    4Gb
                        source  Andy Cave, 1995-07-18

.capacity: One size fits all.  Always need extending.  [What was that about?  
Need clarification -- richard 1995-09-19]

        AVAILABLE       Availability of the system
          RELIABLE      Reliability
            ANNOY       End-user annoyance
                        scale   Number of annoyed end-users (~15000 end users + 
5000/y)
                        test    Measuring support calls?
                        worst   5%?
                        plan    0%
                        best    0%
                        source  Andy Cave, 1995-07-18

.annoy.oem: This ought to be in terms of OEM not end-user.  This must be very 
good because the RIP is in print shops.  SW runs jobs from every app under the 
sun, so must be high quality.  (Ask Yoryos.  See also reputation.)

            MTBF        Mean time between failure
                        scale   ScriptWorks continuous execution time
                        test    ?
                        worst   200 hours
                        plan    ?
                        best    ?
                        source  Andy Cave, 1995-07-18

.mtbf: Customers may run jobs to disk overnight, then run the recorder in the 
morning.  Some run for days.  Jez can ask Mitch (print shop) how often he's 
forced to reboot (and why).  Some jobs take several hours (for set of seps).

          MAINTAIN      Maintenance requirements
            RECOVERY    Recovery time
              SEVERITY  Recovery time by severity

.sev.p1: Can't release (24 hour)
.sev.p2: Nice for next release (depends, 3 months max) Yoryos?
.sev.p3: Er, something.
.sev.p4: Information (indefinite)

            RECOG       Problem recognition
            ADMIN       Administrative delay
            TOOL        Tool gathering
            ANALYSIS    Problem analysis
            SOLUTION    Solution formation
            INSPECTION  Inspection of solution
            DEPLOY      Deployment of correction
            TEST        Testing
            EVALUATION  Test evaluation

.recovery.evolve: These times can evolve later.

          INTEGRITY     Integrity of system against attack
            THREAT      Integrity against various attacks
            SECURITY    Comparison with standard security ratings

.sec.strip: Must be able to strip out symbols, as with the rest of the RIP.
.sec.none: No special extra measures.

.size.freq: Frequent size classes in the RIP, so customalloc techniques may pay 
off.  [A customalloc-like prototype would be useful -- richard 1995-09-18]

        ADAPT           Adaptability
          IMPROVE       Improvability
          EXTEND        Extensibility
          PORT          Portability impact on ScriptWorks
            ARCH        Portability to feasible new architecture
                        scale   Total effort required to port
                        test    ?
                        worst   2 man weeks
                        plan    1 man week
                        best    1 man day
                        source  Andy Cave and Luke Tumner, 1995-07-18
            OS          Portability to new operating system
                        test    ?
                        worst   3 man months
                        plan    1 man month
                        best    ?
                        source  Luke Tumner and Andy Cave, 1995-07-18
        USE             Usability of the Memory Manager
          INTEGRATE     Integration effort required
                        scale   Total effort required to integrate into SW
                        worst   ?
                        plan    ?
                        best    1 man week
                        source  Yoryos Yeracaris, 1995-07-18
          ENTRY         Entry requirement: who can use it?
          LEARNING      Time to learn to use it effectively
          HANDLING      How easy is it to use?
          NICE          How likeable is it?

.use.integrate: Integration time should be planned for 3-6 man months.

.use.ongoing: Ongoing integration and adaptation should be planned at 1 month 
per year.

.use.entry: Entry requirement is a core RIP developer of more than year's 
experience with RIP, or highly capable.

.int.malloc: Usage in the RIP is just malloc and free.  .int.malloc.debug: 
There is some added debug assistance.  .int.int: Inside the interpreter, 
however, it's more tightly coupled.

      RESOURCE
        TIME
          DELIVERY      Delivery constraints
            EVAL        Delivery of simple system for initial evaluation
                        scale   Time
                        test    Sign-off by EP divisional manager
                        worst   "mid 1996"
                        plan    "early 1996"
                        best    December 1995?
                        source  Yoryos Yeracaris, 1995-07-18
            FULL        Delivery time of full memory manager
                        scale   Time
                        test    Sign-off by EP divisional manager
                        worst   "end of 1996"
                        plan    "middle of 1996"
                        best    March 1996?
                        source  Yoryos Yeracaris, 1995-07-18

.ep-delay: It will be November or December before there can be any effort on 
this from EP.


PRIORITIES

.prio.1: Minimize the instability due to GC.

.prio.2: Performance improvement.

.prio.3: Problems with not having GC for bad publicity due to non-running jobs.

.prio.lower: Control over working set size, max size of PS, etc.  Controls by 
estimated garbage.

