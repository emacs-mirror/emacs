                DPP MEETING ON ROAM MEMORY REQUIREMENTS
                       meeting.epcore.1999-05-27
                             incomplete doc
                            pekka 1999-05-27

.roam: This wasn't very useful to us, since they decided to re-engineer the 
roam cache before releasing the code.  This will change the memory 
requirements: in particular, the maximum size of block required will be smaller 
(perhaps 128 KB instead of > 5 MB).  When this has been done, roam and core RIP 
will share memory, but it
all seems quite straight-forward and should present no new requirements for 
us.  There will be another meeting about this.

.vm-arena: IWBNI they could always use the VM arena, because then they could 
share the memory more transparently.  Not much we can do about that, but they 
know that this is desirable in the long term.

.frag: The standard antidote to (the threat of) fragmentation is rounding block 
sizes upto a multiple of some large number (512 B -- 4 KB).  IWBNI if all pools 
had an alignment parameter.  Roll on, optargs!  (No, I didn't tell them that.)

.fw: Coming back, I talked to Luke about using MPS more widely in the GUI.  
This basically means putting MPS under the FrameWork memory interface (a.k.a. 
FwMem, see HQNframework_os!export:fwmem.h).  I said that although we didn't 
have figures (as only actual test runs could tell for sure), there were reasons 
to think that it would be more efficient than malloc.  We agreed that it would 
interesting to test.  This would only require a day's effort from them, but 
there are several issues we'd need to address:

.fw.multithread: They are multithreaded, so we'd have to provide a 
configuration with locking.  I told Luke about allocation caches, but clearly 
that's too much effort for a test, perhaps too much ever to be done, although 
with the advent of CORBA, they have more threads.

.fw.free: They use a malloc/free i/f, so we need an unsized free.  This could 
be implemented in a layer between FwMem and MPS.  I offered to release the 
manual dropin interface to them -- while it's not ready for a general release, 
it's good enough for this purpose.  .free.unsized: We should think about adding 
more alloc/free interfaces, including a free without size, and perhaps writing 
a pool (subclass) that supports it.

.fw.arena: I recommended using a separate arena for the test, but when we have 
a good locus manager, we might change that recommendation.

.fw.test: I think we ought to look into providing these features in chub, or at 
the same time as chub if they need separate configs (it might be good enough to 
have an arena parameter to tell it whether to lock).

