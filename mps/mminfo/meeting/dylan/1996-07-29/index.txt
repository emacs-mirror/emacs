               MM/DYLAN REQUIREMENTS MEETING, 1996-07-29
                        meeting.dylan.1996-07-29
                               draft doc
                           richard 1996-07-29

INTRODUCTION

.intro: Richard Brooksby <richard> met John Hotchkiss <jh> to review the new 
draft Dylan requirements, req.dylan(3), and discuss plans.  Also present: Gavin 
Matthews <GavinM>, Tony Mann <tony>, Peter Benson <pabenson>.


AGENDA

1. Brief review of the history of MM/Dylan project.
2. Brief review of MM planning methods w.r.t. requirements.
3. Appointment of Dylan Group contact for MM/Dylan requirements.
4. Review of req.dylan(3).
5. Determine actions to be taken to resolve important or urgent issues arising 
from 2.


REVIEW OF REQ.DYLAN(3).


Measurement

.fun.measure.tools: Could support Dylan implementation of tools rather than 
make it a requirement to supply tools.


Weakness and Finalization

.fun.weak.slot: Should be an attribute.

.fun.final: Assuming ordered finalization is not a requirement.  Don't know how 
Apple method would provide it.  For MM to provide ordered finalization would 
take about four man-month's work.  Suspicion that Apple's defined ordering 
"fell out" of the implementation.


Test Suite

.attr.test-suite: Don't have this yet.  Have CMU suite.  This is also a 
counter-requirement.  We need this for the first release.  We can cope with 
moving targets; the main thing is that something exists and is accessible.


Control

.attr.tune.effort: Compare with ML requirements.  This is aimed at customers 
who will develop in Dylan.  MM will aim to supply enough tools to meet this, 
rather than thrashing out details of which tools are needed.  Customer should 
see benefits within hours.  QA and usability involvement.


Debugging

.attr.debug: Similar to .attr.tune.effort.  Memory management problems in Dylan 
problem, e.g. leaks.  [Clarify requirement, not bugs in MPS? - GavinM]  


Reliability

.attr.rel.min: GavinM pointed out that this is a statistical impossibility.  

.attr.rel.mtbf: EP have a requirement of 20,000 hours.  EP's memory management 
requirements are simpler, however.  Tested in field.  Used for determining down 
the road whether a good job has been done.  Richard explained that MM needs to 
have specific requirements to correlate development effort against 
reliability.  John suggested that a developer should be able to work for a 
month without memory management problems.  [Are we confusing minimum TBF and 
Mean TBF? - GavinM]  Tony points out that we need to test against multiple 
thread use for realistic testing.


Adaptability

.attr.adapt: Richard said we need a way to specify this.  


Timing Requirements

.attr.time.boot: Tony says 30s came from a particular problem in the past.  It 
might be more useful to put an upper limit on MPS start-up time per 
pre-allocated storage.  Tony should be able to come up with a specification for 
this.

.attr.time.pause.max: Tony asked why this is DW-specific.  Richard said it is 
essentially MM latency.  Used to have unsubstantiated number for this, based on 
interactive/psychological requirements, but their basis was never 
substantiated.  John expressed this as a general restriction on how long a 
thread could be stopped for, with interactive threads distinguished.  Tony 
suggested having an MPS limit, independent of DW, as DW timings may not become 
available until late in the development cycle.  Also, it is applicable to 
application programs as well.  Richard said that "fourth party" requirements 
are too vague to base decisions on; acceptance of the Dylan environment is the 
most important thing at the moment.

.attr.time.pause.80: Most pauses should be unnoticeable.  John said these 
number are meaningless because the attributes of existing garbage collectors 
are unknown.  Richard said we can always change these requirements later.  Tony 
suggested the requirement should be thread number specific.  Richard said we 
can work round that sort of problem.

.attr.time: Need order-of-magnitude figures for these things.  Tony suggested 
comparable in size to a function call overhead.


Space Requirements

.attr.space.accuracy: Compare with a perfect, exact collector.  Dynamic space 
consumption over and above reachable objects.


Flexibility

.attr.flex: Placeholder awaiting knowing what to say.


Environment

.dc.env.multi: Tony says this is, in some sense, redundant because of 
req.dylan.dc.env.thread.  Richard asked for timings on these things.

.dc.env.gc: Boehm will probably kill MPS.  Need definition of friendly, for 
MM's own benefit.

.dc.env.odi: Probably optional.


Platforms

.dc.plat.nti4mv: MPS is portable, but we only plan on supplying this version at 
the moment.


Varieties

.dc.var.ro: Tony asserted that debug information is really a linker option, so 
maybe it doesn't matter whether that's specified.

.dc.var.i5-opt: Optional Pentium optimization.


Errors and Exceptions

.prot.error: What does the MM do with bus errors, etc?  Report to Dylan where 
possible, or call Dylan run-time system.

.prot.exc.dylan: Need to work on what this means.

.prot.fail-alloc: Always consult before failing, options of various weights of 
GC.  Graceful degradation.

.prot.consult: Avoid pausing with consultation.


Deliverables

.plan.deliv: MM don't know about Dylan release schedule.


Integration

.plan.int: If Dylan are prepared to put in a large effort, this makes like 
easier for MM; use existing product interface.


Support

.plan.support: Suppose the requirements stop changing, how much maintenance 
effort will be required.

.plan.avail: Based on ML requirements, except internal problems are more 
serious.


Counter-Requirements

.feedback: MM feels a lack of feedback from Dylan.  Need a contact and a 
test-suite.


Anti-Requirements

.anti: Tony asked for clarification on what an anti-requirement is.  Are these 
current non-requirements, or never-requirements.  Richard replied that they are 
explicit current non-requirements for the avoidance of doubt and to reflect 
matters raised in past discussion.

.anti.real-time: Richard asked John what this means.  John says it is about 
guaranteeing transaction throughput.


Open Issues

.open.fourth: Large systems will be developed, but not for a while.  Many ML 
fourth party programs are naive about memory usage.  John said that early 
applications may be database or Web applications.  John mentioned his Spring 
document about this.  Richard explained a little about analysis.product.


OTHER DISCUSSION

[I wasn't able to capture this part very clearly. -- GavinM]

.other.schedule: John discussed perceived slippage of Dylan.

.other.java: John discussed the problem of meeting Java's challenge of 
distributed code.  GC is on top of VM.  Microsoft.  John will keep Richard 
informed about this.

.other.debug-trans: Debugging transactions.  Tony will have restrictions on 
what MPS can do.


ACTIONS

.act.think: John to get together with Tony and probably Peter to discuss 
requirements and resolve the most important ones in time for the next meeting.

.act.next: Next meeting: Wednesday 1996-07-31 14:00, House

