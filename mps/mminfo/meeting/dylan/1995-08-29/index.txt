           SUMMARY OF DYLAN REQUIREMENTS MEETING, 1995-08-29
                        meeting.dylan.1995-08-29
                               draft doc
                           richard 1995-08-29

INTRODUCTION

.intro: Richard Brooksby and Andy Sizer met to review Dylan's requirements on 
MM.


PLANNING

.plan.draft: Andy agreed to attempt to produce a new draft of the requirements 
by the end of next week (1995-09-08).

.plan.commit: We are committed to maintaining the requirements document as the 
channel of communication between the projects.

.plan.quantify: Andy agreed that producing multidimensional quantifications of 
attributes should be done.


REQUIREMENTS

Functional/Attribute

.auto: DylanWorks requires automatic memory management.

.leak: All collectors are conservative to some extent, so we need tools to 
minimize leakage or control the risk of leakage, which can get very bad in some 
cases.

.resp: Must be responsive to a wide range of user requirements, and thus 
support a broad spectrum of applications.

.multi: It would be nice if it could support multiple requirements within a 
single application.

.party: Third party (Dylan developer) and fourth party (application user) 
requirements must be serviced.

.devenv: Development environment latencies must be below the threshold 
necessary for good productivity [according to current research].

Environment

.win: DylanWorks Win32/i386 delivery H1 1996.

.plat: The strategy for other platforms is not yet clear.  Therefore, require: 
.plat.fun: be functional on a new platform in three months, .plat.perf: be 
performing on a new platform in six months.

Constraints

.comp: Support the "component architecture" used by DylanWorks on the 
platform.  For example, this would mean delivering a DLL which can manage the 
memory of multiple components under Windows.

.clib: Otherwise, a C library for the platform is acceptable.

Dylan Libraries

.libs: The compiler will require support to solve, for example, the "pig in the 
python" problem as and when necessary.  We will not be ready to expose this to 
the outside world by the first release.  This should be low down on your list 
of things to do.

Persistence

.pers: The Dylan group have yet to do sufficient analysis to make this a 
requirement for MM.  In the meantime, Richard will: .pers.acc: take account of 
Jonathan's design in the MM designs, and .pers.cost: produce a cost estimate 
for implementing Jonathan's design for Andy.


PRIORITIES

.prio.q: Richard asked "What are your three main priorities?"

.prio.1: Low (i.e. productive) latency in the development environment.
.prio.2: Acceptable throughput/performance.
.prio.3: Flexibility to the user.

