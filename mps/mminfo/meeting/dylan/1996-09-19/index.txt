       SUMMARY OF MM/DYLAN DEBUG REQUIREMENTS MEETING 1996-09-19
                        meeting.dylan.1996-09-19
                               draft doc
                             drj 1996-09-19

INTRODUCTION

.intro: David Jones <drj> met Tony Mann <tony>, and Paul Howard <phoward> to 
determine what Dylan required of MM and what the MM required of Dylan in order 
to support Dylan's debugger.


DEFINITIONS

.def.transaction: The Dylan Debugger makes use of "debugger transactions" 
during which the Dylan program is in a well defined state and can only perform 
certain restricted operations (for example, typically at most one thread is 
running).


REQUIREMENTS

The following requirements were discussed.

.transaction.no-motion: During a transaction the MM must not move (change the 
address of) objects unless it can prove that Dylan cannot have taken the 
address of the object (ie the object is white).

.transaction.mm-activation: During a transaction Dylan must not leave a thread 
suspended indefinitely if the thread is currently executing in the MM.  In 
particular Dylan must not call any MM function whilst there is a suspended 
thread that is executing in the MM.

.transaction.mm-return: During a transaction the MM must notify Dylan whenever 
a thread is about to return from executing in the MM.

.transaction.barrier: Dylan will respect the usual barriers that the MM uses.  
This may involve using a software barrier mechanism if any hardware barriers 
cannot be emulated.

.transaction.close: At the end of a transaction Dylan must be able to allocate 
a table of variables (pointers) and register this table as a root.

.debugger.allocate: The Dylan Debugger must be able to allocate memory for 
miscellaneous purposes.


DERIVED REQUIREMENTS

The following requirements were derived from the above.

.transaction.notify: Dylan must provide the MM with some means of detecting 
when a transaction is happening.  Alternatively, the MM must provide some means 
for Dylan to notify the MM that a transaction is beginning or ending.

.mm-activation.notify: The MM must provide some means by which Dylan can 
determine which threads are executing in the MM.  Alternatively, Dylan must 
provide some means for the MM to notify Dylan when a thread begins or finishes 
executing in the MM.


OTHER BUSINESS

The following were also discussed.

.also.final: Finalization.  Tony and drj both agreed that the current situation 
was acceptable.  drj to summarize discussions.

.also.weakness: drj said that this was implemented and would be trivial to 
provide. .also.weakness.wrapper: drj pointed out that under the current scheme, 
entire weak objects (that is, objects that contain weak references) were 
created, even the wrapper pointer was weak.

.also.pinning: Tony said Dylan needed a method for indefinitely pinning 
objects.  drj said that ambiguous roots provided this.

.also.trap-handler: Need to have some mechanism by which Dylan can setup 
whatever trap handlers MM needs.  This is already present.

.also.root-grow: Tony mentioned the possibility of wanted to register a table 
of pointers as a root and later have that table grow.  drj said there were 
approximately two ways of doing this (declare a general function root, or 
provide a mechanism for extending table roots).

.also.doc: drj pointed out that there was a lot of stuff that MM provided, but 
it wasn't adequately documented, so Dylan had problems using it.


ACTIONS

.act.final: drj to summarize all the finalization proposals sometime.

.act.concrete: drj to produce concrete designs and proposals to meet the 
requirements outlined here.  Probably reviewed by both MM and interested Dylan 
people.



