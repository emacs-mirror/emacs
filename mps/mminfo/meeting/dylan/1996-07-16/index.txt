          SUMMARY OF MM/DYLAN REQUIREMENTS MEETING, 1996-07-16
                        meeting.dylan.1996-07-16
                               draft doc
                           richard 1996-07-16

INTRODUCTION

.intro: Richard Brooksby <richard>, David Jones <drj>, and Gavin Matthews 
<gavinm> met Andy Sizer <andys> and Tony Mann <tony> to discuss Dylan 
requirements.

.purpose: The purpose of the meeting is to produce a requirements document 
which is complete, if not fully detailed, based on req.dylan(2).


PLANNING

.release: Richard explained about MM's practice of charting release against 
requirements met and the evolutionary delivery technique.  He emphasized the 
importance of written requirements in this context.

.priority: We need to assign priorities to requirements from: critical to nice.


REQUIREMENTS

We discussed the requirements from req.dylan(2).

.fun.obj.alloc: Allocating Dylan objects is critical (obviously).

.fun.obj.recycle: Recycling unused Dylan objects is critical (pretty obvious).

.def.static: The definition of "static" is unclear.  Is that objects that can't 
be moved around, or can't be reclaimed, or what?  This needs to be sorted out.

.fun.wrapper: Separate requirements for wrappers are probably superfluous since 
they are part of Dylan objects and covered by .fun.obj.*, provided that there's 
a way to stop them moving etc.

.reloc: Need to be able to specify that an object is not relocatable, either at 
allocation, or later in its lifetime, so that it can be passed across the FFI.  
One way is to put conservative reference on the stack.  The FFI programmer must 
specify whether object reference can be "squirreled away".  MM need to support 
this.

.opaque: Objects passed across the FFI are opaque to foreign code, but must not 
move because the pointer must remain valid.  [This isn't true of strings, is 
it?]

.roots: We need to be able to scan different types of roots in different ways, 
e.g. tables of roots and formatted roots, ambiguous roots, exact roots, heaps 
of mutable Dylan objects, heaps of immutable Dylan objects, stacks, and threads.

.thread-reg: Threads need to be registered with MM.  We need to be able to pass 
around some strings as transparent objects across the FFI as without the GC 
going boom; calls into Dylan must register threads.

.xenophobic: The MM doesn't have to know about the state of foreign threads.  
We won't scan their stacks, heaps, or other data.

.product: We discussed allowing the foreign application to use HMPS.  Richard 
pointed out that a foreign component's memory use is entirely separate.  A 
possible benefit of combined use is to have only one GC linked in.  Richard 
didn't think there would be much gain (100k).  This requirement is "nice".

.malloc: It might be nice to be able to provide malloc and free to foreign 
code.  Easy to do, but adds complication and trouble.  Reconsider in the light 
of the MM product.  If the MM simply "comes with" the Dylan product as a bundle 
then foreign code can just use it.

.def.object: We need to define various things including Dylan objects, 
"static", etc.

.static-root: Need to state what memory can be registered as a root.  Dylan 
run-time will need to allocate malloc-style memory then register it.

.library: The MM should be delivered as a statically linkable library (.LIB on 
Windows) so that it can be linked into the Dylan run-time system, which will be 
a DLL.

.vers: Need to be able to guarantee that the objects generated by the compiler 
(and dumped statically or not) are compatible with the object format in the 
MM.  It's cheap to have version number.  Could version entire heap as opposed 
to each object, or pass as magic number to registration?

.prof: There is a vague but definite desire to support allocation profiling.  
This is  a user capability, and therefore some sort of requirement on 
DylanWorks.  There's a design gap between that and an MM requirement.  The 
requirement is just to "support" allocation profiling.  The MM Group need to 
study what is really needed by users anyway, and that can be used to decide 
what to put in Dylan.

.stats: Dylan will need functions providing basic stats: how much memory is 
currently allocated, in particular.

.final: Tony believes that finalization for the user is a strong requirement.  
The MM Group can provide a watered down version of the "Apple" model, or Kim's 
proposal based on weakness.  Dylan need to decide which is required.  A full 
implementation of the Apple model, with ordered finalization of cycles, is 
infeasible.

.weak-tables: The MM must support weak tables.  Other weak collections would be 
nice, but not essential.  Weak tables include weak key, weak value, and both.

.weak-vectors: Tony said that the debugger would also require weak vectors.  
This will fall out as part of weak tables.

.weak-slot: If weak slots or other weak structures are required they will be 
implemented in terms of weak tables until such time as that becomes an 
unacceptable performance penalty, in which case new requirements will be 
formulated.

.no-dll: The MM linkable object (library) musn't depend on any other DLLs or 
draw any others in.

.plat.i4: There's no need to support the 386, and code should be at least 
optimized for the 486 and Pentium.

.plat.i4-i5: It would be nice to have separately optimized versions for Pentium 
and 486.

.plat.i4.interlock: MM are allowed to use 486 instructions for thread 
interlocking.

.dc.env.thread: It may be necessary to integrate exception handlers between 
Dylan and MPS; MM could expose this as a macro which would be faster.  Need to 
specify whether we expect the trap handler to be active.  We need to define a 
protocol.

.testing: Richard emphasized the counter-requirements, about testing.  Might 
have large downstream cost when Dylan becomes more reliable.

.odi: AndyS asks: "Does it run with ODI?"

.exc.dylan: The exception handler needs to be compatible, or even integrated 
with, the Dylan exception mechanism.

.exc.foreign: Need to specify the protocols for exception handlers across the 
FFI.  What does Dylan need to do?  How does it interact with foreign exceptions?

.exc.stack: The issue of what happens on a stack overflow needs to be dealt 
with.


ACTIONS

.act.next: We will meet again on Thursday morning (1996-07-18).

.act.edit: Richard will update req.dylan to revision 3, including information 
from this meeting.

.act.final: The Dylan Group will determine what their requirement for 
finalization is and make an authoritative decision about it so that the MM 
Group can get on with it.

