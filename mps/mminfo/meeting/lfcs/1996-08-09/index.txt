           MINUTES OF MM/LFCS MEETING, EDINBURGH, 1996-08-09
                        meeting.lfcs.1996-08-09
                             incomplete doc
                           brianm 1996-08-10

INTRODUCTION

.intro  The purpose of this meeting was to discuss modelling the
tracer in ML.  In particular I had sent by e-mail the following:

   1. The goals and technical description document arising from the
      briefing meeting I had with Richard.

   2. SpecML : a description of some specification support gadgets,
      broadly inspired by the work on Extended ML at Edinburgh.

   3. (to HHG only) a tarred, gzipped, uuencoded directory containing an ML
      description I wrote based upon the briefing meeting.  This ML
      file wasn't very complete - it gave signatures for SET, MAP, GRAPH
      etc. and only gets as far as reference_partition_

      This directory also contained a neutral implementation of `require' to 
provide us
      with a common file-dependency concept for loading source.  This
      is consistent with the Harlequin MLWorks seperate compilation
      system - and is sufficient for the present purpose.

      Finally this also contained some very simple `enc' / `dec'
      shell scripts for weakly encoding directories for transfer
      between sites.   This codes a simple substitution cipher -
      implemented by using tr (similar to rot13).

People present were Rod Burstall, Healfdene Goguen, Paul Jackson (Paul
only some of the time - he got back from the States the previous
evening) and Brian Monahan.


CONTENTS

.contents

   1. Discussion of items we sent.

   2. Other related work.

   3. LEGO.

   4. Actions.


1. Discussion of items we sent
------------------------------

We briefly went through the goals part of the briefing document - I emphasised
that the modelling activity is supposed to be a two-way affair and
will be infuenced by all of us.  The idea of using the model to
provide justification for `clever tricks' in the actual code was
commented on favourably - but implies that there will be several
layers of model.  This point was understood.

We discussed the technical summary from the briefing paper.  This
produced quite a lot of useful discussion - which I shall now try to
summarise.

Rod particularly likes to consider different roles for the root
elements:

  (a) starting points for GC activities.
  (b) current focus of attention for mutator activity.

I remarked that it wasn't clear to me how the notion of root could
change during collection activity.  Rod remarked that he felt that it
might be useful to express GC concepts in terms of accessability.
[Brian M. ... so this introduces an implicit notion of `root' as being
anything that is accessable from the original roots.]  Rod has a TCL
implementation (complete with animation ... !) which performs
something akin to GC, but based solely upon accessability.

The suggestion is that this might allow mutators more freedom of
action (i.e. increased concurrency).

Healf pointed out that the implied semantics of Read/Write Barriers in
the briefing document seemed to be unnecessarily restrictive.  His
understanding is as follows:

  - Read and Write Barriers are constraints upon the way that the
    Load/Store operations are applied.

  - In particular, **all** of the basic moves ( .load .store .drop .splat )
    can still be applied when either of the barriers are in force.

  - However, write barriers constrain store operations to a certain
    colouring constraint involving the root node for each mutator.

  - Likewise, read barriers constrain load operations.

Healf also said he believed that Collectors have their own colouring
maps - the colouring wasn't global or shared.  Rod suggested that this
must impose more constraints - some of that colouring information
would be necessary for coordination.  I was unclear about the
relationship between Collectors, Tracers and Mutators.  I had thought
the relationship was as follows:

   - Each Mutator is a process coordinated by a Tracer.
   - Each Tracer is a process coordinated by a Collector.
   - There may be several Collector processes.

Clarification on the role of these is needed by me at least.

Reaching the ML modelling material, the first main comment was that this
modelling has started several times before - and this seems to be yet
another cut at this.

My response was that:

   (a) this was a result of my _recent_ briefing with Richard and so
       represents some of Hqn's current thinking.  

   (b) Richard had pointed me at some of the previous work by Healf and
       himself.  This I took to be advisory - especially as part of this
       didn't typecheck correctly - at least as far as I could see from a
       cursory attempt to make it work.

       Ideas from Healf's and Richard's previous work have influenced
       the current attempt.

   (c) I would endeavour to make use of concepts that were familiar to
       those concerned.

Rod commented that by getting to know a bit more about what LEGO and
PVS provide, this may help to reuse notions already known and
understood.  He also mentioned the modelling work started by John
Longley, together with that done by Richard himself.

I also pointed out that the model itself wouldn't just reflect my
personal understanding, but as far as possible, the content of the
model would have been seen by Richard at some stage, if not written by
him in the first place.  I will be working on this from time to time
but always in collaboration with & under the direction of Richard.

The remaining comments on the ML were fairly brief:

   Rod noted that Richard had used the notion of `Container' instead of
   Set - where Containers are things that can be mapped over.  This
   allows sequences, maps, multisets (bags) and sets to be all viewed in
   a similar way.  I hadn't done this - Rod wondered why not?  This
   issue should be considered soon - it is relatively easy to change at
   the moment.

   Rod described how some useful approximation ideas on graphs might go.
   This lead me to think that the general concept of `graph morphism'
   would be useful.  This could be added into the GRAPH signature.

   In the GRAPH signature, Rod commented that the type `items' could
   be more clearly named `nodeset'.

   The partition datatype presently includes a `flag' value which
   indicates whether a partition is a reference partition or not.  Rod
   suggested reflecting the distinction into the typing by introducing a
   `reference partition' type.

   Healf commented that the formalisation of model hadn't reached any of
   the specific operations - it was still too general to be useful.  I
   agreed and said we would formalise all that is currently in the
   briefing document - perhaps with the exception of the
   .utility.function concepts for moulding MM performance to programmer
   expectations.  Healf particularly mentioned the details concerning
   the moves used when read/write barriers are in effect.

   In addition, neither the briefing document nor the present code
   mentions lower-level representation notions such as:

      Muti-Zones, Segments, Objects, Memory, Pools

   Both Healf and Paul were adamant that more concrete algorithmic
   detail is required.
 
   We briefly discussed the SpecML material - no problem there (verification
   is likely to be classical i.e. in PVS).  I mentioned I intended to add
   some state combinators - state is therefore a convention - and thus this
   preserves referential transparency (i.e. soundness of substitution).
   Paul remarked that this is similar to the `monad' treatment of state.

   There was some discussion of the `choose' operation upon general
   sets.  A general construction of this is difficult - but a standard
   (classical) dodge is to assume the Axiom of Finite Choice over
   arbitrary types (e.g. existence of a linear well-ordering).  This
   gives a canonical choice (e.g. the epsilon operator in simple type
   theory/HOL) of an element.  So this isn't too much of a problem
   after all.  It only arises in ML code as a result of abstracting some
   feature in lower-level code that we don't wish to reflect in detail.

   Concerning the `require' file-dependency code, Healf remarked that this
   looked natural and wondered why no-one had done this earlier.



2.  Other related work.
-----------------------

Both Paul and Healf have recently visited conferences - LICS etc.
Healf mentioned that Bob Constable's group is actively doing
verification work in the MM area.  This is all generally available on
a website (some variant of www.cs.cornell.edu).  Healf said he would
chase this up a bit further.

Paul asked why we weren't using CAML for this modelling work.  In
particular, he also asked if SML had record update.  Healf responded
that the main reason for ML is because it is for Harlequin to choose
rather than LFCS's.  I pointed out that record update in CAML is
imperative and hence not so useful here (but record update can be
applicative ... copying semantics).

Paul continued to press the point about their need for concrete code.
He remarked that Gauntier from INRIA Rocquencourt had specified the
CAML Special Lite GC in POPL 94 (Paul claims this algorithm to be
concurrent, incremental, etc., etc.) and has recently managed to
verify this (possibly in COQ).  Paul said this was an impressive tour
de force - in that the algorithm was very non-trivial (apparently
state-of-the-art).  Also, the verification may have apparently
involved using type-theoretic program extraction ideas to get an
efficient implementation from the proof.  Paul said that Gauntier
emphasised the need for a low-level concrete algorithm to work with -
the implication being that abstraction hierarchies get in the way.

I believe that Paul said he would get more information concerning this
(e.g. photocopies of the POPL '94 paper and other relevent work).

Paul is currently writing a low-level state transition based GC
algorithm from which he intends to abstract ideas for his verification
work.  Healf is particularly interested in doing work involving our model
and seems quite prepared to help develop it jointly. 


3.  LEGO.

Rod introduced me to Tim Head who is helping out with the LEGO system
while doing his PhD (I think).  I also got some instruction from Rod
himself - he made it look effortless.  I have downloaded the latest
stand-alone LegoML image for SunOS 4.* (built upon SML/NJ) plus the
emacs-editor mode which seems very useful.  Tim said he would seek out
some course notes.

There was some side-discussion of collaboration between the COQ group
in INRIA and the LEGO group.



4. Actions


.brianm : Complete more of the model so that Healf and Paul get more
          material to work with.  In particular, they want to deal with more
          low-level details.

.healf :  Find references to the Cornell work.

.paul  :  References to Gauntier work (+ photocopies ...)

.lego-brianm :  Brian M. to acquire current Lego system and to become
          familiar with it.  Then acquire fluency with Lego - course + examples.


