   NOTES FROM MEETING WITH SCRIPTWORKS INTEGRATION GROUP, 1996-06-06
                        meeting.swig.1996-06-06
                               draft doc
                           richard 1996-06-07

INTRODUCTION

.intro: Richard Brooksby, David Jones, and Nick Barnes met Brad Hampson, Peter 
Westlake, Sarah Woodall, and Cindy Wells to discuss details of memory 
management builds using SWIG machines and resources.  (See 
mail.kap.1996-05-24.15-52 for approval and background.)


PROCEDURE

.proc: The builds of the MM and the builds of ScriptWorks are _not_ dependent.  
The MM build will be used to build and test MM products which will go through 
QA and be delivered to SW by checking binaries into the SW source tree under 
Hope (see mail.kap.1996-05-24.15-52).


DISK REQUIREMENTS

.disk.pc: The PC build currently takes about 80Mb per platform but can be 
reduced to around 5Mb per platform by eliding those pesky source browser 
databases (SBRs).

.disk.mac: The Mac build currently takes about 1Mb per platform.

.disk.unix: Unix builds currently take about 20Mb per platform (based on 
platform.suspgc).


BUILD TOOLS

.builder.gnumake: The MM Group rely on GNU Make for builds.  GNU Make is not 
used by the SW build, but can be made available on all the platforms without 
much difficulty.  GNU Make is known to have some bugs, but since these builds 
will always be from scratch the bugs won't cause hidden failure.  It would not 
be too difficult for MM to generate build-everything scripts independent of GNU 
Make if necessary.

.builder.sc: SunPro C for UltraSPARC is not yet available in house and no 
information is available about it.

.builder.ntpp: The NT PowerPC machine belongs to an OEM and is currently on 
loan.  The status of the PowerPC deliverable is questionable.  Peter has used 
the SDK C compiler (builder.mc) in the past, but has a version of Visual C 
ready to install.  The MM Group will use this instead, to avoid proliferation 
of compilers.

.builder.mw: It's not known whether Metrowerks output and MPW output are 
completely compatible.  This needs to be investigated for Mac delivery.


BUILD VARIETIES

.var: Build varieties are what the MM Group call their builds with various 
flags set (assertions, debugging, etc.).

.var.sw: ScriptWorks only really needs two varieties: release (no debug, no 
assert), and debug+assert.  Other varieties can be generated if necessary.  
(Angus may have something to say.)

.var.df: MM has a "full debugging" variety which is very slow (~1000%) but has 
good checking.  Sarah said that this could be useful for developers and should 
be supplied.


BUILD AUDIT

.audit: Peter asked that, if possible, we should supply or create tools which 
can identify how a particular binary was made, in particular, which sources it 
was made from and with which flags.  (Build dates would also be useful.)  
Richard said that a static "$HopeName$" style string is already embedded in the 
binaries.  We could extend it and develop a tool for extracting it maybe.


MACHINES

.mach: Here is a list of the machines on which builds will take place, by 
platform, with physical location and where to find the build results.

.mach.sospgc: umtata, Longstanton, see ~build.

.mach.irr4cc: atilla, Longstanton, see ~build.

.mach.suspgc: sorrol, 2QC, see ~build.

.mach.nti3mv: ISAMBARD, Hall (with Peter), \\ISAMBARD\SRCBUILD\.

.mach.ntalmv: OGRE, Hall (with Peter), \\OGRE\SRCBUILD\.

.mach.ntppmv: OEM, Hall (with Peter), \\OEM\???.

.mach.s7m6mw: McNugget (Quadra 950), Hall (loft), 
Phase-2-Ethertalk:McNugget:SRC.

.mach.s7ppmw: Cross-compile on McNugget until PowerPC is available.


SCRIPTWORKS COMPONENT STRUCTURE

.str: This is a discussion of how the deliverables will be arranged in the 
ScriptWorks source tree.  (See mail.richard.1996-05-14.14-27 for original 
proposal.)

.str.platform: The proposal is fine, except that it means that every platform 
will get a copy of every binary for every other platform, which is wasteful.  
The solution is to create sub-compounds for each platform class (Mac, Unix, and 
PC) and for make and glue sources, then parent these inside several MM 
component compounds, and these inside the appropriate products.  This will 
reduce the duplication.  e.g.

  SWprod_pc                  pc
    SWmm_pc                    mm
      make:makefile.pc           make\makefile.pc       (PC specific makefile)
      SWmm_export                export                 (headers)
      SWmm_src                   src                    (glue layer sources)
      nti3mv:dp:mmsw.lib         nti3mv\dp\mmsw.lib     (Win32, Intel, debug MM 
library)
      nti3mv:ro:mmsw.lib         nti3mv\ro\mmsw.lib     (Win32, Intel, release 
MM library)
      ntalmv:dp:mmsw.lib         ntalmv\dp\mmsw.lib     (Win32, Alpha, debug MM 
library)
          :                         :                       :

.str.make: The makefiles in the MM component (inside SW) will conform to the SW 
build system, compiling glue sources and copying the MM library objects to the 
appropriate places.


OTHER NOTES

.prod: Sarah suggested that builds should, in general, produce a completed 
"product" ready for manufacture.


ACTION

.act.gnumake: Richard will make sure GNU Make is available on all the Unix 
machines.

.act.eto: Richard will make sure that Metrowerks output can be linked with MPW 
output.

.act.ntpp: Brad will find out the status of the NT PowerPC deliverable (from 
martinb?).

.act.visit.mac: Richard will visit Cindy on Tuesday morning to set up Mac 
builds.  (Involves installing Metrowerks Codewarrior.)

.act.visit.unix: David will visit Sarah on Monday morning to set up Unix builds.

.act.visit.pc: David will visit Peter on Monday morning to set up PC builds.  
(Involves installing the PowerPC Visual C.)

.act.mw: Brad will order a licence for Metrowerks Codewarrior for SWIG.

.act.list: Brad will set up a mailing list for the ScriptWorks Integration 
Group (swig).

