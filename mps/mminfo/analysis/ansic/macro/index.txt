                 HOW MACROS ARE PROCESSED IN STANDARD C
                          analysis.ansic.macro
                               draft doc
                            nickb 1996-10-21

Foreword

.scope: This is a description of macro processing in ISO Standard C 
(standard.ansic).

.readership: This is intended to be readable by any interested Harlequin 
employee.

.ref: References are to the standard.

.disc: Use this description at your own risk. Let the standard be your guide.

Body

.define: We all know what macro definitions look like. The "body" of the macro 
definition is called "the replacement list". Macros with arguments are 
"function-like macros" . Macros without arguments are "object-like macros".

.name: I call the ## operator "paste" and the # operator "string".

.obj: Rules for object-like macros
.obj.replace: (6.8.3)
 Each subsequent instance of the macro name is replaced by the
 replacement list.

.fun: Rules for function-like macros
.fun.replace: (6.8.3)
 Each subsequent invocation of the macro is replaced by the
 replacement list, after substitution. Commas and matching
 parens are used to identify arguments. Each argument must be
 present. The right number of arguments must be
 present. Preprocessing directives must not appear in the
 arguments.
.fun.substitute: (6.8.3.1)
 Each parameter in the replacement list, not preceded by # or ## or
 followed by ##, is replaced by the matching argument.
.fun.substitute.argument: (6.8.3.1)
 Each argument is completely macro-expanded before this replacement.
.fun.string: (6.8.3.2)
  Each # shall be followed by a parameter, which is replaced by
 the spelling of the matching argument. Whitespace at beginning
 and end is removed. Any string of whitespace in the middle is
 replaced by a single space. String literals and character
 constants have a \ inserted before each " and \, including the
 delimiting " characters.
.fun.string.paste: (6.8.3.2)
 The order of evaluation of # and ## is unspecified.

.paste: (6.8.3.3)
 Each ## shall be between two tokens. The ## is deleted and the
 two tokens are concatenated to make one token. The result must
 be a valid token.
.paste.fun: (6.8.3.3)
 A parameter preceded or followed by a ## is replaced by the
 matching argument tokens before the concatenation.
.paste.order: (6.8.3.3)
 The order of evaluation of ## operators is undefined.

.rescan: (6.8.3)
 After each macro replacement is complete, the replacement list
 is then rescanned for more macro expansion.
.rescan.recurse: (6.8.3.4)
 In this rescanning, the macro name replaced is unavailable for
 replacement.
.rescan.directive: (6.8.3.4)
 Macro replacement cannot construct preprocessing directives.


