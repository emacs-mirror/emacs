                    ANALYSIS OF THE PROCESS PROJECT
                            analysis.process
                             incomplete doc
                           gavinm 1996-07-08

INTRODUCTION

.intro: We aim to produce process as a product of the group, both for internal 
use and as an external product.  Imagine the production of a handbook that told 
you everything you need to know about successful project process.


GOALS

.goal.project: Guarantee success (= acheive goals of project)

.goal.client: Contribute to client success (avoid scuppering clients).

.goal.staff: Contribute to success of project staff (don't upset workers)


REQUIREMENTS
.req: As usual, the requirements and metrics are vague.

.req.client: Ensure the project meets the client's true needs. Metrics: 

  .req.client.feedback: Negative feedback; 

  .req.client.defect: Defects (quality of solution); 

  .req.client.new: New feature requests/new or changed requirements (accuracy 
of requirements) after final release.

.req.staff: Ensure the work contributes to personal goals of staff.  Metrics: 

  .req.staff.morale: Morale; 

  .req.staff.satis: Personal satisfaction.

.req.resource: Minimise resource requirement.  Promote efficiency.  Metrics: 

  .req.resource.super: Meeting superfluous (non-)requirements; 

  .req.resource.unused: Providing unused features; 

  .req.resource.waste: Waste.



SOLUTION IDEAS

.idea.determine: Try determine the client's true needs by meetings, 
negotiation, documentation, review, approval, categorisation, tagging, audit 
(tags out), and mapping spaces.

.idea.plan: Plan what work requires to be done and determine status by 
identifying and classifying tasks, estimating, scheduling, allowing for 
contingencies, evolutionary planning, and tracking progress.

.idea.evol: Use evolutionary delivery for frequent delivery, early risk 
elimination, close targets, feedback from real applications, and detect unused 
features. 

.idea.inspection: Use's Fagan's Inspection Technique.

.idea.proc: Document and develop procedures.

.idea.analysis: Perform analyses (goal/req/sol/impact) to support 
decision-making.

.idea.infosys: Design, create and use an information system of appropriate 
complexity and rigidity.

.idea.appraisal: Carry out performance reviews to determine staff satisfaction 
and morale and analyse how to improve themby determining and analysing staff 
goals, feedback into practices, track regularly and frequently (quarterly).

.idea.improve: Close the process improvement loop by feedback, post-mortem, and 
learning from experience.

.idea.test: Test the product against the requirements.

.idea.feedback: Obtain, analyse and use customer feedback.


IMPACT ANALYSIS

(out of 10)	.req
	.client
	.feed
	back	.req
		client
		.defect	.req
			.client
			.new	.req
				.staff
				.morale	.req
					.staff
					.satis	.req
						.resource
						.super	.req
							.resource
							.unused	.req.
								resource
								.waste	Total
									Benefit	Over
										head
										(%)	Ratio
											(Benfit/
											Cost)
.idea.determine *	9	0	7	6	4	9	3	2	40	4	10.0
.idea.plan	0	8	0	6	1	0	0	8	23	7	3.3
.idea.evolve	5	7	8	7	3	7	2	2	41	10	4.1
.idea.inspect	3	9	4	8	6	3	3	5	41	15 (20?)	2.7
.idea.proc	2	7	0	7	1	0	0	8	25	5	5.0
.idea.analyse *	8	2	9	4	2	6	3	7	41	5?	8.2
.idea.feedback *	7	1	6	5	2	4	7	0	32	3	10.7
.idea.infosys *	2	7	1	6	1	1	0	7	25	1	25.0
.idea.appraisal *	0	0	0	7	8	1	0	3	19	2	9.5
.idea.improve *	4	7	4	4	5	3	2	7	36	5	7.2
.idea.testing	8	7	0	2	0	0	0	0	17	20	0.8
Total	48	55	39	62	33	34	20	49	340	77	
Selected	30	17	27	32	22	24	15	26	193	20	9.6
* indicates selection


RECOMMENDATIONS

.rec.selected: This impact analysis would lead to the selection of (in order): 
.idea.infosys, .idea.feedback, .idea.determine, .idea.appraisal, .idea.analyse, 
and .idea.improve.

.rec.benefit: Most benefit requirements are well covered by selected solutions, 
exceptions being .req.client.defect and .req.resource.unused which achieve 100% 
coverage, but not the recommended factor of two.  Note that 
.req.resource.unused is weak in all solutions, but .req.resource.defect has a 
strong total.  See also .rec.intuition.

.rec.cost: The total cost of the selected solutions is a 20% overhead.  There 
was no planned level for this, but this figure sounds reasonable.

.rec.intuition: The selected ideas all correspond well with my intuition.  
Among the rejected ideas, I am surprised to find .idea.evolve and 
.idea.inspect.  These had strong benefits, but high costs.  If their costs 
could be reduced (e.g. by review as opposed to inspection), they are definite 
candidates.  Note also that they are both have a strong impact on 
.req.client.defect (see .rec.benefit).


RISKS

.risk.defect: As noted in .rec.benefit, these recommendations do not meet 
.req.resource.defect well.  It is true that it can be expensive to keep the 
defect rate down, but it is often far more expensive downstream.  Why was this 
downstream costs not modelled?


COST

.cost: This analysis took Richard and GavinM one afternoon: 8 man-hours.

