                           PLANNING ANALYSIS
                             analysis.plan
                             incomplete doc
                           richard 1996-07-11

INTRODUCTION

.intro: This document sets out the goals and requirements of planning within 
the Memory Management Group, and proposes and analyses solutions.

.quote: "Plan the work and work the plan."


GOALS

.goal.estimate: To estimate the resources required to meet (changing) 
requirements reliably and efficiently.

.goal.execute: To ensure that requirements are met within the estimates 
produced, both reliably and consistently.

.goal.risks: To understand and manage risks to project success.

.goal.assess: To be able to assess and report the impact of changes in 
requirements.

.goal.motivate: To motivate group members by communicating objectives and 
successes.


REQUIREMENTS

.req.boot: Planning must bootstrap itself.  The planning procedure should not 
_require_ that it was followed before, but could make use of the fact.  The 
reasons for this are:

  - it can be introduced in situations where it hasn't been used before;

  - it can be reinstated after a lapse.

.req.overhead: Planning must have a low overhead.  No more than 20% of 
Richard's time should be spent constructing, maintaining, and tracking plans.

.req.fast: The planning process must be able to yield approximate but reliable 
results quickly, along with some measure of the degree of approximation.  This 
means that it can be applied quickly in urgent situations with a known risk.  
This requirement could also contribute to .req.assess by making it possible to 
do quick-and-dirty assessments.  It should be possible to produce approximate 
assessments given only four hours.

.req.assess: It must be possible to assess the impact of a change in 
requirements quickly and easily.  [How quickly?]

.req.risks: Planning must yield an assessment of risks.  [In what form?]

.req.available: Plan must be available to group members and senior management 
[and others?] at all times.


SOLUTION IDEAS

.idea.evo: Use evolutionary delivery planning.  Renegotiate requirements as 
necessary.  Construct a spreadsheet showing the new requirements against 
releases and plot the degree to which the previous releases have met them.  
Starting with the release which most closely satisfies the requirements, list 
the requirements which are not met.  Analyse each one in order to estimate the 
work needed to satisfy it.  The total will give you an estimate of the work 
needed to meet the requirements.  Use this information to (re-)assess the 
feasibility of the whole project.  Prioritize the requirements, putting those 
which have greatest value to the client but lowest cost first.  Also, seek to 
eliminate risk as early as possible.  Define the next release to occur as soon 
as possible and have maximum value to the client, working on the principle of 
"how little can we do?" (book.gilb88 pp227-248).  Decide on some future 
releases beyond that in order to get early warnings of risks, but don't spend 
too much time on them.  You now have a set of requirements to be met by the 
next release.  Analyse these in more detail to discover and specify the work to 
be done.  Schedule the work.  Execute it, tracking progress and adjusting the 
specifications as necessary.  When the work is done, release.  Then start again.

.idea.review: Review plans.

.idea.infosys: Store plans in the information system.

.idea.tool: Use a commercial third-party planning tool.

.idea.wbs: Use a Work Breakdown Structure to classify the work to be done.

