                ANALYSIS OF DESIGN DECISIONS IN POOLMRG
                          analysis.mps.poolmrg
                             incomplete doc
                             drj 1997-02-13

INTRODUCTION

.readership: any MPS developer

.intro: This is an analysis of the design decisions that are reflected in 
design.mps.poolmrg.  It is part rationale, part excuse, and part discussion.  
This document should be consulted whenever design.mps.poolmrg is changed.


HAZARDS

.hazard.shield: An earlier design had the two parts of the guardian joined.  
This introduced a problem as a guardian may have been placed on a shielded 
segment, and the pool would attempt to make use of the link part of the 
guardian only to generate a fault resulting in (fatal) recursive entry into the 
MM.  It wasn't possible to avoid the fault by using the Shield's expose and 
cover mechanisms as the pool couldn't tell what segment it was about to access 
(if it performed a RingNext for example).


IMPROVEMENTS

The following is a list of suggested improvements to the design.  None of these 
are implemented.

Free

.improve.free: Free makes no attempt to return unused segments to the arena.  
There are a number of ways in which this might be improved.

.improve.free.count: Keep a count of the number of allocated objects.  If this 
drops to zero, then consider returning all segments to Arena.

.improve.free.return: There is a way to return free segments to the arena and 
still keep the costs down to O(1) per free.  Let S be of the order of the total 
memory used by the pool (for example, the sum of sizes of each segment).  Every 
S frees iterate over the free list and for each guardian replace the link 
entries with NULL.  For each link part segment perform the following: remember 
the free list at the moment, check each guardian in the segment, if it has a 
NULL link field, relink it onto the free list (note that only guardians which 
were originally on the free list will have a NULL link field), if at the end 
all the units were free then return both the link part segment and the ref part 
segment to the arena and reset the free list to its state before you examined 
the segment.  This relies on the fact that each ref part has a associated link 
part that the pool uses for its own purposes (which is why PoolMFS cannot use 
this technique).

.improve.free.lousy: .improve.free.count and .improve.free.return will both be 
not very effective unless the allocator makes some attempt to allocate objects 
on the same page (thereby increasing the likelihood that there will be 
completely empty segments).

.improve.free.seg: Maintain in each group a count of the number of live 
guardians in the segment.  If this drops to 0, consider freeing the segment.  
Use hysteresis to avoid thrashing.

Scan

.improve.scan.nomove:  If an object is found to be finalizable and the 
referring  guardian is already in the exit queue then there is no need perform 
the remove and add (design.mps.poolmrg.scan.wasold).  This has not been done 
because it is not currently possible to determine (easily) what queue a 
guardian is on.

Semantics

.improve.semantics:  The current semantics are rather weak (there is not 
guarantee about ordering, but cycles are finalized), stronger semantics are 
provided by the Apple Dylan termination scheme (briefly, objects are finalized 
in (pre-) order, and cycles are arbitrarily broken, see 
mail.moon.1994-10-20.09-48).  For an outline of how we could implement those 
semantics see mail.ptw.1997-02-05.04-19 and mail.drj.1997-02-05.08-56 [collate 
and summarize those documents here].



