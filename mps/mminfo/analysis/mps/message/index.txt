                     ANALYSIS OF DESIGN OF MESSAGES
                          analysis.mps.message
                             incomplete doc
                             drj 1997-07-15

INTRODUCTION

.intro: This is an analysis of the decisions and non-decisions that were made 
in the design of the message module in the mps (see design.mps.message).


DECISIONS

.decide.message.contents: (see design.mps.message.if.fun.deliver and 
design.mps.message.type.struct.fill) The current design allows mps clients to 
access the contents of a message by declaring a structure of the appropriate 
type (appropriate to the type of the message) and delivering the message into 
it (which effectively copies the message into the struct).  An alternative is 
to provide type-specific functions which can be used to access the message 
abstractly.  This was not done because it results in many more declarations and 
is less uniform.  richard says it is easier to extend (see 
mail.richard.1997-07-15.09-48(0)), but I don't see this.

.decide.deliver.rm: (see design.mps.message.if.fun.deliver) The current design 
removes the message from the head of the queue simultaneously with delivering 
its contents to the client.  An alternative interface with separate deliver and 
delete calls was considered, but this is less robust for multithreaded 
applications.  If there are separate calls for deliver and delete then a client 
must interlock for the duration of a deliver/delete pair or else risk losing 
messages (consider what happens if two threads go {deliver, delete} and it 
interleaves like {deliver, deliver, delete, delete}.  The same message is 
delivered twice and the second message to be deleted is never seen.


HAZARDS


IMPROVEMENTS


