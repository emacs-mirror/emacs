                         #REVIEW ON 1997-10-15
                         irc.review.1997-10-15
                               draft doc
                           gavinm 1997-10-16

.logbot.14-36-12: JOIN

.logbot.14-36-12.1: This channel is logged to irc.review.1997-10-15

.logbot.14-36-12.2: Well, here I am in AMERICA..  I LIKE it.  I HATE it.

.logbot.14-36-12.3: I LIKE it.  I HATE it.  I LIKE it.  I HATE it.  I LIKE it.

.logbot.14-36-12.4: I HATE it.  I LIKE..  EMOTIONS are SWEEPING over me!!

.ptw0.14-37-48: JOIN

.logbot.14-37-48: This channel is logged to irc.review.1997-10-15

.logbot.14-37-48.1: Hey, waiter!  I want a NEW SHIRT and a PONY TAIL with lemon 
sauce!

.gavinm.14-40-10: TOPIC: Review of drop-in interface

.pekka.14-40-19: JOIN

.logbot.14-40-19: This channel is logged to irc.review.1997-10-15

.logbot.14-40-19.1: ..  ich bin in einem dusenjet ins jahr 53 vor chr...

.logbot.14-40-19.2:  ich lande im antiken Rom...  einige gladiatoren spielen 
scrabble...

.logbot.14-40-19.3:  ich rieche PIZZA...

.gavinm.14-40-19: TOPIC: Review of drop-in interface: Loggin Meeting

.gavinm.14-40-22: TOPIC: Review of drop-in interface: Logging Meeting

.gavinm.14-40-38: nick?

.nick.14-41-08: Why does it tell me ptw is in use?

.gavinm.14-41-24: Dunno.

.pekka.14-41-28: because it is?

.gavinm.14-41-34: Maybe you have a hung session.

.sheep.14-41-44: JOIN

.logbot.14-41-44: This channel is logged to irc.review.1997-10-15

.logbot.14-41-44.1: PIZZA!!

.the.14-41-52: Er, having not been on since 2 weeks?

.sheep.14-41-56: hello ? 

.gavinm.14-42-02: Hello.

.pekka.14-42-05: There's a ptw logged in from myteline

.gavinm.14-42-05: Let's start.

.pekka.14-42-14: idle for 15 min?

.sheep.14-42-17: I'm here

.gavinm.14-42-25: design.product.soft.drop.manual

.sheep.14-42-27: IN BLACK

.gavinm.14-42-44: Could I have defect counts, actual checking time, and 
completion from everyone, please.

.tucker.14-42-55: for the first document?

.gavinm.14-43-11: 1M 10m 1q, 35 minutes, 100% complete

.gavinm.14-43-14: design.product.soft.drop.manual

.tucker.14-43-35: 38 minutes, M: 2, m: 3, C: 1, q: 6, I: 1, 100%

.pekka.14-44-01: m: 7, C: 2, 35 min, 100%

.sheep.14-44-02: 1M 8q 30mins 100% complete 

.gavinm.14-44-22: Thanks.  Could I have major defects, by person, please.  
Tucker?

.tucker.14-44-32:  M .anal.files.configurable.cpp Is there a danger of name 
collision if C uses binaries containing C++ parts?

.tucker.14-44-41:  M .arch.finish Why is this issue not discussed in .sol and 
.anal?

.tucker.14-44-46: ./

.gavinm.14-45-01: Thanks.  Sheep?

.sheep.14-45-33: M is .sfot.drop.auto assumes that this is a drop in  GC. 

.sheep.14-45-51: It's unclear as to what exactly is ment (conflict of clarity)

.pekka.14-46-45: Tucker: .anal.files.configurable.ccp -- even if we use a 
suitable prefix>

.gavinm.14-46-45: Thanks.  Pekka?

.pekka.14-46-48: ?

.pekka.14-46-51: none

.gavinm.14-46-51: Oh, none.

.gavinm.14-46-54: GavinM?

.gavinm.14-47-13: .anal.extensions M We will fall down severly if we don't 
implement MM extensions people may rely on, such as msize or stackalloc

.gavinm.14-47-41: Ok.  Non-majors by person.  Tucker?

.tucker.14-47-54:  I design.product.arch.soft.drop.* I am unclear as to how the 
.manual and .auto interfaces differ.

.gavinm.14-47-57: Please remember to watch defects as they go past, with a view 
to finding new ones.

.tucker.14-48-06:  m req.fun.platfrom.* platfrom -> platform

.tucker.14-48-12:  q  Do we have market justification for req.fun.platform?

.tucker.14-48-22:  C  It would be clearer if the solution analysis stated 
explicitly which solution was chosen.

.tucker.14-48-32:  m .arch.size Unclear: does the client of the C interface 
need the size?

.tucker.14-48-40:  q arch.init Have we investigated how other malloc libraries 
acheive initialization?

.tucker.14-48-49:  m .arch.init Is there a performance impact from this 
(first-time flag)?

.tucker.14-48-56:  q .arch.finish Can we not override _exit to acheive this?

.tucker.14-49-04:  q .fun.realloc I don't understand \"for a NULL pointer 
argument ... do as malloc does\"

.tucker.14-49-19:  q .fun.free This is an improvement on the standard, is it 
not?  How does this fit with \"drop in\"?

.tucker.14-49-30:  q .operator.delete Do we have to do something to support 
class-specific operator delete(void*, std::size_t)?

.tucker.14-49-38: ./

.pekka.14-49-45: Tucker, what analysis does your C refer to?

.gavinm.14-51-03: Tucker?

.tucker.14-51-14: In your analysis section, you specify some pros and cons, but 
leave it up to the reader to decide which is the best.

.gavinm.14-51-32: Thanks.  Sheep, non-majors?

.tucker.14-51-39: I was suggesting you say:  "Therefore we choose solution X"

.pekka.14-51-57: What do I use the SOLUTION section for then?

.sheep.14-52-03:    Non but I hae a number of questions which might be 

.pekka.14-52-14: Not that I like this organization

.pekka.14-52-30: Those are non-majors.

.sheep.14-52-55: OK I'll forward some questsions

.tucker.14-53-06: The solution section seems to list all the ideas without 
saying whether they are good, bad, or otherwise.

.sheep.14-53-17: so.recursion.ann-turnoff might this effect the expected 
behaviour of malloc

.gavinm.14-53-25: [ that's what the analysis section is for. ]

.tucker.14-53-29: Somewhere the document should say what was chosen to be 
implemented, no?

.gavinm.14-53-39: [ PTW, Yes.]

.sheep.14-53-47: I'd like to quible with anal.file.config.cpp C++ run times 
tend to be quite big

.gavinm.14-54-32: That's a defect, then.

.sheep.14-54-38: in testing (ok perhaps this is a suggestion ) how about using 
Purify ? 

.sheep.14-54-48: or a runtime check for coruption

.sheep.14-55-08: I'd  like to suggest some things 

.pekka.14-55-14: Please give specific references, where possible.

.sheep.14-55-26: testing ...

.pekka.14-55-27: Using purify how?

.pekka.14-55-51: Tucker: .fun.free -- imporvement in what sense?

.gavinm.14-55-57: Perhaps there's enough logged on that, that youse can discuss 
it offline?

.gavinm.14-56-11: [ re purify]

.sheep.14-56-21: You have test.smartheap  which sugests ... 

.sheep.14-56-39: using another product I'm just chipping in with another.

.sheep.14-56-57: (product) Sheep shutting up on that subject

.gavinm.14-57-09: Let's try to avoid lengthy discussion, please.

.tucker.14-57-16: The standard says a double-free is undefined, does it not.  
You propose to signal an error.  This is an improvement.

.pekka.14-57-48: True. perhaps we shouldn't check.

.sheep.14-57-57: To be honest I'd suggest makeing a number of improvements ove 
the standard 

.tucker.14-58-10: My q is, are we allowed to "improve" in this sense?  (We do 
want performance improvement.)

.gavinm.14-58-14: Sheep, you have the floor for logging defects.

.sheep.14-58-48: Well 

.tucker.14-58-49: [what are Robert's Rules on request for clarification?]

.sheep.14-59-11: I'm not sure if all versions of all compilers support new[] 
(array new) 

.pekka.14-59-18: they don't

.gavinm.14-59-19: [ Tucker, dunno. ]

.gavinm.15-00-29: The idea here is to log issues sufficiently, but fairly 
quickly.

.sheep.15-00-35: I'd like to suggest some items to do  with the debug version 
and telemetry

.sheep.15-00-38: Q is this the place ? 

.pekka.15-00-45: no

.sheep.15-00-49: ok

.gavinm.15-00-52: Is it related to this review?

.sheep.15-01-29: After talking about this....

.sheep.15-01-48: I think we should also have an interface to malloc which is 
for debugging only 

.sheep.15-02-10: something like malloc_debug(size,__FILE__, __LINE__) 

.sheep.15-02-21: the info passed to the telemetry system

.sheep.15-03-02: I guess the debug version could also do something like filling 
with 0xE3

.sheep.15-03-22: And possibly puting on checks in for writing past the end of 
the object.

.gavinm.15-03-27: Ideally, we should be logging issues in less than 30 seconds 
each.

.sheep.15-03-45: Standard malloc does not assert 

.sheep.15-03-46: fone

.sheep.15-03-49: done

.gavinm.15-03-57: Thanks.  Pekka?

.pekka.15-04-01: req.product I incomplete

.pekka.15-04-19: req.product.plan I What is this for?

.pekka.15-04-27: .test.smartheap m (guide.tag.internal.form) tag must be 
lower-case

.pekka.15-04-32: .test.smartheap m typo "6bytes"

.pekka.15-04-44: .test.cpp.systematic m constructors and destructors are not 
relevant for testing this

.pekka.15-04-49: .test.* m no description of platform-specific tests

.pekka.15-04-54: .fun.set_new_handler m (guide.tag.internal.form) no _'s in tag

.pekka.15-05-01: .operator.new C formatting

.pekka.15-05-04: .arch.finish C space -> arena

.pekka.15-05-10: .arch.finish m explain 'backup allocator'

.pekka.15-05-16: .files.headers m We need a header file to describe the config 
variable

.pekka.15-05-19: That's it.

.gavinm.15-05-42: Thanks.  GavinM?

.gavinm.15-06-00: .sol.telemetry,.sol.recursion,.sol.aa m These aren't 
solutions, they're problems.

.gavinm.15-06-06: .arch.size m Should describe type and range and whether 
inclusive or exclusive

.gavinm.15-06-14: .arch.init m Surely we can make this thread-safe on at least 
some platforms?

.gavinm.15-06-25: .fun.realloc m Surely it is both important and easy to 
support non-moving shrink on many platforms?

.gavinm.15-06-32: .macro q How can we get around this with binary compatability?

.gavinm.15-06-41: .test.smartheap m e/crate/create/

.gavinm.15-06-47: .test.smartheap m a/object/s/

.gavinm.15-07-03: Any new issues?

.pekka.15-07-14: Gavin: .arch.size -- the type of the size?

.gavinm.15-07-28: Yes.  I know it's size_t, but this is a design point.

.sheep.15-07-43: Q   Can size_t be negative ?

.pekka.15-08-27: no

.gavinm.15-08-31: .arch.size is talking about the size of the block plus the 
header size (not documented in design).

.gavinm.15-08-43: This might have been put in a larger size, but hasn't.

.gavinm.15-08-51: Ok.  No new issues.

.gavinm.15-08-57: impl.c.mpsmal

.gavinm.15-09-12: Defect counts, checking time, and completion from everyone, 
please?

.gavinm.15-09-26: 2M 7m 2C 3q, 37 minutes, 100%

.tucker.15-09-29: 0%

.sheep.15-10-09: 5M 5m  several q's  30 mins 100%

.pekka.15-10-35: 1 M, 1m, 15 min, 100 %

.gavinm.15-10-47: Thanks.  Majors first, by person.  Sheep?

.sheep.15-11-13: hang oin 

.sheep.15-11-17: hang on 

.sheep.15-11-42: l;ine 131 in free 

.sheep.15-12-00: should the code either init or assert inited ? 

.sheep.15-12-24: Same for realloc 

.sheep.15-13-13: Macros in upper and lower case is confusing ...

.sheep.15-14-32: same for 79

.sheep.15-15-00: 81 should we have an assert over negative size 

.gavinm.15-15-54: [ 7.1.6 says size_t is "unsigned integral type" ]

.sheep.15-16-03: If can never be negative then possibly someone might call 
malloc ( 0 - 56 ) or something which would turn into a call for a super large 
object

.pekka.15-16-16: That's C for you.

.sheep.15-16-28: 191 precidance assumpition ? 

.gavinm.15-16-32: [ We have already had such a bug with Dylan. 

.sheep.15-16-40: 208 assert not reached ? 

.sheep.15-17-10: done

.gavinm.15-17-18: Thanks.  Pekka, majors?

.pekka.15-17-32: 161 M mps_res_t is not guaranteed to be boolean, pointless 
here anyway

.pekka.15-17-32.1: .

.gavinm.15-17-56: [ It is so guaranteed. ]

.gavinm.15-18-06: Thanks.  GavinM?

.gavinm.15-18-12: 78 M "8" should be "CHAR_BIT"

.gavinm.15-18-18: 136,189 M This check relies on a violation of the interface.

.gavinm.15-19-20: Checking for a double-free by accessing possibly-freed 
memory, is a bit circular.

.gavinm.15-19-36: Ok.

.gavinm.15-19-48: Non-majors by person.  Sheep?

.sheep.15-21-09: I'm confused by this  use of void *(malloc)( size ) 

.gavinm.15-21-44: The ideal issue format is:

.gavinm.15-21-52: [location] [class] [description]

.sheep.15-22-04: LINE 179  I'm confused by this non normal presentaion

.sheep.15-22-54: line 81 line 145 line 1254 dito

.gavinm.15-22-58: Let's try to avoid lengthy discussion.

.sheep.15-23-19: line 114 calling convetion seems non normal too

.sheep.15-23-47: 154 Minor shoudl assert HEADER_SIZE is positve ?

.sheep.15-24-02: done

.gavinm.15-24-10: Thanks.  Pekka, non-majors?

.pekka.15-24-20: 181 m header_s is a stupid name, and not required by convention

.pekka.15-24-24: .

.gavinm.15-24-36: Thanks.  GavinM?

.gavinm.15-24-41: - m Long lines

.gavinm.15-24-46: 1 m Tag wrong

.gavinm.15-24-51: 4 m Wrong copyright message

.gavinm.15-25-11: 6 m readership unclear: maybe "any competent C programmer"?

.gavinm.15-25-18: - q Is there any requirement for our drop-in replacement to 
be freestanding?

.gavinm.15-25-29: 11 m size_t and NULL are both defined in stdlib.h (see 7.10)

.gavinm.15-25-40: 36 q When is our platform alignment larger that sizeof 
alignment, and if it is, why do we need platform alignment here?

.gavinm.15-25-53: 31-40 C We could have had a second char[1] member of this 
structure

.gavinm.15-26-04: 78 m Relies on number of bits in size_t being even

.gavinm.15-26-12: 62,115,157,165,184,191 m guide.impl.c.misc.single-step

.gavinm.15-26-20: 136,189 q Is this the best check we can do?  

.gavinm.15-26-26: - C Making size inclusive lets us distinguish zero-size 
blocks from free blocks

.gavinm.15-26-34: standard.ansic I 7.10.3.1 should define boundary cases more 
clearly

.gavinm.15-26-41: Done.

.gavinm.15-26-44: Any new issues?

.gavinm.15-27-12: Ok.  

.sheep.15-27-21: ME ! 

.tucker.15-27-36: 83-110 nm Overflow checking seems too complex.  Is there not 
a simpler form, such as verifying that the answer is larger than the inputs?  
Should the "hard way" be out of line?

.sheep.15-27-46: is there someway of avoiding long computes on the overflow 
compution

.tucker.15-27-52: 174 nm Is this the best way to do this?  There is not a 
standard min?  Or at least one that avoids multiple evaluation?

.pekka.15-27-58: Gavin 31-40: what for?

.tucker.15-28-11: 193-206 nM either use malloc/free or mps_alloc/mps_free.  
Mixing them is confusing and may lead future programmers down a garden path.

.gavinm.15-28-23: 31-40, it might make some of the conversion clearer.  Or 
maybe not.

.gavinm.15-29-22: Ok.

.gavinm.15-29-29: impl.cpp.mpsnew

.tucker.15-29-32: ./

.gavinm.15-29-38: counts, times, completions, please.

.tucker.15-29-49: 50 minutes, M: 1, m: 0, C: 0, q: 3, I: 1, 100%

.gavinm.15-29-53: 0 minutes, 0%

.pekka.15-30-12: 1 q, 1 C, 10 min, 100%

.sheep.15-30-57: 1 q 2minor 10min 100%

.gavinm.15-31-08: Ok.  Majors by, er, Tucker.

.tucker.15-31-17: 18 M  iso96a does not appear to explicitly allow replacment 
of set_new_handler

.tucker.15-31-38: ./

.gavinm.15-31-47: Thanks.  Non-majors by person.  Tucker?

.tucker.15-31-55:  q  Do we have to worry about namespace std?

.tucker.15-32-02:  I iso96a C++ already must know the size of an object, yet 
the interface to ::delete and ::delete[] do not utilize that knowledge, hence 
the size of each object must be stored twice.  I realize it is \"too late\", 
but we should be trying to create a standard, as we proposed in our MM workshop 
paper

.tucker.15-32-18:  q  Does the standard say anthing about how new/delete etc. 
interact with threads?

.tucker.15-32-25: ./

.gavinm.15-32-36: Thanks.  Sheep, non-majors?

.sheep.15-33-25: line 8 minor Shuold the header file contain information about 
redistribution ? This is going to be handed out to non HQ people

.sheep.15-34-33: line 103 new[] is that compiler version specfic 

.sheep.15-34-54: line 55 line 84 again this looks C++ version dependant 

.sheep.15-35-30: minor line 127 odd usage (again ) 

.sheep.15-35-37: done

.gavinm.15-35-55: Thanks.

.gavinm.15-35-59: Pekka?

.pekka.15-36-09: proc.review I Is there nothing we can do to get it print more 
widely?

.pekka.15-36-15: 131 C Could reference the appropriate section of the standard.

.pekka.15-36-17: done

.gavinm.15-36-37: Thanks.  Any new issues?

.tucker.15-36-41: nM Presumably the file that is shipped externally needs to be 
massaged to hide detail such as Hope, .readership, .sources, etc. and simply 
have a copyright at the top?

.tucker.15-36-48: ./

.sheep.15-36-51: question

.sheep.15-37-24: line 43 I thought the newHandler might be called more than 
once while loop not if

.sheep.15-37-28: minor 

.sheep.15-38-02: could easly be my understanding ( i don't have ansi c++ def on 
me ) 

.sheep.15-38-16: done

.sheep.15-38-58: OK sheep error

.gavinm.15-39-05: Ok.  Let's take a 5-10 minute break and reconvene for a 
process brainstorm.

.gavinm.15-39-20: TOPIC: Review of drop-in interface: Tea break

.sheep.15-39-24: ACTION grazes

.ptw.15-48-41: JOIN

.logbot.15-48-41: This channel is logged to irc.review.1997-10-15

.logbot.15-48-41.1: Gibble, Gobble, we ACCEPT YOU ---

.ptw.15-49-01: Why did my review channel just go away?

.ptw.15-49-48: I'm very confused -- now I appear to be on #review twice?

.pekka.15-51-52: Strange, I see the same thing.

.pekka.15-53-08: Are you sure you're not running two IRC clients?

.gavinm.15-54-20: Ok.  I'm ready.

.gavinm.15-54-48: There were 13 major defects.

.gavinm.15-54-56: design.product.soft.drop.manual

.gavinm.15-55-04: 1. PTW .anal.files.configurable.cpp M Is there a danger of 
name collision if C uses binaries containing C++ parts?

.gavinm.15-55-05:   Pekka: .anal.files.configurable.ccp -- even if we use a 
suitable prefix>

.gavinm.15-55-11: 2. PTW .arch.finish M Why is this issue not discussed in .sol 
and .anal?

.gavinm.15-55-17: 3. Sheep - M is .sfot.drop.auto assumes that this is a drop 
in  GC. 

.gavinm.15-55-17.1:   It's unclear as to what exactly is ment (conflict of 
clarity)

.gavinm.15-55-21: 4. GavinM .anal.extensions M We will fall down severly if we 
don't implement MM extensions people may rely on, such as msize or stackalloc

.gavinm.15-55-25: impl.c.mpsmal

.gavinm.15-55-32: 1. Sheep 131 M in free should the code either init or assert 
inited ? 

.gavinm.15-55-33:   Same for realloc 

.gavinm.15-55-33.1: 2. Sheep -,79 M Macros in upper and lower case is confusing 
...

.gavinm.15-55-38: 3. Sheep 81 M should we have an assert over negative size 

.gavinm.15-55-38.1:   GavinM: 7.1.6 says size_t is "unsigned integral type" 

.gavinm.15-55-38.2:   Sheep: If can never be negative then possibly someone 
might call malloc ( 0 - 56 ) or something which would turn into a call for a 
super large object

.gavinm.15-55-38.3:   Pekka: That's C for you.

.gavinm.15-55-38.4:   GavinM: We have already had such a bug with Dylan. 

.gavinm.15-55-43: 4. Sheep 191 M precidance assumpition ? 

.gavinm.15-55-44: 5. Sheep 208 M assert not reached ? 

.gavinm.15-55-44.1: 6. Pekka 161 M mps_res_t is not guaranteed to be boolean, 
pointless here anyway

.gavinm.15-55-44.2: 7. GavinM 78 M "8" should be "CHAR_BIT"

.gavinm.15-55-44.3: 8. GavinM 136,189 M This check relies on a violation of the 
interface.

.gavinm.15-55-44.4:   Checking for a double-free by accessing possibly-freed 
memory, is a bit circular.

.gavinm.15-55-47: impl.cpp.mpsnew

.gavinm.15-55-52: 1. PTW 18 M iso96a does not appear to explicitly allow 
replacment of set_new_handler

.pekka.15-56-12: d.p.s.d.m.1: that's supposed to be question mark after my 
comment.

.gavinm.15-56-16: Would people like to nominate issues they think worth 
discussing.

.gavinm.15-56-55: Designate documents ABC in obvious way.

.ptw.15-57-11: I thought I had a nM re: mpsmal?

.gavinm.15-57-18: Ooops.

.pekka.15-57-27: d.p.s.d.m.1

.pekka.15-57-59: d.p.s.d.m.3

.sheep.15-58-08: Sorry what are we try to do here ?

.gavinm.15-58-45: C2. PTW - nM Presumably the file that is shipped externally 
needs to be massaged to hide detail such as Hope, .readership, .sources, etc. 
and simply have a copyright at the top?

.gavinm.15-59-17: We want to pick 6 major defects, discuss each briefly and 
then find a way to avoid that type of defect in future.

.sheep.15-59-24: thanks

.gavinm.15-59-25: The key is process improvement.

.gavinm.15-59-39: No nominations?

.ptw.15-59-54: er, did I not have a nM for B also?

.ptw.16-00-15: re: 196-206, or did I call that m?

.sheep.16-01-44: I think we need to clarify rules for code which is to be 
external  as well as we define things for internal code. 

.gavinm.16-02-16: 9. PTW 193-206 NM either use malloc/free or 
mps_alloc/mps_free.  Mixing them is confusing and may lead future programmers 
down a garden path.

.pekka.16-02-19: Here are my nominations: A2, B6

.gavinm.16-02-50: B7

.gavinm.16-03-33: Ok.  

.ptw.16-03-40: My nominees: C1, B3, B8, C2, B9 

.gavinm.16-03-40: A2. PTW .arch.finish M Why is this issue not discussed in 
.sol and .anal?

.gavinm.16-03-48: TOPIC: process brainstorm

.gavinm.16-04-23: How did thi shappen, Pekka?

.sheep.16-04-24: so I nominate w2.sheep.79M  and 131M 191M 161M

.ptw.16-04-33: Point of order:   you appear to have chosen the topics before 
the votes were in

.gavinm.16-04-42: I thought we'd finished.

.ptw.16-04-56: Only you and Pekka had voted...

.gavinm.16-05-03: Sheep, could you come up with issue numbers, please?

.pekka.16-05-38: This was the first document I ever wrote for the mm group, so 
I followed the format set by the  template far too slavishly.

.gavinm.16-06-01: [ PTW, it was 9 minutes after the call ]

.pekka.16-06-02: I plan to reorganize it so that each issue is discussed and 
resolved separately.

.sheep.16-06-05: isues 1,2,4,,5,6 are all basically the same from the process 
point of view 

.gavinm.16-06-50: Sheep, please designate files ABC.

.sheep.16-07-09: sorry 

.sheep.16-07-15: B1,2,4,5,6

.pekka.16-07-25: Any more comments on A2?

.sheep.16-07-29: B1 , b2,b4,b5,b6

.sheep.16-07-56: no

.ptw.16-08-00: A2: we still don't have a process for holding "design review"

.gavinm.16-08-10: I've now had 12 nominations.

.pekka.16-08-14: This wasn't it?

.gavinm.16-08-14: This isn't working.

.gavinm.16-08-21: Everybody please choose one.

.sheep.16-08-34: b1

.ptw.16-09-13: Mine were in order.  C1 if I can only have one, but B3 is nearly 
as important.

.pekka.16-09-43: pass

.ptw.16-10-11: A2: This is "formal review" not "design review".  The latter 
should involve the group in a room with a blackboard.  Not that I want to 
travel a whole lot more, but I think there should be such a process for our 
designs (and have said so ad nauseum).

.gavinm.16-10-30: Richard is looking into running our first one.

.gavinm.16-10-36: Nag him about it.

.gavinm.16-10-52: Maybe we should have a problems section in designs.

.ptw.16-10-59: Er, is that not the job of the manager?  And process manager?

.gavinm.16-11-17: I have assigned Richard to implement it.

.sheep.16-11-24: I agree we should have a problems sections in design

.gavinm.16-11-36: Our design template is hopeless, really.

.ptw.16-11-40: By the time the design gets to this level, we should be finding 
only type-ohs and other presentation lacunae

.gavinm.16-12-15: Suggest: Have someone analyse existing designs and redo 
design template

.pekka.16-12-33: I think each design needs its own.

.gavinm.16-12-43: Maybe.

.sheep.16-12-47: ACTION thumbs up to desgin templete idea

.gavinm.16-13-01: Designers need help in getting everything down.

.pekka.16-13-05: The current one is good for single-issue designs, like the bit 
tables, but not for large ones that have more structure to them.

.ptw.16-13-11: I think there can be a standard presentation format; once you 
have buy-in from the group as to what is to be presented.

.gavinm.16-13-14: Mmm.

.gavinm.16-13-27: We used to have design presentations.

.gavinm.16-13-31: They were good.

.ptw.16-13-43: "We"?

.pekka.16-13-48: GavinM: we could have a checklist on the aspects that you have 
to address in  a design

.sheep.16-13-59: Yes design presentations can help a great deal. 

.gavinm.16-13-59: You attended my telemetry presentation.

.ptw.16-14-20: ACTION nods

.gavinm.16-14-21: Pekka, yes.  A second suggestion.  

.gavinm.16-14-26: Did you use rule.design at all?

.pekka.16-14-32: yes

.pekka.16-14-39: And I did an RFC on the design, didn't I?

.gavinm.16-14-45: That's more like a checklist than a ruleset for review.

.gavinm.16-14-48: Yes.

.gavinm.16-14-59: Some of my points should have been raised in RFC.

.gavinm.16-15-08: I didn't spend enough time on it.

.sheep.16-15-41: Suggestion - we need to formalise RCF so that every one 
responds and considers them.

.gavinm.16-15-51: Yes.  

.pekka.16-16-03: no

.gavinm.16-16-11: That's loads of suggestions.

.gavinm.16-16-15: Let's move on.

.gavinm.16-16-22: B1. Sheep 131 M in free should the code either init or assert 
inited ? 

.gavinm.16-16-23:   Same for realloc 

.gavinm.16-16-43: realloc calls malloc when it needs to be inited.

.pekka.16-16-50: quite

.ptw.16-16-58: A2: We never implemented the suggestion that _one_ person in the 
group be assigned to respond to RFC's

.gavinm.16-17-02: But free, I agree.

.pekka.16-17-11: ACTION thinks

.gavinm.16-17-17: PTW, agreed.  That needs action.

.sheep.16-17-25: Well I could only imagine some pathelogical cases.

.sheep.16-17-51: It's easy to use an  assert to handle the worst ones with no 
imact on performace

.ptw.16-17-59: E.g., an erroneous call to free followed by program exit which 
tries to de-initialize?

.ptw.16-18-35: I don't see the process issue here

.pekka.16-18-39: I think I had a reason for not checking, but I can't 
remember...

.sheep.16-18-49: Well the process imporvovment should be we need clear 
standards for external code as well as internal code

.pekka.16-18-54: should have documented it , if there was one.

.ptw.16-19-18: Yes:  always write down what didn't work, so it is not tried 
again

.gavinm.16-19-22: We have standards for external headers.

.pekka.16-19-39: Sheep: No, I don't think that had any effect.

.sheep.16-19-43: do we have stanrdards for sample code ?

.pekka.16-19-47: no

.gavinm.16-19-59: Not yet.

.gavinm.16-20-15: So how could we have avoided this init conflict.

.gavinm.16-20-29: ?

.gavinm.16-20-48: I mean, how can we avoid this sort of problem?

.gavinm.16-21-14: The problem is that it would only be provoked by a protocol 
error.

.pekka.16-21-34: Perhaps I thought that it's enough that mps_free would assert, 
because pool would be invalid.

.pekka.16-22-13: I note Tucker queried even the double-free check, so it's not 
clear whether this is a defect.

.ptw.16-22-29: But the design calls for MPS to be inited by "first use" of the 
interface

.gavinm.16-22-44: We certainly need a clearer checking policy. 

.gavinm.16-22-50: This should be part of the design.

.pekka.16-22-59: "first allocation", actually

.pekka.16-23-17: GavinM: ye

.ptw.16-23-27: Ah.  Still, it seems unfortunate to have the initialization 
policy so diffuse

.gavinm.16-23-55: rule.design.error says: The design must document error 
semantics for all functions, and behaviour in abnormal conditions.  It must 
also document any special checking/assertion behaviour.

.pekka.16-24-13: It does.

.sheep.16-24-25: It's generally a C problem - how to init some collection of 
information

.ptw.16-24-26: (I think you have the opportunity in a DLL to use the jump-in 
table to ensure that the module is initialized by the first call to the module.)

.gavinm.16-24-33: Hmm.

.gavinm.16-25-01: I think I would have wondered about that, had I gone over the 
design with rule.design in hand.

.ptw.16-25-29: Tension between simplicity and efficiency?

.sheep.16-25-59: One of the problems is the cross  platform nature of the code 

.sheep.16-26-10: It's hard to do this on all platforms. 

.gavinm.16-26-14: Suggest: Have entry.design based on rule.design.

.pekka.16-26-20: It's not cross-platform, it's ANSI.

.ptw.16-26-35: Simplicity would have a call to ensure_inited as the first thing 
in each call

.pekka.16-26-50: That's not one of the requirements.

.sheep.16-26-54: Well then things cannot be simpler than ansi 

.gavinm.16-27-00: Shall we move on?

.ptw.16-27-19: B3

.gavinm.16-27-27: C1. PTW 18 M iso96a does not appear to explicitly allow 
replacment of set_new_handler

.ptw.16-27-42: Okay C1, but don't leave out B3

.gavinm.16-27-48: Hang on.

.gavinm.16-27-53: B3. Sheep 81 M should we have an assert over negative size 

.pekka.16-27-54: I didn't 

.gavinm.16-27-54:   GavinM: 7.1.6 says size_t is "unsigned integral type" 

.gavinm.16-27-54.1:   Sheep: If can never be negative then possibly someone 
might call malloc ( 0 - 56 ) or something which would turn into a call for a 
super large object

.gavinm.16-27-54.2:   Pekka: That's C for you.

.gavinm.16-27-54.3:   GavinM: We have already had such a bug with Dylan. 

.ptw.16-28-31: My reason for making this high-prio:  it gets questioned over 
and over

.ptw.16-28-51: Do we have a policy on being mathematically precise vs. being 
pragmatic

.gavinm.16-28-57: We have no choice but to use size_t.

.gavinm.16-29-02: size_t must be unsigned.

.sheep.16-29-05: hang on I think we've agreed to discuss B3 first

.gavinm.16-29-14: I can see no profit in checking that it's non-negative.

.ptw.16-29-32: Pragmatics would say that a request to allocate 1/2 your VM 
space is an error

.pekka.16-29-35: You'd just get a compiler warning.

.sheep.16-29-38: then perhaps have an assert on unfesably loarge objects

.pekka.16-29-45: Sorry about the bold

.ptw.16-30-18: Could have a LARGEST_POSSIBLE_OBJECT, configurable in the 
interface

.gavinm.16-30-40: I tend to agree that our client is very highly unlikely to 
allocate more than half of size_t's range.

.gavinm.16-30-50: Richard says size_t is signed on Suns.

.pekka.16-31-05: not true

.gavinm.16-31-09: Unfortunately, we shouldn't really have restrictions that 
malloc doesn't.

.ptw.16-31-29: We do intend to _improve_ malloc

.ptw.16-31-36: Otherwise what is our selling point?

.pekka.16-31-51: no

.ptw.16-31-52: Do we know what level of improvement we allow/want?

.ptw.16-32-02: Relates to my other question about improving free

.gavinm.16-32-06: Can we decide to half size_t's range?

.sheep.16-32-09: I belive the debug version should permit more warnings 

.ptw.16-32-15: We need marketing input to say what improvements are marketable

.ptw.16-32-41: I think the range should be explicit in the interface 
(configurable).

.pekka.16-32-48: There is no requirement to improve malloc.

.ptw.16-33-08: There could be optimizations (e.g., the overflow code in calloc) 
based on the setting.

.pekka.16-33-11: There is a requirement to improve memory allocation.

.ptw.16-33-20: There is a requirement to give better performance

.ptw.16-33-38: How do we define that?  Elapsed time only?

.pekka.16-33-47: It's a drop-in interface, i.e., exactly the same as malloc.

.gavinm.16-33-47: A configurable limit gives no advantage on straight drop-in.

.ptw.16-33-57: Less errors?  More error detection?

.sheep.16-34-11: Well I think you did the correct thing. Don't try being better 
than malloc 

.pekka.16-34-16: People wanting more than that use AA, or go to level 2

.ptw.16-34-29: A configurable limit will detect program errors where the luser 
incorrectly calculates the size of the object to be allocated.

.gavinm.16-35-08: Maybe we need a way to deliver warnings.

.pekka.16-35-18: And so does our current code

.pekka.16-35-35: It will mps_assert when it fails to allocate that large segment

.gavinm.16-35-48: I don't think we can get away with having an assert that 
restrict's malloc's behaviour below size_t by default.

.pekka.16-35-57: ??

.gavinm.16-36-13: Let's move on.

.sheep.16-36-24: Ok trick area

.gavinm.16-36-25: C1. PTW 18 M iso96a does not appear to explicitly allow 
replacment of set_new_handler

.ptw.16-36-28: nI the product requirements should be more explicit about what 
"drop in" means.  Apparently it means only time improvement is allowed.

.pekka.16-36-43: And space

.pekka.16-36-50: No functional changes.

.ptw.16-36-55: Q: Am I right about C1?

.gavinm.16-37-01: [ drop-in means that we work correctly in all cases where 
malloc would work. ]

.gavinm.16-37-26: [ We are allowed to work in other cases.  We may be allowed 
to deliver warnings. ]

.ptw.16-37-30: What is the procedure for addressing such issues?

.gavinm.16-37-57: PTW, I'm not sure what you mean.

.pekka.16-38-16: ACTION pekka reads the standard

.ptw.16-38-24: [GavinM: your definition does not preclude better error 
signalling.  And do we intend to be compatible with implementations or abstract 
definitions?  Do we know implementations of malloc that will malloc 1/2 VM?]

.ptw.16-39-08: C1: We need something iso96a does not address (I think).  Do we 
have a representative to ISO or some other way to redress?

.sheep.16-39-50: ptw we are discuyss things here 

.ptw.16-40-01: The larger issue is my improvement suggestion to iso96a.  Do we 
have a process for that?

.sheep.16-40-05: Pekka thinks we are going off at a tangent

.pekka.16-40-05: If it's not allowed, then the problem is that I didn't read 
the standard carefully enough.

.gavinm.16-40-17: I don't think we know whether this is a defect.

.pekka.16-40-22: I don't see anything that could be done about that, except

.pekka.16-40-38: having somebody else review the code, which we just did.

.ptw.16-40-47: I note that for new/delete there is _explicit_ permission to 
override.

.ptw.16-41-10: I don't see how you can implement what you need without 
overriding set_new_handler,

.gavinm.16-41-16: I can'r see a process imporvement here.

.ptw.16-41-19: therefore I claim a defect in the standard

.ptw.16-41-36: Suggestion: figure out how to report bugs in iso96a

.ptw.16-42-01: We are a stakeholder, but they don't know it

.gavinm.16-42-48: Ok.  That's something to do.

.pekka.16-42-59: I looked at the standard and I agree with Tucker.

.gavinm.16-43-33: I think we're don ehere.

.sheep.16-43-40: OK

.gavinm.16-43-46: Any review process issues?

.gavinm.16-43-49: I have one.

.gavinm.16-44-08: I think review went unusually slowly today.

.sheep.16-44-21: why ? 

.ptw.16-44-29: [Hm.  You could do something gross like call set_new_handler, 
setting it to null to get the current new handler and then reset it, all inside 
your new...]

.pekka.16-44-32: proc.review.entry.draft says that the status of impl.c.* 
should have been draft.

.gavinm.16-44-47: Um, true.

.pekka.16-44-54: ptw: not thread-safe

.ptw.16-45-05: I could press my buttons faster.  I was trying to allow "read 
time"

.gavinm.16-45-29: Logging was a little disjointed and prone to digression,

.ptw.16-45-39: Or were you referring to us not finishin review?

.gavinm.16-45-49: But our process brainstorm was very chaotic.

.pekka.16-46-00: That's not a problem as long as the one who's logging doesn't 
get distracted.

.gavinm.16-46-04: It's very hard to mediate things by IRC.

.ptw.16-46-07: Chaotic?  How so?

.pekka.16-46-10: Yes, pretty useless.

.pekka.16-46-29: Not about process improvements.

.gavinm.16-46-30: Well, the nomination and selection usually goes far more 
smoothly.

.ptw.16-46-38: I think there was confusion due to 3 docs being reviewed

.sheep.16-46-41: Suggest that we have an open phone line to ptw to handle side 
issues

.gavinm.16-46-44: S'true.

.gavinm.16-46-54: we used to use phone always.

.ptw.16-47-02: There were two missing majors from the nominees, which delayed 
things

.pekka.16-47-14: I think this is better, because it allows async conversations

.gavinm.16-47-18: My fault.

.ptw.16-47-26: What would have prevented that?

.gavinm.16-47-42: I let myself get distracted into conversation when writing up 
issues, and then got rushed.

.sheep.16-47-47: Well it's async but confusing too both phone and IRC might 
improve bandwith

.ptw.16-47-57: Suggest:  Label issues A1, etc. on multi-documents

.gavinm.16-48-01: The problem with both is that talkin gisn't logged.

.gavinm.16-48-12: That worked well when we got onto it.

.sheep.16-48-38: Well talking should be for organsiational  and explinations 
not logging stuff

.ptw.16-48-39: Suggest: Implement suggestion to tag issue lines in log so they 
are easier to find

.gavinm.16-49-06: PTW, there's a lot of stuff siad here in the Pool Hall that 
should be logged and that you should hear.

.ptw.16-49-07: We tried the phone one time, and it was mostly dead air.

.ptw.16-49-45: "Put in your earplugs, put on your eyeshades, you know where to 
put the cork"

.sheep.16-49-49:  I think that was when I was also using the phone

.gavinm.16-49-56: I had a suggestion that review records be by session, not by 
document.

.pekka.16-50-00: Tagging like "143 m"?

.sheep.16-50-06: WEe had problems takeing turns

.ptw.16-50-13: Tagging like ***

.pekka.16-50-20: I thought they were by session.

.sheep.16-50-24: I'm in the pool hall today to help that

.gavinm.16-50-36: Pekka, nope.

.pekka.16-50-40: That's why I saked for all three docs to be reviewed at the 
same time

.ptw.16-50-51: There is enough other variability, especially with new issues 
(hand typed) that the scribe can miss them

.pekka.16-50-55: because many issues would affect all of them

.gavinm.16-51-19: PTW, the new issues would have been in the log eventually.

.gavinm.16-51-41: There's quite a lot of intelligence involved in assembling 
the issue log. 

.ptw.16-51-55: Yes, but you presumably had a hard time finding them for 
brainstorm because they are not distinct enough in the log

.gavinm.16-52-12: It would be hard for a robotic logger to help more than it 
hindered.

.gavinm.16-52-35: PTW, I simply forgot to even check for them.

.sheep.16-52-42: suggest perhaps having look@me running with a view of the 
document in question

.ptw.16-52-42: RE: session vs. document  Session would be simpler for me, but I 
am not sure it is right.

.gavinm.16-52-48: Finding them wasn't hard.

.gavinm.16-53-08: Sheep, interesting.

.gavinm.16-53-30: We had a per-session log once. 

.ptw.16-53-39: Finding:  Ok, whatever.  I would find it easier myself if there 
were ***'s or something

.sheep.16-53-43: That way you don't have too keep scrolling up to read document 
and then back to read peoples comments and talk

.gavinm.16-53-49: ... for reviewing 40 web documents at one go.

.gavinm.16-53-57: It took ages to get out of review.

.ptw.16-54-05: Looking: I don't have enough screen real estate to IRC and Look 
simultaneously

.gavinm.16-54-09: Easier as a checker?

.gavinm.16-54-29: I mean, we had a per-session review record once.

.ptw.16-54-53: Ah 40 web-docs, per session makes sense

.sheep.16-54-57: well much easyer to flick backwards and forwards

.gavinm.16-55-00: It was a lot easier for me as editor.

.ptw.16-55-06: I lost the track of this train...

.gavinm.16-55-29: I think we're all fried.

.gavinm.16-55-38: Our brains that is.

.gavinm.16-55-41: Let's leave it.

.ptw.16-55-46: ./

.sheep.16-55-50: ok

.pekka.16-55-53: PART

.gavinm.16-56-02: Thanks very much, everyone.

.sheep.16-56-11: ptw ! 

.sheep.16-56-17: before you leave

.ptw.16-56-17: Yes?

.sheep.16-56-27: Can you connect with a PC to zarrin ? 

.ptw.16-56-37: I don't have a PC

.gavinm.16-56-55: PART

.sheep.16-57-03: I'm going to ask systems to run a mac server from my PC. 

.sheep.16-57-22: I'm still geting odd segment behavoir from dylan.

.sheep.16-57-31: But the log file is 1Gb big

.sheep.16-58-14: Someone wishing to view the log needs to get to my machine and 
view directly.

.ptw.16-58-18: Hm.  Maybe we could write a filter to slim the log file to just 
the events you display?

.sheep.16-58-32: Well I'm using the traceFix events 

.sheep.16-58-39: there are a lot of them 

.ptw.16-58-39: You mean see your screen?  I could Look at you

.sheep.16-58-51: good idear

.ptw.16-59-08: But you are not at your machine today, right?

.sheep.16-59-15: I was thinking of viewing the hard disk and running netscape 
to view a java applet

.sheep.16-59-20: No not today - 

.sheep.16-59-30: will you be aviable tomorow ? 

.ptw.17-00-12: I will be at 1cc, probably around 1200 EDT == 1700 BST.  Is that 
a good time?

.sheep.17-00-59:  OK I can be at my machine then 

.sheep.17-01-25: Shall I see you tommorow then ? 

.ptw.17-01-44: How about I call you when I get in? x3850?

.sheep.17-02-00: fine by me. I'll send email to remind you.

.ptw.17-02-10: Okay.  See you then.

.sheep.17-02-20: ok 

.sheep.17-02-23: bye

.logbot.18-26-11: This channel is logged to irc.review.1997-10-15

.logbot.18-26-11.1: When you said ``HEAVILY FORESTED'' it reminded me of an 
overdue

.logbot.18-26-11.2:  CLEANING BILL..  Don't you SEE?  O'Grogan SWALLOWED a 
VALUABLE

.logbot.18-26-11.3:  COIN COLLECTION and HAD to murder the ONLY MAN who KNEW!!


