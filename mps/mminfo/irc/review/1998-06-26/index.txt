                         #REVIEW ON 1998-06-26
                         irc.review.1998-06-26
                               draft doc
                           gavinm 1998-07-06

[became review.impl.c.poolmv2.splay.17(0)  drj 1998-10-20]

.logbot.00-02-37: PART

.logbot.00-02-40: JOIN

.logbot.00-02-41: This channel is logged to irc.review.1998-06-26

.logbot.00-02-41.1: I HAVE to buy a new ``DODGE MISER'' and two dozen JORDACHE

.logbot.00-02-41.2:  JEANS because my viewscreen is ``USER-FRIENDLY''!!

.lth.14-04-30: JOIN

.logbot.14-04-30: This channel is logged to irc.review.1998-06-26

.logbot.14-04-30.1: My life is a patio of fun!

.drj.14-15-25: JOIN

.logbot.14-15-25: This channel is logged to irc.review.1998-06-26

.logbot.14-15-25.1: An INK-LING?  Sure -- TAKE one!!  Did you BUY any COMMUNIST 
UNIFORMS??

.ptw.14-15-52: JOIN

.logbot.14-15-52: This channel is logged to irc.review.1998-06-26

.logbot.14-15-52.1: You can't hurt me!!  I have an ASSUMABLE MORTGAGE!!

.lth.14-18-01: Before we start can anyone tell me what AVERT and AVER do?

.drj.14-18-29: ah

.drj.14-18-35: they're like assert()

.drj.14-18-42: AVERT(Foo, foo)

.drj.14-19-09: checks that foo is of type Foo.  According to the runtime typing 
conventions used by the MPS

.drj.14-19-18: (which involve signatures stored in ->sig fields)

.drj.14-19-27: AVER(cond)

.lth.14-19-27: gotcha

.drj.14-19-37: simply checks that cond is true.

.lth.14-19-46: thanks

.drj.14-19-51: AVERT(Foo, foo) expands into AVER

.drj.14-20-30: they call (a client installable) assertion handler if the check 
fails which usually prints out a nasty message and aborts.

.gavinm.14-20-34: JOIN

.logbot.14-20-34: This channel is logged to irc.review.1998-06-26

.logbot.14-20-34.1: I'm sitting on my SPEED QUEEN..  To me, it's ENJOYABLE..

.logbot.14-20-34.2:  I'm WARM..  I'm VIBRATORY..

.drj.14-21-05: I grow less entusiastic about zippy the logbot every day...

.ptw.14-22-26: I'm sitting on my chair with a fan running full blast on my 
knees.  To me, it's warm and unenjoyable, vibration or no.

.drj.14-22-46: are you at home ptw?

.gavinm.14-23-09: ACTION waits for Tony.

.lth.14-23-13: You should have come to the office, it's the usual 
airconditioned 69 degrees here.

.tony.14-23-45: JOIN

.logbot.14-23-45: This channel is logged to irc.review.1998-06-26

.logbot.14-23-45.1: We are now enjoying total mutual interaction in an 
imaginary hot tub...

.gavinm.14-23-55: Ok.  Is evenryone ready?

.drj.14-24-05: I don't know.

.ptw.14-24-17: yes I am home.  Unclear if 4 hours of commuting is worth 8 hours 
of cooling

.gavinm.14-24-24: Could I have issue counts, checking time, and fraction 
completed from everyone, please?

.gavinm.14-24-37: 3M 10m 2q 1C 5I  69 minutes  62%

.ready.14-24-43: We can't all be ready, IRC won't allow that

.lth.14-25-11: 0M 2m 0q 0I 70 minutes 100% but not familiar with coding 
conventions

.drj.14-25-17: 5M 6m 1q 2C 10I 65 minutes ~120%

.gavinm.14-25-28: YOW!

.drj.14-25-49: and no steroids either

.tony.14-26-06: 2M, 2m 0q 0C 0I 70minutes 90%

.gavinm.14-26-07: ACTION waits for PTW and Tony.

.ptw.14-26-35: 48 minutes, M: 0, m: 3, C: 0, q: 2, I: 10

.gavinm.14-26-49: Thanks.

.ptw.14-27-04: 100%, but I only just now learned of my source role, so my 100% 
does not cover that.

.gavinm.14-27-08: Could I have major defects by person, please?

.gavinm.14-27-17: Remember to indicate when you're done.

.gavinm.14-27-29: Remember to watch defects and find new ones.

.ptw.14-27-33: Remember to name a person to start

.gavinm.14-27-36: DRJ?

.drj.14-27-42: ok

.drj.14-28-01: 81 M in the comment, "contingency" is not explained.

.drj.14-28-14: (and the reference to the design is not helpful)

.drj.14-28-45: 98-134 M all this meter stuff should be unified with Tony's 
recent STATISTIC stuff which is similar.

.drj.14-29-25: 176 M even documented as transgressions these macros should go.  
The less C-like we are the worse.

.drj.14-30-12: 245ff M ResLIMIT is not appropriate here (but see my comment 
about how ResBADARG might be a good idea)

.drj.14-30-24: 268 M 3 is magic! or at least unexaplined.

.drj.14-30-36: that's all

.gavinm.14-30-43: Thanks.  Tony?

.tony.14-30-51: ok

.tony.14-31-10: 283 M Use of default seg pref only sounds limited, given 
design.mps.poolmv2(4).arch.parameters

.tony.14-32-03: 476 M Is it right that we give up so easily when we can't get a 
seg from the arena? How do we know there isn't a free block? (Perhaps I've just 
missed a detail in the rush)

.tony.14-32-07: That's all

.gavinm.14-32-17: Thanks.  PTW?

.ptw.14-32-40: ./

.gavinm.14-32-47: Thanks.  GavinM?

.gavinm.14-32-57: 463 M What happens to the rest of this segment?  Is it leaked?

.gavinm.14-33-11: 474 M There could also be blocks on the ABQ or in the CBS 
only big enough.  There is no attempt to used them for oversize blocks.  (as 
Tony's)

.gavinm.14-33-31: 538 M Could usefully AVER(AddrOffset(base, limit) >= minSize)

.gavinm.14-33-49: Done.  Any other majors?

.gavinm.14-34-16: OK.  Non-majors by person.

.gavinm.14-34-20: Remember to indicate when you're done.

.gavinm.14-34-26: Remember to watch defects and find new ones.

.gavinm.14-34-29: DRJ?

.drj.14-34-35: ok

.drj.14-34-49: I design.mps.cbs add .abbr.cbs

.ptw.14-34-56: Hey, you didn't ask lth for his majors!

.drj.14-35-09: I design.mps.cbs add .def.isolated as is used as a technical 
term.

.lth.14-35-13: He probably saw that I had none.

.gavinm.14-35-13: He predicted zero.

.ptw.14-35-23: So did I.

.gavinm.14-35-44: I'm not perfect.

.lth.14-35-51: It's lonely at the top.

.drj.14-35-55: I design.mps.cbs.req.client "isolated" is unclear

.drj.14-36-12: I design.mps.cbs.type.cbs.block s/returns/returned/

.ptw.14-36-16: drj:  where is "isolated" from?

.gavinm.14-36-30: "isolated contiguous block"

.drj.14-36-36: thanks gavinm

.ptw.14-36-45: I wish I had line numbers...

.gavinm.14-37-09: person.ptw IN Tucker should have line numbers.

.ptw.14-37-26: ... sorry.  I wish I had the right document!

.drj.14-37-43: I design.mps.cbs.type.new.method "This function pointer type is 
a client method..."  false.  the type is a pointer type to methods that blah 
bl;ah

.drj.14-37-46: phone call

.gavinm.14-38-11: OK.  Let's jump ahead to Tony.

.drj.14-38-19: back

.tony.14-38-26: DRJ sounds like he's finished

.gavinm.14-38-32: DRJ?

.tony.14-38-36: On the phone that is

.drj.14-38-36: ACTION will proceed

.drj.14-39-08: I design.mps.cbs.type.delete.method semantics are unclear.  What 
happens if middle of an isolated block is deleted for example?

.drj.14-39-32: I design.mps.cbs Shrinka and Grow (the parms to Init) not 
described.

.drj.14-40-02: I design.mps.cbs.function.cbs.finish preconditions not 
mentioned, e.g. shoudl the set it describes be empty?

.gavinm.14-40-16: Good point.

.drj.14-40-24: well that's got rid of design.mps.cbs

.drj.14-41-00: "the review" I lines 15-18 clearly indicate source documents 
(header files) which were not mentioned in the review

.drj.14-41-37: 32 C unconventional but ok.  (convention would have the function 
topologicallu sorted within the file and the class structure decl at the end)

.gavinm.14-41-57: [ I actively decided not to use the header files as source. ]

.drj.14-42-16: 242 C I think we probably should have a ResBADARG, or maybe 
client protocol AVER or something

.drj.14-42-40: [ah well, I tell the difference between that and a mistake; 
missing a source document could be really bad]

.ptw.14-42-48: [I passively decided to organize the code for literary style, 
not "topologically"]

.drj.14-43-07: 308 m missing space before "*/"

.drj.14-43-28: [I'm inclined to prefer your style ptw, so perhaps we should 
change the convention]

.drj.14-43-45: 344 m (since you put one in Finish) missing Init EVENT

.drj.14-44-11: 372 m conjuction of checks should be two separate checks, then 
you can tell which one fired.

.drj.14-44-46: 383 m add the else clause to check something when !mv2->splinter 
?

.drj.14-45-10: 486 m (followup) reset splinter fields to INIT values so you can 
check them!

.drj.14-45-19: 520 q how is this perfect?

.drj.14-46-00: 822 m 1 True Brace style would join this line to the next, block 
brace style would put { on a line of its own.  Coding style admits either, but 
not this hybrid

.drj.14-46-17: typo, should've been 522, not 822

.drj.14-46-34: 536 m more conventional to use < rather than >

.ptw.14-47-02: 822?  That line is "/*" in my version

.drj.14-47-30: 563 m something we could try is to ask for a segment that is 
just large enough (minSize aligned to a page).  but I suppose that would 
violate the SegSize assumption

.drj.14-47-36: ibid, 822 should be 522

.drj.14-48-00: 627 I is there an accounting error if size==0

.drj.14-48-04: (went to far)

.drj.14-48-07: that's all

.gavinm.14-48-07: [ 522, also 503, 528 ]

.drj.14-48-47: that's still all

.gavinm.14-49-10: Thanks.

.gavinm.14-49-13: Tony?

.tony.14-49-16: ok

.ptw.14-49-26: Don't waste your time finding } else's.  A computer can do that.

.tony.14-49-35: m 252 What does this comment refer to? A wish for the future?

.tony.14-49-46: m 256 What does this comment refer to? A wish for the future?

.tony.14-49-51: thats all

.gavinm.14-50-15: Thanks.  PTW?

.ptw.14-50-16: I appear to use --- where @@@ is the group convention (that I 
was unaware of)

.ptw.14-50-26: I  rule.impl.c.adt.create Not all ADT require a creation 
function:  some are embedded, some are created by the abstract superclass.

.ptw.14-50-36: I  rule.impl.c.adt.create.check Because not all ADT's require a 
creation function, the check call should be required of the initialisation 
function

.ptw.14-50-43: I  rule.impl.c.adt.dest Because of the way our class 
implementation works, the finish and destroy functions must take instances of 
the abstract superclass as an argument, not the concrete class.

.ptw.14-50-55: q 1 rule.imple.c.name.adt Is the ADT PoolMV2 or simply MV2?

.ptw.14-51-02: m 13 rule.impl.c.inc.std Missing compulsory inclusion

.ptw.14-51-10: I 136 rule.impl.c.adt.sig Having the signature as the last field 
but checked first will increase the liklihood that a check function will assert 
on an instance that has been changed by adding or removing slots.  Not doing so 
increases the liklihood that the check function will fail in some mysterious 
way when checking non-existent slots.

.ptw.14-51-29: q 184 .cons Why is this method called PoolPoolMV2?  Historical 
anachronism?  Confusion over the ADT name?

.ptw.14-51-38: I 228 rule.impl.c.adt.init The init function cannot take an 
\"instance of the class\" as its argument, as the object is not a proper 
instance until it has been initialized.

.gavinm.14-51-48: ACTION is falling behind.

.ptw.14-51-49: I 242  There should be a standard checking function for checking 
input parameters that are supplied by the client.

.ptw.14-52-00: RTS

.drj.14-52-31: [well you can't call PoolPoolMV2 PoolMV2 can you? :)]

.gavinm.14-52-48: ACTION has nearly caught up.

.gavinm.14-53-04: ACTION has caught up.

.gavinm.14-53-11: CTS

.ptw.14-53-18: I 390 rule.impl.c.check.sense Rephrase in terms of TRUE and 
failure.

.ptw.14-53-28: I 441 rule.impl.c.assert.brief Class methods should not check 
parameters that have already been checked in the generic function.

.ptw.14-53-42: I 445  There should be a standard function for checking that an 
instance of an abstract class is an instance of a concrete class.

.ptw.14-54-00: I 549 guide.tag Suggest that a different delimiter (e.g., ':') 
be used to delimit the document tag from a tag within a document to aid both 
humans and programs in finding tags within documents

.ptw.14-54-13: m 582  meters need to be designed, documented (or at least 
meter.c should have been a source document).

.ptw.14-54-24: m 472, 514 .cons Here and other places in the code where it is 
assumed that segments cannot be coalesced (a limitation in the current segment 
substrate) should be tagged.

.ptw.14-55-09: nI STATISTICS should be designed and documented, so someone does 
not go off and invent METERS in a parallel universe

.drj.14-55-22: [this is essentially what your "---" convention is telling you: 
tag it!]

.ptw.14-55-47: nI Code should be organized in a "literary" rather than 
"topological" style

.ptw.14-56-22: nI rule.impl.c.check conjunctions should be avoided in checks

.ptw.14-56-26: ./

.gavinm.14-56-33: Thanks.

.gavinm.14-56-40: LTH?

.lth.14-56-59: m (throughout) inconsistent use of unless/when relative to 
one-branch if.

.lth.14-57-20: m 267-68  document/justify `3`.

.lth.14-57-24: done

.gavinm.14-57-42: Thanks.  GavinM?

.gavinm.14-57-50: 178 m Unused macro.

.gavinm.14-57-59: 265 m Could use SizeAlignUp here.

.gavinm.14-58-10: 289-306 m These initialisations are unnecessarily out of 
order.

.gavinm.14-58-20: 305 m For clarity, this could usefully use the calculation of 
373.

.gavinm.14-58-32: 363,365 q What are these lines doing here?

.gavinm.14-58-48: 367-373 m These checks are unnecessarily out of order.

.gavinm.14-58-57: 372 m If this is a percentage, the field name could usefully 
reflect the fact.

.gavinm.14-59-07: 373 m This calculation appears three times in this file, and 
could usefully appear only once. 

.gavinm.14-59-18: 382 m Could usefully note that this AVER may become untrue.

.gavinm.14-59-29: 514-540 C This code would be a lot simpler with either 
segment merging or multi-segment buffers.

.gavinm.14-59-44: 529 mN Too many seconds.

.gavinm.14-59-54: 561 m This control-flow is slightly confusing.

.gavinm.15-00-03: 880 I Read access to output parameter.

.gavinm.15-00-10: 1003,1019 I This is an odd place to find these function names.

.ptw.15-00-15: 382:  I see no AVER here?

.gavinm.15-00-22: 1003 q What used does this function make of size?

.drj.15-00-28: [265 can't use SizeAlignUp as that only works with powers of 2]

.drj.15-00-50: ACTION deasserts DCD, DTR, and CTS

.ptw.15-00-54: ^CTS

.gavinm.15-01-14: ACTION researches 382

.gavinm.15-01-37: s/AVER/CHECKL/

.gavinm.15-02-06: RTS

.drj.15-02-11: your comment re line 305 is unclear

.drj.15-02-19: ^CTS

.gavinm.15-03-27: 305, this value is a cached calculation based on size and 
fragLimit.  The fact that the result is initially zero is a side-effect of the 
actual calculation.

.drj.15-03-32: CTS

.gavinm.15-03-49: ACTION waits for PTW.

.ptw.15-03-55: 382 is still unclear

.drj.15-04-18: concur, when will it be false except in bug?

.gavinm.15-04-22: It's the same seg boundary potential change that could 
usefully be tagged.

.ptw.15-04-32: Ah

.ptw.15-04-36: CTS

.gavinm.15-04-42: design.mps.poolmv2.def.alignment I This is wrong.  How about 
"... address to be a multiple of some value, typical a power of 2 ...", or "... 
typically to be a multiple of a power of 2 ..."?

.gavinm.15-04-54: design.mps.poolmv2.arch.fragmentation.internal I Something 
has gone wrong in this paragraph.

.gavinm.15-05-00: Done.

.gavinm.15-05-06: Any other defects?

.drj.15-05-21: y

.gavinm.15-05-35: DRJ?

.drj.15-05-59: rule.impl.c.inc.std nI Ancient history and should be removed.

.gavinm.15-06-07: Mmm.

.gavinm.15-06-24: ACTION waits for DRJ.

.drj.15-06-28: rule.impl.c nI whole document is probably a bit ancient and 
needs a lookover

.drj.15-06-31: that's all

.gavinm.15-06-37: Thanks.

.gavinm.15-06-40: Any other defects?

.gavinm.15-06-59: OK.

.gavinm.15-07-32: I suggest we meet at 16:30 BST (11:30 EDT) for a process 
brainstorm.

.ptw.15-07-38: ACTION is foiled by IRC

.gavinm.15-07-39: I'll try to keep it to about 30 minutes.

.gavinm.15-07-52: OK?

.lth.15-07-58: fine by me

.tony.15-08-02: ok

.drj.15-08-02: ok

.gavinm.15-08-08: See you later.

.gavinm.15-14-11: ACTION sends a list of major defects by e-mail.

.gavinm.15-30-43: Two bells of the Dog Watch.

.gavinm.15-30-51: Is anyone not ready?

.drj.15-31-07: inverting the sense won't help you...

.gavinm.15-31-15: I'd like to start with:

.gavinm.15-31-20: DRJ: 2. 98-134 M all this meter stuff should be unified with 
Tony's recent STATISTIC stuff which is similar.

.gavinm.15-31-47: How did this happen?

.ptw.15-31-51: Well, this is pretty simple.  Sounds like Tony and I duplicated 
effort due to lack of communication

.drj.15-31-57: yep

.gavinm.15-32-20: Both of you had to invent complex metering stuff as part of 
other work.

.gavinm.15-32-31: Neither of you sent round an RFC about it.

.drj.15-32-36: and that wasn't recorded in darwin or rfced

.gavinm.15-33-12: Interesting, at least one group member has read both Tony and 
PTW's code, but failed to make the connection.

.drj.15-33-16: happened again when ptw and I added the same makefile for lippgc

.gavinm.15-33-26: ACTION blushes.

.ptw.15-34-00: I don't think this is that great a loss.

.drj.15-34-17: in this case.

.gavinm.15-34-21: So we could be better at RFC when we spin off new technology.

.ptw.15-34-27: I had no requirement for meters, but invented them to improve my 
code.

.gavinm.15-34-50: Tony needed meters to measure the effectiveness of 
instruction emulation.

.drj.15-34-59: or maybe if we had weekly plans and summaries of stuff doner

.ptw.15-35-02: Yes.  I should have (and actually intended to) RFC, but it 
slipped through the cracks.  And the meter stuff grew

.drj.15-35-08: s/doner/done

.gavinm.15-35-25: Suggest: Weekly group meetings for status reports.

.ptw.15-35-29: Ooh.  Maybe if we had weekly group meetings with "what are you 
working on" status reports.

.gavinm.15-35-47: ACTION has a sudden sense of trillian.

.drj.15-35-56: that's a radically different suggestion than mine, and one I 
would object to.

.ptw.15-36-02: [There's an echo in here]

.ptw.15-36-06: Echo

.ptw.15-36-15: [The room is suddenly quieter]

.drj.15-36-24: take gold bar

.ptw.15-36-30: [Taken]

.drj.15-36-37: ACTION cringes

.gavinm.15-36-56: Weekly group meetings has been raised a couple of times this 
week, and it's something I intend to discuss with the UK people.

.gavinm.15-37-11: Shall we move on?

.ptw.15-37-15: ACTION thinks we should be in a MUD not an IRC if this keeps up


.drj.15-37-37: in general I don't think the MM group has been very good at 
communication.  particualrly wrt to what everyone is doing.

.ptw.15-38-08: I think a time-limited meeting, by phone or even on IRC would be 
useful.

.tony.15-38-17: The Dylan group had a HOPE trigger so anyone could see what 
checkins happened

.gavinm.15-38-17: An interactive meeting, where people can ask questions and 
exchange ideas, has something going for it.

.drj.15-38-26: yes

.ptw.15-38-48: Oh, no!  Not more automated email!

.gavinm.15-38-55: OK.  Let's move on.

.gavinm.15-39-02: Tony: 7. 476 M Is it right that we give up so easily when we 
can't get a seg from the arena? How do we know there isn't a free block? 
(Perhaps I've just missed a detail in the rush)

.gavinm.15-39-02.1: GavinM: 9. 474 M There could also be blocks on the ABQ or 
in the CBS only big enough.  There is no attempt to used them for oversize 
blocks.  (as Tony's)

.ptw.15-39-09: [Besides then you'd find out what a spazz I am at Hope]

.gavinm.15-39-24: TOPIC: Process

.gavinm.15-39-33: TOPIC: "Process

.gavinm.15-39-42: TOPIC: Process_Brainstorm

.gavinm.15-39-51: Poxing client.

.drj.15-39-55: ACTION giggles

.drj.15-39-59: TOPIC: Process Brainstorm

.ptw.15-40-12: This is an explicit policy decision, documented in the design.  
Perhaps all that is missing is a tag.

.drj.15-40-31: I think so.

.drj.15-40-48: though is it true that it leaks memory (as GavinM pointed out 
elsewhere)?

.ptw.15-40-49: The tag is there on lin 456.

.gavinm.15-40-55: Whilst I concede that we want on-the-side large object 
allocation ...

.ptw.15-41-01: No it does not.

.gavinm.15-41-10: ... it seems churlish to refuse allocation requests that 
might have been satisfied.

.ptw.15-41-33: The memory is "unused" until the exceptional object is returned, 
at which time it is recovered.

.gavinm.15-41-40: Was that deliberate Tucker?

.drj.15-41-45: but they can only be satisfied by allocating across segment 
boundaries gavin. which it can't do chiefly because buffers can't overlap 
segment boundaries

.ptw.15-41-54: Also an explicit policy decision.

.gavinm.15-42-14: Er, no.

.ptw.15-42-20: Exceptional objects are expected to have exceptional lifetimes 
so normal objects are intentionally not placed adjacent to them.

.drj.15-42-31: gavinm, er, no, what?

.gavinm.15-42-41: Er, yes.

.drj.15-42-46: aha

.gavinm.15-42-54: I see now.

.tony.15-43-00: Yes, I'm happy with this now

.ptw.15-43-33: So, was this an oversight by the reviewers, or is there a 
process flaw here?

.gavinm.15-43-36: There can't be a within-segement block on the ABQ or CBS 
because they all have the same segment size, which is already known to be too 
small.

.drj.15-43-39: I suppose it could be more explicitly stated that no segment on 
the CBS will be bigger than er, whatever size it won't be bigger than.

.drj.15-43-50: no, I think the design is quite subtle.

.gavinm.15-43-58: This will be moot if we abolish segment boundaries in some 
way.

.gavinm.15-44-23: OK.  Let's move on.

.ptw.15-44-24: No it will not be moot.

.gavinm.15-44-37: GavinM: 8. 463 M What happens to the rest of this segment?  
Is it leaked?

.ptw.15-44-51: Point of order

.drj.15-44-57: (because blocks on the CBS are all smaller than reusesize anyway)

.gavinm.15-45-15: (drj, not true)

.gavinm.15-45-19: PTW?

.ptw.15-45-28: Because it is an explicit policy decision in the design, 
reviewed and (nearly) accepted.

.ptw.15-45-41: Segment merging will not change that.

.gavinm.15-46-23: Ah.  It's not leaked because we recognize the largeness when 
we free?

.ptw.15-46-50: Yes.  Exceptional blocks are treated specially, all the way 
around.

.ptw.15-47-00: The alternative would be to simply fail.

.gavinm.15-47-10: Hmm.  I think there's some clarity issues around here 
somewhere.

.tony.15-47-45: FWIW, I think it's pretty clear - I just didn't do all the xrefs

.gavinm.15-47-51: How could we have ensured that this aspect of the design was 
clear to the reviewers?

.tony.15-48-06: Give more time to reading the source docs

.drj.15-48-12: the code could make it more explicit

.tony.15-48-19: drj: agree

.gavinm.15-48-34: The code could treat segments more consistently.

.drj.15-48-40: it coudl reduntantly use the seg->p field to indicate segments 
which had exactly one (presumably overlarge) object in, for example.

.ptw.15-48-41: [This point was a subject of misunderstanding in the design 
review.  I thought I cleared it up in edit.]

.drj.15-48-56: gavinm, but treating them consistently wouldn't be in accordance 
with the design.

.gavinm.15-49-05: Mmm.

.gavinm.15-49-19: Let's move on.

.ptw.15-49-23: [Perhaps I did not]

.drj.15-49-23: well, I certainly wasn't as familiar with the design as I 
would've liked.

.gavinm.15-49-35: DRJ: 4. 245ff M ResLIMIT is not appropriate here (but see my 
comment about how ResBADARG might be a good idea)

.drj.15-49-39: we should sit exams on the source docs before being allowed into 
review

.ptw.15-49-48: Perhaps this point is buried in the desgin and should be at top 
level

.drj.15-49-52: (not convinced this is major)

.gavinm.15-49-58: How did this problem get into draft code?

.gavinm.15-50-36: I guess a developer is reluctant to widen the scope of his 
assignment to the creation of additional infrastructure.

.ptw.15-50-46: Er

.drj.15-50-53: ah, irony.

.drj.15-51-06: design.mps.type.res is unclear.

.gavinm.15-51-10: I think there's a request about interface checking that 
Tony's defining.

.ptw.15-51-13: By marking it ---, I was signalling that it was something I knew 
needed improving.

.drj.15-51-30: ResLIMIT: "An internal limitation was reached"

.gavinm.15-51-38: (as I tried to clarify at kickoff)

.ptw.15-51-54: I would say it is there due to insufficient time on my part (an 
internal implementation limit)

.drj.15-52-05: :)

.ptw.15-52-23: Yes, well, is there a process for such things?

.ptw.15-52-36: Can a document be reviewed with @@@'s in it?

.gavinm.15-52-40: You could create a request.

.ptw.15-52-49: And how was I to know that @@@ is better than ---?

.drj.15-53-09: in practise if a document has @@@@ in and gets reviewed all the 
@@@@s get pointed out as major defects.  which I find annoying.

.drj.15-53-15: ptw, good question.

.ptw.15-53-36: Well, yes.  --- means I need to create a request.  Should I not 
be able to review the document until a request has been entered?

.gavinm.15-53-56: Hmm.

.ptw.15-54-05: (apropos of the first item, removing the --- by implementing 
what I need is wrong)

.gavinm.15-54-09: It is possible to escalate defects to requests in edit.

.ptw.15-54-47: Er, this was a defect I knew about well before edit

.gavinm.15-54-53: I'm beginning to think that all @@@s should be reflected in 
requests.

.drj.15-54-57: now you're going to get me started about how darwin isn't 
necessarily the right tool for describing all things that need changing in our 
code

.gavinm.15-55-07: In fact, I'm defining a request to that effect.

.drj.15-55-11: gavinm, I believe there's a request about that

.gavinm.15-55-26: Then we're sorted.

.ptw.15-55-27: ACTION screams an anguished cry

.gavinm.15-55-40: Does anyone want to raise any issues about review porocess?

.drj.15-55-48: yes

.ptw.15-55-51: Gavim

.gavinm.15-55-59: I think today's review went quite well.

.gavinm.15-56-02: PTW?

.ptw.15-56-20: Is your Darwin request to get DRJ started about how darwin isn't 
necessarily the right tool?

.gavinm.15-56-50: No.  It's to sort out the status of @@@s in code.

.ptw.15-56-53: What is the antecedent of "that" in "that effect"

.ptw.15-56-59: Ah.

.gavinm.15-57-05: DRJ?

.ptw.15-57-11: And ---'s, I expect.

.gavinm.15-57-25: Mmm.

.drj.15-57-32: er I thought the logging went quite well

.drj.15-57-44: you seemed to guide people more

.gavinm.15-57-54: Yes.  The loggin was satisfyingly brisk, but effective.

.drj.15-58-01: however, 

.gavinm.15-58-08: I had more uptime.

.drj.15-58-12: I still think there is a problem with review setup and teardown

.gavinm.15-58-28: Could you clairfy?

.drj.15-58-51: The review mail which you send round is too indirect a way of 
telling people what they should be doing.

.drj.15-59-05: (e.g. tony's missed role)

.gavinm.15-59-18: Ah.

.drj.15-59-24: er, perhaps it was ptw

.drj.15-59-28: I forget

.gavinm.15-59-31: Is providing bits of paper better?

.drj.15-59-37: or maybe it was a source document

.drj.15-59-43: no, providing bits of paper is no better

.gavinm.16-00-03: What would you suggest?

.gavinm.16-00-13: I could run over roles in the kickoff meeting.

.drj.16-00-19: and when the document enters edit, the editor is magically 
supposed to know without being explicitly told.

.gavinm.16-00-34: Ah.  That is something you've raised before.

.drj.16-00-38: gavinm, roles in the kickoff would be good.

.gavinm.16-00-58: I think I agreed to send a mail to the editor at that point, 
but I may well have been lax.

.drj.16-01-02: well, now I've told you in time so that you can fix it for this 
review :)

.gavinm.16-01-10: Mmm.

.drj.16-01-32: There should be a procedure to follow.  I suppose there is, so 
I'm suggesting it be "improved".

.gavinm.16-01-36: SUGGEST: proc.review.ko The leader makes sure everyone knows 
and understands his roles.

.gavinm.16-01-50: OK.

.gavinm.16-01-57: Any other issues?

.tony.16-02-00: yes

.ptw.16-02-06: nI: role.positive  I've suggested this before, we ought to 
encourage positive comments to balance what can otherwise seem like a very 
negative process

.gavinm.16-02-12: Tony?

.drj.16-02-18: no doubt if we were all trained properly we'd just grok it 
straight from the amil automatically. however...

.gavinm.16-02-23: PTW, noted.

.tony.16-02-28: What was the reason for not having include files as source docs?

.ptw.16-02-38: It wasn't bad today... but can be sometimes

.lth.16-02-42: ObPositive: Lisp programmers write nicer C code than C 
programmers.

.gavinm.16-03-01: I decided we have enough meaty source documents already, and 
there was little to the header files that wasn't checked by the compiler.

.ptw.16-03-05: Not if they're not allowed to #define when/unless ;-)

.tony.16-03-30: gavinm: It meant I had to dig them out during the review

.tony.16-03-37: which wasted time ...

.gavinm.16-03-37: I thought that using header files as source documents 
wouldn't be a productive use of time.

.drj.16-04-00: okay, so perhaps they should be listed in the review record as 
source documents that aren't being checked.

.ptw.16-04-04: Clearly not as at least 2 reviewers dug them out anyways

.gavinm.16-04-10: DRJ, noted.

.drj.16-04-16: so that retentive people like tony can check them anyway :)

.gavinm.16-04-22: Could they explain why?

.tony.16-04-28: I didn't want to check them

.ptw.16-04-41: I wonder how anyone could make sense of METER_xxx without meter.h

.tony.16-04-42: I just wanted to make sense of poolmv2.c

.tony.16-04-53: ptw: quite

.drj.16-05-10: well, I just guessed.  a bit hazardous.

.ptw.16-05-17: But as noted, it was a major defect that design.mps.meter did 
not exist

.gavinm.16-05-17: Hmm.

.ptw.16-05-26: Did we note that?

.gavinm.16-05-32: design.mps.meter would have been a lot better.

.gavinm.16-05-53: design.mps.meter NM Shoudl exist.

.gavinm.16-05-59: We have now.

.ptw.16-06-08: nM/nI: create design.mps.meter

.gavinm.16-06-12: OK.

.ptw.16-06-15: Duh

.gavinm.16-06-15: Any other issues?

.gavinm.16-06-50: OK.

.ptw.16-06-54: nyet

.gavinm.16-06-57: Thanks for your time.

.gavinm.16-07-04: Close.

.drj.16-07-08: bye

.tony.16-07-11: bye

.drj.16-07-17: PART

.ptw.16-07-20: PART

.lth.16-07-37: PART

.gavinm.16-07-50: PART


