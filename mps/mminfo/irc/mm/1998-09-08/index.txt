                       #MM ON 1998-09-08 TUESDAY
                           irc.mm.1998-09-08
                               draft doc
                          richardk 1998-09-09

TOPICS

.topics: A very rough list:
  segment-placement solution for anchovy



TRANSCRIPT

.logbot.00-06-55: PART

.logbot.00-07-04: JOIN

.logbot.00-07-04.1: This channel is logged to irc.mm.1998-09-08 [in 
trillian:/u/ldisk/richardk/irc-logs]

.logbot.00-07-04.2: Either CONFESS now or we go to ``PEOPLE'S COURT''!!

.topic.00-07-04: TOPIC: memory management

.drj.09-58-16: JOIN

.logbot.09-58-16: This channel is logged to irc.mm.1998-09-08 [in 
trillian:/u/ldisk/richardk/irc-logs]

.logbot.09-58-16.1: Is this going to involve RAW human ecstasy?

.richardk.13-57-29: _That_ should go in the quotes book.

.drj.13-57-46: Umm.  What should?

.drj.13-57-53: logbot's utterance?

.richardk.13-57-56: Not saying.  :-)

.richardk.13-58-02: logbot] Nope.

.drj.13-58-25: oooh

.richardk.13-58-34: I'm naughty, aren't I.

.drj.14-01-56: I Was suggesting to gavin that we have a group meeting about 
scheduling only today...

.richardk.14-02-26: That could be very valuable.

.richardk.14-41-16: ...but mas as well wait till after anchovy now.

.richardk.14-44-41: mas/may

.richardk.14-50-15: Amusingly, my head is now bzng with another Ash track, 
"Goldfinger".  I doubt you've a copy though drj. :-)

.drj.15-43-25: another ash track?  What is this anaphora?

.richardk.16-09-37: ACTION telnets.

.richardk.16-11-34: mm.1998-08-26.richardk.13-23-08: Ash] Anyone got an album 
with "Oh Yeah" by Ash on it?  Messin with ma head.

.richardk.16-11-34.1: mm.1998-08-26.drj.13-23-34: Ash?  Oh gosh.  No.

.richardk.16-11-48: ACTION detlnets.

.richardk.16-11-58: detl/detel

.richardk.16-13-27: Oops, that should be:

.richardk.16-14-00: irc.mm.1998-08-26.richardk.13-23-08: Ash] Anyone got an 
album with "Oh Yeah" by Ash ...

.richardk.16-14-00.1: irc.mm.1998-08-26.drj.13-23-34: Ash?  Oh gosh.  No.

.drj.16-33-20: wow. The power of tags.

.richardk.16-34-40: Holy tag convention, Batman!

.richardk.16-45-29: ACTION reboots after having Java run in his browser.

.richardk.16-45-33: PART

.richardk.16-48-51: JOIN

.logbot.16-48-52: This channel is logged to irc.mm.1998-09-08 [in 
trillian:/u/ldisk/richardk/irc-logs]

.logbot.16-48-52.1: Talking Pinhead Blues:

.logbot.16-48-52.2:  Oh, I LOST my ``HELLO KITTY'' DOLL and I get BAD reception 
on

.logbot.16-48-52.3:   channel TWENTY-SIX!!

.logbot.16-48-52.4:  Th'HOSTESS FACTORY is closin' down and I just heard ZASU 
PITTS

.logbot.16-48-52.5:   has been DEAD for YEARS..  (sniff)

.logbot.16-48-52.6:  My PLATFORM SHOE collection was CHEWED up by th'dog, 
ALEXANDER

.logbot.16-48-52.7:   HAIG won't let me take a SHOWER 'til Easter.. (snurf)

.logbot.16-48-52.8:  So I went to the kitchen, but WALNUT PANELING whup me

.logbot.16-48-52.9:   upside mah HAID!! (on no, no, no..  Heh, heh)

.richardk.16-58-10: Hi Lars;  Tucker isn't in 1CC today by any chance is he?

.lth.16-58-16: Nope.

.lth.16-58-24: (Figured it was you on the phone.)

.richardk.17-06-56: Oh yes!

.richardk.17-07-06: I could have phoned you directly, instead of IRCd.

.richardk.17-07-12: Oh well.  Thanks for the info.

.lth.17-07-41: Less physical exertion required to IRC -- I don't have to reach 
for the phone.

.richardk.17-54-15: ACTION checks email, and goes back to rit's office.

.richardk.18-26-02: ACTION checks email.

.richardk.18-26-15: No joy.

.richardk.18-26-21: Tucker seems to be off the air.

.lth.18-26-36: ACTION notes that if ptw can't use his phone, he also can't 
read his mail.

.richardk.18-26-50: Mmmm.

.richardk.18-26-54: Yup -- not good.

.richardk.18-27-13: I imagine all his lines are with te same company.

.richardk.18-27-30: If it gets desparate I mighrt try his other numbers.

.richardk.18-28-10: This is not funny on the Tuesday before a freeze, when he's 
making two critical components for the release.

.lth.18-28-20: Hrm.

.richardk.18-28-30: I'm heading back to hear from Gavin about the locus 
mechanism.

.richardk.18-28-38: from/more from

.richardk.18-29-14: ACTION goes back to rit's office, leaving his phone 
forwarded there.

.richardk.19-49-27: ACTION returns; goes to kitchen.

.ptw.20-38-00: JOIN

.logbot.20-38-00: This channel is logged to irc.mm.1998-09-08 [in 
trillian:/u/ldisk/richardk/irc-logs]

.logbot.20-38-00.1: Yow!  And then we could sit on the hoods of cars at stop 
lights!

.ptw.20-39-37: my phone is flaking again...

.richardk.20-39-51: Hello!

.gavinm.20-42-15: JOIN

.logbot.20-42-15: This channel is logged to irc.mm.1998-09-08 [in 
trillian:/u/ldisk/richardk/irc-logs]

.logbot.20-42-15.1: If I am elected no one will ever have to do their laundry 
again!

.ptw.20-42-40: hi.  My phone seems to have gone again

.ptw.20-43-11: Have you formulated your thoughts?

.gavinm.20-43-12: Ha!

.richardk.20-43-15: Well, I've thought somewhat about criteria, and also had 
some new ideas about segment placement.

.richardk.20-43-23: I guess I have.

.richardk.20-43-44: [Andy] PTW, have you received Andy Cave's email of a few 
minutes ago?

.ptw.20-43-51: Can we conduct the meeting here?

.gavinm.20-44-29: I guess we can.

.richardk.20-44-45: Andy] I think praps I should reply to AC's mail.

.richardk.20-45-09: No, 2nd thoughts, it doesn't merit a swift response.

.gavinm.20-45-16: Agreed.

.ptw.20-45-24: [re AndyC]  I the US we have an expression:  "Well, f*ck me 
harder!"

.gavinm.20-45-33: Shall we start with criteria?

.ptw.20-45-49: Er,

.richardk.20-45-58: expression]  Cool!  Can you give an approx translation?

.ptw.20-46-02: Let's start with a review of the purpose of this meeting?

.ptw.20-46-37: WFMH == As if there weren't enough bad news.

.richardk.20-46-41: exp] I mean, is approx sarcastically saying "Well why don't 
you just break both my legs while you're about it?"

.gavinm.20-46-47: The goal of this meeting is to decide what we're going to do 
to solve segment placement problems in anchovy,

.ptw.20-46-50: That works too.

.richardk.20-47-10: WFMH] Gottit.

.gavinm.20-47-21: Is that alright with everyone?

.ptw.20-47-25: Hang on, I just got a dive klaxon from my Retrospect machine...

.richardk.20-47-31: Might be a bit ambitious.

.richardk.20-47-46: But goals can be ambitious.

.richardk.20-48-27: Lars, I don't spose this discussion is intrusive, but if it 
is just tell us to move onto a new channel!

.richardk.20-48-42: ACTION awaits PTW's return.

.gavinm.20-48-54: RichardK said that there were some criteria for segment 
placement that he didn't believe that we were taking into account or that we 
were agreed on.

.gavinm.20-49-44: He was going to try to identify them more clearly for this 
meeting.

.gavinm.20-49-53: RichardK, what have you got for us?

.richardk.20-50-10: ACTION clears his throat, somewhat apologetically.

.ptw.20-50-41: back

.lth.20-50-45: ACTION is happy listening in.

.richardk.20-51-17: I have four I have a list of four points:

.richardk.20-51-50: 1) able to mimic current behaviour

.richardk.20-52-02: 2) support current EPDL/R pool code

.richardk.20-52-13: [Note: these are not necessarily all essential]

.richardk.20-52-45: 3) address the "second fcache problem", ie. interleaving of 
PS-VM and temp-pool objs.

.richardk.20-52-59: [address here means "do something to alleviate"]

.richardk.20-53-46: 4) simplicity and conservativeness of code

.richardk.20-53-55: 5) simplicity of policy

.gavinm.20-53-59: performance?

.richardk.20-54-29: 6) adaptability of policy, particularly by changing 
parameters in the client, without shipping a new MPS library.

.richardk.20-55-12: 7) performance of SegAlloc, notably including in fail case.

.richardk.20-55-53: refining point (5): simplicity and 
predictability/transparency of placement policy algorithm

.richardk.20-56-12: ACTION stops counting to four rather abdly.

.richardk.20-56-19: abdly/badly

.gavinm.20-57-11: Thanks.

.richardk.20-57-35: I think we've missed the window for a radical change in 
policy.

.gavinm.20-57-43: Let's take those in order, and find out briefly whether we 
have some ocnsensus on them.

.richardk.20-57-56: Sorry, I was racing ahead.  I've stopped.

.richardk.20-58-10: I should clarify (1).

.ptw.20-58-35: 1 is satisfied by doing nothing.

.richardk.20-58-39: If we can mimic current seg-placement, that's good, cos it 
massively reduces risk.

.ptw.20-59-00: but that will not address 3

.richardk.20-59-19: If we ship something that can't mimic current behav, then 
we need to do a lot of perf testing.  It just takes too darn long to do that.  
Three days isn't enough, IMHO.

.ptw.20-59-56: But if we want to address 3, we can't do 1, because 3 says 1 is 
wrong!?

.richardk.21-00-02: (Sorry, I'm being too vague -- it all depends how precisely 
I mean "mimic")

.gavinm.21-00-21: So what you're saying is that either we have something that 
can mimic current behaviour at SW's request, or we do something we're very very 
sure about.  And we don't have time for the second.

.richardk.21-00-35: Gav] Yes, basically.

.ptw.21-00-40: I think if you change the behavior _at_all_, you run risk of the 
perf going to hell.

.richardk.21-01-09: If we make a small, non-client undo-able change from 
current behaviour, then we have to be very sure that at worst it can't be very 
bad.

.gavinm.21-02-13: Agreed.

.richardk.21-02-31: Well, here's an example of a strategy (I'll name it 
"PSGrab") which we could be reasonably confident couldn't make things much 
worse...

.ptw.21-03-04: The only way to make sure it isn't very bad is to run all EP's 
tests, is it not?

.richardk.21-03-15: PSGrab] ... When the PS-VM pool is created, reserve a set 
of segments, say 10% of the arena.

.richardk.21-03-38: PSGrab] Make other pools, eg. temp-pool, prefer not to use 
these.

.richardk.21-04-26: PTW, no: that is necessary if it is a large, radical 
change, but is less necessary for a smaller change with more predictable effect.

.richardk.21-04-49: It all depends on the predictability of the effect of the 
new policy.

.richardk.21-05-12: The PSGrab suggestion I outlined is very conservative.

.richardk.21-05-22: ScriptWorks used to do this anyway.

.richardk.21-06-33: ACTION ponders.

.richardk.21-06-49: I guess I think there are three broad bands of change we 
could contemplate:

.richardk.21-07-08:   a) something client-controllable, still supporting 
mimicry of current behaviour

.gavinm.21-07-25: ACTION thinks about how this could be done without 
perturbing lots of code.

.richardk.21-07-31:   b) small conservative change, where we can predict the 
effect with reasonable confidence.

.richardk.21-07-54:   c) radical change, where we cannot easily or confidently 
predict the effect.

.richardk.21-08-29: (c) is very risky for anchovy; it would need thorough 
testing.

.gavinm.21-08-43: ACTION detects some polarisation in these broad bands.

.richardk.21-08-47: I don't think we have enough time for a (c) change.  
(Pardon the pun :-)

.ptw.21-08-55: I think the system (as a whole) is too complex (sigh) to predict 
the effect of even the smallest change.

.richardk.21-10-22: No, I think it's not as bad as that.

.gavinm.21-10-55: We know that SW only have one EPVM pool, so a solution that 
segregates EPVM to a third end of memory might work.

.richardk.21-10-59: For instance, currently we know the client arena doesn't 
perform too badly at all.

.richardk.21-11-12: Ergo it would be safe and predictable to move its placement 
policy to arenavm.

.gavinm.21-11-28: What effect would that have on TSBA in the low end of memory?

.richardk.21-12-08: TSBA] it should reduce EPVM--EPDR segment transitions, 
reducing splinter wastage

.richardk.21-13-08: effect of even the smallest change] A further point: if the 
change is parametrised and joins smoothly into current behaviour, ...

.gavinm.21-13-35: So, for the client arena, reserving the first k (~= 10%) for 
PSVMs might be quite effective, certainly for (3).

.richardk.21-13-39: ...then we can mimic current behav simply by getting client 
to pass the right value of the parameter.

.richardk.21-14-02: reserve ~10%] Yes.

.richardk.21-14-09: Yes/Yes it might.

.gavinm.21-14-15: It's less clear just how to do that in the VM arena.

.richardk.21-14-26: VM] 10% of address-space.

.richardk.21-14-30: What's hard?

.richardk.21-15-27: Another suggestion that should be chucked in: Zones in 
arenavm are currently used pessimally for SW I believe.

.richardk.21-15-52: So, sugg: get arenavm to ignore zones when dealing with SW.

.richardk.21-16-07: ...and just behave like a client arena.

.gavinm.21-16-36: The simplest way to force such a change into arenavm.c would 
be to give EPVM a preference of some number of zones, and exclude those same 
zones from every other preference.  Is that sort of thing close enough?

.richardk.21-16-43: There wasn't time to do this to accompany the EPDR work for 
minnow.

.richardk.21-17-01: gav] That might be close enough.

.gavinm.21-17-05: ACTION worries about Dylan again.

.richardk.21-17-16: gav] But I'm not v familiar with arenavm, not enough to be 
sure.

.richardk.21-17-35: gav] And see my just-made point about abandoning zones in 
arenavm for SW.

.richardk.21-17-39: point/sugg

.gavinm.21-17-42: Making arenavm behave like arenacl for SW would solve (7).

.richardk.21-17-55: ACTION scrolls back IRC window.

.ptw.21-18-12: ACTION muses that pools with similar lifetime share zones, 
those with dissimilar do not, under current locus-manager policy.

.ptw.21-18-51: How does arenacl behave?

.gavinm.21-18-55: ... but would be a great perturbation to the code.

.richardk.21-19-19: PTW, I do believe the locus.c LocusManager design/code has 
some ideas that are right-on.

.richardk.21-19-50: How about arenavm2?

.richardk.21-20-11: It would still be platform indep.  That stuff's all in the 
vmXxx.c files.

.gavinm.21-20-29: It iterates chunks, and searches for the first free range in 
that chunk from low or high depending on SegPref.  RefSet's don't enter into it.

.gavinm.21-20-42: [ arenacl, that is. ]

.gavinm.21-21-09: arenasw more like

.richardk.21-21-30: Gavin, what was the worry about the Zones-for-EPVM idea, in 
the light of Dylan?

.ptw.21-21-34: IC.  What I don't C is why arenacl is good arenavm is bad?

.richardk.21-21-53: arenavmm.c, as opposed to one for automatic pools arenavma.c

.gavinm.21-22-35: The Dylan worry was "ignore zones ... and just behave like a 
client arena".

.richardk.21-22-42: Just to clarify, I do not have evidence that arenavm is bad 
and arenacl is good.

.richardk.21-23-09: DylWorry] But it would be aprameterised of course!  Of 
course we'd still keep zones for Dylan!

.richardk.21-23-21: apram/param

.gavinm.21-23-25: We know that at least one SW task goes significantly slower 
with arenavm than with arenacl.

.richardk.21-24-37: arena vm-vs-cl] BUT, I believe the zone choice is pessimal, 
and that this willa ffect performance whenever we start using most of 
address-space.  This would be on biug SW installations with A gig or so of RAM.

.gavinm.21-24-49: arenavm as arenacl] It seems a shame to waste address space 
when we could use it to advantage.

.richardk.21-25-21: Currently we aren't using it, if I understand the thrust of 
yr comment.

.gavinm.21-25-29: Why did we want to move SW to VM again?\

.gavinm.21-25-39: Mmm.

.richardk.21-26-02: This was written up.  You aren't really confused are you?

.richardk.21-26-36: However, the way arenavm treats SW is probably poor.  But 
we don't actually know, I'm just going from what DRJ told me about the code, 
back in minnow.

.richardk.21-28-02: ACTION wraps up his comments on arenavm vs arenacl thusly:

.richardk.21-28-35: 1) We could perhaps use zones cleverly to improve seg-place 
in arenavm;

.richardk.21-28-49: 2) Current zone use is dumb, possibly pessimal.

.richardk.21-28-53: ./;

.richardk.21-29-10: 3) it migh be better not to have zones at all, fo manually 
managed TSBA pools.

.gavinm.21-29-14: Non-collected pools can specify their own preferred refsets 
and arneavm.c will respect that.  Currently, they split address space in two 
and give one of two refsets.

.richardk.21-29-20: migh/might   fo/for

.richardk.21-29-47: 4) Making arenavm behave like arenacl is an example of a 
change whose effect we _can_ predict.

.gavinm.21-29-52: Some conservative well-understood change might involve 
forcing more different preferred refsets.

.richardk.21-30-05: predict] (to some extent, so such changes do exiust)

.ptw.21-30-09: I thought we knew EP never allocate > zone objects?

.richardk.21-30-15: ACTION finishes wrapping up.

.gavinm.21-30-39: They believe that maximum object size is currently 200k.

.ptw.21-30-51: And a zone?

.gavinm.21-30-55: ... unless it isn't.

.gavinm.21-31-13: One 32nd of arena size.

.richardk.21-31-37: Typoically arenavm addr-space is at least 512M.

.gavinm.21-31-50: I suspect that arena size is typically large with respect to 
6M4b.

.gavinm.21-32-25: (32 * 200kb)

.richardk.21-32-40: 2^29 / 2^5 = 16M zones?

.gavinm.21-32-59: YEs.

.ptw.21-33-09: ACTION muses that the locus-manager can mimic splitting the 
address space with coordinated settings of prefer and disdain

.richardk.21-33-21: PTW, so yes I doubt SW allocates objs bigger than a zone, 
or even a stripe of a zone.

.ptw.21-33-50: So, I'm not sure how zones cause TBSA (whatever)

.gavinm.21-33-59: ACTION agrees with ptw's musing, in a 
blue-sky-sort-of-sense.

.gavinm.21-34-48: It's the fact that arenavm doesn't even try to put manual 
pools in different zones that causes the problems.

.richardk.21-35-19: locus-mgr] Can the locus-mgr tell which zone owns the 
lowest stripe in the arena?

.richardk.21-36-01: Gavin, I think you're goping beyond what we have evidence 
for.  What problems?

.gavinm.21-36-07: I have some ideas about how to communicate better between 
SegAlloc and the locus manager, but now is not the right time to air them.

.ptw.21-36-11: The LM doesn't know anything about the arena.

.richardk.21-36-14: goping/going

.gavinm.21-36-45: I was responding to PTW's: So, I'm not sure how zones cause 
TBSA (whatever)

.richardk.21-37-00: problems] Ah.

.gavinm.21-37-58: So: EPVM has a small, configurable preferred refset that is 
disjoint from everyone else's.  That's a concrete proposal for a small change 
to arenavm.c

.gavinm.21-38-35: arenacl.c, we can make reserve a portion to look in last.  
Kludgy, but not hard.

.richardk.21-38-36: Make itr client configurable.  I have ideas for how this 
proposal could be fleshed out.

.richardk.21-39-01: "Kludgy, but not hard" sounds right on the nail for anchovy.

.gavinm.21-39-24: Preferably the client configures through the same interface 
for both arenas.

.gavinm.21-39-58: PTW, does that sound reasonable?

.richardk.21-40-02: zones and TSBA] Just to clear that up, in full: perhaps 
better no zones "for manually managed TSBA pools"

.richardk.21-40-10: zones and TSBA]...

.gavinm.21-41-01: It's small, conservate, can mimic old behaviour, doesn't 
perturn EPDL/EPDR, is client-configurable, and should fix EPVM/temp-pool 
problems.

.gavinm.21-41-28: It doesn't fix performance problems in SegAlloc.

.richardk.21-41-43: zones and TSBA] ... so, manually manage pools don't benefit 
from zones (ability to extract cheaply from address is of no use), and 
address-ordered structures (which occur in our current manual poolclasses) can 
get tangled by them, and ...

.richardk.21-42-39: zones and TSBA] ... and slicing into upto 64 stripes may 
increase the number of transitions.

.ptw.21-42-43: I don't understand "can get tangled".  There are only 32 zones, 
that can't create much tangling.

.gavinm.21-43-27: PTW, he meant address-ordered structures can exhibit poor 
performance when allocated zones, not portions of address  space.

.richardk.21-43-38: zones and TSBA] It is only the last point directly, and the 
second point (indirectly, because TSBA means address-order is important, hence 
occurrence of address-ordered structures), that are a consequence of TSBA.

.ptw.21-43-44: I don't follow.

.richardk.21-44-18: (Sorry Gavin, I'm off on a tangent)

.gavinm.21-45-04: EPDL/EPDR have performance strongly affected by whether newly 
allocated segments tend to be near the beginning or end of their address list.  
Allocating zones doesn't guarantee any particular address space order. 

.gavinm.21-45-44: arernavm doesn't allocate zone by zone, however.  Only the 
half refset preferences introduced with SegPrefHIGH can cause that problem.

.gavinm.21-45-59: richardk, agreed.

.richardk.21-46-06: Tangling, such that newly-allocated segments appear in 
address-space in a jumping-about way, can affect placement policy.

.gavinm.21-46-26: ACTION wonders if those half refsets could be responsible 
for a lot.

.ptw.21-46-30: For (the suspect) address-ordered fit policy implementations.

.gavinm.21-46-53: RichardK, "tangle" tends to imply two things being mixed up; 
hence PTW's confusion.

.gavinm.21-47-06: [ I surmise.]

.richardk.21-47-24: Tangle]  Thanks for yr explanation Gavin; it was better 
than mine, and yes the word "tangle" is unhelpful praps.

.gavinm.21-48-00: Hmm.  Half refsets could make EPDL/EPDR slow down in vm 
arenas compared to client arenas.

.ptw.21-48-18: ACTION muses what would happen if pools didn't eagerly return 
segments...

.richardk.21-48-25: Gavin, I'm going to ask you what hafl-refsetws are real 
soon now, but first...

.richardk.21-48-31: PTW: _RIGHT_

.richardk.21-48-54: PTW: currently, EPDL/R drops big holes into the middle of 
its free-list, just to return segs to the arena.

.ptw.21-48-55: ACTION ... like MV2 does

.richardk.21-49-06: Another place where I think poolmv2 is onto something.

.richardk.21-49-13: ACTION Snap! :-)

.ptw.21-50-42: I hope we can plan an orderly introduction of MV2 and perhaps 
even LocusManger, where they can be reviewed and tested some time, rather than 
copting their ideas piecemeal in the name of "low risk, small perturbations" 
done at the last minute.

.richardk.21-51-02: Yes.

.richardk.21-52-06: But note that there are _two_ probs with these two bits of 
technology.

.ptw.21-52-12: If EPDL/R used the locus manager, it would tend to give them 
back the holes they dropped, rather than giving them something else.

.gavinm.21-52-43: RichardK, have a look at ARENA_DEFAULT_REFSET.

.gavinm.21-53-25: Can we vote on the EPVM reservation proposal?

.ptw.21-53-54: I abstain

.richardk.21-54-06: ACTION reurns to topic.

.gavinm.21-54-10: ACTION sighs.

.richardk.21-54-13: rurns/returns

.richardk.21-54-19: rurns/reurns

.richardk.21-54-25: :-)

.richardk.21-54-52: ACTION looks back to see what Gavin was saying when he 
(RK) was tangential

.gavinm.21-54-56: ACTION was due in the pub four hours ago.

.ptw.21-54-56: Well, either that or I vote no.  My concience won't let me vote 
otherwise.  Luckily, you do not need me to break any ties.

.ptw.21-55-13: I am due at the pub in 2.5 hours

.ptw.21-55-37: But first I have to play tennis in 1.0 hours.  Which means we 
need to wrap this up.

.gavinm.21-55-58: The proposal doesn't address SegAlloc performance, which 
vm-as-cl would.

.richardk.21-56-07: Gavin. I don't need to know about half-refsetsa do I?

.gavinm.21-56-35: Not now, but it would bear investigation.

.richardk.21-56-51: I don't think it's a well-formed proposal to vote on.  I 
think it is a good candidate.  I think it should be looked at.

.richardk.21-57-16: I think SegAlloc in arenavm merits work.

.gavinm.21-57-26: Have we anything except vm-as-cl that will fix SegAlloc 
performance?

.gavinm.21-57-38: I don't think vm-as-cl is very well defined, by the way.

.richardk.21-58-03: I think arenavm's use of  zones in the context of SW merits 
work, and possibly parameterisation, even a bastard-hack conditional-compile!

.ptw.21-58-07: What evidence do we have that segalloc performance is a problem?

.richardk.21-58-27: segalloc] RITs CAP profiles.

.gavinm.21-58-31: Both SW's CL vs VM tests and RIT's profiles.

.ptw.21-58-53: RIT definitely fingered segalloc.

.gavinm.21-58-54: The former is vaguer, of course.

.richardk.21-59-27: clarif: SW see a perf dif betw CL and VM, but RIT has 
actually looked at it with CAP and the diff seems to be cost of SegAlloc, with 
cost-to-fail implicated (but not confirmed) as an possible culprit.

.richardk.22-00-17: SegAlloc does lots of BT stuff in arenavm.  ("Nuff said", I 
could say, meanly)

.gavinm.22-00-24: VMSegAlloc tests four different RefSet's in each chunk.  
There's a lot of repeated work in there.

.gavinm.22-00-32: Suggested ideas:

.gavinm.22-00-49:  - Cache data to cull BT work;

.richardk.22-01-00: ACTION , nitpicking, spots a Greengrocer's apostrophe:-)

.gavinm.22-01-04:   - Cull duplicate refsets in list of four;

.gavinm.22-01-49: OK.

.gavinm.22-01-59: I think we're spent here.

.gavinm.22-02-07: Shall we call it a night?

.ptw.22-02-18: I have to go

.richardk.22-02-22: I could cope with that.

.richardk.22-02-28: Phew.

.gavinm.22-02-31: It's a night.

.ptw.22-02-34: ./

.richardk.22-02-37: This is hard work.

.gavinm.22-02-40: Thanks for your input everyone.

.gavinm.22-02-46: I feel a little happier now.

.richardk.22-02-55: ACTION cries "Onwards, Anchovy! :-)

.richardk.22-12-09: ACTION ... to deaf ears.

.richardk.22-55-24: ACTION adds to the IRC log.

.richardk.22-55-44: Mmm, GMT timestamps.  Good-oh.

.richardk.23-15-04: Tiime to go hoome.

.richardk.23-15-44: Via the Fridge here at the Hall, where DavidG is slaving 
away in 37C room trying to make EP2K work with a Kodak DC40.

.richardk.23-16-15: Bye, anyone who's still here!

.richardk.23-16-19: ACTION leaves.


