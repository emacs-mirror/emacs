                      IRC #MM ON 1998-02-27 FRIDAY
                           irc.mm.1998-02-27
                               draft doc
                           gavinm 1998-03-02

.logbot.00-05-03: PART

.logbot.00-05-06: JOIN

.logbot.00-05-06.1: This channel is logged to irc.mm.1998-02-27

.logbot.00-05-06.2: RHAPSODY in Glue!

.rit.10-34-33: JOIN

.logbot.10-34-33: This channel is logged to irc.mm.1998-02-27

.logbot.10-34-33.1: First, I'm going to give you all the ANSWERS to today's 
test..

.logbot.10-34-33.2:  So just plug in your SONY WALKMANS and relax!!

.rit.10-34-42: hello.

.drj.10-34-48: hi

.rit.10-34-54: I've received mail from postmaster@harlequin with empty body. 
Has anyone else?

.drj.10-35-00: yes

.drj.10-35-03: I did

.drj.10-35-09: glitch I guess

.drj.10-35-25: like when all the phones ring if somnething disastrous goes 
wrong with the switch

.rit.10-35-29: yep. strange

.drj.10-35-37: the ed office got announced.  I was dead impressed.

.rit.10-35-47: ... but in the case of the phones it's a sensible fall-back to 
ring them all when a call comes in.

.rit.10-35-56: whereas sending everyone blank email...

.drj.10-36-09: Ummmm

.rit.10-36-20: (ed) Yes, I didn't think of that.

.drj.10-36-38: ACTION checks his sarcasm detector

.rit.10-36-51: Some kind of large advertising banner is printed out here, in a 
sort of Harlequinny-turquoise colour...

.rit.10-36-59: ...in Rotis semi sans. Hmm.

.drj.10-37-05: ACTION screams

.drj.10-37-33: I saw MAW13's latest product yesterday

.drj.10-37-43: moving cards for cousin Harriet (!)

.rit.10-37-47: Harriet's moving cards?

.rit.10-38-00: They're a very beautiful colour.

.rit.10-38-08: Pity about the 47.

.drj.10-38-12: (who else but mark would ahve a cousin harriet?!)

.drj.10-38-23: you mean the ink colour?

.drj.10-38-30: yes, it was excellent

.rit.10-39-09: yes, the ink colour. A special blend, mark said.

.drj.10-39-18: do you know what the fount used on the "Harlequin needs more 
people like you" posters is?

.rit.10-41-50: No. Where is one?

.drj.10-42-25: er, I think there is one in the kitchen

.rit.10-42-34: ACTION pops to the kitchen

.rit.10-44-09: ACTION rit returns

.rit.10-44-37: No, but's it looks familiar. I think it may be mentioned in 
Bringhurst.

.rit.10-44-46: THen again, I think that about every font nowadays.

.rit.10-44-59: Spiekerman (sp?) ?

.drj.10-45-23: don't you think everything is spiekerman

.gavinm.10-45-27: PART

.rit.10-45-35: yes, that too.

.gavinm.10-45-47: JOIN

.logbot.10-45-47: This channel is logged to irc.mm.1998-02-27

.logbot.10-45-47.1: I'm young..  I'm HEALTHY..  I can HIKE THRU CAPT GROGAN'S 
LUMBAR REGIONS!

.rit.11-20-31: It could be Meta+2 Normal

.rit.11-20-38: Try http://www.fontfont.de/packages/meta7142/meta7142.html

.drj.11-20-55: roger will check that url

.drj.11-21-43: a spiekerman fount

.rit.11-22-03: yees.

.drj.11-22-36: well, the i t and l look good.  need a y

.rit.11-24-12: Try http://www.philsfonts.com/phils/sectionsjan97/typeff15.html

.drj.11-24-43: ahh. I just remembered Officina

.drj.11-24-49: is that a spiekerman fount too?

.rit.11-24-56: I quote from the web:

.rit.11-25-00: Erik Spiekermann's Meta was originally designed in 1984 for use 
on the 

.rit.11-25-03: official forms of the Bunderspost, the German Post Office, but 
was never 

.rit.11-25-03.1: actually used. It was later reworked and released and has been 
widely 

.rit.11-25-06: accepted as a highly legible typeface in print and in digital 
displays. 

.rit.11-25-45: Yup. See, he's taking over the world.

.drj.11-25-57: indeed

.rit.11-26-11: above paragraph explains why there are differnt versions of 
meta, called things like Meta+ and Meta+2.

.rit.11-26-19: sort of.

.drj.11-26-34: I see officina and meta* all over the place these days

.richardk.11-31-01: JOIN

.logbot.11-31-01: This channel is logged to irc.mm.1998-02-27

.logbot.11-31-01.1: I feel like I'm in a Toilet Bowl with a thumbtack in my 
forehead!!

.richardk.11-31-19: Poor old LogBot.  Morning, everyone.

.drj.11-31-40: hello

.drj.11-32-22: it's definitely a meta/officina fount

.rit.11-32-26: hello

.drj.11-32-32: cover of Microserfs uses one too

.drj.11-32-47: and, a recent ad by one the high street banks I think

.richardk.11-32-48: Hmm, Bus times in Spring for Bazza seem very out of date.

.rit.11-32-59: I think (but haven't checked) officina is more angular and has 
more contrast in stroke weight. But yes, it _looks_ like Spiekermann.

.drj.11-33-03: but probably accurate I think was the last conclusion

.rit.11-33-17: Actually, I think they are pretty correct.

.drj.11-36-18: $18 for a fount is pretty cheap

.rit.11-38-01: I think "competition" with the 
ten-million-free-fonts-for-$10-and-so-what-if-they're-ripped-off merchants has 
probably affected font prices.

.richardk.11-38-05: cannotstartwithbracket [BUS] Correct: good-o.  Ta.

.rit.11-38-29: Also, the number of buyers has probably been skyrocketing over 
the last few years.

.rit.11-38-35: I mean, potential buyers.

.drj.11-39-29: [[]]

.richardk.11-43-51: BRACKETS: perhaps it's my IRC client... I'll try again.

.richardk.11-44-10: [BUS] if you see this, DRJ, please say "woozle".

.drj.11-44-24: woozle

.richardk.11-44-32: [BUS} Oh, I see it too this time.

.richardk.11-44-36: [BUS] Correct: good-o.  Ta.

.richardk.11-45-22: [BRACKETS] Hmm, that last of mine was from the history 
buffer.  Buggy client apparently.

.drj.11-45-45: SEP

.rit.11-45-50: [BRACKETS] and there was me thinking you had it on a macro.

.richardk.11-47-14: [PUB] I'm off to ride my motorbike home in daylight; catch 
train in; see you at Shepreth Plough c. 1305

.richardk.11-54-01: PART

.rit.12-03-52: turning FPO back on seems to have made the dylan profiles more 
sensible.

.drj.12-05-13: suprise surprise

.rit.12-07-25: My profdiff script now reports that using LO for buffers and 
strings, we save almost 3 seconds in AMCFix (this number too small to be 
reliable) but lose almost a minute in BTFindResRange.

.drj.12-07-42: ouch

.drj.12-08-00: time to add a "much better allocator (tm)" to LO

.drj.12-08-15: Tony suggested ripping out free lists from poolmv

.drj.12-08-21: I think it's a good idea

.rit.12-08-44: Also we have an extra 3.5 seconds exclusively in 
dylan_scan_contig.

.rit.12-08-53: Yes, sounds good, it it's easy.

.drj.12-09-15: what are the timings for AMCFix then?

.drj.12-09-26: an extra 3.5 seconds in dylan_scan_contig...

.drj.12-09-35: odd

.drj.12-09-49: ouch

.drj.12-10-13: I have this sneaking suspicion that the roots have summaries 
which overlap with the LO zone

.gavinm.12-10-35: Of course, with an improved BTFindResRange ...

.drj.12-10-48: so collecting LO will result in pathlogically much root scanning 
(to no effect)

.drj.12-10-56: you would need to make it over 100 times faster gavin

.rit.12-11-21: Inclusive of children, we actually spend less than a second 
extra in dylan_scan_contig. I should say I don't think these numbers are 
reliable when they're only a second or do. I haven't done a repeated profile.

.gavinm.12-11-25: I was aiming for half an order less.

.drj.12-11-25: and it simply ain't going to do that without using a radically 
different data structures

.drj.12-11-53: so we susbstitute 3 seconds saved in AMCFix for 6 seconds lost 
in FindResRange

.drj.12-12-01: is this sound?

.rit.12-13-40: Er, yes, but the overall slowdown is greater than the extra time 
spent in BTFIndResRange.

.drj.12-15-14: so we're stuffed anyway

.gavinm.12-15-25: RIT, had you considered testing and requested something like:

.drj.12-15-37: is times spent in BTFindResRange equal to time spent in LOFill?

.rit.12-15-38: You need cooperative collection, as Tony and others have been 
advocating.

.drj.12-15-46: how does AMCScan compare

.drj.12-15-51: EVERYONE IS ADVOCATING IT

.rit.12-15-57: yes.

.gavinm.12-16-06: extra-arena references in roots slow DMM significantly

.gavinm.12-16-10: ?

.rit.12-16-17: and it might unstuff us

.drj.12-16-29: may slow DWMM a bit

.rit.12-16-38: gavin: can you explain that idea again

.drj.12-16-47: "blacklisting" is the solution

.drj.12-16-58: a solution I should say

.gavinm.12-17-02: blacklisting is a solution.

.drj.12-17-58: rit, a root may have a summary like: 0x01007001 (say)

.drj.12-18-13: actually I think hat's pretty typical for the dylan compiler

.drj.12-18-32: most roots most of time don't in fact point to any pool objects

.rit.12-19-09: AMCScan is about 1.5seconds slower inclusively

.drj.12-19-13: imagine I accidentally allocated objects in zones 12-14

.drj.12-19-37: then even though the root doesn't refere to them I'll scan the 
root whenever I condemn those objects

.drj.12-20-06: the references in the root which point to those zones are 
"extra-arena" as gavinm says

.gavinm.12-20-14: When we gather summaries, we don't test whether the 
references are into the arena.

.drj.12-20-30: _|_

.rit.12-20-34: Aha, yes. Sorry, I read one of drj's lines as a continuation of 
one of gavinm's, and got confused.

.rit.12-21-13: LOBufferFill slows down (from 0) by about 68 seconds -- 10 
seconds more than BTFindResRange.

.drj.12-21-29: we _do_ test some of the references for "in-arena" (any 
reference to white zones), but we still accumulate the reference

.gavinm.12-22-01: I meant that we don't test for the summary accumulation.  
Obviously we test when we fix.

.drj.12-22-19: an absolute difference on it's own is almost entirely useless, 
what are the absolute times for AMCScan and AMCFix?

.rit.12-23-37: ANCScan: 35s, +1.5s

.drj.12-24-03: Hmmm...

.rit.12-24-07: AMCFix: 25s, -2.8s

.rit.12-24-15: positive difference indicates slowdown when using LO

.drj.12-24-23: would be nice if we could disable collections of LO if this 
config

.rit.12-24-47: SegSize: 0s, +5s.  not so good

.drj.12-24-52: e 2/if/in/

.drj.12-24-55: +5s!?

.drj.12-24-59: ouch

.rit.12-25-06: apparently, yes.

.drj.12-25-25: it's all that crud with calculating how many bits are in the 
tables

.drj.12-25-42: perhaps we should simply store the length of the BT (in bits) in 
the LOGroupStruct

.rit.12-25-51: SegSize almost all called from loGroupFindFree

.gavinm.12-26-20: Radical Suggestion Coming Up ...

.gavinm.12-26-33: We could store the BT length in the BTStruct.

.gavinm.12-26-47: Isn't somebody doing a review edit for that?

.drj.12-26-55: that presupposes a more radical suggestion

.gavinm.12-27-15: What, that we should actually do review edits?  8-)

.drj.12-27-23: Hmm.  makes the nasty BT hack that goes on in the event 
bootstrap much much worse

.rit.12-27-43: BufferDetatch: 0s, +1.8s.   Is that at all possible?

.drj.12-27-53: no, not that we should do review edits, but that BT should be a 
structure pointer type

.gavinm.12-28-07: I knew that really.

.drj.12-28-27: rit, re bufferdetach: yes.  LOBufferEmpty fiddles with the bit 
tables again.  

.drj.12-28-46: in fact it calls on of BTSetRange or BTResRange (I forget which, 
perhaps both)

.gavinm.12-28-54: BT should be a structure, but should be embedable.

.drj.12-28-58: a/on/e

.rit.12-29-09: If the theory about references in roots slowing us down were 
true, wouldn't TraceFlip have increased? (TraceFlip: 2s, +.4s)

.drj.12-29-13: Hmm

.drj.12-29-16: so you'd want

.drj.12-29-47: struct BTStruct {Sig sig; Count length; Word word[1]}?

.drj.12-30-05: instead of BTStruct {Sig sig; Count length; Word *words}?

.gavinm.12-30-16: We should be able to construct embedable variable length 
structures without blowing our minds too much.

.drj.12-30-35: just the standard

.gavinm.12-30-38: Of course, it's not clear that it's necessary.

.rit.12-30-57: But: AMCBufferEmpty: 0s, +1.1s. 

.drj.12-31-09: I've never come to a decent conclusion about what the standard 
says about structures with arrays hanging off the end

.gavinm.12-31-13: I'm sure I'm right; I just can't be bothered to convince you.

.drj.12-31-20: it's such a common construct they should've explicitly ruler

.drj.12-31-39: right about what?  I agree, it won't blow our minds, I agree, 
it's not clear that it's necessary

.drj.12-31-51: gavinm, and you haven't made any other assertions

.rit.12-32-13: I think the comp.lang.c faq sez you should use word[MAXWORDS] in 
your structure definition.

.drj.12-35-18: Hmm

.drj.12-35-41: Clearly the most clearly well-defined solution is to store the 
variable length part in a separate object

.drj.12-36-21: in fact I think I'm conviced that either works

.drj.12-38-14: pun soon

.drj.12-38-19: er, pub soon

.gavinm.12-45-06: I'm still waiting for the pun.

.gavinm.12-46-48: pub now

.rit.12-46-56: ok. collect sheep?

.rit.12-47-47: ACTION goes to lunch

.richardk.14-20-04: JOIN

.logbot.14-20-04: This channel is logged to irc.mm.1998-02-27

.logbot.14-20-04.1: ..  my NOSE is NUMB!

.rit.14-20-17: ACTION returns

.drj.14-37-18: rit, clearly the problem with /Oy- is a failure to meet 
req.dylan.prot.debug

.drj.14-37-30: aka request.dylan.170079

.drj.14-37-51: but that request doesn't have a change for meadowlark, so 
there's no way to express this rejection in DARWIN

.drj.14-39-00: beep

.gavinm.14-39-01: Aha!  

.gavinm.14-39-10: ACTION dons Process Manager hat.

.gavinm.14-39-40: Simply add release.dylan.meadow-lark to the "Applies to" 
field in the request,

.gavinm.14-40-02: thus re-colouring the release tree with respect to the 
proposition defined by that request.

.gavinm.14-40-14: Oh, and set the release back to scheduling.

.drj.14-40-40: it's not the usual meaning of scheduling is it?

.gavinm.14-40-46: beep 

.gavinm.14-41-02: Perhaps a new request would be simpler.

.rit.14-41-26: drj, yes I agree.

.rit.14-41-37: btw to get my attention, msg is better than beep

.drj.14-41-42: noted

.drj.14-41-48: it wasn't that important though

.drj.14-42-10: Hmm.  a thread about putting /usr/ucb/bin on ones path

.rit.14-42-16: In the past, I think we have gone for new requests in this kind 
of situation.

.drj.14-42-20: clearly a terrible EVIL that SHOULD NEVER BE COMMITTED

.gavinm.14-42-50: It's a weakness in the DARWIN implementation, not in the 
theory of changes, requests, and releases.

.drj.14-43-13: so how is closed different from active?

.gavinm.14-44-03: I close a request when all necessary changes have been 
scheduled, and all their QA statuses are Accepted, Rescheduled, or Abandoned.

.gavinm.14-44-16: My last statement was a lie, by the way.

.drj.14-44-29: so how is closed different from active?

.drj.14-44-54: "how are A and B different?" "this is A"

.gavinm.14-45-02: Active means that all necessary changes have been scheduled, 
although having any changes at Rejected is an exception to this.

.drj.14-45-38: so.

.drj.14-46-06: explain that exception case please.  it appears to be the only 
difference.

.gavinm.14-46-49: When QA reject a change, that implies that another change 
should be scheduled.

.drj.14-47-00: yes, good

.gavinm.14-47-23: In some sense, this effectively knocks the request back to 
Scheduling, but we decided not to make QA make that status change.

.drj.14-47-54: ACTION is confused

.drj.14-48-14: I think you'll have to explain what status the request was 
before and after QA modified one of its changes

.gavinm.14-48-20: Instead, I manually scan for Rejected changes, and take the 
appropriate action.

.gavinm.14-48-56: For a change to be QA Waiting implies that the request is 
either Scheduling or Active.

.drj.14-49-18: Active means that all necessary changes have been scheduled

.gavinm.14-49-51: QA never modify any status other than the QA Status of a 
change (another lie).

.drj.14-49-58: so doesn't that imply that all changes have reached closure? 
Otherwise you couldn't tell if "all necessary changes have been scheduled"

.gavinm.14-50-22: Er, no.  That's why Rejected is the exception.

.drj.14-50-33: aha

.gavinm.14-50-42: I guess Active implies that all necessary changes were 
scheduled at some point in the past.

.drj.14-50-46: so active means "some changes have been scheduled" ?

.gavinm.14-50-53: QA Rejected creates a need for another change.

.gavinm.14-51-03: No.

.drj.14-51-12: Am I being dense here?

.drj.14-51-40: "QA Rejected creates a need for another change." => ("all 
necessary changes have been scheduled" is FALSE)

.gavinm.14-51-46: If I schedule a change for cottonwood.3, and can't decide 
whether to make the corresponding trunk change in meadow-lark or box-turtle, 
then I leave the request at Scheduling.

.gavinm.14-52-18: DRJ, agreed.  In some sense, QA should change the request 
status back to Scheduling, I agree.

.drj.14-52-33: so what does active mean?

.gavinm.14-53-02: However, that breaks the rule that document edits should not 
require a simultaneous change to another document, and I use another process to 
link this transition.

.drj.14-53-18: yes that's fine.

.gavinm.14-53-19: I guess Active implies that all necessary changes were 
scheduled at some point in the past.

.drj.14-53-30: er NO

.drj.14-53-59: by the lemma: "QA Rejected creates a need for another change." 
=> ("all necessary changes

.drj.14-54-00: +have been scheduled" is FALSE)

.gavinm.14-54-24: If we pretended that a request was at Scheduling (or no later 
than Scheduling) when there was a rejected change for it,  then the "all 
necessary changes" definition would be true.

.drj.14-54-28: if it turns out in the future that you needed to schedule 
another change, then it can't ever have been true that all necessary changes 
were scheduled.

.drj.14-54-38: gavinm, no

.drj.14-55-21: surely if all necessary changes had been scheduled then you 
wouldn't ever need to schedule another change? (otherwise what does necessary 
mean?)

.gavinm.14-55-50: I cannot and should not schedule a rework change in a child 
release when the one in the parent release is still at QA status Waiting, 
therefore, at that point in time, all necessary changes have been scheduled.

.drj.14-56-20: aha

.gavinm.14-56-31: QA Rejected creates a new need for a change that didn't exist 
before.

.drj.14-56-35: TMBSMDOTW necessary WWIWNPA

.drj.14-56-55: I see

.gavinm.14-57-35: If a need doesn't exist yet, but could exist in the future, 
does that mean that I cannot claim to have satisfied all needs at some point in 
time?

.drj.14-57-48: so "necessary" means "necessary, assuming that all current 
changes get accepted by QA and the bug never gets reintroduced by some other 
mechanism"

.gavinm.14-58-06: Yes.

.gavinm.14-58-14: Both of those create new needs.

.gavinm.14-58-27: The latter is not well represented in DARWIN.

.drj.14-58-33: satisfying all needs at some point in time (which is what I 
agree you have done) is not the same as "having created all necessary changes"

.drj.14-58-49: because in this case necessary applies to the set of changes

.gavinm.14-59-07: I was inferring some link between need and necessity.

.drj.14-59-15: there is yes

.drj.14-59-30: but you can't have the object of necessity transfer across 
sentences

.drj.14-59-55: so, er, I've forgotten what the difference between "active" and 
"closed" was now

.gavinm.15-00-02: Not much.

.gavinm.15-00-21: Active means I rarely think about it.

.drj.15-00-25: (but in any case I think you need a tighter definition of 
active.  especially for pedants like me).

.gavinm.15-00-31: Closed means I almost never think about it.

.drj.15-00-51: it seems that for both of them you only need to reconsider the 
request if something else happens

.gavinm.15-00-57: Yes.

.drj.15-01-03: and this something else will be easily caught by othe procedures

.gavinm.15-01-21: I sometimes scan Active requests.

.drj.15-01-29: by post-processing changes on the one hand, and scanning the 
request pout back to scheduling on ther other.

.gavinm.15-01-37: But this shouldn't be necessary.

.drj.15-01-43: why do you scan active requests?  I can't see the point

.drj.15-01-45: aha

.gavinm.15-02-10: So if Active meant: All necessary changes have been 
scheduled, or there is at least one rejected change for this request.

.gavinm.15-02-14: would you be happier?

.drj.15-02-37: a bit

.gavinm.15-03-00: Re scanning Active: With my Product Manager hat on, I try to 
paper over any process cracks that may appear.

.drj.15-03-09: it still doesn't capture the fact unintended changes can 
reintroduce the bug.  but that's something missing from DARWIN pervasively

.drj.15-03-44: so, would active be better renamed inactive ?

.gavinm.15-03-48: Agreed.  Darwin's release tree assumes some inheritance of 
property, typically by inheritance of code base.

.gavinm.15-03-54: 8-)

.drj.15-04-19: so what state is a request in when you know that you haven't 
scheduled all the changes?

.gavinm.15-05-02: Scheduling, or maybe Defining.

.drj.15-06-01: scheduling and defining are not disjoint are they?

.gavinm.15-06-23: Agreed.

.drj.15-06-36: Hmm

.gavinm.15-07-01: It is rare to schedule a change while it's still at Defining.

.drj.15-07-33: I think we are now having a rare insight into the fundamental 
problem of software engineering

.drj.15-07-55: which is, I think:

.drj.15-08-09: abstractions and models are not sufficiently clean

.drj.15-08-38: so the way states in a DARWIN request work is an example of this

.gavinm.15-09-04: It usually happens because the quick hack is scheduled before 
the Right Thing is designed.

.drj.15-09-08: the state field in the Notes request document does not reflect 
the state of the request

.drj.15-09-40: the different values that the field can take don't map onto 
disjoint subsets of the total state space

.gavinm.15-09-44: Scheduling really means: finished defining and not yet active.

.drj.15-09-50: so how am I supposed to draw a state diagram now?

.drj.15-10-08: (anyway, that was just an example)

.gavinm.15-10-30: It is rare to schedule a change at defining, and it happens 
by communication between the definer and the PM.

.drj.15-10-44: I realise that

.drj.15-11-04: papering over cracks (like the above) is something humans are 
very good at

.drj.15-11-27: but if try and get a automated process (such as a computer 
program) to model or use something which these cracks it becomes incredibly 
difficult

.drj.15-11-34: because the abstractions are not clean

.gavinm.15-11-48: Spring Support are resistant to calculating properties of 
request from the properties of the changes, because they want to be sure that 
is affects all groups.

.drj.15-13-43: apropos of nothing at all gavinm, I note that you often inject 
statements into a discussion which I perceive as contributing nothing to the 
discussion

.drj.15-14-31: e.g. I might be discussing why the state field in a request does 
not implement anything that can be thought of as a state

.drj.15-15-19: and you tell me why spring support don't want to make it a 
calculated field based on a requests changes

.drj.15-16-36: gosh.  that went on a bit longer than I thought

.drj.15-16-47: that'll teach me to look at DARWIN when I'm bored

.gavinm.15-22-40: From time to time it is proposed that there be an agent to 
move requests from Active to Closed when all their changes have terminal QA 
status.

.gavinm.15-23-05: This would make the request status semi-automatic, and is 
relevant to the discussion at hand.

.gavinm.15-24-29: Apropos of nothing at all, it's amazing how motivational and 
cheering it can be to have an SP-Man meeting cancelled.

.richardk.15-26-03: ACTION smiles

.drj.15-27-59: no it is not relevant to the discussion at hand

.drj.15-28-09: oh, I can't be bothered.

.gavinm.15-29-48: pop

.drj.15-30-05: so, er, what does the request status mean?

.drj.15-30-09: ACTION grins evilly

.gavinm.15-31-05: If you feel that the request status in under-documented in 
the process documentation, then create an appropriate request in 
product.process, and I'll pick somebody to define it.

.gavinm.15-31-14: ACTION grins even more evilly.

.drj.15-33-06: EOT

.drj.15-33-11: New File

.gavinm.15-36-20: Apropos of nothing, does anyone have any interesting 
questions about assertions and checking?

.drj.15-38-05: it's funny you should mention that...

.drj.15-38-12: apropos of "QA Rejected creates a need for another change." => 
("all necessary changes

.drj.15-38-17: ACTION curses

.drj.15-38-31: ACTION wishes that last thing were struck from the record.

.drj.15-39-49: apropos mail.drj.1998-02-06.14-41(0) and request.epcore.160017 
and request.dylan.170551

.drj.15-40-52: ACTION goes on evacuation

.drj.15-45-42: one way to increase the speed of variety.hi wrt variety.wi is to 
make assertions execute faster

.drj.15-46-37: which we could do by making AssertFail (which is the function 
that is called when an assertion fails) take only one argument (which would be 
a string).

.drj.15-47-00: this basically reduces the length of the instruction sequence 
for making this call

.drj.15-47-06: and there are rather a lot of them.

.gavinm.15-52-58: It would increase the static string space by a lot.

.rit.15-53-25: JOIN

.logbot.15-53-25: This channel is logged to irc.mm.1998-02-27

.logbot.15-53-25.1: Look!  A ladder!  Maybe it leads to heaven, or a sandwich!

.richardk.15-54-27: rit: Adam Gibson was looking for you.  We directed him to 
10-Forward.

.gavinm.15-54-40: ci is 40% larger than hi.

.rit.15-54-41: Ah yes, thanks. He found me.

.rit.15-54-50: Ooh. Ask drj if he's getting the bus

.richardk.15-55-18: ACTION muses: did the Borg spout zippitude every time it 
rebooted?

.richardk.15-55-38: drj says yes

.rit.15-55-44: Ta.

.rit.15-55-53: ACTION goes home.

.richardk.16-12-36: ACTION turns down his HOPE verbosity to 2 because Error 
messages get obscured by rafts of unimportant progress information

.gavinm.16-13-06: ACTION wonders if developers are ever like that.

.richardk.16-13-28: Like what?  Like rqafts?

.gavinm.16-14-01: Obscuring important messages with rafts of unimportant 
information.

.gavinm.16-14-18: Seriously, I do wonder why HOPE thinks I'm interested in all 
that rubbish.

.richardk.16-15-53: eddy says: don't try '0'; '1' just reports succes/failure; 
'2' should show action; '3' is default, shows progress within actions.

.richardk.16-16-13: (I paraphrase freely)

.richardk.16-16-37: Totry 2, "setenv -verb 2"

.richardk.16-16-48: To verify setting, "setenv"

.richardk.16-29-09: ACTION tries -verb 1

.pekka.16-55-19: JOIN

.logbot.16-55-19: This channel is logged to irc.mm.1998-02-27

.logbot.16-55-19.1: I think my career is ruined!

.richardk.16-55-48: Ciao.

.richardk.17-42-34: Spong spong spong.  Hope is slooow.  But ScriptWorks source 
is big.  I think I like -verb 1.

.richardk.17-47-28: ACTION muses: can I fake /me with ACTION?

.richardk.17-47-40: ACTION fakes action.

.richardk.17-47-57: 'parently not

.gavinm.19-01-53: ACTION is actually surrounded by control characters.

.gavinm.19-24-57: PART

.gavinm.19-25-04: JOIN

.logbot.19-25-04: This channel is logged to irc.mm.1998-02-27

.logbot.19-25-04.1: I wonder if I should put myself in ESCROW!!

.gavinm.19-44-02: PART

.richardk.19-46-28: Sleep tight, LogBot.

.richardk.19-46-32: PART


