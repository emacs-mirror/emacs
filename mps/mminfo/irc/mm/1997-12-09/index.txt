                       #MM ON 1997-12-09 TUESDAY
                           irc.mm.1997-12-09
                               draft doc
                           gavinm 1997-12-11

.logbot.14-32-42: JOIN

.logbot.14-32-42.1: This channel is logged to irc.mm.1997-12-09

.logbot.14-32-42.2: Finally, Zippy drives his 1958 RAMBLER METROPOLITAN into the

.logbot.14-32-42.3:  faculty dining room.

.gavinm.14-32-45: Long live LogBot.

.pekka.14-33-18: I note we have some check lists and such for implementations 
that 

.pekka.14-33-26: haven't been updated for a while.

.gavinm.14-33-33: Does anyone have a good script for starting a process and 
watching the pid?

.gavinm.14-33-43: Pekka, yes.

.pekka.14-34-42: ACTION copies some of his immortal prose from the IRC window 
to preserve it for posterity

.gavinm.14-35-04: Mail it to mm

.pekka.14-38-58: Hold on. David might just make it redundant.  And in any case, 
it might be

.pekka.14-39-08: better to put it as a comment in the design.

.drj.14-39-38: ???

.pekka.14-40-00: What we discussed about ArenaWrite.

.drj.14-40-04: Well, there is some general rule about returning references, but 
we don't do it very often

.drj.14-40-13: (apart from allocation)

.drj.14-40-19: (which is special)

.drj.14-41-46: my brain has stopped working.  Pekka, where do you think the 
best place for this AVER is?  (AVER that the traces for which the finalized 
object is white are flipped)

.pekka.14-43-03: ACTION thinks

.drj.14-43-14: I think MRGMessageFinalizationRef

.pekka.14-44-36: The way MRG is written, you'll have to sweat getting the 
segment.  How about ArenaRead?

.drj.14-45-19: I was just thinking that as well.  I think that's fine, it AVERs 
that you only read non-white references because we can't cope yet with reading 
ones that are white.

.drj.14-45-27: (I mean white after reading them)

.pekka.14-45-52: OK, that sounds like a valid argument.

.drj.15-10-26: ok, is now set to approving again

.pekka.15-11-44: ACTION starts approving

.pekka.15-21-23: Can I put a comment in design.mps.finalize about eventually 
using ArenaWrite?

.gavinm.15-21-35: We'd better get this review on the road soon.

.drj.15-21-39: yes, that's a good idea.  

.drj.15-21-45: ACTION thinks "what review?"!

.drj.15-22-21: does that mean you've finish approval (does that mean I can 
create the checkpoitn and branch and co and compile cottonw for release to QA?)

.drj.15-22-35: does that mean I can speaken englisjh

.pekka.15-22-39: ACTION approves.

.pekka.15-24-08: I've approved it with the following comments:

.pekka.15-25-36: The AVER is coarse, enforcing a segment-level condition, but 
it's good enough for this purpose.  If we expand the use of ArenaRead, it might 
have to change.  It still doens't guard against other misuses of ArenaPoke, but 
that's not part of this task.

.drj.15-26-14: yes, I have read them now

.drj.15-26-18: I agree.

.pekka.15-26-59: Sorry about not spotting all the problems the first time 
around.

.drj.15-27-04: I was thinking about adding GFs to the PoolClass interface so 
that one could tell the exact colour and allocated status (say) of arbitrary 
words

.drj.15-27-09: that's fine.

.drj.15-27-24: Sorry about writing the bugs in the first place.

.drj.15-27-31: I was really tired yesterday

.drj.15-27-40: and I had three reworks from 2 changes....

.gavinm.15-28-59: DRJ, your insight into reasons for rewoek is valuable.

.drj.15-29-11: I know

.drj.15-29-25: that's why I mentioned it

.pekka.15-29-32: It was a tricky change and it raised a lot of good questions.  
So can I edit design.mps.finalize?

.drj.15-29-42: er, yes.  again.

.drj.15-29-52: or I can do it.  but you sounds quite enthusiastic

.pekka.15-30-14: Well, I've got the text here, it's almost cut&paste.

.drj.15-30-52: ah, I was going to say it's a shame we don't have any real 
process for channelling observations like "I was really tired and that's why I 
think the rework rate was high" somewhere useful.  But then I think it's better 
to get a solid process first

.ptw.15-37-25: JOIN

.logbot.15-37-25: This channel is logged to irc.mm.1997-12-09

.logbot.15-37-25.1: Wait..  is this a FUN THING or the END of LIFE in Petticoat 
Junction??

.drj.15-37-40: hello

.pekka.15-37-50: hello

.ptw.15-37-54: hi, myt net was wedged, sorry I'm late

.pekka.15-39-40: 's OK, we we're busy, too

.pekka.15-39-44: Im

.pekka.15-39-57: I'm still writing down some notes, but we could start in a 
minute

.ptw.15-40-49: Ok.  I get my sources...

.pekka.15-46-43: OK, done.  You can add something about the hidden root 
problem, David, if you wish.

.ptw.15-48-13: JOIN

.logbot.15-48-13: This channel is logged to irc.mm.1997-12-09

.logbot.15-48-13.1: Now I understand the meaning of ``THE MOD SQUAD''!

.ptw.15-49-30: what happened?  I seem to have signed off and back on again...

.pekka.15-49-52: Well, if you don't know...

.drj.15-55-26: okay pekka

.drj.15-55-53: probably your client had it's connexion severed (your net went 
down?) and it decided to restablish it for you

.gavinm.15-57-56: Ahem.

.gavinm.15-58-05: Sorry for the delay.

.gavinm.15-58-08: Let's start.

.gavinm.15-58-11: ACTION phones

.pekka.15-58-11: ok

.ptw0.15-59-12: JOIN

.logbot.15-59-12: This channel is logged to irc.mm.1997-12-09

.logbot.15-59-12.1: I'm not an Iranian!!  I voted for Dianne Feinstein!!

.gavinm.16-02-47: BTW, Pekka and DRj may wish to glance at my recent mails to 
Nick and Richard respectively.

.ptw0.16-09-53: JOIN

.logbot.16-09-53: This channel is logged to irc.mm.1997-12-09

.logbot.16-09-53.1: Yow!  I want to mail a bronzed artichoke to Nicaragua!

.gavinm.16-36-08: Is everyone ready?

.ptw.16-37-18: JOIN

.logbot.16-37-18: This channel is logged to irc.mm.1997-12-09

.logbot.16-37-18.1: I wish I was on a Cincinnati street corner holding a clean 
dog!

.drj.16-37-18:  don't know

.drj.16-37-31: is logbot slowing down?

.ptw.16-37-35: irc keeps disconnecting on me, don't know why

.pekka.16-37-41: not quite

.drj.16-37-49: I am ready but not finished

.drj.16-38-01: does your phone keep going off ptw?

.gavinm.16-38-11: 5 more minutes of checking?

.pekka.16-38-17: ok

.drj.16-38-22: wouldn't help me finish, but I could use it

.ptw.16-40-31: pleas

.ptw.16-41-05: no my phone is fine, I am continuously pinging trillian, but irc 
keeps deciding trillian is gone

.drj.16-41-36: hmm

.ptw.16-42-53: Ok, I am done

.drj.16-43-01: maybe your client is using some entirely documented but entirely 
unimplmented feature of IRC protocol

.ptw.16-43-48: I will make my usual whinge that we seem to be having "review" 
without "design review".  Did I miss the design review for this document?

.gavinm.16-44-45: Um, no.

.gavinm.16-44-49: Let's start.

.gavinm.16-45-00: Could I have counts and times from everyone, please?

.gavinm.16-45-13: 4m 3q 1C - 30 minutes

.ptw.16-45-56: 41 minutes, M: 7, m: 2, C: 1, q: 5, I: 0

.drj.16-46-06: 5M 1I 1m ~20mins

.gavinm.16-46-20: I think I must be unobservant today.

.pekka.16-46-24: 1 M, 2 m, 3 C - 35 min

.gavinm.16-46-39: Thanks.  

.gavinm.16-46-49: Majors first by person, PTW?

.ptw.16-46-59: req.format.obj.no-header M  Does the last sentence imply there 
are multiple handles to the same object, and potentially to the interior of an 
object?

.ptw.16-47-12: req.prot.obj-string M  This (especially the last sentence) is 
unclear.  What is meant by formatted and unformatted objects?  And, if they are 
roots, how is an unformatted object to be scanned?  Don't we have a 
counter-requirement on clients that objects must have a computable scan?

.ptw.16-47-28: arch.mark-sweep M  I don't believe this.  We have already solved 
dictionaries and iterators in a copying pool for Dylan

.ptw.16-47-38: arch.local M  Unclear what is meant here.  Why does DPS require 
many VM pools?

.ptw.16-47-46: arch.obj-string M  Unclear what is meant here by \"segments with 
empty rank set\".  Why is this simpler than another pool?  The whole point of 
the MPS is to make it easy to have many specialied pools.

.ptw.16-48-02: low.benefit M  Is this true?  Shouldn't you collect if you are 
out of memory?

.ptw.16-48-12: design M  There has been no design review of this document, 
hence review is premature

.ptw.16-48-28: ^K?

.ptw.16-48-35: ./

.gavinm.16-49-19: Thanks.  Pekka majors?

.pekka.16-49-50: .low.benefit M GC is not just on demand (except in the first 
prototype), there could be an automatic one governed by setvmthreshold.

.gavinm.16-50-28: Thanks.  DRJ, majors?

.drj.16-50-45: (but isn't it on demand to us, ie vmthreshold can be implemented 
by client, but we don't require to preserve exact vm threshold semantics anyway)

.drj.16-50-55: .source M given comment in .low.ams, we are missing 
design.mps.poolams

.drj.16-51-11: section SOLUTION IDEAS M it is not clear which solutions are 
options for which requirements and how they combine.

.drj.16-51-20: .sol.tickle.glue M it is not clear why tickles cannot allocate 
hence requiring incremental collection.

.drj.16-51-51: .low.buffer M couldn't find .decide.simple.obj-string

.drj.16-51-55: that's all

.drj.16-51-58: /

.drj.16-52-05: ACTION can't count to 5

.gavinm.16-52-19: Thanks.

.gavinm.16-52-23: I had no majors.

.drj.16-52-23: (due to a climbing accident)

.gavinm.16-52-32: PTW, non-majors?

.ptw.16-52-42: req.tickle q  Are req's in terms the client understands or can 
we formulate them in terms we inderstand?  I.e., can we state this in terms of 
maximum latency and cpu usage?  What percent of CPU does tickle take?

.ptw.16-52-56: req.format.obj q  So, in our terms, postcript objects all have 
handles?

.ptw.16-53-05: req.format.obj.no-header m  I would restate this that ps objects 
consist of a handle and an object.

.ptw.16-53-14: req.single-thread m  This is an anti-requirment -- no 
multiple-threading, but will there be in the future?  I think highly likely

.ptw.16-53-22: req.prot q  No negotiation on this one?  What a pain.

.ptw.16-53-29: sol.save.segments C  Save levels sound like generations to me.  
Whatever structure we use to manage generations in a generational pool should 
be reused here.

.ptw.16-54-00: Hmm.  I think that should be a Major -- significant effort 
(wasted) to fix

.ptw.16-54-05: sol.fix q  Why is sol.struct.pretend not applicable to sol.fix?  
That is, why do we not treat the handle and body of both objects and 
\"strings\" as a single entity for scanning purposes?

.gavinm.16-54-12: Inter-pool abstraction?  Not much call for that round here.

.ptw.16-54-18: Feh.

.ptw.16-54-36: low q  What is the tag \"low\" supposed to mean?

.ptw.16-54-41: ./

.drj.16-54-45: ah, that's where my cynicism got to...

.gavinm.16-55-05: Thanks.  Pekka, non-majors?

.pekka.16-55-58: .protection m clarity Refsets _are_ useless here, but the 
justification given is incomplete: We must also note that we don't expect to 
scan any pointers outside PS VM.

.pekka.16-56-16: ,low.buffer C clarity: What arguments?

.pekka.16-56-30: .low.buffer m correctness: stale tag .decide.simple.obj-string.

.pekka.16-56-59: .arch.mark-sweep C For a high-residency and high-fragmentation 
application mark-compact should have been at least considered.

.pekka.16-57-33: .intro C clarity This is really the design of how to support 
PS VM, not just the MPS side of it.

.pekka.16-57-43: ./

.gavinm.16-57-50: Thanks.  DRJ, non-majors?

.drj.16-58-01: .arch.format I (to design.mps.format) looks like a justification 
for another format variant to me.

.drj.16-58-10: section DOCUMENT HISTORY m should not be in bold

.drj.16-58-14: /

.gavinm.16-58-35: Thanks.  GavinM, non-majors?

.gavinm.16-58-45: .intro,* m "Postscript" should be "PostScript"

.gavinm.16-58-54: .req.gc.disable q What are local and global memory?

.gavinm.16-59-03: .req.prot.mmi m Should be broken up

.gavinm.16-59-10: .req.prot.mmi m mm_ps_save confuses "level" and "slevel"

.drj.16-59-16: (rubbish, it should ScriptWorks' PostScript language compatible 
VM)

.gavinm.16-59-19: .req.prot.mmi q Does the comment about MAXGLOBALSAVELEVEL 
imply that the global save level can exceed that value?

.gavinm.16-59-32: .req.prot.mmi q How should mm_ps_save act if the value of 
slevel/level is not incrementing for the local pool?

.gavinm.16-59-45: .req.port.mmi m Regarding mm_ps_restore, should clarify 
"higher"

.gavinm.16-59-58: That should probably be major.

.gavinm.17-00-06: .req.prot.obj-string C Might we use different pools for these 
two things?

.gavinm.17-00-10: Done.

.ptw.17-00-16: nM .protection Since PS is an interpreter, it would seem an 
ideal candidate for a software barrier implementation, permitting copying and 
refsets.  Justify not using this approach.

.gavinm.17-00-16: Any new issues?

.drj.17-00-26: btw, I forgot to mention that I didn't finish reviewing the 
whole document

.gavinm.17-00-37: Estimate fraction.

.ptw.17-00-51: nq is the value of a savelevel exposed to the PS user?  Or is it 
opaque

.drj.17-00-55: I was working backwards and got to the beginning of SOLUTIONS 
IDEAS

.drj.17-01-08: .4

.gavinm.17-01-14: Any more new issues?

.gavinm.17-01-30: OK.

.gavinm.17-01-39: It's now 17:00 GMT.

.gavinm.17-01-48: We have a choice:

.ptw.17-01-52: nI Thw show all changes &c. should be separated from the rest of 
the document by more whitespace or a line.  I lost .protection in it

.ptw.17-02-10: ./

.gavinm.17-02-11: 1) Have a process brainstorm as usual, estimated completion 
17:45 GMT;

.gavinm.17-02-23: 2) Defer the PB to another day;

.gavinm.17-02-32: 3) Cancel the PB on this occassion.

.gavinm.17-02-36: Comments?

.drj.17-02-47: 1)

.pekka.17-02-59: Cancel: I don't know much about the history of this design.

.ptw.17-03-08: I think the entire PB can be summarized:  Why no design review 
prior to review?

.ptw.17-03-16: Still

.gavinm.17-03-22: PTW, what document did you want reviewed?

.drj.17-03-31: he didn't.  he wanted design review

.ptw.17-03-43: I want a _design_ review, before _review_

.gavinm.17-03-50: D'oh.

.drj.17-03-54: ie discussion through mail

.ptw.17-04-02: This is a major flaw in our process

.gavinm.17-04-03: ACTION slaps forehead.

.gavinm.17-04-10: Agreed.

.ptw.17-04-14: mail or on IRC as Pekka initiated for the multiple alloc

.ptw.17-04-28: I see we have started the process brainstorm

.gavinm.17-04-29: OK.  We already plan to have more of that.

.pekka.17-04-35: I thought there'd beed one before I ever joined the group.

.pekka.17-04-46: Even though the document itself is fairly new

.gavinm.17-04-50: I hope to see Tony mediating some of that.

.ptw.17-04-53: I think that they happen "by accident" so far

.gavinm.17-05-04: I should make it an entry criterion for design documents.

.ptw.17-05-20: I think there is a process improvement:  design documents may 
not enter review unless a design review has been passed.

.pekka.17-05-44: Stuff like that should really do before ay implementation work 
is scheduled, not

.gavinm.17-05-49: Suggest: entry.design.review: Some less formal peer review 
(such as e-mail RFC, or IRC discussion) has already been applied to the 
document, and acted upon.

.ptw.17-05-53: ACTION thinks great minds lie in the same gutter

.pekka.17-05-53: after the implementation has been completed...

.ptw.17-06-19: pekka: right

.gavinm.17-06-36: I don't want to force waterfall design.

.drj.17-06-41: in particular I was slightly appalled to hear that the document 
was being reviewed despite the fact that pekka didn't think it was perfect.

.ptw.17-07-07: There should be an "approver" for design review.  (I've said 
this before, but RFC's sometimes fall on deaf ears if there is noone tasked to 
respond).

.pekka.17-07-12: Because we promised to deliver it in March

.pekka.17-07-19: last March...

.drj.17-07-26: I know...

.ptw.17-07-31: Yow!

.gavinm.17-07-45: PTW: approver, possibly.

.gavinm.17-08-12: I agree with the concept, but ...

.ptw.17-08-22: I don't care what you call it, but someone has to be assigned it 
as a task

.gavinm.17-08-38: Yes.

.pekka.17-08-42: I think the person issuing an RFC should just be persistent.

.drj.17-08-48: yes, otherwise design mailed to 'mm' falls on deaf ears

.gavinm.17-09-11: Suggest: proc.rfc lay down a procedure for appointing someone 
who must respond to the RFC.

.pekka.17-09-16: no

.ptw.17-09-20: I think anyone can volunteer, but the process manager must 
assign if noone does.

.gavinm.17-09-55: I don't think it's _process_ management.

.pekka.17-10-02: Why not whoever issues it?

.ptw.17-10-21: Because it is a flaw in our process that we need to correct

.pekka.17-10-34: ?

.gavinm.17-10-42: Pekka, what did you say "no" to?

.gavinm.17-11-10: TOPIC: Review: Process Brainstorm

.pekka.17-11-31: I don't think we need more procedure there, just what we 
discussed first: that there be an RFC that has been acted upon.

.ptw.17-11-40: IMHO the whole MPM suffers because everytime we get a 
requirement someone goes off and designs a new pool from scratch rather than 
working with the resources of the group to generalize the existing pools (and 
hence strenghthen them).

.gavinm.17-11-52: PTW, I strongly agree.

.drj.17-11-59: I weakly agree

.gavinm.17-12-10: We need more chance for comment, further upstream.

.drj.17-12-24: it's easier to steal the ideas from another pool into a new pool 
and then later consolidate them

.gavinm.17-12-34: Pekka, if everyone who issues an RFC, finds themselves a 
responder, then that's a process.

.ptw.17-12-38: They get away with this partly because there is no design 
review.  It hasn't happenned voluntarily (up til now) so I think a process is 
required.

.drj.17-12-49: than it is to try and adapt an existing design to two 
requirements immediately.  it's like twice as much work up front.

.ptw.17-13-07: But significantly less work in the end.

.gavinm.17-13-19: I think we need smaller components than pools that we can 
assemble.

.drj.17-13-24: maybe

.ptw.17-13-26: Look at EPDL, there is no reason it could not ber MV

.pekka.17-13-32: It hasn't happened voluntarily, because we haven't required 
effective RFCs.

.pekka.17-14-19: And because we haven't reviewed most things anyway.

.drj.17-14-26: pekka and I were discussing MV / EPDL earlier today

.ptw.17-14-33: EPDL was split off on the excuse that MV didn't work well, but 
now EPDL has a flaw that MV does not.  Now we have two pools to maintain where 
one would/should do

.drj.17-14-52: we concluded that probably we should merge and resplit MV EPDL 
into BootStrap and NewMV

.ptw.17-15-06: I agree 1000%

.pekka.17-15-13: "control" and NewMV

.gavinm.17-15-43: Presumably bootstrap/control would subsume MFS.

.ptw.17-15-50: (we're drifing, but) my opinion exactly as I tried to approach 
my epdl tasks.

.gavinm.17-16-15: We should be able to wrap one pool in another, perhaps.

.drj.17-16-35: perhaps, yes, but there a lot of brittleness in the MPS wrt 
trying to do that

.ptw.17-16-36: So, how do we schedule time to go back and rethink a 
request-driven implementation?

.pekka.17-17-10: I think we usually have the ideas, while scrambling to fulfill 
the requests

.ptw.17-17-14: We just need more substrate, like BT.  Similarly, groups of 
segments should be a shared substrate.

.pekka.17-17-20: (we should turn down more of them)

.ptw.17-17-52: pekka:  I agree, we need to push back to make sure we are not so 
request-driven that our core technology is hurt

.pekka.17-18-07: What we need is time to implement some of the ideas (and a 
decision process to decide which ones to implement).

.gavinm.17-18-31: If we want to do architectural improvements, we can either do 
them as "customer invisible" changes, or do them as part of satisfying customer 
requests.

.drj.17-18-51: but we'll never find a specific customer request that they 
satisfy

.pekka.17-19-16: I didn't like the proposals to get rid of the mps product in 
Darwin, for this reason among others

.gavinm.17-19-28: DRJ, I meant originally.  E.g., EPVM could have been 
satisfied by fixing MV.

.drj.17-19-37: it's the satisfaction of a meta requirement, namely that "we be 
able to satisfy unknown future requirement which such-and-such a responsiveness

.drj.17-19-54: EPDL

.drj.17-20-13: but I don't see how your statement follow gavin

.pekka.17-20-20: Resurrect a closed request to do a more general solution?

.gavinm.17-20-25: But we can't have a request in every release that says "MPS 
architecture is insufficiently responsive", can we?

.gavinm.17-20-55: Pekka, that's an idea (that DARWIN doesn't support well, of 
course).

.pekka.17-21-10: Just copy the text and xref.

.drj.17-21-14: in any case, wrt MV and EPDL we almost are in a position where 
we can throwaway MV, make EPDL the NewMV and either create a new BootStrap pool 
or massively simplify MV to get a BootStrap pool

.ptw.17-21-17: I think we just have to make sure that we don't take requests 
too narrowly.  There is satisfying the request and maintaining our integrity.

.gavinm.17-21-29: DRJ, I was returning to the idea of doing the Right Thing 
first time round, instead of proliferating pools.

.ptw.17-21-57: Design review, I think, will go a long way to "doing the right 
thing" in response to a specific request.

.gavinm.17-22-00: That is what we are supposed to do on the trunk.

.gavinm.17-22-24: We have far too much release-branch patching, and subsequent 
patch-porting to the trunk.

.ptw.17-22-35: drj: 'cept EPDL needs something better than one massive free list

.drj.17-22-39: one reason why we seem to be creating pools left right and 
centre is that I think we are genuinely understocked in poolclasses

.pekka.17-23-03: agreed

.gavinm.17-23-16: Ah.  I remember creating a list or required poolclasses at 
one point, but I've never been able to find it.

.ptw.17-23-27: Not so sure.  I think we have a pretty good set of pools, but 
they need tuning and generalizing.

.drj.17-23-33: gavinm, big patches on branches are because (I claim) that we 
can't so releases from the trunk often enough, because the trunk is not stable 
enough

.gavinm.17-23-51: Again, this is wrong.

.drj.17-23-59: typically the tip of the latest release branch is much more 
stable than the trunk.  

.drj.17-24-13: and so is a more attractive place to do new development.

.gavinm.17-24-48: We've had a lot of fire-fighting recently, and it's done a 
lot of damage.

.drj.17-24-54: weeell, we don't have a write-barrier pool yet.  We're only just 
on the verge (with EPDL) of getting a decent manual pool

.ptw.17-25-21: Time to rebuild, replant

.gavinm.17-25-22: I suggest we have a design discussion of required pool 
classes.

.ptw.17-25-28: !

.drj.17-25-28: having AWL, LO, PSVM, _and_ AMS seems like overkill

.drj.17-25-38: we are rambling again

.gavinm.17-25-42: AMS was never very serious.

.ptw.17-25-45: Yes

.drj.17-25-57: (but AMS has all the good design decisions in!)

.gavinm.17-26-23: I'd like to draw this discussion to a close soon.  Does 
anyone have any other points or suggestions they want to make?

.drj.17-26-31: not relevent to this no

.ptw.17-26-35: AMS should be the basis for all those others, with the right 
format

.ptw.17-26-43: ./

.pekka.17-27-38: Again we note that pools should share more code.

.nematode.17-28-01: JOIN

.logbot.17-28-01: This channel is logged to irc.mm.1997-12-09

.logbot.17-28-01.1: Make me look like LINDA RONSTADT again!!

.nematode.17-28-11: ACTION is drj

.nematode.17-28-20: anyway

.nematode.17-28-42: I was about to say that I think AMC would do fine as a Java 
pool.  So we succeed sometimes

.pekka.17-28-46: Gavin, is it OK if I come over tomorrow.  I want access to a 
Mac, i.a.

.gavinm.17-28-52: I'd like a design discussion on how pools can share more code.

.nematode.17-29-08: ACTION drj thinks NickB's might be a bit ill since 
installing Rhapsody

.gavinm.17-29-12: Pekka, yes.  I may be meeting NickB and JonT.

.nematode.17-29-28: ACTION certainly enduring the rhapsody always puts me off 
my lunch.

.nematode.17-29-35: nickb's mac that is.

.pekka.17-29-40: Will you be away the whole day?

.gavinm.17-29-47: Richard's mac should be fine.

.gavinm.17-29-57: Pekka, it's uncertain.

.pekka.17-30-21: Then I won't come today.  I think we'd better delay pilchard 
anyway.

.gavinm.17-30-33: I need to give priority to getting stuff out of Richard's and 
Nick's heads.

.pekka.17-30-37: s/today/tomorrow/

.nematode.17-30-54: but if pekka wants access to MPW as I suspect is the case 
then richard's mac is useless

.pekka.17-31-13: Yes, I guess so.

.pekka.17-31-21: Cna you fix Nick's Mac?

.pekka.17-31-30: Ask the sysadmins to ...

.gavinm.17-33-20: We're working on it.

.pekka.17-33-52: Thanks.

.nematode.17-34-22: I have booted it into MacOS

.nematode.17-34-35: so I guess it's okay apart from Rhapsody not working.

.pekka.17-35-55: Good.

.nematode.17-36-11: TOPIC: MM discussion

.gavinm.17-36-18: I think the PB is over.

.ptw.17-37-02: So, my two EPDL tasks would seem pointless if drj/Pekka "Grand 
scheme" is pursued

.pekka.17-37-15: no, not at all.

.ptw.17-37-29: How so?

.pekka.17-37-44: But you could make a case of turning most EPDL work into this 
merge/split effort instead.

.pekka.17-38-25: EPDL is delivered code, it should be reviewed.  Review is no 
good without edit.

.pekka.17-38-50: But the editor can decide that some fix is not practical, of 
course.

.ptw.17-38-59: I'm confused as to my EPDL tasks then.  I thought they were to 
add comments and references to the code.

.pekka.17-39-22: Well, if that's going to be the new MV, it's time well-spent.

.nematode.17-39-32: sounds like that'll be useful if it's going to be the new MV

.ptw.17-40-00: ACTION re-reads tasks

.pekka.17-40-09: But you'll have a better idea of which parts of the code have 
permanent value, and which parts will be footnotes in the history of MPS.

.ptw.17-40-20: Actually, one request is that the design is inadequate

.ptw.17-40-46: (It is in fact, empty, except for Nick's notes)

.pekka.17-40-53: Anyway, somebody's got to do that split/merge...

.ptw.17-41-13: If I get to write the design, wouldn't it be awful if EDPL no 
longer met the design!?!?

.pekka.17-41-24: The design template is so awkward that many designs don't 
respect it at all.

.nematode.17-42-10: er yes

.pekka.17-42-16: That happens, designs and implementations evolve.  We do 
releases to get consistent snapshots.

.pekka.17-42-20: In theory.

.nematode.17-42-26: I recommend not using the Notes form "design" to write 
design

.nematode.17-42-32: I recommend "doc"

.ptw.17-42-35: I guess I am surprised at both the EPDL and MV designs, given 
what we know from, say allocsurv.ps, etc.

.nematode.17-43-11: I agree

.ptw.17-43-37: How much rope do I get?

.nematode.17-43-55: er...

.nematode.17-44-27: I would suggest only enough so that the essence of the 
design EPDL isn't changed.

.nematode.17-44-43: leave that till after the merge and split

.pekka.17-45-04: Sound prudent.

.pekka.17-45-55: Am I the MM/EP-core product manager now?

.ptw.17-46-09: I'm confused.  Why would we merge/split designs we don't believe 
in?  Would it not be better to design the newMV and control pools from what we 
have learned?

.pekka.17-46-29: Because they're delivered code.

.ptw.17-46-50: So, you are telling me I should document the implementation of 
EPDL and call it design

.pekka.17-47-13: I rather hoped the "Notes" would be 90% of a design.

.pekka.17-48-10: I'm certainly not keen to give DP&P another new pool, given 
their finicky performance reqs.

.pekka.17-48-36: At least we should have the fallback of supplying (something 
very like) EPDL.

.nematode.17-49-11: that sounds too cynical ptw.  EPDL has a design independent 
of its implementation.  It may not be written down and it may not be 
particularly brilliant...

.ptw.17-51-18: I would suggest that EPDL be kept on life support until we can 
prove we have a better pool.

.nematode.17-51-23: yes

.nematode.17-51-31: I was just composing the very same comment.

.ptw.17-51-57: The question is, how much effort be spent documenting it, vs. 
working on the design of its successor.

.pekka.17-52-10: That's only acceptable if there are resources allocated to 
write this hypothetical better pool.

.nematode.17-52-18: would it be easy to write a document that describes the 
design of the current EPDL and also how it might be improved to make its 
successor

.ptw.17-52-24: And how do we get such resources

.nematode.17-52-32: well, I thihnk there should be resources assigned to 
writing this hypothetical bette pool

.pekka.17-52-44: Even so, DP&P just delivered it to their customers, and we are 
going to get support calls on it.

.pekka.17-52-56: It's got to be maintainable, and somebody should understand it.

.nematode.17-53-09: Paging Product Manager.  Product Manager required on #mm

.nematode.17-53-16: Product Manager must bring budget along

.ptw.17-53-26: Or let the support calls accumulate until they can justify 
building the new pool

.ptw.17-53-44: <PM, white courtesy telephone please>

.pekka.17-53-50: DP&P work with OEMs, letting support calls accumulate is not 
an option.\

.ptw.17-54-01: Yes it is.

.pekka.17-54-25: Are you volunteering as PM for EP-core?

.ptw.17-54-32: How does the OEM see it as any different than a bug "you can't 
find"

.ptw.17-54-38: No, just being realistic.

.pekka.17-55-01: "It ran 10 % faster in SW 4.1."

.ptw.17-55-19: We have an outstanding support call, don't we?

.gavinm.17-55-31: ACTION puts his Product Manager hat on.

.pekka.17-55-41: One client call, DP&P support proised an fix in 4.5r1.

.gavinm.17-55-48: ACTION finds his hat is too big for him.

.pekka.17-55-49: promised

.nematode.17-56-23: ha!

.gavinm.17-56-26: PTW, You have 2 DARWIN requests, plus you are the editor of a 
reviewed document.

.ptw.17-56-29: Someone has to trade off penny fixes against pound fixes

.pekka.17-56-38: yes

.ptw.17-56-45: "editor of a reviewd document"?

.ptw.17-57-13: how did I win that prize?

.drj.17-58-02: you;re doing the edits on EPDL aren't you?

.gavinm.17-58-09: I asked you to do it when you were jet-lagged.

.ptw.17-58-30: ACTION thinks GavinM is cleverer than I thought...

.ptw.17-59-07: ACTION thinks: "GavinM is cleverer than I thought..."

.ptw.17-59-44: Ok, well, I guess I'll go edit it then!

.gavinm.18-00-06: I thought you seemed to have too much spare time.

.gavinm.18-00-38: 8-)

.gavinm.18-00-52: I'm going soon.

.ptw.18-01-33: But the start of this conversation was me asking how to use that 
spare time:  editing a document we all seemed to agree was moribund, or working 
on a design for a new (replacement) document

.pekka.18-01-48: edit it.

.ptw.18-02-06: lightly

.pekka.18-02-33: We'll need it for the next two years, unless a PM can get DP&P 
to brush off all customer calls related to it.

.ptw.18-02-55: That is, the request only ask for me to a) design the thing that 
has already been implemented, and b) reference the design from the 
implementation.

.ptw.18-03-21: 2 years?

.gavinm.18-03-41: Review edits are not represented at all in Darwin.

.pekka.18-03-42: How long do you think until all SW OEM stop using SW 4.5?

.ptw.18-03-45: Are you suggesting customers are never told they need a newer 
version?

.pekka.18-03-56: I think 2 years is an underestimate.

.ptw.18-04-15: Huh?  Both my requests say they are in response to review

.pekka.18-04-25: They are told.  They don't always want to.

.gavinm.18-04-43: One of the possible actions an editor can take it to escalate 
an issue into a request.

.gavinm.18-04-57: Obviously this has happenned.

.ptw.18-05-06: I'm so confused.  I though I was the editor

.gavinm.18-05-27: You are.  Nick was.

.ptw.18-05-36: ACTION tries to hold his hand on the script, but the whole 
world is spinning

.gavinm.18-05-41: He got partway through, stalled, and left.

.ptw.18-06-15: "Nicky, Nicky, Nicky!  Are you alright?"  (Sound of face being 
slapped)

.ptw.18-06-30: "Well, yes I think so" (More face slapping)

.ptw.18-06-39: "Then, why don't you stop slapping me?"

.pekka.18-06-45: The're are no notes in the review record about edits, but that 
doesn't mean he didn't do _something_.

.gavinm.18-07-29: There aren't?  Sigh.  I suggest you ask him.

.gavinm.18-07-50: Bye.

.ptw.18-08-10: Since the existing code is in a released product, I have great 
trepidation about editing it in any way that was not directly driven by a 
_customer_ request

.pekka.18-08-14: Says he and slips off...

.ptw.18-08-20: Wimp

.drj.18-08-47: ACTION is oing

.drj.18-08-58: ACTION is going.  phew that was close

.ptw.18-08-59: ACTION stomach rumbles

.ptw.18-09-10: Must be lunch time

.pekka.18-09-22: It might make more sense to do some of the edits in the 
trunk.  You can decide.

.pekka.18-10-18: However, I was planning to release pilchard on Friday, so they 
wouldn't have any immediate benefit.

.pekka.18-10-37: I'm reconsidering that, though, in the light of this review.

.ptw.18-10-44: Pilchard having already been split from the turnk?

.pekka.18-11-15: No, that I was planning to do just as I was stating the 
release process.

.ptw.18-11-41: ?

.pekka.18-12-43: proc.release.epcore.hope.branch.mm

.pekka.18-13-02: happens as a part of the (initial) release process.

.ptw.18-13-20: I guess I am confused about how that works

.ptw.18-13-33: You make a new branch for a release

.pekka.18-13-43: But how many edits are you planning to get done by Friday?  
Out of 140?

.ptw.18-14-00: But I am allowed to insert any old thing in the trunk, which may 
actually break your release?

.ptw.18-14-16: (I didn't even know about the 140 edits!)

.ptw.18-14-32: (I'm just talking about a mis-typed comment)

.pekka.18-15-04: No, not any old thing.  An edit is presumably well-considered.

.pekka.18-15-21: Anyway, another part of the release process is a freeze and 
testing.

.pekka.18-15-33: That would work, if we had enough tests...

.ptw.18-15-37: And, perhaps serendipitously, reviewed by you

.ptw.18-15-49: Okay.

.ptw.18-16-07: Well, I think I have a better handle on what I am supposed to be 
doing.

.pekka.18-16-14: I was planning to spend a lot of this week writing tests for 
PS VM.

.ptw.18-16-39: And I plan to jot down notes on the side for the "Grand 
reorganization, aka, split/merge"

.ptw.18-16-53: Which I think we should pursue in our copious free time

.pekka.18-17-00: Any way pilchard is a development release, i.e., we expect to 
do another before DP&P

.pekka.18-17-10: release anything out of that branch.

.ptw.18-17-21: Luckily, EP seem to have a whole boatload of tests of their own

.ptw.18-17-26: What is DP&P?

.pekka.18-17-46: EP => DP&P = Digital Printing and Publishing

.ptw.18-18-06: Missed that

.ptw.18-18-33: I am going to go get some lunch, unless there is something more 
important?

.pekka.18-18-38: It's mostly a marketing move.

.pekka.18-19-05: Yes, Ithink I need a hot chocolate as well.  This was 
exhausting.

.pekka.18-19-28: ACTION goes to the kitchen

.ptw.18-20-05: ACTION goes to another kitchen

.pekka.18-23-15: ACTION returns from the kitchen, having purchased a sandwich 
instead.


