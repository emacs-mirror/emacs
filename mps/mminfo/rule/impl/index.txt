                        RULES FOR IMPLEMENTATION
                               rule.impl
                             accepted rule
                           richard 1995-08-08

Scope: These rules apply to all implementations (source code) in any programming 
language.

.readership: Any developer.


.req: The implementation must meet all relevant requirements.  [The design must 
make it clear how.]

.quality: Rules may be broken or bent if necessary to meet requirements.  All 
transgressions must be clearly justified using tagged comments.  [ Suggest 
.trans.  gavinm 1998-10-14 ]

.justify: The purpose (justification in terms of requirements) of every code 
statement must be clear.  This ensures that the code does the right thing, and 
makes it possible to change the code without breaking it.

.simple: The implementation must be as simple as possible to meet 
requirements.  Simplicity increases reliability while reducing cost.

.adapt: A limited implementation must not be used where there is a more 
adaptable alternative which meets requirements.  Adaptable implementations 
should be used so that the code can meet changing requirements at low cost.

.min: The code should have the minimum functionality necessary to meet 
requirements.  For example, function domains should be restricted to what's 
required.  Note that you should choose a simple and general implementation if 
available (consistent with .simple and .adapt), but block the extra 
functionality (e.g. using assertions) so that the requirement for it is 
discovered.  This reduces cost by avoiding unnecessary extra functionality 
which must be tested, reviewed, and maintained.

.trick: Implementation "tricks" must not be used where there is a more 
straightforward alternative which meets requirements.  For example, special 
features of the language may only be used if it is justifiable.  [In other 
words, don't write in C what you couldn't write in Pascal, if you can help it.]

.platform: An architecture, OS, or builder specific feature must not be used 
where there is a portable alternative which meets requirements.  [Note: 
"builder specific" includes all transgressions of language standards.]

.constrain: The functionality and attributes of the code must only be 
constrained in a way which is easy to change.  [This usually means "don't use 
hard-coded literal numbers".]

.limits: All limitations must be exposed to clients of the implementation. [For 
example, as symbolic constants or via function calls.]

.guide: Implementation "style" should follow the style guide for the language 
of implementation -- probably guide.impl.*.

.dep: All dependencies where a change would require a change in another module 
or elsewhere in the same module must be clearly marked and cross-referenced by 
a tagged comment at both locations.

.mod: Implementations must not make assumptions about other implementations 
unless the assumptions form part of the interface between them.

.design: The implementation must not be the sole documentation of decisions 
which affect requirements.  Such decisions must be recorded in tagged design 
documentation which is referenced by the implementation.


