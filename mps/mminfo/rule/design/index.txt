                           RULES FOR DESIGNS
                              rule.design
                            incomplete rule
                           gavinm 1997-02-12

Scope: These rules apply to all designs for implementations.


.req: The design must demonstrate that a correct implementation will meet all 
relevant requirements.

.source: All source documents should be referenced, including: Bibliography 
entries; requirements; analyses; mail threads.

.def: All special terminology used must be defined, or the relevant definitions 
referenced.

.error: The design must document error semantics for all functions, and 
behaviour in abnormal conditions.  It must also document any special 
checking/assertion behaviour.

.test: The design must define or reference a relevant test specification which 
must assure that an implementation would meet requirements.

.quality: Rules may be broken or bent if necessary to meet requirements.  All 
transgressions must be clearly justified using tagged comments.

.justify: The purpose (justification in terms of requirements) of every aspect 
of the design must be clear.

.simple: The design must be as simple as possible to meet requirements.  
Simplicity increases reliability while reducing cost.

.adapt: A limited design may not be used where there is a more adaptable 
alternative which meets requirements.  Adaptable designs should be used so that 
the design can meet changing requirements at low cost.

.platform: The design may not be architecture-, OS-, or builder-specific where 
there is a portable alternative which meets requirements.

.limits: All limitations must be exposed to clients of the implementation. [For 
example, as symbolic constants or via function calls.]

.guide: Documentation "style" should follow appropriate guides (e.g. 
guide.text, guide.tag).

.mod: Module designs may not make assumptions about other modules unless the 
assumptions form part of the interface between them.

.issue: The design must document or reference all (relevant) outstanding 
issues, including performance or attribute issues.

.prot: The design must document how the implementation would be used, and any 
special protocol restrictions.

.data: The design must define the initial states and state changes of all data 
structures.

