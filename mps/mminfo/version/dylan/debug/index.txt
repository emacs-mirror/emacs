                   DYLAN "DEBUGGING" PRODUCT VERSION
                          version.dylan.debug
                             incomplete doc
                           richard 1995-08-11

Purpose?
Date released?
Release to whom?
Checkpoint identifier?
Manifest?
Versions of files?
Branches?


REQUIREMENT SATISFACTION

req.dylan.fun.soft.manage.object.alloc
req.dylan.fun.soft.manage.static.alloc
req.dylan.fun.soft.env.c
req.dylan.fun.soft.env.component.gc
req.dylan.fun.soft.env.component.trap
req.dylan.fun.soft.env.arch.i386
req.dylan.fun.soft.env.os.win32
req.dylan.fun.support.use
req.dylan.fun.support.debugging
req.dylan.fun.support.available
req.dylan.fun.soft.manage.object.recycle
req.dylan.fun.soft.manage.static.free
req.dylan.fun.soft.validation.call
req.dylan.fun.soft.validation.object
req.dylan.fun.soft.control.custom.scan
req.dylan.attr.space.struct?
req.dylan.fun.soft.control.dial

+ debugging overhead reduction
+ two-phase allocation interface

---

---

DEBUGGING RELEASE

Description

This release is intended to solve some problems experienced by the Dylan
team in using the Minimal Collector release.  The purpose of the release is
to remove barriers which might prevent progress in the Dylan Project
without meeting final requirements on collector performance.  The main
features are:

- a library version with lower consistency checking overheads
- new two-phase allocation interface
- object validity checking on allocation
- reduced garbage collection overheads

Justification

Dylan workers report that the overhead of consistency checking is
prohibitive.  They don't use the debugging library all of the time, only
when a problem manifests itself.  This means that they are not benefiting
from early detection of interface violations, and we are not benefiting
from early detection of internal consistency errors.  It is therefore
important to our quality goals that this is corrected.

The two-phase allocation interface is nearly complete, and ought to be
finished off and integrated.  Since it will alter the interface, it is best
to get this out of the way as soon as possible.  It is also important to
thread safety and incrementality.  Getting it in place early will reduce
risk.

The Dylan workers report that most of their problems come from invalid
objects.  If we can catch these earlier we will be doing everyone a favour.
Two-phase allocation will make it easy to add a check of object format
validity on allocation.

It is not clear whether the Dylan workers are currently suffering because
the collector is generally too slow.  There are some easy things we could
do to improve the collection algorithm if they are having trouble, or if
they predict that it will become too slow in the next month or two.

Tasks

1       Checking
1.1     Investigate consistency checking requirements
1.2     Suggest ideas to solve the overhead problem
1.3     Design better controls over consistency checking annotations
1.4     Implement new checking system
1.5     Test new checking system
1.6     Modify memory manager to use new system
1.7     Test memory manager with new system, including failure testing
        (We could also think about how we do failure testing in general.)

2       Allocation interface
2.1     Detailed design of general allocation interface
2.2     Re-assess current allocation buffer code
2.3     Implement changes to general allocation interface
2.4     Make minimal use of buffers with AMC in order to support interface
2.5     Test allocation interface

3       Object validity checking on allocation
3.1     Wait for allocation interface to change
3.2     Add pool-specific validation to general buffer system
3.3     Link Commit method to validity checks already present in AMC
3.4     Test validity checking, including failure testing

4       Reduce garbage collection overheads
4.1     Investigate whether this is required, and how much
4.2     Hack the decision making code in the AMC pool to make it more
        intelligent than an earthworm
---
Release notes from obj.debug-relnotes(1)

These are the release notes for the DylanWorks Memory Manager.  This document 
contains information you really ought to know before you start using it.

This release of the DylanWorks Memory Manager is the "Debug Release".  It 
contains a simple garbage collector for DylanWorks objects.

The allocation API for this release has changes significantly since the last 
release (the "Zoned Collector").  Allocation of Dylan objects and wrappers is 
now done in two phases.  The header "mm.h" contains the details of the use of 
the interface.  The reason for this change is to allow future releases of the 
Memory Manager to provide a  fast in-line allocation method which doesn't 
require thread synchronization for most allocations.  This interface also 
provides limited checking of the validity of Dylan objects immediately after 
allocation.

The interface hides the details of memory pool creation, and instead provides 
three allocation primitives: one for objects, one for wrappers, and one for 
miscellaneous data.  Eventually the detailed interface will be exposed again, 
but for now we want something simple that we can debug together.  We have not 
had time to write such extensive documentation this time.  The API is 
documented reasonably well by the header "mm.h".

The library comes in four varieties, all called "mmdw.lib".  The libraries in 
"libc" directories are compiled for linking with the static Microsoft C 
library, LIBC.LIB.  The libraries in "msvcrt" directories are compiled for use 
with the dynamic C library, MSVCRT.DLL.  In addition, libraries in ".deb" 
(debug) directories are compiled with consistency checking and debugging 
information, and libraries in ".rel" (release) directories are compiled without 
either, for speed.  (See manifest.txt for details.)

This release increases the speed of the "debug" varieties of the Memory 
Management library.  This library should now only be around four times slower 
than the optimised "release" varieties.  We hope that you will be able to use 
the debugging variety all the time during development, as this will help both 
you and us to find problems early.

                                  richard 1995-08-22

