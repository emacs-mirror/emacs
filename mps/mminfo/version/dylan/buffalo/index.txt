                    DYLAN "BUFFALO" PRODUCT VERSION
                         version.dylan.buffalo
                               draft doc
                           richard 1997-01-08

PURPOSE OF RELEASE

The primary purpose of this version is to improve the availability of the Dylan 
Memory Manager (req.dylan(5).plan.avail.*).  Dylan have a quite old version 
(release.dylan.incr) which has gone through quite a few stages of patching, and 
is quite far from the current state of the trunk development.  This version is 
becoming increasingly difficult to maintain, which reduces the availability of 
the MM.  This release will bring them back up to date.

There are few advantages for Dylan in this release.  The only new functional 
requirement it meets is req.dylan(5).fun.weak.index.

We also intend to supply variety.ds to Dylan, to encourage them to use 
development varieties on a permanent basis, rather than running with variety.ro 
until they find a problem.


RELEASE NOTES

mail.drj.1997-03-10.16-20:

From: David Jones <drj>
Date: 10 Mar 1997 16:20:08 +0000
To: mm-dylan, tony
Subject: New MM interface for new release of MM (Thursday).

mps.h is the approved interface between the MPS and its clients.  In
particular it is the interface between DylanWorks and the MM.

mps.h has changed between the Incremental release (which is what
DylanWorks currently uses) and the Buffalo release (which will be
available this Thursday, 1997-03-13).

Some of these changes will require changes in the Dylan runtime.  I'll
summarize what I think the changes in the Dylan runtime will be and then
the details of the changes in the interface itself.

Tony, are any of these changes likely to be a problem?  If so, I can
make the release with an amended interface (ie more like the existing
interface that you are using).


Summary

Calls to mps_ap_create require an extra argument (we expect that this
function is called about once per thread created).  This extra argument
is the last one; most of the time the extra argument will be the symbol
MPS_RANK_EXACT.  This extra argument is needed when creating weak
objects.

Calls to mps_root_create_reg require an extra argument (again, we expect
that this function is called about once per thread created).  This extra
argument is the last one, and should be 0 (zero).  This extra argument
brings this function into line with conventions used elsewhere in the
interface.


Tedious Details

mps_ap_create (and mps_ap_create_v) takes an extra required parameter.
Its prototype has changed from

extern mps_res_t mps_ap_create(mps_ap_t *mps_ap_o,
                               mps_pool_t mps_pool,
                               ...);

to

extern mps_res_t mps_ap_create(mps_ap_t *mps_ap_o, mps_pool_t mps_pool,
                               mps_rank_t mps_rank, ...);

The mps_rank parameter can be one of {MPS_RANK_AMBIG, MPS_RANK_EXACT,
MPS_RANK_FINAL, MPS_RANK_WEAK}.  Only MPS_RANK_EXACT and MPS_RANK_WEAK
are supported usefully.  Normal objects should be allocated from an ap
that was created with MPS_RANK_EXACT.  Weak objects (that is, objects
all of whose references are weak) should be allocated from an ap that
was created with MPS_RANK_WEAK.  Note that this form of weakness is not
intended to support Dylan Weak Tables directly.

mps_root_create_reg takes an extra required parameter, its prototype is
now:

extern mps_res_t mps_root_create_reg(mps_root_t *mps_root_o,
                                     mps_space_t mps_space,
                                     mps_rank_t mps_rank,
                                     mps_rm_t mps_rm,
                                     mps_thr_t mps_thr,
                                     mps_reg_scan_t mps_reg_scan,
                                     void *reg_scan_p,
                                     size_t mps_size);

The last parameter (mps_size) is new.  When using mps_stack_scan_ambig
in conjunction with this function (ie, the parameter mps_reg_scan is
mps_stack_scan_ambig) then the mps_size parameter should be 0.  The
reg_scan_p parameter should be the address of the base (oldest location,
highest address on intel) of the stack.

mps_stack_scan_ambig takes an extra required parameter (see above -
mps_root_create_reg - for details).

The type mps_reg_scan_t has changed (this type is only used by
mps_root_create_reg).


--drj--

