                 THE "PLOUGH" VERSION OF THE MM PRODUCT
                         version.product.plough
                               draft doc
                           richard 1997-05-14

INTRODUCTION

.intro: This document describes the "plough" version of the Memory Management 
Product.

.quote: For our sakes, no doubt, this is written: that he that plougheth should 
plough in hope. (I Corinthians 9:10)


Document History

.hist.0: Richard Brooksby <richard> wrote the first draft, including a 
specification and manifest, on 1997-06-06

.hist.1: On 1997-06-09, Richard added English summaries of intention in 
response to feedback to his RFC.

.hist.2: Pekka updated the specification to current requirements and releasable 
components on 1998-06-12.

.hist.3: Recorded the new documentation release format and removed the 
unnecessary mps/ directory.  pekka 2000-07-14


OVERVIEW

.over: The plough version is intended as a baseline for further product 
development, so that Product Management and Product Marketing can assess the 
current status and decide on a direction for development.  The specification is 
minimal.  At this stage, the requirements are fairly general (req.product(2)).


SPECIFICATION

.spec: This specification gives an estimate of how well this version of the 
product will meet the requirements set out in req.product.  This version is 
specified against an early draft of the product requirements, req.product(2).

.platforms: We have decided to include only the critical and essential 
platforms in this release, to avoid a lot of building work on platforms which 
might never be included in a customer release.  Below, we indicate which other 
platforms could have been released by just building and testing them, but note 
that when we extend the specification in future releases, this often involves 
extra work for each released platform.

.spec.doc: Note that the documentation is not in a state that would allow an 
outsider to use the MPS, so strictly speaking, the release doesn't satisfy any 
requirements, but we ignore this defect in order to be able to say something 
useful about what has been implemented.

.spec.details:

 .fun.malloc                           no
 .fun.new                              no
 .fun.man.man                          yes
 .fun.man.auto                         yes
 .fun.man.mixed                        yes
 .fun.mkt.purify.compete               yes (it certainly doesn't compete)
 .fun.mkt.purify.compl                 no
 .fun.mkt.smart-heap.compl             no
 .fun.mkt.smart-heap.mapping           no
 .fun.mkt.geodesic.compete             no
 .attr.mkt.image                       no
 .attr.mkt.usp                         poor
 .attr.mkt.usp.adapt                   no
 .attr.mkt.usp.tune                    no
 .attr.mkt.build                       poor
 .attr.mkt.impact                      none
 .attr.mkt.eval                        poor
 .attr.mkt.eval.impress                no
 .attr.mkt.eval.improve                no
 .attr.mkt.eval.convince               no
 .attr.mkt.lic                         no
 .attr.flex                            good
 .attr.rel                             good
 .attr.perform.benchmarks              unknown
 .attr.perform.benchmarks.smart-heap   unknown
 .attr.perform.benchmarks.best         unknown
 .attr.perform.benchmarks.publish      no
 .attr.adapta.customer                 good
 .attr.adapta.target                   very good
 .attr.use.roi                         unknown
 .attr.use.level.1                     no
 .attr.use.level.1.partial             no
 .attr.use.level.2or3                  yes (0)
 .attr.use.level.2and3                 no
 .attr.use.events                      poor
 .attr.use.live                        no
 .attr.use.live.grain                  no
 .attr.deploy.rapid                    no
 .dc.env.c.reasonable                  no
 .dc.env.c.reserved                    poor
 .dc.env.c.no-warn                     yes
 .dc.env.ansi-c.conform                yes
 .dc.env.ansi-c.strict                 yes
 .dc.env.cpp.reasonable                no
 .dc.env.cpp.reserved                  poor
 .dc.env.cpp.no-warn                   yes
 .dc.env.iso-cpp.conform               yes
 .dc.env.iso-cpp.strict                unknown
 .dc.env.great-circle                  unknown
 .dc.env.smart-heap                    no
 .dc.env.purify                        no
 .dc.env.boehm                         unknown
 .dc.plat.w3i3mv                       yes
 .dc.plat.sos8gc                       yes
 .dc.plat.sos8cc                       yes
 .dc.plat.s760mw                       no
 .dc.plat.s860mw                       no
 .dc.plat.s7ppmw                       no
 .dc.plat.s8ppmw                       no
 .dc.plat.sus8gc                       no (1)
 .dc.plat.sus8cc                       no
 .dc.plat.hp                           no
 .dc.plat.sgi                          no (1)
 .dc.plat.alpha                        no (1)

(0) We have level 3, but levels 1 and 2 aren't included in the release.
(1) These platforms could be built.

.spec.summary: Plough will offer

    * manual / automatic / mixed memory management policies
    * for C / C++ on Intel / sparc
    * good reliabilty / flexibility / adapatability
    * partial doc. 

It will not offer (in particular)

    * the levels
    * measurement tool


MANIFEST

.manifest: This section describes the form and content of the version.

.manifest.overview: The manifest divides into three top-level directories: 
"mps" for the memory manager, "doc" for documentation, and "tools" for 
development tools.

.manifest.files: This version will simply consist of a set of files.  I have 
decided to specify a set of files in a directory hierarchy (a "distribution") 
rather than try to put together the entire product, including specification of 
media, packaging, etc.  At this early stage it is important that we get what we 
have together.

readme.txt                     release notes
manifest.txt                   product manifest (this list)

include/                       headers for interfaces
include/mps.h                  MPM interface
include/mpsw3.h                MPM interface, Windows-specific part
include/mpswin.h               windows.h wrapper
include/mpstd.h                target detection
include/mpsio.h                plinth "I/O" interface
include/mpslib.h               plinth "lib" interface
include/mpsaan.h               arena class AN interface
include/mpsacl.h               arena class CL interface
include/mpsavm.h               arena class VM interface
include/mpscamc.h              pool class AMC(Z) interface
include/mpscams.h              pool class AMS interface
include/mpscmv.h               pool class MV interface
src/                           sources for interfaces
src/mpsioan.c                  source for ANSI-based plinth "I/O"
src/mpsliban.c                 source for ANSI-based plinth "lib"
lib/                           linkable libraries for the MPS
lib/w3i3/                      libraries for Win32 on Intel
lib/w3i3/he/                   "hot external" variety
lib/w3i3/he/mps.lib            complete MPS
lib/w3i3/he/mpsplan.lib        ANSI-based plinth
lib/w3i3/ce/                   "cool external" variety (contents as for "he")
lib/sos8/                      libraries for Solaris on SPARC
lib/sos8/he/                   "hot external" variety
lib/sos8/he/libmps.a           complete MPS
lib/sos8/he/libmpsplan.a       ANSI-based plinth
lib/sos8/ce/                   "cool external" variety (contents as for "he")

tools/                         tools (empty)
tools/bin/w3i3                 tool binaries for Win32 on Intel
tools/bin/w3i3/mpsdump         telemetry dumper
tools/bin/sos8                 tool binaries for Solaris on SPARC
tools/bin/sos8/mpsdump         telemetry dumper

doc/                           documentation
doc/Guide-*.txt                User Guide
doc/Ref-*.txt                  Reference Manual

http://www/mm/reference/       The Memory Management Reference (web)


