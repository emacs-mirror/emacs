              VERSION "PILCHARD" OF THE MM/EP-CORE PRODUCT
                        version.epcore.pilchard
                               draft doc
                            pekka 1997-12-08

INTRODUCTION

.intro: This document describes the "pilchard" version of the MM/EP-core 
product.

Document History

.hist.0: Pekka wrote an initial description.

.hist.1: Trivial updates.

.hist.2: QA release, identical in configuration to pilchard.1, but some req 
satisfaction changes.


OVERVIEW

.over: This is rather similar to the Pre-GC version in plan.epcore.  Pilchard 
will offer an improved PS VM, and the VM arena (on some Unixes and Windows).  
It will not offer (in particular) a working PS GC.

.target: This will be integrated into the SW trunk (SW request 21010 ) for 
eventual release in SW 5.0 (although we expect at least one further MM/EP-core 
release before that).


SPECIFICATION

.spec: This is based on req.epcore(16).

.fun.arena                      yes
.fun.arena.extend               yes (not for VM arena)
.fun.dl.alloc                   yes
.fun.dl.free                    yes
.fun.dl.free.mass               yes
.fun.dl.free.any                yes
.fun.dl.multi                   yes
.fun.dl.multi.move              no
.fun.ps.alloc                   yes
.fun.ps.gc                      yes
.fun.ps.gc.op                   yes (glue support needed)
.fun.ps.hash                    yes (no relocation)
.fun.ps.iter                    yes
.fun.ps.restore                 yes
.fun.gen.alloc                  yes
.fun.gen.free                   yes
.fun.tmp.alloc                  yes
.fun.tmp.free                   yes
.fun.tmp.policy                 yes (just a separate pool)
.fun.stat.alloc                 yes
.fun.stat.policy                no
.fun.cache.multiple             no
.fun.cache.alloc                yes
.fun.cache.free                 yes
.fun.cache.gc                   no
.fun.trap.alloc                 yes
.fun.trap.free                  yes
.fun.trap.alloc.zero            no
.fun.trap.realloc               no
.fun.trap.clear                 yes
.fun.trap.multi                 yes (but only one is used)
.fun.image                      yes
.fun.alloc.threaded             no
.fun.tickle                     no (possibly no such periods occur)
.fun.fragments                  ?
.fun.control.slice              no
.fun.control.low                yes
.fun.measure.dial.visual        no
.fun.measure.log                no
.fun.debug.check                no
.fun.debug.check.complexity     yes (using a debugger)
.fun.debug.settings             yes (see .versions)
.fun.debug.diagnosis            no
.fun.debug.analysis             no
.fun.debug.support              yes (except tags&promises)
.fun.debug.assert               yes

Attributes

.attr.align                     no (dl 4, promise subs 4)
.attr.run-time.seybold          ?
.attr.run-time.genoa-fts        ?
.attr.run-time.genoa-ats        ?
.attr.run-time.qa               ?
.attr.run-time.trap             ?
.attr.tp.seybold                ?
.attr.tp.genoa-fts              ?
.attr.tp.genoa-ats              ?
.attr.tp.qa                     ?
.attr.tp.trap                   ?
.attr.run-time.cons             ?
.attr.idle                      no (possibly no such periods occur)
.attr.tickle                    no (possibly no such periods occur)
.attr.trap.speed                yes
.attr.footprint                 ?
.attr.arena.min                 yes
.attr.arena.typ                 yes
.attr.arena.max                 yes
.attr.dl.obj.min                yes
.attr.dl.obj.typ                yes
.attr.dl.obj.max                yes (minus some overhead)
.attr.ps.obj.min                yes
.attr.ps.str.min                yes
.attr.ps.str.max                yes
.attr.ps.array.max              yes
.attr.ps.dict.max               yes
.attr.ps.job.typ                yes
.attr.ps.job.surprise           no
.attr.ps.job.max                yes (minus some overhead)
.attr.gen.obj.min               yes
.attr.gen.obj.max               yes (minus some overhead)
.attr.gen.pool.max              yes (minus some overhead)
.attr.tmp.obj.min               yes
.attr.tmp.obj.max               yes
.attr.tmp.pool.max              yes
.attr.stat.obj.min              yes
.attr.stat.obj.max              yes
.attr.stat.pool.max             yes
.attr.cache.obj.min             yes
.attr.cache.obj.font.typ        yes
.attr.cache.obj.upath.typ       yes
.attr.cache.obj.halftone.typ    yes
.attr.cache.obj.colour.typ      yes
.attr.cache.obj.tile.typ        yes
.attr.cache.obj.max-typ         yes
.attr.cache.obj.max             yes (minus some overhead)
.attr.cache.pool.max            yes (minus some overhead)
.attr.trap.obj.min              yes
.attr.trap.obj.max              yes
.attr.trap.obj.typ              yes
.attr.trap.pool.max             yes
.attr.rel                       yes
.attr.rel.state                 ?

Constraints

.dc.plat.sus8gc                 yes
.dc.plat.sos8gc                 yes
.dc.plat.sos9gc                 no
.dc.plat.sos9sc                 yes
.dc.plat.i4m2cc                 no
.dc.plat.i5m2cc                 yes
.dc.plat.iam4cc                 yes
.dc.plat.s760ac                 no
.dc.plat.s7ppac                 yes
.dc.plat.nti3mv                 yes
.dc.plat.ntalmv                 yes
.dc.plat.ntppmc                 yes
.dc.plat.multiproc.nt           yes
.dc.plat.multiproc.solaris      yes
.dc.plat.multiproc.irix         yes
.dc.variety                     yes
.dc.variety.fast                yes
.dc.variety.debug               yes
.dc.variety.debug.full          yes
.dc.lib.approved                yes
.dc.client.sw40                 yes
.dc.link.object                 yes (library)
.dc.link.c.header               yes
.dc.link.c.static               yes
.dc.link.obfusc                 yes

Protocols

.prot.int                       yes
.prot.int.boot                  yes
.prot.int.assert                yes
.prot.coop.tickle               no

.spec.summary: Pilchard will offer an improved PS VM.  It will not offer a 
working PS GC, but it will be a suitable base for writing the scanning and root 
registration code needed.  Pilchard includes the VM arena (on SunOS, Solaris 
and Windows), which works in a way slightly different from that described in 
req.epcore.fun.arena, -.prot.int.boot, and -.fun.arena.extend (it's got 
automatic sizing), but the old client arena is also available.

.spec.changes: Other changes from release.trapping.beta.6 include minor changes 
in the MPS interface, for which the glue code has been updated, and some random 
bug fixes.

.sw.changes:  All the platform and variety codes have changed, see platform.* 
and variety.* for definitions of the new ones, so SW makefiles have to change 
as well.  Pilchard will provide the platform to test core RIP changes and 
additions to support the GC; this is SW request 20940.


MANIFEST

.manifest.files: MM/EP-core is delivered as a library plus C header files.  
These are released by putting them into HOPE, on the trunk branch.

SWmm_unix!sus8gc:ci:mmsw.a   the library for platform sus8gc, variety ci
SWmm_unix!sus8gc:hi:mmsw.a   the library for platform sus8gc, variety hi
SWmm_unix!sos8gc:ci:mmsw.a   the library for platform sos8gc, variety ci
SWmm_unix!sos8gc:hi:mmsw.a   the library for platform sos8gc, variety hi
SWmm_unix!sos9sc:ci:mmsw.a   the library for platform sos9sc, variety ci
SWmm_unix!sos9sc:hi:mmsw.a   the library for platform sos9sc, variety hi
SWmm_unix!i5m2cc:ci:mmsw.a   the library for platform i5m2cc, variety ci
SWmm_unix!i5m2cc:hi:mmsw.a   the library for platform i5m2cc, variety hi
SWmm_unix!iam4cc:ci:mmsw.a   the library for platform iam4cc, variety ci
SWmm_unix!iam4cc:hi:mmsw.a   the library for platform iam4cc, variety hi
SWmm_mac!s7ppac:ci:mmsw_CI.o the library for platform s7ppac, variety ci
SWmm_mac!s7ppac:he:mmsw_HE.o the library for platform s7ppac, variety he
SWmm_pc!w3i3mv:ci:mmsw.lib   the library for platform w3i3mv, variety ci
SWmm_pc!w3i3mv:hi:mmsw.lib   the library for platform w3i3mv, variety hi
SWmm_pc!w3almv:ci:mmsw.lib   the library for platform w3almv, variety ci
SWmm_pc!w3almv:hi:mmsw.lib   the library for platform w3almv, variety hi
SWmm_pc!w3ppmv:ci:mmsw.lib   the library for platform w3ppmv, variety ci
SWmm_pc!w3ppmv:hi:mmsw.lib   the library for platform w3ppmv, variety hi
SWmm_common_src!mps.h        MPS header file: general
SWmm_common_src!mpswin.h     MPS header file: windows.h intermediary
SWmm_common_src!mpslib.h     MPS header file: plinth
SWmm_common_src!mpstd.h      MPS header file: platforms
SWmm_common_src!mpsacl.h     MPS header file: client arena
SWmm_common_src!mpsavm.h     MPS header file: vm arena
SWmm_common_src!mpscepdl.h   MPS header file: pool class epdl
SWmm_common_src!mpscepvm.h   MPS header file: pool class epvm
SWmm_common_src!mpscmv.h     MPS header file: pool class mv
SWmm_common_src!vm.c         glue code: dl and temp pools implementation
SWmm_common_src!mmps.c       glue code: ps pools implementation
SWmm_common_src!mmps.h       glue code: ps pool interface
SWmm_common_src!mmpool.h     glue code: pool interface
SWmm_common_src!mmlog.h      glue code: logging interface
SWmm_common_src!mpslibep.c   glue code: plinth implementation
SWmm_common_export!mm.h      glue code: MM interface
SWmm_common_export!mm_core.h glue code: EP-core support for MM
SWmm_common_export!mm.doc    glue code: technical documentation


NOTES:

.versions: Versions of builders used on the different platforms:
  sus8gc  gcc 2.7.2
  sos8gc  gcc 2.5.8
  sos9sc  SC4.0 18 Oct 1995 C 4.0
  i5m2cc  ?
  iam4cc  ?
  s7ppac  DEV (see makefiles)
  w3i3mv  Visual C 4.2
  w3almv  Visual C 2.0
  w3ppmv  Visual C 4.0

