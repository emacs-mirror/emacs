               DESCRIPTION OF THE MPS ASSERTION PROTOCOL
                         protocol.mps.assertion
                             incomplete doc
                             lmb 1997-05-01

INTERNAL NOTES

.source: Copied into here from NickB's mail: mail.nickb.1997-04-28.10-46(0) 


PROTOCOL DESCRIPTION

The MPS is able to do a great deal of checking: of arguments,
protocols, and the consistency of internal data structures. The number
and precise nature of the checks performed depends on the variety of
the MPS library [and also on the current setting of some controls, the
nature of which has not yet ben decided]. See [the documentation of
varieties]. If such a check fails, an assertion handler is called.

Assertion handlers are of type *mps_assert_t, declared in mps.h like
this:

typedef void (*mps_assert_t)(const char *, const char *, const char *,
                             unsigned line);

A handler is called as handler(cond, id, file, line), where:

- const char *cond is a textual representaion of the check which has
   failed
- const char *id is internal version information about the source file
   containing the check
- const char *file is the name of that source file
- unsigned int line is the line number of the check

The MPS cannot safely proceed after a check has failed, so the
assertion handler should not return to its caller. It may terminate
the program, for example, by calling abort() (standard.ansic section
7.10.4.1) or exit() (section 7.10.4.3), or it may use longjmp() to
perform a non-local exit (section 7.6.2.1).  However, once an
assertion handler has been called, the MPS may not be used again during
the current run of the program.

The default assertion handler is internal to the MPS. This handler
uses mps_lib_fputs() and mps_lib_fputc() to write a diagnostic message
to mps_lib_stderr() and then calls mps_lib_abort(). [See the plinth
documentation for details of mps_lib_*].  However, you can write
your own assertion handlers and install them using mps_assert_install().

mps_assert_default is a function that takes no arguments and returns
a pointer to the default assertion handler. This function is intended to be
used in conjunction with mps_assert_install. Clients may also call the
default assertion handler directly, in which case the first, second,
and third arguments must be non-NULL pointers to zero-terminated
strings.

mps_assert_install is a function that takes a pointer to an assertion
handler and installs it as the current assertion handler. It returns
a pointer to the previously installed assertion handler.

Among the actions that might be taken by a client assertion handler
are:

- displaying the assertion in a dialog
- recording the assertion in a log
- writing client-specific diagnostics to a file
- starting a debugging session

Authors of software that may be used in conjunction with other
clients of the MPS (for example, components, plugins, or modules of a larger
product) should consider the benefits of passing assertions on to the
previously installed handler. If this is not done, the behavior will
depend upon the order in which different handlers are installed.

The typical use of the functions described above is as follows:

        mps_assert_t old_handler;

 void my_assertion_handler(const char *cond, 
      const char *id,
      const char *file,
      unsigned int line)
        {
   fatal_error_dialog("The Memory Pool System detected an inconsistency"
                             "in file %s at line %u: %s\n", file, line, cond);
          old_handler(cond, id, file, line);
          abort();
   NOTREACHED;
 }


 /* install the handler: */
 old_handler = mps_assert_install(my_assertion_handler);

 /* ... use the MPS ... */

 /* restore the old handler */
 (void) mps_assert_install(old_handler);

