                MPS C INTERFACE: FUNCTION MPS_SAC_ALLOC
                       symbol.mps.c.mps_sac_alloc
                              draft symbol
                            pekka 1999-03-04

NAME

mps_sac_alloc


SUMMARY

This function allocates a block using the segregated allocation cache given.


ASSOCIATED PROTOCOLS

Allocation cache


TYPE

mps_res_t mps_sac_alloc(mps_addr_t *p_o, mps_sac_t sac, size_t size, mps_bool_t 
has_reservoir_permit);


ARGUMENTS

p_o                      a pointer to a variable to hold the address of the new 
block
sac                      the segregated allocation cache
size                     the size of the block requested
has_reservoir_permit  regulates access to the reservoir


RETURNED VALUES

If the return value is "MPS_RES_OK", the address of a new block in "*p_o".


RESOURCES

mps.h


DESCRIPTION

This function allocates a block using the cache given.  If no suitable block 
exists in the cache, it will ask for more memory from the associated pool.  
size does not have to be one of the class sizes of the cache; it does not have 
to be aligned.

The client is responsible for synchronising the access to the cache, but if the 
cache decides to access the pool, the MPS will properly synchronize with any 
other threads that might be accessing the same pool.

"has_reservoir_permit" regulates whether the pool has permission to get more 
memory from the reservoir to satisfy this request.


EXAMPLE

  void *p;
  Foo *foo;

  res = mps_sac_alloc(&p, sac, FooSIZE, is_in_panic);
  if (res != MPS_RES_OK) {
    printf("Failed to alloc foo!\n"); exit(1);
  }
  foo = p;
  /* use foo */
  mps_sac_free(sac, p, FooSIZE);


ERROR HANDLING

"mps_sac_alloc" returns "MPS_RES_MEMORY" when it fails to find enough memory; 
see the documentation for this return code for recovery options.  It returns 
"MPS_RES_COMMIT_LIMIT" if it can't allocate without exceeding the arena commit 
limit; Free something to make more space or increase the limit using 
"mps_arena_commit_limit_set".  It returns "MPS_RES_RESOURCE" if it has run out 
of swap space; Free something or terminate other processes on the same machine.


SEE ALSO

symbol.mps.c.MPS_SAC_ALLOC, symbol.mps.c.mps_sac_free, 
symbol.mps.c.MPS_SAC_FREE, symbol.mps.c.mps_sac_t, mps_reservoir_limit_set, 
symbol.mps.c.mps_arena_commit_limit_set, symbol.mps.c.MPS_RES_MEMORY, 
MPS_RES_COMMIT_LIMIT, MPS_RES_RESOURCE


NOTES

There's also a macro called MPS_SAC_ALLOC, that does the same thing.  The macro 
is faster, but generates more code and does less checking.

The block allocated can be larger than requested.  Blocks not matching any 
class size are allocated from the next largest class, and blocks larger than 
the largest class size are simply allocated at the requested size (rounded up 
to alignment, as usual).

Objects allocated through a segregated allocation cache should only be freed 
through a segregated allocation cache with the same class structure.  Using 
mps_free on them can cause memory leaks, because the size of the block might be 
larger than you think.  Naturally, the cache must also be attached to the same 
pool.


