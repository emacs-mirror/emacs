                MPS C INTERFACE SYMBOL "MPS_ROOT_CREATE"
                      symbol.mps.c.mps_root_create
                              draft symbol
                            pekka 1997-09-22

NAME

mps_root_create


SUMMARY

The function "mps_root_create" declares a root that consists of all the 
references indicated by a scanning function.


ASSOCIATED PROTOCOLS

Root.


SYNTAX

mps_res_t mps_root_create(mps_root_t *root_o, mps_arena_t arena, mps_rank_t 
rank, mps_rm_t rm, mps_root_scan_t scan, void *p, size_t s)


ARGUMENTS

root_o      a pointer to a variable to store the new root structure
arena       the arena
rank        the rank of references in the root
rm          the root mode
scan        the scanning function
p           a value to be passed to the scanning function
s           a value to be passed to the scanning function


RETURNED VALUES

If the return value is "MPS_RES_OK", a new root structure in "*root_o".


EXCEPTIONS

None.


RESOURCES

mps.h.


DESCRIPTION

The client provides a scanning function, that will be called with a scan state 
and "p" and "s", whenever the root needs to be scanned.  See "mps_root_scan_t" 
for details.

If the rank of the root is not "MPS_RANK_AMBIG", the contents of the root have 
to be valid whenever a GC happens, i.e., they have to be references to actual 
objects or "NULL".  If you're using asynchronous GC, this could be right after 
the root is registered, so the root has to be valid when it is registered.  
It's OK for a root to have entries which point to memory not managed by the MPS 
-- they will simply be ignored.


EXAMPLE

static mps_root_t mmRoot;

int main(void)
{
  mps_res_t res;

  /* ... */
  res = mps_root_create(&mmRoot, arena, MPS_RANK_EXACT, (mps_rm_t)0,
                        &rootScanner, NULL, 0);
  /* see doc of mps_root_scan_t for definition of rootScanner */
  if(res != MPS_RES_OK) exit(1);
  /* ... */
}


ERROR HANDLING

"mps_root_create" returns "MPS_RES_MEMORY" when it fails to allocate memory for 
the internal root structure; you need to deallocate or reclaim something to 
make enough space, or expand the arena.


SEE ALSO

mps_root_scan_t, mps_rm_t, mps_rank_t, mps_root_t, mps_root_create_fmt, 
mps_root_create_table, MPS_RM_CONST


NOTES

"p" and "s" are just arbitrary data that scanning function can use.  This is 
needed because C lacks real function objects.


INTERNAL NOTES




