                MPS C INTERFACE: FUNCTION MPS_SAC_CREATE
                      symbol.mps.c.mps_sac_create
                              draft symbol
                            pekka 1999-03-04

NAME

mps_sac_create


SUMMARY

This function creates a segregated allocation cache.


ASSOCIATED PROTOCOLS

Allocation cache


TYPE

mps_res_t mps_sac_create(mps_sac_t *sac_o, mps_pool_t pool, size_t 
classes_count, mps_sac_classes_s *classes);


ARGUMENTS

sac_o          a pointer to a variable to hold the cache created
pool           the pool the cache is attached to
classes_count  the number of the size classes
classes        pointer to the first element of an array describing the size 
classes


RETURNED VALUES

If the return value is "MPS_RES_OK", a new cache in "*sac_o".


RESOURCES

mps.h


DESCRIPTION

This function creates an allocation cache whose free-list is segregated into 
the given size classes.  The cache can get more memory from the given pool, or 
return memory to it.

Segregated allocation caches can be associated with any pool that supports 
mps_alloc and mps_free.

The size classes are described by an array of element type mps_sac_classes_s 
(q.v.).  This array is used to initialize the cache, and is not needed after 
mps_sac_create returns.  There might be a limit on how many classes can be 
described, but it will be no less than
MPS_SAC_CLASS_LIMIT.  You must specify at least one class.  The MPS 
automatically provides an "overlarge" class for arbitrarily large objects above 
the largest class described.  Allocations falling into the overlarge class are 
not cached.


EXAMPLE

  mps_sac_t sac;
  mps_sac_classes_s classes[3] = { {8, 38, 1}, {136, 19, 3}, {512, 4, 1} };

  res = mps_sac_create(&sac, pool, 3, classes);
  if (res != MPS_RES_OK) {
    printf("Failed to create the allocation cache!"); exit(1);
  }


ERROR HANDLING

"mps_sac_create" returns "MPS_RES_MEMORY" or "MPS_RES_COMMIT_LIMIT" when it 
fails to allocate memory for the internal cache structure; see the 
documentation for those return codes for recovery options.  It returns 
"MPS_RES_LIMIT" if you ask for too many size classes; combine some small 
adjacent classes.  It returns "MPS_RES_PARAM" if the pool doesn't support 
segregated allocation caches.


SEE ALSO

symbol.mps.c.mps_sac_classes_s, symbol.mps.c.MPS_SAC_CLASS_LIMIT, 
symbol.mps.c.mps_sac_destroy, symbol.mps.c.MPS_RES_MEMORY, MPS_RES_COMMIT_LIMIT
, symbol.mps.c.MPS_RES_LIMIT, symbol.mps.c.MPS_RES_PARAM, symbol.mps.c.mps_sac_t


NOTES

Too many classes will slow down allocation; too few classes waste more space in 
internal fragmentation.  It is assumed that overlarge allocations are rare; 
otherwise, you would add another class for them, or even create separate 
allocation caches or pools for them.

Some pools will work more efficiently with caches than others.  In the future, 
the MPS might offer pools specially optimized for particular types of cache.

Segregated allocation caches work poorly with debug pool classes at the moment: 
the checking only happens when blocks are moved between the cache and the 
pool.  This will be fixed, but the speed of allocation with a debug class will 
always be similar to mps_alloc, rather than cached speed.


INTERNAL NOTES:

The error handling details might change; not all of them are implemented at the 
moment.

