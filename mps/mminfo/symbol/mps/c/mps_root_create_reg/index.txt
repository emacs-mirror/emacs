              MPS C INTERFACE SYMBOL "MPS_ROOT_CREATE_REG"
                    symbol.mps.c.mps_root_create_reg
                           incomplete symbol
                            pekka 1997-09-22

NAME

mps_root_create_reg


SUMMARY

"mps_root_create_reg" registers a thread as a root.


ASSOCIATED PROTOCOLS

Root.


SYNTAX

mps_res_t mps_root_create_reg(mps_root_t * root_o, mps_arena_t arena,
                              mps_rank_t rank, mps_rm_t rm, mps_thr_t thread,
                              mps_reg_scan_t scan, void *p, size_t s)


ARGUMENTS

root_o      a pointer to a variable to store the new root structure
arena       the arena
rank        the rank of references in the root
rm          the root mode
thread      the thread to the registered as a root
scan        the scanning function
p           a value to be passed to the scanning function
s           a value to be passed to the scanning function


RETURNED VALUES

If the return value is "MPS_RES_OK", a new root structure in "*root_o".


RESOURCES

mps.h


DESCRIPTION

mps_root_create_reg declares the state of a thread as a root.  The client 
provides a scanning function that will be called and passed "p" and "s", 
whenever the root needs to be scanned.  See "mps_reg_scan_t" for details.

If the rank of the root is not "MPS_RANK_AMBIG", the contents of the root have 
to be valid whenever a GC happens, i.e., they have to be references to actual 
objects or "NULL".  If you're using asynchronous GC, this could be right after 
the root is registered, so the root has to be valid when it is registered.  
It's OK for a root to have entries which point to memory not managed by the MPS 
-- they will simply be ignored.


EXAMPLE

typedef struct {
  mps_root_t mmRoot;
  mps_thr_t thread;
  ...
} ThreadLocals;

void InitThread(ThreadLocals *thr)
{
  /* This is a hack to find the bottom of the stack. */
  void *stackBottom=&stackBottom;

  mps_thread_reg(&thr->thread, arena);
  mps_root_create_reg(&thr->mmRoot, arena, MPS_RANK_AMBIG, (mps_rm_t)0,
                      thr->thread, mps_stack_scan_ambig, stackBottom, 0);
  ...
}


ERROR HANDLING

"mps_root_create_reg" returns "MPS_RES_MEMORY" when it fails to allocate memory 
for the internal root structure; you need to deallocate or reclaim something to 
make enough space, or expand the arena.


SEE ALSO

mps_stack_scan_ambig, mps_reg_scan_t


NOTES

Only one suitable scanning function is supplied with the MPS, namely 
"mps_stack_scan_ambig".


INTERNAL NOTES


