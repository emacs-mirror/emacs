        DESCRIPTION OF THE MPS C INTERFACE SYMBOL "MPS_FINALIZE"
                       symbol.mps.c.mps_finalize
                           incomplete symbol
                             lmb 1997-10-07

NAME

mps_finalize


SUMMARY

"mps_finalize" registers an object for finalization.  This object must be an 
object allocated from a pool in the specified arena.


ASSOCIATED PROTOCOLS

Finalization, message.


SYNTAX

mps_res_t mps_finalize(mps_arena_t arena, mps_addr_t *object_ref)


ARGUMENTS

arena -- the arena in which the object lives
object_ref -- a pointer to a pointer to the object to be finalized


INITIAL/DEFAULT VALUES

Not applicable.


RETURNED VALUES


RESOURCES

Not applicable.


DESCRIPTION

This function registers the specified object for finalization.  This object 
must be an object allocated from a pool in the specified arena.

An object becomes finalizable if it is registered for finalization, and the 
collector observes that it would otherwise be reclaimable.  Note that the 
subsequent creation of strong references to the object (from, say, weak 
references) may cause finalization to occur when an object is not otherwise 
reclaimable.

When an object is finalizable, it may be finalized up to N times, where N is 
the number of times it has been registered for finalization.  When an object is 
finalized, it is also deregistered for finalization (so that it cannot be 
finalized again from the same registration).

This function receives a reference to a reference.  This is to avoid placing 
the restriction on the client that the C call stack be a root.

Finalization is performed by passing a finalization message to the client, 
containing an exact reference to the object.  See the message protocol, 
"mps_message_type_finalization", and "mps_message_finalization_ref" for details.

If an object is registered for finalization multiple times, then there may be 
mutiple finalization messages on the queue at the same time.  It may also be 
necessary to discard previous finalization messages for an object
before all such messages are posted on the message queue.  Clients performing 
multiple registrations must cope with both behaviors.

Note that there is no guarantee that finalization will be prompt, although the 
collector does attempt to do this.

Note that there will be no attempt to finalize objects in the context of 
"mps_arena_destroy" or "mps_pool_destroy".  "mps_pool_destroy" should therefore 
not be invoked on pools containing objects registered for finalization.

Not all pools support finalization of objects in those pools.  For more 
information, see the Pool Class Catalog.


EXAMPLE


ERROR HANDLING


SEE ALSO

mps_message_*, mps_arena_destroy, mps_pool_destroy

"Message Protocol"


NOTES


INTERNAL NOTES

Excerpts from mail.drj.1997-10-10.09-12:

> Finalization is performed by passing a finalization message to the client,
> containing an exact reference to the object.  See the message protocol,
> mps_message_type_finalization(), and
> mps_message_finalization_ref() for details.

> If an object is registered for finalization multiple times, then there may
> be mutiple finalization messages on the queue at the same time.  It may
> also be necessary to discard previous finalization messages for an object
> before all such messages are posted on the message queue.  Clients
> performing multiple registrations must cope with both behaviors.

This is opaque.  What we are saying is that we don't guarantee anything about 
multiple finalization messages arriving all at once or anything like that, and 
in particular that finalization message on the queue may
in fact prevent other finalization messages for the same object appearing.

> Note that there is no guarantee that finalization will be prompt, although
> the collector does attempt to do this.

> Note that there will be no attempt to finalize objects in the context of
> mps_arena_destroy or mps_pool_destroy.  mps_pool_destroy should therefore
> not be invoked on pools containing objects registered for finalization.

The reason why we don't recommend calling mps_pool_destroy (painting our 
clients into something of a corner) is not because the objects won't get 
finalized but because it will cause undefined behaviour in the MM.  I think we 
intend to improve the behaviour here in future.


