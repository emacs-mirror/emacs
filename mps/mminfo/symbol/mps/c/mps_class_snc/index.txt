                MPS C INTERFACE: FUNCTION MPS_CLASS_SNC
                       symbol.mps.c.mps_class_snc
                           incomplete symbol
                             drj 1998-10-16

NAME

mps_class_snc


SUMMARY

Returns the pool class object (of type mps_class_t) for the Stack No Check Pool 
Class.


ASSOCIATED PROTOCOLS

Pool Creation


SYNTAX

mps_class_t mps_class_snc(void)


ARGUMENTS

No arguments.


RETURNED VALUES

Returns a pool class object.


RESOURCES

This symbol is declared in the header file mpscsnc.h [impl.h.mpscsnc].  That 
header file must be included before making any reference to this symbol.


DESCRIPTION

This function returns an object of type mps_class_t which represents the Stack 
No Check Pool Class.

This pool class requires an extra argument when used in mps_pool_create:

res = mps_pool_create(&pool, arena, mps_class_snc(), format);

The extra argument, format, should be of type mps_fmt_t and specifies the 
format of the objects allocated in the pool (in a similar way to 
mps_class_amc).  The format should provide at least the methods: scan, skip, 
pad.

An SNC pool is scannable, in that objects may contain references to objects in 
other pools that will keep those objects alive (depending on rank).  In this 
sense, an SNC pool is a de facto root.

Exact references may point to (the start of) objects in an SNC pool, but will 
have no effect on whether those objects are either scanned or kept alive.

If mps_ap_frame_pop is used on an allocation point in an SNC pool (after a 
corresponding call to mps_ap_frame_push), then the objects affected by the pop 
are effectively declared dead, and may be reclaimed by the collector.  Extant 
references to such objects from reachable or de facto alive objects are safe, 
but such other objects should be dead; that is, such references must never be 
used.

If an allocation point is created in an SNC pool, then the call to 
mps_ap_create will take as an additional parameter the rank (of type 
mps_rank_t) of references in the objects to be created in that allocation 
point.  Currently, only rank exact (mps_rank_exact()) is supported.

Objects in an SNC pool may not be registered for finalization.

Objects in an SNC pool will not move.


EXAMPLE

NYA


ERROR HANDLING

Cannot fail.


SEE ALSO

symbol.mps.c.mps_class_amc
symbol.mps.c.mps_ap_frame_pop(0)
symbol.mps.c.mps_ap_frame_push(0) 
symbol.mps.c.mps_ap_create


NOTES

None.


INTERNAL NOTES:

Intended to meet dylan requirements for a stack pool: 
req.dylan.fun.obj.stack-alloc

