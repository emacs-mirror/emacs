                MPS C INTERFACE: MPS_POOL_DEBUG_OPTION_S
                  symbol.mps.c.mps_pool_debug_option_s
                           incomplete symbol
                            pekka 1998-09-11

NAME

mps_pool_debug_option_s


SUMMARY

This structure is used to pass debug options to "mps_pool_create" for debug 
classes.


ASSOCIATED PROTOCOLS

Debug.


TYPE

typedef struct mps_pool_debug_option_s {
  void* fence_template;
  size_t fence_size;
} mps_pool_debug_option_s;


MEMBERS

fence_template   the template for fencepost contents
fence_size        the size of the template in bytes


RESOURCES

mps.h


DESCRIPTION

Structures of this type are used to pass debug options to "mps_pool_create" 
when creating instances of debug classes.

Fenceposting is enabled by specifying a non-zero "fence_size"; the size must be 
a multiple of the [pool/format] alignment.  The content of fenceposts is given 
as a template that is simply copied onto each fencepost (although sometimes the 
MPS will create fenceposts smaller than the given size, for example, to pad out 
some bit that was left unused because of alignment requirements).


EXAMPLE

static mps_pool_debug_option_s debugOptions = { (void *)"postpost", 8 };

if(mps_pool_create(&pool, arena, mps_class_epdl_debug(),
                   &debugOptions, 8192, 135, 8)
   != MPS_RES_OK) {
  printf("Error creating pool!"); exit(2);
}


SEE ALSO

symbol.mps.c.mps_pool_check_fenceposts


NOTES

Fencepost templates allow the client to specify complicated patterns that mimic 
illegal data values, that would cause an assert to fire if read by mistake, and 
that would never be written by any operation that writes at the wrong address 
by mistake.
Another trick is to make the pattern contain an instruction sequence that would 
cause the program to error or stop if executed by mistake.


INTERNAL NOTES

I know there's no Debug protocol, but there should be.  See internal notes for 
symbol.mps.c.mps_pool_check_fenceposts(0).  pekka 1998-09-11

This structure will grow larger in the future, and at some point will be 
replaced by a generalized mechanism for passing optional arguments (usually 
called "optargs").  pekka 1998-09-11


