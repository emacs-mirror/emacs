       DESCRIPTION OF THE MPS C INTERFACE SYMBOL "MPS_FMT_COPY_T"
                      symbol.mps.c.mps_fmt_copy_t
                              draft symbol
                           gavinm 1997-05-12

NAME

mps_fmt_copy_t


SUMMARY

"mps_fmt_copy_t" is a function pointer type for the copy method of a format.  
The method copies an object to a new location.  As part of the format protocol, 
a copy method must be of this type.


ASSOCIATED PROTOCOLS

Format.


TYPE

typedef void (*mps_fmt_copy_t)(mps_addr_t old, mps_addr_t new);


ARGUMENTS

old -- the address of the object
new -- the address to which the object should be copied


INITIAL/DEFAULT VALUES

Not applicable.


RETURNED VALUES

Not applicable.


EXCEPTIONS

Not applicable.


RESOURCES

Not applicable.


DESCRIPTION

A copy method is required in some formats (in particular formats A and B (see 
"mps_fmt_A_t" and "mps_fmt_B_t")).  Copy methods have the type mps_fmt_copy_t.  
A copy method takes the address of an object and another address, and copies 
the object to the new address.  


EXAMPLE

void my_copy_method(mps_addr_t old, mps_addr_t new)
{
  size_t length = (char *)my_skip_method(old) - (char *)old;
  memcpy(new, old, length);
}


ERROR HANDLING

A copy method is not allowed to fail.


SEE ALSO

mps_fmt_t, mps_fmt_create_A, mps_fmt_A_t, mps_fmt_B_t, mps_fmt_create_B


NOTES


INTERNAL NOTES


INTERNAL NOTES:

What if the new overlaps with the object at old?  The example code uses memcpy 
so there's an assumption (possibly unwitting) that this couldn't happen.  The 
Dylan format (dylan_copy) also uses memcpy, again the same assumption.  My vote 
would be to say that copy is only ever called for non-overlapping copies and 
introduce a new method (and variant) when we want overlapping copies.  drj 
1999-04-19

