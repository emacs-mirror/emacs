                MPS C INTERFACE: FUNCTION MPS_CLASS_MVFF
                      symbol.mps.c.mps_class_mvff
                           incomplete symbol
                           gavinm 1998-09-09

NAME

mps_class_mvff


SUMMARY

Used as a parameter to mps_pool_create to create an MVFF pool.


ASSOCIATED PROTOCOLS

Pool, Allocation Points.


TYPE

mps_class_t mps_class_mvff(void)


ARGUMENTS

None.


RETURNED VALUES

The function returns a class object that can be passed to mps_pool_create.


RESOURCES

mpscmvff.h


DESCRIPTION

MVFF pools implement a first-fit policy, and can be configured to be 
functionally equivalent to an EPDL or EPDR pool, but with better overall 
performance.  The pool requires six parameters to pool creation:
  - mps_size_t extendBy -- The size of segment to allocate by default;
  - mps_size_t avgSize -- The average size of objects to be allocated;
  - mps_align_t alignment -- The alignment of addresses for allocation (and 
freeing) in the pool;
  - mps_bool_t slotHigh
  - mps_bool_t arenaHigh
  - mps_bool_t firstFit

The alignment is the alignment of ranges that can be allocated and freed.  If 
an unaligned size is passed to mps_alloc or mps_free, it will be rounded up to 
the pool's alignment.  The minimum alignment supported by pools of this class 
is "sizeof(void *)".

The three boolean parameters should be set to (0, 0, 1) to emulate EPDL, and 
(1, 1, 1) to emulate EPDR.  No other settings of these parameters is currently 
recommended.

Buffered allocation (mps_reserve and mps_commit) is also supported, but in that 
case, the policy is rather different: buffers are filled worst-fit, and 
allocation is always upwards from the base.  The arenaHigh parameter regulates 
whether new segments are acquired at high or low addresses; the slotHigh and 
firstFit parameters do not affect buffered allocation.  Buffered and unbuffered 
allocation can be used at the same time, but in that case, the first allocation 
point must be created before any call to mps_alloc.

Cached allocation (MPS_SAC_ALLOC and MPS_SAC_FREE) is also supported, but in 
that case, the policy is a little different: allocation from the cache follows 
its own policy (typically first-fit), and only when the cache needs to acquire 
more blocks from the underlying MVFF pool does it use the usual algorithm to 
choose blocks for the cache.


EXAMPLE

if (mps_pool_create(&pool, arena, mps_class_mvff(), 8 * 1024, 135, 4, 0, 0, 1)
    != MPS_RES_OK) {
  printf("Error creating pool!"); exit(2);
}



SEE ALSO

mps_pool_create, mps_class_epdr, mps_class_epdl, mps_reserve, mps_commit, 


NOTES

It is usually not advisable to use buffered and unbuffered allocationat the 
same time, because the worst-fit policy of buffer filling will grab all the 
large blocks, leading to severe fragmentation.  Use two separate pools instead.

Note that using buffered allocation prevents (for obscure technical reasons) 
the pool from allocating across segment boundaries.  This can cause added 
external fragmentation if objects are allocated that are a significant fraction 
of the segment size.  (This quirk will disappear in a future version.)


INTERNAL NOTES:

The restriction on the creation of the first allocation point will go away with 
"sunset on segments".  pekka 1999-01-06

