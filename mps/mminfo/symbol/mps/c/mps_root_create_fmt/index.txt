              MPS C INTERFACE SYMBOL "MPS_ROOT_CREATE_FMT"
                    symbol.mps.c.mps_root_create_fmt
                           incomplete symbol
                            pekka 1998-01-26

NAME

mps_root_create_fmt


SUMMARY

The function "mps_root_create_fmt" declares a root that consists of a block of 
objects, and provides a scanning function for them.


ASSOCIATED PROTOCOLS

Root.


SYNTAX

mps_res_t mps_root_create_fmt(mps_root_t *root_o, mps_arena_t arena,
                              mps_rank_t rank, mps_rm_t rm,
                              mps_fmt_scan_t scan,
                              mps_addr_t base, mps_addr_t limit)


ARGUMENTS

root_o      a pointer to a variable to store the new root structure
arena       the arena
rank        the rank of references in the root
rm          the root mode
scan        the scanning function
base        the address of the start of the root
limit       the address just beyond the end of the root


RETURNED VALUES

If the return value is "MPS_RES_OK", the new root in "*root_o".


RESOURCES

mps.h


DESCRIPTION

The client provides a scanning function, that will be called with a scan state 
and an area of memory, whenever the root needs to be scanned.  See 
"mps_fmt_scan_t" for details.

If the rank of the root is not "MPS_RANK_AMBIG", the contents of the root have 
to be valid whenever a GC happens, i.e., they have to be references to actual 
objects or "NULL".  If you're using asynchronous GC, this could be right after 
the root is registered, so the root has to be valid when it is registered.  
It's OK for a root to have entries which point to memory not managed by the MPS 
-- they will simply be ignored.


EXAMPLE

static mps_root_t mmRoot;

SegmentDescriptor DataSegment;

int main(void)
{
  mps_res_t res;

  /* ... */
  res = mps_root_create_fmt(&mmRoot, arena, MPS_RANK_EXACT, (mps_rm_t)0,
                            &scan_objs,
                            (mps_addr_t)DataSegment.base,
                            (mps_addr_t)(DataSegment.base + SegmentLength));
  /* see doc of mps_fmt_scan_t for definition of scan_objs */
  if(res != MPS_RES_OK) exit(EXIT_FAILURE);
  /* ... */
}


ERROR HANDLING

"mps_root_create_fmt" returns "MPS_RES_MEMORY" when it fails to allocate memory 
for the internal root structure; you need to deallocate or reclaim something to 
make enough space, or expand the arena.


SEE ALSO

mps_fmt_scan_t, mps_rm_t, mps_rank_t, mps_root_t, mps_root_create, 
mps_root_create_table, MPS_RM_PROT, MPS_RM_PROT_INNER, MPS_RM_CONST


NOTES

This is like "mps_root_create_table", except you get to supply your own 
scanning function.  This is like "mps_root_create", except the scanning 
function has a slightly different argument list (and the MPS knows where the 
root is).


INTERNAL NOTES




