                MPS C INTERFACE SYMBOL "MPS_CLASS_EPVM"
                      symbol.mps.c.mps_class_epvm
                           incomplete symbol
                            pekka 1998-01-22

NAME

mps_class_epvm


SUMMARY

"mps_class_epvm" returns the EPVM pool class.


ASSOCIATED PROTOCOLS

Allocation point.


SYNTAX

mps_class_t mps_class_epvm(void);


ARGUMENTS

None.


RETURNED VALUES

Returns the EPVM pool class.


RESOURCES

mpscepvm.h.


DESCRIPTION

This function is used to get hold of the EPVM pool class, for the purpose of 
passing it to "mps_pool_create".

The EPVM pool class allows the creation of formatted, collected pools with 
various additional special properties, including a stack-oriented manual free 
(save and restore).


EXAMPLE

if(mps_pool_create(&pool, arena, mps_class_epvm(), fmt, maxSAVE, 0)
   != MPS_RES_OK) {
  printf("Error creating pool!"); exit(2);
}


ERROR HANDLING

Never fails.


SEE ALSO

mps_pool_create, mps_epvm_save_level_t, mps_fmt_t, mps_epvm_save, 
mps_epvm_restore, mps_epvm_check


NOTES

Creation

This pool class has three extra parameters to mps_pool_create:
  mps_res_t mps_pool_create(mps_pool_t * pool, mps_arena_t arena,
                            mps_class_t epvm_class, mps_fmt_t format,
                            mps_epvm_save_level_t max_save,
                            mps_epvm_save_level_t init_save);
"format" is the format used for the objects in this pool, "max_save" is the 
maximum save level and "init_save" the initial save level.  The only format 
methods that are used are Align, Skip and Scan.  The alignment must be a power 
of two.


Objects

There's one extra parameter for mps_ap_create:
  mps_res_t mps_ap_create(mps_ap_t *ap, mps_pool_t pool,
                          mps_bool_t is_obj);
Specifying true for "is_obj" means you want to allocate objects with references 
of "RANKExact" in them, false means only objects with no references in them.  
We call the former "object allocation points" and the latter "string allocation 
points".

Objects of any size (that is a multiple of the alignment) may be allocated, but 
they are considered to be vectors of "grains", each being the size of the 
alignment.  Each grain can be independently reclaimed by the garbage collector. 
 Fixing a reference to an EPVM pool applies to the grain being referenced 
only.  Therefore, the scanning method of any pool or root which references an 
object in an EPVM pool must separately fix every grain that the reference is 
used to access.  This also implies that the Skip method should advance by the 
size of the alignment.

Only exact and weak references to EPVM objects are supported at the moment.

GC in EPVM pools does not move objects.  This means that vectors of grains will 
stay contiguous, and subvectors can be represented by a pointer into the middle 
of the vector and a length.  References to subvectors allocated from object 
allocation points must be aligned, but subvectors from string allocation points 
need not be.


INTERNAL NOTES

This pool has been created for managing PostScript objects in ScriptWorks, and 
is somewhat specific to that application.  It should not be documented for 
other clients.

We're thinking about ways to support finalization for EPVM, but restore makes 
it a bit complicated.


