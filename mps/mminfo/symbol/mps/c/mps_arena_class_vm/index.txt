              MPS C INTERFACE: FUNCTION MPS_ARENA_CLASS_VM
                    symbol.mps.c.mps_arena_class_vm
                              draft symbol
                            pekka 1997-09-26

NAME

mps_arena_class_vm


SUMMARY

"mps_arena_class_vm" returns the virtual memory arena class.


ASSOCIATED PROTOCOLS

Arena.


SYNTAX

mps_arena_class_t mps_arena_class_vm(void);


ARGUMENTS

None.


RETURNED VALUES

Returns the virtual memory arena class.


RESOURCES

mpsavm.h


DESCRIPTION

This function is used to get hold of [determine?] the virtual memory arena 
class, for the purpose of passing it to "mps_arena_create".


EXAMPLE

mps_arena_t arena;

int main(void)
{
  if(mps_arena_create(&arena, mps_arena_class_vm(), ARENA_SIZE)
     != MPS_RES_OK) {
    printf("Not enough memory!");
    exit(1);
  }
  /* rest of program */
}


ERROR HANDLING

None.


SEE ALSO

mps_arena_create, mps_arena_class_vmnz


NOTES

Virtual memory arenas are not available on the Mac platforms.  You will get a 
linking error, if you attempt to use this function.

A virtual memory arena gets its managed memory from the operating system's 
virtual memory services.  An initial address space size is passed when the 
arena is created.  When creating a virtual memory arena, "mps_arena_create" 
takes one extra argument:

mps_res_t mps_arena_create(mps_arena_t *arena_o,
                           mps_arena_class_t arena_class_vm,
                           size_t size)

"size" is the initial amount of virtual address space that the arena will 
reserve (most of these addresses are initially reserved, so that the arena can 
subsequently use them, but not committed, so they don't require any RAM or 
backing store).  The arena may allocate more virtual address space beyond this 
initial reservation as and when it deems it necessary.  "mps_arena_create" 
returns "MPS_RES_RESOURCE" if it fails to reserve adequate address space to 
place the arena in; possibly other parts of the program are reserving too much 
virtual memory.  It returns "MPS_RES_MEMORY" when it fails to allocate memory 
for the internal arena structures; either "size" was far too small or you ran 
out of swap space.


