                MPS C INTERFACE: TYPE MPS_SAC_CLASSES_S
                     symbol.mps.c.mps_sac_classes_s
                              draft symbol
                            pekka 1999-03-05

NAME

mps_sac_classes_s


SUMMARY

A structure describing a size class to be passed as an argument to 
mps_sac_create.


ASSOCIATED PROTOCOLS

Allocation cache


TYPE

typedef struct mps_sac_classes_s {
  size_t mps_block_size;
  size_t mps_cached_count;
  unsigned mps_frequency;
} mps_sac_classes_s;


RESOURCES

mps.h


DESCRIPTION

mps_sac_classes_s is the element type of the array passed to mps_sac_create to 
describe the size classes.  Each element of this array describes one class by 
specifying block_size, the maximum size (in bytes) in this class; cached_count, 
the number of objects of this class to cache; and frequency, a number that 
describes the frequency of requests (allocation and deallocation combined) in 
this class relative to all the other classes.  The classes should be given in 
the order of ascending size.

block_sizes have to be aligned to the pool alignment.  All sizes must be 
different, and the smallest size must be large enough to hold a void *.

cached_count is advice to the MPS on how many blocks to cache, not an absolute 
limit.  The cache policy tries to accommodate fluctuations in the population 
and minimize the cost of responding to client requests; the purpose of this 
parameter is to limit how much memory the client is willing to set aside for 
this purpose.  However, a cached_count of zero prevents any caching of blocks 
falling into that class.

The MPS automatically provides an "overlarge" class for arbitrarily large 
objects above the largest class described.  Allocations falling into the 
overlarge class are not cached.


EXAMPLE

  mps_sac_t sac;
  mps_sac_classes_s classes[3] = { {8, 38, 1}, {136, 19, 3}, {512, 4, 1} };

  res = mps_sac_create(&sac, pool, 3, classes);
  if (res != MPS_RES_OK) {
    printf("Failed to create the allocation cache!"); exit(1);
  }


SEE ALSO

symbol.mps.c.mps_sac_create


NOTES

Any blocks whose size falls between two classes are allocated from the larger 
class.


INTERNAL NOTES:

The alignment requirement might be removed in the next release.  pekka 
1999-03-18

