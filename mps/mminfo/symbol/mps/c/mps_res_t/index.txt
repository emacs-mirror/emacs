         DESCRIPTION OF THE MPS C INTERFACE SYMBOL "MPS_RES_T"
                         symbol.mps.c.mps_res_t
                              draft symbol
                           richard 1997-06-04

NAME

mps_res_t


SUMMARY

"mps_res_t" is the type of result codes returned by operations that may fail.


ASSOCIATED PROTOCOLS

All protocols.


DEFINITION

typedef int mps_res_t;


RESOURCES

mps.h


DESCRIPTION

A result code indicates the success or failure of an operation, along with the 
reason for failure.  Like UNIX error codes, the meaning of the code depends on 
the call that returned it.  Refer to the documentation of the function for the 
exact meaning.  This documentation describes the broad categories with mnemonic 
names for various sorts of problems.

  MPS_RES_OK: The operation succeeded.  Out and in/out parameters [refer to
              conventions?] will only be updated if OK is returned, otherwise
              they will be left untouched.  MPS_RES_OK is zero.

  MPS_RES_FAIL: Something went wrong that does not fall into any of the other
                categories.  The exact meaning depends on the call.  See the
                documentation of the function.

  MPS_RES_RESOURCE: A needed resource could not be obtained.  Which resource
                    depends on the call.  See also MPS_RES_MEMORY, which is a 
special
                    case of this.

  MPS_RES_MEMORY: Needed memory (committed memory, not address space) could
                  not be obtained.

  MPS_RES_LIMIT: An internal limitation was reached.  For example, the
                 maximum number of something was reached.

  MPS_RES_UNIMPL: The operation, or some vital part of it, is unimplemented.
                  This might be returned by functions that are no longer
                  supported, or by operations that are included for future
                  expansion, but not yet supported.

  MPS_RES_IO: An I/O error occurred.  Exactly what depends on the function.

  MPS_RES_COMMIT_LIMIT: The arena's commit limit would have been exceeded as a 
result of (explicit or implicit) allocation.  See protocol.arena.commit.

  MPS_RES_PARAM: A parameter of the operation was invalid.

Any function that might fail will return a result code.  Any other results of 
the function are be passed back in "return" parameters.  See 
doc.mps.ref-man.if-conv for more information.


EXAMPLE

  mps_addr_t p;
  mps_res_t res;

  res = mps_alloc(&p, pool, sizeof(struct spong));
  if(res != MPS_RES_OK) {
    handle_memory_error(res);
    abort();
  }

For more examples, see doc.mps.ref-man.if-conv.


SEE ALSO

doc.mps.ref-man.if-conv


NOTES


INTERNAL NOTES

This documentation is almost exactly the same as design.mps.type(0).res.


