         MPS C INTERFACE SYMBOL "MPS_ROOT_CREATE_TABLE_MASKED"
               symbol.mps.c.mps_root_create_table_masked
                              draft symbol
                            pekka 1997-09-24

NAME

mps_root_create_table_masked


SUMMARY

"mps_root_create_table_masked" creates a root that is a vector of tagged values.


ASSOCIATED PROTOCOLS

Root.


SYNTAX

mps_res_t mps_root_create_table_masked(mps_root_t *root_o,
                                       mps_arena_t arena,
                                       mps_rank_t rank,
                                       mps_rm_t rm,
                                       mps_addr_t *base, size_t size,
                                       mps_word_t mask);


ARGUMENTS

root_o    a pointer to a variable for storing the new root structure in
arena     the arena
rank      the rank of the references in this root
rm        the root mode
base      a pointer to the vector of references that is being registered
size      the number of references in the vector being registered
mask      any element that has any of the bits in mask set is ignored


RETURNED VALUES

If the return value is "MPS_RES_OK", the new root in "*root_o".


RESOURCES

mps.h


DESCRIPTION

"mps_root_create_table_masked" creates a root that is a table of tagged 
values.  The mask parameter indicates which bits of a pointer are tag bits.  
References are assumed to have a tag of zero, values with other tags are 
ignored.

If the rank of the root is not "MPS_RANK_AMBIG", the contents of the root have 
to be valid whenever a GC happens, i.e., they have to be references to actual 
objects or "NULL".  If you're using asynchronous GC, this could be right after 
the root is registered, so the root has to be valid when it is registered.  
It's OK for a root to have entries which point to memory not managed by the MPS 
-- they will simply be ignored.


EXAMPLE

#define tagMASK 0x0003

static mps_root_t mmRoot;

Object *Objects[rootCOUNT];

int main(void)
{
  mps_res_t res;

  /* ... */
  res = mps_root_create_table_masked (&mmRoot, arena, MPS_RANK_EXACT, 
(mps_rm_t)0,
                                      (mps_addr_t)&Objects, rootCOUNT,
                                      (mps_word_t)tagMASK);
  if(res != MPS_RES_OK) exit(1);
  /* ... */
}


ERROR HANDLING

"mps_root_create_table_masked" returns "MPS_RES_MEMORY" when it fails to 
allocate memory for the internal root structure; you need to deallocate or 
reclaim something to make enough space, or expand the arena.


SEE ALSO

mps_root_create_table, MPS_RM_PROT, MPS_RM_PROT_INNER, MPS_RM_CONST


NOTES



INTERNAL NOTES


