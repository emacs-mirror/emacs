                  MPS C INTERFACE SYMBOL MPS_CLASS_MV2
                       symbol.mps.c.mps_class_mv2
                              draft symbol
                             ptw 1998-07-09

NAME

mps_class_mv2

SUMMARY

mps_class_mv2 is a function that returns the MV2 pool class object.

ASSOCIATED PROTOCOLS

Allocation point.

SYNTAX

mps_class_t mps_class_mv2(void);

TYPE

C function

ARGUMENTS

None.

RETURNED VALUES

The MV2 pool class object.

RESOURCES

mpscmv2.h

DESCRIPTION

The function mps_class_mv2 returns the MV2 pool class object, which can be used 
to create an MV2 pool instance by passing the class object as the mps_class_t 
(third) argument to mps_pool_create.

The MV2 pool class manually manages variable-sized, unformatted objects.  The 
MV2 pool uses an allocation policy termed "temporal fit".  Temporal fit 
attempts to place consecutive allocations next to each other.  It relies on 
delaying reuse as long as possible to permit freed blocks to coalesce, thus 
maximizing the number of consecutive allocations that can be co-located.  
Temporal fit permits a very fast allocator and a deallocator competitive in 
speed with all other known policies.

Temporal fit is intended to take advantage of knowledge of object lifetimes, 
either a priori knowledge or knowledge acquired by profiling.  The best 
performance of the MV2 pool will be achieved by allocating objects with similar 
expected deathtimes together.

A simple policy can be implemented to take advantage of MV2:  Object size is 
typically well-correlated with object life-expectancy, and birthtime plus 
lifetime gives deathtime, so allocating objects of similar size sequentially 
from the same pool instance should result in objects allocated close to each 
other dying at about the same time.

An application that has several classes of objects of widely differing life 
expectancy will best be served by creating a different MV2 pool instance for 
each life-expectancy class.  A more sophisticated policy can use either the 
programmer's knowledge of the expected lifetime of an object or any 
characteristic of objects that correlates with lifetime to choose an 
appropriate pool instance to allocate in.

Allocating objects with unknown or very different deathtimes together will 
pessimize the space performance of MV2.

EXAMPLE

if(mps_pool_create(&pool, arena, mps_class_mv2(), 8, 32, 256, 70, 20)
   != MPS_RES_OK) {
  printf("Error creating pool!"); exit(2);
}

ERROR HANDLING

mps_class_mv2 cannot result in an error.

SEE ALSO

mps_pool_create

NOTES

Creation

The MV2 pool class has five creation parameters:

mps_res_t mps_pool_create(mps_pool_t * pool, mps_arena_t arena,
                          mps_class_t mv2_class,
                          size_t minimum_size,
                          size_t mean_size,
                          size_t maximum_size,
                          mps_count_t reserve_depth
                          mps_count_t fragmentation_limit);


Sizes

minimum_size, mean_size, and maximum_size are the minimum, mean, and maximum 
(typical) size in bytes of objects expected to be allocated in the pool.  
Objects smaller than minimum size may be allocated, but the pool is not 
guaranteed to manage them space-efficiently.  Objects larger than maximum_size 
may be allocated, but the pool is not guaranteed to manage them 
space-efficiently.  Furthermore, partial freeing is not supported for objects 
larger than maximum size; doing so will result in the storage of the object 
never being reused.  Mean_size need not be an accurate mean, although the pool 
will manage mean_size objects more efficiently.


Reserve Depth

reserve_depth is the expected hysteresis of the object population.  When pool 
objects are freed, the pool will retain sufficient storage to allocate 
reserve_depth objects of mean_size for near term allocations (rather than 
immediately making that storage available to other pools).

If a pool has a stable object population, one which only grows over the 
lifetime of the pool, or one which grows steadily and then shrinks steadily, 
use a reserve_depth of 0.

It is always safe to use a reserve depth of 0, but if the object population 
typically fluctuates in a range (e.g., the client program may repeatedly create 
and destroy a subset of objects in a loop), it is more efficient for the pool 
to retain enough storage to satisfy that fluctuation.  For example, if a pool 
has an object population that typically fluctuates between 8,000 and 10,000, 
use a reserve_depth of 2,000.

The reserve will not normally be available to other pools for allocation, even 
when it is not used by the pool.  If this is undesirable, a reserve depth of 0 
may be used for a pool whose object population does vary, at a slight cost in 
efficiency.  The reserve does not guarantee any particular amount of allocation.


Fragmentation Limit

fragmentation_limit is a percentage in (0, 100] that can be used to set an 
upper limit on the space overhead of MV2 in case object deathtimes and 
allocations do not correlate well.

If the free space managed by the pool as a ratio of all the space managed by 
the pool exceeds the specified percentage, the pool will fall back to a first 
fit allocation policy, exploiting space more efficiently at a cost in time 
efficiency.  
A fragmentation_limit of 0 would cause the pool to operate as a first-fit pool, 
at a significant cost in time-efficiency, therefore is not permitted.

A fragmentation_limit of 100 will cause the pool to use temporal fit (unless 
resources are exhausted).  If the objects allocated in the pool have similar 
lifetime expectancies, this mode will have the best time- and 
space-efficiency.  If the objects have widely varying lifetime expectancies, 
this mode will be time-efficient, but may be space-inefficient.  An 
intermediate setting can be used to limit the space-inefficiency of temporal 
fit due to varying object life expectancies.

Allocation

The MV2 pool class only supports allocation through allocation points.  See 
mps_ap_create.

Deallocation

The MV2 pool class supports explicit freeing.  See mps_pool_free.

INTERNAL NOTES

Need a life-expectancy parameter!  How else will different instances choose 
their Loci?

Need an alignment parameter.  Perhaps this is embedded in a format parameter 
(when all pools have at least a null format).

It is conceivable that a client would want to mix manual and automatic pools 
with the manual pool being able to be a root for the automatic.  To do so, MV2 
would need to support formatted objects and scanning.  This may be added 
someday.

Eventually the MM product will include profiling tools that will help determine 
object characteristics that correlate with object lifetime and suggest how to 
configure the appropriate number of MV2 pool instances and what characteritics 
to dispatch on when choosing which instance to allocate from.

[From mail.ptw.1998-08-19.02-33(0)]

Remember Wilson's statement that the goal of a memory manager is to exploit the 
regularities in allocation patterns?  My intent in the interface parameters is 
to accept measurable regularities in object populations, then the 
implementation can exploit them.

Perhaps the pool should accept some description of the mean and deviation of 
the object sizes, object population, and object lifetimes.  Is that what you 
are getting at?  [Reserve_depth is in some sense a deviation.]


