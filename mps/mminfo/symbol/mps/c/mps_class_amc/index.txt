                     MPS C INTERFACE: MPS_CLASS_AMC
                       symbol.mps.c.mps_class_amc
                           incomplete symbol
                           gavinm 1998-10-21

NAME

mps_class_amc


SUMMARY

Returns the pool class object (of type mps_class_t) for the Automatic Mostly 
Copying pool class.


ASSOCIATED PROTOCOLS

Pool Creation


SYNTAX

mps_class_t mps_class_amc(void)


ARGUMENTS

No arguments.


RETURNED VALUES

As summary; returns a pool class object.


RESOURCES

This symbol is declared in the header file mpscamc.h [impl.h.mpscamc].  That 
header file must be included before making any reference to this symbol.


DESCRIPTION

This function returns an object of type mps_class_t which represents the 
Automatic Mostly Copying pool class.

This pool class requires an extra argument when used in mps_pool_create:

res = mps_pool_create(&pool, arena, mps_class_amc(), format);

The extra argument, format, should be of type mps_fmt_t and specifies the 
format of the objects allocated in the pool.

An AMC pool is both scannable and collectable.  Objects may contain exact 
references to other objects that will preserve such other objects.  Objects may 
be reclaimed if they are not reachable from a root.  Objects may move during 
collection, unless reachable via a (direct) ambiguous reference.  Objects in an 
AMC pool may be registered for finalization.  Exact (that is, non-ambiguous) 
references into an object in an AMC pool must be to the start of the object.

The AMC pool class exploits assumptions about object lifetimes and 
inter-connection variously referred to as "the generational hypothesis".  In 
particular, the following tendencies will be efficiently exploited by such a 
pool:
  - Most objects die young;
  - Objects that don't die young will live a long time;
  - Most references are backwards in time.

mps_ap_frame_push and mps_ap_frame_pop may be used on an allocation point in an 
AMC pool.  They do not declare the affected objects to be definitely dead 
(compare with the SNC pool class), but have an undefined effect on the 
collection strategy.  

If an allocation point is created in an AMC pool, then the call to 
mps_ap_create will take no additional parameters.


EXAMPLE

NYA


ERROR HANDLING

Cannot fail.


SEE ALSO

symbol.mps.c.mps_ap_frame_pop(0)
symbol.mps.c.mps_ap_frame_push(0) 
symbol.mps.c.mps_ap_create


NOTES


INTERNAL NOTES

Pushing and popping AP frames are currently NOOPs in AMC, provided for 
safety/compatability reasons.

This pool class is intended to be used for Dylan's main heap of objects.


