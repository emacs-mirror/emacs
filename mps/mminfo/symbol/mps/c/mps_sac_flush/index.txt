                MPS C INTERFACE: FUNCTION MPS_SAC_FLUSH
                       symbol.mps.c.mps_sac_flush
                              draft symbol
                            pekka 1999-03-04

NAME

mps_sac_flush


SUMMARY

This function flushes the segregated allocation cache given.


ASSOCIATED PROTOCOLS

Allocation cache


TYPE

void mps_sac_flush(mps_sac_t sac);


ARGUMENTS

sac                      the segregated allocation cache


RETURNED VALUES

None.


RESOURCES

mps.h


DESCRIPTION

This function flushes the segregated allocation cache given, returning all 
memory held in it to the associated pool.

The client is responsible for synchronising the access to the cache, but the 
MPS will properly synchronize with any other threads that might be accessing 
the same pool.


EXAMPLE

  mps_sac_t sac_small, sac_large;

  res = mps_sac_create(&sac_small, pool, 3, small_classes);
  if (res != MPS_RES_OK) {
    printf("Failed to create the small allocation cache!"); exit(1);
  }
  res = mps_sac_create(&sac_large, pool, 3, large_classes);
  if (res != MPS_RES_OK) {
    printf("Failed to create the large allocation cache!"); exit(1);
  }
  /* Use sac_small. */
  mps_sac_flush(sac_small);
  /* Use sac_large. */
  mps_sac_flush(sac_large);
  /* Use sac_small. */


SEE ALSO

symbol.mps.c.mps_sac_t


NOTES

This is something that you'd typically do when you know you won't be using the 
cache for a while, but want to hold on to the cache itself.  Destroying a cache 
has the effect of flushing it, naturally.

Flushing the cache might well cause the pool to return some memory to the 
arena, but that's upto the pool's usual policy.

Note that the MPS might also decide to take memory from the cache without the 
client requesting a flush.


INTERNAL NOTES:

In the initial implementation, the MPS can't take memory from the cache, 
because the synchronization mechanism isn't there yet.

