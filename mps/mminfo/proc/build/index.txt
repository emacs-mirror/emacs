                              HOW TO BUILD
                               proc.build
                               draft proc
                             dsm 1997-06-17


INTRODUCTION

.scope: This document describes how to build the MPS on a range of platforms 
(UNIX and PC).

.readership: This document is intended for any MPS developer.

.req: In order to build the system you will need:
  .req.platform: an appropriate platform.
  .req.platform.unix: On UNIX it can be quite easy to have your PATH and other 
environment variables incorrectly set.  Bother the sysadmins about this or copy 
someone's init files.  .req.platform.unix.os.so: On Solaris (os.so), it is 
vital to ensure you have the right C compiler and tools.  You need 
"/usr/ccs/bin" on your path for the "ar" tool.  You also need to make sure that 
the "cc" command is in the SunPro C compiler (and not the BSD Compatibility 
Package C compiler).  The right compiler is usually found in /opt/SUNWspro/bin, 
the wrong compiler is found in /usr/ucb.  You shouldn't have /usr/ucb on your 
path anyway, it's evil.  See [a document I haven't written -- drj 1998-06-17] 
for further details on Solaris / SunPro C  (Presumably SunOS 4 would have all 
these problems as well if we used the SunPro C compiler on that, but we don't.)
  .req.maker: A make program:
    .req.maker.unix: GNUmake (version 3.71 or compatible) in UNIX-like 
environments;
       .req.maker.unix.linux: GNUmake will probably be called just "make" in 
Linux environments.
    .req.maker.pc: Microsoft nmake. "Microsoft (R) Program Maintenance 
Utility   Version 1.50" or compatible (this should come with builder.mv) in 
PC-like environments.
  .req.hope: HOPE, Harlequin's source code control system.
  .req.source: The sources.
Contact your sysadmins on obtaining all but the last of these (the sources 
themselves are obtained during this procedure, using HOPE).


PROCEDURE

.source.acquire: The sources are managed in HOPE.  They are in a single HOPE 
compound called MMsrc.  Issuing the command:
  hope co -compound MMsrc -branch . -missing-dir create
will result in a directory called src being created and the sources from the 
trunk branch being checked out into it.  Use a different branch in the hope 
command if you want the sources from a branch other than the trunk.

.cd: You should cd into src so that it becomes your current directory, using 
the command:
  cd src

.check.sc.path: If you are building on Unix with builder.sc, check that "which 
cc" gives a path that reassures you that it is a SunPro compiler.  
"/usr/ucb/cc" is _wrong_; it should be something like "/opt/SUNWspro/bin/cc".  
To correct this, modify your Unix shell's PATH environment variable.  See 
.req.platform.unix.

.check.sc.host: If you are building on Unix with builder.sc, check that the 
host architecture (i.e., the machine you are building on) is the intended 
target architecture.  Do _not_ use host arch.s8 to cross-compile for target 
arch.s9.  (For example, don't use trillian to build platform.sos9sc.)  This is 
because the SunPro compiler sets default options according to the host 
architecture, and we rely on these defaults.  It is believed that this can 
affect the optimizations chosen: the code will still be binary compatible, but 
will not be so well optimized.  [richardk 1998-06-17]

.make: To make things you should issue the command:
  .make.command.unix: (UNIX) gnumake -r -f <platform>.gmk <things>
  .make.command.linux: (UNIX) make -r -f <platform>.gmk <things>
  .make.command.pc: (PC) nmake /f <platform>.nmk <things>
where <platform> is the platform code of the platform you are using (e.g., 
sus8gc). 
This will make <things>; for sensible values of <things>. see .targets.  If 
<things> is omitted from the command, it will default to 'all'.

.targets: Two useful targets are 'clean' and 'all'.  Clean will destroy any 
products and revert back to a state where nothing has been made.  All will make 
a useful collection of products; it doesn't actually make everything, as you 
probably wouldn't want that.  For more information on what targets are 
available see an MM build expert (or grok it from the internals of the build 
system makefiles).

.output: Everything is built in subdirectories of src.  There will be a 
directory called <platform> which contains a subdirectory for each variety.  
See design.mps.variety and variety.*.  Each subdirectory will have a number of 
object and executable files.

.variety: The commands given in .make will build the normal 
internal/development varieties.  To build a specific variety, use:
  .variety.command.unix: (UNIX) gnumake -rf <platform>.gmk 'VARIETY=<variety>' 
<things>
  .variety.command.pc: (PC) nmake /f <platform>.nmk VARIETY=<variety> <things>


