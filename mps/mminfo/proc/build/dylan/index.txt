                      HOW TO BUILD DYLAN WITH MPS
                            proc.build.dylan
                            incomplete proc
                            pekka 1998-03-04


INTRODUCTION

.intro: This document describes how to build versions of Dylan with a modified 
MPS.

.readership: MM developers, Dylan developers, ASG developers, and others 
Harlequin hackers wanting to play with it.


History

.hist.0: Written by David Jones as a quick note to Pekka in 1997-09-15 and 
edited for public consumption by Pekka 1998-03-04.
.hist.1: Updated by tony to reflect some changes with the Dylan release process 
1998-03-04
.hist.2: Updated by pekka 1998-08-20 following Tony's instructions.
.hist.2: Updated by tony 1998-11-23 to include an "advanced procedure" for 
using separate system and personal environments.


PREREQUISITES

.prereq: You need a PC running Windows NT4.0 or Windows 95, with 550 MB of disk 
space free and at least 64 MB of RAM (128 MB recommended, 32 MB might do if you 
just want to run Dylan).  You need a Windows linker that understands VC++ 5.0 
object files (VC++ 5.0 or Windows SDK Jan 1998 or newer).


PROCEDURE

.overview: MPS gets linked in with the Dylan library to make a DLL which is 
used by all Dylan apps.  To test Dylan with a new version of MPS, you must make 
a new version of this DLL. This involves the following steps:
Install Dylan, including the sources for the Dylan library (see .install)
Compile the sources for the Dylan library (see .compile)
Relink the Dylan library with a new version of mps.lib (see .relink)
It is only necessary to repeat the last of these steps for subsequent relinks 
with other versions of mps.lib.

.installation-directory: For the rest of this document, we'll assume Dylan is 
(to be) installed in c:\dylan.

.install: Install the "internal" Dylan release (which contains sources for the 
Dylan library) as follows:-

.install.where-from: The latest Dylan is in 
\\shirow\dylan\releases\<version>\candidate<n>.  You will find a set of 
executables; these are installers for all the different Dylan releases.  You 
will want int.exe, the internal release (unless you just want to use Dylan, not 
build it).

.install.dylan: Copy the executable to a local disk (it will work over the 
network, but it'll be slower) and run it.  You'll be prompted for a password.  
Any early message suggesting that you reboot Windows probably means that you 
have run out of disk space.  You'll need at least 130Mb spare in your 
"temporary" drive (as described by your TMP or TEMP environment variables) and 
an additional 410-450MB in your selected installation directory.

.install.builds: To get the other stuff for Dylan developers, check out HOPE 
compound D-admin-builds into c:\dylan\admin\builds.  

.compile: The compiler must be invoked with some appropriate environment 
variables set.  This is necessary to ensure that the compiler uses the 
appropriate Dylan registries and directories.  It's also necessary to set an 
environment variable to turn off Dylan version checking to make it possible to 
rebuild low-level libraries and use them with pre-build client libraries.  This 
is essential if you just want to recompile the dylan library and use the new 
version with an existing release.  This can be done as follows:

.compile.startup: To invoke the compiler start a DOS shell and type the 
following:
cd c:\dylan\admin\builds    (change to appropriate directory)
set-build-variables -p c:\dylan -r \dylan -sd c:  (set registry variables etc) 
set HARLEQUIN_DYLAN_SYSTEM_DEVELOPER=yes  (turn off Dylan version checking)
dylan-compile.exe     (invoke the compiler)

.compile.dylan: To compile the Dylan library, start the Dylan compiler (see 
.compile.startup) and type the following at the prompt:
   compile-library dylan
Don't be concerned if the compiler reports a large number of warnings 
(including some serious warnings).

.relink: To relink Dylan with a new version of MPS, you must first install the 
new version of mmdw.lib, by copying it to c:\dylan\lib.  Dylan library names 
map to the MM varieties as follows:
 mmdw.lib             - variety he
 symbolic-mmdw.lib    - variety hi
 debug-mmdw.lib       - variety ci

.relink.dylan: To link a new dll, run the Dylan compiler (see .compile.startup) 
and type the following at the prompt:
   link -force -dll -microsoft dylan
This will create a new DLL (probably called something like d1dylan.dll) in the 
directory c:\dylan\build\dylan and will attempt to copy it into c:\dylan\build 
so that the Dylan compiler and IDE can use it.  However, this copying operation 
will probably fail as the destination file will be locked because it is being 
used by the compiler itself.  If so, you must first exit from the compiler by 
typing exit at the prompt - and then copy the DLL explicitly.  E.g., use the 
following DOS command:
   copy c:\dylan\build\d1dylan.dll c:\dylan\bin

.relink.distribute: After relinking, the installed Dylan tools should start to 
use the new version of the Dylan DLL - but any shrink-wrapped Dylan 
applications will continue to use their own private copy, as the Dylan release 
process copies all used Dylan DLLs into the release directory from 
c:\dylan\redistributable.  To ensure that any future Dylan releases you make 
use your new Dylan DLL, you could consider updating the redistributable copy 
with the following DOS command:
   copy c:\dylan\build\d1dylan.dll c:\dylan\redistributable
You will have to copy the DLL individually into any release directories that 
were created before the relink.


.test: The new version of the Dylan DLL will be tested if you start the Dylan 
development environment.  E.g., from the Windows start menu \ programs \ 
harlequin dylan \ dylan.  Alternatively, run the Dylan compiler again.


ADVANCED PROCEDURE

.advanced.personal-root: The Dylan compiler is designed to support 2 levels of 
access to libraries: "system" and  "personal".  "System" access is read-only in 
that system libraries cannot be recompiled.  "Personal" access is more 
rigorouly checked and does permit compilation.  The intention is that the 
personal and system environments can be stored separately from each other in 
separate directory hierarchies - each of which potentially contains its own 
source code, and compilation products (databases, object files etc.).

.advanced.registries: The compiler locates libraries by means of the "registry" 
which is normally found in <dylan-installation-dir>\sources\registry - where 
<dylan-installation-dir> is the "root" of a Dylan directory hierarchy.  The 
compiler will first look to see if the library can be found in the regsistry of 
the personal root, and will treat it as a compilable project if so.  Otherwise, 
the compiler will search for the library in the system root and will then treat 
the library as a read-only system library.

.advanced.rationale: The procedures described above all involve a single 
directory hierarchy which is being used as both the system and personal root.  
Hence all libraries have been looked up as personal libraries.  This has the 
disadvantage that each time you compile library A, it invalidates the databases 
for all libraries which depend upon library A.  This side-effect of performing 
a compilation can disrupt automatic scripts.

.advanced.strategy: It is possible to arrange for only the libraries you wish 
to compile in a single session to appear as personal libraries.  For example, 
you could arrange for the personal registry to contain exactly one entry for 
the single library you wish to compile.  All libraries upon which that library 
depends (e.g. the Dylan library) will be looked up in the read-only system 
directory.

.advanced.setup-instructions: To create a personal Dylan root in an (exemplar) 
location q:\personal-dylan, use the following steps:

1. Create a new directory for your personal root
  > md q:\personal-dylan

2. Create some subdirectories in it
  > cd q:\personal-dylan
  > md lib
  > md bin
  > md build 
  > md sources
  > md sources\registry
  > md sources\registry\x86-win32

3. copy (a subset of) the Dylan source code into the personal root
  > xcopy /s /i q:\dylan\sources\lib sources\lib

4. Copy any special binaries you have into q:\personal-dylan\bin. E.g.
   > copy <my-special-dylan.dll> q:\personal-dylan\bin\d1dylan.dll
   > copy q:\dylan\bin\dylan-compile.exe q:\personal-dylan\bin
NB, this last command copies the EXE file, because the directory of the EXE is 
always implicitly first in the path of DLL lookup.  The intention is that DLLs 
get looked up in the personal root BEFORE the system root.
NB also, that you can leave the original Dylan dll in-place in q:\dylan\bin so 
that the Dylan installation needn't be touched at all.

.advanced.per-session-instructions: To make use of a personal Dylan root, use 
the following steps:

1. Setup your environment
  > set-build-variables -p q:\personal-dylan -r \dylan -sd q:
This will set the environment variables for the compiler to recognize your 
personal and system roots.  It will also set the PATH to start with 
q:\personal-dylan\bin;q:\dylan\bin


2. Ensure the personal registry only contains the current library. E.g. 
assuming you want to compile harlequin-extensions:
  > del /q %HARLEQUIN_DYLAN_USER_REGISTRIES%\x86-win32\*.*
  > copy %HARLEQUIN_DYLAN_RELEASE_REGISTRIES%\x86-win32\harlequin-extensions
      %HARLEQUIN_DYLAN_USER_REGISTRIES%\x86-win32

3. Fire up the compiler
  > dylan-compile
      ...



