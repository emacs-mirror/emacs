                        HOW TO BUILD MM/EP-CORE
                             proc.build.sw
                            incomplete proc
                            pekka 1997-10-14


INTRODUCTION

.intro: This document describes how to build SW and associated programs.

.info: There is much information in the ScriptWorks Information db, the SWIG 
category, but not really enough.


BUILDING MM LIBRARIES FOR SW ON CERTAIN STRANGE PLATFORMS

Building for platform.w3almv and platform.w3ppmv (swmake)

.swig: To build the Alpha and PowerPC versions, you need to borrow SWIG's 
(ScriptWorks Integration Group) machines.  Peter Westlake, who operates the 
setup, has been very helpful to us.

.swig.machines: There's a keyboards multiplexed onto several PCs and Macs.  
There's a chart to tell you how to select the one you want, and what they're 
called.

.swig.procedures: SWIG has documented their procedures in ScriptWorks 
Information
"SWIG\PC Build System\Compiling by hand on a build server".

.pc.setup: Start a command shell.  First, find the AUTOBLD directory on the 
machine, then run the script \AUTOBLD\TOOLMAPS\<machine>, where <machine> is 
the machine name, e.g. ogre.  This will set up the compilers and stuff.

.pc.directory: Change directory to where your sources are.

.pc.versions: Then, on the Alpha and x86 platforms, you need to specify the 
compiler versions (on PowerPC, there's no choice at the moment).  This
is done by 
  \AUTOBLD\WHATCOM HQBUILD\DATA\CV_<platform>.TXT
where <platform> is the SW platform code (either ALPHA or X86).

.pc.build: Now, you're ready to build.  Do
  HQBUILD\TOOLS\HQBUILD <platform>
where <platform> is the MM platform code.  If you can specify more arguments, 
and they will be passed to NMAKE.  Typically, you might want to say something 
like:
  HQBUILD\TOOLS\HQBUILD w3almv "VARIETY=he" mmsw.lib


BUILDING SW

Building for platform.w3almv and platform.w3ppmv (swmake)

.pc.sw: As above (.swig.machines), you need to use the SWIG machines.  See 
.swig.procedures for instructions.  Basically, you just need to use the WHATCOM 
from the source tree.


Building on Unix platforms (swmake)

.unix.dir: You need about 350 MB of disk space, preferably on a local disk.  
Create a directory called 'motif' and change to it.

.unix.hope: Check all the sources out of Hope.  This will take about 20-60 min.
  co -c SWprod_motif -rec

.unix.hope.orb: At some point Unix builds will require OMNIOrb to be present; 
see .pc.hope.orb.  You then need to set something like:
  export CV_OMNI_2_8_0=~/programming/SW/omniORB_2.8.0

.unix.mm-lib: The HOPE compounds included the released version of MM/EP-core, 
so at this point, you might want to replace mmunix/<platform>/<variety>/mmsw.a 
(for SW_B1 subsitute "mm" for "mmunix") and mm/src/*.* with the library and 
glue code that you want.

.unix.build.jam: For jam installation, check out HQNjam_2_2_5_3! and set 
environment vars:
  export CV_PERL_5_005_02=perl5
  export CV_JAM_2_2_5_3=<jam-dir>/jam_2_2_5_3
Where perl5 is whatever your Perl 5 is, and <jam-dir> is where you checked out 
jam (typically, next to your motif directory).

.unix.build: Set BUILDROOT to your motif directory, using a pathname that is as 
short as possible.  Now build the GUI SW by issuing this command:
  tools/swmake +d
This builds the debugging version; to build the release version, change +d to 
+r.  For UltraSPARC (sos9sc/ultsparc), you need to specify -target ultsparc as 
well.  Ignore all warnings.  .unix.build.space: If it complains about no space 
left, but there's plenty where the SW tree is, it's running out on temporary 
space.  Point it somewhere else by setting TMPDIR (at least on IRIX 5).  
Probably safest to do a clean build at this point, because it's been known to 
leave broken libraries behind.

.unix.details: If you need to know how it works, look in ScriptWorks 
Information document Internal Procedures\Building Things\ScriptWorks 
Unix\Overview of Unix Build System, Makefiles, and Changes Thereto.

.unix.build.jam: To build with jam (required past SW_G):
  bt/hqmake depend
  bt/hqmake
This builds the debugging version; to build the release version, add +r.  
Ignore all warnings.  Theoretically, the first step is only needed, when you 
change the dependencies.  Adding -v makes the output (very) verbose.

.unix.sw-directory: All the configurations and stuff are stored in a 
subdirectory called 'SW'.  The build script only updates it if it's missing, so 
if the format has changed (this happens from time to time) you need to delete 
it and rebuild.

.unix.sign: Release executables need to be signed or they will refuse to run.  
Get a signtool: You can either check it out (co -c HQNsigntool -rec), next to 
your motif directory is the usual place, and build it (../motif/tools/swmake), 
or get a prebuilt one from the build servers.  Run it like this:
  ../signtool/signtool-rel.<platform> <executable>
(The solaris tool will work on ultsparc.)

.unix.build-servers: SWIG do daily Unix builds on the following machines:
  Horton,   SGI, Irix 6.4, SMP.
  Thidwick, SGI, Irix 6.3, single CPU.
  Vladimir, SGI, Irix 5.3.
  Mustang,  Solaris.
(Peter Westlake 1998-09-18).  Look for a directory on a local disk, like 
/u/ldisk2/build/19980918/trunk-std.

.unix.run: The executable is called motif-lic-HARLQN.<platform> for debug 
version and motif-lic-rel-HARLQN.<platform> for release.

.unix.plugins: If you need to use particular devices, you need plugins (in some 
builds, you'd better have at least one, or it won't work).  These go in the 
directory SW\Devices and its subdirectories.  .unix.plugins.get: If you're 
working near the end of an active branch, you can get them from the SWIG 
builds: look in the 'newplug\<device>\obj\<platform>-rel' directory (change 
"rel" to "dbg" for the debug version).  .unix.plugins.build: [Insert a 
description of how you build those.]

.unix.trapping: If you need to do trapping, you need the trapping plugin 
SW\Extensions\Trapping\[?].  If you don't have it, SW will complain when it 
starts, but that's harmless.  [Insert a description of how you build that.]


Building on Windows platforms

.pc.install: Install the correct builder, swmake won't determine the version, 
although jam will try.  .pc.install.jam: For jam installation, check out 
HQNjam_2_2_5_3! and set environment vars:
 set 
CV_PERL_5_005_02=<perl-dir>\perl\5.00502\bin\MSWin32-x86-thread\perl5.00502.exe
 set CV_JAM_2_2_5_3=<jam-dir>\jam_2_2_5_3
 set CV_MSVCNT_5_0=<VC5-dir>\vc
 set CV_SIGNTOOL_1_0=<signtool-dir>\signtool_1_0\win_32-pentium\signtool.exe
Where <perl-dir>, <jam-dir>, <signtool-dir>, and <VC5-dir> are the directories 
where those tools were installed.  And see ScriptWorks Information/SWIG/Jam 
Doughnut build system/Installing the necessary tools .

.pc.dir: For SW 4.5, you need about 180 MB of disk space on a local disk.  For 
SW 5.0, you need 220 MB  (release only) or 295 MB (debug only), plus at least 
20 MB for the ORB (see .pc.hope.orb).  Create a directory called 'pc' and 
change to it.

.pc.hope: Check all the sources out of Hope.  This will take about 20-60 min.
  co -c SWprod_pc -rec

.pc.hope.orb: For the trunk beyond SW_D, you _also_ need both the OMNIOrb IDL 
compiler (to build SW) and an OMNIOrb DLL (to run it).  For [incomplete - 
richardk 1998-10-01] instructions on how to get this and what to do with it see 
mail.richardk.1998-10-01.11-27 and mail.richardk.1998-10-01.11-27.1 and 
mail.rit.1998-12-07.12-14.  When you build SW, the DLL is automatically moved 
or copied to The Right Place where it will be available for the SW 
application.  (This might be in the same directory as the app, or on your 
DLLPATH[?] or somewhere.)  This takes an additional 50 MB; Delete the binaries 
and libraries for the platforms you don't want, that'll save you upto 30 MB.  
For more information, try asking Luke Tunmer  or Peter Westlake.  
.pc.hope.orb.new: At some point, probably beyond SW_G, you'll need 
HQNomniORB_280!.  No build steps, set variable CV_OMNI_2_8_0 as before.

.pc.mm-lib: The HOPE compounds included the released version of MM/EP-core, so 
at this point, you might want to replace mmpc/<platform>/<variety>/mmsw.lib 
(for SW_B1 subsitute "mm" for "mmpc") and mm/src/*.* with the library and glue 
code that you want.

.pc.utilities: You need a copy of certain utilities from [can't remember 
where].  Create a directory called 'ut' for them and set the environment 
variable WIN32SUT to point to it.

.pc.setup.ds: You can use Developer Studio 4.2 to build SW with swmake [I 
haven't figured out how to do this in DS 5.0 -- pekka 1998-12-17].  Create a 
workspace.  Edit the project settings as follows
  tools\swmake +d -ms
  depend all
  guina.exe
  guide.bsc
That's for the debug version; for the release version change +d to +r -n and 
guina to guin.  See DS documentation for details of operation.  Ignore all 
warnings.

.pc.build.cl: To build from the command line with swmake, switch to your 'pc' 
directory, and issue the command:
  tools\swmake +d -ms
This builds the debugging version; to build the release version, change +d to 
+r.  Ignore all warnings.  .pc.build.jam: To build with jam (required past 
SW_G):
  bt\hqmake depend
  bt\hqmake
This builds the debugging version; to build the release version, add +r.  
Ignore all warnings.  Theoretically, the first step is only needed, when you 
change the dependencies.  Adding -v makes the output (very) verbose.  If you 
want BSC browse information for Visual Studio, add +browse.

.pc.sw-directory: All the configurations and stuff are stored in a subdirectory 
called 'SW'.  The build script only updates it if it's missing, so if the 
format has changed (this happens from time to time) you need to delete it and 
rebuild.  [Soon, it'll be replaced by a config server.  pekka 1998-12-18]

.pc.plugins: If you need to use particular devices, you need the plugin for 
it.  These go in the directory SW\Devices and its subdirectories.  
.pc.plugins.get: If you're working near the end of an active branch, you can 
get a copy from the SWIG build directory '\\Kingdom\Builds\<date>\tr'.  Look in 
the directory 'newplug\<device>\oon'; you need the .i32 file or the 
subdirectory.  .pc.plugins.build: [Insert a description of how you build them.]

.pc.trapping: If you need to do trapping, you need the trapping plugin 
SW\Extensions\Trapping\trapper.i32.  If you don't have it, SW will complain 
when it starts, but that's harmless.  You can get it from the SWIG builds '
\\Kingdom\Builds\<date>\tr\trapper\oons\Trapping', or build it [how?].

.pc.signtool: Release executables need to be signed or they will refuse to 
run.  Get a signtool: You can either check it out (co -c HQNsigntool -rec or co 
-c HQNsigntool_1_0 -rec, past some point), next to your pc directory is the 
usual place, and build it (..\pc\tools\swmake or ..\pc\bt\hqmake), or get a 
prebuilt one from the build servers.  Run it like this:
  ..\signtool\signtool-rel.<platform> <executable>



