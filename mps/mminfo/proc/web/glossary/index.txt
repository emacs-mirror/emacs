PROCEDURE FOR ADDING A GLOSSARY ENTRY TO THE MEMORY MANAGEMENT REFERENCE
                           proc.web.glossary
                               draft proc
                           gavinm 1997-04-09


INTRODUCTION

.scope: This procedure applies to creating a new glossary entry, or filling in 
an empty one, for the Memory Management Reference.  It is of use when editing 
entries.

.readership: This document is intended for anyone who writes glossary entries 
for the Memory Management Reference.

.hist.0: 1997-04-09  GavinM  First written.

.hist.1: 1997-04-14  GavinM  Added .other.

.hist.2: 1997-04-17  GavinM  Responded to various comments.

.hist.3: 1997-05-05  GavinM  Added extra notes about glossary links and 
spelling checkers.  Draft.

.hist.4: 1997-05-07  GavinM  Clarified sense syntax.

.hist.5: 1997-07-09  GavinM  Added .markup.entity.

.hist.6: 1998-07-14  GavinM  Clarified bibliography references, and many other 
things.

.hist.7: 1998-07-15  GavinM  Clarified font modifiers and compound senses.

.hist.8: New diagram handling; disallowed physical markup.  pekka 1999-10-19


PROCEDURE

.database: Open the database "PROJECTS\Memman\MMREF.NS3" "MM Reference" on a 
server near you.

.view: Select the view "Glossary Reference Targets".  This shows all glossary 
entries, and also the various "duplicate" entries and the terms which may be 
linked to glossary terms.

.open: Open the document if it exists already and enter edit mode, or compose a 
new "Glossary Entry".

.term: If composing a new entry, fill in the term.  You may use spaces and 
hyphens.  Do not include the sense number.

.sense: It is not normally necessary, but your term may require several senses 
to be defined.  Fill in the sense number for this document.  The view (see 
.view) should show one document for each sense.  This is only optional if there 
is only one sense defined.

.exact-synonyms: Fill in any terms which have identical meaning as Exact 
synonyms, as a semi-colon delimited list.  These exact synonyms must not 
already appear in the view (see .view); if they do, you must include a 
bracketed sense number for each -- this is not checked in Spring but will show 
up later.  This field is optional.

.alternative-spelling: Fill in any alternative spellings as a semi-colon 
delimited list.  These might be abbreviations, or expansions.  These 
alternative spellings must not already appear in the view (see .view); if they 
do, you must include a bracketed sense number for each -- this is not checked 
in Spring, but will show up later.  This field is optional.

.compounds: Fill in any accidence variations (compounds) for the term which you 
may require to link to this entry as a semi-colon delimited list; e.g., for 
"hit" you might have "hits; hitting".  Typically this includes plurals for 
nouns, and past and present participles for verbs.  These compounds must not 
already appear in the view (see .view) -- this is not checked in Spring, but 
will show up later.  This field is optional.  When the base word has senses 
(see .sense), then the compounds will usually have senses as well (e.g. 
"caches(2)"), unless the compounds are specific to a particular sense.

.synonyms: Fill in any rough synonyms (words of similar meaning) for the term.  
Each of these should already be terms defined in the glossary -- this is not 
checking in Spring, but will show up later.  This field is optional.  In 
particular, braces should not be used (see .markup.gloss).  Senses should be 
used where appropriate (e.g. "cache(2)").  These should have the correct case 
(that is, they should not be capitalized).

.antonyms: Fill in any rough antonyms (opposites) for the term.  Each of these 
should already be terms defined in the glossary -- this is not checking in 
Spring, but will show up later.  This field is optional.  In particular, braces 
should not be used (see .markup.gloss).  Senses should be used where 
appropriate (e.g. "cache(2)").  These should have the correct case (that is, 
they should not be capitalized).

.definition: Enter a brief definition of the term.  You should refer to any 
exact synonyms (see .exact-synonyms) and alternative spellings (see 
.alternative-spelling).  This should only be a few lines long and is rarely 
more than one paragraph.  If this field is omitted, a special notice will be 
inserted requesting submissions.  This field can contain HTML and references 
(see .markup).  Use complete sentences.

.details: Enter a more detailed description of the term.  You need only use the 
main term (see .term).  This is the place for examples, discussion, and 
diagrams.  This field is optional.  This field can contain HTML and references 
(see .markup).  Use complete sentences.

.rmm: For terms which are only of partial relevance to memory management, their 
relevance should be described in this field.  If a term is wholly concerned 
with memory management, this field should be left blank.  Diagrams may appear.  
This field can contain HTML and references (see .markup).  Use complete 
sentences.

.hm: If any information is available that is not defining, but describes the 
history, origin, or development of a term or concept, then it should be 
described here.  This field can contain HTML and references (see .markup).  Use 
complete sentences.

.other-entries: Enter the terms for any other glossary entries that may 
usefully be read to understand this entry as a semi-colon delimited list; they 
should exist.  This field is optional.  This field is not checked in Spring, 
but errors will be flagged later during compilation.  In particular, braces 
should not be used (see .markup.gloss).  Senses should be used where 
appropriate (e.g. "cache(2)").  These should have the correct case (that is, 
they should not be capitalized).

.bib: Enter any bibliographic references which pertain to the concept described 
as a semi-colon delimited list.  They should exist in the same database (i.e. 
they shouldn't be entries in MM Information).  This field is optional.  This 
field is not checked in Spring, but errors will be flagged later during 
compilation.  In particular, square brackets should not be used (see 
.markup.bib).  E.g. "kr78".

.links: Any external links may be listed via their descriptions (see the view 
"Keywords/Links"), as a semi-colon delimited list.  This is a keyword field, so 
is checked.  This field is optional.  In particular, vertical bars should not 
be used (see .markup.link).

.internal: Any internal notes can be entered in the notes field.  These will 
never be displayed on the web pages.  You may quote tags or content of mail or 
other documents that contributed to the definition.

.contacts: Normally the contacts will be "mm-web-discussion", but you may enter 
any extra person.  You are likely to do this if you or the person submitting 
content is not on mm-web-discussion.  This list is mailed a text form of the 
entry when the button is pressed.  _Do_not_ add anyone external to the company.

.spell: You may wish to run the Notes spelling checker at this point 
(Tools/Spell Check).  Remember that the entry must be in American English (but 
in both American and British English where possible).

.save: Save the document.  You will be prompted for a comment.  Use this to 
summarise the changes made.

.button: If the entry has changed significantly, press this button to mail a 
text copy to all contacts.  You will be prompted for text to prepend; use this 
to summarise the changes and possibly their reason.  It is unnecessary to send 
a mail for small safe changes.  This button won't work properly in certain 
Notes client configurations; tough.  You must save the document first.  Using 
this button sets Notes' "dirty bit" on the document, so you may be asked again 
if you want to save;  you may either enter "Mail sent" as a comment or (if 
you're confident) not save.

.other: Check whether any other documents would benefit from having links to 
the newly created term.  Open a view like "All things\Categorised by first tag 
element" and search for the various possible link texts.  Enclose these in 
curly braces to link them.  Whether to link depends on the design of the 
document type concerned, but in general linking is done sparingly except in 
glossary entries, and is never done to subsequent references to the same entry 
in a section.


NOTES

[ .markup.* doesn't really belong here as it is general to all the Web 
procedures.  I may move it later.  GavinM 1997-05-05]
[ Not all of it is general, in fact.  gavinm 1998-11-24 ]

.markup: Certain fields can contain HTML markup.  There are several other 
restrictions on their format:

  .markup.p: It is unnecessary to include paragraph tags (<P>) as they are 
inferred from blank lines where appropriate.  

  .markup.escape: Blank lines, square brackets, curly braces, and vertical bars 
must be escaped by preceding them with a backslash.

  .markup.entity: HTML entities such as "&amp;", "&gt;", and "&lt;" may and 
must be used in place of "&", ">", and "<".

  .markup.bib: Bibliographic references [ref?] may be inserted by enclosing the 
tag fragment in square brackets.  This will be replaced by the title.  This is 
not checked in Spring, but is in the conversion to HTML.  These should be 
references to bib entries in the MM Reference database (note, not MM 
Information).

  .markup.gloss: References to other glossary references may be inserted by 
enclosing the word or phrase in curly braces.  
    .markup.gloss.sense: Any sense must be specified in round brackets 
immediately after the term, e.g. "cache(2)".
    .markup.gloss.whole-word: It is best to link an entire word (as 
"{closures}" instead of "{closure}s") because the alternative looks 
disconcerting in HTML.  You may need to add a compound to the target term (see 
.compounds).
    .markup.gloss.first: In general, terms should only be linked on their first 
occurrence in the entry.  Diagram captions (see .markup.diagram) are an 
exception to this; because they stand out on the page on their own, they should 
be considered as a separate entry in this respect.
    .markup.gloss.check: The validity of links to other glossary terms is not 
checked in Spring, but is checked when the pages are converted to HTML. 

  .markup.link: Any links may be inserted by enclosing their title in vertical 
bars.  The titles must be exactly right.  This is not checked in Spring, but is 
in the conversion to HTML.  See the view "Keywords/Links" for a list of links.

  .markup.diagram: A diagram may be inserted as:
    <DIAGRAM SRC="filename">This is a caption</DIAGRAM>
  The file should be added as image.filename [see non-existent procedure], and 
inserted as diagrams/filename.gif.  The construct is converted to an HTML IMG 
adding explicit WIDTH and HEIGHT attributes automatically.  The text in the 
section is used both as caption and ALT-text, so it should not contain any HTML 
formatting.

  .markup.list: Lists can be marked up in the normal HTML way, using 
"<UL><LI>one<LI>two</UL>" for an unordered list,  "<OL><LI>one<LI>two</OL>" for 
an ordered list, and "<DL><DT>Term<DD><P>Definition</P></DL>" for a definition 
list.  Whitespace is irrelevant, but don't leave blank lines (see .markup.p).  
Don't try to format lists as ASCII text.

  .markup.font: HTML markup can include the following font selections:
    EM -- Used for emphasizing a word or words (use sparingly), e.g. "The 
<EM>first</EM> element is special";
    CODE -- Used for source code terms (e.g. "<CODE>malloc</CODE>");
    PRE -- Used for displayed fragments of source code (take careful note of 
.markup.escape and .markup.entity; see glossary.fence.post.error  for an 
example).


