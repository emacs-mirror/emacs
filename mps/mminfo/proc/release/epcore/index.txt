                    RELEASE PROCEDURE FOR MM/EP-CORE
                          proc.release.epcore
                               draft proc
                           gavinm 1996-06-25


.release.create: Create a release in MM Evolution, assign appropriate tasks to 
it.  If this is a trunk release, also create a coordinated MPS release 
(release.mps.epcore.<release>).  Set the Working Source field to the HOPE 
compound and branch on which development for this release takes place, e.g., 
MMsrc!(trunk) for the initial release of a version.

.task.create.client: The release needs to be assigned a SW task, as we need a 
SW bug number to do the checkins.

.branch.sw: Determine which branch of SW you are doing the release for.  We'll 
call it SWfoo below.  Coordinate with EP-Core on changes to SW compounds.

.dev: Do any development required for the release in MMsrc(<appropriate 
branch>) and in SWmm_common(MMdevel_<release>) and SWbuild(MMdevel_<release>).  
[In the next release, start using MMdevel_epcore_<release>.]

.release.notes: Write release notes and insert them in the release record 
(.release.create).  Most of this work should be done during development.

.build.request: In coordination with MM QA, find a reasonably up-to-date, 
stable build of the SWfoo branch.  Ask SWIG (mailing list ep-swig) about when 
it builds cleanly and the core group (mm-epcore-tech) and SW QA (sw-qa) about 
which builds are stable enough to do the tests on.  Try a test build.  This can 
take days, so start early.

.pick.mps: Determine the set of MPS header files to be copied into the glue.

.freeze: Development of parts which are intended to form part of the release 
should be completed or abandoned.  .freeze.complete: Completing a part involves 
unit testing, source check-in, and approval.  .freeze.abandon: Abandoning a 
part involves rollback to a previous version or removing a feature from the 
interface.

.branch: If this is a trunk release (not a prerelease), then we create a new 
branch for this release.  .freeze.stop: The check-in of new development on the 
trunk of MMsrc is not allowed until after .hope.branch.mm (i.e., follow 
proc.dev.branch only up to, but not including, proc.dev.branch.merge).  This is 
enforced by planning.  .hope.branch.mm: Branch the entire MMsrc tree, thus:
   branch -compound MMsrc -branch . -recursive -label MM_epcore_<release>

.version.claim: Claim, edit, and checkin the version.c file which contains a 
string used to identify the release (see design.mps.version-library).

  hope co -claim soft -reason "record <release>" -compound MMsrc -branch 
MM_epcore_<release> version.c

  <edit version.c>

  hope ci -compound MMsrc -branch MM_epcore_<release> -use-claim-reason 
version.c

.hope.checkpoint.mm: Checkpoint the MM_epcore_<release> branch of MMsrc, thus:

  checkpoint -compound MMsrc -branch MM_epcore_<release> -label 
MM_epcore_<release>_<n>

Where n is an ordinal, starting at 0.

.version.reclaim: Claim, edit, and checkin the version.c file back the way it 
was, so that future releases don't accidentally get the same version string 
(see design.mps.version-library).

  hope co -claim soft -reason "remove release name" -compound MMsrc -branch 
MM_epcore_<release> version.c

  <edit version.c>

  hope ci -compound MMsrc -branch MM_epcore_<release> -use-claim-reason 
version.c

.hope.checkin.header: Check the required MPS headers (see .pick.mps) into 
SWmm_common(MMdevel_<release>), or SWmm_common_src(MMdevel_<release>) before SW 
5.0, with the SW bug number (see .task.create.client).

.release.record: Record release information in the release records 
(.release.create): release dates, checkpoint and branch names, test results (or 
at least pointers thereto), and the set of varieties and platforms released.  
For each variety, record the intended use in SW builds.  For each platform, 
record the version of the build tools used.

.hope.branch.sw.lib: Branch SWmm_unix, SWmm_pc, and SWmm_mac for 
MMdevel_<release>.

.plats: On each SW platform (see req.epcore.dc.plat.*):
  .plats.build: Build SW;
  .plats.delete: Delete the mm directory;
  .plats.co.sw: Check out SWmm_common(MMdevel_<release>_<n>) as mm/, check for 
any changes between MMdevel_<release>.0 and the build, and merge if necessary;
  .plats.co.mps: Check out the checkpointed branch of MMsrc elsewhere;
  .plats.build.mps: Build the MPS (ref: proc.build and proc.build.sw), all 
varieties being released; The result of this will be linkable binary object 
files or libraries, depending on platform.
  .plats.copy.mps: Copy the MPS libraries into mm/<platform>/<variety> (for SW 
4.2), or  mmunix/<platform>/<variety> and mmpc/<platform>/<variety> and 
mmmac/<platform>/<variety>;
  .plats.copy.header: Copy the required MPS header files (see .pick.mps) into 
mm/src;
  .plats.build.sw: Build each (release and debug) variety of ScriptWorks -- go 
to .test.fix on failure;
  .plats.sw: Test each variety of ScriptWorks (see .test.*) -- go to .test.fix 
on failure;
  .plats.ci: Check the MPS libraries into SWmm_<OS>(MMdevel_<release>) with the 
SW bug number, or add them if they're new (remember to specify the -binary 
switch);
  .plats.release: Update the release document with any platform information 
necessary to reconstruct the build.

.test: Test ScriptWorks against colnurse.ps and musician.ps.
  .test.crash: The test fails if ScriptWorks crashes or asserts.
  .test.visual: The resulting pictures are visually inspected for sanity.  This 
is not a detailed or expert check.  The test fails if there are obvious defects.

.test.fix: Defects revealed by testing are fixed.

.defect.patch: If the defects are underlying design flaws which can be patched, 
they are patched for the release on the branch and an issue is raised 
suggesting the necessary redesign.  Go to .hope.checkpoint.mm.

.defect.serious: If the defects are serious and cannot be patched the release 
must be delayed, or the defective part removed from the release or rolled back 
to a previous version, depending on the decision of the Product Manager.

.notify.releasing: Notify ep-eng that you're about to release a new version and 
things might go inconsistent for a while.

.hope.merge.sw: Merge SWmm_common(MMdevel_<release>),  
SWbuild(MMdevel_<release>), and SWmm_<platform>(MMdevel_<release>) into the 
SWfoo branch, see proc.dev.branch for instructions.  Remember to specify the 
-binary switch when adding libraries.  EP-Core will usually do this so they can 
control and adapt the glue code.

.hope.checkpoint.sw: Checkpoint the SWfoo branch of all the relevant SW 
compounds, thus:

  checkpoint -reuse-label -label MM_epcore_<release>_<n> -branch SWfoo 
-recursive -compound SWmm_common -and -compound SWmm_<platform> -and -compound 
SWbuild

.notify.released: Notify ep-eng, mm-epcore and sw-qa by e-mail that the release 
has been completed.  Include the release notes (.release.notes).  Also notify 
the two product managers. 

.task.update.client: Update the SW task.

.test.overnight: See proc.release.test.overnight.  [At some point, change this 
to a general instruction to see proc.release.]


