                      RELEASE PROCEDURE FOR DYLAN
                           proc.release.dylan
                               draft proc
                           richard 1998-07-28


INTRODUCTION

.intro: This is the release procedure for making a release of the MM Dylan 
product.  A release is made in two steps, first to QA, then possibly to Dylan.  
This document describes the procedure for both.

.readership: Readership: Any MM group member.


HISTORY

.hist.3: 1998-11-27: First history tag at revision 3 of this document.

.hist.4: 1998-11-27: Edited in the light of feedback from drj and gavinm as a 
result of using it to make a release (which were probably release.dylan.jackdaw 
and release.dylan.jackdaw.1).

.hist.5: 1998-11-30: small changes to reflect new distribution sever, bohm.

.hist.6: 1999-07-26: small changes to reflect new distribution sever, zaphod.


PRECONDITION

.pre-condition: Before a release can be made that are a number of things that 
should have already been done.  Describing how to do these is outside the scope 
of this document, but what they are is described here:

.pre-condition.darwin: There should be a DARWIN release document corresponding 
to the release that you intend to make.  The MM-Dylan product manager is the 
person responsible for creating and maintaining the DARWIN release documents.

.pre-condition.no-devo: Development should be complete and frozen.

.pre-condition.quality: All appropriate quality measures (testing and review) 
should have been applied to ensure that the release is of a sufficient quality.


ASSUMPTIONS

.assume.pc: This document assumes you are making the release on a Windows Intel 
platform with currently installed versions of whatever development software is 
necessary to build the product.  It also assumes that the person executing the 
procedure knows how to do simple PC tasks like copying files and running 
commands.

.assume.hqn: This document assumes you are familiar with the standard harlequin 
tools: HOPE, DARWIN.


PROCEDURE

.relnotes: Release notes are written in the release document in MM Evolution 
(see guide.release for a description of release documents).  In practice, most 
of these notes will have been written as result of changes made for the 
release, but there are inevitably a few raggedy edges that need cleaning up and 
writing in the release notes.  A copy of the release notes will be emailed 
later (along with an announcement of the release), see .announce below.

.hope.branch: For a release which has the trunk as the working source (usually 
a release at the beginning of a "version" (a series of releases) the trunk will 
need to be branched (for other releases, this branch ought have already been 
created).  The MM source tree is branched using an incantation along the lines 
of:

  hope branch -compound MMsrc -branch . -label MM_dylan_<internal-release-name>

.hope.branch.check: The base of the branch is checkpointed.  This is so that 
the base of the branch can be uniformly and easily referred to in HOPE commands.

  hope checkpoint -compound MMsrc -branch MM_dylan_<internal-release-name> 
-label MM_dylan_<internal-release-name>_base

.relnotes.debug.fn-list: An updated list of functions for the Dylan debugger 
should be generated if necessary.  This list should be inserted into the 
release notes.  There is a procedure for producing this list, see 
proc.release.dylan.debug.fn-list for details.

.hope.co: Check out the source tree to a clean directory.

  hope checkout -compound MMsrc -branch MM_dylan_<internal-release-name> 
-missing-dir create

.hope.version.claim: The version.c file is claimed and the MPS_RELEASE macro 
(see impl.c.version.release) edited so that the version string corresponds to 
the name of the release being made (see 
design.mps.version-library.impl.version).  This unit is checked back into HOPE.

  hope checkout -claim soft -compound MMsrc -branch MM_dylan_
<internal-release-name> -reason "editing MPS_RELEASE to reflect new release" 
version.c

  <edit version.c>

  hope checkin -use-claim-reason -compound MMsrc -branch MM_dylan_
<internal-release-name> version.c

.hope.check: A checkpoint on the branch is made:

  hope checkpoint -compound MMsrc -branch MM_dylan_<internal-release-name> 
-label MM_dylan_<internal-release-name>_<patch-level>

<patch-level> is 0 for the first release from a version, 1 for an update to 
that release, and so on.  The numbers (should) correspond to those used in MM 
Evolution.

.hope.co: Check out the checkpointed source tree to the directory created above 
when initially checking out the branch (.hope.co).

  hope checkout -compound MMsrc -branch MM_dylan_<internal-release-name>_
<patch-level>

(Only the version.c should have changed).

.build.build: Build the product libraries in the clean tree.  To do this on a 
PC run the batch file "proddw.bat" (which should have been checked out along 
with the sources).  It will create a directory called "dylan" with all the 
stuff in.

.deliv: Delivery is made in two steps.  Sometimes one or other of the delivery 
steps is missed out.  First, delivery is made to QA so that they can report on 
it.  Second (assuming the QA report was satisfactory), delivery is made to 
Dylan.

.deliv.server: The MM release server is currently the Solaris server zaphod, in 
directory ~mm.  This directory is Samba-served to PCs as \\zaphod\mm\.  It is 
used to hold the deliverables.

.deliv.qa: The built product is delivered to QA.

.deliv.qa.place: Create a directory for the QA release on the MM release 
server.  The directory should be "\\<MM-release-server>
\MMdist\Secret\release.dylan.<internal-release-name-including-patch>".  For 
example\\zaphod\mm\MMdist\Secret\release.dylan.crow or 
\\zaphod\mm\MMdist\Secret\release.dylan.blackbird.2.

.deliv.qa.copy: Copy the contents of the dylan directory created in the build 
step (.build.build above) into the directory for the QA release 
(.deliv.qa.place above).  The release directory should now contain a single 
subdirectory called mps.

.deliv.check: Check that what you just copied was in fact the release you 
intended.  See guide.mps.identify.

  strings - <internal-release-named-including-patch>\mps\lib\
w3i3\hi\mmdw.lib|grep HQNMPS

.src: The sources to the release are made available on the MM release server so 
that they can be used for debugging.

.src.place: Create a directory for the sources on the MM release server.  The 
directory should be "\\<MM-release-server>\MMdist\MMsrc\
<internal-release-name-including-patch>".  For example, 
\\zaphod\mm\MMdist\MMsrc\blackbird.  Set permissions to rwxrwxr-x.

.src.cd: And make that directory current:
  cd <internal-release-name-including-patch>

.src.co: Checkout the sources (again) into the directory you just created on 
the MM release server.  Something like:

  hope co -compound MMsrc -branch MM_dylan_<internal-release-name>_
<patch-level> -missing-dir create

.release.edit: Edit the release document to fill in the "Release Source" 
field.  The Release Source should be the hope compound and checkpoint  (e.g., 
MMsrc!(MM_dylan_blackbird_0)) used to check out the sources used the build the 
release (.build.co above).  Change the release status to QA.

.announce.qa: Compose a mail message announcing the release to QA.  This 
message should be sent to mm-qa.  This message announces the release and should 
contain:
- The release's internal name
- The intent of the release (including which clients, and why)
- A description of where the release can be found
- A description of the changes between this release and the previous release.  
This will usually be a concatenation of the release notes from the release 
documents for this and previous releases.  Usually (because we try and QA all 
releases) it will just be a copy of the release notes from the single release 
document.

.version.devel: This is where you check out version.c again, and modify it so 
that the branch tip does not look like a release any more (so that "accidental" 
release can be identified).

.await: The QA reported is awaited before deciding whether to release to 
Dylan.  .decide: When QA has reported on the release, the product manager makes 
the decision as to whether to release to Dylan or not (the alternative being 
developing a new (possibly a patch) release and attempting to release that).

.deliv.dylan.assume: So assume the decision to release has been made.

.deliv.dylan.place: Create a directory for the release on the MM release 
server.  The directory should be "\\<MM-release-server>
\MMdist\Dylan\release.dylan.<external-release-name>".  For example, 
"\\zaphod\mm\MMdist\Dylan\release.dylan.2.0".  The parent directories should 
already exist, so you should only need to create the subdirectory for this 
release.  Set permissions to rwxrwxr-x.

.deliv.dylan.copy: Copy the release from the directory used for the QA release 
to the directory used for the Dylan release (created above in 
.deliv.dylan.place).  The Dylan release directory should now contain a single 
subdirectory called mps.

.announce.dylan: Compose a mail message announcing the release to Dylan.  This 
message should be sent to mm-dylan and to Dylan's appointed MM contact.  This 
message announces the release and should contain:
- The release's external name
- The intent of the release
- A description of where the release can be found
- A description of the changes between this release and the previous release to 
Dylan.  This will usually be a concatenation of the release notes from the 
release documents for this and previous releases.  It may be bigger than the 
corresponding section in the email sent to QA (.announce.qa) because not all 
releases sent to QA make it to Dylan.
- A description of any known problems.

.test.overnight: See proc.release.test.overnight.  [At some point, change this 
to a general instruction to see proc.release.]

[ Should diff header files between releases to check for new or changed 
interfaces.  gavinm 1998-03-30 ]
[ See approval comments for change.dylan.jackdaw.160057: DMM release procedure 
is inconsistent and slow.  gavinm 1998-09-07 ]
[ Should update release document with external release name.  gavinm 1998-10-26 
]


