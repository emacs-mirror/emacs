       PROCEDURE FOR RELEASING A DYLAN DEBUGGER MM FUNCTION LIST
                    proc.release.dylan.debug.fn-list
                               draft doc
                             drj 1997-09-23

INTRODUCTION

.intro: This document describes how to build and release a dylan debugger MPS 
function list.  The dylan debugger MPS function list is a document that lists 
all the functions in the MPS are active on the stack when the MPS has a lock 
claimed.  The purpose of the list is so that the dylan debugger can identify 
any threads that have MPS locks claimed and run those threads until they no 
longer have any MPS locks claimed.  This is so that the debugger can then 
access the heap memory without deadlocking.  See req.dylan.prot.debug.


OVERVIEW

.overview: The procedure uses the UNIX tools cxref to automatically generate a 
cross reference.  The cross reference is then used to determine which functions 
call ArenaEnter and ArenaLeave, these functions make up the dylan debugger MPS 
function list.

[Note that cxref does not analyse function calls by dynamic dispatch, so there 
is a risk that functions which call ArenaEnter might be missed.  Also, 
ArenaEnter may not be the only thing that claims locks.  rit 1997-12-12]


PROCEDURE

.platform.sos8cx: You will need to use platform.sos8cx, in practice this means 
finding a Solaris 2.x SPARC box with the Sun Pro C compilation tools (the 
_unbundled_ C compiler) on it.  .platform.sos8cx.hint: When using the SunPro 
tools you need to have weird stuff in your PATH, add /opt/SUNWspro/bin to your 
PATH and /opt/SUNWspro/man to your MANPATH.

.co: Checkout the MM stuff from hope, probably using a command similar to:
hope co -missing-dir create MMsrc!(<insert-branch-here>)

.cd: Cd into the src directory created from the checkout, using a command 
similar to:
cd src

.build.cxref: Build a C cross reference, with a command similar to:
gnumake -r -f sos8cx.gmk 'VARIETY=ci' mmdw.a
.build.cxref.command.vary: You might need to change the target (mmdw.a in the 
example above) depending on what state the build system is in.  It's important 
that it include almost all the object files that go into a dylan release, as 
any other files will need to be checked by hand.

.extract.cd: Cd into the object file directory, with a command like:
cd sos8xc/ci
.extract.enter.grep: Extract the list of functions that call ArenaEnter, with 
the command:
grep '^ArenaEnter' *.o|awk '{print $3}' >enter.list
.extract.leave.grep: Extract the list of functions that call ArenaLeave, with 
the command
grep '^ArenaLeave' *.o|awk '{print $3}' >leave.list
.check.same: Check that the two lists are the same, this checks that all the 
functions that call ArenaEnter also call ArenaLeave, using the command
diff enter.list leave.list
.check.same.command.output: The two lists should differ by ArenaCreateV and 
mps_arena_destroy being present only in enter.list, and mps_arena_create_v 
being present only in leave.list.  So the output should be something like (line 
numbers may differ):
4d3
< ArenaCreateV
48c47
< mps_arena_destroy
---
> mps_arena_create_v

.list: The file enter.list is more or less the desired function list.  You'll 
need to remove the line which is just '---' (this is generated from the 
_definition_ of ArenaEnter), and you'll need to add by hand any functions which 
call ArenaEnter that weren't checked automatically above.  These functions will 
probably be in platform-specific files (*w3.[ch]), use grep on the sources 
(last time I checked there weren't any references to ArenaEnter, nor would I 
expect any).

list.trunc: Check that none of the function names have been truncated using the 
idlench program:
../../idlench.awk *.o

(idlench.awk is found in the top level, src directory, of the MMsrc compound.)  
This prints out _all_ function names (well, nearly) which are longer than the 
currently allowed length.  There shouldn't be any, and if there are, there 
shouldn't be any that are also in enter.list.  If there are, you'll either need 
to rename the functions or fiddle the length of columns in cx.gmk.  Either 
change should be subject to development process in the usual way.

.release: Having compiled the list from the automatically generated list above 
and any extra functions that weren't included in the automatic procedure 
(unlikely), add the list to the release notes stored in the release document.  
This will later form part of the release notes that are given to Dylan.

