                  PROCEDURE FOR REVIEW LOGGING MEETING
                            proc.review.log
                            incomplete proc
                           gavinm 1997-06-12


INTRODUCTION

.scope: This document describes the procedure for a loggin meeting as part of 
formal review.

.readership: This document is intended for anyone acting as review leader.

.just: The main reason for having joint logging sessions is so that new issues 
are found.


PROCEDURE


During The Meeting

.record: All information gathered should be recorded in the review log.  This 
may be deferred if the meeting is mediated by a logged medium, such as IRC.

.metrics: Gather individual metrics of:
  - Issue counts by class;
  - Time spent checking;
  - Amount of product document actually checked.

.author: The leader reminds the author that he may remove documents from review 
at any time.

.decide: The leader, in consultation with the author and editor, decides 
whether it is worth holding continuing with the logging meeting.  [Using what 
criteria?  We've never actually done this.  GavinM 1997-06-12]  In particular, 
see exit.universal.rates.

.scribe: Assign a scribe (usually the leader), and ensure the editor will be 
happy with the readability of the log.

.explain: The leader explains the order in which issues will be logged, and 
ensures everyone understand this.  He also explains the desired form of issues, 
namely:
  - Location;
  - Class, including "New" (N) if the issue was discovered during logging (see 
guide.review.class);
  - Description of issue, concentrating on how it breaks a rule, rather than on 
possible solutions, naming the rule or checklist question, if possible.

.dup: The leader should also explain that checkers should avoid logging issues 
that have are duplicates of ones already logged, ut that if in doubt, they 
should log.

.slow: Issues are logged sufficienly slowly that all checkers can examine each 
issue.  This is so that checkers can find new issues.

.order: Unless instructed otherwise, checkers should try to list their issues 
in forwards document order.  This makes life easier for other checkers and the 
editor.

.fast: Logging should more fairly brisky, however, and the leader should be 
firm in discouraging discussion of:
  - Whether issues are genuine defects;
  - How a defect may be resolved;
  - The review process (other than to answer questions);
  - The answers to questions logged.

[ There has been much experimentation with the order of logging, but this 
represents current best practice.  GavinM 1997-06-12 ]

.major: The leader calls upon all checkers, one by one, to list their major 
issues (see guide.review.class.major), preferable in order of their occurance 
in the product document.  He may chunk the product document and go round the 
checkers several times, but this is unusal.

.decide.non-major: The leader may decide not to log all minor issues (see 
guide.review.class.minor).  He should announce that each checker should offer 
some number, or fraction.  Other issues may be logged in writing.

.non-major: The leader takes all checkers through the product document in 
order, at each stage:
  - Announcing the section being looked at;
  - Asking who has issues in this section;
  - Requesting issues from checkers.  [This may be unnecessary if using an 
asynchronous medium, such as IRC.  GavinM 1997-06-12]
Note that improvement suggestions arising from specific parts of the product 
document can be logged at this stage.

.general: The leader then requests, by checker, any general or new issues not 
already logged.

.brainstorm: The leader negotiates a time for the process brainstorm.  This 
will normally be a tea-break (10-15 minutes) after the end of the logging 
meeting.


After The Meeting

.inform: The reviewed document is now ready for edit (see proc.review.edit).  
The review leader should inform the editor of this by mail.


