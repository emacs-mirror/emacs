              EXTENDING THE MPS TELEMETRY / ADDING EVENTS
                       proc.dev.telemetry.extend
                             incomplete doc
                             drj 1998-05-22

INTRODUCTION

.intro: This document describes a procedure for extending the MPS telemetry by 
adding new types of events to the stream.

.source: See design.mps.telemetry for the design of the telemetry 
infrastructure.  And design.mps.telemetry.reg in particular for how to register 
new events (this document is a convenient precis).


.forall: For each new event that you adding you will need to do the following:

.name: Name the event.  .name.schema: Generally events are named 
<Module><Verb>, so PoolCreate, BufferReserve (this is very similar to the 
function naming schema).  Try to pick a unique name.  It's essential.

.eventcom: You will need to edit impl.h.eventcom (stored in hope as 
MMsrc!eventcom.h).  This file has a big list of #defines which define for each 
event a unique EventType code.  You need to add a #define to give a name and 
value to a new EventType code.  The name should be Event<eventname> (ie "Event" 
prepended to whatever you decided to call the event).  The macro should expand 
into a hex constant cast to the type EventType and should be suitably 
bracketed.  The hex constant should start 0xEF (for EVent) and is chosen 
according to the Hex Transliteration Scheme (see guide.hex.trans).  The hex 
constant should have 8 hex digits.

.eventcom.example: Here's an example:

#define EventArenaCreate    ((EventType)0xEFA64C6E) /* AReNa CREate */


.eventcom.obsolescent: One day, you won't need to mess around with 
impl.h.eventcom as we intend to move over to a more compact event stream 
representation which doesn't use these codes.  For now you still have to 
however.

.eventdef: You will also need to edit impl.h.eventdef (stored in hope as 
MMsrc!eventdef.h).  This file store a list of relations using the RELATION 
macro (which is not defined in this file, but is intended to be defined by the 
file which #includes eventdef.h).  You will need to add a relation for the 
event you are adding.  Add a line to the file of the form 
"RELATION(<eventname>, <hex-serial>, TRUE, <kind>, <format>)".  The name of the 
event should be substituted for <eventname>.  A new hex serial number should be 
chosen (one bigger than the currently largest) and substituted for 
<hex-serial>.  The kind of the event should be determined and substitued for 
<kind>.  The kinds relate approximately to frequency of occurence; they are 
defined in impl.h.event (MMsrc!event.h).  The format governs the number and 
type of the values supplied in the event.  The format is a non-zero length 
string from the Kleene closure of "ADPSUW" (Addr, double, void *, char *, 
unsigned, Word) or 0 (no values supplied).  The format should be substituted 
for <format>.

.eventgen: if the format you used was a new one never seen before in the MPS 
then you will need to recreate impl.h.eventgen (MMsrc!eventgen.h) which is an 
automatically generated file.  Check it out from hope and run eventgen.pl 
("perl eventgen.pl") to recreate it.  then check it back in.

