                      PROCEDURE FOR DOING ANYTHING
                             proc.universal
                            incomplete proc
                           richard 1995-08-17


INTRODUCTION

.scope: This is a procedure for solving any problem.  A problem could be 
achieving an objective, working out a design, or getting coffee.  The method 
should be applicable to every problem.  The procedure is phrased somewhat in 
software terms, because that's the kind of guy I am.  Try to abstract out the 
general method.

.nonseq: This procedure is not necessarily sequential -- it is _not_ a 
waterfall model.  It is an abstract flow of information from start to finish.  
It may be necessary to adjust the level of detail at any point, or you may have 
ideas before you've worked out requirements.  No problem!  Just be sure that 
you can fill in the gaps and justify your actions in these terms.

.help: If you're unsure about how to carry out any of these steps, try to find 
out by asking your colleagues, then by asking me.  I don't have time to write a 
complete manual of abstract procedure, even though I could.


PROCEDURE

.level: Decide on the appropriate level of procedural detail to apply to the 
problem.  Do you need to write down goals, requirements, etc. or are you 
confident that you can achieve your ends without?  Small tasks (such as 
fetching coffee) need lightweight procedure.  Complex tasks need detail if they 
are to turn out well.  You should be _able_ to justify your actions in any case.

.goal: Make sure that you can state what it is you are trying to achieve.  
.goal.obj: If you've been given an objective by someone else, make sure you 
have enough information from them to do this (see right.comms.know).  An 
objective document (type.obj) should contain enough information.  If it does 
not, get its owner to fill it in.  .goal.own: If you've created your own 
objective (for example, by breaking down a larger one, or creating a new one), 
make sure you're able to work out what the goal is.  .goal.measure: Try to 
state your objectives in measurable terms (right.comms.measure), by getting 
more information from someone, if necessary (right.comms.initiate).

.req: Work out the requirements.  .req.test: Work out how to test that any 
solution meets those requirements.  Design and implement tests as a sub-task, 
if necessary.

.analysis: Analyse the implications of the requirements.

.idea: Generate solution ideas.

.impact: Analyse the impact of the solution ideas on the requirements and goal.

.design: Create a detailed design of the solution made up of the ideas which 
best meet the requirements and achieve the goal.

.impl: Implement the design.

.test: Test that the design meets the requirements by applying the tests worked 
out during .req, and adding new tests as necessary.

.deliver: Deliver the results.


