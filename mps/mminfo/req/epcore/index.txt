                        MM/EP-CORE REQUIREMENTS
                               req.epcore
                               draft doc
                           richard 1995-11-01

INTRODUCTION


Project

.proj: For more information on the MM/EP-Core project, see project.epcore.

.goals: The goals of the MM/EP-Core relationship are defined and maintained in 
goal.epcore.

Scope

.scope: This document is intended to describe in a clear, concise, consistent, 
and unambiguous manner all requirements of the proposed memory manager 
(hereinafter referred to as the MM).  .scope.sufficient: The document should 
contain enough information for the Memory Management Group to produce software 
that will satisfy the goals of this MM/EP relationship (see .goals, below).

.scope.comms: This document will also serve as a medium for communication and 
negotiation between EP and the MM Group.

.scope.readership: Anyone interested in the MM/EP-core project.


Definitions

.def.rip: The "RIP" or "Core RIP" is the core RIP component of ScriptWorks.

.def.old: The "old memory manager" means those parts of the core RIP which did 
memory management tasks before the start of the MM/EP-Core project. 


Document Conventions

.conv: This document is formatted according to the Memory Management 
Information System guidelines (guide.text).  It contains cross-references to 
other documents in the System, in particular between the requirement statements 
and the information from which they were derived.  These documents are 
available via the "Memory Management Information" database in Spring.

.conv.tag: The document contains embedded definitions of "tags" which uniquely 
identify elementary statements.  See guide.text.tag.

.conv.comment: Comments in the document, for clarification, or indicating where 
future changes are expected, are enclosed in square brackets 
(guide.text.comment).

.conv.req: Each requirement has a certain format, giving a description (often 
implicitly prefixed by "the Memory Manager shall"), a category, and a source 
reference.  See guide.req.

HISTORY

.hist.1: The initial requirements list was produced by Richard Brooksby after a 
meeting (meeting.epcore.1995-07-18) with Yoryos Yeracaris, Andy Cave, and Luke 
Tumner.  (req.epcore(1), 1995-08-22)

.hist.2: A series of technical meetings between MM and Andy Cave followed 
(meeting.epcore.1995-08-07 to .1995-08-10)  during which detailed requirements 
were discussed.  A second meeting between Richard and Yoryos took place to 
approve goals and set priorities (meeting.epcore.1995-09-13).  Nick Barnes 
produced an updated requirements list based on the previous list and these 
meetings.  (req.epcore(2), 1995-10-20)

.hist.3: Richard Brooksby then prepared a narrative version of the requirements 
list document with enough information to make the list accessible and 
reviewable by a wider audience (req.epcore(3)).  This document was reviewed and 
updated by a meeting of Yoryos Yeracaris, Andy Cave, Luke Tumner, Richard 
Brooksby and Nick Barnes (meeting.epcore.1995-11-01). (req.epcore(3), 
1995-11-02)

.hist.4: Nick Barnes cleared up some problems following design work and later 
meetings (meeting.epcore.1995-12-05 to .1996-01-25).  (req.epcore(3), 
1996-02-06)

.hist.5: Richard Brooksby broke the document into several pieces in Notes, 
because Notes can't handle more than 64K of text at once.  (req.epcore(4), 
1996-06-17)

.hist.6: Richard Brooksby updated the document to include changes from Nick's 
meeting with EP and meeting.epcore.1996-06-06, which mainly deals with trapping 
requirements and other requirements for the "trapping" release (see 
plan.epcore.release.trap).  (req.epcore(6), 1996-06-29)

.hist.7: Nick Barnes updated the document to include items from 
meeting.epcore.1996-02-08 (long overdue).  (req.epcore(7), 1996-07-05)

.hist.8: Nick Barnes went through the document fixing typos, thinkos, and 
miscellaneous minor problems.  (req.epcore(8), 1996-07-18)

.hist.9: Nick Barnes clarified distinctions between different types or classes 
of memory. (req.epcore(9), 1996-07-30)

.hist.10: Nick Barnes polished prior to review.req.epcore.10.  (req.epcore(10), 
1996-08-14)

.hist.11: Nick Barnes added .dc.plat.soussc, and removed revision numbers from 
the sub-documents.  (req.epcore(11), 1996-08-27)

.hist.12: Nick Barnes did review edits for review.req.epcore.10.  
(req.epcore(12), 1996-09-12)

.hist.13: Nick Barnes split .dc.plat.irr4cc into .dc.plat.i4r4cc and 
.dc.plat.i5r4cc. (req.epcore(13), 1997-02-19)

.hist.14: Nick Barnes added promise requirements .fun.dl.promise.* and modified 
.attr.align accordingly.  (req.epcore(14), 1997-04-23)

.hist.15: Nick Barnes clarified platform requirements, using new processor 
codes.
(req.epcore(15), 1997-06-06)

.hist.16: Nick Levine identified those platform requirements which are becoming 
obsolete. (req.epcore(16), 1997-08-08)

.hist.17: Pekka P. Pirinen updated changes between version 16 and February 
1998, see mail.pekka.1998-02-16.15-57.  (req.epcore(17), 1997-08-08)


OVERVIEW OF REQUIREMENTS

.over: This section is an overview; it is neither complete nor definitive, but 
is meant as an introduction for newcomers.


Functionality

.over.fun.memory: The Memory Manager shall acquire the memory it manages either 
from the RIP at start up, or from the virtual memory system, see .fun.arena.

.over.fun.types: The Memory Manager shall manage the following types of memory, 
each with its own specialised set of requirements:

  - display lists (built by the RIP for each page or band), see .fun.dl;
  - PostScript Virtual Memory (see book.psrm2), see .fun.ps;
  - caches for RIP objects (e.g. font cache, half-tone cache), see .fun.cache;
  - trapper memory (i.e., memory used by EasyTrap), see .fun.trap;
  - static memory (i.e. memory allocated once at RIP start-up), see .fun.static;
  - temporary memory (i.e. memory for ephemeral objects), see .fun.tmp;
  - general memory (i.e. all other memory used by the core RIP), see 
.fun.general.

.over.fun.auto: The Memory Manager will provide automatic recycling of memory 
occupied by PostScript objects (garbage collection).

.over.fun.con: The Memory Manager will provide an interface which will allow 
control over management policy and attributes, and provide measurements.

.over.fun.debug: The Memory Manager will support the debugging of the RIP.

.over.fun.image: Images output successfully with the old memory manager will 
not be affected by the Memory Manager.


Attributes

.over.attr.rel: As a baseline for reliability, the RIP mean time between 
failure due to the Memory Manager shall be no less than 16000 hours of 
continuous operation (that's approximately 100 weeks).  (See .attr.rel for 
details.)

.over.attr.run-time: RIP run-time shall be no greater than with the old memory 
manager when applied to individual Seybold Speed Tests, Genoa FTS and ATS 
tests, and certain tests from the ScriptWorks QA Tests Suite.  (See 
.attr.run-time for details.)

.over.attr.tp: RIP throughput shall be no less than with the old memory manager 
when applied to aggregate Seybold Speed Tests, Genoa FTS and ATS tests, and 
certain subsets of the ScriptWorks QA Test Suite.  (See .attr.tp for details.)

.over.attr.footprint: The total memory requirement of the RIP for given jobs 
shall not be larger than with the old memory manager.


Planning

.over.plan.release.cutover: The replacement of the old memory manager shall be 
arranged so that either system can be used in the RIP, so that comparisons can 
be made between the two, both for acceptance testing and to reduce the risk of 
replacement.

.over.plan.int: Approximately 3/4 of an EP person shall be provided to 
integrate into the core RIP.

.over.plan.port: Porting to a new architecture or OS shall be quick and easy 
(see .plan.port.* for details).

.over.plan.supp: The MM group shall provide approximately 1/4 of an MM person 
to support use of the memory manager.



FUNCTIONALITY

See req.epcore.fun.


ATTRIBUTES

See req.epcore.attr.


DESIGN CONSTRAINTS

See req.epcore.dc.


PROTOCOLS

See req.epcore.prot.


PLANNING

See req.epcore.plan.

