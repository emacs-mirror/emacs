                 MM/EP-CORE REQUIREMENTS: FUNCTIONALITY
                             req.epcore.fun
                               draft doc
                           richard 1996-06-17

[This document is part of req.epcore.  It does not have its own revision number]

Introduction

.intro: The functional requirements specify the software functionality of the 
Memory Manager.  Note that functional requirements specify _functionality_ and 
not the interface to that functionality.  Required interfaces are defined in 
the "PROTOCOL" section of this document.

.org: The section is organised into subsections by the type of memory to be 
managed.  The first few subsections each describe the operations to be supplied 
on one type of memory.  Later subsections describe miscellaneous functionality.


Arena Management

.arena:
  The Memory Manager shall acquire the memory it manages (the "arena") either 
from the RIP at  initialisation ("the client arena"), or from the virtual 
memory system ("the VM arena").  .arena.client: The client arena is a 
contiguous area of memory.  .arena.virtual: The layout of VM arena is 
controlled by the Memory Manager.  Critical.
  meeting.epcore.1995-07-18.req.ep, meeting.epcore.1995-08-08.arena, 
meeting.epcore.1997-09-16, meeting.epcore.1998-05-07

.arena.extend:
  Provide a mechanism by which extensions to the client arena can be 
dynamically made and withdrawn when required.  [This is not useful, and will 
probably be removed.]
  Essential.
  meeting.epcore.1996-02-08.suggest.extend, meeting.epcore.1996-05-16

.arena.limit:
  Provide a way to limit total allocation, independent of the size of the arena.
  Essential.
  meeting.epcore.1998-06-05

.arena.page:
  Provide a mechanism to prevent certain objects from being paged out.
  Nice
  meeting.epcore.1997-12-03.real-real-time, mail.pekka.1998-02-16.15-57


General

.pool.frag:
  Using multiple pools of the same kind shouldn't cause fragmentation, as long 
as there's enough address space.
  Essential
  mail.pekka.1998-02-16.15-57


Display List Management

.dl.alloc:
  Allocate memory for display list objects.
  Critical.
  meeting.epcore.1995-07-18.req.ep, meeting.epcore.1995-11-01

.dl.alignment:
  Display list allocations should be aligned at 4 bytes (8 in SW 4.5).
  Critical
  request.epcore.170579

.dl.free:
  Recycle the memory occupied by display list objects.  [This requirement 
exists to force one of .dl.free.mass and .dl.free.any to be implicitly 
critical.]
  Critical.
  meeting.epcore.1995-11-01

.dl.free.mass:
  Recycle the memory occupied by an entire display list in one operation.
  Essential.
  meeting.epcore.1995-07-18.req.ep, meeting.epcore.1995-11-01

.dl.free.any:
  Recycle the memory occupied by any individual display list object.
  Essential.
  meeting.epcore.1995-08-07.dl.free, meeting.epcore.1995-11-01

.dl.multi:
  Manage multiple display lists simultaneously.
  Essential.
  meeting.epcore.1995-08-07.dl.multi

.dl.multi.move:
  Support moving objects between display lists.
  Optional.
  meeting.epcore.1996-02-08.suggest.mobile

.dl.promise: 
  Support one active "promise" object per display list.
  Essential.
  mail.nickb.1997-03-17.15-27, mail.ericp.1998-04-09.11-24

.dl.promise.create:
  Support creating a "promise" with a specified maximum size.
  Essential.
  mail.ericp.1998-04-09.11-24

.dl.promise.alloc:
  Support contiguous sequential suballocation upwards within a "promise".
  Essential.
  mail.ericp.1998-04-09.11-24

.dl.promise.free:
  Support truncating a promise after finishing the suballocations to the 
currently suballocated part.  [SW calls this "ending a promise".]
  Essential.
  mail.ericp.1998-04-09.11-24

.dl.promise.end:
  Support aborting a promise, freeing the whole thing.  [SW calls this "freeing 
a promise".]
  Essential.
  mail.ericp.1998-04-09.11-24

.dl.promise.alignment:
  Promise suballocations should be aligned at 4 bytes.
  Essential.
  mail.nickb.1997-03-17.15-27


PostScript Object Management

.ps.alloc:
  Allocate memory for PostScript objects.
  Critical.
  meeting.epcore.1995-07-18.req.ep, meeting.epcore.1995-11-01.

.ps.alignment:
  PostScript VM objects and structures should be aligned at 8 bytes, strings 
need not be.
  Critical.
  mail.andy.1998-02-06.19-31

.ps.gc:
  Automatically recycle memory occupied by dead PostScript objects.
  Critical.
  meeting.epcore.1995-07-18.req.ep, meeting.epcore.1995-11-01

.ps.gc.op:
  Support PostScript GC-related operators ("vmreclaim", "vmstatus", etc.).  The 
exact semantics of these operators need not follow book.psrm2 literally.
  Essential.
  meeting.epcore.1995-08-08.psgc, meeting.epcore.1995-11-01

.ps.hash:
  Support pointer-based hashing, even if objects are relocated.
  Essential.
  meeting.epcore.1995-08-07.ps.rehash

.ps.iter:
  Support iterators over dictionaries.  [The exact semantics of iterators under 
GC conditions will be investigated and specified.]
  Critical.
  meeting.epcore.1995-08-07.ps.iter, meeting.epcore.1995-11-01

.ps.restore:
  Support the PostScript save/restore mechanism with at least 32 levels.
  Critical.
  meeting.epcore.1995-08-07.ps.save, meeting.epcore.1995-11-01, 
mail.pekka.1998-02-16.15-57

General Memory Management

.gen.alloc:
  Allocate memory for general objects (malloc-like).
  Critical.
  meeting.epcore.1996-07-30.class.general

.gen.alignment:
  General objects should be aligned at 8 bytes.
  Critical.
  meeting.epcore.1995-08-07.align, mail.pekka.1998-02-16.15-57

.gen.free:
  Manually recycle memory occupied by general objects (free-like).
  Critical.
  meeting.epcore.1996-07-30.class.general


Temporary Memory Management

.tmp.alloc:
  Allocate memory for temporary objects (malloc-like).
  Critical.
  meeting.epcore.1995-07-18.req.ep, meeting.epcore.1995-11-01, 
meeting.epcore.1996-07-30.class.temp

.tmp.alignment:
  Temporary objects should be aligned at 8 bytes.
  Critical.
  meeting.epcore.1995-08-07.align, mail.pekka.1998-02-16.15-57

.tmp.free:
  Manually recycle memory occupied by temporary objects (free-like).
  Critical.
  meeting.epcore.1995-07-18.req.ep, meeting.epcore.1995-11-01, 
meeting.epcore.1996-07-30.class.temp

.tmp.policy:
  Take advantage of the transience of temporary memory.
  Nice.
  meeting.epcore.1996-07-30.pool.new


Static Memory Management

.stat.alloc:
  Allocate memory for static objects (malloc-like).
  Critical.
  meeting.epcore.1996-07-30.class.static

.stat.alignment:
  Static objects should be aligned at 8 bytes.
  Critical.
  meeting.epcore.1995-08-07.align, mail.pekka.1998-02-16.15-57

.stat.policy:
  Take advantage of the lifetime of static memory.
  Nice.
  meeting.epcore.1996-07-30.pool.new  


Cache Management

.cache.multiple:
  Support multiple independent caches (e.g. font cache, half-tone cache, colour 
cache, &c).
  Optional.
  meeting.epcore.1996-02-08.suggest.cache.

.cache.alloc:
  Allocate memory for cache objects.
  Critical.
  meeting.epcore.1995-07-18.req.ep, meeting.epcore.1995-11-01, 
meeting.epcore.1996-02-08.suggest.cache.

.cache.alignment:
  Cache objects should be aligned at 8 bytes.
  Critical.
  meeting.epcore.1995-08-07.align, mail.pekka.1998-02-16.15-57

.cache.free:
  Manually recycle memory occupied by cache objects.
  Critical.
  meeting.epcore.1995-07-18.req.ep, meeting.epcore.1995-11-01, 
meeting.epcore.1996-02-08.suggest.cache.

.cache.gc:
  Automatically recycle memory occupied by dead cache objects.
  Optional.
  meeting.epcore.1995-08-07.fontcache.recycle, 
meeting.epcore.1996-02-08.suggest.cache.


Trapping Memory

.trap: All trapping requirements apply from SW 4.6 onwards.

.trap.alloc:
  Allocate memory for trapping objects (malloc-like).
  Critical
  meeting.epcore.1996-06-06.trap.*

.trap.alignment:
  Trapping objects should be aligned at 8 bytes.
  Critical.
  mail.pekka.1998-02-16.15-57

.trap.free:
  Free memory occupied by trapping objects (free-like).
  Critical.
  meeting.epcore.1996-06-06.trap.*

.trap.alloc.zero:
  Zero memory allocated for trapping objects.
  Critical.
  meeting.epcore.1996-06-06.trap.zero

.trap.realloc:
  Re-allocate memory occupied by trapping objects (realloc-like).
  Optional.
  meeting.epcore.1996-06-06.trap.realloc, mail.pekka.1998-02-16.15-57

.trap.clear:
  Free all trapping memory from one pool in a single operation.
  Critical.
  meeting.epcore.1996-06-06.trap.recover

.trap.multi:
  Provide multiple pools of trapping memory.
  Nice.
  meeting.epcore.1996-06-06.trap.multi


Miscellaneous

.image:
  Have no effect on images currently output by the RIP.
  Critical
  meeting.epcore.1995-12-05.req.image

.alloc.threaded:
  Support allocation by more than one thread.
  Nice.
  meeting.epcore.1995-11-01

.tickle:
  Must "tickle" the RIP during extended periods of MM activity.  [See also 
.attr.tickle.]
  Essential.
  meeting.epcore.1995-08-08.tickle


Memory Manager Measurement and Control

.control.slice:
  Perform memory management work (optimisation, recycling, etc.) during periods 
suggested by the RIP (e.g. idle time).
  Optional.
  meeting.epcore.1995-08-10.idle.response, meeting.epcore.1995-08-10.co-op.idle

.control.low:
  Provide low-memory condition signalling to the RIP.
  Essential.
  meeting.epcore.1995-08-08.low

.measure.dial.visual:
  Support some visual indication of GC or other MM activity.
  Optional.
  meeting.epcore.1995-07-18.req.ep

.measure.log:
  Contribute to the internal RIP log.
  Optional.
  meeting.epcore.1995-08-08.log


Debugging

.debug.check:
  Check the consistency of the managed memory on demand.
  Essential.
  meeting.epcore.1995-08-08.check

.debug.check.complexity:
  Provide control over complexity of consistency checks.
  Essential.
  meeting.epcore.1995-07-18.req.ep

.debug.support.walk:
  Provide a facility for walking over all the allocated objects.
  Essential.
  mail.pekka.1998-02-16.15-57

.debug.support.event:
  Provide a log of allocations and deallocations.
  Essential.
  mail.pekka.1998-02-16.15-57, meeting.epcore.1998-05-07.1

.debug.support.overwrite:
  Try to detect writing beyond the bounds of an object.
  Essential.
  mail.pekka.1998-02-16.15-57

.debug.support:
  Debugging support must be no worse than in SW 4.1.
  Essential.
  meeting.epcore.1995-08-08.debug, mail.pekka.1998-02-16.15-57

.debug.assert:
  Reporting of illegal usage is at least as assertive as in SW 4.1.
  Essential.
  meeting.epcore.1995-07-18.req.ep, mail.pekka.1998-02-16.15-57

