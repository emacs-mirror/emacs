                           REFERENCE RANKING
                               idea.ranks
                               draft idea
                           richard 1995-07-28

MM.IDEA.RANKS: Reference ranks

To: mm-dylan
From: richard (Richard Brooksby)
Subject: Ambiguity, Exactness, Weakness, Finalization, and references
Date: Tue, 9 May 1995 13:20:11 +0100

The MM framework distinguishes between ambiguous and exact references,
since all ambiguous references must be "fixed" before any exact
references.  We have infrastructure to cope with this.

It strikes me that final references and weak references are a natural
extension of the ordering of ambiguous and exact references:

Rank    Property        Referent        Special
   1    ambiguous       undead          can't move referent
   2    exact           alive
   3    final           alive           notify if unmarked
   4    weak            dead            notify if unmarked

We could extend this to any number of stages.  The difficulty is
finding all the references with each property at each stage.

The AMC (DylanWorks) pool only allows ambiguous references in roots,
and not in the pool.  This segregation gives us the ability to scan
pool contents just once.  Scanning N times could make collection take
up to N times as long.

If we allow references with exotic properties on the heap the
performance could suffer badly unless we remember the subsets with
each property.  This means allocating objects in a special place, or
recording them on a chain, or whatever.  In any case, weak or final
slots, at the representation level, would require some special
allocation protocol and changes to the container format.

I believe the best compromise is specially allocated vectors of
weak/final/polkadot references, with Dylan sugar to make them look
like slots if necessary.

