                     SUPPORTING SAVE-IMAGE FOR LISP
                            idea.save-image
                            incomplete idea
                            tony 2000-03-03

.intro: We could provide support for save-image (for Lisp) along the following 
lines: 

.save-image: A save-image operation involves the following steps:

.save-image.s1: Client provides a special collection of roots for the 
operation. 

.save-image.s2: Perform a GC using the client roots and also any stack or 
ambiguous roots. 

.save-image.s3: Write data about all segments containing live data to a file in 
a format which includes enough housekeeping info to support steps .restore.r2 
and .restore.r3. For copying pools, the segments will mostly contain contiguous 
data so the housekeeping data should be quite small. (Not true for nailed 
objects, though).

.save-image.s4: If required, finish the GC by tracing from any standard client 
roots. (This may not be ecessary if it's not important to keep the Lisp image 
running after the save).

.restore: A fresh image (process) would restore the data with the following 
steps: 

.restore.r1: client provides a collection of roots, exactly compatible with the 
set in .save-image.s1. These don't contain useful references yet - but they 
will at the end of the operation.

.restore.r2: Read back the saved data segment-by-segment and root-by-root. The 
segment boundaries will be as before - but addresses may have changed. 

.restore.r3: Fixup all addresses by performing a trace from the new roots, 
using some special fix functions which know how to map old to new addresses by 
using the housekeeping info. 

.save-image.notes: The special client roots must not contain ambiguous 
references since these can't be relocated. Hence the stack roots are treated 
specially at dump time. This is probably OK for Lisp

