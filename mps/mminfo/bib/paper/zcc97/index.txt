       EFFICIENT DYNAMIC DISPATCH WITHOUT VIRTUAL FUNCTION TABLES
             Olivier Zendra;Dominique Colnet;Suzanne Collin
                         ACM SIGPLAN, 01/10/97
  OOPSLA'97, Conference Proceedings, vol. 32, issue 10 -- October 1997

                              paper.zcc97
                                 draft
                            pekka 1998-01-07


ABSTRACT:

SmallEiffel is an Eiffel compiler which uses a fast simple type inference 
mechanism to remove most late binding calls, replacing them by static 
bindings.  Starting from the system's entry point, it compiles only statically 
living code, which saves compiling and then removing dead code.  As the whole 
system is analyzed at compile time, multiple inheritance and genericity do not 
cause any overhead.

SmallEiffel features a coding scheme which eliminates the need for virtual 
function tables.  Dynamic dispatch is implemented without any array access but 
uses a simple static binary branch code.  We show that this implementation 
makes it possible to use modern hardware very efficiently.  It also allows us 
to inline more calls even when dynamic dispatch is required.  Some more 
dispatch sites are removed after the type inference algorithm has been 
performed, if the different branches of a dispatch site lead to the same code.

The advantage of this approach is that it greatly speeds up execution time and 
considerably decreases the amount of generated code.

REVIEWS:

This scheme could be adapted to explicit dispatch in a C program, provided you 
can maintain an explicit list of all the classes (you only need one list per 
superclass).  -- Pekka 1998-01-07



