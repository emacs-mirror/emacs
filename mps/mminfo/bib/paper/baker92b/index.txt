                          NREVERSAL OF FORTUNE
                             Henry G. Baker
                                    
           ftp://ftp.netcom.com/pub/hb/hbaker/ReverseGC.html

                             paper.baker92b
                                 draft
                           richard 1996-07-17


ABSTRACT:

The need to _reverse_ a computation arises in many contexts -- debugging, 
editor undoing, optimistic concurrency undoing, speculative computation 
undoing, trace scheduling, exception handling undoing, database recovery, 
optimistic discrete event simulations, subjunctive computing, etc.  The need to 
_analyze_ a reversed computation arises in the context of static analysis -- 
liveness analysis, strictness analysis, type inference, etc. Traditional means 
for restoring a computation to a previous state involve checkpoints; 
checkpoints require time to copy, as well as space to store, the copied 
material.  Traditional reverse abstract interpretation produces relatively poor 
information due to its inability to guess the previous values of assigned-to 
variables.

We propose an abstract computer model and a programming language -- Psi-Lisp -- 
whose primitive operations are injective and hence reversible, thus allowing 
arbitrary undoing without the overheads of checkpointing.  Such a computer can 
be built from reversible conservative logic circuits, with the serendipitous 
advantage of dissipating far less heat than traditional Boolean AND/OR/NOT 
circuits.  Unlike functional languages, which have one "state" for all times, 
Psi-Lisp has at all times one "state", with unique predecessor and successor 
states.

Compiling into a reversible pseudocode can have benefits even when targeting a 
traditional computer.  Certain optimizations, e.g., update-in-place, and 
compile-time garbage collection may be more easily performed, because the 
information may be elicited without the difficult and time-consuming iterative 
abstract interpretation required for most non-reversible models.

In a reversible machine, garbage collection for recycling storage can always be 
performed by a reversed (sub)computation.  While this "collection is reversed 
mutation" insight does not reduce space requirements when used for the 
computation as a whole, it does save space when used to recycle at finer 
scales.  This insight also provides an explanation for the fundamental 
importance of the push-down stack both for recognizing palindromes and for 
managing storage.

Reversible computers are related to Prolog, linear logic and chemical abstract 
machines.

ATTACHMENTS
   "ReverseGC.ps"
   "ReverseGC.pdf"

