         MEMORY ALLOCATION FOR LONG-RUNNING SERVER APPLICATIONS
                     Per-Åke Larson;Murali Krishnan
                             ACM, 01/10/98
                          ISMM'98 pp.176--185
 http://www.acm.org/pubs/citations/proceedings/plan/286860/p176-larson/

                               paper.lk98
                               incomplete
                            pekka 1999-12-03


ABSTRACT:

Prior work on dynamic memory allocation has largely neglected long-running 
server applications, for example, web servers and mail servers.  Their 
requirements differ from those of one-shot applications like compilers or text 
editors.  We investigated how to build an allocator that is not only fast and 
memory efficient but also scales well on SMP machines.  We found that it is not 
sufficient to focus on reducing lock contention.  Only limited improvement can 
be achieved this way; higher speedups require a reduction in cache misses and 
cache invalidation traffic.  We then designed and prototyped a new allocator, 
called Lkmalloc, targeted for both traditional applications and server 
applications.  LKmalloc uses several subheaps, each one with a separate set of 
free lists and memory arena.  A thread always allocates from the same subheap 
but can free a block belonging to any subheap.  A thread is assigned to a 
subheap by hashing on its thread ID.  We compared its performance with several 
other allocators on a server-like, simulated workload and found that it indeed 
scales well and is quite fast but could use memory more efficiently.

REVIEWS:

This paper [emphasized] the cost of cache misses.  In this system, a shared 
data structure that was shared across multiple processors was essentially 
always being copied from one CPU's cache to another.  This "cache sloshing" 
resulted in additional CPU's being ineffective in increasing the throughput of 
the system.

ptw 1998-11-06



