           IMPROVING THE CACHE LOCALITY OF MEMORY ALLOCATION
                Dirk Grunwald;Benjamin Zorn;R. Henderson
                           SIGPLAN, 01/01/93
  SIGPLAN '93, Conference on PLDI, June 1993, Albuquerque, New Mexico
ftp://ftp.cs.colorado.edu/pub/techreports/grunwald/PLDI-93-locality.ps.Z

                              paper.gzh93
                                 draft
                             drj 1995-07-31


ABSTRACT:

The allocation and disposal of memory is a ubiquitous operation in most 
programs.  Rarely do programmers concern themselves with details of memory 
allocators; most assume that memory allocators provided by the system perform 
well.  This paper presents a performance evaluation of the reference locality 
of dynamic storage allocation algorithms based on trace-driven simulation of 
five large allocation-intensive C programs.  In this paper, we show how the 
design of a memory allocator can significantly affect the reference locality 
for various applications.  Our measurements show that poor locality in 
sequential-fit algorithms reduces program performance, both by increasing 
paging and cache miss rates.  While increased paging can be debilitating on any 
architecture, cache misses rates are also important for modern computer 
architectures.  We show that algorithms attempting to be space-efficient, by 
coalescing adjacent free objects show poor reference locality, possibly 
negating the benefits of space efficiency.  At the other extreme, algorithms 
can expend considerable effort to increase reference locality yet gain little 
in total execution performance.  Our measurements suggest an allocator design 
that is both very fast and has good locality of reference.

REVIEWS:

drj: 5 allocators, 5 programs, another Zorn paper.  The results are hardly 
surprising; Searching down a free list is disastrous for page and cache 
locality.  Allocators that can quickly recycle objects (eg, BSD buddy, 
QuickFit) have good cache locality, but they lose slightly in page locality.  
They claim that though BSD buddy has good speed characteristics, it is too 
profligate with memory to be efficient overall.  They remark that the GNU local 
allocator (Haertel's FSF GNU Malloc) strives quite hards to improve reference 
locality at the expense of time, and too much time is lost.  They advocate the 
approach of the QuickFit allocator (Weinstock, Wulf.  Quickfit: An efficient 
algorithm for heap storage allocation. ACM SIGPLAN Notices, 23(10):141-144, 
October 1988), which uses an array of freelists to handle small sizes and a 
general allocator to handle others.

ATTACHMENTS
   "Grunwald93.ps"
   "PLDI-93-locality.pdf"

