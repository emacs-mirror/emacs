           COMPACTING GARBAGE COLLECTION WITH AMBIGUOUS ROOTS
                            Joel F. Bartlett
                Digital Equipment Corporation, 01/02/88

                            paper.bartlett88
                               incomplete
                           gavinm 1996-11-21


ABSTRACT:

This paper introduces a copying garbage collection algorithm which is able to 
compact most of the accessible storage in the heap without having an explicitly 
defined set of pointers that contain all the roots of all accessible storage.  
Using "hints" found in the processor's registers and stack, the algorithm is 
able to divide heap allocated objects into two groups: those that might be 
reference by a pointer in the stack or registers, and those that are not.  The 
objects which might be referenced are left in place, and the other objects are 
copied into a more compact representation.

A Lisp compiler and runtime system which uses such a collector need not have 
complete control of the processor in order to force a certain discipline on the 
stack and registers.  A Scheme implementation has been done for the Digital WRL 
Titan processor which uses a garbage collector based on this "mostly copying 
algorithm.  Like other languages for the Titan, it uses the Mahler intermediate 
language as its target.  This simplifies the compiler and allows it to take 
advantage of the significant machine dependent optimizations provided by 
Mahler.  The common intermediate language also simplifies call-outs from Scheme 
programs to functions written in other languages and call-backs from functions 
in other languages.

Measurements of the Scheme implementation show that the algorithm is efficient, 
as little unneeded storage is retained and only a very small fraction of the 
heap is left in place.

Simple pointer manipulation protocols also mean that compiler support is not 
needed in order to correctly handle pointers.  Thus it is reasonable to provide 
garbage collected storage in languages such as C.  A collector written in C 
which uses this algorithm is included in the Appendix.

REVIEWS:

See rival.bartlett for code availability.



