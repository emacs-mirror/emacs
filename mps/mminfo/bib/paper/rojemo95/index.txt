       HIGHLIGHTS FROM NHC -- A SPACE-EFFICIENT HASKELL COMPILER
                             Niklas Rojemo
          Chalmers University of Technology, Sweden, 01/01/95
         ftp://ftp.cs.chalmers.se/pub/users/rojemo/fpca95.ps.gz

                             paper.rojemo95
                                 draft
                           richard 1996-08-08


ABSTRACT:

Self-compiling implementations of Haskell, i.e., those written in Haskell, have 
been and, except one, are still space consuming monsters.  Object code size for 
the compilers themselves are 3-8Mb, and they need 12-20Mb to recompile 
themselves.  One reason for the huge demands for memory is that the main goal 
for these compilers is to produce fast code.  However, the compiler described 
in this paper, called "nhc" for "Nearly a Haskell Compiler", is the one above 
mentioned exception.  This compiler concentrates on keeping memory usage down, 
even at a cost in time.  The code produced is not fast, but nhc is usable, and 
the resulting programs can be run on computers with small memory.

This paper describes some of the implementation choices done, in the Haskell 
part of the source code, to reduce memory consumption in nhc.  It is possible 
to use these also in other Haskell compilers with no, or very small, changes to 
their run-time systems.

Time is neither the main focus of nhc nor of this paper, but there is 
nevertheless a small section about the speed of nhc.  The most notable 
observation concerning speed is that nhc spends approximately half the time 
processing interface files, which is much more than needed in the type 
checker.  Processing interface files is also the most space consuming part of 
nhc in most cases.  It is only when compiling source files with large sets of 
mutually recursive functions that more memory is needed to type check than to 
process interface files.

ATTACHMENT
   "fpca95.ps"

