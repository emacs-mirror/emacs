             TEXAS: AN EFFICIENT, PORTABLE PERSISTENT STORE
             Vivek Singhal;Sheetal V. Kakkad;Paul R. Wilson
                University of Texas at Austin, 01/09/92
           ftp://ftp.cs.utexas.edu/pub/garbage/texaspstore.ps

                            paper.singhal92
                                 draft
                             ptw 1995-08-17


ABSTRACT:

Texas is a persistent storage system for C++, providing high performance while 
emphasizing simplicity, modularity and portability. A key component of the 
design is the use of pointer swizzling at page fault time, which exploits 
existing virtual memory features to implement large address spaces efficiently 
on stock hardware, with little or no change to existing compilers. Long 
pointers are used to implement an enormous address space, but are transparently 
converted to the hardware-supported pointer format when pages are loaded into 
virtual memory.

Runtime type descriptors and slightly modified heap allocation routines support 
pagewise pointer swizzling by allowing objects and their pointer fields to be 
identified within pages. If compiler support for runtime type identification is 
not available, a simple preprocessor can be used to generate type descriptors.

This address translation is largely independent of issues of data caching, 
sharing, and checkpointing; it employs operating systems' existing virtual 
memories for caching, and a simple and flexible log-structured storage manager 
to improve checkpointing performance.

Pagewise virtual memory protections are also used to detect writes for logging 
purposes, without requiring any changes to compiled code. This may degrade 
checkpointing performance for small transactions with poor locality of writes, 
but page diffing and sub-page logging promise to keep performance competitive 
with finer-grained checkpointing schemes.

Texas presents a simple programming interface; an application creates 
persistent objects by simply allocating them on the persistent heap. In 
addition, the implementation is relatively small, and is easy to incorporate 
into existing applications. The log-structured storage module easily supports 
advanced extensions such as compressed storage, versioning, and adaptive 
reorganization.

REVIEWS:

This paper describes a mechanism that is similar to what we suspect is used by 
Object Store, but it is not proprietary. It should be a good source of ideas on 
designing a persistent pool. Beause their target language is C++, they were 
forced to create a run-time type system for C++, but they note that there is 
work on standardizing such a system and that the GNU compiler can generate this 
information automatically (although there were bugs at the time this paper was 
written).

They have the concept of many separate pools, and imply a substrate similar to 
ours in support of them.

They do point out that their system would integrate much more easily under an 
external pager interface, rather than having to piggy-back on memory protection 
and signalling.

The paper also goes into some detail about disk-storage layout and particularly 
favors a log-structured file.

ATTACHMENT
   "texaspstore.ps"

