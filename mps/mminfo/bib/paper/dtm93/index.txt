MEMORY SUBSYSTEM PERFORMANCE OF PROGRAMS WITH INTENSIVE HEAP ALLOCATION
                  Amer Diwan;David Tarditi;Eliot Moss
                             CMU, 01/12/93
                             CMU-CS-93-227

                              paper.dtm93
                                 draft
                            nickb 1996-08-13


ABSTRACT:

Heap allocation with copying garbage collection is a general storage management 
technique for modern programming languages. It is believed to have poor memory 
subsystem performance. To investigate this, we conducted an in-depth study of 
the memory subsystem performance of heap allocation for memory subsystems found 
on many machines. We studied the performance of mostly-functional Standard ML 
programs which made heavy use of heap allocation. We found that most machines 
support heap allocation poorly. However, with the appropriate memory subsystem 
organization, heap allocation can have good performance. The memory subsystem 
property crucial for achieving good performance was the ability to allocate and 
initialize a new object into the cache without a penalty. This can be achieved 
by having subblock placement with a subblock size of one word with a write 
allocate policy, along with fast page-mode writes or a write buffer. For caches 
with subblock placement, the data cache overhead was under 9% for a 64k or 
larger data cache; without subblock placement the overhead was often higher 
than 50%.

REVIEWS:

nickb: A long paper, with lots of graphs and lots of detail. Basically they 
used a profiling/tracing tool to generate memory access traces, then ran them 
through a cache simulator with lots of different options. The whole thing took 
thousands of MIPS-years, as I recall. The interest to us is for applications 
with a high allocation rate, or when doing copying GC. The summary in the 
abstract is accurate.

ATTACHMENT
   "diwan.long.ps"

