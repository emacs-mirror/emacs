              STOP-AND-COPY AND ONE-BIT REFERENCE COUNTING
                             David S. Wise
      Indiana University, Department of Computer Science, 01/07/92
                                 TR360
          ftp://ftp.cs.indiana.edu/pub/techreports/TR360.ps.Z

                              paper.wise92
                                 draft
                             drj 1996-10-01


ABSTRACT:

A stop-and-copy garbage collector updates one-bit reference counting with 
essentially no extra space and minimal memory cycles beyond the conventional 
collection algorithm.  Any object that is uniquely referenced during a 
collection becomes a candidate for cheap recovery before the next one, or 
faster recopying then if it remains uniquely referenced.  Since most objects 
stay uniquely referenced, subsequent collections run faster even if none are 
recycled between garbage collections.  This algorithm extends to generation 
scavenging, it admits uncounted references from roots, and it corrects 
conservatively stuck counters, that result from earlier uncertainty whether 
references were unique.

REVIEWS:

drj: Quite a well put together paper.  Summary: not important, not urgent.
The paper is a description of a technique that builds primarily on three 
observations:  Stoye's observation that a 1-bit reference count can be held in 
the pointer rather than the object (W.R. Stoye, T.J.W. Clarke, A.C. Norman.  
Some practical methods for rapid combinator reduction.  Conf. Rec. 1984 ACM 
Symp. on Lisp and Functional Programming, 159--166) saving a memory access in 
some circumstances; Baker's obsveration that a uniquely referenced object can 
be forwarded with no forwarding pointer (H.G. Baker. Cache-conscious copying 
collectors.  OOPSLA '91 GC Workshop. (October 1991) paper.baker91), again 
saving a memory access in some circumstances; and Clark and Green's observation 
that "Less than 3% of LISP's nodes have reference counts above one" (D.W. 
Clark, C.C. Green.  A note on shared list structure in LISP.  Inf. Proc. Lett. 
7, 6 (October 1978), 312-315).  A further technique that this paper introduces 
is the observation that a garbage collection can accurately restore a reference 
count if that reference count has got "stuck".
Asides from gathering these techniques together the paper also discusses some 
of the timing considerations, primarily with regard to cache misses.  
Noticeably misses much consideration of the extra code required to maintain 
reference counts, and lacks real timing data, and no mention of finalization.

ATTACHMENT
   "TR360.PS"

