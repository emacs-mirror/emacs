        EARLY STORAGE RECLAMATION IN A TRACING GARBAGE COLLECTOR
                             Timothy Harris
                             ACM, 01/04/99
                  ACM SIG-PLAN Notices 34:4, pp. 46-53
          http://www.cl.cam.ac.uk/~tlh20/partitioned-gc.ps.gz

                             paper.harris99
                               incomplete
                            pekka 1999-06-28


ABSTRACT:

This article presents a technique for allowing the early recovery of storage 
space occupied by garbage data.  The idea is similar to that of generational 
garbage collection, except that the heap is partitioned based on a static 
analysis of data type definitions rather than on the approximate age of 
allocated objects.  A prototype implementation is presented, along with initial 
results and ideas for future work.

REVIEWS:

Build a graph of what classes can refer to what, based on the class 
definitions.  Partition it into strongly-connected components; these will form 
a DAG.  Trace objects in that order.  When you're finished with a partition, 
all white objects in it can be reclaimed, because objects in the following 
partitions can't refer to them.

I'm frankly surprised that he found so many partitions of non-trivial size in 
real program runs.  He implies partition 34 in the javac run is strings -- are 
the large partitions typically atomic classes?  (See Harris' comments in 
mail.pekka.1999-07-01.13-17 and the diagrams and .

This technique should be useable in real collectors (Treadmill -- uhg), just 
keep separate grey lists for each partition.

Moving the grey objects into the from-section in the presentation of Treadmill 
is a gratuituos change and breaks the analogy with moving collectors.

The point about roots at the start of section 5 is just wrong: there could be 
pointers to roots; they're just uninteresting since the roots are reachable 
anyway.

pekka 1999-06-28

ATTACHMENTS
   "partitioned-gc_ps.gz"
   "partitioning-after.ps"
   "partitioning-before.ps"

