     DESTINATION-PASSING STYLE AND GENERATIONAL GARBAGE COLLECTION
                     Perry Cheng and Chris Okasaki
                                07/11/96

                               paper.co96
                               incomplete
                            nickb 1996-12-10


ABSTRACT:

Destination-passing style (DPS) is a technique proposed by Wadler [13] and 
Larus [4] for compiling recursive construction functions -- such as map, 
append, take, and filter -- as loops. Although intuitively iterative, these 
functions are not naturally tail recursive because their recursive calls are 
followed by data construction. The DPS transformation converts these functions 
into tail recursive form by moving the data construction from after the 
recursive call to before the recursive call. This requires initializing one 
field of the data constructor to some dummy value, and then filling in the real 
value when it becomes available. Unfortunately, DPS clashes with generational 
garbage collection because these writes may cause objects in older generations 
to point to objects in younger generations. Generational garbage collectors 
typically detect such intergenerational refereces with write barriers, but 
write barriers are expensive enough to negate most of the advantages of DPS. We 
show how to reconcile DPS and generational garbage collection without using a 
write barrier, resulting in a simple and effective optimization that improves 
the running time of suitable programs by 10--27%.

REVIEWS:

Perry Cheng sent Nick Barnes this, along with the following source/asm example. 
I think the asm is Alpha.

  fun dup ([]) = []
    | dup (x::xs) = x :: (dup xs)


 .set noat
 .globl LCx_61446
 .data
  # gcinfo
 .globl LCx_61446_GCTABLE_BEGIN_VAL
LCx_61446_GCTABLE_BEGIN_VAL:

 .text
 .globl LCx_61446_CODE_END_VAL
 .globl LCx_61446_CODE_BEGIN_VAL
LCx_61446_CODE_BEGIN_VAL:
 .text
  .align 4
 .ent LCdup_tailed_61412
 # arguments : [$61359,$0] [$61437,$1] 
 # results    : [$61543,$0] 
 # destroys   :  $2 $1 $0
 # modifies   :  $2 $1 $0
LCdup_tailed_61412:
 .mask (1 << 26), -16
 .frame $sp, 16
 .prologue 1
 ldgp $gp, ($27)
 lda $sp, -16($sp)
 stq $26, 0($sp) # push_ret
 stl $1, 8($sp)
LCx_61582:
LCx_61544:
 lda $at, 12($11)
 cmpule $10, $at, $at
 beq $at, LCx_61583
LCx_61584:
 lda $10, 12($31)
 bsr $26, gc_raw
LCx_61583:
 beq $0, LCx_61545
LCx_61586:
 ldl $1, ($0)
 ldl $2, 4($0)
 lda $0, 16($31)
 ldah $0, 4096($0)
 stl $0, ($11)
 stl $1, 4($11)
 lda $0, 254($31)
 stl $0, 8($11)
 addl $11, 4, $0
 addl $11, 12, $11
 ldl $23, 8($sp)
 stl $0, ($23)
 addl $0, 4, $at
 stl $at, 12($sp)
 mov $2, $0
 ldl $at, 12($sp)
 stl $at, 8($sp)
 br $31, LCx_61544
LCx_61587:
 br $31, LCx_61546
LCx_61545:
 lda $0, ($31)
 ldl $23, 8($sp)
 stl $0, ($23)
 lda $1, 240($31)
LCx_61546:
LCx_61590:
 mov $1, $0
 ldq $26, 0($sp) # pop_ret
 lda $sp, 16($sp)
 ret $31, ($26), 1
 .end LCdup_tailed_61412

 .data
  # -------- label,sizes,reg
 .long LCx_61583
 .long 0x1007
 .long 0xb7ff1f9
 .long 0xb7ff1f8
  # stacktrace
 .long 0x30
  # worddata
 .long 0xffffffff
 .long 0xffffffff

 .text
  .align 4
 .ent LCdup_61358
 # arguments : [$61430,$0] 
 # results    : [$61535,$0] 
 # destroys   :  $3 $2 $1 $0
 # modifies   :  $3 $2 $1 $0
LCdup_61358:
 .mask (1 << 26), -16
 .frame $sp, 16
 .prologue 1
 ldgp $gp, ($27)
 lda $sp, -16($sp)
 stq $26, 0($sp) # push_ret
LCx_61591:
LCx_61536:
 lda $at, 12($11)
 cmpule $10, $at, $at
 beq $at, LCx_61592
LCx_61593:
 lda $10, 12($31)
 bsr $26, gc_raw
LCx_61592:
 beq $0, LCx_61537
LCx_61595:
 ldl $1, ($0)
 ldl $2, 4($0)
 lda $0, 16($31)
 ldah $0, 4096($0)
 stl $0, ($11)
 stl $1, 4($11)
 lda $0, 254($31)
 stl $0, 8($11)
 addl $11, 4, $3
 addl $11, 12, $11
 addl $3, 4, $at
 stl $at, 8($sp)
LCCALLLABEL_61578:
 mov $2, $0
 ldl $1, 8($sp)
 lda $27, LCdup_tailed_61412
 bsr $26, LCdup_tailed_61412
LCx_61600:
 ldgp $gp, ($26)
LCx_61596:
 mov $3, $1
 br $31, LCx_61538
LCx_61537:
 lda $1, ($31)
LCx_61538:
LCx_61599:
 mov $1, $0
 ldq $26, 0($sp) # pop_ret
 lda $sp, 16($sp)
 ret $31, ($26), 1
 .end LCdup_61358

 .data
  # -------- label,sizes,reg
 .long LCx_61600
 .long 0x1005
 .long 0xb7ff1f8
 .long 0xb7ff1f0
  # stacktrace
 .long 0x0
  # -------- label,sizes,reg
 .long LCx_61592
 .long 0x1005
 .long 0xb7ff1f1
 .long 0xb7ff1f0
  # stacktrace
 .long 0x0


ATTACHMENT
   "perry.ps"

