            THE INCREMENTAL GARBAGE COLLECTION OF PROCESSES
                       Henry G. Baker;Carl Hewitt
                                    
            ftp://ftp.netcom.com/pub/hb/hbaker/Futures.html

                             paper.baker77
                                 draft
                           richard 1996-07-16


ABSTRACT:

This paper investigates some problems associated with an argument
evaluation order that we call "future" order, which is different from
both call-by-name and call-by-value.  In call-by-future, each formal
parameter of a function is bound to a separate process (called a
"future") dedicated to the evaluation of the corresponding argument.
This mechanism allows the fully parallel evaluation of arguments to a
function, and has been shown to augment the expressive power of a
language.

We discuss an approach to a problem that arises in this context:
futures which were thought to be relevant when they were created
become irrelevant through being ignored in the body of the expression
where they were bound.  The problem of irrelevant processes also
appears in multiprocessing problem-solving systems which start several
processors working on the same problem but with different methods, and
return with the solution which finishes first.  This "parallel method
strategy" has the drawback that the processes which are
investigating the losing methods must be identified, stopped, and
reassigned to more useful tasks.

The solution we propose is that of garbage collection.  We propose
that the goal structure of the solution plan be explicitly represented
in memory as part of the graph memory (like Lisp's heap) so that a
garbage collection algorithm can discover which processes are
performing useful work, and which can be recycled for a new task.

An incremental algorithm for the unified garbage collection of
storage and processes is described.

ATTACHMENTS
   "Futures.ps"
   "Futures.pdf"

