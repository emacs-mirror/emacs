             THE VISUALIZATION OF DYNAMIC MEMORY MANAGEMENT
                    IN THE ICON PROGRAMMING LANGUAGE
                  Ralph E. Griswold;Gregg M. Townsend
             Department of Computer Science, The University
              of Arizona, Tucson, Arizona 85721, 22/12/89
                                TR 89-30
             ftp://ftp.cs.arizona.edu/icon/doc/tr89-30.pdf
             ftp://ftp.cs.arizona.edu/icon/doc/tr89-30.ps.Z

                               paper.gt89
                                 draft
                             drj 1997-04-14


ABSTRACT:

[Not the abstract, but from the Introduction]

1. Introduction

The Icon programming language [1] supports many types of data -- strings, 
records, lists, sets, tables, and so on. Data objects vary in size by type and, 
for some types, from value to value. Object size ranges from one byte to many 
thousands of bytes. Storage management is automatic. Space for an object is 
allocated when the object is created, and unused space is collected as 
necessary [2].

It is typical for Icon data objects to be created and used in a transient 
fashion, so that the space they occupy is needed only for a short period of 
time. Consequently, many Icon programs exhibit a substantial amount of "storage 
throughput".

The management of storage -- allocation and garbage collection -- is intended 
to be transparent to the programmer and user, placing the burden on the 
implementation. In most situations, the Icon programmer does not need to think 
about the allocation of storage or its consequences on program performance. 
Nonetheless, in cases where the amount of memory is limited or where programs 
require unusually large amounts of space for the data they manipulate, the 
management of memory may be a concern both to the programmer and user. 
Furthermore, since storage management is complicated and may require 
substantial resources, its performance is a significant concern in the 
implementation of Icon.

Because of the diversity of data types and the varying sizes of data objects, 
as well as a wide range of applica-tions with differing storage demands, it is 
difficult to characterize the behavior of storage management. As with many 
complex implementations, relatively little is known about what actually goes on 
in Icons storage-management system or how well it performs in practice. The 
problem is not so much in collecting data but in interpreting it.

These considerations motivated the memory-monitoring system for Icon that is 
described in this report. This system emphasizes the visualization of memory 
management -- allocation and garbage collection -- dynamically, as it takes 
place during the execution of Icon programs.

ATTACHMENTS
   "TR89-30.PS"
   "TR89-30.PDF"

