       COMPILER SUPPORT TO CUSTOMIZE THE MARK AND SWEEP ALGORITHM
            Dominique Colnet;Philippe Coucaud;Olivier Zendra
                            OOPSLA, 01/10/98
                           ISMM'98 pp.154-165
 http://www.acm.org/pubs/citations/proceedings/plan/286860/p154-colnet/

                              paper.ccz98
                                 draft
                            pekka 2000-02-09


ABSTRACT:

Mark and sweep garbage collectors (GC) are classical but still very efficient 
automatic memory management systems.  Although challenged by other kinds of 
systems, such as copying collectors, mark and sweep collectors remain among the 
best in terms of performance.

This paper describes our implementation of an efficient mark and sweep garbage 
collector tailored to each program.  Compiler support provides the type 
information required to statically and automatically generate this customized 
garbage collector.  The segregation of object by type allows the production of 
a more efficient GC code.  This technique, implemented in SmallEiffel, our 
compiler for the object-oriented language Eiffel, is applicable to other 
languages and other garbage collection algorithms, be they distributed or not.

We present the results obtained on programs featuring a variety of programming 
styles and compare our results to a well-known and high-quality garbage 
collector.

REVIEWS:

Generates mark, sweep and valid? routines for each type.  Conservative stack 
scan.

About 1.5 kB overhead per type can be a lot sometimes.  The performance is 
competitive with BDW, but note that they are partly-conservative, so a DBW with 
added type info would beat them.

pekka 2000-02-09



