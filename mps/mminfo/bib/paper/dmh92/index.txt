 COMPILER SUPPORT FOR GARBAGE COLLECTION IN A STATICALLY TYPED LANGUAGE
                  Amer Diwan;Eliot Moss;Richard Hudson
                             ACM, 01/07/92
             Proceedings of the 5th ACM SIGPLAN conference
    on Programming language design and implementation, pages 273-282
http://www.acm.org/pubs/articles/proceedings/pldi/143095/p273-diwan/p273-diwan.pdf

                              paper.dmh92
                               incomplete
                            tony 1999-04-19


ABSTRACT:

We consider the problem of supporting compacting garbage collection in the 
presence of modern compiler optimizations. Since our collector may move any 
heap object, it must accurately locate, follow, and update all pointers and 
values derived from pointers. To assist the collector, we extend the compiler 
to emit tables describing live pointers, and values derived from pointers, at 
each program location where collection may occur. Significant results include 
identification of a number of problems posed by optimizations, solutions to 
those problems, a working compiler, and experimental data concerning table 
sizes, table compression, and time overhead of decoding tables during 
collection. While gc support can affect the code produced, our sample programs 
show no significant changes, the table sizes are a modest fraction of the size 
of the optimized code, and stack tracing is a small fraction of total gc time. 
Since the compiler enhancements are also modest, we conclude that the approach 
is practical. 

ATTACHMENT
   "p273-diwan.pdf"

