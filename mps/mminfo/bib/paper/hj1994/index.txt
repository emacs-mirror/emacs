                HASKELL VS. ADA VS. C++ VS. AWK VS. ...
           AN EXPERIMENT IN SOFTWARE PROTOTYPING PRODUCTIVITY
                        Paul Hudak;Mark P. Jones
                Yale University, Department of Computer
                 Science, New Haven, CT 06518, 04/07/94
                 http://haskell.org/papers/NSWC/jfp.ps
         http://haskell.systemsz.cs.yale.edu/papers/NSWC/jfp.ps
                              (identical)

                              paper.hj1994
                               incomplete
                             drj 1998-12-17


ABSTRACT:

We describe the results of an experiment in which several conventional 
programming languages, together with the functional language Haskell, were used 
to prototype a Naval Surface Warfare Center (NSWC) requirement for a Geometric 
Region Server. The resulting programs and development metrics were reviewed by 
a committee chosen by the Navy.  The results indicate that the Haskell 
prototype took significantly less time to develop and was considerably more 
concise and easier to understand than the corresponding prototypes written in 
several different imperative languages, including Ada and C++.

REVIEWS:

Often cited.

.review.jonl: From a mail message (in fact forwarded by andyl in 
mail.andyl.1997-11-17.22-11(0)):

From: Jon L. White <jonl>
Date: Tue, 27 Dec 1994 18:31:38 -0800
To: lispers, dylan-discussion, ml-indirect
Cc: symbolic-processing, hackers, sp-sm, sp-ml
Subject: Productivity in Lisp, Redux!

I've just come into possession of a paper by Paul Hudak (Professor
at Yale) dated July 4, 1994 entitled "Haskell vs. Ada vs. C++ vs
Awk vs. ...", which purports to document a software productivity
evaluation carried on by ARPA in collaboration with ONR and NSWC
(Office of Naval Research, and Naval Survace Warfare Center.)
This experiment involved scoping out a realistic project---something
about building a 'geometric region server'---and giving the specs to
about a dozen or so groups using different programming languages and
technologies.

Hudak is of course biased, in that he has been developing a version
of Haskell for several years now---and in this "race" betwen about
10 progamming languages, his Haskell team did very well indeed.
(Although there seemed to be no ML entrants, Hudak mentions Haskell
and ML "in the same breath" . . .)

There was only one Lisp entrant---called "Relational Lisp", which
is ISI's enhancement to Common Lisp via "relational abstraction."
[Incidentally, ISI used to be solidly a Lucid Common Lisp user, but
during this past six months, they fell prey to Franz's "Big Lie",
that LCL is "dead, and you'd better convert over to Franz now."
They "converted" in the second week of November.  Ah, too bad they
couldn't have gotten a preview of the November 23 Press Release
from Harlequin . . .]

Lisp clearly won out in the "Development time" measure!  (and it
scored 2nd or 3rd in two other measuers!)  Here are a few results:

Development time, in hours:

Haskell[1]  -- 10   Haskell[2] --  8    Relational Lisp -- 3
Ada   -- 23  Ada9X      -- 28    C++      -- ??

?? = [the ONR guy who did the C++ implementation had *already* done
the Awk version; but he still didn't report his total development
time.  Sound familiar?]

Lines of code

Haskell[1]  --  85   Haskell[2] -- 156 Relational Lisp --  274
Ada  -- 767  Ada9X      -- 800 C++  -- 1105



I've been in this business a looooooooong time (the Lisp business.)
And although we feel, fundamentally, that the use of Lisp leads to
shorter coding/production times, there are precious few unbiased
studies that one can turn to.  This one sponsored by ARPA and ONR
was clearly quite expensive, and perhaps is a little less realistic
than the mega-programming projects involving thousands of programmers.

Yet . . . the result is serious, probably unbiased, and certainly
quite favorable to our cause!



-- JonL --


ATTACHMENT
   "jfp.ps"

