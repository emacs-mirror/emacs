                   SELF ADJUSTING BINARY SEARCH TREES
                             Sleator;Tarjan
                             ACM, 01/07/85
    Journal of the ACM (JACM), Vol 32, No. 3, July 1985, pp 652-686

                               paper.st85
                               incomplete
                           gavinm 1998-04-17


ABSTRACT:

The splay tree, a self adjusting form of binary search tree, is developed and 
analyzed.  The binary search tree is a data structure for representing tables 
and lists so that accessing, inserting, and deleting items is easy.  On an 
n-node splay tree, all the standard search tree operations have an amortized 
cost time bound  of O(log n) per operation, where by "amortized time" is meant 
the time per operation averaged over a worst-case sequence of operations.  Thus 
splay trees are as efficient as balanced trees when total running time is the 
measure of interest.  In addition, for sufficiently long access sequences, 
splay trees are as efficient, to within a constant factor, as static optimum 
search trees.  The efficiency of splay trees comes not from an explicit 
structural constraint, as with balanced trees, but from applying a simple 
restructuring heuristic, called splaying, whenever the tree is accessed.  
Extensions of splaying give simplified forms of two other data structures: 
lexicographic or multidimensional search trees and link/cut trees.

REVIEWS:

.review.drj: The key theorem of the paper is Theorem 1 (Balance Theorem).  This 
states that for a splay tree with n elements then any sequence of m accesses 
has total access time O((m+n)log n + m).  An iteration in particular (m=n) will 
have time O(n(log n) + n).  drj 1998-09-18

ATTACHMENT
   "withington.pdf"

