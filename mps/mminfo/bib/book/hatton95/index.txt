            SAFER C: DEVELOPING SOFTWARE FOR HIGH-INTEGRITY
                      AND SAFETY-CRITICAL SYSTEMS
                               Les Hatton
                         McGraw Hill, 01/01/95
                          ISBN: 0-07-707640-0

                             book.hatton95
                                 draft
                             drj 1996-07-01


REVIEWS:

nickb:

I have recently finished reading this book (loaned by Richard
Brooksby). It's generally excellent, showing how to make software
development in C far safer than the norm. IMO it should be required
reading for all C programmers.

The principal approach taken is the development of a programming
standard which avoids illegal, undefined, unspecified, and
implementation-defined code, and the _automatic_ enforcement of that
standard using suitable tools. Unsurprising, given that Hatton works
for Programming Research Ltd (who make tools for static code
analysis), but powerfully argued and hard to fault.

The book has a strong logical structure, and the style is fairly
concise -- a welcome change for anyone tired of the "American College
Text" style so widespread these days (cf "Writing Solid Code"). The
British idiom and sense of humour will doubtless irritate foreigners
just as much as a USAmerican "sense of humor" does non-USAmericans.

Hatton provides detailed statistics on the prevalence of bad coding
practice, even in ISO 9001 certified companies and in safety-related
packages (e.g. references to undeclared functions once in every 41
executable lines). He also has plenty of stories and anecdotes showing
how bad the consequences of low-quality code can be. There's a closing
chapter on the legal issues involved in software quality.

The bottom line is this:

- Why make your products from faulty source code when automatic tools
  exist which can quickly and efficiently identify those faults?



