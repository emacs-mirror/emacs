                      THE ART OF SOFTWARE TESTING
                           Glenford J. Myers
                      John Wiley & Sons, 01/02/79
                            ISBN: 0471043281

                              book.myers79
                               incomplete
                            nickb 1996-08-05


ABSTRACT:

Given the tremendous amount of time and money spent in testing computer 
programs, and given the serious consequences of program errors in computing 
systems, one would expect that software testing would be a highly developed and 
widely understood skill.  Actually, this is not the case ar all.  Less seems to 
be known about software testing than about any other aspect of software 
development.

This books fills the gap in professional literature and provides a practical, 
rather than theoretical, discussion of the purpose and nature of software 
testing.  While the main emphasis of the book is on methodologies for the 
design of effective test cases, it also comprehensively covers the 
psychological and economic issues that are essential to the understanding of 
program testing.  In addition, The Art of Software Testing provides pertinent 
information and practical advice on the managerial aspects of testing, test 
tools, higher-order testing, debugging, and code inspections.  The important 
concept of non-computer-based code walk-throughs or inspections is discussed 
from a technical "how-to-find-errors" point of view rather than from a 
procedural or managerial aspect.

The Art of Software Testing contains many new ideas and techniques which are 
illustrated with examples.  Programmers at all levels, and programming 
students, will find the comprehensive information, as well as the formidable 
inspection checklist, the self-assessment test, and the up-to-date information 
on existing literature in the field, indispensable.

"If the material allows one to detect just one more bug in one program, the 
price of the books will have been recovered many times over." - from the 
Preface

REVIEWS:

Nick B: The canonical book on Software Testing, unsurpassed in 17 years. I 
found it most valuable in providing a conceptual framework for testing: why do 
we test, what is a successful test, who should write tests, what things to test 
for. It also classifies testing and discusses approaches to testing in each 
class, and has some analysis of defect rates, testing effectiveness, &c. If you 
want to get into technical detail (e.g. how to write a test framework), it's 
too dated and too brief, but there are other more modern books for that. It's 
concise (177 pages) and well-written. Read it.



