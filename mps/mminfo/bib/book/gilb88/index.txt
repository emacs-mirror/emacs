             PRINCIPLES OF SOFTWARE ENGINEERING MANAGEMENT
                                Tom Gilb
                        Addison-Wesley, 01/01/88

                              book.gilb88
                                 draft
                           richard 1994-09-01


ABSTRACT:

This book is designed to help software engineers and project managers to 
understand and solve the problems involved in developing complex software 
systems. It provides practical guidelines and tools for managing the technical 
and organizational aspects of software engineering projects.

Part One explains the critical success factors for software, and introduces 
methods including:
  - specification (using results-oriented quality and resource metrics) 
  - finding and evaluating solutions 
  - evolutionary planning and delivery 
  - inspection for quality and productivity 

Part Two gives detailed guidelines for implementing these methods, using a case 
study as an example throughout. Part Three shows in detail how the methods can 
improve productivity, reliability, estimation, deadline pressure, and 
motivation. It concludes with a set of `Software Engineering Templates' showing 
how to quantify software qualities, and further case studies illustrating 
inspection
experience and production planning.

Tom Gilb is an independent consultant who includes many of the world's largest 
companies among his clients. He therefore has a wealth of practical experience 
on which to draw in teaching organizational improvement and software design.

REVIEWS:

NOTES

Key Concepts

A project can't succeed unless it's clear what success means.

Define clearly what you are trying to achieve.  Don't include any hint
of solution in your goals.  If there's more than one statement, you're
probably writing down a solution; find the common goal.

Define the critial attributes
that the solution must have in order to succeed.  Quantify
them, and define how to measure them.  Use inspection to make
sure you're getting them right.  This defines the quality of your
solution.

Look for solutions.

Evaluate the solutions with respect to the critical attributes.

Functional Specification

Attribute Specification

Finding Solutions

Solution Evaluation

Inspection

Evolutionary Delivery

Don't say `How much can we deliver within our constraints?'.  Say `How
little can we expend to produce a useful result.'

We are incapable of accurately estimating the costs and planning for
large units.  Concentrate on short-term results, and keep long-range
plans as rough overviews.  Refine them as necessary based on the
experience gained from short-term targets.

Don't start from scratch, even if the current system is bad.
Gradually<EM>evolve</EM>the system into the new improved one in
easy stages.



