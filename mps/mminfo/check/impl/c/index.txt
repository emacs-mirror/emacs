                       CODE INSPECTION CHECKLIST
                              check.impl.c
                             temporary doc
                           gavinm 1996-06-26

.purpose: This checklist interprets rule.impl.c and focuses on major and common 
defects.  This is a far more dynamic document than rule.impl.c and suggestions 
are welcome.  Each checklist item references the rules it enforces.
[This paragraph is currently lies from start to finish.  rule.impl.c is 
obsolete.  This checklist was backwards-generated from rule-less reviews.  
Hence, not all questions reference rules.  This will change.  Should I worrry 
that the paragraphs aren't single elements? -- GavinM] 

.other: See also book.maguire93 and mail.richard.1994-11-08.14-30.

Common Major Defects

.assert: Do all external or "pivotal" functions have argument checking 
assertions?  Is all argument checking in assertions?  Is the code protected 
against other ways of receiving unchecked data?

.redundant: Is all code used and useful (e.g. function, variable, type, 
#define, parameter, struct/union/enum member, initialisation, cast)?

.setup: Has the file used any extraordinary setup (#define or #include)?  Has 
it been documented?  Could it have been avoided?

.error: Are all error/status/exception returns being tested correctly 
(rule.impl.c.return)?  Are exception returns and normal returns distinct 
(rule.impl.c.error)?  Is error information kept where appropriate?  Are error 
codes accurate?

Uncommon Major Defects

.req: Does all requirement-specific code reference its requirement?  Are all 
requirements met?

.paranoid: Are all paranoia checks actually necessary?

.clear: Is all code clear and idiomatic (as opposed to "a funny way of doing 
it")?

.init: Will the code behave properly before module initialisation? 
[Assert-only? -- GavinM]

.interrupt: Will the code interact correctly with interupts, tickles and 
re-entrancy?

Common Minor Defects

.doc: Is all code whose purpose might be unclear or misleading clearly 
commented (rule.impl.c.subtle, rule.impl.c.doc.missing)?  Are all comments in 
the right place (guide.impl.c.format.comment.*)?  Are the comments clear and 
accurate (rule.impl.c.doc.update)? 

.static: Are all static (file-scope) variables documented and of the correct 
form (guide.impl.c.naming.ident.static)?  Do they need to be static 
(rule.impl.c.no-static)?

.repeat: Where the same result is needed several times, is the calculation only 
performed once?  Are utility functions used where appropriate?

.domain: Are all domain restrictions documented?  Do functions handle all 
values in their domain (rule.impl.c.cover, rule.impl.c.range)?  Are zero or 
NULL handled or blocked?

Uncommon Minor Defects

.macro: Do all macro methods have function definitions 
(rule.impl.c.macro.fun)?  Are they all protected by DEBUG_NOINLINE 
(rule.impl.c.macro.control)?  Do all multi-statement macros use M_BEGIN/M_END 
(rule.impl.c.macro.multi)?  Are all macro parameters in parentheses where 
appropriate (rule.impl.c.paren)? 

.header: Are all headers present and correct (rule.impl.c.doc.leader)?

.extern: Are all extern (global) variables documented and of the correct form 
(guide.impl.c.naming.ident.extern)?  Do they need to be exported?

.interface: Have all interface requirements or pre-requisites been documented?

.issue: Are all outstanding issues identified (using @'s) and sufficiently 
documented?  Do they reference a corresponding issue?

.constant: Are all "magic numbers" assigned to constants and documented 
(rule.impl.c.magic, rule.impl.c.constants)?

.tag: Are struct, union or enum tags suffixed correctly 
(guide.impl.c.naming.ident.*)?  Are corresponding typedefs used wherever 
possible?

.format: Are the spacing and indentation correct (guide.impl.c.format, 
rule.c.impl.style)?

.log: Are all failures or abnormal conditions logged?  [What does "logged" 
mean? -- GavinM]

.union: Is it clear what union fields are for?

.type: Are the types used for variables, parameters and casts appropriate?

.simplicity: Are the interfaces or protocols as simple and generic as is 
appropriate?

.standard: Are existing rules and standards sufficient for this sort of coding?

