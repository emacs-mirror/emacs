               C CODE REVIEW CHECKLIST: CONVENTIONS ROLE
                        check.impl.c.convention
                            incomplete check
                           gavinm 1996-07-26

Scope: This checklist supports the checking of C code within the Conventions checking 
role (see role.check.conventions).

Summary: Does the product document comply with all appropriate rules, guidelines, and standards.


General

.header: Does the file have a header comment including Hope name, title, tag, 
and copyright?

.adt: Are all abstract data types (for compound types) defined as incomplete 
structure pointers?

.char: Does the source file consist only of legal source characters (i.e. those 
in standard.ansic section 5.2.1 except horizontal tabs, vertical tabs, and form 
feeds, with end-of-line indicated as a new-line)?

.space.punct: Are all commas and semi-colons followed by white-space?

.space.op: Are all operators surrounded by white-space, except for indicating 
tight binding?

.section: Are code sections preceded by two blank lines and a banner comment?  
(guide.impl.c.comment.banner)

.para: Are code paragraphs preceded by one blank line, and optionally by a 
paragraph comment?  (guide.impl.c.comment.para)

.comment.column: Do column comments start at or after column 32 and use only 
one line?  (guide.impl.c.comment.column)

.indent: Are code blocks, expression/statement continuations, and macro bodies 
indented by two characters?  (guide.impl.c.indent)

.brace: Are braces either block (aligned with control statement) or One True 
Brace (open after control statement, end as for block)?


Inclusions

.include.platform: Are included headers all platform-independent or specific to 
the platform the file is specific to?

.include.lib: Are ANSI routines accessed only via lib.h (except in lib*.c)?


Naming

.name.fat: Is the base filename no more than eight characters long, and only 
lower-case letters and digits?

.name.adt: Are source and header files for abstract data types given names 
derived from the type name?

.name.trunc: Are all abbreviations simple truncations, or initials?

.name.multi: Are multi-word names made with capitalisation and not underscores?

.name.export: Do the names of module exports commence with the module 
identifier?

.name.extern: Do identifiers commence with an upper case letter iff they have 
external linkage?

.name.tag: Are struct/union/enum tags suffixed with Struct/Union/Enum?

.name.compound: Are struct/union types suffixed with Struct/Union?

.name.macro: Are function-style/constant macros named as the corresponding 
method/constant would be and special macros all in upper case?

.name.method: Do method names commence with the name of the type on which they 
operate?

.name.pred: Do methods have names of the form <ADT>Is<adjective> iff they are 
predicates returning Bool? 

.name.valid: Do method have names of the form <ADT>IsValid iff they are 
validation methods?

.name.set: Do method have names of the form  <ADT>Set<noun-clause> iff they are 
setter methods?

.name.get: Do getter methods have names of the form <ADT><noun-clause>?

.name.param: Are returned/modified parameters suffixed with Return/IO?


