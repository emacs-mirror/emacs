                  LACK OF A WRITTEN DEBUGGING STRATEGY
                          issue.debug-strategy
                        obsolete unknown defect 
                             dsm 1995-08-22

Urgency: 0 - unknown
Importance: 0 - unknown
Discoverer: dsm
Discovery date: 22/08/95 09:02:30
Discovery process: Worry
Locaction: general


DESCRIPTION:

We have not thought much about a debugging strategy.

ROOT CAUSE:



SUGGESTIONS:

richard:
We need to examine requirements
- examine debugging requirements of each client we currently have
 - ourselves
 - interaction with Dylan environment and Dylan debugger?
 - how do we get information out of the RIP?
 - RIP customer problems?  Can we extend their ability to debug?
- think about what it'll be like with external customers
- think about the support process and how we'll get information

Here are some ideas anyway:
Backtrace
- dump state (in structured way)
- can be triggered on assertion or other failure
- send this by mail for remote debugging

Event logging  
- circular buffer of event codes in memory.
- dumped as part of backtrace

Post-mortem/diagnostic tools
- applied to backtrace to help analyse problem
- could apply describe/other methods to raw dump

Home grown debugger
- interact with live system
- how does it connect (sockets? shared mem? /proc? spy? debugging process?)
- can apply to backtrace to do post-mortem analysis
- can we adapt or extend gdb? (maybe not on NT)

Data structure support
- extend signatures to include more debug info
- chain objects together for debugger/backtrace
- "commands" provided by each module to debugger


PROCESS SUGGESTIONS:



Resolution: See request.mps.170336


