                  GUIDELINES FOR REQUIREMENT DOCUMENTS
                               guide.req
                             incomplete doc
                            nickb 1997-06-20

INTRODUCTION

.intro: This document contains guidelines for formatting requirements documents 
for Memory Management projects.

.readership: This document is intended for anyone involved in requirements 
management, either with the MM Group, or among its clients.

.hist.0: Nick Barnes created version 0 of these guidelines as a place to put 
global stuff that didn't really belong in req.epcore (1996-09-12).

.hist.1: Gavin Matthews tidies it up as part of release.process.baseline.  
1997-06-20


GUIDELINES 

.text: A requirements document is basically a text document, so should follow 
guide.text. 

.head: The head of a requirements document should contain enough information 
that non-MM people can make sense of it. For instance, there should be pointers 
to goals and planning documents, a clear statement of scope, and a pointer to 
these guidelines.

.rule: The requirements should follow rule.req, of course.

.req: Each requirement is tagged and is followed by a description, a category, 
and a source reference (on separate lines).

.cat: The categories are:

  .cat.critical: critical: The requirement is critical to the project.  If the 
requirement is not met, the project can be said to have failed.

  .cat.essential: essential: The requirement is essential and must be met or 
renegotiated.

  .cat.optional: optional: The requirement will be met if at all possible, but 
failure to meet it does not cause the project to fail.

  .cat.nice: nice: Meeting the requirements is recognised as a "good thing" and 
will be attempted if the cost is low.

  .cat.unknown: unknown: The category of the requirement is unknown and needs 
to be resolved.


DEFINITIONS

.def: A requirement is a specification of what a product is expected to acheive 
in a specific release or product version.  It can be either functional (see 
.fun) or attribute (.attr).


Functional requirements

.fun: A functional requirement specifies some aspect of functionality or 
feature which must be entirely present to be at all useful.

.fun.satis: A function requirement has a boolean satisfaction.  It should be 
possible to determine whether a product satisfies a functional requirement (to 
some confidence).


Attribute Requirements

.attr: An attribute requirement specifies some quantitative aspect of product 
behaviour which can be specified numerically.

.attr.satis: An attribute requirement's satisfaction level should be 
measureable for a given release of the product.

.attr.plan: An attribute requirement should be associated with a planned 
satisfaction level for any product version.

.attr.now: If appropriate, an attribute requirement should be associated with a 
historical satisfaction level, for use in planning.

.attr.worst: If appropriate, an attribute requirement should be associated with 
a worst acceptable satisfaction level for a given product version.  This should 
be less than or equal to the planned level (see .attr.plan).

.attr.best: If appropriate, an attribute requirement may be associated with a 
best possible satisfaction level, based on theoretical results or market 
comparison.  This should be greater than or equal to the planned level (see 
.attr.plan).

.attr.metric: If appropriate, an attribute requirement specification should 
include a specification of a metric to assess satisfaction.


Requirement Sets

.set.min: A set of requirements should be minimal to meet the goals.  Ask 
yourself: Would it be possible to meet these goals without technically meeting 
all these requirements?  If so, there is a redundant, or poorly specified 
requirement.

.set.suff: A set of requirements should be sufficient to meet the goals.  Ask 
yourself: Is there a perverse way to meet the requirements but leave the goals 
unsatisfied?  If so, there is a missing requirement.


TESTS

.test: If what you have is a requirement, then the answer to the following 
questions should be "yes":

.test.specific: Is the requirement specific about what is to be acheived?

.test.measure: Is the requirement's satisfaction measureable?

.test.version: Is the requirement related to a specific product version or 
release?

[This list doesn't contain elements such as: 
  - Satisfying the requirement is the responsibility of a certain person;
  - The satisfaction of the requirement is a reasonable burden on development.
these should be reflected somewhere else. -- GavinM 1997-03-03]

