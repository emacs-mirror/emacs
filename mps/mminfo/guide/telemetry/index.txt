                      GUIDE TO ANALYSING TELEMETRY
                            guide.telemetry
                              obsolete doc
                            pekka 1998-09-23

INTRODUCTION

.intro: This document describes various ways of pulling information out of 
event logs.  It doesn't concern itself very much with generation thereof, for 
that, see symbol.mps.c.mps_telemetry_*.

.readership: MPS developers (sic, this is not for clients).


Document history

.hist.0: Pekka wrote instructions on using lumberjack and Unix tools 1998-09-23.
.hist.1: Pekka updated with new lumberjack features 1998-10-01.


LUMBERJACK

.lumberjack.name: lumberjack: one who fells, prepares, or conveys lumber 
(logs).  [Blame Richard Brooksby for this.]

.lumberjack.overview: lumberjack is a simple C program that reads event logs 
and produces verbose listings (-v), segment snapshots (-s), and trace 
statictics (-t).  It reads the log from mpsio.log in the current directory, 
unless otherwise specified by the -f option.

.lumberjack.make: Check out compound MMusers_richard, create links to (or add 
copies of) eventcom.h, eventdef.h, mpstd.h, and ossu.h (if on SunOS).  Do
  cc lumberjack.c table.c 


Formats

.lumberjack.format: Listings and snapshots can be produced in three different 
formats, selected using the -S option.

.lumberjack.format.human: Specifying -S (this is the default) produces output 
that is formatted to be human-readable.  The output is formatted in regular 
columns, names and labels are given where possible, addresses and sizes are 
given in hex, and all other numbers in decimal.

.lumberjack.format.cdf: Specifying -SC produces output in Comma Delimited 
Format, which can be imported into various database and spreadsheet packages.  
Fields are separated by commas, all numbers are given in decimal, and labels 
are enclosed in double quotes.  We assume the consumer has very limited 
programming capabilities, so events are designated by the numeric event codes 
(more suitable for comparison), but labels are given where possible.  [This 
needs some tuning with a real example.]

.lumberjack.format.lisp: Specifying -SL produces output that is convenient for 
reading into a Lisp program.  Each event is enclosed in parentheses, events are 
given in symbol syntax, all numbers are given in hex (for compactness), and 
strings are enclosed in double quotes.  Since the consumer has full programming 
capabilities, we're letting it do its own label lookups.


Verbose Listings

.lumberjack.listing: The -v option produces a verbose listing of the events, 
similar to dumper.c, but with labels shown instead of any labelled value.  (We 
assume labelling 0 is intended to mark a point in time, and do not replaced 
zeros with such labels.)


Segment Snapshots

.lumberjack.snapshot: The -s option lists of all the segments just before the 
given (event) time.  The listing is in address order, and gaps between segments 
are also shown, as lines with just address and size.


Event Frequencies

.lumberjack.events: The -e option counts how many times each of the given 
events was emitted.  The argument specifies the event types in the form: 
<name>[(+|-)<name>]..., where the first name can be 'all', and the rest are 
names of event types.  '+' means count that event type, '-' means don't count.  
This can be modified by the -b switch to output the counts in each bucket, see 
.lumberjack.buckets below.


Memory Statictics

.lumberjack.memory: The -m option measures the amount of memory allocated by 
the program.  This can be modified by the -b switch to output the minimum and 
the maximum during each bucket, see .lumberjack.buckets below.  If the argument 
is specified as 0, then the amounts are output numerically.  If a non-zero 
argument is given, it is used as a scaling factor (that many bytes per 
character position) to produce an ASCII graphics representation of the 
allocation.  One would usually run lumberjack first with "-m 0" unbucketized to 
discover a suitable scaling factor.


Trace Statistics

[NickB wrote this, and I just left it in.  I don't know what it does.  pekka 
1998-09-23]


Buckets

.lumberjack.buckets: The -b option modifies the measuring features (-e, -m) to 
produce a time series with separate measurements for each bucket.  The argument 
gives the size of each bucket in event time.  One would typically run 
lumberjack with "-e all -m 0" unbucketized first to discover the interesting 
event types and the range of the event clock.


Random Options

.lumberjack.endianness: The -^ option causes lumberjack to swap the endianness 
of the words it reads from the event log.  This means that lumberjack can 
process logs produced on any platform (except logs from the os.o1 platforms, 
which cannot be processed at all).

.lumberjack.partial: The -p option informs lumberjack that it's dealing with a 
partial logs, and stops it complaining when it sees references to pools and 
segments that it did see created.  [This could be extended to reconstruct 
entries for such entities, but it's probably not worth the trouble.  pekka 
1998-09-23]


UNIX TOOLS

.extract: To see the full sequence of events around some interesting point in 
time, use something like
lumberjack -v | tail +9999 | head -50
Or
lumberjack -v | sed -n 1000,1050p

.filtering: [ef]grep can be used to filter listings produced by lumberjack, 
e.g., for events of particular type or events concerning a particular object.  
It is often helpful to use the -c option first to count the number of lines in 
the result, because real logs are unmanageably large.  It can also be useful to 
specify the -n option to get line number that can subsequently be used to get 
extracts of the full log as described in .extract.


