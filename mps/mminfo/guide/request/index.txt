                     GUIDE TO MM EVOLUTION REQUESTS
                             guide.request
                              draft guide
                           gavinm 1997-06-11

INTRODUCTION

.scope: This document describes conventions for fields in request documents.  

.readership: This document is intended for any user of MM Evolution.

.update: See proc.darwin.update.

.source: See also the Darwin documentation.


CONVENTIONS


Request Summary

.summary: The summary field is very important, as it will be used by people to 
get an initial understanding of the request.  It is the description that will 
appear most often on the screens of managers.

The goal of the process is to solve the problem that the request indicates.  
The goal is _not_ to fix a specific defect without solving the problem.  With 
this in mind, the summary should meet the following requirements:

  .summary.req: indicate the task which cannot be achieved, goal which cannot 
be reached, or requirement which is not met;

  .summary.sol: allow one to determine whether the problem has been solved.

To this end, a summary must be a statement which, when true, indicates that the 
problem has _not_ been solved, or requirement _not_ met.  The rule will be that 
a request cannot be closed until the statement in the summary is false (see 
proc.request.close).

The trick is to choose an _appropriate_ level of summary, lower than "product 
fails to meet requirements" but higher than "line 15 of foo.c should read 
'bar'".  A good example is "Lots of allocation between reserve and commit 
causes abort, impacting req.dylan(5).fun.alloc."  This replaced the previous 
summary, which was "Assertion failed: foo bar line something".  I think it 
would be burdensome to ask everyone to work out and fill in the requirement 
tag, so this part is optional, provided the statement is clear.

This field appears on views, so it's best to keep it concise -- no more than 
about 60 characters.  Avoid verbiage such as "there's a problem in..." but 
mention severity if possible, as in "abort during...".  Don't use the word 
"crash" to mean any sort of failure.  Don't describe the task to be done.  
Someone else is going to have to _decide_ what to do -- make it as easy as 
possible for him.  He should be able to use the summary to decide whether or 
not he needs to look at the entire document.

For the purposes of MM Evolution requests, use the following definitions:

  abort: terminates abnormally, e.g. assertion failure, bus error, etc.
  fail: returns unsuccessfully, e.g. by returning an error code.
[what about other failures to meet a specification, e.g. returns wrong result, 
takes too long, pauses for too long.  What about failure to run at all, e.g. 
manufacturing defects (bad CDROM), delivery defects (lost in the post), linkage 
defects (e.g. missing symbols).  Errors in documentation?  drj 1999-08-02]


Request Type

.type: Request type.  It's a "fix" if the problem is a defect -- a failure of 
the product to meet its intended specification.  [It's hard to know what the 
intended specification is at the moment -- we don't have a canonical place to 
put it.  It should, in future, be referred to by the release document.  richard 
1997-03-14]  It's a "feature" if the intended specification doesn't cover this 
case, i.e. a change in the specification might be required.  For example: 
"bugs" are usually defects, additions are usually features, but omissions are 
defects.  New requirements are features.


Request Description

.desc: Unfortunately, the "Request description" field must be edited by several 
different people and there are several things that go in it.

.desc.desc: Problem or Requirement Description.  At the initial stage, the 
problem or requirement must be described from the perspective of the customer 
of the product.  Enter a heading of "PROBLEM DESCRIPTION" or "REQUIREMENT 
DESCRIPTION", add a tag ".problem" or ".req", and enter what problem was 
observed, or what new requirement does the customer have.  Sign your text with 
your username and the date, e.g. "richard 1997-02-28".  Here is an example:

  PROBLEM DESCRIPTION

  .problem: Tony's Dylan process aborted out.  Running under the debugger,
   he found it had exited with the message "**** MMReserveObject:3: request
   for 8 bytes failed -- aborting" in the Dylan run-time system.  richard 
1997-02-28

.desc.sugg: To add solution suggestions, add a heading "SUGGESTIONS" in the 
"Request description" field, add a ".sugg" tag, and fill in your suggestion 
below.  Sign your text with your username and the date, e.g. "richard 
1997-02-28".  If you have several solutions, list them all, and tag them 
separately with ".sugg.<tag>".  It may be helpful to list short-term solutions 
first, and indicate their nature clearly.

.desc.anal: Any analysis of the request should be entered under the heading 
"ANALYSIS", and tag ".analysis".  Add your user name and date, e.g. "richard 
1997-03-14".  The analysis should explain the problem or requirement in 
"internal" terms.  What is this really about?  What is going on?  Here's an 
example (from request.dylan.170170):

  PROBLEM ANALYSIS

  .analysis: This was generated by code previously written by the MM Group
  (but passed on to Dylan) in order to make using the MPS interface easier.
  It indicates that the MPS had simply refused a request for memory.  Tony's
  heap has grown to 32Mb which was the limit in
  MMsrc!mpmconf.h(MM_dylan_incremental.1) ARENA_SIZE.  richard 1997-02-28

.desc.sol: Any solutions arising from request definition should come under the 
heading "SOLUTIONS", and be tagged ".sol.*".  These descriptions should be 
enough to make an estimate of the effort required, assess the impact on other 
changes, and decide when or if to schedule the changes.  [Stopped here -- 
richard 1997-03-14.]  Add your username and date after _each_ solution.


Underlying Issues

.under: You may have a suggestion for how this kind of problem can be avoided 
in future.  The only reason for stating it is to get something done about it, 
so make a constructive suggestion.  If it's a significant change in the process 
then consider raising a separate request in the "process" product, or at least 
mailing the person responsible for process with your suggestion.  Don't rely on 
your write-up within this request being spotted and acted upon.  Sign your text 
with your username and the date, e.g. "richard 1997-02-28".  


Related Requests

.related: Related requests should be entered one per line.  Include the tag, a 
doclink, and some information which indicates the relationship.  The last could 
be the summary of the other request if that makes the relationship clear.  Add 
the appropriate reverse links as well.  E.g.:
  request.product.170179: Support DEC Alpha and OSF/1 (platform.o1algc)
  request.product.170180: Support HP PA-RISC (Snake) and HP/UX
  request.product.170181: Support SGI MIPS R4K and Irix 


Contacts

.contact: If you wish to be informed of modifications to a request document, 
enter your name in the contacts field.  If you are creating this request on 
behalf of someone internal whom you believe wishes to be informed of 
modifications, enter his name.  Otherwise, leave the contacts field blank. 
Note: Do not enter any external addresses or aliases as contacts.  This field 
is used for the automatic generation of email.

