                      GUIDE TO MM REFERENCE TOOLS
                            guide.web.tools
                             incomplete doc
                           gavinm 1998-11-23

INTRODUCTION

.purpose: This document describes the various tools that have been written to 
create the MM Reference web pages out of the database.  It is intended to 
permit the use and maintenance of these tools.

.readership: This document is intended for the editor of the web pages and 
Spring support people.  A familiarity with both HTML and Perl5 is necessary to 
maintain the tools.


Document history

.hist.0: Gavin wrote the first description.  Pekka filled in detail.

.hist.1: Pekka split off the writing instructions 1998-12-03 into 
guide.web.writing(0).


OVERVIEW

.over: These tools are a collection of Perl scripts that use the Notes API to 
extract the information out of Spring, and process it into a set of WWW pages.  
The tools have been used only on Solaris (trillian and zaphod), but they are 
probably portable.  The Notes extraction part actually runs on springhost 
(through rsh).

.over.hope: All the tools are in the compound MMref_bin; the data needed by the 
tools is in the compound MMref_lists.

.over.source: The source for the glossary, bibliography, FAQ, and other HTML 
(including articles) is the MM Reference database.  .over.intermediate: This is 
extracted into an intermediate form with the filename extension ".sgml".  This 
is not real SGML.

.over.html: The .sgml files are then processed into HTML files (one for one in 
the same directory structure).  These HTML files can be viewed in a web browser 
or checked using other makefile commands.

.over.image: Various image files have also been stored in the MM Reference 
database, and should be extracted when necessary.  This process has not yet 
been automated.

.over.tar: For a release, the HTML files are packed into a tarfile, and given 
to the webmaster.


Installation

.over.dir: Create a directory called $HOME/public-html/mm to hold the web 
pages, and check out the tools into its subdirectories.  Manually extract the 
images into subdirectories called diagrams and icons (as indicated by the 
filename fields).  Create additional subdirectories called articles, bib, 
glossary, and news.

.over.link: Create links in the mm directory: 
  ln -s bin/Makefile .
  ln -s lists/okayurls .

.over.notes: You do need a Notes installation for UNIX, and a Notes API 
installation (but this exists on springhost.cam).  See Lotus doc for details of 
the API, although you don't have to know much as it's been wrapped in 
object-oriented Perl.

.over.path: You need to put /opt/lotus/bin and your Notes data directory on 
your PATH.  


Usage

.over.make: The tools are mainly accessed by running gnumake in the mm 
directory.  The makefile implements the following commands (run 'gnumake' to 
get this help text):
  gnumake biblio to generate bib files from Spring
  gnumake gloss to generate glossary from Spring
  gnumake faq to generate FAQs from Spring
  gnumake other to generate other pages from Spring
  gnumake all to generate all pages from Spring
   
  gnumake html to generate HTML from .sgml template files
 
  gnumake lint to check the HTML with weblint
  gnumake xref to check the cross references with dxref
  gnumake spell to spell-check the HTML files
  gnumake validate to run html-check on the HTML files
  gnumake check to lint, xref, and spell
 
  gnumake install to copy the HTML files to the ~mm directory
  gnumake clean to zap all .html files
  gnumake cleanall to zap all .sgml and .html files
  gnumake tarfile to create mmref.tar

.usage: The minimum is to make cleanall, then all, then html, then tarfile.  
But you'll want to run the tests and there are always problems detected by the 
scripts.

.version: If you need to change the version number, it's hard-coded in 
sgml2html.pl.

.password: The first five commands will prompt for your Notes password.

.hacks: The Perl scripts sometimes warn about Name "MMRef::foo" used only once: 
possible typo at /u/user/public-html/mm/bin/script.pl line nn.; ignore that.


TOOLS


Conversion Tools

.html: The sgml2html tool that converts from *.sgml to *.html takes command 
line options (also specified as environment variable SGML2HTMLOPTS):
  -h: Produce pages suitable for viewing via "http:" URLs.  Every source 
reference to a directory is actually to a directory.
  -f (the default): Produce pages suitable for viewing via "file:" URLs and 
validation.  Source references to directories are relinked to "index.html".  A 
trailer approximating that used by Hqn web servers is appended.
  -c: Produce pages suitable for viewing off-line (like on CD).  As for -f, but 
also add message referring reader to "most up to date" version on the web, and 
include a trailer with version number.

.pbm: The sgml2html tool uses PBM for image processing.


Checking Tools

.tools.check.lint: lint -- Doesn't catch all HTML violations, catches many 
style errors.  Takes quite a long time (15 min).  Install weblint to use this.

.tools.check.lint: validate -- Does a formal SGML check of the HTML.  DTD 
defaults to Wilbur (3.2), but can easily be upgraded.  Install html-check to 
use this.

.tools.check.spell: spell -- Spell check.  Attempts to de-HTML-ise first, and 
uses a collection of dictionaries (lists/*.dict), but produces many false 
positives.  Don't put stuff in the dictionaries that is actually a misspelling, 
that is counterproductive.

.tools.check.xref: xref -- Checks for invalid ftp and http links, using 
explicit "okayurls" list.  This list needs cleaning now and then.  Uses David's 
dxref.


FILES

.files: 

Makefile -- The makefile to make the whole thing work
Notes.pl -- Object-oriented wrapper for Notes API
check_bib.pl -- Scratch tool to check mzraly's bib.  Forget it.
check_link -- Tool to check one (command-line) URL (ftp or http) and append it 
to okayurls if valid.
make_bib.pl -- Tool to write bibliography pages.
make_faq.pl -- Tool to write FAQ pages.
make_gloss.pl -- Tool to write glossary pages.
make_other.pl -- Tool to write any HTML fragments as whole pages.  Contains 
explicit list of such pages.
mmref.pl -- Object-oriented wrapper for forms in MM Reference.  Uses Notes.pl.  
Used by every other extraction tool.  Initialised with a string indicating what 
information is needed, one letter per category, case indicating full or partial.
notes-perl -- Invokes the Notes API version of Perl.  Requires a password to be 
explicitly entered.
sgml2html.pl -- Converts *.sgml (not really SGML) to *.html.
spell.pl -- Convenience wrapper for webspell
test_urls.pl -- Tests URLs specified in stdin
validate_html.pl --- Convenience wrapper for SGML checker.

