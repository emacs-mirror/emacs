               GUIDE TO ALLOCATION IN THE MLWORKS RUNTIME
                             guide.ml.alloc
                             incomplete doc
                            nickb 1996-10-31

.from: This doc is from the MLWorks runtime. MLWrts!alloc.doc(1.2):

       $Id: alloc.doc,v 1.2 1996/09/05 10:37:54 stephenb Exp $

.intro: The document describes how objects can be allocated in the
runtime and the rules that should be followed to avoid errors.

.audience.primary: This document is primarily aimed at anyone who has
to maintain/modify the MLWorks runtime (excluding the garbage
collector).

.audience.secondary: It should also be useful to implementors of the
memory management facilities as it details what users of the memory
management facilities expect.


.kind: The objects that you may want to allocate in the runtime can be
split into three main kinds: ML, C and hybrid.

.kind.ml: If you need to dynamically allocate an object that will be
passed to ML and interpreted as an ML value then you should generally
use one of the allocate_* functions (see rts/src/allocator.h) or a
wrapper.  Such an object will be called an "ML object" in the rest of
this document.

.kind.ml.gc: All ML objects are subject to garbage collection.

.kind.ml.gc.no-free: There is no mechanism to explicitly free an ML
object; the lifetime of an ML object is determined solely by the
garbage collector.

.kind.ml.gc.trigger: A garbage collection is only triggered at well
defined points, it does not happen asynchronously.  In the runtime,
garbage collection is generally triggered by the use of an ML object allocation
function and hence obviously by functions which indirectly uses such a
function (for example see rts/src/values.c#mlw_cons).  It can also
obviously be triggered by an explicit call to the garbage collector,
but here you are venturing into runtime expert territory -- see
.rule.unsure.

.kind.ml.gc.move: A feature of the garbage collector used by MLWorks 
is that it can move most ML objects around in memory.  For the
purposes of this document the reason for this nor the technique used
is important, the only important fact is that after a garbage
collection an ML object may not be in the same place as it was before
the garbage collection. 

.kind.ml.gc.static: An exception to .kind.ml.gc.move is an ML object
which is explicitly declared as being static i.e. it is guaranteed not
to be moved by the garbage collector.  For example, see
rts/src/allocator.c#allocate_static_bytearray.

.kind.ml.gc.roots: The garbage collection process starts by considering
a set of references which is commonly known as the "roots".  These
roots are typically various global references, selected registers and
selected addresses on ML stacks (a C stack is not scanned at all).

.kind.ml.gc.garbage: If an ML object is not reachable by transitively
following all references from the root set, then that ML object is
considered to be garbage and the space it occupies will eventually be
recycled for use by other ML objects.

.kind.ml.gc.unreachable: An ML object created by one of the ML
allocation functions (see .kind.ml) is not automatically reachable
from the roots.  It does not become reachable until it is referenced
by an ML object which is itself reachable.


.kind.c: malloc(3), calloc(3) and realloc(3) are available for creating
objects that you typically don't want to pass to ML code.

.kind.c.nogc: Any objects allocated by malloc(3) and friends are not
subject to garbage collection.

.kind.c.example: For an example of the use of malloc(3) and friends
see rts/src/OS/Unix/os_io_poll.c#pollfd_buffer_add.


.kind.hybrid: A hybrid object is allocated using one of the routines
mentioned .kind.c and which needs to be passed to and/or returned from
ML either directly or as the field in an ML object.

rule.signal: Avoid performing allocation in a signal handler.  There
are exceptions to this rule, but they are best discussed on a case by
case basis with a runtime expert, see .rule.unsure.


.rule.ml: The following are some rules about allocating ML objects in the
runtime.

.rule.ml.avoid: If you can possibly allocate in ML instead of in C,
then do that since in ML, ignoring any use of casts, you should not be
able to make a mistake which will cause a problem for the garbage
collector.

.rule.ml.roots: As a consequence of .kind.ml.gc.move and
.kind.ml.gc.unreachable it is necessary to register any reference to
an unreachable ML object with the garbage collector for the duration
of an allocation of another ML object.

.rule.ml.roots.declare: To register a reference with the garbage
collector, use declare_root (see rts/src/gc.h).

.rule.ml.roots.retract: Once it is no longer necessary for the
garbage collector to know explicitly about a reference, it can be
un-registered using retract_root (see rts/src/gc.h).

.rule.ml.roots.example: The following example is taken from
rts/src/OS/Unix/unix.c#mlw_posix_file_sys_return_stat :-

  01 static mlval mlw_posix_file_sys_return_stat (struct stat * st)
  02 {
  03   mlval atime, ctime, ...;
  04
  05   atime= mlw_time_make(st->st_atime, 0);
  06   declare_root(&atime);
  07
  08   ctime= mlw_time_make(st->st_ctime, 0);
  09   declare_root(&ctime);
  10   /*
  11    * Other stuff elided which allocates and which also refers
  12    * to atime and ctime.
  13    */
  14   retract_root(&ctime);
  15   retract_root(&atime);
  16   ...
  17 }

It shows how the access times and creation times which are allocated
(using mlw_time_make which ultimately calls allocate_record)
on lines 5 and 8 respectively are registered with the garbage
collector on lines 6 and 9 respectively.  Once the values have been
used, they are un-registered on lines 14 and 15.


.rule.ml.protect-args: This rule is really a corollary of
.rule.ml.roots since an argument to a function which refers to an
ML object is no different from any other reference, but this is often 
overlooked so it is worth making an explicit note of it.

.rule.ml.protect-args.example: Consider the following definition of
cons taken from rts/src/values.c :-

  01 mlval mlw_cons(mlval head, mlval tail)
  02 {
  03   mlval result;
  04
  05   declare_root(&head);
  06   declare_root(&tail);
  07   result= allocate_record(2);
  08   retract_root(&head);
  09   retract_root(&tail);
  10
  11   FIELD(result, 0)= head;
  12   FIELD(result, 1)= tail;
  13   return result;
  14 }

Notice how head and tail are registered with the garbage collector
on lines 5 and 6 so that the references will be updated if a garbage
collection is triggered by the call to allocate_record on line 7.
Once the allocation is done, head and tail no longer need to be
registered, see lines 8 and 9 respectively.

.rule.ml.protect-args.example.incorrect: Note that when the arguments
to the function are registered by the function, it only protects the
references used within the function, it does not protect the reference
that is passed to the function.  If that is not clear, hopefully the
following example will help :-

  01 static mlval rev_iota(int n)
  02 {
  03   int i;
  04   mlval list= MLNIL;
  05   for (i= 1; i < n; i++)
  06     list= mlw_cons(MLINT(i), list);
  07   return list;
  08 }

This function appears to create a list of the numbers 1 to n
(backwards).  You might think that all is well because mlw_cons
protects its arguments and so list is declared as a root.  This is NOT
so.  In the case of list/tail, mlw_cons declares the address of tail
as a root, NOT the address of list as a root.  Consequently due to
.kind.ml.gc.move the value in list will not be updated if necessary
and so its value is undefined after the call to mlw_cons on line 6.
The correct way to code this function is to declare list as a root :-

  01 static mlval iota(int n)
  02 {
  03   int i;
  04   mlval list= MLNIL;
  05   declare_root(&list);
  06   for (i= 1; i < n; i++)
  07     list= cons(MLINT(i), list);
  08   retract_root(&list);
  09   return list;
  10 }


.rule.ml.bottom-up: If you are allocating an ML object (A) which will
refer to another ML object (B) which you are also allocating, then
perform the allocations bottom up i.e. allocate B before A.

.rule.ml.bottom-up.reason: The garbage collector relies on the fact
that most ML objects are immutable and so you should not update an
immutable object with an ML pointer after the garbage collector is
aware of the ML object (i.e. has a reference to it).

.rule.ml.bottom-up.example: Consider a function which needs to create an
object of the given form so that it can be passed to ML :-

  datatype message = MESSAGE of int * string;

Such a function could be implemented as :-

  01 static mlval make_message(int i, char const *str)
  02 {
  03   mlval a, b;
  04   b= ml_string(str);
  05   declare_root(&b);
  06   a= allocate_record(2);
  07   FIELD(a, 0)= MLINT(i);
  08   FIELD(a, 1)= b;
  09   retract_root(&b);
  10   return a;
  11 }

Notice how the string is allocated (line 4) and declared as a root
(line 5) before the record is allocated.

.rule.ml.bottom-up.example.incorrect: As an example of failing to observe
.rule.ml.bottom-up and consequently how NOT to code up the example,
consider the following :-

  01 static mlval incorrect_make_message(int i, char const *str)
  02 {
  03   mlval A= allocate_record(2);
  04   FIELD(A, 0)= MLINT(i);
  05   FIELD(A, 1)= ml_string(str);
  06   return A;
  07 }

Why is this wrong?  Well if you understood .rule.ml.roots you may
think that the problem is that the object referred to by A needs
protecting with a declare_root due to the allocation that ml_string
does and hence write something like :-

  01 static mlval still_incorrect_make_message(int i, char const *str)
  02 {
  03   mlval A= allocate_record(2);
  04   FIELD(A, 0)= MLINT(i);
  05   declare_root(&A);
  06   FIELD(A, 1)= ml_string(str);
  07   retract_root(&A);
  08   return A;
  09 }

However, this is incorrect since whilst it takes notice of
.rule.ml.roots it fails to take notice of .rule.ml.bottom-up.


.rule.ml.expression: Do not write an expression which involves a root
and a call to a function which may allocate where there is no sequence
point between the root and the call.

.rule.ml.expression.example.incorrect: Consider the following code :-

  01  static ... incorrect_code(...)
  02  {
  03    mlval poo= MLUNIT;
  04    ...
  05    declare_root(&poo);
  06    ...
  07    foo(poo, ml_string(...));
  08    ...
  09  }

This is incorrect because the call to foo on line 7 contains a root as
one argument (poo) and a call to an allocating function (ml_string) as
the other.  Due to the lack of a sequence point, the compiler is at
liberty to rewrite this as if the code was :-

  01  static ... incorrect_code(...)
  02  {
  03    mlval poo= MLUNIT, arg1, arg2;
  04    ...
  05    declare_root(&poo);
  06    ...
  07    arg1= poo;
  07    arg2= ml_string(...);
  07    foo(arg1, arg2);
  08    ...
  09  }

Since ml_string allocates and arg1 is required after the allocation
and arg1 (unlike poo) is not declared as a root it clearly fails
.rule.ml.roots.

.rule.ml.expression.example.correct: The correct way to write
.rule.ml.expression.example.incorrect is to pull out the allocation to
before the function call to ensure that there is a sequence point.
That is, the code should look like :-

  01  static ... correct_code(...)
  02  {
  03    mlval poo= MLUNIT, str;
  04    ...
  05    declare_root(&poo);
  06    ...
  07    str= ml_string(...);
  07    foo(poo, str);
  08    ...
  09  }


.rule.c: The routines mentioned in .kind.c (or wrappers for them such
as XtMalloc) are the only ones that should be used to create C
objects.  You should not be in the business of using brk(2) and
sbrk(2) or mmap(2) or equivalent Win32 routines to cook up your own
allocation routines. Such routines are only for use by persons
involved in implementing the MLWorks memory management routines.

.rule.c.header: Any file which uses a routine mentioned in .kind.c
should include "alloc.h" instead of <stdlib.h>.

.rule.c.header.reason: Some systems have broken prototypes or no
prototypes at all and so "alloc.h" ensures that the correct prototypes
are defined for a given platform.  Often it just includes <stdlib.h>.

.rule.c.free: As a consequence of .kind.c.nogc you must use free(3) to
deallocate any memory allocated by malloc(3) and friends.


.rule.hybrid.c: A hybrid object is subject to .rule.c.* as well as the
following hybrid specific rules.

.rule.hybrid.reference.aligned: If you are sure that the object was
allocated by one of the routines mentioned in .kind.c, then the value
can be passed around and/or stored in a record field by casting it to an
mlval.  

.rule.hybrid.reference.aligned.reason: This is because the routines
mentioned in .kind.c as used by MLWorks guarantee to produce an object
that is aligned on a 64-bit boundary i.e. the bottom three bits of the
address are 0 (see rts/src/alloc.c#ALIGNMENT) and so the value is
regarded as an (even) integer by ML due to the tagging scheme used in
MLWorks (see rts/src/tags.h#PRIMARYTAGS).

.rule.hybrid.reference.unaligned: If you need to pass a pointer that
is not 64-bit aligned then there are a number of things you can do
depending on the alignment and knowledge of the addressing range.

.rule.hybrid.reference.unaligned.box: If you don't know anything about
the alignment or addressing range, then the safest thing is to convert
the pointer to a string or bytearray.  See
rts/src/OS/Win32/window.c#box for an example using a string.

.rule.hybrid.reference.unaligned.int: If you know that it has two or
more zero bits at the top, you can represent the pointer as an
integer.  That is to pass the pointer to ML do MLINT(ptr) and to
convert it back from an int to a pointer use CINT(ptr).

.rule.hybrid.args: As a consequence of .kind.c.nogc (which applies to
hybrid objects due to .rule.c.free via .rule.hybrid.c), .rule.ml.roots
does NOT apply to a hybrid reference.

This (anti-)rule can be inferred from other rules, but it is helpful
to spell it out explicitly, if only because it can then easily be
referred to in source code.  For example, this rule explains why the
following is perfectly legal given that it is known that the argument
is a hybrid reference :- 

  01 static mlval convert_AnyCallbackStruct(mlval arg)
  02 {
  03   XmAnyCallbackStruct *s= (XmAnyCallbackStruct *)arg; /*rule.hybrid.args*/
  04   mlval result= allocate_record(2);
  05
  06   FIELD(result, 0)= MLINT(s->reason);
  07   FIELD(result, 1)= (mlval)(s->event);
  08   return result;
  09 }

For extra safety you may like to add an assertion in cases such as the
above to ensure that the reference is suitably aligned.


.rule.unsure: If you are unsure or have any doubt about how and when
to allocate and declare/retract roots in the runtime, check with
someone reasonably familiar with the runtime.  Since it can sometimes
take days to track down a problem due to incorrect allocation in the
runtime, it makes much more sense to ask someone to spend a few
minutes checking over your code before checking it in.


.origin: The information presented here is distilled from
mlworks.changes.2369 and mlworks.mail.7699.


.todo.xref.notation: use one consistent notation for cross-references
(once we decide on what that is).

.todo.xref.inverse: add an inverse reference to all the referenced
source to help avoid the source and and this documentation becoming
out of date/sync.

