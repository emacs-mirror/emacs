                HOW TO RUN TESTS IN THE MMQA TEST SUITES
                               guide.mmqa
                               draft doc
                             rit 1998-03-09

HISTORY

.hist.0: Created 1998-03-09, in the "MM QA Notebook" database.
.hist.1: Move to "MM Information", and updated to cover harness version 2.2 
(previous doc didn't even cover harness version 2.0). rit 1999-02-23
.hist.2: Updates for harness version 2.6.
.hist.3: Updates for harness version 3.0. rit 1999-05-04
.hist.4: Improvements to formatting and tagging following comments from Pekka. 
More compliant with guide.text. rit 1999-05-13


INTRODUCTION

.applicability: This document describes how to use version 3.0 of the MMQA test 
harness, and subsequent versions up to and including 3.3. If you have an 
earlier version, you should consider upgrading. If you have version 2.6 and do 
not much want to upgrade, see .checkout.version.2.6 below. If you have a newer 
version, most of what it says here will be fine, but you should pester Richard 
Tucker <rit> to update this document. The "qa options" command tells you what 
version you are using.

.other.help: The test harness has some (limited) built-in documentation. Try 
the "qa help" command if the information you need isn't in this document, or 
ask Richard Tucker <rit>.

.overview: There are four steps to running an MMQA test:

  1   .setup              -- getting the tests and the test harness
  2   .options            -- setting up test options
  3   .compile.libraries  -- compiling test libraries
  4   .run                -- running the test itself

Step 1 obviously need not be repeated unless the test harness has changed or 
you need to get hold of a new test. Steps 2 and 3 must be repeated if you want 
to test a different version of the memory manager. Step 4 need not be repeated 
if you don't want to run any more tests.

.notation.dir-seps: In this document I've assumed the directory separator is 
"/", as if you're on Unix. On a PC you should change "/" to "\" (although the 
harness will also allow "/" in many contexts).


PREREQUISITES

.prereq.platform: You will need either:
  - a PC running Windows NT, with Microsoft visual C and perl 5
or:
  - a unix workstation running SunOS, Solaris or linux, with gcc and perl 5

If you would like to run tests on other platforms/compilers, please ask Richard 
Tucker <rit>, who will add those platforms to the test system. Except for 
Macintoshes, this should be quite easy. If your platform is another kind of 
unix, with gcc, the test harness will have a stab at using "generic unix 
settings". Who knows, it may work!


STEP 1: GETTING THE TESTS AND THE TEST HARNESS

.setup: The MMQA test system consists of the test harness (in MMQA_harness!), 
suites of individual tests (MMQA_test_function!, MMQA_test_argerr!, 
MMQA_test_conerr!, MMQA_test_misc!), data files (MMQA_data!) and a number of 
test sets (MMQA_testsets!).

.setup.checkout: To run tests, you must check out at least the test harness and 
the individual tests you want to run. To checkout everything, use hope to:

   checkout -recursive -missing-dir create MMQA!(.)

.setup.structure: This will give you a directory structure as follows:

  mmqa         -- MMQA top-level directory, i.e. MMQA!
    test       -- test harness, i.e. MMQA_harness!
      qa       -- perl script for compiling and running test &c
      script   -- perl programs and other files used by 'qa'
      testlibs -- test libraries (.c and .h files)
      obj      -- compiled tests and libraries go in here
      report   -- test reports (unused)
    function   -- mps functional tests, i.e. MMQA_test_function!
    conerr     -- context error tests, i.e. MMQA_test_conerr!
    argerr     -- argument error tests, i.e. MMQA_test_argerr!
    misc       -- miscellaneous tests, i.e. MMQA_test_misc!
    data       -- data files, i.e. MMQA_data!
    testsets   -- test sets, i.e. MMQA_testsets!

Actually, it doesn't matter where you put the directories of individual tests 
(function, conerr, argerr, misc), but all the examples here will assume you 
have the directory structure above, and have set your current directory to 
"mmqa".

.setup.version.2.6: If you need to use version 2.6 of the test harness, use the 
checkpoint "MMQA_setter" in the hope checkout above. Then follow the 
instructions in guide.mmqa(2): [you may have to copy this doclink somewhere 
else before clicking on it, because of a stupid bug in Notes] instead of this 
document.

.setup.qa.command: All commands in the mmqa test harness are accessed by 
running "perl mmqa/test/qa <parameters>" (or perhaps "perl5 mmqa/test/qa 
<parameters>" on some machines). From now on I will abbreviate this to "qa 
<parameters>". You may find it useful to set up an alias, batch file or similar 
so that you can just type "qa <parameters>" too.


STEP 2: SETTING UP TEST OPTIONS

.options: The test harness knows where it is and where to find the test 
libraries. There are other settings which default to sensible values, which 
tell it for example what platform is being used and who to mail test reports 
too. There are further settings which it can't deduce for itself and which you 
must specify. Mainly these are to do with the MPS you are going to test. This 
section describes how to view and set options, and what they mean.

.options.extra: See "qa help options" for further details and description of 
any options not listed here.

.options.display: To display the current option settings, run "qa options" 
(i.e. "perl mmqa/test/qa options"). You will see something like this:

------------------------------------------------------------------------
 MMQA harness version 3.0

 OPTION                 CODE            CURRENT

 DANGEROUS              -[no]danger     off
 DATA_DIR               -data <val>     C:/users/rit/mmqa/test/../data
 DEBUG_INFO             -[no]debug      off
 LOG_DIR                -g <val>        C:/users/rit/mmqa/test/log
 MAIL_RESULTS           -[no]mail       on
 MAIL_SUBJECT           -subj <val>     MMQA-log
 MAIL_TO                -m <val>        mm-qa-test-log
 MPS_INCLUDE_DIR        -i <val>
 MPS_LINK_OBJ           -l <val>
 MPS_PRODUCT            -prod <val>
 PARAMETERS             -a <val>
 PLATFORM               -p <val>        nt_x86__pc
 STDIN                  -s <val>

 (Add MMQA_ to start of option to give environment variable)
------------------------------------------------------------------------
(These are the default settings on my PC.)

.options.set: All MMQA options may be specified in (at least) two ways: either 
by setting an environment variable, or by supplying a command line option to 
the qa system. The former is usually preferable, as otherwise you will have to 
deal with a long and unwieldy command line, and you will have to supply the 
same options again and again because command line settings are not persistent.

.options.set.env: To specify an option in an environment variable, set a 
variable whose name is "MMQA_" followed by the name of the option. Eg. 
"MMQA_MPS_INCLUDE_DIR=../src". To specify a flag, specify a value of "on" or 
"off".

.options.set.cli: To specify an option on the command line, use "-<code> 
<value>" (for options which take a value) or "-[no]<code>" (for flags). Options 
may come between the "qa" and the command, or between the command and its 
direct arguments, or after its arguments. So the following are all equivalent: 
"qa run -v BQ 14.c", "qa -v BQ run 14.c", "qa run 14.c -v BQ". You can use 
command-line options with the "qa options" command to check that you're 
specifying them correctly, but of course they won't remain set for future 
commands.

.options.set.precedence: In general, options set on the command line will 
override settings made with environment variables.

.options.indiv: Now for information on the individual options:


MPS-related Options

.options.mps: These options tell the test harness about the memory manager to 
be tested. They are required for the "qa clib" and "qa run" commands.

.options.mps.mps_include_dir: MPS_INCLUDE_DIR is the directory where the MM 
header files (mps.h, mpscamc.h, etc) can be found. There is no default. This 
option is required for "qa clib" and "qa run"

.options.mps.mps_link_obj: MPS_LINK_OBJ should be set to a (space-separated) 
list of MM object or library files that tests should be linked with. 
Specifically, it should include both an mps library (e.g. mmdw.lib) and a 
plinth (e.g. mpsplan.lib). There is no default. Unfortunately, the harness 
cannot cope with paths with spaces in them. If this is a major annoyance, 
complain to me and we'll work out a sensible quoting system.
[PC users in particular may find that there is an art to setting environment 
variables to values containing spaces: try SET FOO=X Y or SET "FOO=X Y" but 
_not_ SET FOO="X Y", which would put the double quotes in the expansion of FOO.]
[Unix users who like to edit their commands lines with sed should note that 
including a carriage return character in an MMQA option is very likely to make 
qa commands fail, since some options are interpolated in command lines.]

.options.mps.mps_product: MPS_PRODUCT should be "dylan", "epcore", "mps" or 
whatever product is being tested. Usually, however, you will not need to (and 
should not) set it, as once you have specified MPS_LINK_OBJ, the harness can 
determine the product by looking at the MPS version string. Currently, the only 
difference between products as far as the test system is concerned is that in 
product.epcore the client is not expected to enter the MPS trampoline.


Harness Configuration Options

.options.harness: These options alter the general behaviour of the test harness.

.options.harness.platform: PLATFORM will automatically be set according to what 
platform you are using. Setting it to a value not appropriate to the machine 
you are using will make the test system go wrong. There is normally no need to 
change it, except if you want to do profiling with gprof on solaris (set it to 
"sos8gp"), or with CAP on NT ("nt_x86_cap"). If you do want to do profiling, or 
if you'd like to use a platform that isn't currently supported, talk to rit.

.options.harness.dangerous: DANGEROUS, if set to "on", will cause the "qa run" 
command to try to compile and run tests even when the test libraries may not be 
up-to-date. When DANGEROUS is "off" (the default) you will instead get an error 
telling you to do "qa clib". Unless you are specifically trying to test binary 
compatibility of different memory managers, don't use this option.

.options.harness.debug_info: DEBUG_INFO, if set to "on", will cause lots of 
debugging messages to be printed out by qa commands. This is only intended for 
use in developing the MMQA system, but it may be useful if you want to see 
exactly what is being compiled, linked and run, and with what options.

.options.harness.log_dir: LOG_DIR is a directory where log files will be 
written when running sets of tests with "qa runset". It defaults to 
"mmqa/test/log". Don't worry about this if you're just running individual tests.

.options.harness.data_dir: DATA_DIR is the diretory in which MMQA data files 
may be found. Such files are used as input data for tests which specify a 
particular input in their headers. The default is '../data' from the MMQA 
'test' directory, which is correct if you have checked out MMQA! as suggested 
above. (If you override the test's standard input with the STDIN option, 
DATA_DIR is not used.)


Test Running Options

.options.test: These options affect the running of individual tests.

.options.test.stdin: Some tests read from standard input. STDIN allows you to 
specify a file (relative to the current directory) to be given to the test as 
its standard input. By specifying a value of "STDIN" you can force input to be 
from whatever is the qa harness's standard input (usually the keyboard). If you 
don't set this option, the test itself may specify the file to use (from the 
DATA_DIR directory). Default is unset. Usually you'll want to use this as a 
command-line option only, with "-s <file>".

.options.test.parameters: PARAMETERS lets you specify parameter settings to use 
for a test. These override any parameter settings specified in the test header. 
Parameters may be specified in multiple ways, as in the following examples (all 
equivalent):

 1) qa run test.c -a DEPTH=10 -a WIDTH=5

 2) qa run test.c -a "WIDTH=5 DEPTH=10"
 
 3) MMQA_PARAMETERS='DEPTH=10 WIDTH=5'
    qa run test.c

 4) MMQA_PARAMETERS='DEPTH=10'
    qa run test.c -a WIDTH=5

Parameters may also be specified via individual environment variables:

 5) MMQA_PARAM_DEPTH=10
    MMQA_PARAM_WIDTH=5
    qa run test.c

All these kinds of parameter settings may be combined. In the case of a clash, 
the command-line setting takes precedence, then the setting via the 
MMQA_PARAMETERS environment variable. I strongly recommend using command-line 
settings only, otherwise there's a risk you'll leave the parameters set and end 
up using them by mistake with other tests.


Mail Control Options

.options.mail: These options control auto-mailing of test reports.

.options.mail.mail_results: If MAIL_RESULTS is "on" (as it is by default), the 
harness will attempt to mail the results of all test runs. Turning it off means 
your test runs won't be logged -- not a good idea. Really, I mean it: I don't 
mind at all if the log database fills up with lots of extra documents. However, 
you might want to turn this off if your machine can't send mail (e.g. not 
connected to the network) or you don't want anyone to know what you're up to 
8-).

.options.mail.mail_to: If MAIL_RESULTS is on, then MAIL_TO is who to mail test 
logs to. The default is mm-qa-test-log, which get archived in the "MM QA Test 
Log" Notes database. Leave this unchanged, unless for example you want to mail 
results (which are more detailed than those displayed on screen) to yourself.

.options.mail.mail_subject: If MAIL_RESULTS is on, then MAIL_SUBJECT will be 
put at the beginning of the subject header when test logs are mailed out. 
Default is "MMQA-log". Don't change this unless you are going to change 
MMQA_MAIL_TO, in which case you might want to use it to help you filter your 
mail automatically.



STEP 3: COMPILING THE TEST LIBRARIES

.compile.libraries: Easy one, this: "qa clib" (i.e. "perl mmqa/test/qa clib"). 
This will compile the test libraries, putting the object files in the 
mmqa/test/obj/<platform> directory. "qa clib" requires MPS_INCLUDE_DIR and 
MPS_LINK_OBJ to be set, and also MPS_PRODUCT (but in practice, the harness will 
usually determine MPS_PRODUCT for you). This command will also use the mps 
header files and link objects to work out what interfaces are available for the 
test libraries to use.


STEP 4: RUNNING INDIVIDUAL TESTS

.run: How to run individual tests:

.run.find.test: If you already know what test(s) you want to run, skip to 
.run.command. If not, you may want to know about the "qa index" command. Tests 
names like MMQA_test_function!82.c are not very informative, but tests also 
contain short summaries which are (slightly) more helpful. "qa index" gives 
summaries of tests in the current directory or in the one specified. It also 
allows you to see the summaries of tests in a given numerical range. Examples:

  qa index
  qa index function
  qa index function/120
  qa index function/81-84

Sample output (from the last of these examples):
>  81.c: run out of memory while collecting
>  82.c: EPVM save, alloc, restore in two pools
>  83.c: test for bug with segment summaries
>  84.c: EPVM save, alloc, restore in one pool

.run.test.guide: For a useful overview of what tests are available, indexed by 
product, by pool and by MPS feature, see  A guide to the MMQA functional test 
suite for MPS .


.run.command: Tests are run with the "qa run" command, e.g.:

   qa run function/666.c -a "PARAM=32"

This command requires MPS_INCLUDE_DIR, MPS_LINK_OBJECT and MPS_PRODUCT to be 
set. "qa run" will compile, link and run a test, and afterwards will show test 
results in a standard format, judge whether the test has passed or failed, and 
if it failed, say (tersely) in what way the actual output fell short of the 
specified output.

.run.exe: After running a test, the executable can be found in 
test/obj/<platform>/tmp_test, if for example you want to run it under a 
debugger. As you may deduce from this, the test system will not work if you try 
to run two tests at once, as it will try to put two different executables in 
the same location. You can get around this by fiddling with the PLATFORM option 
though, as builds for different platforms are kept in separate directories. Ask 
rit for details.



R.I.P.

.rip: Old features which have now been removed.

.rip.interface-version: There used to be an option MPS_INTERFACE_VERSION which 
you set to tell the harness what MPS interfaces it could expect to be 
available. This was annoying to use, as in the absence of documented names for 
interface versions I had to simply make up new ones (charmingly named after 
styles of typefaces), and users of the MMQA harness had to guess which version 
was correct for their mps build. Now it's all done automatically by "qa clib" 
looking at the mps header files and link objects.

.rip.command.try: There used to be a command "qa try" which ran tests without 
reporting the results - I removed this because it was useless and confusing.

.rip.pre2_1: Before harness version 2.1, MPS_INTERFACE_VERSION was simply 
INTERFACE_VERSION, and there was no PRODUCT setting. In addition, command line 
options could not be specified between the "qa" and the command name.



