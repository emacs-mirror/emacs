                  GUIDE TO USING TELEMETRY IN THE MPS
                        doc.mps.guide.telemetry
                               draft doc
                           gavinm 1998-10-29

INTRODUCTION

.purpose: This document describes how the telemetry facilities of the MPS may 
be used.  

.readership: This document is intended for MPS developers and QA (not for 
release to clients).


Document History

.hist.0: Gavin wrote the first draft for change.dylan.kinglet.160033.
.hist.1: Regularized the tags with event names and added diagnostic events.  
pekka 1999-03-05
.hist.2: Added eventcnv documentation.  pekka 1999-04-27


OVERVIEW

.over: The MPS provides a number of ways to output information, one of which is 
the telemetry system.  Various control flows in the MPS are annotated with 
events.  In appropriate varieties of the MPS, linked with appropriate plinth 
support, these events are output to the telemetry stream.  These telemetry 
streams may be used by various tools that may be supplied with the MPS to 
analyze both the behavior of the MPS and the MM behavior of the client 
program.  The client may also make limited use of this data directly, but 
should be aware that the set of events, their significance, and the format of 
telemetry files is liable to change.  A simple conversion tool is provided for 
text dumps and input into analyser programs.


VARIETIES

.variety: Currently only variety.ii and variety.ti support telemetry; this is 
liable to change.  Note that these varieties may not be made available to all 
clients in all releases.  variety.ii contains only a subset of the events 
included in variety.ti; this subset is liable to change.


PLINTH

.plinth: Telemetry requires non-null implementations of certain plinth 
functions that may have been indicated as optional in the past, including 
mps_io_write, mps_io_create, mps_io_flush, mps_io_destroy, and 
mps_lib_telemetry_control.


CONTROL

.control: The client may control which events are emitted in two ways:
  - By selecting a variety that has an appropriate subset of event annotations 
included (see .variety).
  - By setting a filter to determine what "kind" of events are emitted.

.control.kind: The MPS divides its events into various kinds, roughly by 
frequency of emission.  These are controlled by setting or resetting bits in a 
control word.  

.control.init: The initial value of this mask is determined by the plinth 
function mps_lib_telemetry_control (see symbol.mps.c.mps_lib_telemetry_control
(0)).

.control.control: The mask can be read or changed by the MPS function 
mps_telemetry_control (see symbol.mps.c.mps_telemetry_control(0) for details).

.control.kind.list: The following event kinds are currently available for 
client use:
  bit 6    User-invoked
  bit 7    Per interface call
For example, user-invoked events can be enabled by calling:
  (void)mps_library_control(1 << 6, 1<< 6);

[What about providing the client with some interface constants?  gavinm 
1998-10-29]


EVENTS

.event: A variety of events are emitted.  The following events are currently 
available for client use (note that availability is liable to change):
[In time this list may be better residing in individual event documents.  
gavinm 1998-10-29]

.event.ArenaEnter: ArenaEnter <arena> <clock> 
  Kind: per interface call
  Availability: variety.ii, variety.ti
  Emitted precisely when the MPS locks an arena.  <clock> is as returned by 
mps_clock.

.event.ArenaLeave: ArenaLeave <arena> <clock>
  Kind: per interface call
  Availability: variety.ii, variety.ti
  Emitted precisely when the MPS unlocks an arena.  <clock> is as returned by 
mps_clock.

.event.Intern: Intern <id> <string>
  Kind: user-invoked
  Availability: variety.ti
  Emitted either when the client calls mps_telemetry_intern (see 
symbol.mps.c.mps_telemetry_intern(0)), or when the MPS thinks the client could 
gain from having a label on some MPS object (e.g., a pool class is labeled with 
its name).  Records ids used in Label events.

.event.Label: Label <address> <id>
  Kind: user-invoked
  Availability: variety.ti
  Emitted either when the client calls mps_telemetry_label (see 
symbol.mps.c.mps_telemetry_label(0)), or when the MPS thinks the client could 
gain from having a label on some MPS object (e.g., a pool class is labeled with 
its name).  Uses ids established by Intern events.

.event.CBSInit: CBSInit <cbs> <owner>
  Kind: Pool
  Availability: variety.ti
  Emitted when a CBS is initialized.  Reports the structure owning the CBS 
(typically a pool), or NULL for a CBS not logically contained in any other MPS 
object.

.event.MeterInit: MeterInit <meter> <owner>
  Kind: Pool
  Availability: variety.ti
  Emitted when a meter is initialized.  Reports the structure owning the meter 
(typically a pool or a CBS), or NULL for a meter not logically contained in any 
other MPS object.

.event.MeterValues: MeterValues <meter> <count> <sum> <sumOfSquares> <max> <min>
  Kind: Pool
  Availability: variety.ti
  Emitted when the owner of a meter requests (typically, when the owner is 
being finished).  Reports the statistics collected by the meter.

.event.TraceStatCondemn: TraceStatCondemn trace condemned not-condemned 
foundation rate mortality finishingTime
  Kind: Trace
  Availability: variety.ti
  Emitted when a trace has been initialized.  Reports on what the trace is 
going to do.  mortality and finishingTime are the parameters passed to 
TraceStart.

.event.TraceStatScan: TraceStatScan trace rootScanCount rootScanSize 
rootCopiedSize segScanCount segScanSize segCopiedSize singleScanCount 
singleScanSize singleCopiedSize
  Kind: Trace
  Availability: variety.ti
  Emitted when a trace has finished.  Reports on scanning work done.

.event.TraceStatFix: TraceStatFix fixRefCount segRefCount whiteSegRefCount 
nailCount snapCount forwardedCount forwardedSize preservedInPlaceCount 
preservedInPlaceSizereadBarrierHitCount greySegMax pointlessScanCount
  Kind: Trace
  Availability: variety.ti
  Emitted when a trace has finished.  Reports on fixing work done.

.event.TraceStatReclaim: TraceStatReclaim reclaimCount reclaimSize
  Kind: Trace
  Availability: variety.ti
  Emitted when a trace has finished.  Reports on reclaim work done.

.event.ArenaWriteFaults: ArenaWriteFaults arena count
  Kind: Seg
  Availability: variety.ti
  Emitted when a trace is starting and when an arena is finished.  Reports 
number of write barrier hits since arena was created.


FILE HANDLING

.file: The telemetry stream is output via the plinth functions mps_io_create, 
mps_io_write, mps_io_flush, and mps_io_destroy.

.file.flush: The telemetry stream is buffered internally in the MPS.  This 
buffer will be flushed in the event of a call to mps_arena_destroy.  In the 
event that the client wishes more frequent or earlier buffer flushes (say the 
program will end without calling mps_arena_destroy), the buffered events may be 
flushed to the telemetry stream by calling mps_telemetry_flush (see 
symbol.mps.c.mps_telemetry_flush(0)), which also calls mps_io_flush on the 
corresponding telemetry stream.

.file.destroy: Note that the MPS does not guarantee to call mps_io_destroy on 
the telemetry stream.  [This may change, see request.mps.180027]


INTERPRETATION OF RESULTS

.use.raw: The format of the raw telemetry stream is binary, and liable to 
change.  Direct use of this file by the client is not supported.

.use.dumper: A tool called "eventcnv" is provided (on most platforms) to 
convert a telemetry stream to a more usable format.  It reads the log from 
mpsio.log in the current directory, unless otherwise specified by the -f option.

.use.dumper.release: Each version of eventcnv is specific to a release.  
.use.dumper.platform: It is not currently recommended that eventcnv be used on 
a platform different from the one on which the telemetry stream was generated.  
.use.dumper.version: Event logs have the version stamp of the generating image 
in the first event (use 'strings | head -1' to find it).  This can be turned 
off by control bit 6 (see .control.init) [but that's probably a bug, and should 
be changed].

.use.dumper.make: Build eventcnv by 'gnumake -rf <platform>.gmk VARIETY=wi 
eventcnv' or 'nmake /f <platform>.nmk VARIETY=wi eventcnv.exe' (you'd rarely 
want any other variety).


Formats

.eventcnv.format: Listings and snapshots can be produced in three different 
formats, selected using the -S option.

.eventcnv.format.human: Specifying -S (this is the default) produces output 
that is formatted to be human-readable.  The output is formatted in regular 
columns, names and labels are given where possible, addresses and sizes are 
given in hex, and all other numbers in decimal.

.eventcnv.format.cdf: Specifying -SC produces output in Comma Delimited Format, 
which can be imported into various database and spreadsheet packages.  Fields 
are separated by commas, all numbers are given in decimal, and labels are 
enclosed in double quotes.  We assume the consumer has very limited programming 
capabilities, so events are designated by the numeric event codes (more 
suitable for comparison), but labels are given where possible.  [This needs 
some tuning with a real example.]

.eventcnv.format.lisp: Specifying -SL produces output that is convenient for 
reading into a Lisp program.  Each event is enclosed in parentheses, events are 
given in symbol syntax, all numbers are given in hex (for compactness), and 
strings are enclosed in double quotes.  Since the consumer has full programming 
capabilities, we're letting it do its own label lookups.

.eventcnv.format.details: These formats have one line per event, separated by 
newlines in the usual way.  Each event has columns separated by sequences of 
one or more spaces.  The first column is the event name or code.  Subsequent 
columns are the event parameters in order (sometimes additional information is 
printed in the -S format).

.eventcnv.format.caveat: Note that if user-supplied strings contain spaces or 
newlines, their inclusion in the -S output will result in this format being 
violated in the obvious way.  MPS-supplied strings will not contain spaces or 
newlines.  The other formats have appropriate string delimiters and quoting.


Verbose Listings

.eventcnv.listing: The -v option produces a verbose listing of the events, with 
labels shown instead of any labeled value.  (We assume labeling 0 is intended 
to mark a point in time, and do not replace zeros with such labels.)


Event Frequencies

.eventcnv.events: The -e option counts how many times each of the given events 
was emitted.  The argument specifies the event types in the form: 
<name>[(+|-)<name>]..., where the first name can be 'all', and the rest are 
names of event types.  '+' means count that event type, '-' means don't count.  
This can be modified by the -b switch to output the counts in each bucket, see 
.eventcnv.buckets below.


Buckets

.eventcnv.buckets: The -b option modifies the measuring features (-e) to 
produce a time series with separate measurements for each bucket.  The argument 
gives the size of each bucket in event time.  One would typically first run 
eventcnv unbucketized with "-e all", to discover the interesting event types 
and the range of the event clock.


Random Options

.eventcnv.partial: The -p option informs eventcnv that it's dealing with a 
partial logs, and stops it complaining when it sees references to pools and 
segments that it did see created.  [This could be extended to reconstruct 
entries for such entities, but it's probably not worth the trouble.  pekka 
1998-09-23]


UNIX Tools

.extract: To see the full sequence of events around some interesting point in 
time, use something like
eventcnv -v | tail +9999 | head -50
Or
eventcnv -v | sed -n 1000,1050p

.filtering: [ef]grep can be used to filter listings produced by eventcnv, e.g., 
for events of particular type or events concerning a particular object.  It is 
often helpful to use the -c option first to count the number of lines in the 
result, because real logs are unmanageably large.  It can also be useful to 
specify the -n option to get line number that can subsequently be used to get 
extracts of the full log as described in .extract.


REPLAYING

.use.replay: A tool called "replay" or "replaysw" is provided to replay a 
telemetry stream, imitating the original MPS client.  It reads the log from 
mpsio.log in the current directory, unless otherwise specified by the -f option.

.use.replay.make: Build the replayer by 'gnumake -rf <platform>.gmk VARIETY=wi 
replay' or 'nmake /f <platform>.nmk VARIETY=wi replay.exe' (you might want 
variety.ci for debugging instead).  This is built with the Dylan configuration; 
to get the SW configuration, build replaysw.


Random Options

.replay.partial: The -p option informs eventcnv that it's dealing with a 
partial logs.

