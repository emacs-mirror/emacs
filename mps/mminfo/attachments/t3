*** t1	Thu Nov  2 11:16:37 1995--- t2	Thu Nov  2 11:16:38 1995****************** 1,7 ****! req.epcore(3)  incomplete doc    EP CORE RIP REQUIREMENTS! richard, 1995-10-25      INTRODUCTION--- 1,7 ----! req.epcore(3)  draft doc    EP CORE RIP REQUIREMENTS! richard, 1995-11-01      INTRODUCTION****************** 40,46 ****  Information" database in Spring.    .conv.tag: The document contains embedded definitions of "tags" which ! uniquely idefnitify elementary statements.  To quote guide.text.tag:      Each elementary statement in a document should be tagged so that it can   be--- 40,46 ----  Information" database in Spring.    .conv.tag: The document contains embedded definitions of "tags" which ! uniquely identify elementary statements.  To quote guide.text.tag:      Each elementary statement in a document should be tagged so that it can   be****************** 52,60 ****  relative    to the tag of the document as a whole.    .conv.req: Each requirement is tagged, and the following three lines   contain a description, category, and source reference respectively.  Most ! descriptions are implicity prefixed with "The Memory Manager shall..."    .conv.req.cat: The categories are:      critical: The requirement is critical to the project.  If the requirement--- 52,64 ----  relative    to the tag of the document as a whole.  + .conf.comment: Comments in the document, for clarification, or indicating + where future changes are expected, are enclosed in square brackets + (guide.text.comment).+   .conv.req: Each requirement is tagged, and the following three lines   contain a description, category, and source reference respectively.  Most ! descriptions are implicitly prefixed with "The Memory Manager shall..."    .conv.req.cat: The categories are:      critical: The requirement is critical to the project.  If the requirement****************** 66,72 ****    optional: The requirement will be met if at all possible, but failure to              meet it does not cause the project to fail.  !   nice: Meeting the requirements is recognized as a "good thing" and will          be attempted if the cost is low.      unknown: The category of the requirement is unknown and needs to be --- 70,76 ----    optional: The requirement will be met if at all possible, but failure to              meet it does not cause the project to fail.  !   nice: Meeting the requirements is recognised as a "good thing" and will          be attempted if the cost is low.      unknown: The category of the requirement is unknown and needs to be ****************** 75,81 ****    Document History  ! .hist.1: The intial requirements list was produced by Richard Brooksby   after a meeting with Yoryos Yeracaris, Andy Cave, and Luke Tumner   (req.epcore(1)).  --- 79,85 ----    Document History  ! .hist.1: The initial requirements list was produced by Richard Brooksby   after a meeting with Yoryos Yeracaris, Andy Cave, and Luke Tumner   (req.epcore(1)).  ****************** 88,94 ****    .hist.3: Richard Brooksby then prepared a narrative version of the   requirements list document with enough information to make the list ! accessible and reviewable by a wider audience (req.epcore(3)).      GOALS--- 92,101 ----    .hist.3: Richard Brooksby then prepared a narrative version of the   requirements list document with enough information to make the list ! accessible and reviewable by a wider audience (req.epcore(3)).  This ! document was reviewed and updated by a meeting of Yoryos Yeracaris, Andy ! Cave, Luke Tumner, Richard Brooksby and Nick Barnes ! (meeting.epcore.1995-11-01).      GOALS****************** 121,127 ****  Functionality    .over.fun.types: The Memory Manager shall manage the following types of ! memory, each with its own specialized set of requirements:      - large-scale base memory (obtained by the RIP at start up),    - display lists,--- 128,134 ----  Functionality    .over.fun.types: The Memory Manager shall manage the following types of ! memory, each with its own specialised set of requirements:      - large-scale base memory (obtained by the RIP at start up),    - display lists,****************** 141,160 ****    Attributes  ! .over.attr.mtbf: RIP mean time between failure due to the Memory Manager ! shall be no less than 16000 hours of continuous operation (that's ! approximately 100 weeks).! ! **** This is inadequately specified.  How will it be measured?  Discuss ! with QA.! ! .over.attr.tp: RIP throughput shall be no less than the current system ! "overall".  In particular, throughput shall be no worse when measured ! using:! !   - Seybold speed tests,!   - Gurber speedmass jobs,!   - certain subsets of the ScriptWorks QA tests (yet to be defined).    .over.attr.footprint: The total memory requirement of the RIP shall not   increase in comparison with the existing system for the same jobs due to --- 148,166 ----    Attributes  ! .over.attr.rel: As a baseline for reliability, the RIP mean time between ! failure due to the Memory Manager shall be no less than 16000 hours of ! continuous operation (that's approximately 100 weeks).  (See .attr.rel for ! details.)! ! .over.attr.run-time: RIP run-time shall be no greater than at present when ! applied to individual Seybold Speed Tests, Genoa FTS and ATS tests, and ! defined tests from the ScriptWorks QA Tests Suite.  (See .attr.run-time ! for details.)! ! .over.attr.tp: RIP throughput shall be no less than at present when ! applied to aggregate Seybold Speed Tests, Genoa FTS and ATS tests, and ! defined aggregate subsets of the ScriptWorks QA Test Suite.    .over.attr.footprint: The total memory requirement of the RIP shall not   increase in comparison with the existing system for the same jobs due to ****************** 171,176 ****--- 177,188 ----  collection shall be delivered before the end of 1996, and if possible by   the end of September.  + .over.plan.cutover: The replacement of the existing system shall be + arranged so that either system can be used in the RIP, so that comparisons + can be made between the two, both for acceptance testing and to reduce the + risk of replacement.  The MM Group wi+ ll produce a report on how this will be achieved.+     FUNCTIONALITY  ****************** 179,185 ****  and not the interface to that functionality.  Required interfaces are   defined in the "PROTOCOL" section of this document.  ! The section is organized into subsections by the type of memory to be   managed.  Each subsection describes the operations to be supplied on that   type of memory.  Later subsections describing miscellaneous functionality   aren't.--- 191,197 ----  and not the interface to that functionality.  Required interfaces are   defined in the "PROTOCOL" section of this document.  ! The section is organised into subsections by the type of memory to be   managed.  Each subsection describes the operations to be supplied on that   type of memory.  Later subsections describing miscellaneous functionality   aren't.****************** 189,222 ****    .fun.arena:    Manage a contiguous area of locked-in memory (the "arena") which is ! supplied to the Memory Manager at initialization.  The Memory Manager uses   this memory to supply other types of memory.!   Essential.    meeting.epcore.1995-07-18.req.ep, meeting.epcore.1995-08-08.arena      Display List Management  ! **** Would it be useful to insert a description of what a display list is ! here?    .fun.dl.alloc:    Allocate memory for display list objects.!   Essential.!   meeting.epcore.1995-07-18.req.ep    See also .attr.dl.obj.*.  - **** Does the RIP require multiple contiguous allocations?-   .fun.dl.free.mass:!   Recycle the memory occuped by an entire display list in one operation.!   Essential.!   meeting.epcore.1995-07-18.req.ep    .fun.dl.free.any:    Recycle the memory occupied by any individual display list object.!   Essential.!   meeting.epcore.1995-08-07.dl.free    .fun.dl.multi:    Manage multiple display lists simultaneously.--- 201,232 ----    .fun.arena:    Manage a contiguous area of locked-in memory (the "arena") which is ! supplied to the Memory Manager at initialisation.  The Memory Manager uses   this memory to supply other types of memory.!   Critical.    meeting.epcore.1995-07-18.req.ep, meeting.epcore.1995-08-08.arena      Display List Management  ! [Some description or definition of what a display list is would be nice ! here.]    .fun.dl.alloc:    Allocate memory for display list objects.!   Critical.!   meeting.epcore.1995-07-18.req.ep, meeting.epcore.1995-11-01.    See also .attr.dl.obj.*.    .fun.dl.free.mass:!   Recycle the memory occupied by an entire display list in one operation.!   Critical, or essential if .fun.dl.free.any is critical.!   meeting.epcore.1995-07-18.req.ep, meeting.epcore.1995-11-01    .fun.dl.free.any:    Recycle the memory occupied by any individual display list object.!   Critical, or essential if .fun.dl.free.mass is critical.!   meeting.epcore.1995-08-07.dl.free, meeting.epcore.1995-11-01.    .fun.dl.multi:    Manage multiple display lists simultaneously.****************** 224,278 ****    meeting.epcore.1995-08-07.dl.multi    .fun.dl.spinlock:!   Support the storage of spinlocks in display list memory.!   Essential.!   meeting.epcore.1995-08-07.dl.spinlock      PostScript Object Management    .fun.ps.alloc:    Allocate memory for PostScript objects.!   Essential.!   meeting.epcore.1995-07-18.req.ep    .fun.ps.gc:    Automatically recycle memory occupied by dead PostScript objects.    Critical.!   meeting.epcore.1995-07-18.req.ep    .fun.ps.gc.op:!   Support PostSript GC-related operators.!   **** Unknown.!   meeting.epcore.1995-08-08.psgc! ! .fun.ps.gc.op.none:!   Support disabling GC using the PostScript "vmreclaim" operator.!   **** Unknown.!   book.psrm2! ! .fun.ps.gc.op.none.local:!   Support disabling GC in the local VM using the PostScript "vmreclaim" ! operator.!   **** Unknown.!   book.psrm2! ! .fun.ps.gc.op.now:!   Support immediate GC using the PostScript "vmreclaim" operator.!   **** Unknown.!   book.psrm2! ! .fun.ps.gc.op.now.local:!   Support immediate GC in the local VM using the PostScript "vmreclaim" ! operator.!   **** Unknown.!   book.psrm2! ! .fun.ps.gc.op.when:!   Support setting and getting a GC threshold value using the PostScript ! "setvmthreshold" operator.!   **** Unknown.!   book.psrm2    .fun.ps.hash:    Support pointer-based hashing, even if objects are relocated.--- 234,264 ----    meeting.epcore.1995-08-07.dl.multi    .fun.dl.spinlock:!   Support the storage of spinlocks in display list memory, or some ! equivalent method of interlock to be defined after further investigation, ! and within the constraints of .plan.int.effort.!   Critical.!   meeting.epcore.1995-08-07.dl.spinlock, meeting.epcore.1995-11-01.      PostScript Object Management    .fun.ps.alloc:    Allocate memory for PostScript objects.!   Critical.!   meeting.epcore.1995-07-18.req.ep, meeting.epcore.1995-11-01.    .fun.ps.gc:    Automatically recycle memory occupied by dead PostScript objects.    Critical.!   meeting.epcore.1995-07-18.req.ep, meeting.epcore.1995-11-01.    .fun.ps.gc.op:!   Support PostScript GC-related operators ("vmreclaim", "vmstatus", etc.)  ! The exact semantics of these operators need not follow the Red Book ! literally.!   Essential.!   meeting.epcore.1995-08-08.psgc, meeting.epcore.1995-11-01.    .fun.ps.hash:    Support pointer-based hashing, even if objects are relocated.****************** 280,311 ****    meeting.epcore.1995-08-07.ps.rehash    .fun.ps.iter:!   Support iterators over dictionaries.!   Essential.!   meeting.epcore.1995-08-07.ps.iter    .fun.ps.restore:    Support the PostScript save/restore mechanism.!   Essential.!   meeting.epcore.1995-08-07.ps.save! ! .fun.ps.restore.global:!   Support save/restore on global VM [to support the server loop].!   **** Unknown.!   meeting.epcore.1995-08-07.ps.local      Font Cache Management    .fun.fc.alloc:    Allocate memory for font cache objects.!   Essential.!   meeting.epcore.1995-07-18.req.ep    .fun.fc.free:!   Manually recycle memory occuped by font cache objects.!   Essential.!   meeting.epcore.1995-07-18.req.ep    .fun.fc.gc:    Automatically recycle memory occupied by dead font cache objects.--- 266,293 ----    meeting.epcore.1995-08-07.ps.rehash    .fun.ps.iter:!   Support iterators over dictionaries.  [The exact semantics of iterators ! under GC conditions will be investigated and specified.]!   Critical.!   meeting.epcore.1995-08-07.ps.iter, meeting.epcore.1995-11-01.    .fun.ps.restore:    Support the PostScript save/restore mechanism.!   Critical.!   meeting.epcore.1995-08-07.ps.save, meeting.epcore.1995-11-01.      Font Cache Management    .fun.fc.alloc:    Allocate memory for font cache objects.!   Critical.!   meeting.epcore.1995-07-18.req.ep, meeting.epcore.1995-11-01.    .fun.fc.free:!   Manually recycle memory occupied by font cache objects.!   Critical.!   meeting.epcore.1995-07-18.req.ep, meeting.epcore.1995-11-01.    .fun.fc.gc:    Automatically recycle memory occupied by dead font cache objects.****************** 316,345 ****  Temporary Memory Management    .fun.tmp.alloc:!   Allocate memory for temporary objects.  [malloc]!   Essential.!   meeting.epcore.1995-07-18.req.ep    .fun.tmp.free:!   Manually recycle memory occuped by temporary objects.  [free]!   Essential.!   meeting.epcore.1995-07-18.req.ep      Tickles    .fun.tickle:!   Must perform a "tickle" callback during extended periods of MM activity.    Essential.    meeting.epcore.1995-08-08.tickle    ! Memory Manager Control    .fun.control.slice:    Perform memory management work (optimisation, recycling, etc.) during   periods suggested by the RIP (e.g. idle time).!   **** Unknown.    meeting.epcore.1995-08-10.idle.response,   meeting.epcore.1995-08-10.co-op.idle  --- 298,335 ----  Temporary Memory Management    .fun.tmp.alloc:!   Allocate memory for temporary objects (malloc-like).!   Critical.!   meeting.epcore.1995-07-18.req.ep, meeting.epcore.1995-11-01.    .fun.tmp.free:!   Manually recycle memory occupied by temporary objects (free-like).!   Critical.!   meeting.epcore.1995-07-18.req.ep, meeting.epcore.1995-11-01.! ! ! Miscellaneous  + .fun.alloc.threaded:+   Support allocation by more than one thread.+   Nice.+   meeting.epcore.1995-11-01+     Tickles    .fun.tickle:!   Must tickle the RIP during extended periods of MM activity.    Essential.    meeting.epcore.1995-08-08.tickle    ! Memory Manager Measurement and Control    .fun.control.slice:    Perform memory management work (optimisation, recycling, etc.) during   periods suggested by the RIP (e.g. idle time).!   Optional.    meeting.epcore.1995-08-10.idle.response,   meeting.epcore.1995-08-10.co-op.idle  ****************** 348,375 ****    Essential.    meeting.epcore.1995-08-08.low  - .fun.control.single:-   Support both "single" and "multiple" modes of RIP operation.-   **** Unknown.-   meeting.epcore.1995-08-08.single- - **** Are there any behavioural differences for the MM between single and - multiple mode?  If not, this requirement can be removed.  Perhaps we - should specify those instead.- - .fun.measure.dial:-   Provide measurement feedback information to allow adjustment of MM usage - to optimise specific requirements.-   Essential.-   meeting.epcore.1995-07-18.req.ep- - **** What is the purpose of this?  If it is just in order to allow the RIP - group to make sensible adjustments without the assistance of MM then this - should be stated as a requirement instead.  If it is to reduce response - time to support calls then this should be stated instead.-   .fun.measure.dial.visual:!   Provide some visual indication of GC.    Optional.    meeting.epcore.1995-07-18.req.ep  --- 338,345 ----    Essential.    meeting.epcore.1995-08-08.low    .fun.measure.dial.visual:!   Support some visual indication of GC or other MM activity.    Optional.    meeting.epcore.1995-07-18.req.ep  ****************** 406,414 ****    Essential.    meeting.epcore.1995-08-08.debug  - **** This requirement will explode into more when we have studied the - present system.-   .fun.debug.assert:    Reporting illegal usage (assertion) at a level no worse than present.    Essential.--- 376,381 ----****************** 426,549 ****  .attr.align:    Memory shall be allocated for all objects at an alignment of at least 8b   (eight bytes).!   **** Unknown.    meeting.epcore.1995-08-07.align    ! Throughput  ! **** Is this actually "throughput" or "run-time"?  Andy mentioned that ! benchmarks are often done with a stopwatch, and although throughput is ! important for real customers, run-time is important for publicity.  ! **** We need to define "throughput" and define a scale for measuring it.  ! **** The subsets of the QA test suite on which this is to be measured is ! undefined.  ! **** What about the comment that these must hold in single mode, since ! that is how many benchmarks are run?  ! .attr.tp.seybold:!   RIP throughput shall be no lower than at present on the Seybold tests.    Essential.!   meeting.epcore.1995-08-08.work.speed  ! .attr.tp.gurber:!   RIP throughput shall be no lower than at present on the Gurber speedmass ! tests.    Essential.!   meeting.epcore.1995-08-08.work.speed  ! .attr.tp.qa-tests:!   RIP throughput shall be no lower than at present on specified subsets of ! the QA Test Suite, yet to be defined.!   **** Unknown.    meeting.epcore.1995-08-10.qa-test.group  - .attr.tp.cons:-   RIP throughput shall be consistent for any particular job plus or minus - five seconds.-   **** Unknown.-   meeting.epcore.1995-08-08.work.rate    ! Responsiveness    .attr.idle:    During extended periods of MM activity due to .fun.control.slice the RIP ! must regain control less than 0.25s after a specified asynchronous event.  ! [Such as a new job coming in after idle time.]!   **** Unknown.!   meeting.epcore.1995-08-10.idle.response! ! **** We will have to sort out an interface for asynchronous signalling ! here.    .attr.tickle:!   MM code must tickle ScriptWorks at least 60 times/sec.!   **** Unknown.!   meeting.epcore.1995-08-10.tickle  - **** Isn't this more often than necessary?    Storage Capacity  ! **** We've left out the requirement that the "footprint" not increase.    .attr.arena.min:!   Manage base arena memory down to a minimum size of ????.    Essential.!   **** Unknown source.    .attr.arena.typ:!   Manage base arena memory with a typical size of ????.    Optional.!   **** Unknown source.    .attr.arena.max:!   Manage base arena memory up to a maximum size of 1Gb.    Essential.!   meeting.epcore.1995-08-10.capacity, meeting.epcore.1995-08-07.dl.sizes  - **** Note, this is determined by the maximum size of the images in the - display list, as stated in meeting.epcore.1995-08-07.dl.sizes, and would - otherwise be 512Mb.-   .attr.dl.obj.min:    Manage display list objects down to a minimum size of 8b (eight bytes).    Essential.    meeting.epcore.1995-08-07.dl.sizes    .attr.dl.obj.typ:!   Manage display list objects of a typical size of 8b (eight bytes).    Optional.    meeting.epcore.1995-08-07.dl.sizes    .attr.dl.obj.max:!   Manage display list objects up to a maximum size of 1Gb (one gigabyte).    Essential.!   meeting.epcore.1995-08-07.dl.sizes    .attr.ps.obj.min:!   Manage PostScript objects down to a minimum size of 8b (eight bytes).    Essential.    meeting.epcore.1995-08-07.ps.sizes, meeting.epcore.1995-08-07.ps.nozero    .attr.ps.str.max:!   Manage PostScript strings up to a maximum size of 64Kb (65536 bytes).    Essential.    meeting.epcore.1995-08-07.ps.sizes    .attr.ps.array.max:!   Manage PostScript arrays up to a maximum size of 512Kb+1Kb (525312 ! bytes).    Essential.!   meeting.epcore.1995-08-07.ps.sizes    .attr.ps.dict.max:!   Manage PostScript dictionaries up to a maximum size of 1Mb+1Kb (1049600 ! bytes).    Essential.    meeting.epcore.1995-08-07.ps.sizes  --- 393,575 ----  .attr.align:    Memory shall be allocated for all objects at an alignment of at least 8b   (eight bytes).!   Essential.    meeting.epcore.1995-08-07.align    ! Run-Time Attributes  ! .attr.run-time.proc: The "run-time" attributes are intended to ensure that ! ScriptWorks benchmark performance does not degrade under the MM.  The ! procedure for testing these attributes shall be:  !   1. cold-start the RIP,  !   2. RIP the job and measure the run time,  !   3. reboot the RIP,  !   4. RIP the job again and measure run time,! !   5. take the best of the two run times.! ! (Procedure described by Andy Cave, meeting.epcore.1995-11-01.)! ! .attr.run-time.seybold:!   RIP run-time shall be no greater than at present when applied to the ! Seybold Speed Tests.!   Essential.!   meeting.epcore.1995-08-08.work.speed, meeting.epcore.1995-11-01! ! .attr.run-time.genoa-fts:!   RIP run-time shall be no greater than at present when applied to the ! Genoa FTS tests.!   Essential.!   meeting.epcore.1995-08-08.work.speed, meeting.epcore.1995-11-01! ! .attr.run-time.genoa-ats:!   RIP run-time shall be no greater than at present when applied to the ! Genoa ATS tests.    Essential.!   meeting.epcore.1995-08-08.work.speed, meeting.epcore.1995-11-01  ! .attr.run-time.qa:!   RIP run-time shall be no greater than at present when applied to certain ! jobs from the ScriptWorks QA Test Suite.  [This set of jobs has yet to be ! defined and will appear in a future revision of this document.]    Essential.!   meeting.epcore.1995-08-08.work.speed, meeting.epcore.1995-11-01! ! ! Throughput Attributes! ! .attr.tp.proc: The "throughput" attributes are intended to ensure that the ! genuinely useful performance of the RIP does not degrade under the MM.  ! The procedure for testing these attributes shall be:! !   1. cold-start the RIP,! !   2. RIP all the jobs in the test set in sequence and measure run time,! !   3. reboot the RIP,  !   4. RIP all the jobs in the test set in sequence again and measure run ! time,! !   5. take the best of the two run times.! ! .attr.tp.seybold:!   RIP throughput shall be no lower than at present on the Seybold Speed ! Tests.  [The exact list of jobs and order of the set will appear in a ! future revision of this document.]!   Essential.!   meeting.epcore.1995-08-08.work.speed, meeting.epcore.1995-11-01! ! .attr.tp.genoa-fts:!   RIP throughput shall be no lower than at present on the Genoa FTS ! tests.  [The exact list of jobs and order of the set will appear in a ! future revision of this document.]!   Essential.!   meeting.epcore.1995-08-08.work.speed, meeting.epcore.1995-11-01! ! .attr.tp.genoa-ats:!   RIP throughput shall be no lower than at present on the Genoa FTS ! tests.  [The exact list of jobs and order of the set will appear in a ! future revision of this document.]!   Essential.!   meeting.epcore.1995-08-08.work.speed, meeting.epcore.1995-11-01! ! .attr.tp.qa:!   RIP throughput shall be no lower than at present on subsets of the ! ScriptWorks QA Test Suite.  [The subsets have yet to be defined and will ! appear in a future revision of this document.]!   Essential.    meeting.epcore.1995-08-10.qa-test.group    + Other Timing Constraints  ! .attr.run-time.cons:!   RIP run-time shall be consistent for any particular job plus or minus ! five seconds.!   Essential, maybe optional if a GC occurs.!   meeting.epcore.1995-08-08.work.rate, meeting.epcore.1995-11-01.    .attr.idle:    During extended periods of MM activity due to .fun.control.slice the RIP ! must regain control less than 0.5s after a specified asynchronous event ! (e.g. as a new job coming in after idle time.)!   Essential.!   meeting.epcore.1995-08-10.idle.response, meeting.epcore.1995-11-01.    .attr.tickle:!   MM code must tickle the RIP at least 4 times per second.!   Essential.!   meeting.epcore.1995-08-10.tickle, meeting.epcore.1995-11-01.      Storage Capacity  ! .attr.footprint:!   The total memory requirement of the RIP shall not increase in comparison ! with the existing system for the same jobs due to the new Memory Manager.!   Essential.!   meeting.epcore.1995-11-01    .attr.arena.min:!   Manage arena memory down to a minimum size of 4Mb (four megabytes).    Essential.!   meeting.epcore.1995-11-01.    .attr.arena.typ:!   Manage base arena memory with typical sizes of 12Mb, 40Mb, and 90Mb.    Optional.!   meeting.epcore.1995-11-01.    .attr.arena.max:!   Manage base arena memory up to a maximum size of 512Mb.    Essential.!   meeting.epcore.1995-08-10.capacity, meeting.epcore.1995-11-01.    .attr.dl.obj.min:    Manage display list objects down to a minimum size of 8b (eight bytes).    Essential.    meeting.epcore.1995-08-07.dl.sizes    .attr.dl.obj.typ:!   Manage display list objects of a typical (mode) size of 8b (eight bytes).    Optional.    meeting.epcore.1995-08-07.dl.sizes    .attr.dl.obj.max:!   Manage display list objects up to a maximum size equal to that of the ! arena (.attr.arena.max).    Essential.!   meeting.epcore.1995-11-01.    .attr.ps.obj.min:!   Manage PostScript objects (other than strings) down to a minimum size of ! 8b (eight bytes).    Essential.    meeting.epcore.1995-08-07.ps.sizes, meeting.epcore.1995-08-07.ps.nozero  + .attr.ps.str.min:+   Manage PostScript strings down to a minimum size of 1b (one byte).+   Essential.+   meeting.epcore.1995-11-01.+   .attr.ps.str.max:!   Manage PostScript strings up to a maximum size of 64Kb.    Essential.    meeting.epcore.1995-08-07.ps.sizes    .attr.ps.array.max:!   Manage PostScript arrays up to a maximum size of 512Kb.    Essential.!   meeting.epcore.1995-08-07.ps.sizes, meeting.epcore.1995-11-01.    .attr.ps.dict.max:!   Manage PostScript dictionaries up to a maximum size of 1Mb+1Kb.    Essential.    meeting.epcore.1995-08-07.ps.sizes  ****************** 558,648 ****    Optional.    meeting.epcore.1995-08-07.ps.jobs  - **** Is this the maximum, in fact?-   .attr.ps.job.max:!   Manage PostScript memory up to a maximum size of ????.    Essential.!   **** Unknown source.    .attr.fc.obj.min:!   Manage fontcache objects down to a minimum size of ????.    Essential.!   **** Unknown source.    .attr.fc.obj.typ:    Manage fontcache objects of typical size classes of 32b, 64b, 128b, 1Kb.    Optional.    meeting.epcore.1995-08-07.fontcache.sizes    .attr.fc.obj.max:!   Manage fontcache objects up to a maximum size of ????.    Essential.!   **** Unknown source.    .attr.fc.pool.max:    Manage fontcache memory up to a maximum size equal to that of the arena   (.attr.arena.max).    Essential.!   meeting.epcore.1995-08-07.fontcache.jobs    .attr.tmp.obj.min:!   Manage temporary objects down to a minimum size of ????.    Essential.!   **** Unknown source.    .attr.tmp.obj.max:!   Manage temporary objects up to a maximum size of ????.    Essential.!   **** Unknown source.    .attr.tmp.pool.max:    Manage temporary memory up to a maximum size of 1Mb.    Essential.!   meeting.epcore.1995-08-07.general      Reliability  ! .attr.mtbf:!   The mean time between failure due to the MM of the RIP shall be no less ! than 16000 hours of continuous execution of any set of jobs.    Essential.    meeting.epcore.1995-08-10.mtbf, meeting.epcore.1995-09-13.odd, ! meeting.epcore.1995-09-13.dollars  - **** This is inadequately specified.  How will it be measured?  Talk to - QA.  In particular, a single pathalogical job can render it useless.  -   DESIGN CONSTRAINTS      Hardware Constraints  ! .dc.hw.any32:!   Operate on in any reasonable 32-bit environment.    meeting.epcore.1995-08-10.any32  - **** This needs clarification.  What constitutes a reasonable 32-bit - architecture?  We need a list of current architectures.-   .dc.hw.multiproc:    Operate on multiprocessor platforms.!   Essential.    meeting.epcore.1995-08-10.multiproc      Operating System Constraints    .dc.os.sw:!   Operate on any RIP platform.    meeting.epcore.1995-08-10.any32  - **** This needs clarification.  We need a list of platforms to plan for - initially, plus portability constraints.  -   Library Constraints    .dc.lib.approved:--- 584,683 ----    Optional.    meeting.epcore.1995-08-07.ps.jobs    .attr.ps.job.max:!   Manage PostScript memory up to a maximum size equal to that of the arena ! (.attr.arena.max).    Essential.!   meeting.epcore.1995-11-01.    .attr.fc.obj.min:!   Manage fontcache objects down to a minimum size of 48b (forty-eight ! bytes).    Essential.!   meeting.epcore.1995-11-01.    .attr.fc.obj.typ:    Manage fontcache objects of typical size classes of 32b, 64b, 128b, 1Kb.    Optional.    meeting.epcore.1995-08-07.fontcache.sizes  + .attr.fc.obj.max-typ:+   Manage fontcache objects with a typical maximum sizes between 768Kb and + 5Mb.  [Configuration information may be available to determine the maximum + at run-time.]+   Optional.+   meeting.epcore.1995-11-01.+   .attr.fc.obj.max:!   Manage fontcache objects up to a maximum size equal to that of the arena ! (.attr.arena.max).    Essential.!   meeting.epcore.1995-11-01.    .attr.fc.pool.max:    Manage fontcache memory up to a maximum size equal to that of the arena   (.attr.arena.max).    Essential.!   meeting.epcore.1995-08-07.fontcache.jobs, meeting.epcore.1995-11-01.    .attr.tmp.obj.min:!   Manage temporary objects down to a minimum size of 1b (one byte).    Essential.!   meeting.epcore.1995-11-01.    .attr.tmp.obj.max:!   Manage temporary objects up to a maximum size of 1Mb.    Essential.!   meeting.epcore.1995-11-01.    .attr.tmp.pool.max:    Manage temporary memory up to a maximum size of 1Mb.    Essential.!   meeting.epcore.1995-08-07.general.      Reliability  ! .attr.rel:!   A baseline figure for reliability is that the mean time between failure ! due to the MM of the RIP shall be no less than 16000 hours of continuous ! execution of any set of jobs.  However, this is an unmeasurable ! attribute.  It has been agreed (meeting.epco! re.1995-11-01) to consult with QA to determine a reasonable set of ! requirements and tests which approximate this level of reliability.  These ! will appear in a future revision of this document.    Essential.    meeting.epcore.1995-08-10.mtbf, meeting.epcore.1995-09-13.odd, ! meeting.epcore.1995-09-13.dollars, meeting.epcore.1995-11-01.      DESIGN CONSTRAINTS      Hardware Constraints  ! .dc.hw.current:!   Operate on all current RIP target architectures.  [A list of these is to ! be provided and included in this document.]  (See also .plan.port.arch.*.)!   Critical.    meeting.epcore.1995-08-10.any32    .dc.hw.multiproc:    Operate on multiprocessor platforms.!   Critical.    meeting.epcore.1995-08-10.multiproc      Operating System Constraints    .dc.os.sw:!   Operate on all current RIP target operating systems.  [A list of these ! is to be provided and included in this document.]  (See also ! .plan.port.os.*.)!   Critical.    meeting.epcore.1995-08-10.any32      Library Constraints    .dc.lib.approved:****************** 653,667 ****    Linkage Constraints    .dc.link.c:!   The Memory Manager shall be supplied as a standard C linkable for the ! platform.    Essential.    meeting.epcore.1995-08-10.env.c    .dc.link.c.header:!   The Memory Manager shall be delivered with C header files which declare ! its interface to the RIP.    Essential.    meeting.epcore.1995-08-10.env.c  --- 688,706 ----    Linkage Constraints  + .dc.link: This section defines a baseline method of delivery for the MM.  + Other methods, such as integrating the build systems and providing source, + are possible and will be considered.+   .dc.link.c:!   The Memory Manager shall be supplied as a standard ANSI C linkable for ! the platform.    Essential.    meeting.epcore.1995-08-10.env.c    .dc.link.c.header:!   The Memory Manager shall be delivered with ANSI C header files which ! declare its interface to the RIP.    Essential.    meeting.epcore.1995-08-10.env.c  ****************** 681,687 ****    PROTOCOLS  ! **** Mostly undefined subject to investigation and further meetings.    Interface Issues  --- 720,728 ----    PROTOCOLS  ! .prot: The protocols which will be used to interface the RIP and MM are ! mostly undefined, and will be specified after further investigation and ! design.  See also .plan.int.effort.    Interface Issues  ****************** 689,698 ****    The design of the interface to the Memory Manager shall be based on the   existing RIP MM interfaces.    Optional.!   ???! ! **** This critically depends on how much effort EP can put into ! integration.    .prot.int.boot:    Base memory is passed to the RIP on boot.--- 730,736 ----    The design of the interface to the Memory Manager shall be based on the   existing RIP MM interfaces.    Optional.!   meeting.epcore.1995-11-01.    .prot.int.boot:    Base memory is passed to the RIP on boot.****************** 727,739 ****  Planned Deliveries    .plan.deliv.eval:!   Deliver a simple system for initial evaluation before 1996-06-01.!   test    Sign-off by EP divisional manager    meeting.epcore.1995-07-18  - **** The subset of functionality and attributes in this release must be - defined, probably after initial design and planning.-   .plan.deliv.full:    Deliver the full memory manager before 1997-01-01.    meeting.epcore.1995-07-18--- 765,777 ----  Planned Deliveries    .plan.deliv.eval:!   Deliver a simple system for initial evaluation before 1996-06-01.  This ! early delivery will provide a subset of functionally, but comply with all ! attribute requirements.  The exact subset of functionality has yet to be ! defined.!   Essential.    meeting.epcore.1995-07-18    .plan.deliv.full:    Deliver the full memory manager before 1997-01-01.    meeting.epcore.1995-07-18****************** 741,756 ****    Integration Effort  ! **** These need defining.  There has to be some commitment here from EP.    .plan.int.effort:    Effort required from EP manpower to integrate into RIP shall be less ! than ????.!   ????    .plan.int.time:!   Elapsed time for integration into the RIP shall be less than ????.!   ????      Porting Constraints--- 779,799 ----    Integration Effort  ! .plan.int: The following requirements combine to form a commitment from ! Yoryos to provide approximately 3/4 of a person for the duration of the MM ! development, which is intended to continue throughout 1997.  See ! .plan.deliv.*.    .plan.int.effort:    Effort required from EP manpower to integrate into RIP shall be less ! than 9 man-months.!   Essential.!   meeting.epcore.1995-11-01.    .plan.int.time:!   Elapsed time for integration into the RIP shall be less than one year.!   Essential.!   meeting.epcore.1995-11-01.      Porting Constraints****************** 758,806 ****  .plan.port.arch.effort:    Effort required to port to a feasible new architecture shall be less   than 2 man weeks.    meeting.epcore.1995-07-18    .plan.port.arch.time:!   Elapsed time to port to a feasible new architecture shall be less than ! ????.!   ????! ! **** What constitues a "feasible" architecture.  See also .dc.hw.any32.    .plan.port.os.effort:    Effort to port to a feasible new OS shall be less than 3 man months.    meeting.epcore.1995-07-18    .plan.port.os.time:!   Elapsed time to port to a feasible new architecture shall be less than ! ????.!   ????! ! **** What constitues a "feasible" OS?  ! **** How much notice do we get?      Support    .plan.supp.use.init:!   The MM Group shall supply up to ???? of effort to assist with use of the ! Memory Manager immediately after delivery.! ! **** Can we define this?  ! .plan.supp.use.cont:!   The MM Group shall supply up to ???? of effort to assist with the use of ! the Memory Manager thereafter.! ! **** Can we define this?! ! .plan.supp.debug:!   The MM Group shall supply up to ???? of effort to assist with debugging ! the use of the system.!   meeting.epcore.1995-08-10.debug! ! .plan.supp.tuning:!   The MM Group shall supply up to ???? of effort to tune the use of the ! system for the desired performance.!   **** Unknown source.\ No newline at end of file--- 801,848 ----  .plan.port.arch.effort:    Effort required to port to a feasible new architecture shall be less   than 2 man weeks.+   Essential.    meeting.epcore.1995-07-18    .plan.port.arch.time:!   Elapsed time to port to a feasible new architecture shall be less than 1 ! month.!   Essential.!   meeting.epcore.1995-11-01.    .plan.port.os.effort:    Effort to port to a feasible new OS shall be less than 3 man months.+   Essential.    meeting.epcore.1995-07-18    .plan.port.os.time:!   Elapsed time to port to a feasible new OS shall be less than 3 months.!   Essential.!   meeting.epcore.1995-11-01.  ! .plan.port.os.time.run:!   The MM will be partially working on a new OS within 1 month -- enough to ! get the RIP running and stagger RIP porting effort.!   Essential.!   meeting.epcore.1995-11-01.      Support    .plan.supp.use.init:!   The MM Group shall supply up to 3 man-months of effort to train EP staff ! and assist with use of the Memory Manager immediately after delivery.!   Essential.!   meeting.epcore.1995-11-01.  ! .plan.supp.use.misc:!   The MM Group shall supply up to 3 man-months per year of effort to ! debug, tune, train EP staff, and assist with the use of the Memory Manager ! thereafter.!   Essential.!   meeting.epcore.1995-11-01.! ! .plan.supp.debug: The responsiveness of the MM Group to EP support calls ! or bugs found in the MM will be defined here after a future meeting with ! Yoryos.  The response effort will be defined against EP's bug severity ! level definitions.