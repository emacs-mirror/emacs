%!
%%BoundingBox: (atend)
%%Pages: (atend)
%%DocumentFonts: (atend)
%%EndComments
%
% FrameMaker PostScript Prolog 3.0, for use with FrameMaker 3.0
% Copyright (c) 1986,87,89,90,91 by Frame Technology Corporation.
% All rights reserved.
%
% Known Problems:
%	Due to bugs in Transcript, the 'PS-Adobe-' is omitted from line 1
/FMversion (3.0) def 
% Set up Color vs. Black-and-White
	/FMPrintInColor systemdict /colorimage known
		systemdict /currentcolortransfer known or def
% Uncomment this line to force b&w on color printer
%   /FMPrintInColor false def
/FrameDict 195 dict def 
systemdict /errordict known not {/errordict 10 dict def
		errordict /rangecheck {stop} put} if
% The readline in 23.0 doesn't recognize cr's as nl's on AppleTalk
FrameDict /tmprangecheck errordict /rangecheck get put 
errordict /rangecheck {FrameDict /bug true put} put 
FrameDict /bug false put 
mark 
% Some PS machines read past the CR, so keep the following 3 lines together!
currentfile 5 string readline
00
0000000000
cleartomark 
errordict /rangecheck FrameDict /tmprangecheck get put 
FrameDict /bug get { 
	/readline {
		/gstring exch def
		/gfile exch def
		/gindex 0 def
		{
			gfile read pop 
			dup 10 eq {exit} if 
			dup 13 eq {exit} if 
			gstring exch gindex exch put 
			/gindex gindex 1 add def 
		} loop
		pop 
		gstring 0 gindex getinterval true 
		} def
	} if
/FMVERSION {
	FMversion ne {
		/Times-Roman findfont 18 scalefont setfont
		100 100 moveto
		(FrameMaker version does not match postscript_prolog!)
		dup =
		show showpage
		} if
	} def 
/FMLOCAL {
	FrameDict begin
	0 def 
	end 
	} def 
	/gstring FMLOCAL
	/gfile FMLOCAL
	/gindex FMLOCAL
	/orgxfer FMLOCAL
	/orgproc FMLOCAL
	/organgle FMLOCAL
	/orgfreq FMLOCAL
	/yscale FMLOCAL
	/xscale FMLOCAL
	/manualfeed FMLOCAL
	/paperheight FMLOCAL
	/paperwidth FMLOCAL
/FMDOCUMENT { 
	array /FMfonts exch def 
	/#copies exch def
	FrameDict begin
	0 ne dup {setmanualfeed} if
	/manualfeed exch def
	/paperheight exch def
	/paperwidth exch def
	/yscale exch def
	/xscale exch def
	currenttransfer cvlit /orgxfer exch def
	currentscreen cvlit /orgproc exch def
	/organgle exch def /orgfreq exch def
	setpapername 
	manualfeed {true} {papersize} ifelse 
	{manualpapersize} {false} ifelse 
	{desperatepapersize} if
	end 
	} def 
	/pagesave FMLOCAL
	/orgmatrix FMLOCAL
	/landscape FMLOCAL
/FMBEGINPAGE { 
	FrameDict begin 
	/pagesave save def
	3.86 setmiterlimit
	/landscape exch 0 ne def
	landscape { 
		90 rotate 0 exch neg translate pop 
		}
		{pop pop}
		ifelse
	xscale yscale scale
	/orgmatrix matrix def
	gsave 
	} def 
/FMENDPAGE {
	grestore 
	pagesave restore
	end 
	showpage
	} def 
/FMFONTDEFINE { 
	FrameDict begin
	findfont 
	ReEncode 
	1 index exch 
	definefont 
	FMfonts 3 1 roll 
	put
	end 
	} def 
/FMFILLS {
	FrameDict begin
	array /fillvals exch def
	end 
	} def 
/FMFILL {
	FrameDict begin
	 fillvals 3 1 roll put
	end 
	} def 
/FMNORMALIZEGRAPHICS { 
	newpath
	0.0 0.0 moveto
	1 setlinewidth
	0 setlinecap
	0 0 0 sethsbcolor
	0 setgray 
	} bind def
	/fx FMLOCAL
	/fy FMLOCAL
	/fh FMLOCAL
	/fw FMLOCAL
	/llx FMLOCAL
	/lly FMLOCAL
	/urx FMLOCAL
	/ury FMLOCAL
/FMBEGINEPSF { 
	end 
	/FMEPSF save def 
	/showpage {} def 
	FMNORMALIZEGRAPHICS 
	[/fy /fx /fh /fw /ury /urx /lly /llx] {exch def} forall 
	fx fy translate 
	rotate
	fw urx llx sub div fh ury lly sub div scale 
	llx neg lly neg translate 
	} bind def
/FMENDEPSF {
	FMEPSF restore
	FrameDict begin 
	} bind def
FrameDict begin 
/setmanualfeed {
%%BeginFeature *ManualFeed True
	 statusdict /manualfeed true put
%%EndFeature
	} def
/max {2 copy lt {exch} if pop} bind def
/min {2 copy gt {exch} if pop} bind def
/inch {72 mul} def
/pagedimen { 
	paperheight sub abs 16 lt exch 
	paperwidth sub abs 16 lt and
	{/papername exch def} {pop} ifelse
	} def
	/papersizedict FMLOCAL
/setpapername { 
	/papersizedict 14 dict def 
	papersizedict begin
	/papername /unknown def 
		/Letter 8.5 inch 11.0 inch pagedimen
		/LetterSmall 7.68 inch 10.16 inch pagedimen
		/Tabloid 11.0 inch 17.0 inch pagedimen
		/Ledger 17.0 inch 11.0 inch pagedimen
		/Legal 8.5 inch 14.0 inch pagedimen
		/Statement 5.5 inch 8.5 inch pagedimen
		/Executive 7.5 inch 10.0 inch pagedimen
		/A3 11.69 inch 16.5 inch pagedimen
		/A4 8.26 inch 11.69 inch pagedimen
		/A4Small 7.47 inch 10.85 inch pagedimen
		/B4 10.125 inch 14.33 inch pagedimen
		/B5 7.16 inch 10.125 inch pagedimen
	end
	} def
/papersize {
	papersizedict begin
		/Letter {lettertray letter} def
		/LetterSmall {lettertray lettersmall} def
		/Tabloid {11x17tray 11x17} def
		/Ledger {ledgertray ledger} def
		/Legal {legaltray legal} def
		/Statement {statementtray statement} def
		/Executive {executivetray executive} def
		/A3 {a3tray a3} def
		/A4 {a4tray a4} def
		/A4Small {a4tray a4small} def
		/B4 {b4tray b4} def
		/B5 {b5tray b5} def
		/unknown {unknown} def
	papersizedict dup papername known {papername} {/unknown} ifelse get
	end
	/FMdicttop countdictstack 1 add def 
	statusdict begin stopped end 
	countdictstack -1 FMdicttop {pop end} for 
	} def
/manualpapersize {
	papersizedict begin
		/Letter {letter} def
		/LetterSmall {lettersmall} def
		/Tabloid {11x17} def
		/Ledger {ledger} def
		/Legal {legal} def
		/Statement {statement} def
		/Executive {executive} def
		/A3 {a3} def
		/A4 {a4} def
		/A4Small {a4small} def
		/B4 {b4} def
		/B5 {b5} def
		/unknown {unknown} def
	papersizedict dup papername known {papername} {/unknown} ifelse get
	end
	stopped 
	} def
/desperatepapersize {
	statusdict /setpageparams known
		{
		paperwidth paperheight 0 1 
		statusdict begin
		{setpageparams} stopped pop 
		end
		} if
	} def
/savematrix {
	orgmatrix currentmatrix pop
	} bind def
/restorematrix {
	orgmatrix setmatrix
	} bind def
/dmatrix matrix def
/dpi    72 0 dmatrix defaultmatrix dtransform
    dup mul exch   dup mul add   sqrt def
/freq dpi 18.75 div 8 div round dup 0 eq {pop 1} if 8 mul dpi exch div def
/sangle 1 0 dmatrix defaultmatrix dtransform exch atan def
/DiacriticEncoding [
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
/.notdef /.notdef /.notdef /.notdef /space /exclam /quotedbl
/numbersign /dollar /percent /ampersand /quotesingle /parenleft
/parenright /asterisk /plus /comma /hyphen /period /slash /zero /one
/two /three /four /five /six /seven /eight /nine /colon /semicolon
/less /equal /greater /question /at /A /B /C /D /E /F /G /H /I /J /K
/L /M /N /O /P /Q /R /S /T /U /V /W /X /Y /Z /bracketleft /backslash
/bracketright /asciicircum /underscore /grave /a /b /c /d /e /f /g /h
/i /j /k /l /m /n /o /p /q /r /s /t /u /v /w /x /y /z /braceleft /bar
/braceright /asciitilde /.notdef /Adieresis /Aring /Ccedilla /Eacute
/Ntilde /Odieresis /Udieresis /aacute /agrave /acircumflex /adieresis
/atilde /aring /ccedilla /eacute /egrave /ecircumflex /edieresis
/iacute /igrave /icircumflex /idieresis /ntilde /oacute /ograve
/ocircumflex /odieresis /otilde /uacute /ugrave /ucircumflex
/udieresis /dagger /.notdef /cent /sterling /section /bullet
/paragraph /germandbls /registered /copyright /trademark /acute
/dieresis /.notdef /AE /Oslash /.notdef /.notdef /.notdef /.notdef
/yen /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
/ordfeminine /ordmasculine /.notdef /ae /oslash /questiondown
/exclamdown /logicalnot /.notdef /florin /.notdef /.notdef
/guillemotleft /guillemotright /ellipsis /.notdef /Agrave /Atilde
/Otilde /OE /oe /endash /emdash /quotedblleft /quotedblright
/quoteleft /quoteright /.notdef /.notdef /ydieresis /Ydieresis
/fraction /currency /guilsinglleft /guilsinglright /fi /fl /daggerdbl
/periodcentered /quotesinglbase /quotedblbase /perthousand
/Acircumflex /Ecircumflex /Aacute /Edieresis /Egrave /Iacute
/Icircumflex /Idieresis /Igrave /Oacute /Ocircumflex /.notdef /Ograve
/Uacute /Ucircumflex /Ugrave /dotlessi /circumflex /tilde /macron
/breve /dotaccent /ring /cedilla /hungarumlaut /ogonek /caron
] def
/ReEncode { 
	dup 
	length 
	dict begin 
	{
	1 index /FID ne 
		{def} 
		{pop pop} ifelse 
	} forall 
	0 eq {/Encoding DiacriticEncoding def} if 
	currentdict 
	end 
	} bind def
/graymode true def
	/bwidth FMLOCAL
	/bpside FMLOCAL
	/bstring FMLOCAL
	/onbits FMLOCAL
	/offbits FMLOCAL
	/xindex FMLOCAL
	/yindex FMLOCAL
	/x FMLOCAL
	/y FMLOCAL
/setpattern {
	 /bwidth  exch def
	 /bpside  exch def
	 /bstring exch def
	 /onbits 0 def  /offbits 0 def
	 freq sangle landscape {90 add} if 
		{/y exch def
		 /x exch def
		 /xindex x 1 add 2 div bpside mul cvi def
		 /yindex y 1 add 2 div bpside mul cvi def
		 bstring yindex bwidth mul xindex 8 idiv add get
		 1 7 xindex 8 mod sub bitshift and 0 ne
		 {/onbits  onbits  1 add def 1}
		 {/offbits offbits 1 add def 0}
		 ifelse
		}
		setscreen
	 {} settransfer
	 offbits offbits onbits add div FMsetgray
	/graymode false def
	} bind def
/grayness {
	FMsetgray
	graymode not {
		/graymode true def
		orgxfer cvx settransfer
		orgfreq organgle orgproc cvx setscreen
		} if
	} bind def
	/HUE FMLOCAL
	/SAT FMLOCAL
	/BRIGHT FMLOCAL
	/Colors FMLOCAL
FMPrintInColor 
	
	{
	/HUE 0 def
	/SAT 0 def
	/BRIGHT 0 def
	% array of arrays Hue and Sat values for the separations [HUE BRIGHT]
	/Colors   
	[[0    0  ]    % black
	 [0    0  ]    % white
	 [0.00 1.0]    % red
	 [0.37 1.0]    % green
	 [0.60 1.0]    % blue
	 [0.50 1.0]    % cyan
	 [0.83 1.0]    % magenta
	 [0.16 1.0]    % comment / yellow
	 ] def
      
	/BEGINBITMAPCOLOR { 
		BITMAPCOLOR} def
	/BEGINBITMAPCOLORc { 
		BITMAPCOLORc} def
	/BEGINBITMAPTRUECOLOR { 
		BITMAPTRUECOLOR } def
	/BEGINBITMAPTRUECOLORc { 
		BITMAPTRUECOLORc } def
	/K { 
		Colors exch get dup
		0 get /HUE exch store 
		1 get /BRIGHT exch store
		  HUE 0 eq BRIGHT 0 eq and
			{1.0 SAT sub setgray}
			{HUE SAT BRIGHT sethsbcolor} 
		  ifelse
		} def
	/FMsetgray { 
		/SAT exch 1.0 exch sub store 
		  HUE 0 eq BRIGHT 0 eq and
			{1.0 SAT sub setgray}
			{HUE SAT BRIGHT sethsbcolor} 
		  ifelse
		} bind def
	}
	
	{
	/BEGINBITMAPCOLOR { 
		BITMAPGRAY} def
	/BEGINBITMAPCOLORc { 
		BITMAPGRAYc} def
	/BEGINBITMAPTRUECOLOR { 
		BITMAPTRUEGRAY } def
	/BEGINBITMAPTRUECOLORc { 
		BITMAPTRUEGRAYc } def
	/FMsetgray {setgray} bind def
	/K { 
		pop
		} def
	}
ifelse
/normalize {
	transform round exch round exch itransform
	} bind def
/dnormalize {
	dtransform round exch round exch idtransform
	} bind def
/lnormalize { 
	0 dtransform exch cvi 2 idiv 2 mul 1 add exch idtransform pop
	} bind def
/H { 
	lnormalize setlinewidth
	} bind def
/Z {
	setlinecap
	} bind def
	/fillvals FMLOCAL
/X { 
	fillvals exch get
	dup type /stringtype eq
	{8 1 setpattern} 
	{grayness}
	ifelse
	} bind def
/V { 
	gsave eofill grestore
	} bind def
/N { 
	stroke
	} bind def
/M {newpath moveto} bind def
/E {lineto} bind def
/D {curveto} bind def
/O {closepath} bind def
	/n FMLOCAL
/L { 
 	/n exch def
	newpath
	normalize
	moveto 
	2 1 n {pop normalize lineto} for
	} bind def
/Y { 
	L 
	closepath
	} bind def
	/x1 FMLOCAL
	/x2 FMLOCAL
	/y1 FMLOCAL
	/y2 FMLOCAL
	/rad FMLOCAL
/R { 
	/y2 exch def
	/x2 exch def
	/y1 exch def
	/x1 exch def
	x1 y1
	x2 y1
	x2 y2
	x1 y2
	4 Y 
	} bind def
/RR { 
	/rad exch def
	normalize
	/y2 exch def
	/x2 exch def
	normalize
	/y1 exch def
	/x1 exch def
	newpath
	x1 y1 rad add moveto
	x1 y2 x2 y2 rad arcto
	x2 y2 x2 y1 rad arcto
	x2 y1 x1 y1 rad arcto
	x1 y1 x1 y2 rad arcto
	closepath
	16 {pop} repeat
	} bind def
/C { 
	grestore
	gsave
	R 
	clip
	} bind def
	/FMpointsize FMLOCAL
/F { 
	FMfonts exch get
	FMpointsize scalefont
	setfont
	} bind def
/Q { 
	/FMpointsize exch def
	F 
	} bind def
/T { 
	moveto show
	} bind def
/RF { 
	rotate
	0 ne {-1 1 scale} if
	} bind def
/TF { 
	gsave
	moveto 
	RF
	show
	grestore
	} bind def
/P { 
	moveto
	0 32 3 2 roll widthshow
	} bind def
/PF { 
	gsave
	moveto 
	RF
	0 32 3 2 roll widthshow
	grestore
	} bind def
/S { 
	moveto
	0 exch ashow
	} bind def
/SF { 
	gsave
	moveto
	RF
	0 exch ashow
	grestore
	} bind def
/B { 
	moveto
	0 32 4 2 roll 0 exch awidthshow
	} bind def
/BF { 
	gsave
	moveto
	RF
	0 32 4 2 roll 0 exch awidthshow
	grestore
	} bind def
/G { 
	gsave
	newpath
	normalize translate 0.0 0.0 moveto 
	dnormalize scale 
	0.0 0.0 1.0 5 3 roll arc 
	closepath fill
	grestore
	} bind def
/A { 
	gsave
	savematrix
	newpath
	2 index 2 div add exch 3 index 2 div sub exch 
	normalize 2 index 2 div sub exch 3 index 2 div add exch 
	translate 
	scale 
	0.0 0.0 1.0 5 3 roll arc 
	restorematrix
	stroke
	grestore
	} bind def
	/x FMLOCAL
	/y FMLOCAL
	/w FMLOCAL
	/h FMLOCAL
	/xx FMLOCAL
	/yy FMLOCAL
	/ww FMLOCAL
	/hh FMLOCAL
	/FMsaveobject FMLOCAL
	/FMoptop FMLOCAL
	/FMdicttop FMLOCAL
/BEGINPRINTCODE { 
	/FMdicttop countdictstack 1 add def 
	/FMoptop count 4 sub def 
	/FMsaveobject save def
	userdict begin 
	/showpage {} def 
	FMNORMALIZEGRAPHICS 
	3 index neg 3 index neg translate
	} bind def
/ENDPRINTCODE {
	count -1 FMoptop {pop pop} for 
	countdictstack -1 FMdicttop {pop end} for 
	FMsaveobject restore 
	} bind def
/gn { 
	0 
	{	46 mul 
		cf read pop 
		32 sub 
		dup 46 lt {exit} if 
		46 sub add 
		} loop
	add 
	} bind def
	/str FMLOCAL
/cfs { 
	/str sl string def 
	0 1 sl 1 sub {str exch val put} for 
	str def 
	} bind def
/ic [ 
	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0223
	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0223
	0
	{0 hx} {1 hx} {2 hx} {3 hx} {4 hx} {5 hx} {6 hx} {7 hx} {8 hx} {9 hx}
	{10 hx} {11 hx} {12 hx} {13 hx} {14 hx} {15 hx} {16 hx} {17 hx} {18 hx}
	{19 hx} {gn hx} {0} {1} {2} {3} {4} {5} {6} {7} {8} {9} {10} {11} {12}
	{13} {14} {15} {16} {17} {18} {19} {gn} {0 wh} {1 wh} {2 wh} {3 wh}
	{4 wh} {5 wh} {6 wh} {7 wh} {8 wh} {9 wh} {10 wh} {11 wh} {12 wh}
	{13 wh} {14 wh} {gn wh} {0 bl} {1 bl} {2 bl} {3 bl} {4 bl} {5 bl} {6 bl}
	{7 bl} {8 bl} {9 bl} {10 bl} {11 bl} {12 bl} {13 bl} {14 bl} {gn bl}
	{0 fl} {1 fl} {2 fl} {3 fl} {4 fl} {5 fl} {6 fl} {7 fl} {8 fl} {9 fl}
	{10 fl} {11 fl} {12 fl} {13 fl} {14 fl} {gn fl}
	] def
	/sl FMLOCAL
	/val FMLOCAL
	/ws FMLOCAL
	/im FMLOCAL
	/bs FMLOCAL
	/cs FMLOCAL
	/len FMLOCAL
	/pos FMLOCAL
/ms { 
	/sl exch def 
	/val 255 def 
	/ws cfs 
	/im cfs 
	/val 0 def 
	/bs cfs 
	/cs cfs 
	} bind def
400 ms 
/ip { 
	is 
	0 
	cf cs readline pop 
	{	ic exch get exec 
		add 
		} forall 
	pop 
	
	} bind def
/wh { 
	/len exch def 
	/pos exch def 
	ws 0 len getinterval im pos len getinterval copy pop
	pos len 
	} bind def
/bl { 
	/len exch def 
	/pos exch def 
	bs 0 len getinterval im pos len getinterval copy pop
	pos len 
	} bind def
/s1 1 string def
/fl { 
	/len exch def 
	/pos exch def 
	/val cf s1 readhexstring pop 0 get def
	pos 1 pos len add 1 sub {im exch val put} for
	pos len 
	} bind def
/hx { 
	3 copy getinterval 
	cf exch readhexstring pop pop 
	} bind def
	/h FMLOCAL
	/w FMLOCAL
	/d FMLOCAL
	/lb FMLOCAL
	/bitmapsave FMLOCAL
	/is FMLOCAL
	/cf FMLOCAL
/wbytes { 
	dup 
	8 eq {pop} {1 eq {7 add 8 idiv} {3 add 4 idiv} ifelse} ifelse
	} bind def
/BEGINBITMAPBWc { 
	1 {} COMMONBITMAPc
	} bind def
/BEGINBITMAPGRAYc { 
	8 {} COMMONBITMAPc
	} bind def
/BEGINBITMAP2BITc { 
	2 {} COMMONBITMAPc
	} bind def
/COMMONBITMAPc { 
	/r exch def
	/d exch def
	gsave
	translate rotate scale /h exch def /w exch def
	/lb w d wbytes def 
	sl lb lt {lb ms} if 
	/bitmapsave save def 
	r                    
	/is im 0 lb getinterval def 
	ws 0 lb getinterval is copy pop 
	/cf currentfile def 
	w h d [w 0 0 h neg 0 h] 
	{ip} image 
	bitmapsave restore 
	grestore
	} bind def
/BEGINBITMAPBW { 
	1 {} COMMONBITMAP
	} bind def
/BEGINBITMAPGRAY { 
	8 {} COMMONBITMAP
	} bind def
/BEGINBITMAP2BIT { 
	2 {} COMMONBITMAP
	} bind def
/COMMONBITMAP { 
	/r exch def
	/d exch def
	gsave
	translate rotate scale /h exch def /w exch def
	/bitmapsave save def 
	r                    
	/is w d wbytes string def
	/cf currentfile def 
	w h d [w 0 0 h neg 0 h] 
	{cf is readhexstring pop} image
	bitmapsave restore 
	grestore
	} bind def
	/proc1 FMLOCAL
	/proc2 FMLOCAL
	/newproc FMLOCAL
/Fmcc {
    /proc2 exch cvlit def
    /proc1 exch cvlit def
    /newproc proc1 length proc2 length add array def
    newproc 0 proc1 putinterval
    newproc proc1 length proc2 putinterval
    newproc cvx
} bind def
/ngrayt 256 array def
/nredt 256 array def
/nbluet 256 array def
/ngreent 256 array def
	/gryt FMLOCAL
	/blut FMLOCAL
	/grnt FMLOCAL
	/redt FMLOCAL
	/indx FMLOCAL
	/cynu FMLOCAL
	/magu FMLOCAL
	/yelu FMLOCAL
	/k FMLOCAL
	/u FMLOCAL
/colorsetup {
	currentcolortransfer
	/gryt exch def
	/blut exch def
	/grnt exch def
	/redt exch def
	0 1 255 {
		/indx exch def
		/cynu 1 red indx get 255 div sub def
		/magu 1 green indx get 255 div sub def
		/yelu 1 blue indx get 255 div sub def
		/k cynu magu min yelu min def
		/u k currentundercolorremoval exec def
		nredt indx 1 0 cynu u sub max sub redt exec put
		ngreent indx 1 0 magu u sub max sub grnt exec put
		nbluet indx 1 0 yelu u sub max sub blut exec put
		ngrayt indx 1 k currentblackgeneration exec sub gryt exec put
	} for
	{255 mul cvi nredt exch get}
	{255 mul cvi ngreent exch get}
	{255 mul cvi nbluet exch get}
	{255 mul cvi ngrayt exch get}
	setcolortransfer
	{pop 0} setundercolorremoval
	{} setblackgeneration
	} bind def
	/tran FMLOCAL
/fakecolorsetup {
	/tran 256 string def
	0 1 255 {/indx exch def 
		tran indx
		red indx get 77 mul
		green indx get 151 mul
		blue indx get 28 mul
		add add 256 idiv put} for
	currenttransfer
	{255 mul cvi tran exch get 255.0 div}
	exch Fmcc settransfer
} bind def
/BITMAPCOLOR { 
	/d 8 def
	gsave
	translate rotate scale /h exch def /w exch def
	/bitmapsave save def 
	colorsetup
	/is w d wbytes string def
	/cf currentfile def 
	w h d [w 0 0 h neg 0 h] 
	{cf is readhexstring pop} {is} {is} true 3 colorimage 
	bitmapsave restore 
	grestore
	} bind def
/BITMAPCOLORc { 
	/d 8 def
	gsave
	translate rotate scale /h exch def /w exch def
	/lb w d wbytes def 
	sl lb lt {lb ms} if 
	/bitmapsave save def 
	colorsetup
	/is im 0 lb getinterval def 
	ws 0 lb getinterval is copy pop 
	/cf currentfile def 
	w h d [w 0 0 h neg 0 h] 
	{ip} {is} {is} true 3 colorimage
	bitmapsave restore 
	grestore
	} bind def
/BITMAPTRUECOLORc { 
        gsave
        translate rotate scale /h exch def /w exch def
        /bitmapsave save def 
        
        /is w string def
        
        ws 0 w getinterval is copy pop 
        /cf currentfile def 
        w h 8 [w 0 0 h neg 0 h] 
        {ip} {gip} {bip} true 3 colorimage
        bitmapsave restore 
        grestore
        } bind def
/BITMAPTRUECOLOR { 
        gsave
        translate rotate scale /h exch def /w exch def
        /bitmapsave save def 
        /is w string def
        /gis w string def
        /bis w string def
        /cf currentfile def 
        w h 8 [w 0 0 h neg 0 h] 
        { cf is readhexstring pop } 
        { cf gis readhexstring pop } 
        { cf bis readhexstring pop } 
        true 3 colorimage 
        bitmapsave restore 
        grestore
        } bind def
/BITMAPTRUEGRAYc { 
        gsave
        translate rotate scale /h exch def /w exch def
        /bitmapsave save def 
        
        /is w string def
        
        ws 0 w getinterval is copy pop 
        /cf currentfile def 
        w h 8 [w 0 0 h neg 0 h] 
        {ip gip bip w gray} image
        bitmapsave restore 
        grestore
        } bind def
/ww FMLOCAL
/r FMLOCAL
/g FMLOCAL
/b FMLOCAL
/i FMLOCAL
/gray { 
        /ww exch def
        /b exch def
        /g exch def
        /r exch def
        0 1 ww 1 sub { /i exch def r i get .299 mul g i get .587 mul
			b i get .114 mul add add r i 3 -1 roll floor cvi put } for
        r
        } bind def
/BITMAPTRUEGRAY { 
        gsave
        translate rotate scale /h exch def /w exch def
        /bitmapsave save def 
        /is w string def
        /gis w string def
        /bis w string def
        /cf currentfile def 
        w h 8 [w 0 0 h neg 0 h] 
        { cf is readhexstring pop 
          cf gis readhexstring pop 
          cf bis readhexstring pop w gray}  image
        bitmapsave restore 
        grestore
        } bind def
/BITMAPGRAY { 
	8 {fakecolorsetup} COMMONBITMAP
	} bind def
/BITMAPGRAYc { 
	8 {fakecolorsetup} COMMONBITMAPc
	} bind def
/ENDBITMAP {
	} bind def
end 
	/ALDsave FMLOCAL
	/ALDmatrix matrix def ALDmatrix currentmatrix pop
/StartALD {
	/ALDsave save def
	 savematrix
	 ALDmatrix setmatrix
	} bind def
/InALD {
	 restorematrix
	} bind def
/DoneALD {
	 ALDsave restore
	} bind def
%%EndProlog
%%BeginSetup
(3.0) FMVERSION
1 1 595.28 844.72 0 1 4 FMDOCUMENT
0 0 /Helvetica FMFONTDEFINE
1 0 /Times-Roman FMFONTDEFINE
32 FMFILLS
0 0 FMFILL
1 .1 FMFILL
2 .3 FMFILL
3 .5 FMFILL
4 .7 FMFILL
5 .9 FMFILL
6 .97 FMFILL
7 1 FMFILL
8 <0f1e3c78f0e1c387> FMFILL
9 <0f87c3e1f0783c1e> FMFILL
10 <cccccccccccccccc> FMFILL
11 <ffff0000ffff0000> FMFILL
12 <8142241818244281> FMFILL
13 <03060c183060c081> FMFILL
14 <8040201008040201> FMFILL
16 1 FMFILL
17 .9 FMFILL
18 .7 FMFILL
19 .5 FMFILL
20 .3 FMFILL
21 .1 FMFILL
22 0.03 FMFILL
23 0 FMFILL
24 <f0e1c3870f1e3c78> FMFILL
25 <f0783c1e0f87c3e1> FMFILL
26 <3333333333333333> FMFILL
27 <0000ffff0000ffff> FMFILL
28 <7ebddbe7e7dbbd7e> FMFILL
29 <fcf9f3e7cf9f3f7e> FMFILL
30 <7fbfdfeff7fbfdfe> FMFILL
%%EndSetup
%%Page: "1" 1
%%BeginPaperSize: A4
%%EndPaperSize
595.28 844.72 0 FMBEGINPAGE
0 X
0 K
%%BeginBinary:  21450    
520 488 120.04 112.65 0 237.62 282.86 BEGINBITMAPBWc






























J$
>EC807FJ'
<F00000000001J#:#
;F8000003J#<#
:F8000001J#>#
9FE00003FJ"@"
98002J#9&8#
8F8003FFFFFFD80000FJ"8$8$8"
88001FFFFFFFFC000J#8"<"9"
7FC003FFF1FJ"8#="8"
7C03FFFFC03J&>&
6FE000003FFFFF800003FJ"8"@%
6F0FFFF800007J$B$
6800007F00000J%B%
5FC00007FFF80000FJ%C$
5F00003FFF00003J$D$
580003FFE0000J%;":#8%
4FE0000FF9FF80FFFC0001FJ$;#:#9$
4F0000FFE0FE001F8000FJ$A$8$
4E0007FC0707FFF0000J$<%8#9$
40003FF0C7FF83FFC07E0003FI$<#:$9$
FC000FE00081FE0FF8000FI$:(8":$
E0003FC3FFC0003FF827FFFF0003I$:":#9$8#
8001FF8380038FFF0FE000H$;#8*8$
FE000F823F7F8001FF80FF9FFF01F8003FH$8"8&:#:$
FC001F0F801FC001FF7FDFFE000FH,9(8$
F000FFFFF807FFFC001FF007FFC01FFFFF03FF8003H#8#:)<#
C003C073F800FFE00FFFE00FE000H+8"9#<$
000FFFFE0FFFFFF8007F7FF003F8003FG'8"8"9(9$
FE003FFFF83FFCF007FFF801FFFE07FE001FG'8-;$
F8007FFFE07FFF003FF830FFC003FFFE007FFF8003G&:,9&
E001FFFF80801FFC39FFE187FFFF003FF81FFFE001G#=4
8007001FFFFFFFF18FFF7FC03FFC0FFFC003FFF800G#9'9#8#9'
001F3FFC7FFF023FFFFFE01F8000FFFE003FF$8$8#;$9(
FC007FC01FF887FFFE3FF0FE00707FFF000FF$8%?"8*
F800FFC607C1FF1FF81FFC01FC3FFFC007F#9$@";'
E003CF001F0F07FF1FFFF001F#:#<"9":"8&
C00F807FE007F80FFFF8007FF#:":"<.
001FC0F903E03FF03FF00FFF81FFFE003FE$:":%9$9"9$
FE007FE0F07FFFC000007F1FFF801FE&9"8#8"8&:"8#
F800FFFF3F3F07E0E0FFE000FFE0C3C007E%:$:"9#8&8#
F003FFFE1FFFCFF1FC017FE03FFFC7F003E,:"9#<"8#
E007FFFF1FFFC7C00FFF87FFFFFFFFF801E#;(>"=$
C00F0407FF0207F8FFC0FE007FE#8*B":$
003F8FFFC01F03FC0E07FF7FFF003FD$8"8&@"9"8%
FE007FC7FF81C0FE27F0F78FFF801FD$:'9#;&8%
F801FFC1FF800FFC07FB3FFE7FF07FF187FFE007D#909#8(
F003E3FFC7FFE07FFC47FFFE000000001FFFFFF07FFF81FFF003D'9#8#:#;)
E007FFE7FFF1F3FFFE00000F3FF01FFF807FFC01D&:"9"<#9$8%
C01FFFC03FFFC0007FF83FE000FFFE00D'<(8"9+
803FFF0003F840000001FFFFDC03FC1FE07FFE01FFFF003FC(;&8&8$8"8#
FE00FFFE000038F8C0001FFFFFFC00003FFE1FC003C01FC%8#<#:%8&9#
FC01FFFF007F07FFFFF80003FF0780FFFCE00FC#8"8#9$<$9&8#
F803843FC380C0FFFFC0008001FFF807F007C#8#;$>$8"9"8#
F007C7E0FC0087FE0007C00FF801C#9%8$>$8"8#8#
E00FFE001FC7E0008FFFE000F0F01FFE00C#8&8#@)9$
C03FE3FFE00FDF0001FC003FFFFE03FFE0FF007FC#8*@'8"9#
807FF3FFFC07FFFFF800E1FFC007FFFFC73F803FC#8%8#;%9#8*
00FFF1FFFFC7E007C07FFE3FF800FFFFC07FFFFBFFC01FB'8"8,9$<%
FE01FFE3FFF8FF803FE10FFF807FE07FFC0FFF003FF9FFE00FB(9*8#9#9(
FC03FFC3FFFC7FFC00FFE31FE0001FF03FE3E00780FFFFF87FF807B(9#9)9#9"8%
F807FF81FFFE3FF003C0000FF03FFC7FE0F80101F03FF803B%<#:$9"9&:$
F00FFF00C03F7C0FF8C0FF007FFFFE1FFE01B(9#9(;&8%
E01FFF807FFF1F007FE0FE07F81FF8FFC01FFFFC03E00FFF00B%8"8&:":"9#8"8&
C03FFFC08FF803FFFFC3FC7FF80307C03FFF807FB(8#9$9"9(9&
807FFFE03FFFC7F00F3FE0FFF1FC3FFFFE01FFFF80FFFFC03FB&:#8":#8+8"8#
00FFFFF01FC07FC7FE0F807FF81FFFFF807FFF8F00E01FA#8%8#8)9#8%8"8#
FE01F80FFFE300FFC63FF0FE07FF07E3F03FE01FFFEF01F00FA#8(<#:$9(8#
FC03FC07FFF1FFFC037E0F183FE0F807FFFFFFFE03F807A#8(9"8&9"9#9#8#
F807FE03FFF3FFF80F86781FFF83C7C0FE03FC07FC03A#8,8#:";#9#8#
F00FFF01FFFFFFE03FFFEFFF8E003F1CFF80F80FFE01A#9"9%9,9#8"9"
E01F8080FFFF87F8001FFF818FFE3C1F807FC07FF0FFA#9#8*8#9(8#9"
C03FC07F01FFFE13FF8C7FF838C01F107FFC07FFF01FE03F80G(:#9+8":#
3FFFFE07FFFCFF3E07FC7C1F307FF001FFF807C0C07FA#9(8"8"8-8#:"
80FFE01FFFF81FFFF11C3FE03FFC7E1E707FC0F07FFE03807F3FA":(:$9/9#
00F00FFFE03FFFC3FC3F83F87E0CF07F83F83FFF81FFFC00FFE01F@%8"8%>&8)9$
FE01FFDFF8C0FFFF03F07FF8FE0107FE1FFFC07FFE01BFF00F@%8'="8":#9%9$
FC03FF9FFC1FFF81FFFCC1FF7E1FF03FFF039FF807@%959$
F807FF0F=3FFE03FFF181FFFE1CFFFC1FE0FFF8FFF1FF03F07C1FFF0FFFF80FFF838FFC03B#8(8"9(8"9%9#
FE07FE7FFC0FFFC7C038F03FF9FFE1FF073FFE07FFC307FE@%8(<$9$8'8%
F00FFC03FFFFF81FFF8FE0FC1FFF0FF0FC87FFFF03FFF1FE03FF01@'8'9%8"9";$8%
E01FFE01FFFEE07FFFCFE07FFE0FFFFFF9F8C0FFF8FC01FF00@%8(;":18#
C03FFF807FFFC0FFFFDFF03FFFFF9FE0F83E7F87F7FFE07FFC7FFFF8807FA)8%8#<"8/
7FFFC07FFE3FFF81FFF03FFCFFFFBF7E3F87F3FFF03FFE3FFFF00FFFC0@&9"9"8"?"8"8-
80FFFFE01F03F879FF7FF0FFF80FFF0FFFE01FFFE03F@"8'9%@"8"8)8"
00F00FFE7FFC0FFC1FFC71C01F7FFE07FF81FFC03F1F?#8)8"G-
FE01F807FC7FF81FFF1F0FE07FFF03FFC3FF80FFFFF00F@"8(F"8+8"
03FC03F8FFF03FFEF80F07E0FFFF81FFE7FE01F8?#8'9$A&9&8#
FC07FF01F1FFE07FFE07F8FEFC3F0F0FC0FFFFFC03FC07?":';"@"8":&9"
F88063FFC0FFFFF1FF8EE07FFFF80703@"9%:%A%9&8#
0FC007FF81FF03F8E3FE1F041FF03FFFE00FFE01?#9%8"8"C$:&8"
F01FE00FFF079F83FF0F00FC1FFF001FFF?#9%;#C%8#8"9"
E03FF01FFE0F80F007003FC0FE0F3F00?*8"8"D%8+
C03FF803FFF83FFC1F8FC1C0007FC1FF07FF80FFFFFEFF807F@)8"8$B$:$8%
7FE0007FFC7FF83FCFC7F1C3F001FF81FFC1FC7FC03F?*;$=":#9&:"
807FC0003FFEFFF07FDFF1C7E3FC03F9FFC0FFE1E0@);"?#9#9&9"
FF00001FFFFFE0FFFFE03FFF87F0FFE07FF13F?&8&9"H&8%
01FF0FF80FC1FFEFFFC7E1E0FFF07FF8F83FF01F>'8$C#;"9'8$
FE01FE1FFE0783FFC3FE608383FFF83FFC7F1FF80F?%9&9"=$:*8"
03FC3FFF07FF80FFE7E3FC007FC3FF83FE1FFFFC1FFEF0>-;"=">(8$
FC07FC7FFF83FFFE0FFF003F8704F07FFFFE0FFE3F3FFC07>$8$9";"=#:"8-
F807F8C3FFFC0F8F7E07E3C1FFF7FF07FF1FFFE07FFE03?-9">";+8"
0FF8FFFFC1FFF81FFFE001E3C33FE1FF8007FFE3FF83FF87FF>":)B"=.
F0E1FFF03FFFFC00230F003FFFE1FFC1FF80FFC0FFFF01?";'9#<$:-
1FE07FFFFF8003C70FFFCC0FF0FF80FFFFC0FFE0FFC3FF81>#9"8"8"C#:$8&:"
E03FF1FFE0C18FF8FF83807FF0FFFF80>"8"9"9#B#:*8"8#
C07FC1FC0183CFFC7F8FFFFE031FF07F03C07F?";"9#9#=#:$8%
7F83FF81871F01FFFE7FFF078FF83F>+8"A#;#8)8#
80FFF83FFFE3FF07FF81F1FE31FFFFF80FC7FC1FFFFE07E03F@#8(9"=#@(
FC1FFE0FFE003FFFFD8FFC791FE3FE0FFFFC0F>"8+J&;#
010FFFC3FC0FF8000FFFFF6E03FF1FF07F01F@*;"=#?)
FE07FF87FC1FF020070EF878C03FF9FF87FFF81F=-<"<#?(8$
FE03FFFF01FF0FF83FE3FC033F0079803FF8FF83FFF0EFF80F>"8)B$?&:"
0780001FF87FC7FF01C00031031FFCFFC187="9);"<$>$8)
FCC0003FF07F8FFF811E800603FE078FE0FFE0000007FC07>"8):"=%=':"
0FE0007FE0FF9FFFC0FE0800079FFC0FC3FDFFF003="9);";"8#=%8(
F8FC01FFC1FF1FFFE01CF0470FF01FE1FF7FE003FFFBFE03="9)<":&=$8'
F0FF0FFF83FF3FFFF07FE00001E607F81FE3F83FFFFFFFFF>"9"8">";'<$8";#
1FFFFE3CC00003E0067FFC3FF7FCFF01D#="<'<$9"
07FCFCCC001DF0003FFE3FFF1F=#;&A$8"<#9#;"
E03F0FF80FFFF880007B1FFF1FFE0F80?#8%=":(="9"
E01FFE1FF80738F80001FFF0100F8FFF=%8%>"9(=":";#
C07FC00FFC1FF003FFE00007FFF30001CF07C07F?#9&;":'>":":"
80073FFF00FFF978C3001F7FFB80E3873F=#:"8$:";(=":";#
80FFF8C07FF1F8C7003E7FFDE000F3C3E03F?+@(=":"9#
1F83FF8FF07FFFE03FF3C300FCFE1CF00CF1C1FC1F='9$;":)<#9"9%
81FF3FC1F81FF00FE370C001F1F80678007FF87FE1E01FF01F="8*;";(<#9"8#
01C0003FE0FFFFFC07C7F003E7F3C33C001FFC3FF0FE00=$8#8$:":(>#<"9"
03FE7F7FE1FE018FF0FE0003C7F3E3BEFE0FE00F<":$8$;"9*<":(
FE01FFC1FF801FF1F800010FE3F39F004FFFF87FDF00E01FF8>'9"<":)=":&
FC7FC1FFFF83C0E1F0001E03F3CF00CFFF3FE01FE03F<#8"<#?)B"8&
FC07C7F03FF1F83C1C77E3E780FCFFE07FFC07>$8"9#@)B&
F81F8F87F87FFCFF38FFC3E7C00F1FE3FFC0FF=$9"9#:#9"8'A(
0FF80307FCFFE1E3F039FFC1F3C01FFE1FF7FF81FFFE<"8#8"9"A)B%8"
F8000F0FFDFFFF31FFFCF1C00F0FFFFF0303>">"@%8$>"8"8%
FEFFF87FFF39F00007FDFFFE07FFFF=(?#9'A#8%8"
1FFFC003FFFE1FC1C3FC3FFF38FFFEE07F87FFFC0F01<"8%@":)?%8#
F0F0003FFCC3FE3FFE387FFEE3C0EE7FFC1FF81F=(D*;+9"
3FFFFE0007FC3FFF0FFC3C00FCE7E00FFC07FFCE3FF81F83FFF081?%F);#8(8"
FF800FF887000F0039E7F01FF0231F831FC3FFE03F80<"9%@":&;/
E0E00FF07FC7C380078001FE07FFE079FF1E0E023FC1FFC01F="8";#<":)91
7FFCFC7F87E3E0200000E3F80F63FC8C78FE3FE4E03FE1FF800013FFC0<"9(<";)8,9%
C0FF1FF0FFFFFC0087F1F9F80C7863FFC7FC71F89C380C7FE0F07FE0003FC07FA&C5
9FE0FFFE008F8FFFF7E0061FFE3FF3FFC7071D81C04FFE0F8FFF0FFFFFF="9%8"D18"8$
FFFFE1FF80FFFF0300FFF3FC0FFC3073F99FC07FE0707F803FE0<";$?":#829%
80C1FF0007FC7FFF803FF3F8C7FC3E31F3CFC4360E11FFF8001FE03FB&<#;'8+:$
C3FF80003C0F0F30FFE3FFC07FE0F8FF10F3E7C6020E03FE007F<"=$C5
81C07C7F:007F81FFFFFFE3FC7031FF3803E30F070043FFFC3FFFF803FFF0@(B&8-:#8"
FEFF83FFE0FCFFFE0060007FCFFE3F31FE3823F00F0FFFC7E00F1F<"9&F0:%
01F0FF87FFF840003FFFFE3FFF1F30983847F8001F1FFF803F<"8#9#E5
03F800FC7C900001FFFE3FFFF8F381800C7FC7C7FFF87FFFE1FFC00FFFFF8>)<#?$8%8%9#
FE0001FF0FFFFE39FE0E03CF8FC03C1C037FFFFF8FF003;"8";#=#>$8-8"9"
FEA0FF011E1F61873FE03C3F9FC7FE7FE0000FFFFF070F=&9"B$8$8%8%8$8"
FC000011FE8100007871007FF0007FFF3800001F0FF81FFC<"9$8"A"8"8$8*;"
07FFFE1FC1F8FE3B00FFF827FFFF8FFE003FC07F;(9"<#9"8&9+8$
FC07FE00F1FFFCE1FC3EF0FF03C00301FC3FFFE00FFF01FF803F87F8FF=#<"="9"9%9%8%9":"
FF07F03CE0C1F80003FE3FF800807001FFFD07<%8"8#="9(9*:"9"
0FFF87F33FF81F3F3FFCFFE1FC0007FF1FC0001FFFC0001FFFFE>"<"B%=$8$9"8"
C3FCFFFC7FF89E1FC0FFEFFFC383;"8"8"9"C':%8"="
F8F3F8FEFE7E7C7E3C0F807F80FFFF81>#8"8"<"=$<&B"
F8E77FFFF83F3E7FC07803FFF703<%<"<"9"8&:&8"9":"
1FFFFC67BF7CF01F0E7F3807E0003FFFD98FE1FF>#<"@):)<"
FE07FFE07FF80F007F3003F00FFFFF3CFFFE07C3;"8"8#@#9(:#8%<"
F0FFF0FF787F0FF807187F0001FFFF3E7FFCE3FF?"G)=%:";"
C7C001F8239C7F01E0FE3C7FC1F081?"B":)?$
E3F0C3F0F8719E7F00F81F01E7<"8$A"9$8$;(
3FF1FFE0F8C7FFF0FE4038FE3FFE1C0E73CF?$A"9*:(
F83FE1F0C3FFE0789CFCE01C7FFC9FFC1FCC7F9F?"B$8"8&;%8"9#
FCE0F0FFE3001CF9E03CF9CEFC7F3FF87F;"9"G)<'>#
E0FEE1FFF8001EF1E07CC018FFCC3E7F7FC0A"E'>&>#
C1C07FFF007E63E398FF8E0EFE3F<"8$E(<(="
7FFF3FC3FC1FFF807E07C4F8E7C8FF1E0CFFFC@"A#9*:'>"
FFE1E0FE07FFF03E0FC678FFFC3FCC0E1E08F8="E)?':#8"
E1E1FFFBFFFF00FFFFFF1F8E0F8C79FC3FF0=$E"9'<&>%
C3FF9FF93FFF9E0FC0718F0E1FFFF1C03FE07F;(@"8"8(<&>"
C07F87FFC3FF83C1F8381FFFDE07E1E1C60C3FFFF380=&@"9*<&>#
8FFFE1FF87C37FFF3E07FFFC67C7C3F0C0FFFFE701FF<%F%9#<&:&
FF9FFFE03FFE1F039F07F8FFFFE007FE1FFFFC03=$B"8&8$<%>#
1FFFF083FC0FF00F01643E0FFC7FF800F80F?"@"8(8$<&=#
F8F8C3FFFE000000314C0001FE3F83F80FF01F="9">$8"9"8$<&=%
3F07E03F87FF79498000FF1E1FF01FC07FFFF0<":"=%9"8"8%<%=#8"
FE0FF0E00007C0384FC0787F807FE07F80FF3FI%9%8%<%:%
E0C30003E001FE101FCCFC3FC0FE03FFFF1FFE01@">&8&8#=$<$
7FF087C00181FFFFFFC0FEC8FEF0000F0FFC03;":">':&>$=#
81FFF987E00000F8F0FCF81FC9F803FFF807I(=$<#
FF87FFC000007F81FE1FFFFF="B#9"8$J#
1FC7813FCFF1F85FF03="B'8%8"H"
0FC000007F001FC671F9F1F5C0<"8#<";#9(H#
FFF0FEF13FFE8031F3E13F01E6F81F=&;"8';"I%
07FFE1FE1FF0E0380001FE00C18FFFFF07=$@&:(E"8"
81FFC1F8F8FC001E00F3C23E03CC3F07E0=$>)8%8"F"8%
C07E037FFFFFF8FF000030C300E78E9C87F807F01F=$=#8&8(I$
E00007F83FFC7FC0003DE3C0E31C7C0318FF07F8=$C$8)I"
F0000FF0007FF1E0E03C7C00387FC7;&=#9%8(J"
01FFF8001FFC1F1FFC07FFF0F1E078F800704F7;&=#9$9#:"J"
03FFFE007FFE0F0FFE0FF879E04FF;&>"8%;'J"
01FFFFFFFF07F183FF07C070F00080FF;F7@"<#8%:"9"J"
FCFF03F3C3FF813903=FF;"B"8&:&
0383E3E1FFE07F8660F0070CH"9%:"8#
C1F0FFF01F9E0E1CC":"8&8$8#
C3E0E1F87FFC03F0113E1C3CC"='9"J"8"
83F1FC3FFE00073C5F8F7C":"8/H$
81F0F0FC07FFC000FFE0103C40703878000003C">"8(8"
C078FE001FE0233C607C=#:#9#8)8$G$
FE1FE07FF87F001FFFFFC000C0037838FCFDFFFF=#:#<":%;"E#8"
FC0FF01FE2F80000077F83FF07>":#:&8%8#G"8"
07F8073FFFC7C0FFFF8000473C3087FEC#=":)<#A"
FE03F8FF00CF1E201C31FEFE0FFC=#8%=#:"9%;$@#
FE0F3FFFFF81FC7F030C01FE3F80001FF00F=#8"8"9'>"=%="8#
FF1F1FC0FC1F9FE7FC3F00FE00000783E01F>";":%;'<"8"="8#
FFE0000FE3F8078F8E300010E00087C03FD#8&;):&?#
F87FF80007F0000F8F8F304010FF1F800FFC003F80FFE"8$8":';'>#
3FE000031F1FCF87187018FE01FFFFC01FFE01;":"<%8$<#;#8#>#
01FEFC01E00100FFDF7C08F007F80FFC03D"8$:#:'9#8#>#
FC807F00001FC71C7E087F8FC03FFC03F807;"?,9':#8#>#
031FF007F80000F0E180003FC7C38C3F0C7C00FFFF01F01FD+="8#8#:">#
FE1F00FF8003C0F1F1FC8E3CCFFC0380E03F;"9";,=$8#:#=#
81F9000FF8003FE070F1FFC0010E1DC7F00FC07F807F?"<,9$8"8#:">"
E1FE0003FFF078E3FFE00003C78F1FE7C07FE000>#:0;':#<$
FE01F007E0007F9FF03803FFFFC007FE0F19E3FFFE03FFF83FFE00FF>";*;$8"9#;#;&
F000F80005FF1FF81C0707C7870FF00FFC1F07FC000007>":+9#?#;"A#
80E00FC000FDFF0FFC1C0F01F8803FFEF03F=$8+:&9(:"<%
FC0009FE00FC000FF9FF87FC0C000003C78F01F1F001FFFFEE0FFFFFFFC7=$8,828"<"9"
C000FFFC078000FFF8FFC7FE0C1FFF800001E70F0F1F0703F0001FFFFE0003FF0FFF=#8,:&8+8"
00070FFC60000FFFFC1FE3FE00F80000461F0603B00FFFFFF000007F07>":&8";&8%8"8"8"
3F0001FFFFFEFFFFC000063F070730FFC01F87=+8%<$9"9%
01FFFFFF0FF0001FFF9FE0FF017F047F1F20807FE003;$;+:*8&8"
80FF0307FFFF87FF1FF0FF81FFC600007F1E1E0E0F00FE01FFFF8083=":#8';)9#8&
01F8FFC3FF0FFC7FC18E3000FE1E3E0E1FFC07E03FFFC07F=#;#8"8";):"8#8"9"
C01FFE7F07C00E30C0FC3E3C1E1E1FFC0F07FE=#<"8"8";#8&8#8&
FF001FC3E01C703C7C1E3E01F03FFF07FFE001;"8*;"9"8(8#9&9#:"
C0F007FF07FC7FFF1FC17FFEC1F87C783C3C21E07FC07FF0003F1FF77F>#8"9"9#;"8'9*:"9"
FC00FEF01FF03CF0F8F0707C01FFFF7FFFF003FFF80FF0E0<29+8$8&;"
7FFFF801FF87FE3FFF07F8FFC1FE0FF03FFC3CE0C1E1F1E0E8F803C1FFE0FFFFFFFF0703>#8"8);(9%;":%
F007FF83FCFFE0FF8FF81FE1C9E3E7C0CFE0C3FF81FF83E000089F>)8%;*8$<"<#
C01FFF83FF1FFFC3F8FFCFFC78E199C3CF81DF800783FF03E1001F;"8#9"9":">&8$:$8"
E0807F9F3F0F8E03BE030F87FE3FC007F0FC=19+:";$8&
FE01FFFFC3FF8FFFC7FC1FF87FCFFE07F878C119C7000F780E1FFF01F87F3FE7C0003F=#:+:*9";%9$
FC03CFFFE3FF1FFC1FC7FF0371C33C86001EF01C3FFFC1F07C3FFFFF80=#:)="9%8"<$<%
F00FC7FFE07F9FFE1FE1C61DE0F07F8FC3FC3CFE3FC0FF<$8-9+8"=&9#
3FE01FC1FFE7FFF87F8FFF1FF8FF81F0638E3C0E003B8000FF0FFF1E1FFFF8FFBF=#:"8"9#:*B"="
C03FE3FFFC7FE0230E7C0C3C3300018FFF;"8%9&8"9*9">#8"
F07FFF1FE1FCFF83FF0FC0C0020C7E0C7C3F00031F870F7F>#9"8%<#:$@$
0000F17FE1FF8F00007E0043E3FFC7<"<&9&8";"@$>"
1FF9FFFE1FF91FE07FFFFE1CC3C3FFE781=+9#9&8$8#>%
E0FFFFFFE0FFF8FFFF0FFE0FF804003C7C7C31C7FE3FE38FFFF0;$9":"8)<#8"C"
F81FEFF08F87FF87F03FFFE01E7387F8FF=";*9%9#9#E"
FFFC7FFF9FF1FFC3FFC7807F001C78E7E07FFEB#9$8&8"8$8"=":"9"
7FFEF0FFE1E00FFE03FF7879CF8FC1C7E0F0<"='8(8#:"=">$
0F3FFF8FF87FF18003800FFF800C7871828780FF03A$9#8*8$E"8#
F87FFFFC3FC38000007FFFC00070738F0FE1F000;"</9'8#<"="
FC3FFF1FFFC3FF3FE1FFE303E007FF201C78639F1F00FF1F80D,8(9#;"8)
9FFFE1FF1FF0FFF307FCFFE000001CF8631F01FBFEC30FFFC3FFF00001A"8$8&9"8*>#9$
FCCFFFF1F87FF507FFF038F8231E3FFFFE03F3C71F80001F<#?':"9#9$;#;'
07F9FE1FFC7FF001F8F003EE07C7FC3FFE0001FFFE07;%9$9"9":"8$:%9"8"8"8"
FE07F83F1FFFE70700FC79F002060FFFFBF886831F>"8"8%9#:"8-8+
00FEE3FFF9FFE03FFE71E0803E7FFFEF003FFFE07FF07FFF0E3FFF87FF01FF<%8"9(:"8#9(8%:"
03FDE0030FF8FFC7FC3FF07FFFF3C1BFEF01E7FFC01FE0FFFF1EC3=%9*;/8*8#
FFFFC00FF3FFFC1FC7FE3FF83FC000E303803C7F9FEF0FC7FFE00781FFFE1C7FFF07FFE3FC0F;"9$8*;&8.8$
FFFE01FFF9FFFE1FC3FFFFFC1FE000E00F00CFCF0F0FFFFC003FFE07FFF8380FFFF1B"9$8#;+8*9"8#
07FF1FE3FF0FF001C03F001C7F800000FFC000000FFFF0F0FFF8F81F<"9"9"8#9"8#9#8#;"8+
0103F89FF983FE7F81FEFE00F81FFE01E1FFFE1FFFFC7F?'8#9.<(:#
FC07FF87FFFC8FFD80BFFFCCFDFDF98103FC0380F0FF8000030007C3FE3F<"8+:-9"9)8#
81F80FFF83FFFE7FFF87FF3FFF80F9F1F1E007F80F800007F00000007F07FFFCFF1F<"9$8$9/9"9"8$8"8%
801FFFC33FFFC7E001FF9E00F1E1F1F007F07FC01801FF3FFC1F3F8FFFF03F?'8"859(9"
E03FFFC1FFFFF74E00003FF1C00E181E1F807C0FFC0400FF800007FF001FFC03FFFF8C3<"9$828'9&8"8"
C07FFFE11FFFFFFFF8003FC0C000004000E19C000003FFFFF0003FFF000000FF7FF3=%:"9,8&8":$<"
7FFFC0FF9F001FFFC00000F00030801F71C01FFC7F0FC00007F8<"8"8"8"8$9"8$8):$8"9%
E081F0CFF00FFF01F0000E0000FFE000000003E07FFFF0FC3FE07F?";-8"9%8#9#:"9"
01C7FFF801FFFF7FE43E0FF0C30003FFC7C0007FF0FFFF1F=$958#9":)
3FFE0787FFFE7FF80FFFFFE3FFE7E1FFFEFF007800063FC07FF8FFCF81FF8E0FF3FFFFE3FC0FF>"9"8$>0>"9"
FCF8F3FC1FFFF807CF07FFFC0FFF1FFFFFFFFF03E1FF<%95;">$8"
F03FF80F63FFFF9E0FFFFEFFF1FFE3E1E7FFFFFC7FFFFFFF81FFEE0C1FF0FFF=$8"8&8%8"9"=#=$9"
1FF01FFCF803FF7FCFFF1E1E3FE700F81FC3FE0381?,9$8"8$<#=$
3FFFF3FC1FFFFC3FFE7FC39E1F1FF3F8003FFF8383FE00<"8"8"8#8">"8$=%;$
F87FFEFE7FE3F1E03E7FFE7FF818FC003F=(?$8"8#>%:"8"8"
0FF8FFFFE3FE0F3F1F8FF8C07CFFFFE038070F03<";";"8"9"8"8$?#:%
FCFF3F0FCFFC007CFFFFF90FF8F001=#8$9*9(>"9'
07FDC3FF07FF1FE7FF87FF1F1FC77FFE18F8FFFC3FF1FE0FF9FC003F>"8$=&8&8"D'
FF83FF87C7FF8F0FE7FE3FFC38987FF1FF0003FE07<#9$9#<":'>"9$8"
FE0307FF83FE3FF3F87030FFF83DE0FC1FF307C";";"8)<"<(
C3E3F1FC0000E0200000319F3FE3FF1C07FC0F<"9%;$8&808&
FFFE0FFFE1E1FF8F0600000000C0000FF803FC3FF8FFFE1E0FFBE07FF83FE7FE3F=&=":"929$8#
01FFFE001FF10007C0000007FFFC07F1FFF8E1FE1C1FE0C0F07FC78FF8=$9&95;&
81FFF8F0FFFF7FFF9C7FF8707FE1FFFFFE1C0001FFFFF87E1FFF0407C1C0C00003FFC7FCFF81F=&8$8)8"8"8#9'8%8"
80FFF0003F7FFF3FF3FFC3FFC707FF3FF13FC3C3381800040F9FE0FFC7F8F0="?&:"82;&
C0FE3FE3FFE31FF09FC1FF9FFFE003C180071000000F1F00FC7F9FF03F>(9%:"8$:1
7FE0783FDFF83F7FF1FFF39FF87FCF010000078003079FBF041F9FC1FFE7FF@%;$:"85
FC3F8FFCF8FFE3CF:FC7FFFFFCFFFF0601E080F81C787FFFF1F860F83FFF7FFFFBFE0=)9"="9":)8$8"8$
E03FE1FE3F07FE1F3FE73FF8F03F1E3F81CF838FE007FF3FE07FA"8"9"8'8"9+8%:#
3C0F1FE7FFE387FFE3FEE7FFFCF87FBF3FFFFFF9C7F8E0077FC0>'9#8"8$8#8(<$9"8"
1FF3FF0003FFFF0FC707FFF3FF1FF3FFFFFC7FFFFFFFE00FFEFF=$8$:&8"<"8"8"8"8$:$
F01FF107FF87FCFFE3FFE7F9F1FEFCF8C1F000FCFF80@*8"8$9"8"<+8$
FE001FFF83FF1FFF1FE187FFF88FF97FFFF03F000000001FF9F8FF81=+:":#8"8"9(:#8$
F80FF9FC00FFFFC3FF9FF1FC7F87F83FFF80000000003FF1F1FF01?$8":"9#8"8"8"a;&8$
F8F801C1F9E3833F83C0780FE03FF0FFFF03=&8"9"8$8"b9/8"
FC07FCE007E08FF3FFF3A0013FFF8FFFFF87FFFE1FE07FE03FFE@#8":":$:+8$8$9"
001FF0F18000007FFFFC0FFFFFC7FFFFCFC7FFFFFFC00F07=&9"9$9'8#8";"8&8#
FE03FE007F7FF8FFE37FFF03FFFFF8FF1FE7E38FE1FFE007FC0F=&8$8*8"9"8"8"8"8&
FF01FF01FFF83FDFFC7FF1FFF783FFFF87FC9FF3E7F1C7C1FFFC01@"9$:$9"9"8";"8"8&8"
03FC3FCFF8FFFFC33FCFF3F9E383FFFF00F8>$9#:"<"8#8"8"8"8"9"8#8"
80FF8FFE1FFFE3FE1FC7F9F1F803803F1F@'8":"9"8"9"8"8"8&8&
9FFFFC7FFE0F87F3F1FFE7F8F9FC7FFFF007E00FFFF03F>);";"9"8"8"8"8&9"
C07FDFFFE007FF07F9F00FE3FCFCFE3FFFF80F03?(9#<"9"8"8)8"9%
3FFFFF8001FF83FE7FF887F1FE7FFFFE7FFFFF1F1F007FE07F>"8&8":"9#8"8"9%8"8"8"8"
E0FE0000FFC18FFFFC7FC7F83FFFFF3F0F3FC7C0?(8"8";#8"8"8"9"8)8"
1FFFFC03F87FE0CFFFFE3FE3FCFF1F8FFFF03FF87F8FC0FF>"8+8#<"9"8"8"8+
F0F807FC3FF00FFFC7FCFFFE03E17F9F9FC7FFE07FE0000FE0FF80>)="9#8"8"9"8"8"8(
F80FFFF00FFE1FF800FF1FF0FE8FCFE3FFC0001FF1FF81?"8#;"8";"8"8#8"8"8&:"
071FFFFF008FF8FF3FCFC7E1FFC1FF8C03>"8&8%8"9"8#8"8"8"8*
FCE03FFF0FFCEFFFFC000187FC7F1FE7E3F1FF83FF7FFC1FF3FE?"8*9"9"<"8"8"8+
037FFF8FFE07FFFFF80000C39FE3F1F0FF07FFFFFE0FE3FE07>"9%8#;"8"8#8"8";$:#
FEFFFF87FFFE007FE3FE3F8FF1C0300FE7FC>%:$<"8"8#8"8"b"9%
FF01FFC087FF803FE1FC1F87E01F07CFF80FA":$:$8,="9%
C1C3FC0001F51F0020000001E020000000003F019FF81F?"<#8+8$>"9'
80E000100007C1F0028000000000000008FBFFFF001FF0?#9$959$
C07F07FFF0<00019FE0FC00BFEFF808FDFF80FFDFF0FFFFFE1FFFFE1FFFFF80FFF03FF03F@%8$808"8"9)
3FE1FFFEF807C0FFCFF07FE3FFFFFC3FFFFFE1FFFFF8FFFF81FFE07FFF807FE0?"<&8$8"9"8#8"8"8*
E0FC038000FFF83FF3FEF1FC7F8F8F83FFC03FFFF1FFC07F?#8(8%8#B"8'8"
F01FFC0FFFFE000141E7FC1FF9FF1FCF07FF87FFFFFFFF?&8%8%9"8"8#8"8':"
F80FF1FFF8FF001FE0F3FE0FFC0FF8FE3FC7C7FFFE0FFF1F81A%8$8&8"8&;':"
F0FFF01F80FFF0F1FF0FFE7F87FC7FFFFF1FE3FFFC1FFE3F01?&9+8"<"8"8'9#
FC07F87FE0C0FFF87FFFF8FF07FE3FC70FE3F1FFF03FFC7FFE03@&8+8"8#8"8"8(9"
03FC3FC03FE07FF83FFFFCFF87FF1FE3FE3F8FF1F9FFE07FF8FFFE07?,8#8"8"8#8"8"8%8%
FE01FE0E007FFCFFF03FFCFE7F8FF1FF1FC7F8F8FFC0FFE03FFFFC?,9%8"9"8";,
FF01FF0000FFF87FFC1FFE3F83FFCFF00FC3FC7F81FFF0FF801FFFF80F@.9"8"9"8"8'8'
80FFC003FFF03FFE0FFE1FFFFFE7F88FE1FC7FFFFE3F037C000FFFF01FA*9%8#8"8";$8&
7FF00FFFE01FFF07FF1FC1FFE3FC7FC7F1FF1C0F000007FFE0@*:"8"9"8"8"8#8#9#8"
C03FFFFFFFC03FFF819FF13FE3F0FE3F181F03873F@":%:#:"9"8"9"8#9&
E080FFFFC0CFC0FEE1F81F803F1FC7FFC07F@#9"8#9%8#8"9$:&8#
F01F01E07FC7E07FF8FF1FF17FFFFF7FFFF8007F80FFA"9"8#9&8"8"8#8"9&8"
0F03F83FE7F03FF87F8FF8FC3F0FFFFFFC03FF81@#8"9$8%="8"8"8"8#9"
F807FEFC0F0FE3F000007F1F0703FE0F01@#8#8#9"95
FC03FC0FFE03E193FFFFC007FFFF03FF3F80FFFFE03FEC007FFEFFFFFFF8FFE03@#8#8(8j$9$
FE01F80DFF800FA800000000FFF870FFC07@"9)J$8%
FFF00FFFCFFFC0000053FFF07FE1FF80FA"8)Z%8%
80E007FFC3FFF0000F400FFFC03F87FF01FB+J"8"8$
7FFFC003FF81FFF803FF4010140FFE0A*<":)8&8%
C03FFF80F0FF00FFFE3BFC09C08071BFFF7FFC03FFFF0003FFC03FA*j"8(
E01FFE01F8FF03FFFF60F807FFF83FF807FA(8'?"<"8"8%
F00FFF03FC3E07C00441800003703FC0C7FF00FFA(8#Z$8'
F807FF87FE1C0FF00F2E000FFE03FFFFFFF01A'9"I#9#8#
FC03FFCFFF00F8FC01F01FFE03A(8#H#9#8#
FE01FFEFFF801FFE03F807F80FFC07A(8#H#9#8#
FF00FFFFFFC03FFF80F00FFC07F80FC"9"9#G#=#
7F7FC07FE07FF01FB#9"9#G(8#
C03FFFF80F00FFFF9FFFFE03E03FB#8"8%F)8"
E01F81E7FFFE03FE03FFFE1FFFFF01C0B#8"8%F&8&
F00F03E1FFFF00F00FFFF80F807FFF80FFB%9"8#E%9%
F807FFFEE0C03F803FFFF0C03FFF01B&9%D'8$
FC03FFFC073FFFF007FE00FFFFF807E03FFCB&8&D#8"9%
FE01FFF80FC07FFFFE01F807FCF0FFF803B#;'C#8#8%
FF0080FFFFFF803FC01FFE03F1FFF00FC%8"9#B$8#8%
807FFC1F81E007FE007FFF01F3FFE01FC%8"9#B(8%
C03FFE3F03FC00F003FFFFEFFF80FFFFC03FC':$A#8"<#
E01FFFBFFFFEFF800F800F8F807FC%8":#@$8$:#
F007FFFF07F001F800FF0FFFC000FFC#9";$?#<"8#
F803FCFE003F80077FFC01C#9#:$>$9)
FC01F80FFFC003F8003F9FFFE03FEFFFF803C#<#8$=$;'
FE00F803F8001F8001FFF03FC7FFF007C1;$="8#
FF803FFFCFF01FFFE0007FFFFF80003FE0000F1FE01FD+8$:%:)
C01FFFC7E03FFFC0703FFC0000E00001FF8FFFF80F8FFFC03FD%9$8#b";)
E00FFFE381FE1FFFC03F1FFFFC061FFF007FD+9"<#8$9&
F807FFF0C07FFF03FF0FFE03FFFC3FFE007FFE00FFD+9#:#9$8&
FC03FFFC00FFFE07FF87FFFE03FFE01FF8FE01FFF803D%8%:':$9%
FE00FFFEFC0FFF83FFFFC7881FFFF00FE003FFF007D&A$;$9%
FF003FFF80FFFFFFFC03070FFFE00FE*C%8&
C01FFFE0FFF81FFF81DFFE001FFC3FFF801FE%:%?&8&
E00FFFF8C1FF803FFC0FFF803FF87FFF003FE&9%?%9&
F003FFFC3F81FF0007F01FFFC0F0FFFC00FFE&:$B)
FC01FFFE1FFE0001F01F1FFE07FFF801E(9$>"8)
FE00FFFF81F83F03E07FF8F80F1FFF0FFFF007E&<"="8%8%
FF003FFFE3F8830FFFFC079FFFC00FF%:%8(8#8%
C00FFFFFFC07F83FFE0FFFFE03FFFCFE00FFFF801FF#;"8#8$<":$
F00701FC1FF80007FFFE007FF#8"8"8"9%<"9$
F801FC03FEE03E03FFC0F800FFF$8"8"8"8$=#8#
FC007F1FF80FC0FF83E03FE003F(?"9#8"9#
FF003FFFFE1FFEC3FE07F0C007G(9":"="9#
C00FFFFF0FFE0707F3FC001FG#8&:&8"8"8$
E00387FC0FFF8780FFFBFF0103FFFC007FG#8&:$9":&
F800C3F01FFFFFC0FFFFFFFFFFF000FFG(="8">#
FE003FFFE0003F7F81C003G(="A#
FF800FFFFC01FF1F000FH&9'@$
C003FFFFFFFC0FF3FFE007FE003FH#:"9%;$8$
F800FDC1FFF00081FE7FF000FFH$9,9"9#
FC003FF8FFF80F81FFFC003FFF80FCC003H$9"8"8$:#9#
FF000FF01FFF001F80F00007I#:#:#:(
C0037FF0C00FC000FFFFFE001FI#;$8%8#8$
F000E03FE3F007FFC0800FF0007FI$8&8"<"8$
FC003FFE1FC07FFFFC7FC001FFI$8%9#9(
FF0007FF8200FFFE03980FFFFFFE000FJ#9#9#:#8$
4C000E001EFFF807FF8003FJ$8#9$8$8$
4F0003FFC0FE7FF077F8FFFC000FFJ$8#9#9#8$
4FE0007FFFFE3FE3FFFFE0003J$="9#9$
4FF8000E0807FF0001FJ$=&9$
5F0000F180FFFBFFF80007FJ$<&9%
5FE0001FF003FFFFFF80003FFJ%<#;$
5FF80003FFFFFC0000FJ$B%
6E00007FC00007FJ%A%
6FE00003FE00003FFJ%@%
6FFC00003FC00003FJ%?"8"
7F800003FC0FFJ%>%
7FF800000F800000FJ"8"<#8"
8F003F8007FJ"8$9#8#
8FF0000BFE0000FFFJ"9&9"
9F00000800000FFJ#:":"
9FFC0000FJ">#
:FE0FFFJ#="
:FFFCFFJ#:#
;FFFE01FFJ'
<FFFFFFBFFFFFJ"
?FF















































ENDBITMAP
%%EndBinary
135.64 525.86 459.64 732.86 R
7 X
V
0.5 H
2 Z
0 X
N
113.14 111.86 482.14 246.86 R
7 X
V
0 22 Q
0 X
(Department of Computer Science) 134.5 232.19 T
(Lund University) 221.88 208.19 T
0 14 Q
(P) 257.45 165.52 T
(.O. Box 1) 264.97 165.52 T
(18) 322.27 165.52 T
(S-221 00 Lund) 251.74 149.52 T
(Sweden) 272.36 133.52 T
140.14 534.86 455.14 723.86 R
7 X
V
1 12 Q
0 X
(Scheduling Real T) 195.92 687.86 T
(ime Garbage Collection) 284.77 687.86 T
(Roger Henriksson) 254.17 645.86 T
(LU-CS-TR:94-129) 252 603.86 T
1 10 Q
(Also published in Proceedings of NWPER\32594, Nordic W) 161.6 563.19 T
(orkshop on) 388.98 563.19 T
(Programming Environment Research, Lund, Sweden, June 1994.) 167.72 551.19 T
FMENDPAGE
%%EndPage: "1" 2
%%Trailer
%%BoundingBox: 0 0 595.28 844.72
%%Pages: 1 1
%%DocumentFonts: Helvetica
%%+ Times-Roman
%!
%%BoundingBox: (atend)
%%Pages: (atend)
%%DocumentFonts: (atend)
%%EndComments
%
% FrameMaker PostScript Prolog 3.0, for use with FrameMaker 3.0
% Copyright (c) 1986,87,89,90,91 by Frame Technology Corporation.
% All rights reserved.
%
% Known Problems:
%	Due to bugs in Transcript, the 'PS-Adobe-' is omitted from line 1
/FMversion (3.0) def 
% Set up Color vs. Black-and-White
	/FMPrintInColor systemdict /colorimage known
		systemdict /currentcolortransfer known or def
% Uncomment this line to force b&w on color printer
%   /FMPrintInColor false def
/FrameDict 195 dict def 
systemdict /errordict known not {/errordict 10 dict def
		errordict /rangecheck {stop} put} if
% The readline in 23.0 doesn't recognize cr's as nl's on AppleTalk
FrameDict /tmprangecheck errordict /rangecheck get put 
errordict /rangecheck {FrameDict /bug true put} put 
FrameDict /bug false put 
mark 
% Some PS machines read past the CR, so keep the following 3 lines together!
currentfile 5 string readline
00
0000000000
cleartomark 
errordict /rangecheck FrameDict /tmprangecheck get put 
FrameDict /bug get { 
	/readline {
		/gstring exch def
		/gfile exch def
		/gindex 0 def
		{
			gfile read pop 
			dup 10 eq {exit} if 
			dup 13 eq {exit} if 
			gstring exch gindex exch put 
			/gindex gindex 1 add def 
		} loop
		pop 
		gstring 0 gindex getinterval true 
		} def
	} if
/FMVERSION {
	FMversion ne {
		/Times-Roman findfont 18 scalefont setfont
		100 100 moveto
		(FrameMaker version does not match postscript_prolog!)
		dup =
		show showpage
		} if
	} def 
/FMLOCAL {
	FrameDict begin
	0 def 
	end 
	} def 
	/gstring FMLOCAL
	/gfile FMLOCAL
	/gindex FMLOCAL
	/orgxfer FMLOCAL
	/orgproc FMLOCAL
	/organgle FMLOCAL
	/orgfreq FMLOCAL
	/yscale FMLOCAL
	/xscale FMLOCAL
	/manualfeed FMLOCAL
	/paperheight FMLOCAL
	/paperwidth FMLOCAL
/FMDOCUMENT { 
	array /FMfonts exch def 
	/#copies exch def
	FrameDict begin
	0 ne dup {setmanualfeed} if
	/manualfeed exch def
	/paperheight exch def
	/paperwidth exch def
	/yscale exch def
	/xscale exch def
	currenttransfer cvlit /orgxfer exch def
	currentscreen cvlit /orgproc exch def
	/organgle exch def /orgfreq exch def
	setpapername 
	manualfeed {true} {papersize} ifelse 
	{manualpapersize} {false} ifelse 
	{desperatepapersize} if
	end 
	} def 
	/pagesave FMLOCAL
	/orgmatrix FMLOCAL
	/landscape FMLOCAL
/FMBEGINPAGE { 
	FrameDict begin 
	/pagesave save def
	3.86 setmiterlimit
	/landscape exch 0 ne def
	landscape { 
		90 rotate 0 exch neg translate pop 
		}
		{pop pop}
		ifelse
	xscale yscale scale
	/orgmatrix matrix def
	gsave 
	} def 
/FMENDPAGE {
	grestore 
	pagesave restore
	end 
	showpage
	} def 
/FMFONTDEFINE { 
	FrameDict begin
	findfont 
	ReEncode 
	1 index exch 
	definefont 
	FMfonts 3 1 roll 
	put
	end 
	} def 
/FMFILLS {
	FrameDict begin
	array /fillvals exch def
	end 
	} def 
/FMFILL {
	FrameDict begin
	 fillvals 3 1 roll put
	end 
	} def 
/FMNORMALIZEGRAPHICS { 
	newpath
	0.0 0.0 moveto
	1 setlinewidth
	0 setlinecap
	0 0 0 sethsbcolor
	0 setgray 
	} bind def
	/fx FMLOCAL
	/fy FMLOCAL
	/fh FMLOCAL
	/fw FMLOCAL
	/llx FMLOCAL
	/lly FMLOCAL
	/urx FMLOCAL
	/ury FMLOCAL
/FMBEGINEPSF { 
	end 
	/FMEPSF save def 
	/showpage {} def 
	FMNORMALIZEGRAPHICS 
	[/fy /fx /fh /fw /ury /urx /lly /llx] {exch def} forall 
	fx fy translate 
	rotate
	fw urx llx sub div fh ury lly sub div scale 
	llx neg lly neg translate 
	} bind def
/FMENDEPSF {
	FMEPSF restore
	FrameDict begin 
	} bind def
FrameDict begin 
/setmanualfeed {
%%BeginFeature *ManualFeed True
	 statusdict /manualfeed true put
%%EndFeature
	} def
/max {2 copy lt {exch} if pop} bind def
/min {2 copy gt {exch} if pop} bind def
/inch {72 mul} def
/pagedimen { 
	paperheight sub abs 16 lt exch 
	paperwidth sub abs 16 lt and
	{/papername exch def} {pop} ifelse
	} def
	/papersizedict FMLOCAL
/setpapername { 
	/papersizedict 14 dict def 
	papersizedict begin
	/papername /unknown def 
		/Letter 8.5 inch 11.0 inch pagedimen
		/LetterSmall 7.68 inch 10.16 inch pagedimen
		/Tabloid 11.0 inch 17.0 inch pagedimen
		/Ledger 17.0 inch 11.0 inch pagedimen
		/Legal 8.5 inch 14.0 inch pagedimen
		/Statement 5.5 inch 8.5 inch pagedimen
		/Executive 7.5 inch 10.0 inch pagedimen
		/A3 11.69 inch 16.5 inch pagedimen
		/A4 8.26 inch 11.69 inch pagedimen
		/A4Small 7.47 inch 10.85 inch pagedimen
		/B4 10.125 inch 14.33 inch pagedimen
		/B5 7.16 inch 10.125 inch pagedimen
	end
	} def
/papersize {
	papersizedict begin
		/Letter {lettertray letter} def
		/LetterSmall {lettertray lettersmall} def
		/Tabloid {11x17tray 11x17} def
		/Ledger {ledgertray ledger} def
		/Legal {legaltray legal} def
		/Statement {statementtray statement} def
		/Executive {executivetray executive} def
		/A3 {a3tray a3} def
		/A4 {a4tray a4} def
		/A4Small {a4tray a4small} def
		/B4 {b4tray b4} def
		/B5 {b5tray b5} def
		/unknown {unknown} def
	papersizedict dup papername known {papername} {/unknown} ifelse get
	end
	/FMdicttop countdictstack 1 add def 
	statusdict begin stopped end 
	countdictstack -1 FMdicttop {pop end} for 
	} def
/manualpapersize {
	papersizedict begin
		/Letter {letter} def
		/LetterSmall {lettersmall} def
		/Tabloid {11x17} def
		/Ledger {ledger} def
		/Legal {legal} def
		/Statement {statement} def
		/Executive {executive} def
		/A3 {a3} def
		/A4 {a4} def
		/A4Small {a4small} def
		/B4 {b4} def
		/B5 {b5} def
		/unknown {unknown} def
	papersizedict dup papername known {papername} {/unknown} ifelse get
	end
	stopped 
	} def
/desperatepapersize {
	statusdict /setpageparams known
		{
		paperwidth paperheight 0 1 
		statusdict begin
		{setpageparams} stopped pop 
		end
		} if
	} def
/savematrix {
	orgmatrix currentmatrix pop
	} bind def
/restorematrix {
	orgmatrix setmatrix
	} bind def
/dmatrix matrix def
/dpi    72 0 dmatrix defaultmatrix dtransform
    dup mul exch   dup mul add   sqrt def
/freq dpi 18.75 div 8 div round dup 0 eq {pop 1} if 8 mul dpi exch div def
/sangle 1 0 dmatrix defaultmatrix dtransform exch atan def
/DiacriticEncoding [
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
/.notdef /.notdef /.notdef /.notdef /space /exclam /quotedbl
/numbersign /dollar /percent /ampersand /quotesingle /parenleft
/parenright /asterisk /plus /comma /hyphen /period /slash /zero /one
/two /three /four /five /six /seven /eight /nine /colon /semicolon
/less /equal /greater /question /at /A /B /C /D /E /F /G /H /I /J /K
/L /M /N /O /P /Q /R /S /T /U /V /W /X /Y /Z /bracketleft /backslash
/bracketright /asciicircum /underscore /grave /a /b /c /d /e /f /g /h
/i /j /k /l /m /n /o /p /q /r /s /t /u /v /w /x /y /z /braceleft /bar
/braceright /asciitilde /.notdef /Adieresis /Aring /Ccedilla /Eacute
/Ntilde /Odieresis /Udieresis /aacute /agrave /acircumflex /adieresis
/atilde /aring /ccedilla /eacute /egrave /ecircumflex /edieresis
/iacute /igrave /icircumflex /idieresis /ntilde /oacute /ograve
/ocircumflex /odieresis /otilde /uacute /ugrave /ucircumflex
/udieresis /dagger /.notdef /cent /sterling /section /bullet
/paragraph /germandbls /registered /copyright /trademark /acute
/dieresis /.notdef /AE /Oslash /.notdef /.notdef /.notdef /.notdef
/yen /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
/ordfeminine /ordmasculine /.notdef /ae /oslash /questiondown
/exclamdown /logicalnot /.notdef /florin /.notdef /.notdef
/guillemotleft /guillemotright /ellipsis /.notdef /Agrave /Atilde
/Otilde /OE /oe /endash /emdash /quotedblleft /quotedblright
/quoteleft /quoteright /.notdef /.notdef /ydieresis /Ydieresis
/fraction /currency /guilsinglleft /guilsinglright /fi /fl /daggerdbl
/periodcentered /quotesinglbase /quotedblbase /perthousand
/Acircumflex /Ecircumflex /Aacute /Edieresis /Egrave /Iacute
/Icircumflex /Idieresis /Igrave /Oacute /Ocircumflex /.notdef /Ograve
/Uacute /Ucircumflex /Ugrave /dotlessi /circumflex /tilde /macron
/breve /dotaccent /ring /cedilla /hungarumlaut /ogonek /caron
] def
/ReEncode { 
	dup 
	length 
	dict begin 
	{
	1 index /FID ne 
		{def} 
		{pop pop} ifelse 
	} forall 
	0 eq {/Encoding DiacriticEncoding def} if 
	currentdict 
	end 
	} bind def
/graymode true def
	/bwidth FMLOCAL
	/bpside FMLOCAL
	/bstring FMLOCAL
	/onbits FMLOCAL
	/offbits FMLOCAL
	/xindex FMLOCAL
	/yindex FMLOCAL
	/x FMLOCAL
	/y FMLOCAL
/setpattern {
	 /bwidth  exch def
	 /bpside  exch def
	 /bstring exch def
	 /onbits 0 def  /offbits 0 def
	 freq sangle landscape {90 add} if 
		{/y exch def
		 /x exch def
		 /xindex x 1 add 2 div bpside mul cvi def
		 /yindex y 1 add 2 div bpside mul cvi def
		 bstring yindex bwidth mul xindex 8 idiv add get
		 1 7 xindex 8 mod sub bitshift and 0 ne
		 {/onbits  onbits  1 add def 1}
		 {/offbits offbits 1 add def 0}
		 ifelse
		}
		setscreen
	 {} settransfer
	 offbits offbits onbits add div FMsetgray
	/graymode false def
	} bind def
/grayness {
	FMsetgray
	graymode not {
		/graymode true def
		orgxfer cvx settransfer
		orgfreq organgle orgproc cvx setscreen
		} if
	} bind def
	/HUE FMLOCAL
	/SAT FMLOCAL
	/BRIGHT FMLOCAL
	/Colors FMLOCAL
FMPrintInColor 
	
	{
	/HUE 0 def
	/SAT 0 def
	/BRIGHT 0 def
	% array of arrays Hue and Sat values for the separations [HUE BRIGHT]
	/Colors   
	[[0    0  ]    % black
	 [0    0  ]    % white
	 [0.00 1.0]    % red
	 [0.37 1.0]    % green
	 [0.60 1.0]    % blue
	 [0.50 1.0]    % cyan
	 [0.83 1.0]    % magenta
	 [0.16 1.0]    % comment / yellow
	 ] def
      
	/BEGINBITMAPCOLOR { 
		BITMAPCOLOR} def
	/BEGINBITMAPCOLORc { 
		BITMAPCOLORc} def
	/BEGINBITMAPTRUECOLOR { 
		BITMAPTRUECOLOR } def
	/BEGINBITMAPTRUECOLORc { 
		BITMAPTRUECOLORc } def
	/K { 
		Colors exch get dup
		0 get /HUE exch store 
		1 get /BRIGHT exch store
		  HUE 0 eq BRIGHT 0 eq and
			{1.0 SAT sub setgray}
			{HUE SAT BRIGHT sethsbcolor} 
		  ifelse
		} def
	/FMsetgray { 
		/SAT exch 1.0 exch sub store 
		  HUE 0 eq BRIGHT 0 eq and
			{1.0 SAT sub setgray}
			{HUE SAT BRIGHT sethsbcolor} 
		  ifelse
		} bind def
	}
	
	{
	/BEGINBITMAPCOLOR { 
		BITMAPGRAY} def
	/BEGINBITMAPCOLORc { 
		BITMAPGRAYc} def
	/BEGINBITMAPTRUECOLOR { 
		BITMAPTRUEGRAY } def
	/BEGINBITMAPTRUECOLORc { 
		BITMAPTRUEGRAYc } def
	/FMsetgray {setgray} bind def
	/K { 
		pop
		} def
	}
ifelse
/normalize {
	transform round exch round exch itransform
	} bind def
/dnormalize {
	dtransform round exch round exch idtransform
	} bind def
/lnormalize { 
	0 dtransform exch cvi 2 idiv 2 mul 1 add exch idtransform pop
	} bind def
/H { 
	lnormalize setlinewidth
	} bind def
/Z {
	setlinecap
	} bind def
	/fillvals FMLOCAL
/X { 
	fillvals exch get
	dup type /stringtype eq
	{8 1 setpattern} 
	{grayness}
	ifelse
	} bind def
/V { 
	gsave eofill grestore
	} bind def
/N { 
	stroke
	} bind def
/M {newpath moveto} bind def
/E {lineto} bind def
/D {curveto} bind def
/O {closepath} bind def
	/n FMLOCAL
/L { 
 	/n exch def
	newpath
	normalize
	moveto 
	2 1 n {pop normalize lineto} for
	} bind def
/Y { 
	L 
	closepath
	} bind def
	/x1 FMLOCAL
	/x2 FMLOCAL
	/y1 FMLOCAL
	/y2 FMLOCAL
	/rad FMLOCAL
/R { 
	/y2 exch def
	/x2 exch def
	/y1 exch def
	/x1 exch def
	x1 y1
	x2 y1
	x2 y2
	x1 y2
	4 Y 
	} bind def
/RR { 
	/rad exch def
	normalize
	/y2 exch def
	/x2 exch def
	normalize
	/y1 exch def
	/x1 exch def
	newpath
	x1 y1 rad add moveto
	x1 y2 x2 y2 rad arcto
	x2 y2 x2 y1 rad arcto
	x2 y1 x1 y1 rad arcto
	x1 y1 x1 y2 rad arcto
	closepath
	16 {pop} repeat
	} bind def
/C { 
	grestore
	gsave
	R 
	clip
	} bind def
	/FMpointsize FMLOCAL
/F { 
	FMfonts exch get
	FMpointsize scalefont
	setfont
	} bind def
/Q { 
	/FMpointsize exch def
	F 
	} bind def
/T { 
	moveto show
	} bind def
/RF { 
	rotate
	0 ne {-1 1 scale} if
	} bind def
/TF { 
	gsave
	moveto 
	RF
	show
	grestore
	} bind def
/P { 
	moveto
	0 32 3 2 roll widthshow
	} bind def
/PF { 
	gsave
	moveto 
	RF
	0 32 3 2 roll widthshow
	grestore
	} bind def
/S { 
	moveto
	0 exch ashow
	} bind def
/SF { 
	gsave
	moveto
	RF
	0 exch ashow
	grestore
	} bind def
/B { 
	moveto
	0 32 4 2 roll 0 exch awidthshow
	} bind def
/BF { 
	gsave
	moveto
	RF
	0 32 4 2 roll 0 exch awidthshow
	grestore
	} bind def
/G { 
	gsave
	newpath
	normalize translate 0.0 0.0 moveto 
	dnormalize scale 
	0.0 0.0 1.0 5 3 roll arc 
	closepath fill
	grestore
	} bind def
/A { 
	gsave
	savematrix
	newpath
	2 index 2 div add exch 3 index 2 div sub exch 
	normalize 2 index 2 div sub exch 3 index 2 div add exch 
	translate 
	scale 
	0.0 0.0 1.0 5 3 roll arc 
	restorematrix
	stroke
	grestore
	} bind def
	/x FMLOCAL
	/y FMLOCAL
	/w FMLOCAL
	/h FMLOCAL
	/xx FMLOCAL
	/yy FMLOCAL
	/ww FMLOCAL
	/hh FMLOCAL
	/FMsaveobject FMLOCAL
	/FMoptop FMLOCAL
	/FMdicttop FMLOCAL
/BEGINPRINTCODE { 
	/FMdicttop countdictstack 1 add def 
	/FMoptop count 4 sub def 
	/FMsaveobject save def
	userdict begin 
	/showpage {} def 
	FMNORMALIZEGRAPHICS 
	3 index neg 3 index neg translate
	} bind def
/ENDPRINTCODE {
	count -1 FMoptop {pop pop} for 
	countdictstack -1 FMdicttop {pop end} for 
	FMsaveobject restore 
	} bind def
/gn { 
	0 
	{	46 mul 
		cf read pop 
		32 sub 
		dup 46 lt {exit} if 
		46 sub add 
		} loop
	add 
	} bind def
	/str FMLOCAL
/cfs { 
	/str sl string def 
	0 1 sl 1 sub {str exch val put} for 
	str def 
	} bind def
/ic [ 
	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0223
	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0223
	0
	{0 hx} {1 hx} {2 hx} {3 hx} {4 hx} {5 hx} {6 hx} {7 hx} {8 hx} {9 hx}
	{10 hx} {11 hx} {12 hx} {13 hx} {14 hx} {15 hx} {16 hx} {17 hx} {18 hx}
	{19 hx} {gn hx} {0} {1} {2} {3} {4} {5} {6} {7} {8} {9} {10} {11} {12}
	{13} {14} {15} {16} {17} {18} {19} {gn} {0 wh} {1 wh} {2 wh} {3 wh}
	{4 wh} {5 wh} {6 wh} {7 wh} {8 wh} {9 wh} {10 wh} {11 wh} {12 wh}
	{13 wh} {14 wh} {gn wh} {0 bl} {1 bl} {2 bl} {3 bl} {4 bl} {5 bl} {6 bl}
	{7 bl} {8 bl} {9 bl} {10 bl} {11 bl} {12 bl} {13 bl} {14 bl} {gn bl}
	{0 fl} {1 fl} {2 fl} {3 fl} {4 fl} {5 fl} {6 fl} {7 fl} {8 fl} {9 fl}
	{10 fl} {11 fl} {12 fl} {13 fl} {14 fl} {gn fl}
	] def
	/sl FMLOCAL
	/val FMLOCAL
	/ws FMLOCAL
	/im FMLOCAL
	/bs FMLOCAL
	/cs FMLOCAL
	/len FMLOCAL
	/pos FMLOCAL
/ms { 
	/sl exch def 
	/val 255 def 
	/ws cfs 
	/im cfs 
	/val 0 def 
	/bs cfs 
	/cs cfs 
	} bind def
400 ms 
/ip { 
	is 
	0 
	cf cs readline pop 
	{	ic exch get exec 
		add 
		} forall 
	pop 
	
	} bind def
/wh { 
	/len exch def 
	/pos exch def 
	ws 0 len getinterval im pos len getinterval copy pop
	pos len 
	} bind def
/bl { 
	/len exch def 
	/pos exch def 
	bs 0 len getinterval im pos len getinterval copy pop
	pos len 
	} bind def
/s1 1 string def
/fl { 
	/len exch def 
	/pos exch def 
	/val cf s1 readhexstring pop 0 get def
	pos 1 pos len add 1 sub {im exch val put} for
	pos len 
	} bind def
/hx { 
	3 copy getinterval 
	cf exch readhexstring pop pop 
	} bind def
	/h FMLOCAL
	/w FMLOCAL
	/d FMLOCAL
	/lb FMLOCAL
	/bitmapsave FMLOCAL
	/is FMLOCAL
	/cf FMLOCAL
/wbytes { 
	dup 
	8 eq {pop} {1 eq {7 add 8 idiv} {3 add 4 idiv} ifelse} ifelse
	} bind def
/BEGINBITMAPBWc { 
	1 {} COMMONBITMAPc
	} bind def
/BEGINBITMAPGRAYc { 
	8 {} COMMONBITMAPc
	} bind def
/BEGINBITMAP2BITc { 
	2 {} COMMONBITMAPc
	} bind def
/COMMONBITMAPc { 
	/r exch def
	/d exch def
	gsave
	translate rotate scale /h exch def /w exch def
	/lb w d wbytes def 
	sl lb lt {lb ms} if 
	/bitmapsave save def 
	r                    
	/is im 0 lb getinterval def 
	ws 0 lb getinterval is copy pop 
	/cf currentfile def 
	w h d [w 0 0 h neg 0 h] 
	{ip} image 
	bitmapsave restore 
	grestore
	} bind def
/BEGINBITMAPBW { 
	1 {} COMMONBITMAP
	} bind def
/BEGINBITMAPGRAY { 
	8 {} COMMONBITMAP
	} bind def
/BEGINBITMAP2BIT { 
	2 {} COMMONBITMAP
	} bind def
/COMMONBITMAP { 
	/r exch def
	/d exch def
	gsave
	translate rotate scale /h exch def /w exch def
	/bitmapsave save def 
	r                    
	/is w d wbytes string def
	/cf currentfile def 
	w h d [w 0 0 h neg 0 h] 
	{cf is readhexstring pop} image
	bitmapsave restore 
	grestore
	} bind def
	/proc1 FMLOCAL
	/proc2 FMLOCAL
	/newproc FMLOCAL
/Fmcc {
    /proc2 exch cvlit def
    /proc1 exch cvlit def
    /newproc proc1 length proc2 length add array def
    newproc 0 proc1 putinterval
    newproc proc1 length proc2 putinterval
    newproc cvx
} bind def
/ngrayt 256 array def
/nredt 256 array def
/nbluet 256 array def
/ngreent 256 array def
	/gryt FMLOCAL
	/blut FMLOCAL
	/grnt FMLOCAL
	/redt FMLOCAL
	/indx FMLOCAL
	/cynu FMLOCAL
	/magu FMLOCAL
	/yelu FMLOCAL
	/k FMLOCAL
	/u FMLOCAL
/colorsetup {
	currentcolortransfer
	/gryt exch def
	/blut exch def
	/grnt exch def
	/redt exch def
	0 1 255 {
		/indx exch def
		/cynu 1 red indx get 255 div sub def
		/magu 1 green indx get 255 div sub def
		/yelu 1 blue indx get 255 div sub def
		/k cynu magu min yelu min def
		/u k currentundercolorremoval exec def
		nredt indx 1 0 cynu u sub max sub redt exec put
		ngreent indx 1 0 magu u sub max sub grnt exec put
		nbluet indx 1 0 yelu u sub max sub blut exec put
		ngrayt indx 1 k currentblackgeneration exec sub gryt exec put
	} for
	{255 mul cvi nredt exch get}
	{255 mul cvi ngreent exch get}
	{255 mul cvi nbluet exch get}
	{255 mul cvi ngrayt exch get}
	setcolortransfer
	{pop 0} setundercolorremoval
	{} setblackgeneration
	} bind def
	/tran FMLOCAL
/fakecolorsetup {
	/tran 256 string def
	0 1 255 {/indx exch def 
		tran indx
		red indx get 77 mul
		green indx get 151 mul
		blue indx get 28 mul
		add add 256 idiv put} for
	currenttransfer
	{255 mul cvi tran exch get 255.0 div}
	exch Fmcc settransfer
} bind def
/BITMAPCOLOR { 
	/d 8 def
	gsave
	translate rotate scale /h exch def /w exch def
	/bitmapsave save def 
	colorsetup
	/is w d wbytes string def
	/cf currentfile def 
	w h d [w 0 0 h neg 0 h] 
	{cf is readhexstring pop} {is} {is} true 3 colorimage 
	bitmapsave restore 
	grestore
	} bind def
/BITMAPCOLORc { 
	/d 8 def
	gsave
	translate rotate scale /h exch def /w exch def
	/lb w d wbytes def 
	sl lb lt {lb ms} if 
	/bitmapsave save def 
	colorsetup
	/is im 0 lb getinterval def 
	ws 0 lb getinterval is copy pop 
	/cf currentfile def 
	w h d [w 0 0 h neg 0 h] 
	{ip} {is} {is} true 3 colorimage
	bitmapsave restore 
	grestore
	} bind def
/BITMAPTRUECOLORc { 
        gsave
        translate rotate scale /h exch def /w exch def
        /bitmapsave save def 
        
        /is w string def
        
        ws 0 w getinterval is copy pop 
        /cf currentfile def 
        w h 8 [w 0 0 h neg 0 h] 
        {ip} {gip} {bip} true 3 colorimage
        bitmapsave restore 
        grestore
        } bind def
/BITMAPTRUECOLOR { 
        gsave
        translate rotate scale /h exch def /w exch def
        /bitmapsave save def 
        /is w string def
        /gis w string def
        /bis w string def
        /cf currentfile def 
        w h 8 [w 0 0 h neg 0 h] 
        { cf is readhexstring pop } 
        { cf gis readhexstring pop } 
        { cf bis readhexstring pop } 
        true 3 colorimage 
        bitmapsave restore 
        grestore
        } bind def
/BITMAPTRUEGRAYc { 
        gsave
        translate rotate scale /h exch def /w exch def
        /bitmapsave save def 
        
        /is w string def
        
        ws 0 w getinterval is copy pop 
        /cf currentfile def 
        w h 8 [w 0 0 h neg 0 h] 
        {ip gip bip w gray} image
        bitmapsave restore 
        grestore
        } bind def
/ww FMLOCAL
/r FMLOCAL
/g FMLOCAL
/b FMLOCAL
/i FMLOCAL
/gray { 
        /ww exch def
        /b exch def
        /g exch def
        /r exch def
        0 1 ww 1 sub { /i exch def r i get .299 mul g i get .587 mul
			b i get .114 mul add add r i 3 -1 roll floor cvi put } for
        r
        } bind def
/BITMAPTRUEGRAY { 
        gsave
        translate rotate scale /h exch def /w exch def
        /bitmapsave save def 
        /is w string def
        /gis w string def
        /bis w string def
        /cf currentfile def 
        w h 8 [w 0 0 h neg 0 h] 
        { cf is readhexstring pop 
          cf gis readhexstring pop 
          cf bis readhexstring pop w gray}  image
        bitmapsave restore 
        grestore
        } bind def
/BITMAPGRAY { 
	8 {fakecolorsetup} COMMONBITMAP
	} bind def
/BITMAPGRAYc { 
	8 {fakecolorsetup} COMMONBITMAPc
	} bind def
/ENDBITMAP {
	} bind def
end 
	/ALDsave FMLOCAL
	/ALDmatrix matrix def ALDmatrix currentmatrix pop
/StartALD {
	/ALDsave save def
	 savematrix
	 ALDmatrix setmatrix
	} bind def
/InALD {
	 restorematrix
	} bind def
/DoneALD {
	 ALDsave restore
	} bind def
%%EndProlog
%%BeginSetup
(3.0) FMVERSION
1 1 595.3 844.7 0 1 21 FMDOCUMENT
0 0 /NewCenturySchlbk-Roman FMFONTDEFINE
1 0 /Helvetica-Bold FMFONTDEFINE
2 0 /NewCenturySchlbk-Bold FMFONTDEFINE
3 0 /NewCenturySchlbk-Italic FMFONTDEFINE
4 0 /Helvetica-Oblique FMFONTDEFINE
5 0 /Helvetica FMFONTDEFINE
6 1 /Symbol FMFONTDEFINE
32 FMFILLS
0 0 FMFILL
1 .1 FMFILL
2 .3 FMFILL
3 .5 FMFILL
4 .7 FMFILL
5 .9 FMFILL
6 .97 FMFILL
7 1 FMFILL
8 <0f1e3c78f0e1c387> FMFILL
9 <0f87c3e1f0783c1e> FMFILL
10 <cccccccccccccccc> FMFILL
11 <ffff0000ffff0000> FMFILL
12 <8142241818244281> FMFILL
13 <03060c183060c081> FMFILL
14 <8040201008040201> FMFILL
16 1 FMFILL
17 .9 FMFILL
18 .7 FMFILL
19 .5 FMFILL
20 .3 FMFILL
21 .1 FMFILL
22 0.03 FMFILL
23 0 FMFILL
24 <f0e1c3870f1e3c78> FMFILL
25 <f0783c1e0f87c3e1> FMFILL
26 <3333333333333333> FMFILL
27 <0000ffff0000ffff> FMFILL
28 <7ebddbe7e7dbbd7e> FMFILL
29 <fcf9f3e7cf9f3f7e> FMFILL
30 <7fbfdfeff7fbfdfe> FMFILL
%%EndSetup
%%Page: "1" 1
%%BeginPaperSize: A4
%%EndPaperSize
595.3 844.7 0 FMBEGINPAGE
113.4 742.67 481.9 756.84 R
7 X
0 K
V
113.4 90.7 481.9 104.87 R
V
0 10 Q
0 X
(1) 294.87 98.21 T
1 17 Q
(Scheduling Real T) 129.19 708.66 T
(ime Garbage Collection) 276.24 708.66 T
0 10 Q
(Roger Henriksson) 256.11 670.32 T
0 9.5 Q
(Dept of Computer Science, Lund University) 201.77 647.16 T
(Box 1) 225.91 635.66 T
(18, S-221 00 Lund, Sweden) 250 635.66 T
(e-mail: Roger) 216.9 624.16 T
(.Henriksson@dna.lth.se) 274.73 624.16 T
2 F
0.71 (Abstract.) 141.75 598.66 P
0 F
0.69 ( This paper presents a new method for scheduling the work) 186.57 598.66 P
1.53 (of an incremental garbage collector in a system with hard real time) 141.75 587.16 P
0.65 (requirements. The method utilizes the fact that just some of the proc-) 141.75 575.66 P
0.07 (esses in the system have to meet hard real time requirements and that) 141.75 564.16 P
0.48 (these processes typically run periodically) 141.75 552.66 P
0.48 (, a fact that we can make use) 322.58 552.66 P
0.54 (of when scheduling the garbage collection. The work of the collector is) 141.75 541.16 P
0.39 (scheduled to be performed in the pauses between the critical processe-) 141.75 529.66 P
0.8 (sis and is suspended when the processes with hard real time require-) 141.75 518.16 P
-0.12 (ments run. It is shown that this approach is feasible for many real time) 141.75 506.66 P
0.67 (systems and that it leaves the time-critical parts of the system undis-) 141.75 495.16 P
(turbed from garbage collection induced delays.) 141.75 483.66 T
1 12 Q
(1) 113.4 448.49 T
(Introduction) 131.82 448.49 T
0 10 Q
-0.03 (During the last few decades, we have observed an increased use of computers in) 113.4 425.82 P
-0.23 (process control equipment and other types of real time systems, e.g robot control) 113.4 413.82 P
0.74 (and telephone exchanges. The demands on the software of these systems have) 113.4 401.82 P
1.12 (increased as advances have been made in the \336elds of automated control and) 113.4 389.82 P
0.72 (computer engineering, forcing engineers to develop new techniques for writing) 113.4 377.82 P
(real time software.) 113.4 365.82 T
2.58 (A) 127.57 353.82 P
3 F
2.58 (real time application) 140.15 353.82 P
0 F
2.58 ( is characterized by the need to guarantee short) 240.98 353.82 P
1.56 (response times to external events and to run continuously without faults for) 113.4 341.82 P
0.13 (very long periods. Short response times are needed in order to keep up with the) 113.4 329.82 P
-0.26 (external process being controlled. Failure to do so, or having the system go down) 113.4 317.82 P
1.93 (due to a software error) 113.4 305.82 P
1.93 (, may cause expensive, and perhaps even dangerous,) 225.71 305.82 P
1.14 (interruptions in the process being controlled. For example, failure of the soft-) 113.4 293.82 P
0.72 (ware controlling a robot in a manufacturing plant may not only delay the pro-) 113.4 281.82 P
0.25 (duction, but an uncontrolled robot may also injure nearby workers. It is thus of) 113.4 269.82 P
0.38 (vital importance that real time software is able to keep up with the process, i.e) 113.4 257.82 P
(guarantee short response times, and that it really is reliable.) 113.4 245.82 T
2.98 (One issue that affects how well the real time system meets the above) 127.57 233.82 P
1.45 (requirements is how the memory of the computer is managed. The real time) 113.4 221.82 P
2.12 (software can either use) 113.4 209.82 P
3 F
2.12 (statically allocated) 232.01 209.82 P
0 F
2.12 ( memory only) 320.91 209.82 P
2.12 (, or in addition use) 386.79 209.82 P
3 F
1.34 (dynamically allocated) 113.4 197.82 P
0 F
1.34 ( memory) 216.13 197.82 P
1.34 (. Statically allocated memory is allocated when) 256.71 197.82 P
0.41 (the application starts and is never deallocated. Using only this type of memory) 113.4 185.82 P
0.12 (may be \336ne for many real time applications, but it requires that it is possible to) 113.4 173.82 P
0.05 (calculate the maximum sizes of all internal data structures in advance. Compli-) 113.4 161.82 P
0.63 (cated data structures may be dif\336cult to handle with statically allocated mem-) 113.4 149.82 P
4.4 (ory only) 113.4 137.82 P
4.4 (. The ability to manage complex data structures becomes more) 153.89 137.82 P
FMENDPAGE
%%EndPage: "1" 2
%%Page: "2" 2
595.3 844.7 0 FMBEGINPAGE
113.4 742.67 481.9 756.84 R
7 X
0 K
V
113.4 90.7 481.9 104.87 R
V
0 10 Q
0 X
(2) 294.87 98.21 T
1.69 (important as) 113.4 713.32 P
3 F
1.69 (object-oriented technologies) 179.16 713.32 P
0 F
1.69 ( are applied to the development and) 305.92 713.32 P
0.45 (implementation of real time software. W) 113.4 701.32 P
0.45 (e thus see that the freedom of the pro-) 302.07 701.32 P
-0.13 (grammer becomes limited to an undesirable degree, especially in the light of the) 113.4 689.32 P
1.16 (increased complexity of real time software. Some method to dynamically allo-) 113.4 677.32 P
(cate, and release, memory would be desirable.) 113.4 665.32 T
0.86 (The traditional way to implement) 127.57 653.32 P
3 F
0.86 (dynamical memory management) 290.51 653.32 P
0 F
0.86 ( is to let) 442.3 653.32 P
0.64 (the application manage the free store on its own, perhaps with some rudimen-) 113.4 641.32 P
0.76 (tary help from the runtime system. This is typically done by building a linked) 113.4 629.32 P
0.13 (list containing all free memory segments, called the free-list. When the applica-) 113.4 617.32 P
-0.2 (tion demands more memory) 113.4 605.32 P
-0.2 (, the free-list is searched for a memory segment with) 240.69 605.32 P
0.01 (a suitable size. The free-list is updated and a memory area of the requested size) 113.4 593.32 P
2.12 (is delivered to the application. When a memory segment is released by the) 113.4 581.32 P
(application, it is again linked into the free-list.) 113.4 569.32 T
0.9 (There are two big disadvantages of using this method in real time applica-) 127.57 557.32 P
-0.06 (tions. The \336rst disadvantage stems from the fact that most applications allocate) 113.4 545.32 P
0.03 (and deallocate memory chunks of variable sizes. This leads to) 113.4 533.32 P
3 F
0.03 (memory fragmen-) 400.83 533.32 P
0.77 (tation) 113.4 521.32 P
0 F
0.77 (and an arbitrary long free-list. That in turns makes it dif\336cult to calcu-) 144.15 521.32 P
0.26 (late the worst-case response time for an allocation operation. In the worst case,) 113.4 509.32 P
-0.24 (the system must traverse a very long free-list in its entirety before \336nding a seg-) 113.4 497.32 P
-0.19 (ment that is large enough. If the delays caused by searching the free-list become) 113.4 485.32 P
0.12 (too long it may not be possible to guarantee short bounds on the response times) 113.4 473.32 P
(of the system as a whole.) 113.4 461.32 T
1.08 (The second draw-back comes from that the application, and ultimately the) 127.57 449.32 P
1.65 (programmer) 113.4 437.32 P
1.65 (, must see to that memory is allocated and released in a correct) 170.4 437.32 P
0.85 (fashion. T) 113.4 425.32 P
0.85 (wo types of programming errors that are very common in large soft-) 159.63 425.32 P
0.86 (ware systems are that chunks of memory aren\325) 113.4 413.32 P
0.86 (t deallocated when they should) 335.21 413.32 P
0.89 (be,) 113.4 401.32 P
3 F
0.89 (memory leaks) 130.4 401.32 P
0 F
0.89 (, and that memory is deallocated when it shouldn\325) 194.21 401.32 P
0.89 (t be, intro-) 431.44 401.32 P
(ducing) 113.4 389.32 T
3 F
(dangling pointers) 147.08 389.32 T
0 F
(.) 228.31 389.32 T
2.56 (Forgetting to release unused memory means that these segments aren\325) 127.57 377.32 P
2.56 (t) 478.02 377.32 P
1.43 (linked into the free-list and can thus not be reused. Sooner or later) 113.4 365.32 P
1.43 (, the free) 437.96 365.32 P
1.08 (store will be exhausted and the application will crash. Errors of this type are) 113.4 353.32 P
1.88 (typically very dif\336cult to locate and it is nearly impossible to prove that an) 113.4 341.32 P
0.49 (application doesn\325) 113.4 329.32 P
0.49 (t leak memory) 196.46 329.32 P
0.49 (. A memory leak is much more severe in a real) 262.98 329.32 P
0.17 (time system than in other applications since a real time system must be able to) 113.4 317.32 P
-0.23 (run without faults for very long periods, for some industrial processes months or) 113.4 305.32 P
(years.) 113.4 293.32 T
2.39 (Deallocating a chunk of memory that is still in use introduces dangling) 127.57 281.32 P
0.77 (pointers into the data structures of the application. An attempt to dereference) 113.4 269.32 P
0.37 (such a pointer produces strange, erratic, effects and will in many cases cause a) 113.4 257.32 P
1.74 (crash. Manually managed memory must thus be considered less suitable for) 113.4 245.32 P
(complex real time systems since it makes them unreliable.) 113.4 233.32 T
0.28 (T) 127.57 221.32 P
0.28 (o satisfy the reliability restriction one needs support for) 133.32 221.32 P
3 F
0.28 (automatic memory) 395.94 221.32 P
-0.14 (management) 113.4 209.32 P
0 F
-0.14 (. Furthermore, in order to avoid fragmentation) 172.62 209.32 P
3 F
-0.14 (memory compaction) 390.44 209.32 P
0 F
0.15 (is desirable. By including a compacting garbage collector in the runtime system) 113.4 197.32 P
1.72 (and leave the task of identifying dead objects and deallocate them to it, the) 113.4 185.32 P
0.98 (problem of memory management errors and fragmentation can be eliminated.) 113.4 173.32 P
0.01 (This would be a largestep towards reliable real-time systems. The problem with) 113.4 161.32 P
1.44 (this strategy is that existing garbage collectors can\325) 113.4 149.32 P
1.44 (t guarantee short enough) 360.61 149.32 P
0.24 (worst-case response times for systems with very hard real-time demands, such.) 113.4 137.32 P
FMENDPAGE
%%EndPage: "2" 3
%%Page: "3" 3
595.3 844.7 0 FMBEGINPAGE
113.4 742.67 481.9 756.84 R
7 X
0 K
V
113.4 90.7 481.9 104.87 R
V
0 10 Q
0 X
(3) 294.87 98.21 T
1.87 (Solutions are available for) 113.4 713.32 P
3 F
1.87 (interactive systems) 245.08 713.32 P
0 F
1.87 (, i.e systems that only have to) 333.35 713.32 P
1.53 (make garbage collection unnoticable to a human user) 113.4 701.32 P
1.53 (. For) 369.75 701.32 P
3 F
1.53 (real time systems) 397.25 701.32 P
0 F
1.53 (,) 479.12 701.32 P
0.51 (which have to satisfy much tougher demands, suitable approaches are lacking.) 113.4 689.32 P
0.54 (W) 113.4 677.32 P
0.54 (e think, however) 122.65 677.32 P
0.54 (, that this problem can be solved and this paper attempts to) 200.18 677.32 P
(take a step in that direction.) 113.4 665.32 T
1 12 Q
(2) 113.4 629.99 T
(Previous W) 131.82 629.99 T
(ork) 196.93 629.99 T
0 10 Q
-0.04 (Development of algorithms for garbage collection started in the late \336fties when) 113.4 607.32 P
0.26 (the \336rst list-processing languages were implemented. These algorithms were of) 113.4 595.32 P
0.11 (the) 113.4 583.32 P
3 F
0.11 (stop-and-compact) 131.28 583.32 P
0 F
0.11 ( type. This means that the application program, called the) 212.32 583.32 P
3 F
-0.27 (mutator) 113.4 571.32 P
0 F
-0.27 ( since it modi\336es the object graph, executes, allocating new objects, until) 150.6 571.32 P
-0.21 (it runs out of memory) 113.4 559.32 P
-0.21 (. At that time the mutator is halted and the garbage collec-) 211.75 559.32 P
0.5 (tor) 113.4 547.32 P
0.5 (, abbreviated) 125.98 547.32 P
3 F
0.5 (collector) 190.12 547.32 P
0 F
0.5 (, goes into action, traversing the pointer graph, identi-) 227.29 547.32 P
2.23 (fying garbage, and compacting the heap. When it is done, the mutator can) 113.4 535.32 P
1.33 (continue execution. The time the collector needs to collect all garbage objects) 113.4 523.32 P
2.23 (and to compact the heap may be very long, typically many seconds, but in) 113.4 511.32 P
(extreme cases several minutes.) 113.4 499.32 T
-0.15 (There are essentially three basic approaches to how garbage is identi\336ed and) 127.57 487.32 P
(deallocated: reference-counting, mark-and-sweep, and copying.) 113.4 475.32 T
3 F
1.54 (Reference-counting) 127.57 463.32 P
0 F
1.54 ( relies on keeping a count on every object of how many) 214.34 463.32 P
0.28 (pointers there are to the object in question. When the count reaches zero, there) 113.4 451.32 P
0.27 (are no pointers to the object and it can be marked as garbage. Reference-count-) 113.4 439.32 P
(ing can\325) 113.4 427.32 T
(t identify and reclaim cyclic structures of garbage objects.) 148.76 427.32 T
0.41 (The) 127.57 415.32 P
3 F
0.41 (mark-and-sweep algorithms) 148.54 415.32 P
0 F
0.41 ( leave the task of identifying the garbage to) 277.92 415.32 P
1.19 (the collector) 113.4 403.32 P
1.19 (. The collector cycle is divided into two parts: identifying garbage) 170.11 403.32 P
0.91 (and compacting the heap. Live objects are found by recursively traversing the) 113.4 391.32 P
0.61 (object graph starting from all the root pointers. All objects encountered during) 113.4 379.32 P
0.57 (this traversal are reachable and thus alive. Objects not marked are considered) 113.4 367.32 P
(garbage and are removed by compacting the heap.) 113.4 355.32 T
3 F
0.22 (Copying algorithms) 127.57 343.32 P
0 F
0.22 ( divides the heap into two equally sized areas, the) 218.47 343.32 P
3 F
0.22 (From-) 453.59 343.32 P
0.1 (space) 113.4 331.32 P
0 F
0.1 ( and the) 138.19 331.32 P
3 F
0.1 (T) 179.2 331.32 P
0.1 (ospace) 185.16 331.32 P
0 F
0.1 (. Objects are allocated in one of the areas, the Fromspace,) 214.94 331.32 P
0.15 (until it is full, after which the live objects are copied to a contiguous area in the) 113.4 319.32 P
1.63 (T) 113.4 307.32 P
1.63 (ospace by traversing the object graph starting with the root pointers. Dead) 119.15 307.32 P
1.87 (objects are not reached when traversing the graph and are thus not copied.) 113.4 295.32 P
1.37 (When all live objects are copied, the functions of Fromspace and T) 113.4 283.32 P
1.37 (ospace are) 432.41 283.32 P
1.04 (\337ipped. The drawback of copying algorithms is that only half of the heap size) 113.4 271.32 P
(can be used for storing objects.) 113.4 259.32 T
0.73 (W) 127.57 247.32 P
0.73 (ith the advent of) 137.01 247.32 P
3 F
0.73 (interactive) 219.15 247.32 P
0 F
0.73 ( computer systems, the long delays caused by) 267.63 247.32 P
-0.07 (garbage collection became intolerable. The solution to this problem was to make) 113.4 235.32 P
0.46 (the collector) 113.4 223.32 P
3 F
0.46 (incremental) 173.35 223.32 P
0 F
0.46 (, i.e dividing the collector cycle into many small pieces) 228.11 223.32 P
-0.08 (of work which are interleaved with the execution of the mutator) 113.4 211.32 P
-0.08 (. All three of the) 407.08 211.32 P
1.51 (basic algorithms can be modi\336ed to be incremental, but a very popular algo-) 113.4 199.32 P
0.57 (rithm is based on the copying approach and was published in [Bak78]. Several) 113.4 187.32 P
0.69 (modi\336cations of this algorithm have been presented since then, for example in) 113.4 175.32 P
([Bro84].) 113.4 163.32 T
3.08 (Using incremental garbage collectors has reduced the individual delays) 127.57 151.32 P
0.06 (caused by garbage collection to tenths of a second, making it virtually unnotica-) 113.4 139.32 P
FMENDPAGE
%%EndPage: "3" 4
%%Page: "4" 4
595.3 844.7 0 FMBEGINPAGE
113.4 742.67 481.9 756.84 R
7 X
0 K
V
113.4 90.7 481.9 104.87 R
V
0 10 Q
0 X
(4) 294.87 98.21 T
0.58 (ble in most interactive systems. It is, however) 113.4 713.32 P
0.58 (, still dif\336cult to guarantee short) 328.5 713.32 P
0.09 (worst-case delays, which makes the algorithms less suitable for real-time appli-) 113.4 701.32 P
-0 (cations, which have to satisfy much harder requirements. In the past few years,) 113.4 689.32 P
1.2 (researchers have tried to modify the incremental algorithms in various ways,) 113.4 677.32 P
0.29 (decreasing the duration of the individual garbage collection induced delays. It\325) 113.4 665.32 P
0.29 (s) 477.28 665.32 P
0.67 (claimed that if the individual delays are small enough, these algorithm can be) 113.4 653.32 P
1.29 (used in true real-time systems. An example is the work published in [EV92].) 113.4 641.32 P
1.71 (Since the worst-case behaviour for a longer sequence of actions is still quite) 113.4 629.32 P
-0.04 (unpredictable, we do not think these approaches are quite suf\336cient for systems) 113.4 617.32 P
(with very hard real-time requirements.) 113.4 605.32 T
1 12 Q
(3) 113.4 569.99 T
(The Anatomy of a Real T) 131.82 569.99 T
(ime System) 271.56 569.99 T
0 10 Q
0.97 (In order to solve the problems of garbage collection in systems with hard real) 113.4 547.32 P
2.2 (time requirements, it might be a good idea to study how such systems are) 113.4 535.32 P
0.49 (designed. Many of these systems are controlling some kind of external process,) 113.4 523.32 P
0.5 (such as the machines of a manufacturing plant. The state of the external proc-) 113.4 511.32 P
0.79 (ess is sampled with regular intervals, several times a second, and appropriate) 113.4 499.32 P
1.35 (actions are taken as a result of these samples. This part of the system could) 113.4 487.32 P
1.37 (thus be said to be clock-driven, or periodic, in its nature. It is vital that this) 113.4 475.32 P
1.36 (sampling is done regularly and that the time from sampling to the output of) 113.4 463.32 P
0.26 (modi\336ed control signals is short in order for the system to stay in control of the) 113.4 451.32 P
1.11 (external process in question. Investigating existing actual production systems) 113.4 439.32 P
1.6 (show that typical cycle times are around 50ms. Some processes do, however) 113.4 427.32 P
1.6 (,) 479.12 427.32 P
(sample as often as every 10ms.) 113.4 415.32 T
0.08 (There are other tasks the system is expected to perform that are not as criti-) 127.57 403.32 P
0.89 (cal as the described tasks. This includes tasks such as presentation of data to) 113.4 391.32 P
0.8 (the operator) 113.4 379.32 P
0.8 (, communication with other computers, and long-time planning. It) 170.28 379.32 P
1.77 (is still important that these tasks do not lag behind, but short, to a human) 113.4 367.32 P
0.13 (unnoticable, delays are accepted. Even occasional longer delays can be accepted) 113.4 355.32 P
-0.16 (in many systems. W) 113.4 343.32 P
-0.16 (e see that we have two levels of sensitivity to garbage collec-) 205.47 343.32 P
(tor induced delays \050and of course other types of delays as well\051.) 113.4 331.32 T
0.49 (Real time software systems are in most cases implemented using a runtime) 127.57 319.32 P
2.04 (environment supporting preemptively scheduled processes with priority) 113.4 307.32 P
2.04 (. The) 456.54 307.32 P
0.58 (different tasks are assigned to different concurrently running processes, which) 113.4 295.32 P
0.38 (can be classi\336ed accordingly to the above observations into processes with high) 113.4 283.32 P
0.42 (priority \050sensitive to delays\051 and processes with low priority \050not very sensitive) 113.4 271.32 P
1.21 (to delays\051. Another observation that can be made is that the number of proc-) 113.4 259.32 P
1.06 (esses with high priority) 113.4 247.32 P
1.06 (, and the amount of resources in the form of time and) 224.48 247.32 P
0.09 (memory they need, are quite small compared to the demands of the system as a) 113.4 235.32 P
1.85 (whole. Interviews with people from the process control industry support the) 113.4 223.32 P
(observations made above.) 113.4 211.32 T
1 12 Q
(4) 113.4 175.99 T
(The Proposed Scheduling Strategy) 131.82 175.99 T
0 10 Q
-0.19 (In this section we will study an approach to how the garbage collection work can) 113.4 153.32 P
0.8 (be scheduled in order to take advantage of the properties of the real time sys-) 113.4 141.32 P
0.88 (tem. First, a discussion of the general principles and assumptions will be pre-) 113.4 129.32 P
FMENDPAGE
%%EndPage: "4" 5
%%Page: "5" 5
595.3 844.7 0 FMBEGINPAGE
113.4 742.67 481.9 756.84 R
7 X
0 K
V
113.4 90.7 481.9 104.87 R
V
0 10 Q
0 X
(5) 294.87 98.21 T
1.15 (sented, which will be followed by a more in-depth description of the proposed) 113.4 713.32 P
(strategy) 113.4 701.32 T
(.) 150.42 701.32 T
1 11 Q
(4.1) 113.4 666.66 T
(Principles and Assumptions) 141.75 666.66 T
0 10 Q
0.84 (The idea behind this paper is that our knowledge about the inner workings of) 113.4 643.32 P
0.49 (real time systems can be used to schedule the garbage collector work in such a) 113.4 631.32 P
1.6 (way that time-critical parts of the system are disturbed as little as possible.) 113.4 619.32 P
2.18 (This means that the processes with high priority should run without being) 113.4 607.32 P
0.05 (interrupted by the garbage collector) 113.4 595.32 P
0.05 (. Thus, no garbage collection should be done) 278.69 595.32 P
0.09 (when these processes are running. T) 113.4 583.32 P
0.09 (o be able to guarantee that this will be pos-) 281.72 583.32 P
1.05 (sible, there must always be enough memory free when the high priority proc-) 113.4 571.32 P
(esses are invoked for them to \336nish.) 113.4 559.32 T
-0.03 ( When the high priority processes run, garbage will be generated. T) 127.57 547.32 P
-0.03 (o keep up) 437.9 547.32 P
0.32 (with this, the processor time left must be divided between the collector and the) 113.4 535.32 P
0.2 (processes with low priority) 113.4 523.32 P
0.2 (. The garbage collector could be viewed as a separate) 236.7 523.32 P
0.91 (process with a priority which is lower than for the high priority processes but) 113.4 511.32 P
0.57 (higher than for the low priority ones. The scheduling principle is illustrated in) 113.4 499.32 P
0.57 (\336gure 1. Since the high priority processes typically only use a small fraction of) 113.4 487.32 P
0.58 (the total CPU time and have quite modest memory needs, there should practi-) 113.4 475.32 P
0.13 (cally always be plenty of time left for the low priority processes to run. T) 113.4 463.32 P
0.13 (o make) 448.63 463.32 P
0.88 (sure that there always is enough free store to run the high priority processes,) 113.4 451.32 P
1.19 (some garbage collector work may also have to be done while running the low) 113.4 439.32 P
(priority processes as we will see later) 113.4 427.32 T
(.) 284.81 427.32 T
0.56 ( Scheduling the garbage collector work in this way is feasible if we can pre-) 127.57 415.32 P
0.09 (dict when the processes with high priority will be invoked. This is easy in many) 113.4 403.32 P
3.72 (real time systems since these activities are periodic. Also, their memory) 113.4 391.32 P
(demands are low and easy to estimate an upper bound to.) 113.4 379.32 T
0.9 (Now when the general idea is laid out, we are ready to study the proposed) 127.57 367.32 P
-0.02 (garbage collector strategy in more detail and how it can be implemented. As the) 113.4 355.32 P
1.15 (starting point of the collector we will use an engine based on Brook\325) 113.4 343.32 P
1.15 (s copying) 438.19 343.32 P
0.55 (garbage collector algorithm. W) 113.4 331.32 P
0.55 (e furthermore assume that the real time system) 256.29 331.32 P
0.29 (contains only one high priority process. The number of low priority processes is) 113.4 319.32 P
(not restricted, however) 113.4 307.32 T
(.) 219.26 307.32 T
-0.14 (The heap is divided into two areas, the) 127.57 295.32 P
3 F
-0.14 (Fromspace) 308.23 295.32 P
0 F
-0.14 ( and the) 358.01 295.32 P
3 F
-0.14 (T) 398.31 295.32 P
-0.14 (ospace) 404.27 295.32 P
0 F
-0.14 (, as shown) 434.05 295.32 P
0.55 (in \336gure 2. New objects are allocated in T) 113.4 283.32 P
0.55 (ospace beginning from the upper end) 308.49 283.32 P
0.95 (\050right side in the \336gure\051. W) 113.4 271.32 P
0.95 (e use the symbol) 243.44 271.32 P
3 F
0.95 (A) 326.65 271.32 P
0 F
0.95 ( to denote the amount of newly) 333.68 271.32 P
0.6 (allocated objects in T) 113.4 259.32 P
0.6 (ospace. As the garbage collector runs, it evacuates objects) 211.47 259.32 P
1.93 (from Fromspace and puts them in T) 113.4 247.32 P
1.93 (ospace beginning from the lower end of) 290.26 247.32 P
113.4 124.71 481.9 719.99 C
113.4 124.72 481.9 231.38 C
120.39 140.31 474.91 153.32 R
7 X
0 K
V
1 10 Q
0 X
(Figure 1) 138.51 146.65 T
4 F
(How to divide the CPU time between the different processes.) 187.38 146.65 T
449.96 182.65 461.49 179.34 449.96 176.03 449.96 179.34 4 Y
V
133.81 179.34 449.96 179.34 2 L
1 H
2 Z
N
5 9 Q
(T) 439.45 168.3 T
(ime) 444.61 168.3 T
159.83 179.34 211.88 205.36 R
0.5 H
N
211.88 179.34 263.92 205.36 R
N
263.92 179.34 368.01 205.36 R
N
368.01 179.34 420.05 205.36 R
N
(High) 171.9 194.47 T
(priority) 171.9 185.47 T
(Garbage) 224.89 194.47 T
(collector) 224.89 185.47 T
(Low priority) 296.04 194.47 T
(processes / GC) 296.04 185.47 T
(High) 381.02 194.47 T
(priority) 381.02 185.47 T
420.05 205.36 433.06 205.36 2 L
N
(...) 425.57 185.8 T
(...) 146.82 185.8 T
159.83 205.36 146.82 205.36 2 L
N
113.4 124.71 481.9 719.99 C
1.43 2.83 593.87 841.88 C
FMENDPAGE
%%EndPage: "5" 6
%%Page: "6" 6
595.3 844.7 0 FMBEGINPAGE
113.4 742.67 481.9 756.84 R
7 X
0 K
V
113.4 90.7 481.9 104.87 R
V
0 10 Q
0 X
(6) 294.87 98.21 T
0.8 (T) 113.4 713.32 P
0.8 (ospace \050left side in the \336gure\051. W) 119.15 713.32 P
0.8 (e denote the amount of evacuated objects at) 274.76 713.32 P
(any one time) 113.4 701.32 T
3 F
(E) 175.79 701.32 T
0 F
(.) 183 701.32 T
1.39 (The evacuation is done incrementally) 127.57 689.32 P
1.39 (. A) 304.9 689.32 P
3 F
1.39 (forwarding pointer) 323.22 689.32 P
0 F
1.39 ( in each of the) 411.57 689.32 P
2 (objects is used during pointer dereferencing. The forwarding pointers of the) 113.4 677.32 P
0.59 (Fromspace copy of the objects point to the corresponding, evacuated, objects in) 113.4 665.32 P
1.75 (T) 113.4 653.32 P
1.75 (ospace. The forwarding pointer within a T) 119.15 653.32 P
1.75 (ospace object points to the object) 322.88 653.32 P
0.03 (itself. All references to objects are done via the forwarding pointer) 113.4 641.32 P
0.03 (. This enables) 417.97 641.32 P
(the program to always address the most recent copy of an object.) 113.4 629.32 T
3 F
3.24 (Evacuation) 127.57 617.32 P
0 F
3.24 ( is done by linearly scanning the pointers in the evacuated) 179.94 617.32 P
1.5 (objects, evacuating referenced objects in Fromspace. Pointer assignments are) 113.4 605.32 P
0.16 (checked. If an attempt is made to store a pointer referencing an object in From-) 113.4 593.32 P
0.02 (space, the object is also evacuated. This is done to make sure we don\325) 113.4 581.32 P
0.02 (t introduce) 431.36 581.32 P
0.41 (any pointers into Fromspace in the already scanned objects. It also means that) 113.4 569.32 P
1.02 (we don\325) 113.4 557.32 P
1.02 (t have to scan the newly allocated objects. When all objects have been) 148.67 557.32 P
1.33 (evacuated, we can temporarily suspend the garbage collector until T) 113.4 545.32 P
1.33 (ospace is) 439.67 545.32 P
1.03 (\336lled up. At that point, the functions of Fromspace and T) 113.4 533.32 P
1.03 (ospace are swapped,) 385.99 533.32 P
(and a new collector cycle begins. This is called a) 113.4 521.32 T
3 F
(\337ip) 337.39 521.32 T
0 F
(.) 352.56 521.32 T
0.03 (T) 127.57 509.32 P
0.03 (o guarantee that the system doesn\325) 133.32 509.32 P
0.03 (t run out of memory) 294.52 509.32 P
0.03 (, we must make sure) 386.07 509.32 P
-0 (that the evacuation of live Fromspace objects will be \336nished before the point in) 113.4 497.32 P
2.05 (T) 113.4 485.32 P
2.05 (ospace where new objects are allocated reaches the point where evacuated) 119.15 485.32 P
0.37 (objects are stored. That can be avoided if we know how much of the Fromspace) 113.4 473.32 P
-0.13 (that consists of live objects, or more realistically an upper bound on the amount.) 113.4 461.32 P
0.63 (The garbage collection work can then be scheduled as a function of) 113.4 449.32 P
3 F
0.63 (A) 431.14 449.32 P
0 F
0.63 ( in a way) 438.18 449.32 P
0.14 (such that all live objects are evacuated to T) 113.4 437.32 P
0.14 (ospace before the system runs out of) 313.73 437.32 P
0.34 (memory) 113.4 425.32 P
0.34 (. One way to \336nd out how many objects have to be evacuated is to have) 149.86 425.32 P
1.08 (the application programmer specify an upper bound for the amount of objects) 113.4 413.32 P
0.64 (that can be alive at any one time. The maximum amount of live objects is also) 113.4 401.32 P
0.04 (the maximum amount of objects that may have to be evacuated. W) 113.4 389.32 P
0.04 (e use) 420.93 389.32 P
3 F
0.04 (E) 447.29 389.32 P
3 8 Q
0.03 (max) 454.51 386.82 P
0 10 Q
0.04 ( to) 470.2 389.32 P
0.15 (denote this upper bound. If all Fromspace objects are evacuated before the area) 113.4 377.32 P
-0.2 (denoted) 113.4 365.32 P
3 F
-0.2 (F) 152.44 365.32 P
0 F
-0.2 ( in \336gure 2 becomes exhausted, the system will not run out of memory) 159.1 365.32 P
-0.2 (.) 479.12 365.32 P
1 11 Q
(4.2) 113.4 330.66 T
(Description of the algorithm) 141.75 330.66 T
0 10 Q
1.71 (In order to describe the proposed strategy) 113.4 307.32 P
1.71 (, let us follow the execution of the) 315.2 307.32 P
-0.2 (application from the point at which the high priority process is invoked, through) 113.4 295.32 P
1.77 (the execution of the garbage collector process and the low priority processes) 113.4 283.32 P
113.4 124.71 481.9 719.99 C
114.71 124.71 480.59 270.42 C
201.45 140.31 393.85 153.32 R
7 X
0 K
V
1 10 Q
0 X
(Figure 2) 244.88 146.65 T
4 F
(Heap usage.) 293.75 146.65 T
306.62 209.87 345.66 235.89 R
3 X
V
436.73 209.87 475.77 235.89 R
V
119.54 209.87 288.68 235.89 R
5 X
V
1 H
2 Z
0 X
N
306.62 209.87 475.77 235.89 R
N
5 9 Q
(Fromspace) 191.69 255.36 T
(T) 377.24 255.36 T
(ospace) 381.74 255.36 T
436.73 235.89 436.73 209.87 2 L
N
345.66 235.89 345.66 209.87 2 L
N
448.27 193.55 436.73 196.86 448.27 200.17 448.27 196.86 4 Y
V
464.23 200.17 475.77 196.86 464.23 193.55 464.23 196.86 4 Y
V
448.27 196.86 464.23 196.86 2 L
0 Z
N
318.16 193.55 306.62 196.86 318.16 200.17 318.16 196.86 4 Y
V
334.12 200.17 345.66 196.86 334.12 193.55 334.12 196.86 4 Y
V
318.16 196.86 334.12 196.86 2 L
N
(A) 456.76 185.82 T
(E) 319.64 185.82 T
384.69 248.9 384.69 196.86 2 L
2 Z
N
318.16 180.54 306.62 183.85 318.16 187.15 318.16 183.85 4 Y
V
373.15 187.15 384.69 183.85 373.15 180.54 373.15 183.85 4 Y
V
318.16 183.85 373.15 183.85 2 L
0 Z
N
(E) 352.48 174.62 T
5 7 Q
(max) 358.48 172.37 T
396.23 167.53 384.69 170.84 396.23 174.14 396.23 170.84 4 Y
V
425.2 174.14 436.73 170.84 425.2 167.53 425.2 170.84 4 Y
V
396.23 170.84 425.2 170.84 2 L
N
5 9 Q
(F) 405.22 172.8 T
(new) 443.1 249.44 T
(objects) 443.1 240.44 T
(evacuated) 307.18 250.54 T
(objects) 307.18 241.54 T
113.4 124.71 481.9 719.99 C
1.43 2.83 593.87 841.88 C
FMENDPAGE
%%EndPage: "6" 7
%%Page: "7" 7
595.3 844.7 0 FMBEGINPAGE
113.4 742.67 481.9 756.84 R
7 X
0 K
V
113.4 90.7 481.9 104.87 R
V
0 10 Q
0 X
(7) 294.87 98.21 T
-0.05 (until the high priority process is started next and the cycle starts all over again.) 113.4 713.32 P
(See also \336gure 1.) 113.4 701.32 T
0.24 (In the \336rst phase of the cycle, i.e when the process with high priority is run-) 127.57 689.32 P
1.07 (ning, no garbage collection is to be performed. In order to guarantee this, the) 113.4 677.32 P
-0.07 (size of the free memory) 113.4 665.32 P
-0.07 (,) 219.36 665.32 P
3 F
-0.07 (F) 224.85 665.32 P
0 F
-0.07 ( in \336gure 2, must be at least as large as the worst-case) 231.51 665.32 P
0.73 (allocation need of the program during one invocation of the high priority proc-) 113.4 653.32 P
0.85 (ess. This parameter must be speci\336ed by the application programmer) 113.4 641.32 P
0.85 (. W) 440.39 641.32 P
0.85 (e will) 456.05 641.32 P
2.7 (later see how the garbage collector system makes sure that this condition) 113.4 629.32 P
(always holds.) 113.4 617.32 T
3.43 (In order to guarantee that no Fromspace pointers are introduced into) 127.57 605.32 P
0.4 (scanned objects, pointer assignments have to be checked and objects evacuated) 113.4 593.32 P
0.05 (if needed. Since we have forbidden garbage collection induced delays during the) 113.4 581.32 P
0.57 (execution of the high priority processes, it is advisable to delay this work until) 113.4 569.32 P
0.35 (the process has \336nished. The addresses of all pointers that are modi\336ed during) 113.4 557.32 P
0.26 (the \336rst phase are thus pushed onto a stack to be checked later) 113.4 545.32 P
0.26 (. When the high) 407.28 545.32 P
1.35 (priority process blocks, the pointer assignment stack is traversed and objects) 113.4 533.32 P
1.37 (are evacuated as necessary) 113.4 521.32 P
1.37 (. Here we pay some of the price of not having the) 241.72 521.32 P
(high-priority process disturbed by garbage collection.) 113.4 509.32 T
0 8 Q
(1) 358.45 513.32 T
0 10 Q
2.84 (After having emptied the pointer assignment stack, an amount of time) 127.57 497.32 P
0.02 (remains before the high priority process is to be started again. This time slice is) 113.4 485.32 P
-0.13 (to be divided between the garbage collector and the low priority processes. V) 113.4 473.32 P
-0.13 (ary-) 463.21 473.32 P
0.35 (ing strategies can be used to do this, but they must all guarantee that we don\325) 113.4 461.32 P
0.35 (t) 478.02 461.32 P
-0.2 (run out of free memory) 113.4 449.32 P
-0.2 (,) 217.9 449.32 P
3 F
-0.2 (F) 223.26 449.32 P
0 F
-0.2 (, before all live objects in the Fromspace has been evac-) 228.82 449.32 P
(uated and we can do a \337ip.) 113.4 437.32 T
0.75 (A trivial way to divide the time slices is to devote them entirely to garbage) 127.57 425.32 P
1.53 (collection until all objects in Fromspace have been evacuated. After this, the) 113.4 413.32 P
-0 (garbage collector is suspended until T) 113.4 401.32 P
-0 (ospace is \336lled up, after which we do a \337ip) 287.2 401.32 P
1.23 (and a new collector cycle starts by again using all available time to evacuate) 113.4 389.32 P
0.37 (Fromspace objects. The behaviour of the system from the view of the low prior-) 113.4 377.32 P
1.09 (ity processes would be similar to the stop-and-compact type of garbage collec-) 113.4 365.32 P
(tors.) 113.4 353.32 T
0.6 (In practice, however) 127.57 341.32 P
0.6 (, a more even distribution of the garbage collector work) 221.85 341.32 P
1.73 (is probably desired. By using our knowledge about the maximum amount of) 113.4 329.32 P
-0.07 (objects that may have to be evacuated from Fromspace after a \337ip, we can make) 113.4 317.32 P
0.08 (a plan at the time of the \337ip of how much objects have to be evacuated when we) 113.4 305.32 P
0.41 (have allocated a given amount of new objects. W) 113.4 293.32 P
0.41 (e calculate a garbage collector/) 339.2 293.32 P
1.12 (allocation rate. When the system gets behind this planned schedule, the time) 113.4 281.32 P
0.26 (left over after running the high priority process is devoted to garbage collection) 113.4 269.32 P
(until the evacuation of objects catches up with the allocation of new objects.) 113.4 257.32 T
0.6 (The two above described approaches will be studied below in a more formal) 127.57 245.32 P
-0.26 (way and we will see that it will in both cases be possible to work out garbage col-) 113.4 233.32 P
113.4 197.71 481.9 212.71 C
122.4 210.71 266.4 210.71 2 L
0.5 H
2 Z
0 X
0 K
N
1.43 2.83 593.87 841.88 C
0 9 Q
0 X
0 K
-0.24 (1. The cost of the proposed strategy, as seen from the point of the high priority process, is) 113.4 191.71 P
(practically equal to the cost of manually managing the memory. The cost of a pointer as-) 113.4 181.71 T
(signment is increased only with having to push the address of the pointer onto a stack,) 113.4 171.71 T
-0.22 (whereas memory allocation is actually cheaper than if a system based on free-lists would) 113.4 161.71 P
-0.54 (be used. In previous approaches to automatic memory management for real time systems,) 113.4 151.71 P
-0.71 (each individual pointer assignment and object allocation could trigger a garbage collection) 113.4 141.71 P
(induced delay in the order of 10 milliseconds.) 113.4 131.71 T
FMENDPAGE
%%EndPage: "7" 8
%%Page: "8" 8
595.3 844.7 0 FMBEGINPAGE
113.4 742.67 481.9 756.84 R
7 X
0 K
V
113.4 90.7 481.9 104.87 R
V
0 10 Q
0 X
(8) 294.87 98.21 T
0.27 (lection parameters and conditions to guarantee that the system doesn\325) 113.4 713.32 P
0.27 (t run out) 440.28 713.32 P
(of memory or disturbs the high priority process.) 113.4 701.32 T
1 12 Q
(5) 113.4 665.99 T
(Analysing the Strategy) 131.82 665.99 T
0 10 Q
0.51 (In this section we will make a more formal analysis of the proposed strategies.) 113.4 643.32 P
0.27 (T) 113.4 631.32 P
0.27 (o do this we will need to have a notation describing the involved entities. This) 119.15 631.32 P
0.66 (section will therefore start by introducing such a notation. Next, we will make) 113.4 619.32 P
1.26 (an analysis based on the assumption that garbage collection is done in batch) 113.4 607.32 P
0.25 (with respect to the low-priority processes. In the last part of the section we will) 113.4 595.32 P
-0.12 (sketch on a simple strategy of how the garbage collector work can be distributed) 113.4 583.32 P
(more evenly) 113.4 571.32 T
(.) 168.37 571.32 T
1 11 Q
(5.1) 113.4 536.66 T
(Notation) 141.75 536.66 T
0 10 Q
0.4 (The notation needed for our analysis is shown in the table below) 127.57 513.32 P
0.4 (. It consists) 428.35 513.32 P
-0.14 (of symbols for application parameters given by the programmer) 113.4 501.32 P
-0.14 (, sizes of varying) 405.32 501.32 P
1.17 (memory areas, and times needed to perform different tasks. The meanings of) 113.4 489.32 P
(some of the symbols are also illustrated graphically in \336gure 2 and \336gure 3.) 113.4 477.32 T
3 9 Q
(Symbol) 125.22 447.99 T
(Description) 280.85 447.99 T
(Figure) 447.79 447.99 T
0 F
(p) 138.12 426.99 T
(Period for the process with high priority) 173.99 426.99 T
(, i.e the time between) 339.42 426.99 T
(two invokations of the process. Speci\336ed by the programmer) 173.99 415.99 T
(.) 423.16 415.99 T
(3) 458.93 426.99 T
(t) 132.02 396.99 T
0 7 Q
(max) 135.52 394.74 T
0 9 Q
(Maximum time required by the high priority process during) 173.99 396.99 T
(one period. Speci\336ed by the programmer) 173.99 385.99 T
(.) 341.43 385.99 T
(-) 459.93 396.99 T
(a) 131.27 366.99 T
0 7 Q
(max) 136.27 364.74 T
0 9 Q
-0.28 (Maximum amount of memory that can be allocated by the high) 173.99 366.99 P
(priority process during one period. Speci\336ed by the) 173.99 355.99 T
(programmer) 173.99 344.99 T
(.) 225.25 344.99 T
(-) 459.93 366.99 T
(pa) 128.69 325.99 T
0 7 Q
(max) 138.85 323.74 T
0 9 Q
(Maximum number of pointer assignments that can be) 173.99 325.99 T
(performed by the high priority process during one period.) 173.99 314.99 T
(Speci\336ed by the programmer) 173.99 303.99 T
(.) 293.33 303.99 T
(-) 459.93 325.99 T
(S) 137.87 284.99 T
(Size of T) 173.99 284.99 T
(ospace.) 208.96 284.99 T
(-) 459.93 284.99 T
(E) 137.45 265.99 T
(Amount of currently evacuated objects.) 173.99 265.99 T
(2) 458.93 265.99 T
(E) 130.53 246.99 T
0 7 Q
(max) 137.02 244.74 T
0 9 Q
(W) 173.99 246.99 T
(orst-case amount of objects that may have to be evacuated.) 182.32 246.99 T
(2) 458.93 246.99 T
(A) 137.45 227.99 T
(Amount of newly allocated objects.) 173.99 227.99 T
(2) 458.93 227.99 T
(F) 137.7 208.99 T
(Amount of free memory that can be used to allocate new) 173.99 208.99 T
(objects.) 173.99 197.99 T
(2) 458.93 208.99 T
(L) 137.7 178.99 T
-0.13 (T) 173.99 178.99 P
-0.13 (ime remaining after having run the high priority process and) 179.76 178.99 P
(cleared the pointer assignment stack until the high priority) 173.99 167.99 T
(process is to be started again.) 173.99 156.99 T
(3) 458.93 178.99 T
(L) 131.36 137.99 T
0 7 Q
(min) 137.35 135.74 T
0 9 Q
(Minimum value of L, i.e worst-case behaviour) 173.99 137.99 T
(.) 363.25 137.99 T
(-) 459.93 137.99 T
113.4 440.24 481.9 440.24 2 L
V
0.5 H
0 Z
N
113.4 437.74 481.9 437.74 2 L
V
N
FMENDPAGE
%%EndPage: "8" 9
%%Page: "9" 9
595.3 844.7 0 FMBEGINPAGE
113.4 742.67 481.9 756.84 R
7 X
0 K
V
113.4 90.7 481.9 104.87 R
V
0 10 Q
0 X
(9) 294.87 98.21 T
1 11 Q
(5.2) 113.4 497.66 T
(Batch-like Garbage Collection) 141.75 497.66 T
0 10 Q
-0.02 (A trivial way to divide the spare time between the garbage collector and the low) 113.4 474.32 P
0.08 (priority processes is, as we mentioned earlier) 113.4 462.32 P
0.08 (, to devote all available time to the) 321.56 462.32 P
0.87 (garbage collector until the Fromspace is empty) 113.4 450.32 P
0.87 (. The low-priority processes are) 333.88 450.32 P
1.51 (then allowed to run, interrupted of course by the high priority process, until) 113.4 438.32 P
0.24 (T) 113.4 426.32 P
0.24 (ospace \336lls up. When this happens, we do a \337ip and the process starts all over) 119.15 426.32 P
0.49 (again. What does this strategy require to succeed? W) 113.4 414.32 P
0.49 (e will calculate the worst-) 361.28 414.32 P
0.14 (case load and derive necessary conditions for the system not to run out of mem-) 113.4 402.32 P
(ory or having to disturb the high priority process.) 113.4 390.32 T
0.41 (W) 127.57 378.32 P
0.41 (e start by calculating the minimum amount of time available after having) 136.83 378.32 P
(run the high priority process:) 113.4 366.32 T
(L) 141.75 342.32 T
0 8 Q
(min) 148.41 339.82 T
0 10 Q
( = p - t) 162.93 342.32 T
0 8 Q
(max) 193.05 339.82 T
0 10 Q
( - pa) 208.9 342.32 T
0 8 Q
(max) 229.07 339.82 T
0 10 Q
( \341 t) 244.92 342.32 T
0 8 Q
(Copy) 257.14 339.82 T
0 9 Q
(t) 131.05 684.99 T
0 7 Q
(Evac) 134.55 682.74 T
0 9 Q
(W) 173.99 684.99 T
(orst-case remaining time needed by the garbage collector to) 182.32 684.99 T
(\336nish the evacuation of Fromspace.) 173.99 673.99 T
(-) 459.93 684.99 T
(c) 130.81 654.99 T
0 7 Q
(Evac) 134.8 652.74 T
0 9 Q
(Number of periods it may take to \336nish the evacuation of) 173.99 654.99 T
(Fromspace given that all available time is allotted to the) 173.99 643.99 T
(garbage collector) 173.99 632.99 T
(.) 243.57 632.99 T
(-) 459.93 654.99 T
(t) 133.71 613.99 T
0 7 Q
(GC) 137.2 611.74 T
0 9 Q
(Length of the time slice assigned for garbage collection during) 173.99 613.99 T
(one period.) 173.99 602.99 T
(3) 458.93 613.99 T
(t) 136.81 583.99 T
0 7 Q
(h) 140.31 581.74 T
0 9 Q
(T) 173.99 583.99 T
(ime used by the high priority process during the current) 179.76 583.99 T
(period.) 173.99 572.99 T
(3) 458.93 583.99 T
(t) 130.8 553.99 T
0 7 Q
(Copy) 134.29 551.74 T
0 9 Q
(Maximum time to evacuate one object, i.e to copy it.) 173.99 553.99 T
(-) 459.93 553.99 T
(t) 133.38 534.99 T
0 7 Q
(low) 136.88 532.74 T
0 9 Q
-0.4 (T) 173.99 534.99 P
-0.4 (ime remaining for the low priority processes to run before it is) 179.76 534.99 P
(time to restart the high priority process.) 173.99 523.99 T
3 F
(Symbol) 125.22 705.99 T
(Description) 280.85 705.99 T
(Figure) 447.79 705.99 T
113.4 698.24 481.9 698.24 2 L
V
0.5 H
0 Z
N
113.4 695.74 481.9 695.74 2 L
V
N
113.4 124.71 481.9 719.99 C
113.4 124.71 481.9 322.46 C
174.05 140.31 421.26 153.32 R
7 X
0 K
V
1 10 Q
0 X
(Figure 3) 221 146.65 T
4 F
(Denoting time intervals.) 269.88 146.65 T
141.52 227.73 440.77 266.76 R
0.5 H
2 Z
N
468.27 231.03 479.81 227.73 468.27 224.42 468.27 227.73 4 Y
V
115.5 227.73 468.27 227.73 2 L
1 H
N
5 9 Q
(T) 453.78 216.68 T
(ime) 458.94 216.68 T
193.56 266.76 193.56 227.73 2 L
0.5 H
N
206.57 266.76 206.57 227.73 2 L
N
388.73 266.76 388.73 227.73 2 L
N
440.77 266.76 453.78 266.76 2 L
N
141.52 266.76 128.51 266.76 2 L
N
4 10 Q
(...) 453.78 246.46 T
(...) 115.5 246.46 T
271.63 266.76 271.63 227.73 2 L
N
5 9 Q
(High) 151.2 254.4 T
(Priority) 151.2 245.4 T
(Process) 151.2 236.4 T
(Garbage) 216.25 253.91 T
(Collection) 216.25 244.91 T
(Low Priority) 294.32 253.91 T
(Processes/GC) 294.32 244.91 T
(High) 399.47 254.74 T
(Priority) 399.47 245.74 T
(Process) 399.47 236.74 T
(GC: Handle) 163.7 302.9 T
(Pointer Assignments) 163.7 293.9 T
203.12 280.04 199.81 268.51 196.51 280.04 199.81 280.04 4 Y
V
199.81 290.68 199.81 280.04 2 L
N
153.05 176.03 141.52 179.34 153.05 182.65 153.05 179.34 4 Y
V
377.19 182.65 388.73 179.34 377.19 176.03 377.19 179.34 4 Y
V
153.05 179.34 377.19 179.34 2 L
0 Z
N
(p) 258.62 172.79 T
218.11 189.04 206.57 192.35 218.11 195.66 218.11 192.35 4 Y
V
377.19 195.66 388.73 192.35 377.19 189.04 377.19 192.35 4 Y
V
218.11 192.35 377.19 192.35 2 L
N
(L) 292.65 194.32 T
218.11 202.05 206.57 205.36 218.11 208.67 218.11 205.36 4 Y
V
260.1 208.67 271.63 205.36 260.1 202.05 260.1 205.36 4 Y
V
218.11 205.36 260.1 205.36 2 L
N
(t) 232.63 211.82 T
5 7 Q
(GC) 235.12 209.57 T
153.05 202.05 141.52 205.36 153.05 208.67 153.05 205.36 4 Y
V
182.03 208.67 193.56 205.36 182.03 202.05 182.03 205.36 4 Y
V
153.05 205.36 182.03 205.36 2 L
N
5 9 Q
(t) 161.16 211.82 T
5 7 Q
(h) 163.66 209.57 T
113.4 124.71 481.9 719.99 C
1.43 2.83 593.87 841.88 C
FMENDPAGE
%%EndPage: "9" 10
%%Page: "10" 10
595.3 844.7 0 FMBEGINPAGE
113.4 742.67 481.9 756.84 R
7 X
0 K
V
113.4 90.7 481.9 104.87 R
V
0 10 Q
0 X
(10) 292.1 98.21 T
0.37 (The time required to \336nish the evacuation is t) 113.4 713.32 P
0 8 Q
0.3 (Evac) 328.5 710.82 P
0 10 Q
0.37 (. T) 346.56 713.32 P
0.37 (o simplify the analysis, we) 358.24 713.32 P
0.64 (skip how this is calculated. It is heavily dependent on the details of the actual) 113.4 701.32 P
0.01 (algorithm used, but in our case it is a function of how many live objects that are) 113.4 689.32 P
2.34 (present, how many pointers they contain, the time it takes to evacuate an) 113.4 677.32 P
1.38 (object, the time it takes to scan an object, and so forth. Since we don\325) 113.4 665.32 P
1.38 (t know) 449.05 665.32 P
(some of these parameters, a worst-case estimation has to be done.) 113.4 653.32 T
1.09 (Having calculated t) 127.57 641.32 P
0 8 Q
0.87 (Evac) 220.07 638.82 P
0 10 Q
1.09 (, we can calculate the maximum number of periods) 238.14 641.32 P
0.21 (needed to complete the garbage collection cycle, assuming that all spare time is) 113.4 629.32 P
(allotted to the garbage collector) 113.4 617.32 T
(. This number is denoted by c) 258.34 617.32 T
0 8 Q
(Evac) 394.03 614.82 T
(1) 412.09 621.32 T
0 10 Q
(:) 416.53 617.32 T
(c) 141.75 593.32 T
0 8 Q
(Evac) 146.18 590.82 T
0 10 Q
( =) 164.25 593.32 T
6 F
(\351) 175.86 593.32 T
0 F
(t) 179.7 593.32 T
0 8 Q
(Evac) 183.59 590.82 T
0 10 Q
( / L) 201.65 593.32 T
0 8 Q
(min) 216.65 590.82 T
6 10 Q
(\371) 231.16 593.32 T
0 F
0.11 (During the time the evacuation of Fromspace is \336nished, the high priority proc-) 113.4 569.32 P
0.05 (ess can be invoked c) 113.4 557.32 P
0 8 Q
0.04 (Evac) 206.35 554.82 P
0 10 Q
0.05 ( times. It may then in the worst case allocate c) 224.41 557.32 P
0 8 Q
0.04 (Evac) 439.66 554.82 P
0 10 Q
0.05 (\341a) 457.72 557.32 P
0 8 Q
0.04 (max) 466.06 554.82 P
0 10 Q
0.24 (bytes of memory) 113.4 545.32 P
0.24 (. This in turn means that F must always be at least as large as) 188.65 545.32 P
0.14 (c) 113.4 533.32 P
0 8 Q
0.11 (Evac) 117.84 530.82 P
0 10 Q
0.14 (\341a) 135.9 533.32 P
0 8 Q
0.11 (max) 144.24 530.82 P
0 10 Q
0.14 ( in order for us to avoid running out of memory) 160.75 533.32 P
0.14 (. F is calculated as fol-) 378.11 533.32 P
(lows:) 113.4 521.32 T
(F = S - E) 141.75 497.32 T
0 8 Q
(max) 182.42 494.82 T
0 10 Q
( - A) 198.27 497.32 T
0.5 (The value of A directly after a \337ip is zero and we can thus set up the following) 113.4 473.32 P
0.52 (inequality which, if satis\336ed immediately after a \337ip, tells us that the strategy) 113.4 461.32 P
(will succeed:) 113.4 449.32 T
(S - E) 141.75 425.32 T
0 8 Q
(max) 164.14 422.82 T
6 10 Q
(\263) 182.77 425.32 T
0 F
(c) 190.76 425.32 T
0 8 Q
(Evac) 195.19 422.82 T
0 10 Q
(\341a) 213.26 425.32 T
0 8 Q
(max) 221.59 422.82 T
0 10 Q
0.67 (If the two sides of the equation are equal, the low priority processes cannot be) 113.4 401.32 P
1.34 (guaranteed to get an opportunity to run. The larger the left-hand side of the) 113.4 389.32 P
0.51 (equation is compared to the right-hand side, the more time will be available to) 113.4 377.32 P
0.79 (the processes with low priority) 113.4 365.32 P
0.79 (. In practice however) 257.05 365.32 P
0.79 (, the low priority processes) 355.29 365.32 P
-0.04 (will get plenty of opportunity to run even in the case of equality) 113.4 353.32 P
-0.04 (, since the calcu-) 405.58 353.32 P
-0.15 (lation of c) 113.4 341.32 P
0 8 Q
-0.12 (Evac) 158.26 338.82 P
0 10 Q
-0.15 ( is based on extremely pessimistic assumptions. It is also very pes-) 176.32 341.32 P
0.62 (simistic to assume that the high priority process will allocate a) 113.4 329.32 P
0 8 Q
0.5 (max) 409.66 326.82 P
0 10 Q
0.62 ( bytes every) 425.51 329.32 P
(time it is invoked.) 113.4 317.32 T
1 11 Q
(5.3) 113.4 282.66 T
(Distributing the Garbage Collection W) 141.75 282.66 T
(ork) 339.94 282.66 T
0 10 Q
0.54 (The analysis of the strategy described in the previous section showed that it is) 113.4 259.32 P
0.07 (possible to schedule the garbage collection work in such a manner that the high) 113.4 247.32 P
-0.02 (priority process isn\325) 113.4 235.32 P
-0.02 (t disturbed. W) 203.68 235.32 P
-0.02 (e did, however) 269.36 235.32 P
-0.02 (, probably not use a very practi-) 335.22 235.32 P
2.7 (cal strategy due to the fact that the low priority processes are completely) 113.4 223.32 P
-0.27 (blocked for an extended period of time. In a real world application, the low prior-) 113.4 211.32 P
0.79 (ity processes must probably be able to run more smoothly than that. W) 113.4 199.32 P
0.79 (e must) 449.83 199.32 P
0.34 (then interleave the execution of the garbage collector better with the low prior-) 113.4 187.32 P
(ity processes. A simple approach to doing this is described below) 113.4 175.32 T
(.) 409.2 175.32 T
113.4 147.71 481.9 162.71 C
122.4 160.71 266.4 160.71 2 L
0.5 H
2 Z
0 X
0 K
N
1.43 2.83 593.87 841.88 C
0 9 Q
0 X
0 K
-0.04 (1. The symbols) 113.4 141.71 P
6 F
-0.03 (\351) 177.72 141.71 P
-0.03 (\371) 183.64 141.71 P
0 F
-0.04 ( in the expression mean that the enclosed value is rounded upwards to) 187.09 141.71 P
(the next integer bigger or equal to the given value.) 113.4 131.71 T
FMENDPAGE
%%EndPage: "10" 11
%%Page: "11" 11
595.3 844.7 0 FMBEGINPAGE
113.4 742.67 481.9 756.84 R
7 X
0 K
V
113.4 90.7 481.9 104.87 R
V
0 10 Q
0 X
(11) 292.1 98.21 T
-0.24 (W) 127.57 713.32 P
-0.24 (e observed in our analysis of the scheduling algorithm that if the amount of) 136.83 713.32 P
1.14 (free memory was larger than the worst-case need of the high priority process) 113.4 701.32 P
1.14 (during the evacuation phase, we were able to guarantee that the low priority) 113.4 689.32 P
0.91 (processes would run. Why not use this knowledge to do the garbage collection) 113.4 677.32 P
(work in a more slow pace?) 113.4 665.32 T
-0.01 (When the garbage collector is invoked after the high priority has blocked, we) 127.57 653.32 P
1.77 (start as before, by emptying the pointer assignment stack, evacuating refer-) 113.4 641.32 P
1.46 (enced objects if necessary) 113.4 629.32 P
1.46 (. Now) 234.38 629.32 P
1.46 (, L time units remain before the high priority) 261.4 629.32 P
0.08 (process is to be invoked again. This amount of time is to be allocated to garbage) 113.4 617.32 P
0.67 (collection and running low priority processes. T) 113.4 605.32 P
0.67 (o decide how this is to be done,) 335.25 605.32 P
0.33 (we look at how much garbage collector work remains in the worst case. W) 113.4 593.32 P
0.33 (e cal-) 457.33 593.32 P
0.41 (culate t) 113.4 581.32 P
0 8 Q
0.33 (Evac) 148.62 578.82 P
0 10 Q
0.41 (as in the previous section, but in doing so we take into account the) 169.97 581.32 P
0.43 (amount of objects already evacuated. When we have already concluded that all) 113.4 569.32 P
0.32 (live objects in Fromspace have been evacuated, t) 113.4 557.32 P
0 8 Q
0.25 (Evac) 339.77 554.82 P
0 10 Q
0.32 ( will be zero. As before, we) 357.84 557.32 P
0.2 (do not perform a \337ip until T) 113.4 545.32 P
0.2 (ospace \336lls up, i.e when S-A-E<a) 242.54 545.32 P
0 8 Q
0.16 (max) 394.38 542.82 P
0 10 Q
0.2 (. The minimum) 410.22 545.32 P
(amount of periods, c) 113.4 533.32 T
0 8 Q
(Evac) 206.5 530.82 T
0 10 Q
(, required to perform the collector work is as before:) 224.56 533.32 T
(c) 141.75 509.32 T
0 8 Q
(Evac) 146.18 506.82 T
0 10 Q
( =) 164.25 509.32 T
6 F
(\351) 175.86 509.32 T
0 F
(t) 179.7 509.32 T
0 8 Q
(Evac) 183.59 506.82 T
0 10 Q
( / L) 201.65 509.32 T
0 8 Q
(min) 216.65 506.82 T
6 10 Q
(\371) 231.16 509.32 T
0 F
0.89 (The actual number of periods,) 113.4 485.32 P
3 F
0.89 (ac) 259.07 485.32 P
3 8 Q
0.71 (Evac) 269.25 482.82 P
0 10 Q
0.89 (, remaining before we have to do a \337ip is) 287.31 485.32 P
0.23 (however given by dividing the amount of free store, F) 113.4 473.32 P
0.23 (, with the worst-case need) 360.69 473.32 P
(of the high priority process during one period) 113.4 461.32 T
0 8 Q
(1) 321.98 465.32 T
0 10 Q
(:) 326.42 461.32 T
(F = S - E) 141.75 437.32 T
0 8 Q
(max) 182.42 434.82 T
0 10 Q
( - A) 198.27 437.32 T
(ac) 141.75 413.32 T
0 8 Q
(Evac) 151.74 410.82 T
0 10 Q
( =) 169.8 413.32 T
6 11 Q
(\353) 184.2 412.82 T
0 10 Q
( F / a) 188.41 413.32 T
0 8 Q
(max) 211.75 410.82 T
6 11 Q
(\373) 231.1 412.82 T
0 10 Q
1.04 (Attempting to distribute the time t) 113.4 389.32 P
0 8 Q
0.83 (Evac) 279.82 386.82 P
0 10 Q
1.04 ( evenly over these periods gives us the) 297.88 389.32 P
(time to assign to garbage collection during the present period:) 113.4 377.32 T
(t) 141.75 353.32 T
0 8 Q
(gc) 145.63 350.82 T
0 10 Q
( = t) 153.48 353.32 T
0 8 Q
(Evac) 168.98 350.82 T
0 10 Q
( / ac) 187.04 353.32 T
0 8 Q
(Evac) 205.37 350.82 T
0 10 Q
0.89 (As long as ac) 113.4 329.32 P
0 8 Q
0.71 (Evac) 176.06 326.82 P
0 10 Q
0.89 ( is larger or equal to c) 194.12 329.32 P
0 8 Q
0.71 (Evac) 299.99 326.82 P
0 10 Q
0.89 (,we can guarantee that the system) 318.05 329.32 P
0.13 (doesn\325) 113.4 317.32 P
0.13 (t run out of memory) 141.72 317.32 P
0.13 (. The time remaining for low priority processes to run) 233.66 317.32 P
(will be:) 113.4 305.32 T
(t) 141.75 281.32 T
0 8 Q
(low) 145.63 278.82 T
0 10 Q
( = L - t) 158.37 281.32 T
0 8 Q
(gc) 189.42 278.82 T
0 10 Q
-0.26 (It may seem that we ignore the fact that the low-priority processes also allocates) 113.4 257.32 P
0.17 (memory) 113.4 245.32 P
0.17 (. The calculations we have done up to now have only taken into account) 149.86 245.32 P
0.4 (the memory allocation rate of the high priority process. The actual total alloca-) 113.4 233.32 P
0.88 (tion rate of the system is higher than that. T) 113.4 221.32 P
0.88 (o understand the solution to this) 326.64 221.32 P
0.88 (problem we must look closer on how the garbage collector cooperates with the) 113.4 209.32 P
(low priority processes.) 113.4 197.32 T
1.8 (What we in effect are doing when we calculate how to divide the time L) 127.57 185.32 P
0.44 (between the garbage collector and the low-priority processes is that we make a) 113.4 173.32 P
113.4 147.71 481.9 162.71 C
122.4 160.71 266.4 160.71 2 L
0.5 H
2 Z
0 X
0 K
N
1.43 2.83 593.87 841.88 C
0 9 Q
0 X
0 K
-0.23 (1. The symbols) 113.4 141.71 P
6 11 Q
-0.25 (\353) 179.92 141.21 P
-0.25 (\373) 184.14 141.21 P
0 9 Q
-0.23 ( in the expression mean that the enclosed value is rounded downwards) 188.36 141.71 P
(to the next integer smaller or equal to the given value.) 113.4 131.71 T
FMENDPAGE
%%EndPage: "11" 12
%%Page: "12" 12
595.3 844.7 0 FMBEGINPAGE
113.4 742.67 481.9 756.84 R
7 X
0 K
V
113.4 90.7 481.9 104.87 R
V
0 10 Q
0 X
(12) 292.1 98.21 T
0.05 (plan on how much collector work that has to be done given the current size of F) 113.4 713.32 P
0.05 (.) 479.12 713.32 P
0.77 (If the garbage collector gets behind this schedule, time is devoted to collecting) 113.4 701.32 P
0.14 (garbage. When the high priority process runs we might get behind with the col-) 113.4 689.32 P
-0.03 (lector work and we thus devote some time to catching up. When the low priority) 113.4 677.32 P
0.17 (processes run, they too might cause the collector to get behind. The low priority) 113.4 665.32 P
2.12 (processes are then suspended and the garbage collector is again invoked to) 113.4 653.32 P
1.32 (catch up. The lower limit on the size of F that the low priority processes are) 113.4 641.32 P
0.93 (never allowed to pass is c) 113.4 629.32 P
0 8 Q
0.75 (Evac) 234.87 626.82 P
0 10 Q
0.93 (\341a) 252.93 629.32 P
0 8 Q
0.75 (max) 261.27 626.82 P
0 10 Q
0.93 (, since that is the minimum amount of free) 277.12 629.32 P
-0.11 (memory needed to conclude the evacuation of Fromspace without disturbing the) 113.4 617.32 P
1.36 (high priority process. In order for the low priority processes to run smoothly) 113.4 605.32 P
1.36 (,) 479.12 605.32 P
0.81 (some time should be devoted to garbage collection even though we haven\325) 113.4 593.32 P
0.81 (t yet) 460.17 593.32 P
(reached the lower limit on F) 113.4 581.32 T
(.) 242.79 581.32 T
0.75 (Another occasion when the garbage collector is to be invoked is when there) 127.57 569.32 P
-0.26 (are no other processes at all that want to run. Instead of wasting CPU cycles, we) 113.4 557.32 P
0.01 (take the opportunity to do some garbage collection work in order to get ahead of) 113.4 545.32 P
0.45 (the schedule. This does not improve the worst-case behaviour of the algorithm,) 113.4 533.32 P
0.78 (but it is an obvious way of improving the practical, average-case, behaviour of) 113.4 521.32 P
0.43 (the system. In a real-world system, this optimization will probably lead to that) 113.4 509.32 P
0.77 (the garbage collector almost always is ahead of the schedule. The garbage col-) 113.4 497.32 P
(lector will thus intrude minimally on the low priority processes.) 113.4 485.32 T
1 12 Q
(6) 113.4 449.99 T
(Future W) 131.82 449.99 T
(ork) 183.58 449.99 T
0 10 Q
0.31 (The work described in this paper is at the time of writing in a very early stage,) 113.4 427.32 P
-0.17 (so much work remains to be done in the discussed \336eld. The very \336rst thing that) 113.4 415.32 P
0.51 (should be done is to implement the described scheduling strategy and to verify) 113.4 403.32 P
1.83 (that it actually works in practice. A prototype implementation will be made) 113.4 391.32 P
0.69 (within the Mj\277lner/Orm programming environment [M) 113.4 379.32 P
0 8 Q
0.55 (+) 370.58 383.32 P
0 10 Q
0.69 (90], making it possible) 375.42 379.32 P
0.06 (to use the system to develop real time applications. The performance of applica-) 113.4 367.32 P
0.11 (tions using the described strategy will then be investigated. A traditional incre-) 113.4 355.32 P
0.62 (mental garbage collector based on Brook\325) 113.4 343.32 P
0.62 (s algorithm is already included in the) 305.12 343.32 P
1.8 (Mj\277lner/Orm system. W) 113.4 331.32 P
1.8 (e might also get the opportunity to test the strategy) 226.93 331.32 P
(within a real commercial system in cooperation with the local process industry) 113.4 319.32 T
(.) 475.08 319.32 T
0.32 (An observation that can be made about the scheduling strategy described in) 127.57 307.32 P
0.23 (this paper is that individual worst-case delays are not as central when evaluat-) 113.4 295.32 P
1.46 (ing the algorithm as they are when using traditional, allocation-driven, vari-) 113.4 283.32 P
0.44 (ants. Since the garbage collector work is done in larger continuous chunks, the) 113.4 271.32 P
0.53 (average-case behaviour becomes more interesting. One garbage collector archi-) 113.4 259.32 P
0.25 (tecture with very good average-case performance is the generation-based archi-) 113.4 247.32 P
(tecture. This idea has been described by [LH83] and [Ung84] among others.) 113.4 235.32 T
1.04 (In collectors of this type, the heap is divided into several areas, or genera-) 127.57 223.32 P
1.41 (tions, containing objects of different ages. Since research has shown that the) 113.4 211.32 P
0.8 (mortality for objects is highest for young objects, most of the garbage collector) 113.4 199.32 P
1.73 (work can be con\336ned to the youngest generation, avoiding evacuation of the) 113.4 187.32 P
0.31 (bulk of the live objects, which are located in the older generation\050s\051. The worst-) 113.4 175.32 P
1.41 (case behaviour) 113.4 163.32 P
1.41 (, i.e worst-case delay) 182.74 163.32 P
1.41 (, of these algorithms is not as good as for) 281.36 163.32 P
0.01 (algorithms using only one generation, however) 113.4 151.32 P
0.01 (. In spite of this, it seems reason-) 328.92 151.32 P
0.64 (able that a generation-based algorithm would be suitable when scheduling the) 113.4 139.32 P
FMENDPAGE
%%EndPage: "12" 13
%%Page: "13" 13
595.3 844.7 0 FMBEGINPAGE
113.4 742.67 481.9 756.84 R
7 X
0 K
V
113.4 90.7 481.9 104.87 R
V
0 10 Q
0 X
(13) 292.1 98.21 T
-0.25 (garbage collector work according to the ideas presented in this paper) 113.4 713.32 P
-0.25 (. W) 427.6 713.32 P
-0.25 (e believe) 442.17 713.32 P
1.8 (this since the collector is running for longer continuous periods and since it) 113.4 701.32 P
2.09 (doesn\325) 113.4 689.32 P
2.09 (t rely on having small-enough individual delays. The scheduling algo-) 141.72 689.32 P
0.92 (rithm must however be modi\336ed to suit this type of collector) 113.4 677.32 P
0.92 (. An implementa-) 399.72 677.32 P
2.62 (tion would be necessary in this case also and a variant of the application) 113.4 665.32 P
1.09 (program runtime system of the Mj\277lner/Orm system already today contains a) 113.4 653.32 P
-0.06 (collector based on two generations as described in [Ben90], which would be suit-) 113.4 641.32 P
(able for experiments.) 113.4 629.32 T
-0.16 (Another \336eld of research will focus on the problem of many concurrently run-) 127.57 617.32 P
-0.12 (ning processes with high priority) 113.4 605.32 P
-0.12 (. However) 263.96 605.32 P
-0.12 (, this doesn\325) 309.56 605.32 P
-0.12 (t seem to be a too dif\336cult) 363.76 605.32 P
(problem, but it should nevertheless be investigated and formalised.) 113.4 593.32 T
-0.07 (The strategy presented in this paper take advantage of the fact that the high) 127.57 581.32 P
0.81 (priority processes of many real time systems are clock-driven, or periodic, and) 113.4 569.32 P
-0.26 (that it is possible to predict when they are to be invoked next. Knowing this, it is) 113.4 557.32 P
0.74 (possible to adapt the garbage collector parameters in such a way that the sys-) 113.4 545.32 P
0.33 (tem never runs out of memory) 113.4 533.32 P
0.33 (. If the high priority processes instead are driven) 253.66 533.32 P
0.21 (by hardware interrupts caused by external events, this will be much more dif\336-) 113.4 521.32 P
1.44 (cult to do. Future work could therefore be aimed at studying systems of this) 113.4 509.32 P
(kind and adapting the ideas presented in this paper to suit the new demands.) 113.4 497.32 T
1 12 Q
(7) 113.4 461.99 T
(Summary) 131.82 461.99 T
0 10 Q
-0.09 (Due to the high demands on real time systems to be reliable, automatic memory) 113.4 439.32 P
0.89 (management is needed. T) 113.4 427.32 P
0.89 (raditional approaches to real time garbage collection) 233.91 427.32 P
-0.23 (have, however) 113.4 415.32 P
-0.23 (, had trouble with guaranteeing short enough worst-case response) 178.7 415.32 P
0.53 (times for the system as a whole. By using knowledge of the design of real time) 113.4 403.32 P
0.15 (applications, some of the problems can be solved. This paper advocates dividing) 113.4 391.32 P
0.52 (the processes of the real time application into two groups; those with high real) 113.4 379.32 P
0.9 (time requirements and those with lower demands. Suspending garbage collec-) 113.4 367.32 P
1.18 (tion entirely when the high priority processes are running leads to extremely) 113.4 355.32 P
1.54 (good performance for these processes. The cost of this scheme is paid by the) 113.4 343.32 P
-0.09 (processes with lower priority) 113.4 331.32 P
-0.09 (, which executes in a somewhat more jerky fashion.) 245.29 331.32 P
0.41 (The fact that the high priority processes are periodic makes it easy to schedule) 113.4 319.32 P
0.66 (the garbage collector in a way such that the system do not run out of memory) 113.4 307.32 P
0.66 (.) 479.12 307.32 P
1.82 (This also implies that the garbage collector should be closely coupled to the) 113.4 295.32 P
(process scheduler in real time systems of this type.) 113.4 283.32 T
2 F
(Acknowledgements) 113.4 259.32 T
0 F
0.24 (Much of the credit of the strategy described above should be given to my super-) 113.4 247.32 P
0.72 (visor) 113.4 235.32 P
0.72 (, Boris Magnusson, who came up with the original idea and who has sup-) 135.24 235.32 P
2.24 (ported me in writing this paper) 113.4 223.32 P
2.24 (. I would also like to thank the rest of the) 268.8 223.32 P
-0.24 (members of the programming environment research group at Dept. of Computer) 113.4 211.32 P
(Science, Lund University for their support.) 113.4 199.32 T
FMENDPAGE
%%EndPage: "13" 14
%%Page: "14" 14
595.3 844.7 0 FMBEGINPAGE
113.4 742.67 481.9 756.84 R
7 X
0 K
V
113.4 90.7 481.9 104.87 R
V
0 10 Q
0 X
(14) 292.1 98.21 T
1 12 Q
(References) 113.4 711.99 T
0 9.5 Q
([Bak78]) 113.4 689.16 T
1.72 (Henry) 164.42 689.16 P
1.72 (G. Baker. List Processing in Real Time on a Serial Computer.) 194.82 689.16 P
3 F
(Communications of the ACM) 164.45 678.66 T
0 F
(, 21\0504\051:280\320294, April 1978.) 290.27 678.66 T
([Ben90]) 113.4 666.16 T
0.22 (Mats Bengtsson.) 164.42 666.16 P
3 F
0.22 (Real-Time Compacting Garbage Collection Algorithms) 240.63 666.16 P
0 F
0.22 (.) 479.27 666.16 P
1.78 (Licentiate thesis, Department of Computer Science, Lund University,) 164.45 655.66 P
(1990.) 164.45 645.16 T
([Bro84]) 113.4 632.66 T
-0.52 (Rodney) 164.42 632.66 P
-0.52 (A. Brooks. Trading Data Space for Reduced Time and Code Space) 199.75 632.66 P
0.76 (in Real-Time Garbage Collection on Stock Hardware. In) 164.45 622.16 P
3 F
0.76 (Proceedings of) 418.59 622.16 P
-0.48 (the 1984 ACM Symposium on Lisp and Functional Programming) 164.45 611.66 P
0 F
-0.48 (, August) 445.48 611.66 P
(1984.) 164.45 601.16 T
([EV92]) 113.4 588.66 T
3.05 (Steven) 164.42 588.66 P
3.05 (L. Engelstad and James) 197.12 588.66 P
3.05 (E. Vandendorpe. Automatic Storage) 314.74 588.66 P
0.86 (Management for Systems with Real Time Constraints. In) 164.45 578.16 P
3 F
0.86 (OOPSLA \32591) 425.48 578.16 P
4.7 (Workshop: Garbage Collection in Object Oriented Systems) 164.45 567.66 P
0 F
4.7 (, OOPS) 444.85 567.66 P
(Messenger, October 1992. Position paper.) 164.45 557.16 T
([LH83]) 113.4 544.66 T
0.95 (H.) 164.42 544.66 P
0.95 (Lieberman and C.) 177.61 544.66 P
0.95 (Hewitt. A Real-Time Garbage Collector Based on) 261.24 544.66 P
(the Lifetime of Objects.) 164.45 534.16 T
3 F
(Communications of the ACM) 269.39 534.16 T
0 F
(, June 1983.) 395.21 534.16 T
([M) 113.4 516.66 T
(+) 125.52 521.66 T
(90]) 131.27 516.66 T
-0.65 (Boris Magnusson et) 164.42 516.66 P
-0.65 (al. An Overview of the Mj) 252.94 516.66 P
0 10 Q
-0.68 (\277) 362.03 516.66 P
0 9.5 Q
-0.65 (lner/Orm Environment. In) 367.03 516.66 P
3 F
-0.17 (Proceedings of TOOLS 90 \050Technology of Object-Oriented Languages and) 164.45 505.99 P
(Systems\051) 164.45 495.49 T
0 F
(, June 1990.) 203.1 495.49 T
([Ung84]) 113.4 482.99 T
7.95 (David Ungar. Generation Scavenging: A Non-disruptive High) 164.42 482.99 P
1.35 (Performance Storage Reclamation Algorithm.) 164.45 472.49 P
3 F
1.35 (ACM SIGPLAN Notices) 372.51 472.49 P
0 F
1.35 (,) 479.27 472.49 P
(19\0505\051:157\320167, May 1984.) 164.45 461.99 T
FMENDPAGE
%%EndPage: "14" 15
%%Trailer
%%BoundingBox: 0 0 595.3 844.7
%%Pages: 14 1
%%DocumentFonts: NewCenturySchlbk-Roman
%%+ Helvetica-Bold
%%+ NewCenturySchlbk-Bold
%%+ NewCenturySchlbk-Italic
%%+ Helvetica-Oblique
%%+ Helvetica
%%+ Symbol
