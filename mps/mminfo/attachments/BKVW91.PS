%!PS
%%Version: 3.3.1
%%DocumentFonts: (atend)
%%Pages: (atend)
%%BoundingBox: (atend)
%%EndComments
%
% Version 3.3.1 prologue for troff files.
%

/#copies 1 store
/aspectratio 1 def
/formsperpage 1 def
/landscape false def
/linewidth .3 def
/magnification 1 def
/margin 0 def
/orientation 0 def
/resolution 720 def
/rotation 1 def
/xoffset 0 def
/yoffset 0 def

/roundpage true def
/useclippath true def
/pagebbox [0 0 612 792] def

/R  /Times-Roman def
/I  /Times-Italic def
/B  /Times-Bold def
/BI /Times-BoldItalic def
/H  /Helvetica def
/HI /Helvetica-Oblique def
/HB /Helvetica-Bold def
/HX /Helvetica-BoldOblique def
/CW /Courier def
/CO /Courier def
/CI /Courier-Oblique def
/CB /Courier-Bold def
/CX /Courier-BoldOblique def
/PA /Palatino-Roman def
/PI /Palatino-Italic def
/PB /Palatino-Bold def
/PX /Palatino-BoldItalic def
/Hr /Helvetica-Narrow def
/Hi /Helvetica-Narrow-Oblique def
/Hb /Helvetica-Narrow-Bold def
/Hx /Helvetica-Narrow-BoldOblique def
/KR /Bookman-Light def
/KI /Bookman-LightItalic def
/KB /Bookman-Demi def
/KX /Bookman-DemiItalic def
/AR /AvantGarde-Book def
/AI /AvantGarde-BookOblique def
/AB /AvantGarde-Demi def
/AX /AvantGarde-DemiOblique def
/NR /NewCenturySchlbk-Roman def
/NI /NewCenturySchlbk-Italic def
/NB /NewCenturySchlbk-Bold def
/NX /NewCenturySchlbk-BoldItalic def
/ZD /ZapfDingbats def
/ZI /ZapfChancery-MediumItalic def
/S  /S def
/S1 /S1 def
/GR /Symbol def

/inch {72 mul} bind def
/min {2 copy gt {exch} if pop} bind def

/setup {
	counttomark 2 idiv {def} repeat pop

	landscape {/orientation 90 orientation add def} if
	/scaling 72 resolution div def
	linewidth setlinewidth
	1 setlinecap

	pagedimensions
	xcenter ycenter translate
	orientation rotation mul rotate
	width 2 div neg height 2 div translate
	xoffset inch yoffset inch neg translate
	margin 2 div dup neg translate
	magnification dup aspectratio mul scale
	scaling scaling scale

	addmetrics
	0 0 moveto
} def

/pagedimensions {
	useclippath userdict /gotpagebbox known not and {
		/pagebbox [clippath pathbbox newpath] def
		roundpage currentdict /roundpagebbox known and {roundpagebbox} if
	} if
	pagebbox aload pop
	4 -1 roll exch 4 1 roll 4 copy
	landscape {4 2 roll} if
	sub /width exch def
	sub /height exch def
	add 2 div /xcenter exch def
	add 2 div /ycenter exch def
	userdict /gotpagebbox true put
} def

/addmetrics {
	/Symbol /S null Sdefs cf
	/Times-Roman /S1 StandardEncoding dup length array copy S1defs cf
} def

/pagesetup {
	/page exch def
	currentdict /pagedict known currentdict page known and {
		page load pagedict exch get cvx exec
	} if
} def

/decodingdefs [
	{counttomark 2 idiv {y moveto show} repeat}
	{neg /y exch def counttomark 2 idiv {y moveto show} repeat}
	{neg moveto {2 index stringwidth pop sub exch div 0 32 4 -1 roll widthshow} repeat}
	{neg moveto {spacewidth sub 0.0 32 4 -1 roll widthshow} repeat}
	{counttomark 2 idiv {y moveto show} repeat}
	{neg setfunnytext}
] def

/setdecoding {/t decodingdefs 3 -1 roll get bind def} bind def

/w {neg moveto show} bind def
/m {neg dup /y exch def moveto} bind def
/done {/lastpage where {pop lastpage} if} def

/f {
	dup /font exch def findfont exch
	dup /ptsize exch def scaling div dup /size exch def scalefont setfont
	linewidth ptsize mul scaling 10 mul div setlinewidth
	/spacewidth ( ) stringwidth pop def
} bind def

/changefont {
	/fontheight exch def
	/fontslant exch def
	currentfont [
		1 0
		fontheight ptsize div fontslant sin mul fontslant cos div
		fontheight ptsize div
		0 0
	] makefont setfont
} bind def

/sf {f} bind def

/cf {
	dup length 2 idiv
	/entries exch def
	/chtab exch def
	/newencoding exch def
	/newfont exch def

	findfont dup length 1 add dict
	/newdict exch def
	{1 index /FID ne {newdict 3 1 roll put}{pop pop} ifelse} forall

	newencoding type /arraytype eq {newdict /Encoding newencoding put} if

	newdict /Metrics entries dict put
	newdict /Metrics get
	begin
		chtab aload pop
		1 1 entries {pop def} for
		newfont newdict definefont pop
	end
} bind def

%
% A few arrays used to adjust reference points and character widths in some
% of the printer resident fonts. If square roots are too high try changing
% the lines describing /radical and /radicalex to,
%
%	/radical	[0 -75 550 0]
%	/radicalex	[-50 -75 500 0]
%
% Move braceleftbt a bit - default PostScript character is off a bit.
%

/Sdefs [
	/bracketlefttp		[201 500]
	/bracketleftbt		[201 500]
	/bracketrighttp		[-81 380]
	/bracketrightbt		[-83 380]
	/braceleftbt		[203 490]
	/bracketrightex		[220 -125 500 0]
	/radical		[0 0 550 0]
	/radicalex		[-50 0 500 0]
	/parenleftex		[-20 -170 0 0]
	/integral		[100 -50 500 0]
	/infinity		[10 -75 730 0]
] def

/S1defs [
	/underscore		[0 80 500 0]
	/endash			[7 90 650 0]
] def
%
% Tries to round clipping path dimensions, as stored in array pagebbox, so they
% match one of the known sizes in the papersizes array. Lower left coordinates
% are always set to 0.
%

/roundpagebbox {
    7 dict begin
	/papersizes [8.5 inch 11 inch 14 inch 17 inch] def

	/mappapersize {
		/val exch def
		/slop .5 inch def
		/diff slop def
		/j 0 def
		0 1 papersizes length 1 sub {
			/i exch def
			papersizes i get val sub abs
			dup diff le {/diff exch def /j i def} {pop} ifelse
		} for
		diff slop lt {papersizes j get} {val} ifelse
	} def

	pagebbox 0 0 put
	pagebbox 1 0 put
	pagebbox dup 2 get mappapersize 2 exch put
	pagebbox dup 3 get mappapersize 3 exch put
    end
} bind def

%%EndProlog
%%BeginSetup
mark
/rotation 1 def
/gotpagebbox true def
/linewidth 0.5 def
/xoffset 0 def
/yoffset 0 def
/#copies 1 store
/magnification 1 def
%%FormsPerPage: 1
/formsperpage 1 def
%%Patch from lp
%%EndPatch from lp
/landscape false def
/resolution 720 def
setup
2 setdecoding
%%EndSetup
%%Page: 1 1
%%PageBoundingBox: (atend)
/saveobj save def
mark
1 pagesetup
12 B f
(An Elementary Cost Model for C)5 1702 1 2029 1230 t
10 I f
(Jon Bentley)1 468 1 2646 1470 t
(Brian Kernighan)1 681 1 2539 1590 t
(Chris Van Wyk)2 605 1 2577 1710 t
10 R f
(AT&T Bell Laboratories)2 993 1 2383 1890 t
(Murray Hill, NJ 07974)3 916 1 2422 2010 t
10 I f
(ABSTRACT)2643 2390 w
10 R f
( costs of primitive)3 743(When software performance matters, it is important to know the)9 2607 2 1330 2650 t
( of simple programs for getting)5 1276( paper describes a series)4 991( This)1 235(operations on your system.)3 1098 4 1080 2770 t
( first program can be typed by a reader in a few min-)12 2117( The)1 206(ballpark performance estimates.)2 1277 3 1080 2890 t
( per-)1 185( describe the results of running the final program on machines ranging from)12 3040(utes. We)1 375 3 1080 3010 t
(sonal computers to supercomputers.)3 1437 1 1080 3130 t
10 B f
(Introduction)720 3490 w
10 R f
( now you know about how much money)7 1621( bet that right)3 539( We'd)1 272(People know what important things cost.)5 1638 4 970 3646 t
( miles per gallon your car averages.)6 1421(you have in your wallet, how much a gallon of gas costs, and how many)14 2899 2 720 3766 t
( you)1 184(You probably don't know the exact answers to these questions, but you can get close enough so that)17 4136 2 720 3886 t
(don't often end up washing dishes at service stations.)8 2128 1 720 4006 t
( colleague wrote a set)4 876( A)1 125( you know the cost of operations on your machine?)9 2071(But as a programmer, do)4 998 4 970 4162 t
( noticed that it seemed to run pretty slowly,)8 1807( users)1 240( Several)1 359(of functions to maintain balanced search trees.)6 1914 4 720 4282 t
(and finally one doubled the speed of the functions merely by changing occurrences of)13 3540 1 720 4402 t
10 CW f
(i%4)4294 4402 w
10 R f
(to)4508 4402 w
10 CW f
(i&3)4620 4402 w
10 R f
(. Our)1 240 1 4800 4402 t
(colleague had had no idea that, on his particular system, the)10 2405 1 720 4522 t
10 CW f
(%)3152 4522 w
10 R f
( of magnitude)2 557(modulus operator was an order)4 1244 2 3239 4522 t
(slower than the)2 618 1 720 4642 t
10 CW f
(&)1367 4642 w
10 R f
( primi-)1 280( every now and then it pays to know the cost of)11 1933( Evidently,)1 468(logical AND operator.)2 903 4 1456 4642 t
(tive operations.)1 616 1 720 4762 t
( an)1 130( Half)1 238( performance of your machine.)4 1276(This paper will help you to get an approximate idea of the)11 2426 4 970 4918 t
( within)1 282(hour from now, you'll be able to run an experiment that will tell you the cost of a given operation to)20 4038 2 720 5038 t
( accuracy is good enough for most purposes, and it's usually pretty hard to get much)15 3613( That)1 249(25 percent.)1 458 3 720 5158 t
(closer.)720 5278 w
( this paper explain in more detail why it is sometimes handy to know the perfor-)15 3265(The first sections of)3 805 2 970 5434 t
( sections)1 351( Later)1 264( of these issues.)3 639(mance of your machine, and observes how unaware many programmers are)10 3066 4 720 5554 t
( all the examples are in the C program-)8 1574( Although)1 430( costs.)1 252(then turn to a series of programs that estimate these)9 2064 4 720 5674 t
(ming language on UNIX)3 1023 1 720 5794 t
10 S f
(\322)1743 5794 w
10 R f
(systems, the techniques apply)3 1221 1 1858 5794 t
10 I f
(mutatis mutandis)1 698 1 3115 5794 t
10 R f
( and)1 179(to many other languages)3 1012 2 3849 5794 t
(systems.)720 5914 w
10 B f
(Who Needs to Know?)3 925 1 720 6154 t
10 R f
( a randomly)2 491( deals with)2 445( It)1 117(Here's a short code fragment that is typical of many simulation programs.)11 3017 4 970 6310 t
(generated value,)1 657 1 720 6430 t
10 CW f
(v)1406 6430 w
10 R f
(, between 0 and)3 638 1 1466 6430 t
10 CW f
(MAXINT-1)2133 6430 w
10 R f
( goal is to add)4 577(. The)1 234 2 2613 6430 t
10 CW f
(v)3453 6430 w
10 R f
( list in bin)3 413(to the start of the linked)5 972 2 3542 6430 t
10 CW f
(b)4955 6430 w
10 R f
(,)5015 6430 w
(where)720 6550 w
10 CW f
(b)1002 6550 w
10 R f
(is computed to be proportional to)5 1400 1 1101 6550 t
10 CW f
(v)2540 6550 w
10 R f
( code allocates a)3 701(. The)1 245 2 2600 6550 t
10 CW f
(newnode)3586 6550 w
10 R f
(, sets its)2 350 1 4006 6550 t
10 CW f
(val)4396 6550 w
10 R f
(and)4616 6550 w
10 CW f
(next)4800 6550 w
10 R f
(fields, and changes)2 762 1 720 6670 t
10 CW f
(bin[b])1507 6670 w
10 R f
(to point to the new node:)5 997 1 1892 6670 t
cleartomark
showpage
saveobj restore
%%PageBoundingBox: 61 109 514 691
%%EndPage: 1 1
%%Page: 2 2
%%PageBoundingBox: (atend)
/saveobj save def
mark
2 pagesetup
10 R f
(- 2 -)2 166 1 2797 480 t
9 CW f
(v = rand\(\) % MAXINT;)4 1080 1 1008 830 t
(b = \(\(float\) NBINS / MAXINT\) * v;)7 1782 1 1008 940 t
(newnode = \(nodep\) malloc\(sizeof\(struct node\)\);)4 2484 1 1008 1050 t
(newnode->val = v;)2 918 1 1008 1160 t
(newnode->next = bin[b];)2 1242 1 1008 1270 t
(bin[b] = newnode;)2 918 1 1008 1380 t
10 R f
(\(Listing 3 contains the complete program.\))5 1709 1 720 1560 t
( to think about two questions concerning the performance of this code on)12 3002(Before you read on, pause)4 1068 2 970 1716 t
( it take 10 microseconds, or)5 1149( Does)1 264( this fragment take?)3 817( how much time does)4 895( First,)1 269(your favorite machine.)2 926 6 720 1836 t
( to your guess, how many times could you execute that)10 2325( According)1 484( millisecond?)1 549(100 microseconds, or a)3 962 4 720 1956 t
(loop in a second?)3 696 1 720 2076 t
( code turned out to be the bottleneck of your)9 1790( is, if this)3 376( That)1 234(Second, what is the hot spot of that code?)8 1670 4 970 2232 t
( relative costs of opera-)4 968( The)1 213(program, what operation would you attack first in an attempt to speed it up?)13 3139 3 720 2352 t
( fragment uses several)3 904( This)1 233( from system to system.)4 973(tions vary dramatically from language to language and)7 2210 4 720 2472 t
( number generation, modular arithmetic, floating)5 2030(operations that are sometimes real cycle hogs: random)7 2290 2 720 2592 t
( do you think would be the hog on your system?)10 1927( What)1 266(point, and memory allocation.)3 1202 3 720 2712 t
( to these questions on your system,)6 1457(We'll soon see ways that you can quickly compute the answers)10 2613 2 970 2868 t
( before you read)3 653( But)1 196(and we'll survey answers for a variety of systems, ranging from a PC to a Cray X-MP.)16 3471 3 720 2988 t
(our answers, take a minute to think about your own guesses.)10 2408 1 720 3108 t
10 B f
(Who Does Know?)2 767 1 720 3348 t
10 R f
( The)1 216( to answer similar questions for our local machines, we had two big surprises.)13 3247(When we tried)2 607 3 970 3504 t
( how far our predictions were)5 1177( second surprise was)3 826( The)1 206(first was how hard it was to think about these issues.)10 2111 4 720 3624 t
( began to worry that we might be really ignorant.)9 1958( We)1 188(from the results of our experiments.)5 1431 3 720 3744 t
( that really matters)3 749(Everyone knows that it is silly to worry about ignorance on an absolute scale \320 all)15 3321 2 970 3900 t
( therefore devised a simple test of cost guessing)8 1956( We)1 194( you.)1 206(is how ignorant you are relative to those around)8 1964 4 720 4020 t
( operations, function calls, and standard)5 1659( chose a few representative computations: arithmetic)6 2179(ability. We)1 482 3 720 4140 t
( placed each one in a tight loop \320)8 1410( We)1 193( particular operations are shown in Table 1.)7 1770( The)1 210(library operations.)1 737 5 720 4260 t
( quiz was to guess the average cost)7 1422( The)1 208(all by itself, with no other code \320 and executed it a million times.)13 2690 3 720 4380 t
(of each operation.)2 717 1 720 4500 t
( is fair to describe them as experienced)7 1575( It)1 114( Bell Labs colleagues with this quiz.)6 1470(We attacked six of our)4 911 4 970 4656 t
(C programmers: each had used C for at least 10 years, and the six had built ten C compilers among them.)20 4320 1 720 4776 t
(Table 1 shows their guesses on the performance of an ANSI C compiler on a DEC VAX-8550 \(a machine)18 4320 1 720 4896 t
(they all use frequently\), together with the experimental results.)8 2507 1 720 5016 t
( had a pretty accurate model for the simple)8 1755( victims all)2 455( Our)1 210(There are a lot of messages in that table.)8 1650 4 970 5172 t
( operations, however, the guesses wandered further)6 2050( we moved to more substantial)5 1234( As)1 163(arithmetic operations.)1 873 4 720 5292 t
( from each other.)3 750( of the guesses were two orders of magnitude away)9 2240( Some)1 300(and further from reality.)3 1030 4 720 5412 t
( The)1 206(Although some victims performed better than others, each one was off by a factor of five at least once.)18 4114 2 720 5532 t
( experienced and smart programmers didn't have a good cost)9 2589(real message, though, was that even very)6 1731 2 720 5652 t
(model for C operations.)3 949 1 720 5772 t
10 B f
(A Simple Program)2 799 1 720 6012 t
10 R f
( a trivial program that)4 887(If you want to estimate the cost for floating point division, for instance, here is)14 3183 2 970 6168 t
(does the job:)2 511 1 720 6288 t
cleartomark
showpage
saveobj restore
%%PageBoundingBox: 61 147 514 764
%%EndPage: 2 2
%%Page: 3 3
%%PageBoundingBox: (atend)
/saveobj save def
mark
3 pagesetup
10 R f
(- 3 -)2 166 1 2797 480 t
9 S f
(_ _______________________________________________________________________________________)1 3919 1 920 905 t
(_ _______________________________________________________________________________________)1 3919 1 920 925 t
9 R f
(O)1390 1025 w
7 R f
(PERATION)1455 1025 w
9 R f
(V)2654 1025 w
7 R f
(ICTIMS')2719 1025 w
9 R f
(G)3002 1025 w
7 R f
(UESSES)3067 1025 w
9 R f
(\(I)3343 1025 w
7 R f
(N)3403 1025 w
9 R f
(M)3476 1025 w
7 R f
(ICROSECONDS)3556 1025 w
9 R f
(\) O)1 479 1 4041 1025 t
7 R f
(BSERVED)4520 1025 w
9 S f
(_ _______________________________________________________________________________________)1 3919 1 920 1045 t
9 CW f
(i1 = i2 + i3)4 648 1 920 1155 t
9 R f
( .2)1 428( .25 .25 1)3 1081( .2)1 293(.2 .2)1 451 4 2495 1155 t
9 CW f
(i1 = i2 * i3)4 648 1 920 1265 t
9 R f
( .5)1 428( 2)1 428( 1)1 270( .25)1 383( .7)1 293(.6 .5)1 451 6 2495 1265 t
9 CW f
(i1 = i2 / i3)4 648 1 920 1375 t
9 R f
( 2.3)1 428( 4)1 428( .5 3)2 653( 1.5)1 293(1 .5)1 496 5 2450 1375 t
9 CW f
(i1 = i2 % i3)4 648 1 920 1485 t
9 R f
( 3.0)1 428( 4)1 315( 4.25)1 496( 1)1 270( 1.5)1 293(1 .5)1 496 6 2450 1485 t
9 S f
(_ _______________________________________________________________________________________)1 3919 1 920 1505 t
9 CW f
(f1 = f2 + f3)4 648 1 920 1615 t
9 R f
( .4)1 428( 6)1 428( .5 1)2 653( .6)1 361(.8 1)1 383 5 2495 1615 t
9 CW f
(f1 = f2 * f3)4 648 1 920 1725 t
9 R f
( .6)1 428( 10)1 428( 3)1 315( .5)1 406( 2)1 293(1.2 2)1 428 6 2450 1725 t
9 CW f
(f1 = f2 / f3)4 648 1 920 1835 t
9 R f
( 1.6)1 428( 12)1 428( 4)1 315( .5)1 406( 2)1 293(1.2 5)1 428 6 2450 1835 t
9 S f
(_ _______________________________________________________________________________________)1 3919 1 920 1855 t
9 CW f
(i1 = sum1\(i2\))2 702 1 920 1965 t
9 R f
( 2.0)1 428( 34)1 428( 10)1 383( 15)1 338( 10)1 293(2 2)1 428 6 2450 1965 t
9 CW f
(i1 = sum2\(i2, i3\))3 918 1 920 2075 t
9 R f
( 2.2)1 428( 36)1 360( 10.5)1 451( 20)1 338( 10)1 293(2 2)1 428 6 2450 2075 t
9 CW f
(i1 = sum3\(i2, i3, i4\))4 1134 1 920 2185 t
9 R f
( 2.6)1 428( 38)1 428( 11)1 383( 25)1 338( 10)1 293(2 2)1 428 6 2450 2185 t
9 S f
(_ _______________________________________________________________________________________)1 3919 1 920 2205 t
9 CW f
(fprintf\(fp, "%d\\n", i\))2 1188 1 920 2315 t
9 R f
( 54)1 360( 200 1200)2 811( 100)1 334( -)1 297(10 50)1 473 5 2405 2315 t
9 CW f
(fscanf\(fp, "%d", &i1\))2 1134 1 920 2425 t
9 R f
( 70)1 360( 200 1000)2 811( 100)1 334( -)1 297(10 200)1 473 5 2405 2425 t
9 S f
(_ _______________________________________________________________________________________)1 3919 1 920 2445 t
9 CW f
(free\(malloc\(8\)\))920 2555 w
9 R f
( 22)1 360( 400)1 428( 100)1 383( 200)1 334( -)1 297(5 20)1 428 6 2450 2555 t
9 CW f
(i1 = atoi\("12345"\))2 972 1 920 2665 t
9 R f
( 15)1 360( 50 200)2 811( 50)1 338( 40)1 293(9 10)1 428 5 2450 2665 t
9 CW f
(sscanf\("123.45","%f",&f1\))920 2775 w
9 R f
( 159)1 360( 200 1200)2 811( 60)1 334( -)1 297(14 2000)1 473 5 2405 2775 t
9 S f
( \347)1 -2502(_ _______________________________________________________________________________________)1 3919 2 920 2795 t
(\347)2337 2725 w
(\347)2337 2635 w
(\347)2337 2545 w
(\347)2337 2455 w
(\347)2337 2365 w
(\347)2337 2275 w
(\347)2337 2185 w
(\347)2337 2095 w
(\347)2337 2005 w
(\347)2337 1915 w
(\347)2337 1825 w
(\347)2337 1735 w
(\347)2337 1645 w
(\347)2337 1555 w
(\347)2337 1465 w
(\347)2337 1375 w
(\347)2337 1285 w
(\347)2337 1195 w
(\347)2337 1105 w
(\347)2337 1015 w
(\347)4387 2795 w
(\347)4387 2725 w
(\347)4387 2635 w
(\347)4387 2545 w
(\347)4387 2455 w
(\347)4387 2365 w
(\347)4387 2275 w
(\347)4387 2185 w
(\347)4387 2095 w
(\347)4387 2005 w
(\347)4387 1915 w
(\347)4387 1825 w
(\347)4387 1735 w
(\347)4387 1645 w
(\347)4387 1555 w
(\347)4387 1465 w
(\347)4387 1375 w
(\347)4387 1285 w
(\347)4387 1195 w
(\347)4387 1105 w
(\347)4387 1015 w
10 B f
(Table 1.)1 345 1 2335 3030 t
10 R f
(Results of a quiz.)3 694 1 2730 3030 t
9 CW f
(main\(\))1008 3320 w
({)1008 3430 w
( n;)1 162(int i,)1 432 2 1224 3540 t
(float f1, f2, f3;)3 918 1 1224 3650 t
(n = 1000000;)2 648 1 1224 3760 t
(f2 = f3 = 5.0;)4 756 1 1224 3870 t
(for \(i = 0; i < n; i++\))7 1242 1 1224 3980 t
(f1 = f2 / f3;)4 702 1 1440 4090 t
(})1008 4200 w
10 R f
( time programs with the)4 967(On UNIX systems, it is easy to)6 1253 2 720 4380 t
10 CW f
(time)2968 4380 w
10 R f
( your system doesn't have such)5 1266(command. If)1 538 2 3236 4380 t
( program takes 35 seconds to do a million floating)9 2007( the)1 148( If)1 117(a command, a wristwatch will do nicely in a pinch.)9 2048 4 720 4500 t
( readers will notice that)4 961( \(Careful)1 388( one costs about 35 microseconds.)5 1395(point divides, then you know that each)6 1576 4 720 4620 t
( in the 35 microseconds, and will want to run the program once on)13 2678(we have also included the loop overhead)6 1642 2 720 4740 t
(the null loop to subtract out that time.\))7 1539 1 720 4860 t
( tight loop)2 420( The)1 209( that there are many ways to be misled by such a simple experiment.)13 2781(Beware, though,)1 660 4 970 5016 t
( be in any caches your machine might have \320 an arbitrary division)12 2732(guarantees that both code and data will)6 1588 2 720 5136 t
( a smart compiler might notice that the expression)8 2054( Or)1 162(operation in a real program might take a lot longer.)9 2104 3 720 5256 t
( the)1 152(doesn't change in the loop, and therefore push the division outside the loop and then not even execute)17 4168 2 720 5376 t
( though, this experi-)3 814( Fortunately,)1 539( many.)1 275( so on and so on \320 the roads to disaster are)11 1761( And)1 224(empty loop body.)2 707 6 720 5496 t
(ment gives useful approximations for many compilers and machines.)8 2755 1 720 5616 t
10 B f
(Automating the Job)2 850 1 720 5856 t
10 R f
( find the cost of a few operations, it's easy to modify a tiny program with a text editor)18 3498(If you want to)3 572 2 970 6012 t
( as soon as you time more than a few operations, it pays to have a pro-)16 2857( But)1 198(and run it by hand a few times.)7 1265 3 720 6132 t
( 1 shows)2 352( Listing)1 335(gram do the work.)3 735 3 720 6252 t
10 CW f
(mintime.c)2168 6252 w
10 R f
( produces a shorter version)4 1083( It)1 113(, a minimal timing program.)4 1136 3 2708 6252 t
( we see the cost of five experiments measured in the)10 2134( each operation,)2 646( For)1 195(of the output shown in Listing 2.)6 1345 4 720 6372 t
( cost in)2 307(basic system time unit of ``clicks'' \(1/60th of a second on this machine\), followed by the average)16 4013 2 720 6492 t
(microseconds.)720 6612 w
( the)1 151( is the part of)4 539( This)1 231(The first dozen lines in Listing 1 give us access to the system timing routines.)14 3149 4 970 6768 t
(program that varies most from system to system \320 the)9 2205 1 720 6888 t
10 CW f
(time)2951 6888 w
10 R f
( more)1 230(function gives less accurate times but is)6 1593 2 3217 6888 t
( timing experi-)2 610( middle part of the program contains the two macros that are the heart of the)15 3146(portable. The)1 564 3 720 7008 t
(ment:)720 7128 w
10 CW f
(loop1)979 7128 w
10 R f
(runs a single experiment, while)4 1275 1 1310 7128 t
10 CW f
(loop)2616 7128 w
10 R f
(performs a group of five and prints out the operation)9 2153 1 2887 7128 t
( are macros rather than functions because we pass executable code to them as)13 3101( These)1 289(name and average cost.)3 930 3 720 7248 t
cleartomark
showpage
saveobj restore
%%PageBoundingBox: 61 51 514 764
%%EndPage: 3 3
%%Page: 4 4
%%PageBoundingBox: (atend)
/saveobj save def
mark
4 pagesetup
10 R f
(- 4 -)2 166 1 2797 480 t
9 CW f
(/* mintime.c -- minimal timing program */)6 2214 1 1008 1010 t
(#include <stdio.h>)1 972 1 1008 1230 t
(#include <sys/types.h>)1 1188 1 1008 1340 t
(#include <sys/times.h>)1 1188 1 1008 1450 t
(#define CLICKSPERSEC 60)2 1242 1 1008 1560 t
(int jobclicks\(\))1 810 1 1008 1780 t
( tms buffer;)2 648({ struct)1 540 2 1008 1890 t
(times\(&buffer\);)1224 2000 w
(return \(int\) \(buffer.tms_utime +)3 1728 1 1224 2110 t
(buffer.tms_stime\);)1440 2220 w
(})1008 2330 w
(#define loop1\(CODE\) start = jobclicks\(\); \\)5 2268 1 1008 2550 t
(for \(i = 0; i < n; i++\) { CODE; } \\)11 1890 1 1224 2660 t
(clicks = jobclicks\(\) - start; \\)5 1674 1 1224 2770 t
(sumclicks += clicks; \\)3 1188 1 1224 2880 t
(printf\("%5d", clicks\);)1 1188 1 1224 2990 t
(#define loop\(CODE\) sumclicks = 0; \\)5 1890 1 1008 3210 t
( #CODE\); \\)2 540(printf\(" %-15s",)1 918 2 1224 3320 t
(loop1\(CODE\) loop1\(CODE\) loop1\(CODE\) \\)3 1998 1 1224 3430 t
(loop1\(CODE\) loop1\(CODE\) \\)2 1350 1 1224 3540 t
(printf\("%10.2f\\n", sumclicks * 1.0e6 / \\)5 2160 1 1224 3650 t
(\(CLICKSPERSEC * n * 5\)\);)4 1296 1 1440 3760 t
(main\(\))1008 3980 w
( i, i1, i2, i3;)4 810({ int n,)2 648 2 1008 4090 t
( sumclicks, start;)2 972(int clicks,)1 702 2 1224 4200 t
(n = 100000;)2 594 1 1224 4310 t
(printf\("Null Loop\\n"\);)1 1188 1 1224 4420 t
(loop\({}\))1332 4530 w
(printf\("Int Operations\\n"\);)1 1458 1 1224 4640 t
(i2 = i3 = 5;)4 648 1 1332 4750 t
(loop\(i1 = i2 + i3\))4 972 1 1332 4860 t
(loop\(i1 = i2 - i3\))4 972 1 1332 4970 t
(loop\(i1 = i2 * i3\))4 972 1 1332 5080 t
(loop\(i1 = i2 / i3\))4 972 1 1332 5190 t
(})1008 5300 w
10 B f
(Listing 1.)1 401 1 2135 5540 t
10 R f
(A simple timing program.)3 1039 1 2586 5540 t
(parameters. The)1 667 1 720 5840 t
10 CW f
(main)1412 5840 w
10 R f
(function then invokes the desired experiments.)5 1864 1 1677 5840 t
( has the same basic structure as)6 1277( It)1 116( in Listing 4.)3 527(The complete program is)3 1013 4 970 5996 t
10 CW f
(mintime.c)3933 5996 w
10 R f
(but adds sev-)2 537 1 4503 5996 t
( the null loop is sub-)5 865( instance, the average number of microseconds taken by)8 2316( For)1 199(eral bells and whistles.)3 940 4 720 6116 t
( changes are cosmetic, such)4 1129( Some)1 284( \(but the raw time in clicks is still printed\).)9 1759(tracted from later operations)3 1148 4 720 6236 t
( inner)1 237( changes are invisible: we added some ``dummy'' operations between the)10 3018( Some)1 286(as titles and labels.)3 779 4 720 6356 t
( also added a simple test for statistical robust-)8 1866( We)1 193( attempt to avoid identical cache alignments.)6 1814(loops in an)2 447 4 720 6476 t
( only substantial change, however, is a larger set of operations.)10 2509( The)1 205(ness, to which we'll return shortly.)5 1390 3 720 6596 t
( first line shows that each exe-)6 1226( The)1 207( timing program on a VAX-8550.)5 1353(Listing 2 gives the output of the)6 1284 4 970 6752 t
( 28 ticks, or slightly less than half a second; the average cost of a sin-)15 2813(cution of the null loop required 27 or)7 1507 2 720 6872 t
( all subsequent times.)3 897( time is subtracted from)4 993( That)1 244(gle iteration of the null loop was 0.46 microseconds.)8 2186 4 720 6992 t
( the range of values is greater than some fixed multiple)10 2196(The program prints a question mark after the mean if)9 2124 2 720 7112 t
( marks next to)3 608( 2 contains several question)4 1152( Listing)1 346(of the mean value \(we found that 40% worked well\).)9 2214 4 720 7232 t
cleartomark
showpage
saveobj restore
%%PageBoundingBox: 61 53 514 764
%%EndPage: 4 4
%%Page: 5 5
%%PageBoundingBox: (atend)
/saveobj save def
mark
5 pagesetup
10 R f
(- 5 -)2 166 1 2797 480 t
( a)1 86(dubious values: in some, an outlier \(probably another user on our time-shared system\) contaminated)13 4234 2 720 840 t
( question marks point out spuri-)5 1300( The)1 210( clicks for statistical accuracy.)4 1225(value, while in others there are too few)7 1585 4 720 960 t
(ous values, but be sure to study the raw clicks before placing too much faith in the summary values.)18 3989 1 720 1080 t
( integer operations use the)4 1084( The)1 214( further explanation.)2 830(Several of the operations require)4 1334 4 970 1236 t
10 CW f
(int)4466 1236 w
10 R f
(variables)4680 1236 w
10 CW f
(i1)720 1356 w
10 R f
(,)840 1356 w
10 CW f
(i2)892 1356 w
10 R f
(, and)1 196 1 1012 1356 t
10 CW f
(i3)1234 1356 w
10 R f
(; the float operations use the)5 1134 1 1354 1356 t
10 CW f
(float)2514 1356 w
10 R f
(variables)2840 1356 w
10 CW f
(f1)3226 1356 w
10 R f
(,)3346 1356 w
10 CW f
(f2)3397 1356 w
10 R f
(, and)1 195 1 3517 1356 t
10 CW f
(f3)3738 1356 w
10 R f
( the tests of control struc-)5 1023(. In)1 159 2 3858 1356 t
(tures,)720 1476 w
10 CW f
(sum3)976 1476 w
10 R f
( the)1 160( In)1 146( is a test of function call overhead.)7 1466( it)1 119( arguments)1 454(returns the sum of its three integer)6 1442 6 1253 1476 t
(input/output section, the string)3 1238 1 720 1596 t
10 CW f
(sdn)1988 1596 w
10 R f
(is an abbreviation for)3 866 1 2198 1596 t
10 CW f
("%d\\n")3094 1596 w
10 R f
( some preprocessors had trou-)4 1213(; because)1 373 2 3454 1596 t
( as)1 155(ble passing strings as arguments, we use abbreviations such)8 2751 2 720 1716 t
10 CW f
(s0123456789)3698 1716 w
10 R f
(for the string)2 610 1 4430 1716 t
10 CW f
("0123456789")720 1836 w
10 R f
( the malloc section, the)4 952(. In)1 165 2 1440 1836 t
10 CW f
(push)2589 1836 w
10 R f
( is a)2 173(function's primary operation)2 1162 2 2861 1836 t
10 CW f
(malloc)4227 1836 w
10 R f
(call, while)1 422 1 4618 1836 t
10 CW f
(pop)720 1956 w
10 R f
(uses a)1 241 1 925 1956 t
10 CW f
(free)1191 1956 w
10 R f
(call.)1456 1956 w
( chose to)2 357( We)1 189( for this program was to prepare a one-page summary of machine performance.)12 3172(Our goal)1 352 4 970 2112 t
( of our programs, but we have ignored many important operations and)11 2889(profile a set of tasks that is typical)7 1431 2 720 2232 t
( might want to measure a set of operations that is more typical for your applications.)15 3368( You)1 222(library functions.)1 688 3 720 2352 t
10 B f
(Using the Data)2 633 1 720 2592 t
10 R f
( is the frag-)3 490( Here)1 254(With these numbers in hand, we can return to the code fragment we saw earlier.)14 3326 3 970 2748 t
( explicitly compute the cost)4 1113( we didn't)2 411( Although)1 431(ment, with the cost in microseconds below each operation.)8 2365 4 720 2868 t
(of pointer operations, we'll assume that the cost is the same as array accessing.)13 3152 1 720 2988 t
9 CW f
(v = rand\(\) % MAXINT;)4 1080 1 1008 3158 t
(4.5 3)1 378 1 1278 3268 t
(b = \(\(float\) NBINS / MAXINT\) * v;)7 1782 1 1008 3378 t
( .6)1 540(.6 1.7)1 756 2 1386 3488 t
(newnode = \(nodep\) malloc\(sizeof\(struct node\)\);)4 2484 1 1008 3598 t
(22)1980 3708 w
(newnode->val = v;)2 918 1 1008 3818 t
(.3 .2)1 540 1 1386 3928 t
(newnode->next = bin[b];)2 1242 1 1008 4038 t
(.3 .5)1 756 1 1386 4148 t
(bin[b] = newnode;)2 918 1 1008 4258 t
(.5)1170 4368 w
10 R f
( the program)2 536( Running)1 407(If we sum the costs of the operations, we get a total of 34.2 microseconds.)14 3127 3 970 4584 t
(showed that each iteration required 32 microseconds, but agreement to within ten percent is just luck.)15 4052 1 720 4704 t
(These operation costs also show the hot spot clearly \320 using)10 2642 1 970 4860 t
10 CW f
(malloc)3658 4860 w
10 R f
(to allocate a new node)4 976 1 4064 4860 t
( can reduce that time with a standard trick: allocate all)10 2292( We)1 201(requires 22 of the 34 microseconds.)5 1490 3 720 4980 t
10 CW f
(NVALS)4740 4980 w
10 R f
( call to)2 276(nodes with a single)3 772 2 720 5100 t
10 CW f
(malloc)1795 5100 w
10 R f
( we precede the loop)4 833( Thus)1 252(, and then parcel out the nodes one at a time.)10 1800 3 2155 5100 t
(with this statement)2 756 1 720 5220 t
9 CW f
(nextnode = \(nodep\) malloc\(NVALS * sizeof\(struct node\)\);)6 2970 1 1008 5390 t
10 R f
(and then allocate each node with)5 1305 1 720 5570 t
9 CW f
(newnode = nextnode++;)2 1134 1 1008 5740 t
10 R f
( predict that the modified code will run in 12.6 microseconds; we measured it at 12)15 3543(The estimates now)2 777 2 720 5920 t
( code further, we should)4 967( we want to speed up the)6 993( If)1 117(microseconds \(again, closer than we could have hoped\).)7 2243 4 720 6040 t
( of generating random numbers: the)5 1433(look at better ways)3 757 2 720 6160 t
10 CW f
(rand\(\))2936 6160 w
10 R f
(call and)1 314 1 3322 6160 t
10 CW f
(%)3662 6160 w
10 R f
(operation consume 7.5 of the 12)5 1292 1 3748 6160 t
(microseconds.)720 6280 w
( was so effective in this case, we feel obligated to tell a couple of sadder sto-)16 3121(Because the cost model)3 949 2 970 6436 t
( once performed a simple experiment to see whether)8 2177(ries. We)1 368 2 720 6556 t
10 CW f
(i++)3301 6556 w
10 R f
(or)3517 6556 w
10 CW f
(i += 1)2 382 1 3636 6556 t
10 R f
( We)1 198( efficient.)1 392(was more)1 396 3 4054 6556 t
(were surprised to see that)4 1022 1 720 6676 t
10 CW f
(i += 1)2 366 1 1769 6676 t
10 R f
(was consistently about 10% faster, and shocked when we observed that)10 2877 1 2163 6676 t
( investigation showed that the timing)5 1501( Further)1 348(the compiler generated identical code for the two statements.)8 2471 3 720 6796 t
(loop for)1 323 1 720 6916 t
10 CW f
(i += 1)2 368 1 1072 6916 t
10 R f
( \(identical\) loop overlapped a cache)5 1451(was entirely in the instruction cache, while the other)8 2120 2 1469 6916 t
( jitter cache)2 485( was our motivation in sprinkling dummy statements in the timing macros to)12 3194(boundary. This)1 641 3 720 7036 t
(boundaries.)720 7156 w
(In another sad experiment we timed loops of this form:)9 2200 1 970 7312 t
cleartomark
showpage
saveobj restore
%%PageBoundingBox: 61 45 514 764
%%EndPage: 5 5
%%Page: 6 6
%%PageBoundingBox: (atend)
/saveobj save def
mark
6 pagesetup
10 R f
(- 6 -)2 166 1 2797 480 t
8 CW f
(VAX)1008 880 w
(8550)1008 980 w
( Mics/N)1 480( for each trial)3 720(Operation Clicks)1 1920 3 1104 1080 t
(Null Loop \(n=1000000\))2 1008 1 1008 1180 t
( 0.46)1 480( 27 28 28 28)4 960({} 27)1 1680 3 1104 1280 t
(Int Operations \(n=1000000\))2 1248 1 1008 1380 t
( 0.14)1 480( 34 35 36 40)4 960(i1++ 36)1 1680 3 1104 1480 t
( 0.17)1 480( 39 37 37 38)4 960( 38)1 1344(i1 = i2)2 336 4 1104 1580 t
( 0.24)1 480( 43 44 40 42)4 960( 40)1 1104(i1 = i2 + i3)4 576 4 1104 1680 t
( 0.19)1 480( 43 37 40 37)4 960( 39)1 1104(i1 = i2 - i3)4 576 4 1104 1780 t
( 0.46)1 480( 60 58 57 49)4 960( 53)1 1104(i1 = i2 * i3)4 576 4 1104 1880 t
( 2.34)1 480( 176 170 168 172)4 960( 155)1 1104(i1 = i2 / i3)4 576 4 1104 1980 t
( 3.14)1 480( 212 229 217 217)4 960( 204)1 1104(i1 = i2 % i3)4 576 4 1104 2080 t
(Float Operations \(n=1000000\))2 1344 1 1008 2180 t
( 0.25)1 480( 47 41 42 39)4 960( 43)1 1344(f1 = f2)2 336 4 1104 2280 t
( 0.43)1 480( 55 54 53 57)4 960( 49)1 1104(f1 = f2 + f3)4 576 4 1104 2380 t
( 0.98)1 480( 87 85 90 86)4 960( 85)1 1104(f1 = f2 - f3)4 576 4 1104 2480 t
( 0.56)1 480( 58 64 56 68)4 960( 61)1 1104(f1 = f2 * f3)4 576 4 1104 2580 t
( 1.63)1 480( 133 119 123 125)4 960( 128)1 1104(f1 = f2 / f3)4 576 4 1104 2680 t
(Numeric Conversions \(n=1000000\))2 1488 1 1008 2780 t
( 0.61)1 480( 66 67 66 61)4 960( 60)1 1344(i1 = f1)2 336 4 1104 2880 t
( 0.58)1 480( 63 59 64 62)4 960( 65)1 1344(f1 = i1)2 336 4 1104 2980 t
(Integer Vector Operations \(n=1000000\))3 1776 1 1008 3080 t
( 0.30)1 480( 44 45 46 48)4 960( 44)1 1296(v[i] = i)2 384 4 1104 3180 t
( 0.73)1 480( 64 71 72 63)4 960( 86)1 1152(v[v[i]] = i)2 528 4 1104 3280 t
( 0.84)1 480( 81 57 83 83)4 960( 87)1 1008(v[v[v[i]]] = i)2 672 4 1104 3380 t
(Control Structures \(n=1000000\))2 1440 1 1008 3480 t
( 0.36)1 480( 49 50 43 48)4 960( 55)1 912(if \(i == 5\) i1++)4 768 4 1104 3580 t
( 0.33)1 480( 46 48 45 53)4 960( 46)1 912(if \(i != 5\) i1++)4 768 4 1104 3680 t
( 0.15)1 480( 37 37 38 35)4 960( 36)1 816(while \(i < 0\) i1++)4 864 4 1104 3780 t
( 3.90?)1 528( 296 228 197 263)4 960( 323)1 1056(i1 = sum1\(i2\))2 624 4 1104 3880 t
( 2.29)1 480( 167 162 156 165)4 960( 176)1 864(i1 = sum2\(i2, i3\))3 816 4 1104 3980 t
( 2.71)1 480( 193 182 182 211)4 960( 184)1 672(i1 = sum3\(i2, i3, i4\))4 1008 4 1104 4080 t
(Input/Output \(n=10000\))1 1056 1 1008 4180 t
( 15.21)1 480( 9 9 9)3 720( 10)1 240( 10)1 1104(fputs\(s, fp\))1 576 5 1104 4280 t
( 16.87)1 480( 10 11 10 10)4 960( 11)1 960(fgets\(s, 9, fp\))2 720 4 1104 4380 t
( 64.87)1 480( 41 36 36 41)4 960( 42)1 768(fprintf\(fp, sdn, i\))2 912 4 1104 4480 t
( 65.21)1 480( 41 38 40 41)4 960( 37)1 768(fscanf\(fp, sd, &i1\))2 912 4 1104 4580 t
(Malloc \(n=10000\))1 768 1 1008 4680 t
( 22.21)1 480( 14 14 13 14)4 960(free\(malloc\(8\)\) 13)1 1680 3 1104 4780 t
( 25.21)1 480( 16 15 16 14)4 960(push\(i\) 16)1 1680 3 1104 4880 t
( 3.54?)1 528( 3 2 3 2)4 960( 2)1 1200(i1 = pop\(\))2 480 4 1104 4980 t
(String Functions \(n=100000\))2 1296 1 1008 5080 t
( 7.44)1 480( 45 51 46 48)4 960( 47)1 624(strcpy\(s, s0123456789\))1 1056 4 1104 5180 t
( 3.67?)1 528( 19 49 16 20)4 960( 20)1 864(i1 = strcmp\(s, s\))3 816 4 1104 5280 t
( 6.77)1 480( 44 44 40 45)4 960( 44)1 384(i1 = strcmp\(s, sa123456789\))3 1296 4 1104 5380 t
(String/Number Conversions \(n=10000\))2 1680 1 1008 5480 t
( 15.54)1 480( 8)1 240( 10 11 10)3 720( 9)1 864(i1 = atoi\(s12345\))2 816 5 1104 5580 t
( 73.87)1 480( 45 42 46 46)4 960( 44)1 576(sscanf\(s12345, sd, &i1\))2 1104 4 1104 5680 t
( 53.87)1 480( 32 33 34 33)4 960( 31)1 864(sprintf\(s, sd, i\))2 816 4 1104 5780 t
( 83.21)1 480( 48 52 50 50)4 960( 51)1 816(f1 = atof\(s123_45\))2 864 4 1104 5880 t
( 165.54)1 480( 94)1 240( 102)1 240( 96)1 240( 103)1 240( 103)1 528(sscanf\(s123_45, sf, &f1\))2 1152 7 1104 5980 t
( 129.87)1 480( 78 84 73 79)4 960( 77)1 528(sprintf\(s, sf62, 123.45\))2 1152 4 1104 6080 t
(Math Functions \(n=10000\))2 1152 1 1008 6180 t
( 5.54?)1 528( 3 2 5 4)4 960( 4)1 1152(i1 = rand\(\))2 528 4 1104 6280 t
( 30.87?)1 528( 17 19 14 25)4 960( 19)1 1104(f1 = log\(f2\))2 576 4 1104 6380 t
( 34.54)1 480( 21 22 21 21)4 960( 20)1 1104(f1 = exp\(f2\))2 576 4 1104 6480 t
( 29.21)1 480( 18 20 19 18)4 960( 14)1 1104(f1 = sin\(f2\))2 576 4 1104 6580 t
( 40.54)1 480( 24 27 28 21)4 960( 23)1 1056(f1 = sqrt\(f2\))2 624 4 1104 6680 t
10 B f
(Listing 2.)1 401 1 1716 6920 t
10 R f
(Output of the timing program on a VAX-8550.)7 1876 1 2167 6920 t
cleartomark
showpage
saveobj restore
%%PageBoundingBox: 90 84 437 764
%%EndPage: 6 6
%%Page: 7 7
%%PageBoundingBox: (atend)
/saveobj save def
mark
7 pagesetup
10 R f
(- 7 -)2 166 1 2797 480 t
9 CW f
(for \(i = 0; i < n; i++\) {)8 1350 1 1008 830 t
(i1++; i2++; i3++; i4++; i5++;)4 1566 1 1224 940 t
(})1008 1050 w
10 R f
( first four)2 379( the)1 147( For)1 189(We measured the cost of each additional increment operation, and found a strange pattern.)13 3605 4 720 1230 t
( sixth through)2 564( The)1 209( 6 clicks to the total.)5 831(or five increments, each additional increment added between 5 and)9 2716 4 720 1350 t
( the added click cost is)5 992(twentieth increments, however, add between 50 and -50 clicks to the total, and)12 3328 2 720 1470 t
( the buyer beware.)3 736( Let)1 183( still don't understand why the results come out this way.)10 2285(repeatable. We)1 622 4 720 1590 t
10 B f
(A Survey of Results)3 841 1 720 1830 t
10 R f
( ranging from per-)3 764(We ran the final version of the timing program on more than a dozen machines,)14 3306 2 970 1986 t
( some version of the UNIX oper-)6 1337( machines ran)2 562( All)1 182(sonal computers to a Cray X-MP and an Amdahl 5890.)9 2239 4 720 2106 t
( differ-)1 285( did encounter some minor problems with the)7 1853( We)1 193(ating system, so porting was comparatively easy.)6 1989 4 720 2226 t
( required a one- or two-line)5 1094(ence betweeen ANSI and non-ANSI C compilers and preprocessors; this usually)10 3226 2 720 2346 t
( even encountered some library bugs.)5 1491( We)1 188(editing change before compiling on a specific machine.)7 2212 3 720 2466 t
( have grouped the machines very roughly)6 1670( We)1 191( machines.)1 430(Table 2 shows the results for a subset of our)9 1779 4 970 2622 t
(in order of increasing speed, but in several cases over-rode this order to keep family members together.)16 4118 1 720 2742 t
( ran at 20MHz, while the second had)7 1476( first had no floating point and)6 1216( The)1 205(We tested two 386 machines.)4 1173 4 970 2898 t
( two Mips R3000 machines)4 1108( The)1 207(floating point and ran at 25MHz; both differences can be seen in the table.)13 3005 3 720 3018 t
( in that the slower one is a uni-processor, while the faster is a multi-processor.)14 3131(differ both in clock speed and)5 1189 2 720 3138 t
(It is also evident that our tests do not reveal the Cray's strength as a vector machine.)16 3364 1 720 3258 t
( a floating-point multiplication costs)4 1544(In the survey reported in Table 1, the victims guessed that)10 2526 2 970 3414 t
( 2 reveals ratios as small as 1/3 \(integer)8 1663( Table)1 288(between 2 and 5 times as much as integer multiplication.)9 2369 3 720 3534 t
(multiplication can be 3 times slower than floating multiplication on machines with the Mips R3000 proces-)15 4320 1 720 3654 t
(sor\) and as large as 200 \(on 80386 machines without floating-point hardware\).)11 3133 1 720 3774 t
( presenting)1 463(We did some limited experiments on non-UNIX systems, but not enough to warrant)12 3607 2 970 3930 t
( memory, and the fact that the)6 1333( the problems we encountered on PCs are the limited)9 2327(results. Among)1 660 3 720 4050 t
( we)1 160( Nevertheless)1 584( not\) is less standardized.)4 1083(language's access to the system times \(whether accurate or)8 2493 4 720 4170 t
(expect that it would not be too hard to obtain similar results on other machines.)14 3167 1 720 4290 t
10 B f
(Some Final Warnings)2 929 1 720 4530 t
10 R f
( really)1 256(Benchmarking is a difficult art, and it is all too easy to read more into a set of numbers than is)20 3814 2 970 4686 t
( them to settle arguments, or even to start)8 1747( make too much of these numbers, and don't use)9 2053(there. Don't)1 520 3 720 4806 t
( the approach and its limitations than to believe these values)10 2443( is much more important to appreciate)6 1538(them. It)1 339 3 720 4926 t
(just because they are printed with two decimal places.)8 2154 1 720 5046 t
( multiple users, with)3 826(CPU times vary greatly on machines with caches, with multiple processors, with)11 3244 2 970 5202 t
( of the machines look slow because they)7 1646( Some)1 284(disk or network traffic, and any number of other variables.)9 2390 3 720 5322 t
( Dif-)1 223( magnitude.)1 479(do not have hardware floating-point; this can slow a computation down by two orders of)14 3618 3 720 5442 t
( no attempt to investigate the effects of that)8 1755(ferent compilers can produce different results as well; we made)9 2565 2 720 5562 t
(factor.)720 5682 w
( implementation details can)3 1132( Here)1 253(Furthermore, a significant part of our tests exercise the C library.)10 2685 3 970 5838 t
(totally swamp machine differences; there is much more room for variation.)10 2997 1 720 5958 t
10 B f
(Acknowledgments)720 6198 w
10 R f
(We are indebted to J. D. Hildebrand and Allan Wilks for helpful comments on this paper.)15 3572 1 970 6354 t
cleartomark
showpage
saveobj restore
%%PageBoundingBox: 61 141 514 764
%%EndPage: 7 7
%%Page: 8 8
%%PageBoundingBox: (atend)
/saveobj save def
mark
8 pagesetup
10 R f
(- 8 -)2 166 1 2797 480 t
6 R f
( Amdahl)1 330( Cray)1 264( R3000)1 277( R3000)1 314( Sun)1 296( Sun)1 285( Next)1 274( VAX VAX)2 580( VAX)1 296( VAX)1 286( 80386)1 296(3B2 80386)1 436 12 1638 976 t
( 780)1 296( 750)1 250( 25MHz)1 296(400 20MHz)1 447 4 1643 1051 t
6 S f
(m)3073 1051 w
6 R f
( 5890)1 246( X-MP24)1 300( 33MHz)1 277( 25MHz)1 283( 4/260C)1 331( 3/60)1 275( 68030)1 296( 8550)1 245(VAX 3)1 174 9 3108 1051 t
( f.p.)1 258( f.p.)1 95(Operation no)1 1232 3 750 1126 t
(Null Loop \(n=100000\))2 548 1 720 1201 t
( 0.12)1 251( 0.01?)1 327( 0.26)1 261( 1.09 0.41)2 562( 2.24)1 311( 1.10)1 281( 1.00 0.46)2 580( 1.15)1 281( 3.87)1 311( 2.19)1 281( 3.40)1 311({} 8.33)1 1023 12 750 1276 t
(Int Operations \(n=100000\))2 643 1 720 1351 t
( 0.05)1 251( 0.00?)1 327( 0.19)1 261( 0.44 0.22)2 562( 0.64)1 311( 0.36)1 281( 0.48 0.14)2 580( 0.81)1 281( 1.97)1 311( 0.54)1 281( 1.03)1 311(i1++ 2.87)1 1023 12 750 1426 t
( 0.03)1 277( 0.19)1 301( 0.06)1 261( 0.34 0.15)2 562( 0.56)1 311( 0.44)1 281( 0.34 0.17)2 580( 0.74)1 281( 2.10)1 311( 0.58)1 281( 1.17)1 311( 2.80)1 865(i1 = i2)2 158 13 750 1501 t
( 0.05)1 277( 0.22)1 301( 0.09)1 261( 0.60 0.27)2 562( 1.35)1 311( 0.66)1 281( 0.56 0.24)2 580( 1.37)1 281( 2.23)1 311( 1.11)1 281( 1.67)1 311( 5.30)1 754(i1 = i2 + i3)4 269 13 750 1576 t
( 0.04)1 277( 0.21)1 301( 0.09)1 261( 0.55 0.27)2 562( 1.33)1 311( 0.72)1 281( 0.59 0.19)2 580( 1.34)1 281( 2.23)1 311( 1.10)1 281( 1.70)1 285( 7.13?)1 794(i1 = i2 - i3)4 255 13 750 1651 t
( 0.12)1 277( 0.44)1 301( 0.75)1 261( 1.90 0.81)2 562( 3.81)1 311( 2.52)1 281( 1.10 0.46)2 580( 1.92)1 281( 9.17)1 311( 1.85)1 281( 2.53)1 285( 14.93?)1 784(i1 = i2 * i3)4 265 13 750 1726 t
( 0.19)1 277( 0.72)1 301( 1.91)1 261( 4.05 2.35)2 562( 6.66)1 311( 4.25)1 281( 2.32 2.34)2 580( 8.11)1 281( 9.57)1 311( 4.48)1 281( 5.00)1 311( 22.80)1 771(i1 = i2 / i3)4 252 13 750 1801 t
( 0.19)1 277( 1.53)1 301( 1.91)1 261( 4.08 2.34)2 562( 6.60)1 311( 4.19)1 281( 4.31 3.14)2 580( 12.29)1 281( 4.54 21.80)2 592( 5.07)1 311( 23.80)1 738(i1 = i2 % i3)4 285 12 750 1876 t
(Float Operations \(n=100000\))2 700 1 720 1951 t
( 0.07)1 277( 0.19)1 301( 0.05)1 261( 0.35 0.15)2 562( 0.57)1 311( 0.37)1 281( 0.90 0.25)2 580( 1.42)1 281( 2.83)1 311( 0.58)1 281( 1.10)1 311( 2.73)1 859(f1 = f2)2 164 13 750 2026 t
( 0.12)1 277( 0.23)1 301( 0.19)1 261( 5.92 12.27 3.27 0.47)4 1154( 1.01 0.43)2 580( 10.33 2.18)2 592( 457.53 10.55)2 592( 55.83)1 745(f1 = f2 + f3)4 278 9 750 2101 t
( 0.13)1 277( 0.23)1 301( 0.20)1 261( 6.05 11.01 3.30 0.48)4 1154( 1.09 0.98)2 580( 10.10 2.73)2 592( 461.17 12.56)2 592( 60.43)1 759(f1 = f2 - f3)4 264 9 750 2176 t
( 0.13)1 277( 0.25)1 301( 0.25)1 261( 6.31 13.57 2.71 0.48)4 1154( 1.11 0.56)2 580( 15.50 2.38)2 592( 489.93 10.54)2 592( 67.70)1 749(f1 = f2 * f3)4 274 9 750 2251 t
( 0.20)1 277( 0.45)1 301( 0.70)1 261( 6.66 15.48 6.69 1.44)4 1154( 1.78 1.63)2 580( 14.60 4.55)2 592( 511.57 15.71)2 592( 83.87)1 762(f1 = f2 / f3)4 261 9 750 2326 t
(Numeric Convs \(n=100000\))2 676 1 720 2401 t
( 0.27)1 277( 0.38)1 301( 0.70)1 261( 7.63 10.31 0.95 0.68)4 1154( 0.89 0.61)2 580( 2.36)1 281( 7.90)1 311( 17.20)1 281( 657.80)1 285( 118.50?)1 888(i1 = f1)2 161 11 750 2476 t
( 0.23)1 277( 0.38)1 301( 0.54)1 261( 0.93 0.27)2 562( 8.51)1 311( 3.69)1 281( 1.01 0.58)2 580( 1.60)1 281( 4.47)1 311( 7.39)1 281( 257.10)1 311( 43.57)1 862(f1 = i1)2 161 13 750 2551 t
(Integer Vector Ops \(n=100000\))3 756 1 720 2626 t
( 0.10)1 277( 0.16)1 301( 0.41)1 261( 1.01 0.39)2 562( 1.66)1 311( 1.19)1 281( 0.30)1 290( 0.60)1 264( 2.42?)1 307( 2.87)1 285( 2.71?)1 307( 2.70)1 311( 8.20)1 855(v[i] = i)2 168 14 750 2701 t
( 0.19)1 277( 0.39)1 301( 0.69)1 261( 1.81 0.75)2 562( 2.78)1 311( 2.01)1 281( 1.33 0.73)2 580( 8.65)1 281( 6.47)1 311( 3.34)1 281( 4.17)1 311( 13.53)1 785(v[v[i]] = i)2 238 13 750 2776 t
( 0.29)1 277( 0.54)1 301( 0.87)1 261( 2.15 1.02)2 562( 3.96)1 311( 2.85)1 281( 1.89 0.84)2 580( 9.90)1 281( 8.63)1 311( 4.82)1 281( 6.97)1 311( 18.60)1 715(v[v[v[i]]] = i)2 308 13 750 2851 t
(Control Structures \(n=100000\))2 741 1 720 2926 t
( 0.10)1 277( 0.27)1 301( 0.10)1 261( 0.41 0.20)2 562( 0.99)1 311( 0.63)1 281( 0.36)1 290( 0.70)1 264( 1.34?)1 307( 2.63)1 311( 2.15)1 281( 2.27)1 311( 3.90)1 656(if \(i == 5\) i1++)4 367 14 750 3001 t
( 0.12)1 277( 0.43)1 301( 0.29)1 261( 0.89 0.53)2 562( 1.53)1 311( 0.79)1 281( 0.73 0.33)2 580( 2.00)1 281( 3.73)1 311( 2.03)1 281( 2.37)1 311( 6.47)1 670(if \(i != 5\) i1++)4 353 13 750 3076 t
(while \(i)1 185 1 750 3151 t
6 S f
(<)950 3151 w
6 R f
( 0.11)1 277( 0.25)1 301( 0.10)1 261( 0.43 0.20)2 562( 0.90)1 311( 0.42)1 281( 0.62 0.15)2 580( 0.59)1 281( 1.63)1 311( 2.18)1 281( 2.03)1 311( 3.70)1 595(0\) i1++)1 180 13 998 3151 t
( 0.60)1 277( 1.02)1 301( 0.29)1 261( 1.31 0.40)2 562( 9.65)1 285( 3.02?)1 281( 6.51 3.90?)2 606( 15.95)1 281( 7.65 26.87)2 592( 9.07)1 311( 30.77)1 695(i1 = sum1\(i2\))2 328 12 750 3226 t
( 0.65)1 277( 1.17)1 301( 0.34)1 261( 1.85 0.47)2 562( 10.54)1 285( 3.80?)1 307( 7.54 2.29)2 580( 18.52)1 281( 10.10 8.91 29.07)3 903( 37.47)1 618(i1 = sum2\(i2, i3\))3 405 11 750 3301 t
( 0.70)1 277( 1.37)1 301( 0.44)1 261( 2.47 0.60)2 562( 12.44)1 285( 4.51?)1 307( 8.35 2.71)2 580( 21.20)1 281( 32.47)1 311( 10.04)1 281( 11.77)1 311( 43.70)1 541(i1 = sum3\(i2, i3, i4\))4 482 13 750 3376 t
(Input/Output \(n=1000\))1 550 1 720 3451 t
( 4.21)1 277( 12.28)1 275( 10.40?)1 287( 17.24 12.92)2 562( 60.09)1 285( 28.90?)1 307( 34.67 15.21)2 580( 59.47 146.13 89.52)3 873( 73.27)1 285( 405.00?)1 786(fputs\(s, fp\))1 263 11 750 3526 t
( 3.54?)1 277( 14.91?)1 301( 10.74?)1 287( 10.91 10.92)2 562( 50.76)1 311( 23.90)1 281( 33.33 16.87)2 580( 166.13 96.18)2 592( 62.14)1 255( 73.27?)1 311( 361.67?)1 730(fgets\(s, 9, fp\))2 319 12 750 3601 t
( 21.88)1 277( 28.36)1 301( 28.40)1 261( 83.23 135.09 63.57 29.92)4 1154( 64.87)1 290( 247.00)1 290( 245.52)1 281( 486.13)1 311( 153.47)1 281( 176.60)1 311( 585.00)1 619(fprintf\(fp, sdn, i\))2 404 12 750 3676 t
( 17.21)1 277( 39.99)1 301( 48.40)1 261( 195.09 85.57 45.59)3 873( 129.90)1 281( 65.21)1 290( 155.00)1 290( 315.85)1 255( 679.47?)1 337( 222.47)1 281( 263.27)1 311( 1168.33)1 581(fscanf\(fp, sd, &i1\))2 442 13 750 3751 t
(Malloc \(n=1000\))1 408 1 720 3826 t
( 7.88?)1 303( 16.14)1 301( 7.40)1 261( 4.92)1 281( 44.57 166.76 27.57)3 873( 48.33 22.21)2 580( 123.52)1 281( 44.14 222.80)2 592( 59.93)1 311(free\(malloc\(8\)\) 171.67)1 1023 10 750 3901 t
( 6.88?)1 303( 10.02)1 301( 8.40)1 261( 7.92)1 281( 14.57)1 281( 76.76)1 311( 32.90)1 281( 54.00 25.21)2 580( 154.85)1 281( 66.47 282.80)2 592( 53.27)1 311(push\(i\) 301.67)1 1023 12 750 3976 t
( 0.88?)1 303( 1.72)1 275( 2.07?)1 287( 1.26)1 255( 11.42 3.91?)2 618( 4.90)1 255( 9.67 3.54?)2 606( 26.85)1 281( 39.47)1 285( 13.47?)1 281( 16.60?)1 337( 45.00)1 782(i1 = pop\(\))2 241 13 750 4051 t
(String Functions \(n=10000\))2 669 1 720 4126 t
( 1.78)1 277( 5.96)1 301( 2.70)1 261( 7.53 14.39 4.77 3.89)4 1154( 7.44)1 290( 18.30)1 290( 47.12)1 281( 86.13)1 311( 22.04)1 281( 25.27)1 311( 117.33)1 461(strcpy\(s, s0123456789\))1 562 12 750 4201 t
( 0.51)1 277( 3.76)1 301( 3.14)1 261( 28.76 6.27 4.16)3 873( 12.23)1 255( 8.27 3.67?)2 606( 19.82)1 281( 10.60 8.54 32.47)3 903( 41.00)1 633(i1 = strcmp\(s, s\))3 390 10 750 4276 t
( 2.41)1 277( 2.47)1 301( 0.67)1 261( 3.57 0.82)2 562( 8.52)1 311( 5.73)1 281( 6.77)1 290( 16.90)1 290( 35.12)1 281( 78.80)1 311( 11.27)1 281( 13.93)1 311( 49.67)1 337(i1 = strcmp\(s, sa123456789\))3 686 14 750 4351 t
(String/Number Convs \(n=1000\))2 768 1 720 4426 t
( 2.88?)1 303( 7.21)1 301( 4.07)1 261( 32.09 8.24 5.26)3 873( 15.23)1 281( 29.33 15.54)2 580( 35.81 159.47 59.18)3 873( 43.27)1 311( 148.33)1 609(i1 = atoi\(s12345\))2 414 10 750 4501 t
( 42.54)1 277( 76.60)1 301( 48.07)1 261( 116.92)1 281( 218.76 88.57)2 592( 136.90)1 281( 73.87)1 290( 164.00)1 290( 318.18)1 281( 689.47)1 311( 515.81)1 281( 609.93)1 311( 1418.33)1 455(sscanf\(s12345, sd, &i1\))2 568 14 750 4576 t
( 20.88)1 277( 24.42)1 301( 25.74)1 261( 75.57 121.76 60.24 26.26)4 1154( 53.87)1 290( 239.33)1 290( 220.85)1 281( 466.13)1 311( 139.14)1 281( 149.93)1 311( 361.67)1 673(sprintf\(s, sd, i\))2 350 12 750 4651 t
(f1 = atof\(s123)2 340 1 750 4726 t
6 S f
(_)1090 4726 w
6 R f
( 8.54)1 277( 26.09)1 301( 27.07)1 261( 34.26)1 281( 156.23 1059.42 522.24)3 873( 83.21)1 290( 153.00)1 290( 294.85)1 281( 626.13)1 311( 217.14)1 281( 473.27)1 311(45\) 911.67)1 653 12 1120 4726 t
(sscanf\(s123)750 4801 w
6 S f
(_)1031 4801 w
6 R f
( 46.88)1 251( 145.60?)1 327( 76.74)1 261( 312.23 1156.76 438.24 148.26)4 1154( 337.33 165.54)2 580( 752.47 1382.80 665.18)3 873( 1333.27)1 285( 2855.00?)1 458(45, sf, &f1\))2 280 9 1061 4801 t
( 29.88)1 277( 67.28)1 301( 71.74)1 261( 85.92)1 281( 233.90 1375.42 498.24)3 873( 900.33 129.87)2 580( 461.14 1506.13 566.85)3 873( 763.27)1 311( 1995.00)1 475(sprintf\(s, sf62, 123.45\))2 548 10 750 4876 t
(Math Functions \(n=1000\))2 617 1 720 4951 t
( 0.88?)1 303( 1.81)1 301( 1.40)1 235( 1.59?)1 307( 6.57)1 255( 9.09?)1 311( 6.23?)1 281( 5.54?)1 290( 14.33?)1 316( 27.18)1 281( 9.14 59.47)2 592( 13.27)1 285( 78.33?)1 792(i1 = rand\(\))2 257 14 750 5026 t
( 5.21)1 277( 3.52)1 301( 6.74)1 261( 8.92)1 281( 270.42 17.91)2 592( 36.57)1 255( 71.67 30.87?)2 606( 137.85)1 281( 77.81 842.80)2 592( 3009.93)1 311( 2895.00)1 742(f1 = log\(f2\))2 281 12 750 5101 t
( 6.21)1 277( 3.28)1 275( 6.40?)1 287( 8.26)1 281( 29.23 239.42 21.91)3 873( 90.00 34.54)2 580( 169.85)1 281( 849.47)1 311( 9603.27 283.81)2 592( 4408.33)1 733(f1 = exp\(f2\))2 290 11 750 5176 t
( 6.54)1 277( 3.41)1 301( 6.74)1 261( 8.26)1 281( 22.90 322.76 25.91)3 873( 67.00 29.21)2 580( 134.52)1 281( 776.13)1 311( 5719.93 139.81)2 592( 3135.00)1 749(f1 = sin\(f2\))2 274 11 750 5251 t
( 6.21)1 277( 3.24)1 301( 8.07)1 261( 9.92)1 281( 13.90 449.42 30.57)3 873( 83.33 40.54)2 580( 1006.13 175.85)2 592( 37.14)1 281( 1126.60)1 311( 455.00)1 729(f1 = sqrt\(f2\))2 294 11 750 5326 t
10 B f
(Table 2.)1 345 1 1562 5663 t
10 R f
( times in microseconds.)3 944( all)1 150(Output on a set of machines;)5 1146 3 1957 5663 t
9 CW f
(/* time.c -- produce a 1-page summary of cpu times of various C constructs)13 3996 1 1008 5803 t
(* To port to a new machine, change the following:)9 2646 1 1062 5883 t
( around 10000, increase by *10 until no question marks)9 2916( Start)1 378(* BASEN:)1 702 3 1062 5963 t
( processor: define ANSIIMAC 1 for Ansii C, undef for old C)11 3132(* Macro)1 648 2 1062 6043 t
( probably change CLICKSPERSEC, may change jobclicks\(\))6 2862(* Times:)1 702 2 1062 6123 t
( print ? after CPU time if max clicks - min clicks >)12 2808(* WARNRANGE:)1 918 2 1062 6203 t
( * mean clicks)3 756(* WARNRANGE)1 1458 2 1062 6283 t
(*/)1062 6363 w
(#include <stdio.h>)1 972 1 1008 6523 t
(#include <math.h>)1 918 1 1008 6603 t
(#undef ANSIIMAC)1 810 1 1008 6763 t
(#define ANSIIMAC 1)2 972 1 1008 6843 t
(#define BASEN 1000000)2 1134 1 1008 6923 t
(#define WARNRANGE 0.4)2 1134 1 1008 7003 t
(struct stacknode {)2 972 1 1008 7163 t
(int val;)1 432 1 1440 7243 t
cleartomark
showpage
saveobj restore
%%PageBoundingBox: 61 52 567 764
%%EndPage: 8 8
%%Page: 9 9
%%PageBoundingBox: (atend)
/saveobj save def
mark
9 pagesetup
10 R f
(- 9 -)2 166 1 2797 480 t
9 CW f
(#include <stdio.h>)1 972 1 1008 890 t
(#define NBINS 1000)2 972 1 1008 1000 t
(#define MAXINT 16384)2 1080 1 1008 1110 t
(#define NVALS 100000)2 1080 1 1008 1220 t
(struct node { int val; struct node *next; };)8 2376 1 1008 1440 t
(typedef struct node *nodep;)3 1458 1 1008 1550 t
(nodep bin[NBINS];)1 1026 1 1008 1660 t
(main\(\))1008 1880 w
( b, v;)2 324({ int i,)2 648 2 1008 1990 t
(nodep newnode;)1 756 1 1224 2100 t
(for \(i = 0; i < NBINS; i++\))7 1458 1 1224 2210 t
(bin[i] = \(nodep\) 0;)3 1026 1 1440 2320 t
(for \(i = 0; i < NVALS; i++\) {)8 1566 1 1224 2430 t
(v = rand\(\) % MAXINT;)4 1080 1 1440 2540 t
(b = \(\(float\) NBINS / MAXINT\) * v;)7 1782 1 1440 2650 t
(newnode = \(nodep\) malloc\(sizeof\(struct node\)\);)4 2484 1 1440 2760 t
(newnode->val = v;)2 918 1 1440 2870 t
(newnode->next = bin[b];)2 1242 1 1440 2980 t
(bin[b] = newnode;)2 918 1 1440 3090 t
(})1224 3200 w
(})1008 3310 w
10 B f
(Listing 3.)1 401 1 2019 3550 t
10 R f
(The complete hashing program.)3 1270 1 2470 3550 t
9 CW f
(struct stacknode *next;)2 1242 1 1440 3690 t
(};)1008 3770 w
(typedef struct stacknode *Stackp;)3 1782 1 1008 3850 t
(Stackp stackroot;)1 972 1 1008 3930 t
(void push\(i\))1 648 1 1008 4090 t
(int i;)1 324 1 1008 4170 t
({)1008 4250 w
(Stackp p;)1 486 1 1440 4330 t
(p = \(Stackp\) malloc\(sizeof\(struct stacknode\)\);)4 2484 1 1440 4490 t
(p->val = i;)2 594 1 1440 4570 t
(p->next = stackroot;)2 1080 1 1440 4650 t
(stackroot = p;)2 756 1 1440 4730 t
(})1008 4810 w
(int pop\(\))1 486 1 1008 4970 t
({)1008 5050 w
(int i;)1 540 1 1440 5130 t
(i = stackroot->val;)2 1026 1 1440 5290 t
(stackroot = stackroot->next;)2 1512 1 1440 5370 t
(return i;)1 486 1 1440 5450 t
(})1008 5530 w
(/* Objects associated with CPU times -- may have to change)10 3132 1 1008 5690 t
(* CLICKSPERSEC is defined as HZ on many systems)8 2538 1 1062 5770 t
( Cray=105296000)1 864( values of CLICKSPERSEC: Vax=60)4 1674(* Typical)1 756 3 1062 5850 t
( large values, also change %5d in macro loop1, 99999 in minclicks;)11 3564(* For)1 540 2 1062 5930 t
(*/)1062 6010 w
(#define CLICKSPERSEC 60)2 1242 1 1008 6170 t
(#include <sys/types.h>)1 1188 1 1008 6330 t
(#include <sys/times.h>)1 1188 1 1008 6410 t
(int jobclicks\(\))1 810 1 1008 6570 t
({)1008 6650 w
( buffer;)1 432(struct tms)1 594 2 1440 6730 t
(times\(&buffer\);)1440 6890 w
(return \(int\) \(buffer.tms_utime + buffer.tms_stime\);)4 2754 1 1440 6970 t
(})1008 7050 w
(/* Main macros for experiments */)5 1782 1 1008 7210 t
cleartomark
showpage
saveobj restore
%%PageBoundingBox: 90 56 527 764
%%EndPage: 9 9
%%Page: 10 10
%%PageBoundingBox: (atend)
/saveobj save def
mark
10 pagesetup
10 R f
(- 10 -)2 216 1 2772 480 t
9 CW f
(#ifdef ANSIIMAC)1 810 1 1008 880 t
(#define quoted\(TEXT\) #TEXT)2 1404 1 1008 960 t
(#else)1008 1040 w
(#define quoted\(TEXT\) "TEXT")2 1458 1 1008 1120 t
(#endif)1008 1200 w
(#define loop1\(CODE\) loop1ctr++; \\)3 1782 1 1008 1360 t
(for \(i = 0; i < n; i++\) { CODE; } \\)11 1890 1 1440 1440 t
(loop1next = jobclicks\(\); \\)3 1404 1 1440 1520 t
(thisclicks = loop1next - loop1start; \\)5 2052 1 1440 1600 t
(sumclicks += thisclicks; \\)3 1404 1 1440 1680 t
(if \(thisclicks < minclicks\) minclicks = thisclicks; \\)7 2862 1 1440 1760 t
(if \(thisclicks > maxclicks\) maxclicks = thisclicks; \\)7 2862 1 1440 1840 t
(printf\("%5d", loop1next - loop1start\); \\)4 2160 1 1440 1920 t
(loop1start = loop1next;)2 1242 1 1440 2000 t
( quoted\(CODE\)\); \\)2 918( %-30s",)1 486(#define loop\(CODE\) printf\(")2 1458 3 1008 2160 t
(minclicks = 99999; maxclicks = -1; sumclicks = 0; \\)9 2754 1 1440 2240 t
(loop1ctr = 0; \\)3 810 1 1440 2320 t
(loop1start = jobclicks\(\); \\)3 1458 1 1440 2400 t
(loop1\(CODE\) \\)1 702 1 1440 2480 t
(loop1\(CODE\) \\)1 702 1 1440 2560 t
(i0 = i1 + i2 + i3; \\)7 1080 1 1440 2640 t
(loop1\(CODE\) \\)1 702 1 1440 2720 t
(i0 = i1 + i2 + i3 - i1 - i2 - i3; \\)13 1890 1 1440 2800 t
(loop1\(CODE\) \\)1 702 1 1440 2880 t
(i0 = i1 + i2 + i3 + i1*i2 + i2*i3 + i1*i3; \\)13 2376 1 1440 2960 t
(loop1\(CODE\) \\)1 702 1 1440 3040 t
(queststr = ""; \\)3 864 1 1440 3120 t
( \\)1 108( sumclicks\))1 648(if \(loop1ctr * \(maxclicks - minclicks\) > WARNRANGE *)8 2808 3 1440 3200 t
(queststr = "?"; \\)3 918 1 1872 3280 t
(lastmics = sumclicks * 1000000.0 / \(CLICKSPERSEC * n * loop1ctr\); \\)11 3618 1 1440 3360 t
(printf\("%10.2f%s\\n", lastmics - basemics, queststr\);)4 2808 1 1440 3440 t
(#define title\(TEXT\) printf\("%s \(n=%d\)\\n", TEXT, n\);)5 2754 1 1008 3600 t
(/* The experiment */)3 1080 1 1008 3760 t
(int sum1\(a\) int a; { return a; })7 1728 1 1008 3920 t
(int sum2\(a, b\) int a, b; { return a + b; })11 2268 1 1008 4000 t
(int sum3\(a, b, c\) int a, b, c; { return a + b + c; })15 2808 1 1008 4080 t
(main\(\))1008 4240 w
({)1008 4320 w
( loop1next, loop1ctr;)2 1134(int loop1start,)1 1026 2 1440 4400 t
( basemics;)1 540(float lastmics,)1 918 2 1440 4480 t
( maxclicks, sumclicks, thisclicks;)3 1836(int minclicks,)1 972 2 1440 4560 t
( n, basen;)2 540(int i,)1 540 2 1440 4640 t
( i1, i2, i3, i4;)4 864(int i0,)1 594 2 1440 4720 t
( f1, f2, f3;)3 648(float f0,)1 594 2 1440 4800 t
(int *v;)1 594 1 1440 4880 t
(char *queststr;)1 972 1 1440 4960 t
(char s[100];)1 810 1 1440 5040 t
(char fname[20];)1 972 1 1440 5120 t
(FILE *fp;)1 648 1 1440 5200 t
(/* The following strings are variables because some macro processors)9 3672 1 1440 5280 t
(don't handle quoted strings in quoted arguments */)7 2700 1 1872 5360 t
( = "0123456789";)2 864(char *s0123456789)1 1080 2 1440 5440 t
( = "a123456789";)2 864(char *sa123456789)1 1080 2 1440 5520 t
( = "12345";)2 594(char *s12345)1 810 2 1440 5600 t
( = "123.45";)2 648(char *s123_45)1 864 2 1440 5680 t
( = "%d";)2 432(char *sd)1 594 2 1440 5760 t
( = "%d\\n";)2 540(char *sdn)1 648 2 1440 5840 t
( = "%f";)2 432(char *sf)1 594 2 1440 5920 t
( = "%f6.2";)2 594(char *sf62)1 702 2 1440 6000 t
( No buffering to watch output */)6 1728( /*)1 378(setbuf\(stdout, \(char *\) 0\);)3 1458 3 1440 6160 t
( for each trial "\);)4 1026( Clicks)1 1674(printf\(" Operation)1 1026 3 1440 6240 t
(printf\(" Mics/N\\n"\);)1 1188 1 1440 6320 t
(basen = BASEN;)2 756 1 1440 6480 t
(n = basen;)2 540 1 1440 6560 t
(title\("Null Loop"\))1 972 1 1440 6640 t
(i0 = i1 = i2 = i3 = 5;)8 1188 1 1440 6720 t
(f0 = f1 = f2 = f3 = 5.0;)8 1296 1 1440 6800 t
(basemics = 0.0;)2 810 1 1440 6880 t
(loop\({}\))1440 6960 w
(basemics = lastmics;)2 1080 1 1440 7040 t
(title\("Int Operations"\);)1 1296 1 1440 7200 t
cleartomark
showpage
saveobj restore
%%PageBoundingBox: 90 57 527 764
%%EndPage: 10 10
%%Page: 11 11
%%PageBoundingBox: (atend)
/saveobj save def
mark
11 pagesetup
10 R f
(- 11 -)2 216 1 2772 480 t
9 CW f
(i1 = i2 = i3 = 5;)6 918 1 1440 800 t
(loop\(i1++\))1440 880 w
(loop\(i1 = i2\))2 702 1 1440 960 t
(loop\(i1 = i2 + i3\))4 972 1 1440 1040 t
(loop\(i1 = i2 - i3\))4 972 1 1440 1120 t
(loop\(i1 = i2 * i3\))4 972 1 1440 1200 t
(loop\(i1 = i2 / i3\))4 972 1 1440 1280 t
(loop\(i1 = i2 % i3\))4 972 1 1440 1360 t
(title\("Float Operations"\);)1 1404 1 1440 1520 t
(f1 = f2 = f3 = 5.0;)6 1026 1 1440 1600 t
(loop\(f1 = f2\))2 702 1 1440 1680 t
(loop\(f1 = f2 + f3\))4 972 1 1440 1760 t
(loop\(f1 = f2 - f3\))4 972 1 1440 1840 t
(loop\(f1 = f2 * f3\))4 972 1 1440 1920 t
(loop\(f1 = f2 / f3\))4 972 1 1440 2000 t
(title\("Numeric Conversions"\);)1 1566 1 1440 2160 t
(f1 = 123456.789;)2 864 1 1440 2240 t
(i1 = 123456;)2 648 1 1440 2320 t
(loop\(i1 = f1\))2 702 1 1440 2400 t
(loop\(f1 = i1\))2 702 1 1440 2480 t
(title\("Integer Vector Operations"\);)2 1890 1 1440 2640 t
(v = \(int *\) malloc\(n * sizeof\(int\)\);)6 1944 1 1440 2720 t
(for \(i = 0; i < n; i++\))7 1242 1 1440 2800 t
(v[i] = 0;)2 486 1 1872 2880 t
(loop\(v[i] = i\))2 756 1 1440 2960 t
(loop\(v[v[i]] = i\))2 918 1 1440 3040 t
(loop\(v[v[v[i]]] = i\))2 1080 1 1440 3120 t
(free\(v\);)1440 3200 w
(title\("Control Structures"\);)1 1512 1 1440 3360 t
(i1 = i2 = i3 = 5;)6 918 1 1440 3440 t
(loop\(if \(i == 5\) i1++\))4 1188 1 1440 3520 t
(loop\(if \(i != 5\) i1++\))4 1188 1 1440 3600 t
(loop\(while \(i < 0\) i1++\))4 1296 1 1440 3680 t
(loop\(i1 = sum1\(i2\)\))2 1026 1 1440 3760 t
(loop\(i1 = sum2\(i2, i3\)\))3 1242 1 1440 3840 t
(loop\(i1 = sum3\(i2, i3, i4\)\))4 1458 1 1440 3920 t
(n = basen/10;)2 702 1 1440 4080 t
(strcpy\(fname, "junk"\);)1 1188 1 1440 4160 t
(title\("Input/Output"\);)1440 4240 w
(strcpy\(s, "1234\\n"\);)1 1080 1 1440 4320 t
(fp = fopen\(fname, "w"\);)3 1242 1 1440 4400 t
(loop\(fputs\(s, fp\)\))1 972 1 1440 4480 t
(close\(fp\);)1440 4560 w
(fp = fopen\(fname, "r"\);)3 1242 1 1440 4640 t
(loop\(fgets\(s, 9, fp\)\))2 1134 1 1440 4720 t
(close\(fp\);)1440 4800 w
(fp = fopen\(fname, "w"\);)3 1242 1 1440 4880 t
(loop\(fprintf\(fp, sdn, i\)\))2 1350 1 1440 4960 t
(close\(fp\);)1440 5040 w
(fp = fopen\(fname, "r"\);)3 1242 1 1440 5120 t
(loop\(fscanf\(fp, sd, &i1\)\))2 1350 1 1440 5200 t
(close\(fp\);)1440 5280 w
(n = basen/10;)2 702 1 1440 5440 t
(title\("Malloc"\);)1440 5520 w
(loop\(free\(malloc\(8\)\)\))1440 5600 w
(loop\(push\(i\)\))1440 5680 w
(loop\(i1 = pop\(\)\))2 864 1 1440 5760 t
(n = basen/10;)2 702 1 1440 5920 t
(title\("String Functions"\);)1 1404 1 1440 6000 t
(loop\(strcpy\(s, s0123456789\)\))1 1512 1 1440 6080 t
(loop\(i1 = strcmp\(s, s\)\))3 1242 1 1440 6160 t
(loop\(i1 = strcmp\(s, sa123456789\)\))3 1782 1 1440 6240 t
(n = basen/10;)2 702 1 1440 6400 t
(title\("String/Number Conversions"\);)1 1890 1 1440 6480 t
(loop\(i1 = atoi\(s12345\)\))2 1242 1 1440 6560 t
(loop\(sscanf\(s12345, sd, &i1\)\))2 1566 1 1440 6640 t
(loop\(sprintf\(s, sd, i\)\))2 1242 1 1440 6720 t
(loop\(f1 = atof\(s123_45\)\))2 1296 1 1440 6800 t
(loop\(sscanf\(s123_45, sf, &f1\)\))2 1620 1 1440 6880 t
(loop\(sprintf\(s, sf62, 123.45\)\))2 1620 1 1440 6960 t
(n = basen/10;)2 702 1 1440 7120 t
(title\("Math Functions"\);)1 1296 1 1440 7200 t
cleartomark
showpage
saveobj restore
%%PageBoundingBox: 133 57 348 764
%%EndPage: 11 11
%%Page: 12 12
%%PageBoundingBox: (atend)
/saveobj save def
mark
12 pagesetup
10 R f
(- 12 -)2 216 1 2772 480 t
9 CW f
(loop\(i1 = rand\(\)\))2 918 1 1440 800 t
(f2 = 5.0;)2 486 1 1440 880 t
(loop\(f1 = log\(f2\)\))2 972 1 1440 960 t
(loop\(f1 = exp\(f2\)\))2 972 1 1440 1040 t
(loop\(f1 = sin\(f2\)\))2 972 1 1440 1120 t
(loop\(f1 = sqrt\(f2\)\))2 1026 1 1440 1200 t
(})1008 1280 w
10 B f
(Listing 4.)1 401 1 2044 1520 t
10 R f
(The complete timing program.)3 1221 1 2495 1520 t
cleartomark
showpage
saveobj restore
%%PageBoundingBox: 90 624 382 764
%%EndPage: 12 12
%%Trailer
done
%%Pages: 12
%%DocumentFonts: Courier Times-Bold Times-Italic Times-Roman Symbol
%%BoundingBox: 61 45 567 764

