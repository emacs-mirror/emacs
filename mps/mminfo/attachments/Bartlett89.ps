%!PS-Adobe-1.0
%%Title: technote.mss
%%DocumentFonts: (atend)
%%Creator: Joel Bartlett,WRL,8536625,9419094 and Scribe 5(1501)
%%CreationDate: 15 November 1989 16:57
%%Pages: (atend)
%%EndComments
% PostScript Prelude for Scribe.
/BS {/SV save def 0.0 792.0 translate .01 -.01 scale} bind def
/ES {SV restore showpage} bind def
/SC {setrgbcolor} bind def
/FMTX matrix def
/RDF {WFT SLT 0.0 eq
  {SSZ 0.0 0.0 SSZ neg 0.0 0.0 FMTX astore}
  {SSZ 0.0 SLT sin SLT cos div SSZ mul SSZ neg 0.0 0.0 FMTX astore}
  ifelse makefont setfont} bind def
/SLT 0.0 def
/SI { /SLT exch cvr def RDF} bind def
/WFT /Courier findfont def
/SF { /WFT exch findfont def RDF} bind def
/SSZ 1000.0 def
/SS { /SSZ exch 100.0 mul def RDF} bind def
/AF { /WFT exch findfont def /SSZ exch 100.0 mul def RDF} bind def
/MT /moveto load def
/XM {currentpoint exch pop moveto} bind def
/UL {gsave newpath moveto dup 2.0 div 0.0 exch rmoveto
   setlinewidth 0.0 rlineto stroke grestore} bind def
/LH {gsave newpath moveto setlinewidth
   0.0 rlineto
   gsave stroke grestore} bind def
/LV {gsave newpath moveto setlinewidth
   0.0 exch rlineto
   gsave stroke grestore} bind def
/BX {gsave newpath moveto setlinewidth
   exch
   dup 0.0 rlineto
   exch 0.0 exch neg rlineto
   neg 0.0 rlineto
   closepath
   gsave stroke grestore} bind def
/BX1 {grestore} bind def
/BX2 {setlinewidth 1 setgray stroke grestore} bind def
/PB {/PV save def translate 100.0 -100.0 scale pop} bind def
/PE {PV restore} bind def
/SH /show load def
/MX {exch show 0.0 rmoveto} bind def
/W {0 32 4 -1 roll widthshow} bind def
/WX {0 32 5 -1 roll widthshow 0.0 rmoveto} bind def
%%EndProlog
%%Page: 0 1 
BS
0 SI
10 /Times-Roman AF
25891 4286 MT
(O C T O B E R  1 9 8 9)SH
40 /Times-Bold AF
14400 12400 MT
(WRL)SH
14400 16120 MT
(Technical Note TN-12)SH
/Times-Roman SF
14400 33344 MT
(Mostly-Copying)SH
14400 37164 MT
(Garbage Collection)SH
14400 40984 MT
(Picks Up)SH
14400 44804 MT
(Generations and C++)SH
18 /Times-Italic AF
14400 52778 MT
(Joel F. Bartlett)SH
1 SS 
7 9000 72007 PB %!                      % magic number--identifies it as a PS file
% this is the WRL Note cover blurb for WRL Notes that are formatted with a
% binding margin for doublesided printing.

50 dict begin
-18 0 translate
/verylight 0.95 def
/lightgray 0.8 def
/darkgray  0.1 def
/inch {72 mul} def
 /gstring (g) def
/logo {gsave % create a 1 unit high digital logo
  /Helvetica-Bold findfont [.6 0 0 .75 0 0] makefont setfont
   -3.425 2 div 0 translate
  /box {
    newpath
    0 0 moveto
    .425 0 lineto
    0 1 rlineto
    0 1 lineto
    closepath darkgray setgray fill
    word exch 1 getinterval
    1 setgray
    dup stringwidth pop .425 exch sub 2 div .225 moveto
    dup gstring eq {0 .05 rmoveto} if
    show
    } def
  /boxstr {gsave
    /word exch def
    0 1 word length 1 sub {box .5 0 translate} for
    grestore} def

  (digital) boxstr
  grestore} def
-72 -72 translate
gsave 95 26 translate 22 dup scale logo grestore
141 34 moveto
/Times-Bold findfont [11.4 0 0 12 0 0] makefont setfont
(Western Research Laboratory  ) show
/Times-Roman findfont [11.4 0 0 12 0 0] makefont setfont
( 100 Hamilton Avenue  ) show
( Palo Alto, California 94301 USA) show

/plock {transform 0.5 add cvi exch 0.5 add cvi exch itransform} bind def
/mt {plock moveto} bind def
/lt {plock lineto} bind def
0.25 setlinewidth
139  24 mt 558  24 lt stroke
139  50 mt 558  50 lt stroke
 31  24 mt  31 738 lt 582 738 lt 582 24 lt stroke 
139 604 mt 558 604 lt stroke
139 714 mt 558 714 lt stroke
1 setlinewidth
133 133 mt 133 488 lt stroke
% currentscreen 3 -1 roll 2 div 3 1 roll setscreen
12 setlinewidth 0.5 setgray
 55  66 moveto 558  66 lineto stroke
 55 588 moveto 558 588 lineto stroke
end 
 PE ES
%%Page: 0 2 
BS
0 SI
11 /Times-Roman AF
10200 7955 MT
(The Western Research Laboratory \050WRL\051 is)
107 W( a computer systems research group that)106 W
9000 9151 MT
(was founded)
94 W( by Digital Equipment Corporation in 1982. Our focus is computer science)95 W
9000 10347 MT
(research relevant to the design and application of high performance scientific computers.)46 W
9000 11543 MT
(We test our ideas)
89 W( by designing, building, and using real systems. The systems we build)90 W
9000 12739 MT
(are research prototypes; they are not intended to become products.)SH
10200 14912 MT
(There is)
32 W( a second research laboratory located in Palo Alto, the Systems Research Cen-)31 W
9000 16108 MT
(ter \050SRC\051. Other Digital research groups are located)
125 W( in Paris \050PRL\051 and in Cambridge,)126 W
9000 17304 MT
(Massachusetts \050CRL\051.)SH
10200 19477 MT
(Our research is directed towards mainstream high-performance computer systems. Our)18 W
9000 20673 MT
(prototypes are intended to)
53 W( foreshadow the future computing environments used by many)54 W
9000 21869 MT
(Digital customers. The)
77 W( long-term goal of WRL is to aid and accelerate the development)76 W
9000 23065 MT
(of high-performance uni- and)
126 W( multi-processors. The research projects within WRL will)127 W
9000 24261 MT
(address various aspects of high-performance computing.)SH
10200 26434 MT
(We believe that significant advances in computer systems do not come from)
5 W( any single)4 W
9000 27630 MT
(technological advance. Technologies, both hardware and software,)
79 W( do not all advance at)80 W
9000 28826 MT
(the same pace. System design is the art of composing systems which use)
119 W( each level of)118 W
9000 30022 MT
(technology in an appropriate balance.)
151 W( A major advance in overall system performance)152 W
9000 31218 MT
(will require reexamination of all aspects of the system.)SH
10200 33391 MT
(We do work in the design, fabrication and packaging of)
1 W( hardware; language processing)SH
9000 34587 MT
(and scaling issues)
173 W( in system software design; and the exploration of new applications)174 W
9000 35783 MT
(areas that are opening up with the advent of higher performance systems.)
58 W( Researchers at)57 W
9000 36979 MT
(WRL cooperate closely and move freely among the various levels of system design.)
29 W( This)30 W
9000 38175 MT
(allows us to explore a wide range of tradeoffs to meet system goals.)SH
10200 40126 MT
(We publish the results of our work in a)
222 W( variety of journals, conferences, research)221 W
9000 41322 MT
(reports, and technical notes.  This document)
155 W( is a technical note. We use this form for)156 W
9000 42518 MT
(rapid distribution of)
277 W( technical material. Usually this represents research in progress.)276 W
9000 43714 MT
(Research reports are)
76 W( normally accounts of completed research and may include material)77 W
9000 44910 MT
(from earlier technical notes.)SH
10200 46861 MT
(Research reports and technical)
154 W( notes may be ordered from us.  You may mail your)153 W
9000 48057 MT
(order to:)SH
11200 49709 MT
(Technical Report Distribution)SH
11200 50905 MT
(DEC Western Research Laboratory, UCO-4)SH
11200 52101 MT
(100 Hamilton Avenue)SH
11200 53297 MT
(Palo Alto, California 94301)
SH( USA)550 W
9000 54949 MT
(Reports and notes may)
203 W( also be ordered by electronic mail. Use one of the following)204 W
9000 56145 MT
(addresses:)SH
12600 58537 MT
(Digital E-net:)SH
/Courier SF
27000 XM
(DECWRL::WRL-TECHREPORTS)SH
/Times-Roman SF
12600 60929 MT
(DARPA Internet:)SH
/Courier SF
27000 XM
(WRL-Techreports@decwrl.dec.com)SH
/Times-Roman SF
12600 63321 MT
(CSnet:)SH
/Courier SF
27000 XM
(WRL-Techreports@decwrl.dec.com)SH
/Times-Roman SF
12600 65713 MT
(UUCP:)SH
/Courier SF
27000 XM
(decwrl!wrl-techreports)SH
/Times-Roman SF
9000 67465 MT
(To obtain more details)
136 W( on ordering by electronic mail, send a message to one of these)135 W
9000 68661 MT
(addresses with the word ``)101 W
/Courier SF
(help)SH
/Times-Roman SF
('' in the Subject line; you will receive detailed instruc-)101 W
9000 69857 MT
(tions.)SH
ES
%%Page: 1 3 
BS
0 SI
20 /Times-Bold AF
16956 19340 MT
(Mostly-Copying Garbage Collection)SH
19148 21652 MT
(Picks Up Generations and C++)SH
16 SS 
27268 27700 MT
(Joel F. Bartlett)SH
14 SS 
28200 33332 MT
(October, 1989)SH
16 SS 
29423 42968 MT
(Abstract)SH
12 /Times-Roman AF
13800 45821 MT
(The "mostly-copying" garbage collection algorithm provides a way to perform)72 W
12600 47216 MT
(compacting garbage collection in spite of)
111 W( the presence of ambiguous pointers in)112 W
12600 48611 MT
(the root set.  As originally defined, each)
72 W( collection required almost all accessible)71 W
12600 50006 MT
(objects to be moved.)
323 W( While)
948 W( adequate for many applications, programs that)324 W
12600 51401 MT
(retained a large amount of storage spent a significant)
23 W( amount of time garbage col-)22 W
12600 52796 MT
(lecting. To)
438 W( improve performance of these applications, a)
69 W( generational version of)70 W
12600 54191 MT
(the algorithm has been designed.  This note reports on this extension of the algo-)59 W
12600 55586 MT
(rithm, and its application in collectors for Scheme and C++.)SH
14 SS 
27083 62320 MT
(Copyright)SH
/Symbol SF
33111 XM
(\323)SH
/Times-Roman SF
34917 XM
(1989)SH
23650 63715 MT
(Digital Equipment Corporation)SH
1 SS 
7 9000 72007 PB %!                      % magic number--identifies it as a PS file
50 dict begin
/verylight 0.95 def
/lightgray 0.8 def
/darkgray  0.1 def
/inch {72 mul} def
 /gstring (g) def
/logo {gsave % create a 1 unit high digital logo
  /Helvetica-Bold findfont [.6 0 0 .75 0 0] makefont setfont
   -3.425 2 div 0 translate
  /box {
    newpath
    0 0 moveto
    .425 0 lineto
    0 1 rlineto
    0 1 lineto
    closepath darkgray setgray fill
    word exch 1 getinterval
    1 setgray
    dup stringwidth pop .425 exch sub 2 div .225 moveto
    dup gstring eq {0 .05 rmoveto} if
    show
    } def

  /boxstr {gsave
    /word exch def
    0 1 word length 1 sub {box .5 0 translate} for
    grestore} def

  (digital) boxstr
  grestore} def
0.0 inch -0.33 inch translate
gsave 22 dup scale logo grestore
0.7 inch 0.1 inch moveto

/Times-Bold findfont 12 scalefont setfont
(Western Research Laboratory  ) show
/Times-Roman findfont 12 scalefont setfont
( 100 Hamilton Avenue  ) show
( Palo Alto, California 94301 USA) show
end 
 PE ES
%%Page: 1 4 
BS
0 SI
14 /Times-Bold AF
9000 8138 MT
(1. Introduction)SH
12 /Times-Roman AF
10200 10401 MT
(The "mostly-copying" garbage collection algorithm)
116 W( [1] [2])
SH( was)
116 W( developed to allow compact-)117 W
9000 11796 MT
(ing garbage collection in environments hostile to classical copying collection algorithms.)
13 W( Unlike)324 W
9000 13191 MT
(classical copying collectors, it is able to tolerate ambiguous pointers)
192 W( in its root set. This has)193 W
9000 14586 MT
(allowed it to)
33 W( be used to manage storage in a portable Scheme system, Scheme->C, that compiles)32 W
9000 15981 MT
(Scheme to C)
39 W( [3].)
SH( In)
378 W( such an environment, the runtime system has no)
39 W( control over or knowledge)40 W
9000 17376 MT
(of how the stack and registers are used.  As originally defined, the)
133 W( mostly-copying collector's)132 W
9000 18771 MT
(behavior is similar to that of the classical)
89 W( "stop-and-copy" collector.  Both have a running time)90 W
9000 20166 MT
(that is O\050accessible)
321 W( storage\051)
SH( and reclaim memory by moving)
321 W( accessible storage to another)320 W
9000 21561 MT
("space" in memory.)SH
10200 23933 MT
(While such a collector has)
158 W( adequate performance for many applications, it does have some)159 W
9000 25328 MT
(limitations. In)
376 W( large)
38 W( programs, each time a garbage collection occurs there is a significant pause)37 W
9000 26723 MT
(in computation)
74 W( as almost all accessible storage must be copied, and the time spent garbage col-)75 W
9000 28118 MT
(lecting can be a significant portion of the total program)
162 W( execution time.  For example, Steele)161 W
9300 29513 MT
([10] reports that large Lisp programs)
130 W( spend 10 to 40 percent of their time garbage collecting,)131 W
9000 30908 MT
(and experience)
61 W( with Scheme->C suggests similar behavior.  Before trying to improve this situa-)60 W
9000 32303 MT
(tion, one should remember that different programs)
93 W( require different garbage collector behavior.)94 W
9000 33698 MT
(For example, an interactive graphics editor wants to minimize the program)
133 W( pauses during gar-)132 W
9000 35093 MT
(bage collection, while a Scheme compiler wants to minimize)
6 W( the total time spent garbage collect-)7 W
9000 36488 MT
(ing.)SH
10200 38860 MT
(Generational garbage collection techniques appear to be able)
24 W( to satisfy the needs of both types)23 W
9000 40255 MT
(of programs; the remainder of this note describes a "generational mostly-copying" garbage col-)90 W
9000 41650 MT
(lector. Section)
496 W( 2 introduces)
98 W( generational collection and is followed by a review of the mostly-)97 W
9000 43045 MT
(copying collection algorithm in section 3.  These ideas)
148 W( are merged in section 4, which shows)149 W
9000 44440 MT
(how the mostly-copying algorithm can be made generational.  Section 5)
15 W( describes the implemen-)14 W
9000 45835 MT
(tation in the Scheme->C system, and section 6 describes the implementation)
57 W( for C++.  The note)58 W
9000 47230 MT
(ends with the conclusion in section 7 that a "generational mostly-copying" collector)
139 W( is able to)138 W
9000 48625 MT
(provide performance improvements for both interactive and non-interactive programs.)SH
14 /Times-Bold AF
9000 52443 MT
(2. An Introduction to Generational Garbage Collection)SH
12 /Times-Roman AF
10200 54706 MT
(One way to improve the efficiency of copying garbage collectors is to)
104 W( reduce the amount of)105 W
9000 56101 MT
(storage copied on each garbage collection.  Generational garbage collectors attempt to do)
26 W( this by)25 W
9000 57496 MT
(treating objects)
191 W( differently depending upon their age.  In his overview of garbage collection,)192 W
9000 58891 MT
(McEntee [7])
SH( credits Lieberman and Hewitt with a proposal)
14 W( for generational garbage collection in)13 W
9000 60286 MT
(1980, and Moon with)
144 W( a later implementation of a generational garbage collector for the Sym-)145 W
9000 61681 MT
(bolics 3600.  Work more relevant to)
19 W( the current effort is that done on conventional processors by)18 W
10 SS 
20902 62695 MT
(1)SH
12 SS 
9000 63076 MT
(Ungar [12] for Smalltalk)SH
21702 XM
(and Shaw [9] for Common Lisp.)SH
10200 65448 MT
(Generational garbage collectors rely on two observations about dynamic storage)
166 W( allocation:)167 W
9000 66843 MT
(new objects are more likely to be freed than old objects, and new objects)
90 W( typically point to old)89 W
10800 50 9000 69990 UL
8 SS 
10000 71655 MT
(1)SH
10 SS 
10400 72000 MT
(Ungar also originated the generational garbage collection slogan: "young objects die young.")SH
32150 75600 MT
(1)SH
ES
%%Page: 2 5 
BS
0 SI
10 /Times-Roman AF
18196 4286 MT
(M)SH
8 SS 
(OSTLY)SH
10 SS 
(-C)SH
8 SS 
(OPYING)SH
10 SS 
25937 XM
(G)SH
8 SS 
(ARBAGE)SH
10 SS 
30200 XM
(C)SH
8 SS 
(OLLECTION)SH
10 SS 
35607 XM
(P)SH
8 SS 
(ICKS)SH
10 SS 
38236 XM
(U)SH
8 SS 
(P)SH
12 SS 
5400 8023 MT
(objects. These)
382 W( garbage collectors ignore long-lived objects and)
41 W( concentrate on reclaiming space)42 W
5400 9418 MT
(occupied by short-lived objects.  The)
36 W( algorithm can be illustrated by considering garbage collec-)35 W
5400 10813 MT
(tion with two generations \050additional generations can be added in a straightforward manner\051.)SH
6600 13185 MT
(When an object is initially allocated,)
107 W( it is considered to be a member of the first generation.)108 W
5400 14580 MT
(Once an object)
116 W( has survived some number of collections, it is moved to the second generation)115 W
5400 15975 MT
(\050also known as the stable set\051.)
149 W( When)
599 W( storage is reclaimed, one ignores stable set objects and)150 W
5400 17370 MT
(attempts to recover it from the inaccessible)
48 W( first generation objects.  Only when one is unable to)47 W
5400 18765 MT
(get enough)
70 W( space from first generation objects will one garbage collect objects belonging to the)71 W
5400 20160 MT
(stable set.)SH
6600 22532 MT
(Generational garbage collectors need)
85 W( a larger root set than either the mostly-copying or clas-)84 W
5400 23927 MT
(sical stop-and-copy collectors.  Besides the usual register and stack contents, they must also)207 W
5400 25322 MT
(know about all stable set objects that reference first generation objects.)
240 W( If)
779 W( this information)239 W
5400 26717 MT
(\050called the remembered set\051 were not known, first generation objects whose)
10 W( only references were)11 W
5400 28112 MT
(from stable set objects would be deleted in error.  The remembered set)
127 W( may be maintained by)126 W
5400 29507 MT
(either software tests at appropriate stores in the program)
111 W( or by virtual memory hardware traps.)112 W
5400 30902 MT
(With this introduction to generational collection)
126 W( complete, we will now turn our attention to a)125 W
5400 32297 MT
(review of the mostly-copying collection algorithm.)SH
14 /Times-Bold AF
5400 36115 MT
(3. A Review of Mostly-Copying Collection)SH
12 /Times-Roman AF
6600 38378 MT
(The mostly-copying collector is an evolution of)
26 W( the classical stop-and-copy collector)
27 W( [5].)
SH( Both)27 W
5400 39773 MT
(algorithms divide the storage area into)
229 W( two equal semispaces: "old space" and "new space".)228 W
5400 41168 MT
(When all the storage is allocated in one semispace,)
45 W( the garbage collector is invoked.  It recovers)46 W
5400 42563 MT
(space by using a set of root)
67 W( pointers \050also known as the base set\051 to move all accessible storage)66 W
5400 43958 MT
(to the other semispace.)
179 W( Where the mostly-copying algorithm differs from stop-and-copy is in)180 W
5400 45353 MT
(how it defines its root pointer set and semispaces.)SH
6600 47725 MT
(The mostly-copying algorithm makes few restrictions on the root set. It simply requires that)117 W
5400 49120 MT
(somewhere in the set of cells,)177 W
/Times-Italic SF
20964 XM
(R)SH
/Times-Roman SF
(, there be sufficient "hints" to find all)
177 W( accessible storage.  A)178 W
5400 50515 MT
(typical)SH
/Times-Italic SF
9008 XM
(R)SH
/Times-Roman SF
10081 XM
(would be the)
40 W( current program state, i.e. the entire contents of the processor's stack and)39 W
5400 51910 MT
(registers.)SH
6600 54282 MT
(The heap used by)
20 W( the mostly-copying algorithm is a contiguous region of storage, divided into)21 W
10 SS 
19980 55296 MT
(2)SH
12 SS 
5400 55677 MT
(a number of equal-size pages)145 W
20480 XM
(. Associated)
590 W( with each page is a space identifier,)144 W
/Times-Italic SF
45790 XM
(space)SH
/Times-Roman SF
(, which)144 W
5400 57072 MT
(identifies the "space" that objects on the page)
4 W( belong to.  In the figures illustrating this algorithm,)5 W
5400 58467 MT
(the space identifier associated with the page containing the)
100 W( cell is the number to the left of the)99 W
5400 59862 MT
(cell, and each cell is assumed to be in its own page \050see Figure 1\051.)SH
6600 62234 MT
(Two space identifiers:)32 W
/Times-Italic SF
17665 XM
(current_space)SH
/Times-Roman SF
24865 XM
(and)SH
/Times-Italic SF
26931 XM
(next_space)SH
/Times-Roman SF
(, identify important sets of pages. During)33 W
5400 63629 MT
(normal allocation,)357 W
/Times-Italic SF
15150 XM
(current_space)SH
/Times-Roman SF
22674 XM
(and)SH
/Times-Italic SF
25063 XM
(next_space)SH
/Times-Roman SF
31052 XM
(are equal, but during garbage collection,)356 W
/Times-Italic SF
5400 65024 MT
(next_space)SH
/Times-Roman SF
11149 XM
(is set to the "next" space identifier.  When comparing this)
116 W( algorithm with the clas-)117 W
5400 66419 MT
(sical one, it is reasonable to think of)
55 W( pages with their)54 W
/Times-Italic SF
31607 XM
(space)SH
/Times-Roman SF
34694 XM
(identifier equal to)54 W
/Times-Italic SF
43692 XM
(next_space)SH
/Times-Roman SF
49379 XM
(as the)54 W
10800 50 5400 69990 UL
8 SS 
6400 71655 MT
(2)SH
10 SS 
6800 72000 MT
(The page size used by the algorithm is independent of any underlying hardware's page size.)SH
28550 75600 MT
(2)SH
ES
%%Page: 3 6 
BS
0 SI
10 /Times-Roman AF
21796 4286 MT
(M)SH
8 SS 
(OSTLY)SH
10 SS 
(-C)SH
8 SS 
(OPYING)SH
10 SS 
29537 XM
(G)SH
8 SS 
(ARBAGE)SH
10 SS 
33800 XM
(C)SH
8 SS 
(OLLECTION)SH
10 SS 
39207 XM
(P)SH
8 SS 
(ICKS)SH
10 SS 
41836 XM
(U)SH
8 SS 
(P)SH
1 SS 
23998 9000 31198 PB %!PS-Adobe-2.0 EPSF-1.2
%%Creator:Adobe Illustrator(TM) 1.1 M00006056N
%%For:Christopher Kent DEC Western Research Laboratory
%%Title:sc1-memory.psf
%%CreationDate:2/17/88 2:06 PM
%%DocumentProcSets:Adobe_Illustrator_1.1 0 0
%%DocumentSuppliedProcSets:Adobe_Illustrator_1.1 0 0
%%DocumentFonts:Courier
%%+Helvetica
%%BoundingBox:26 6 423 217
%%TemplateBox:288 88 288 88
%%EndComments
%%BeginProcSet:Adobe_Illustrator_1.1 0 0
% Copyright (C) 1987 Adobe Systems Incorporated.
% All Rights Reserved.
% Adobe Illustrator is a trademark of Adobe Systems Incorporated.
/Adobe_Illustrator_1.1 dup 100 dict def load begin
/Version 0 def
/Revision 0 def
% definition operators
/bdef {bind def} bind def
/ldef {load def} bdef
/xdef {exch def} bdef
% graphic state operators
/_K {3 index add neg dup 0 lt {pop 0} if 3 1 roll} bdef
/_k /setcmybcolor where 
{/setcmybcolor get} {{1 sub 4 1 roll _K _K _K setrgbcolor pop} bind} ifelse def
/g {/_b xdef /p {_b setgray} def} bdef
/G {/_B xdef /P {_B setgray} def} bdef
/k {/_b xdef /_y xdef /_m xdef /_c xdef /p {_c _m _y _b _k} def} bdef
/K {/_B xdef /_Y xdef /_M xdef /_C xdef /P {_C _M _Y _B _k} def} bdef
/d /setdash ldef
/_i currentflat def
/i {dup 0 eq {pop _i} if setflat} bdef
/j /setlinejoin ldef
/J /setlinecap ldef
/M /setmiterlimit ldef
/w /setlinewidth ldef
% path construction operators
/_R {.25 sub round .25 add} bdef
/_r {transform _R exch _R exch itransform} bdef
/c {_r curveto} bdef
/C /c ldef
/v {currentpoint 6 2 roll _r curveto} bdef
/V /v ldef
/y {_r 2 copy curveto} bdef
/Y /y ldef
/l {_r lineto} bdef
/L /l ldef
/m {_r moveto} bdef
% error operators
/_e [] def
/_E {_e length 0 ne {gsave 0 g 0 G 0 i 0 J 0 j 1 w 10 M [] 0 d
/Courier 20 0 0 1 z [0.966 0.259 -0.259 0.966
_e 0 get _e 2 get add 2 div _e 1 get _e 3 get add 2 div] e _f t T grestore} if} bdef
/_fill {{fill} stopped
{/_e [pathbbox] def /_f (ERROR: can't fill, increase flatness) def n _E} if} bdef
/_stroke {{stroke} stopped
{/_e [pathbbox] def /_f (ERROR: can't stroke, increase flatness) def n _E} if} bdef
% path painting operators
/n /newpath ldef
/N /n ldef
/F {p _fill} bdef
/f {closepath F} bdef
/S {P _stroke} bdef
/s {closepath S} bdef
/B {gsave F grestore S} bdef
/b {closepath B} bdef
% text block construction and painting operators
/_s /ashow ldef
/_S {(?) exch {2 copy 0 exch put pop dup false charpath currentpoint _g setmatrix
_stroke _G setmatrix moveto 3 copy pop rmoveto} forall pop pop pop n} bdef
/_A {_a moveto _t exch 0 exch} bdef
/_L {0 _l neg translate _G currentmatrix pop} bdef
/_w {dup stringwidth exch 3 -1 roll length 1 sub _t mul add exch} bdef
/_z [{0 0} bind {dup _w exch neg 2 div exch neg 2 div} bind {dup _w exch neg exch neg} bind] def
/z {_z exch get /_a xdef /_t xdef /_l xdef exch findfont exch scalefont setfont} bdef
/_g matrix def
/_G matrix def
/_D {_g currentmatrix pop gsave concat _G currentmatrix pop} bdef
/e {_D p /t {_A _s _L} def} bdef
/r {_D P /t {_A _S _L} def} bdef
/a {_D /t {dup p _A _s P _A _S _L} def} bdef
/o {_D /t {pop _L} def} bdef
/T {grestore} bdef
% group construction operators
/u {} bdef
/U {} bdef
% font construction operators
/Z {findfont begin currentdict dup length dict begin
{1 index /FID ne {def} {pop pop} ifelse} forall /FontName exch def dup length 0 ne
{/Encoding Encoding 256 array copy def 0 exch {dup type /nametype eq
{Encoding 2 index 2 index put pop 1 add} {exch pop} ifelse} forall} if pop
currentdict dup end end /FontName get exch definefont pop} bdef
end
%%EndProcSet
%%EndProlog
%%BeginSetup
Adobe_Illustrator_1.1 begin
n
%%BeginEncoding:_Helvetica Helvetica
[
39/quotesingle 96/grave 128/Adieresis/Aring/Ccedilla/Eacute/Ntilde/Odieresis
/Udieresis/aacute/agrave/acircumflex/adieresis/atilde/aring/ccedilla/eacute
/egrave/ecircumflex/edieresis/iacute/igrave/icircumflex/idieresis/ntilde
/oacute/ograve/ocircumflex/odieresis/otilde/uacute/ugrave/ucircumflex
/udieresis/dagger/.notdef/cent/sterling/section/bullet/paragraph/germandbls
/registered/copyright/trademark/acute/dieresis/.notdef/AE/Oslash
/.notdef/.notdef/.notdef/.notdef/yen/.notdef/.notdef/.notdef
/.notdef/.notdef/.notdef/ordfeminine/ordmasculine/.notdef/ae/oslash
/questiondown/exclamdown/logicalnot/.notdef/florin/.notdef/.notdef
/guillemotleft/guillemotright/ellipsis/.notdef/Agrave/Atilde/Otilde/OE/oe
/endash/emdash/quotedblleft/quotedblright/quoteleft/quoteright/.notdef
/.notdef/ydieresis/Ydieresis/fraction/currency/guilsinglleft/guilsinglright
/fi/fl/daggerdbl/periodcentered/quotesinglbase/quotedblbase/perthousand
/Acircumflex/Ecircumflex/Aacute/Edieresis/Egrave/Iacute/Icircumflex
/Idieresis/Igrave/Oacute/Ocircumflex/.notdef/Ograve/Uacute/Ucircumflex
/Ugrave/dotlessi/circumflex/tilde/macron/breve/dotaccent/ring/cedilla
/hungarumlaut/ogonek/caron
]/_Helvetica/Helvetica Z
%%EndEncoding
%%EndSetup
u
0 g
0 G
0 i
0 J
0 j
0.2 w
10 M
[]0 d
%%Note:
131.5 165.25 m
131.5 214.25 L
28.5 214.25 L
28.5 165.25 L
131.5 165.25 L
s
80 189.75 m
S
U
/_Helvetica 12 12 0 1 z
[1 0 0 1 79.5 184.25]e
(page space)t
T
u
234.5 165.25 m
234.5 214.25 L
131.5 214.25 L
131.5 165.25 L
234.5 165.25 L
s
183 189.75 m
S
U
[1 0 0 1 182.5 184.25]e
(page space)t
T
u
u
131.5 116.25 m
131.5 165.25 L
28.5 165.25 L
28.5 116.25 L
131.5 116.25 L
s
80 140.75 m
S
U
[1 0 0 1 79.5 135.25]e
(page space)t
T
U
u
u
234.5 116.25 m
234.5 165.25 L
131.5 165.25 L
131.5 116.25 L
234.5 116.25 L
s
183 140.75 m
S
U
[1 0 0 1 182.5 135.25]e
(page space)t
T
U
u
u
131.5 67.25 m
131.5 116.25 L
28.5 116.25 L
28.5 67.25 L
131.5 67.25 L
s
80 91.75 m
S
U
[1 0 0 1 79.5 86.25]e
(page space)t
T
U
u
u
234.5 67.25 m
234.5 116.25 L
131.5 116.25 L
131.5 67.25 L
234.5 67.25 L
s
183 91.75 m
S
U
[1 0 0 1 182.5 86.25]e
(page space)t
T
U
u
u
131.5 18.25 m
131.5 67.25 L
28.5 67.25 L
28.5 18.25 L
131.5 18.25 L
s
80 42.75 m
S
U
[1 0 0 1 79.5 37.25]e
(page space)t
T
U
u
u
234.5 18.25 m
234.5 67.25 L
131.5 67.25 L
131.5 18.25 L
234.5 18.25 L
s
183 42.75 m
S
U
[1 0 0 1 182.5 37.25]e
(page space)t
T
U
u
u
408.5 174.75 m
408.5 206.75 L
322.5 206.75 L
322.5 174.75 L
408.5 174.75 L
s
365.5 190.75 m
S
U
0.5 w
[2 2 ]0 d
322.5 190.75 m
408.5 190.75 l
S
U
1 w
[]0 d
[1 0 0 1 366.5 9.75]e
(\( \( B D \) C D \))t
T
u
u
0.2 w
408.5 126.75 m
408.5 158.75 L
322.5 158.75 L
322.5 126.75 L
408.5 126.75 L
s
365.5 142.75 m
S
U
0.5 w
[2 2 ]0 d
322.5 142.75 m
408.5 142.75 l
S
1 w
[]0 d
[1 0 0 1 365.5 146.75]e
(B)t
T
U
u
u
0.2 w
408.5 79.75 m
408.5 111.75 L
322.5 111.75 L
322.5 79.75 L
408.5 79.75 L
s
365.5 95.75 m
S
U
0.5 w
[2 2 ]0 d
322.5 95.75 m
408.5 95.75 l
S
1 w
[]0 d
[1 0 0 1 365.5 99.75]e
(C)t
T
U
u
u
0.2 w
409.5 35.75 m
409.5 67.75 L
323.5 67.75 L
323.5 35.75 L
409.5 35.75 L
s
366.5 51.75 m
S
U
0.5 w
[2 2 ]0 d
323.5 51.75 m
409.5 51.75 l
S
1 w
[]0 d
[1 0 0 1 364.5 54.75]e
(D)t
T
[1 0 0 1 365.5 37.75]e
(nil)t
T
U
0.2 w
388.5 181.75 m
420.5 181.75 l
420.5 101.75 l
409.5 101.75 l
S
339.5 132.75 m
311.5 132.75 l
311.5 58.75 l
320.5 58.75 l
S
409.5 58.75 m
420.5 58.75 l
420.5 86.75 l
386.5 86.75 l
S
322.5 150.75 m
314.5 150.75 l
314.5 196.75 l
333.5 196.75 l
S
u
412.5 97.75 m
408.75 101.5 l
412.5 105.25 L
412.5 97.75 L
f
U
u
413.5 54.75 m
409.75 58.5 l
413.5 62.25 L
413.5 54.75 L
f
U
u
318.5 146.75 m
322.25 150.5 l
318.5 154.25 L
318.5 146.75 L
f
U
u
319.5 54.75 m
323.25 58.5 l
319.5 62.25 L
319.5 54.75 L
f
U
1 w
[1 0 0 1 292.5 182.25]e
(1)t
T
[1 0 0 1 291.5 139.25]e
(1)t
T
[1 0 0 1 292.5 98.25]e
(1)t
T
[1 0 0 1 292.5 46.25]e
(1)t
T
%%Trailer
_E end
 PE 12 /Times-Bold AF
16563 33821 MT
(Figure 1:)SH
/Times-Roman SF
22463 XM
(Mostly-copying memory organization and sample list)SH
9000 35930 MT
(analogue of "new space", and those with their)194 W
/Times-Italic SF
32832 XM
(space)SH
/Times-Roman SF
36059 XM
(identifier equal to)194 W
/Times-Italic SF
45477 XM
(current_space)SH
/Times-Roman SF
52838 XM
(as the)195 W
9000 37325 MT
(analogue of "old space".  Like the classical one, this collector works by)
150 W( moving objects from)149 W
9000 38720 MT
("old space" to "new space".)
25 W( While)
352 W( this can be done by copying objects to newly allocated pages)26 W
9000 40115 MT
(in)SH
/Times-Italic SF
10245 XM
(next_space)SH
/Times-Roman SF
(, it)
11 W( can also be done by changing the)10 W
/Times-Italic SF
33470 XM
(space)SH
/Times-Roman SF
36513 XM
(identifier associated with the page hold-)10 W
9000 41510 MT
(ing the object to)172 W
/Times-Italic SF
17757 XM
(next_space)SH
/Times-Roman SF
(. This)
644 W( later method is the key to mostly-copying)
172 W( collection as it)173 W
9000 42905 MT
(leaves the object's address unchanged.)SH
10200 45277 MT
(Memory allocation is a two part process: first, allocate a page of memory, and)
113 W( then allocate)112 W
9000 46672 MT
(space from it. A page is free when its)111 W
/Times-Italic SF
28201 XM
(space)SH
/Times-Roman SF
31346 XM
(field is not equal to)112 W
/Times-Italic SF
41476 XM
(current_space)SH
/Times-Roman SF
48755 XM
(or)SH
/Times-Italic SF
50167 XM
(next_space)SH
/Times-Roman SF
(.)SH
9000 48067 MT
(When it is allocated, its)SH
/Times-Italic SF
20604 XM
(space)SH
/Times-Roman SF
23637 XM
(identifier is set to)SH
/Times-Italic SF
32308 XM
(next_space)SH
/Times-Roman SF
(.)SH
10200 50439 MT
(The garbage collector is invoked when half the pages in the heap)
12 W( have been allocated.  It starts)11 W
9000 51834 MT
(by advancing)175 W
/Times-Italic SF
16083 XM
(next_space)SH
/Times-Roman SF
21891 XM
(to the next space identifier. Next, it makes)
175 W( an educated guess as to)176 W
9000 53229 MT
(what portions of the heap contain accessible items.  This is done by)
47 W( examining each word in the)46 W
9000 54624 MT
(stack and the registers and looking for "hints".  If the word could)
52 W( be a pointer into a page of the)53 W
9000 56019 MT
(heap allocated to the)112 W
/Times-Italic SF
19649 XM
(current_space)SH
/Times-Roman SF
(, then that page is)
112 W( promoted to)111 W
/Times-Italic SF
42167 XM
(next_space)SH
/Times-Roman SF
47911 XM
(by changing the)111 W
9000 57414 MT
(page's)SH
/Times-Italic SF
12433 XM
(space)SH
/Times-Roman SF
15466 XM
(identifier \050see Figure 2\051.)SH
10200 59786 MT
(At the completion)
201 W( of this phase, all pages containing items which might be referenced by)202 W
9000 61181 MT
(pointers in the stack or registers are in)169 W
/Times-Italic SF
28956 XM
(next_space)SH
/Times-Roman SF
(. The)
638 W( items which they reference are now)168 W
9000 62576 MT
(copied to)11 W
/Times-Italic SF
13756 XM
(next_space)SH
/Times-Roman SF
19400 XM
(\050see Figure 3\051.  This)
11 W( is done by sweeping across all pages in the)12 W
/Times-Italic SF
50467 XM
(next_space)SH
/Times-Roman SF
9000 63971 MT
(and updating their pointers by a method similar)
31 W( to that used by the stop-and-copy collector. Like)30 W
9000 65366 MT
(the stop-and-copy algorithm, the)
88 W( objects in the heap must be self-identifying at collection time,)89 W
9000 66761 MT
(and their)
136 W( pointer fields must be valid. Once all pointers in pages in)135 W
/Times-Italic SF
43030 XM
(next_space)SH
/Times-Roman SF
48798 XM
(have been up-)135 W
9000 68156 MT
(dated,)SH
/Times-Italic SF
12200 XM
(current_space)SH
/Times-Roman SF
19367 XM
(is set to)SH
/Times-Italic SF
23336 XM
(next_space)SH
/Times-Roman SF
28969 XM
(and garbage collection is complete.)SH
10200 70528 MT
(For more information on this algorithm and its variants, the reader is directed to the technical)57 W
9000 71923 MT
(report [1].)
SH( With)
884 W( this review of mostly-copying garbage collection complete,)
292 W( it is now ap-)291 W
9000 73318 MT
(propriate to turn our attention to making the algorithm generational.)SH
10 SS 
32150 75600 MT
(3)SH
ES
%%Page: 4 7 
BS
0 SI
10 /Times-Roman AF
18196 4286 MT
(M)SH
8 SS 
(OSTLY)SH
10 SS 
(-C)SH
8 SS 
(OPYING)SH
10 SS 
25937 XM
(G)SH
8 SS 
(ARBAGE)SH
10 SS 
30200 XM
(C)SH
8 SS 
(OLLECTION)SH
10 SS 
35607 XM
(P)SH
8 SS 
(ICKS)SH
10 SS 
38236 XM
(U)SH
8 SS 
(P)SH
1 SS 
19198 5400 26398 PB %!PS-Adobe-2.0 EPSF-1.2
%%Creator:Adobe Illustrator(TM) 1.1 M00006056N
%%For:Christopher Kent DEC Western Research Laboratory
%%Title:sc1-promote.psf
%%CreationDate:1/20/88 6:43 PM
%%DocumentProcSets:Adobe_Illustrator_1.1 0 0
%%DocumentSuppliedProcSets:Adobe_Illustrator_1.1 0 0
%%DocumentFonts:Courier
%%+Helvetica
%%BoundingBox:154 6 295 181
%%TemplateBox:240 70 240 70
%%EndComments
%%BeginProcSet:Adobe_Illustrator_1.1 0 0
% Copyright (C) 1987 Adobe Systems Incorporated.
% All Rights Reserved.
% Adobe Illustrator is a trademark of Adobe Systems Incorporated.
/Adobe_Illustrator_1.1 dup 100 dict def load begin
/Version 0 def
/Revision 0 def
% definition operators
/bdef {bind def} bind def
/ldef {load def} bdef
/xdef {exch def} bdef
% graphic state operators
/_K {3 index add neg dup 0 lt {pop 0} if 3 1 roll} bdef
/_k /setcmybcolor where 
{/setcmybcolor get} {{1 sub 4 1 roll _K _K _K setrgbcolor pop} bind} ifelse def
/g {/_b xdef /p {_b setgray} def} bdef
/G {/_B xdef /P {_B setgray} def} bdef
/k {/_b xdef /_y xdef /_m xdef /_c xdef /p {_c _m _y _b _k} def} bdef
/K {/_B xdef /_Y xdef /_M xdef /_C xdef /P {_C _M _Y _B _k} def} bdef
/d /setdash ldef
/_i currentflat def
/i {dup 0 eq {pop _i} if setflat} bdef
/j /setlinejoin ldef
/J /setlinecap ldef
/M /setmiterlimit ldef
/w /setlinewidth ldef
% path construction operators
/_R {.25 sub round .25 add} bdef
/_r {transform _R exch _R exch itransform} bdef
/c {_r curveto} bdef
/C /c ldef
/v {currentpoint 6 2 roll _r curveto} bdef
/V /v ldef
/y {_r 2 copy curveto} bdef
/Y /y ldef
/l {_r lineto} bdef
/L /l ldef
/m {_r moveto} bdef
% error operators
/_e [] def
/_E {_e length 0 ne {gsave 0 g 0 G 0 i 0 J 0 j 1 w 10 M [] 0 d
/Courier 20 0 0 1 z [0.966 0.259 -0.259 0.966
_e 0 get _e 2 get add 2 div _e 1 get _e 3 get add 2 div] e _f t T grestore} if} bdef
/_fill {{fill} stopped
{/_e [pathbbox] def /_f (ERROR: can't fill, increase flatness) def n _E} if} bdef
/_stroke {{stroke} stopped
{/_e [pathbbox] def /_f (ERROR: can't stroke, increase flatness) def n _E} if} bdef
% path painting operators
/n /newpath ldef
/N /n ldef
/F {p _fill} bdef
/f {closepath F} bdef
/S {P _stroke} bdef
/s {closepath S} bdef
/B {gsave F grestore S} bdef
/b {closepath B} bdef
% text block construction and painting operators
/_s /ashow ldef
/_S {(?) exch {2 copy 0 exch put pop dup false charpath currentpoint _g setmatrix
_stroke _G setmatrix moveto 3 copy pop rmoveto} forall pop pop pop n} bdef
/_A {_a moveto _t exch 0 exch} bdef
/_L {0 _l neg translate _G currentmatrix pop} bdef
/_w {dup stringwidth exch 3 -1 roll length 1 sub _t mul add exch} bdef
/_z [{0 0} bind {dup _w exch neg 2 div exch neg 2 div} bind {dup _w exch neg exch neg} bind] def
/z {_z exch get /_a xdef /_t xdef /_l xdef exch findfont exch scalefont setfont} bdef
/_g matrix def
/_G matrix def
/_D {_g currentmatrix pop gsave concat _G currentmatrix pop} bdef
/e {_D p /t {_A _s _L} def} bdef
/r {_D P /t {_A _S _L} def} bdef
/a {_D /t {dup p _A _s P _A _S _L} def} bdef
/o {_D /t {pop _L} def} bdef
/T {grestore} bdef
% group construction operators
/u {} bdef
/U {} bdef
% font construction operators
/Z {findfont begin currentdict dup length dict begin
{1 index /FID ne {def} {pop pop} ifelse} forall /FontName exch def dup length 0 ne
{/Encoding Encoding 256 array copy def 0 exch {dup type /nametype eq
{Encoding 2 index 2 index put pop 1 add} {exch pop} ifelse} forall} if pop
currentdict dup end end /FontName get exch definefont pop} bdef
end
%%EndProcSet
%%EndProlog
%%BeginSetup
Adobe_Illustrator_1.1 begin
n
%%BeginEncoding:_Helvetica Helvetica
[
39/quotesingle 96/grave 128/Adieresis/Aring/Ccedilla/Eacute/Ntilde/Odieresis
/Udieresis/aacute/agrave/acircumflex/adieresis/atilde/aring/ccedilla/eacute
/egrave/ecircumflex/edieresis/iacute/igrave/icircumflex/idieresis/ntilde
/oacute/ograve/ocircumflex/odieresis/otilde/uacute/ugrave/ucircumflex
/udieresis/dagger/.notdef/cent/sterling/section/bullet/paragraph/germandbls
/registered/copyright/trademark/acute/dieresis/.notdef/AE/Oslash
/.notdef/.notdef/.notdef/.notdef/yen/.notdef/.notdef/.notdef
/.notdef/.notdef/.notdef/ordfeminine/ordmasculine/.notdef/ae/oslash
/questiondown/exclamdown/logicalnot/.notdef/florin/.notdef/.notdef
/guillemotleft/guillemotright/ellipsis/.notdef/Agrave/Atilde/Otilde/OE/oe
/endash/emdash/quotedblleft/quotedblright/quoteleft/quoteright/.notdef
/.notdef/ydieresis/Ydieresis/fraction/currency/guilsinglleft/guilsinglright
/fi/fl/daggerdbl/periodcentered/quotesinglbase/quotedblbase/perthousand
/Acircumflex/Ecircumflex/Aacute/Edieresis/Egrave/Iacute/Icircumflex
/Idieresis/Igrave/Oacute/Ocircumflex/.notdef/Ograve/Uacute/Ucircumflex
/Ugrave/dotlessi/circumflex/tilde/macron/breve/dotaccent/ring/cedilla
/hungarumlaut/ogonek/caron
]/_Helvetica/Helvetica Z
%%EndEncoding
%%EndSetup
u
u
0 g
0 G
0 i
0 J
0 j
0.2 w
10 M
[]0 d
%%Note:
280.6677 147 m
280.6677 179 L
194.6677 179 L
194.6677 147 L
280.6677 147 L
s
237.6677 163 m
S
U
0.5 w
[2 2 ]0 d
194.6677 163 m
280.6677 163 l
S
U
u
u
0.2 w
[]0 d
280.6677 99 m
280.6677 131 L
194.6677 131 L
194.6677 99 L
280.6677 99 L
s
237.6677 115 m
S
U
0.5 w
[2 2 ]0 d
194.6677 115 m
280.6677 115 l
S
1 w
[]0 d
/_Helvetica 12 12 0 1 z
[1 0 0 1 237.6677 119]e
(B)t
T
U
u
u
0.2 w
280.6677 52 m
280.6677 84 L
194.6677 84 L
194.6677 52 L
280.6677 52 L
s
237.6677 68 m
S
U
0.5 w
[2 2 ]0 d
194.6677 68 m
280.6677 68 l
S
1 w
[]0 d
[1 0 0 1 237.6677 72]e
(C)t
T
U
u
u
0.2 w
281.6677 8 m
281.6677 40 L
195.6677 40 L
195.6677 8 L
281.6677 8 L
s
238.6677 24 m
S
U
0.5 w
[2 2 ]0 d
195.6677 24 m
281.6677 24 l
S
1 w
[]0 d
[1 0 0 1 236.6677 27]e
(D)t
T
[1 0 0 1 237.6677 10]e
(nil)t
T
U
0.2 w
260.6677 154 m
292.6677 154 l
292.6677 74 l
281.6677 74 l
S
211.6677 105 m
183.6677 105 l
183.6677 31 l
192.6677 31 l
S
281.6677 31 m
292.6677 31 l
292.6677 59 l
258.6677 59 l
S
194.6677 123 m
186.6677 123 l
186.6677 169 l
205.6677 169 l
S
u
284.6677 70 m
280.9177 73.75 l
284.6677 77.5 L
284.6677 70 L
f
U
u
285.6677 27 m
281.9177 30.75 l
285.6677 34.5 L
285.6677 27 L
f
U
u
190.6677 119 m
194.4177 122.75 l
190.6677 126.5 L
190.6677 119 L
f
U
u
191.6677 27 m
195.4177 30.75 l
191.6677 34.5 L
191.6677 27 L
f
U
1 w
[1 0 0 1 164.6677 154.5]e
(2)t
T
[1 0 0 1 163.6677 111.5]e
(1)t
T
[1 0 0 1 164.6677 70.5]e
(1)t
T
[1 0 0 1 164.6677 18.5]e
(1)t
T
%%Trailer
_E end
 PE 12 /Times-Bold AF
14032 29021 MT
(Figure 2:)SH
/Times-Roman SF
19932 XM
(Promote possibly referenced pages to)SH
/Times-Italic SF
38234 XM
(next_space)SH
1 SS 
19198 5400 49505 PB %!PS-Adobe-2.0 EPSF-1.2
%%Creator:Adobe Illustrator(TM) 1.1 M00006056N
%%For:Christopher Kent DEC Western Research Laboratory
%%Title:sc1-moverest.psf
%%CreationDate:1/20/88 6:44 PM
%%DocumentProcSets:Adobe_Illustrator_1.1 0 0
%%DocumentSuppliedProcSets:Adobe_Illustrator_1.1 0 0
%%DocumentFonts:Courier
%%+Helvetica
%%BoundingBox:92 4 357 179
%%TemplateBox:240 68 240 68
%%EndComments
%%BeginProcSet:Adobe_Illustrator_1.1 0 0
% Copyright (C) 1987 Adobe Systems Incorporated.
% All Rights Reserved.
% Adobe Illustrator is a trademark of Adobe Systems Incorporated.
/Adobe_Illustrator_1.1 dup 100 dict def load begin
/Version 0 def
/Revision 0 def
% definition operators
/bdef {bind def} bind def
/ldef {load def} bdef
/xdef {exch def} bdef
% graphic state operators
/_K {3 index add neg dup 0 lt {pop 0} if 3 1 roll} bdef
/_k /setcmybcolor where 
{/setcmybcolor get} {{1 sub 4 1 roll _K _K _K setrgbcolor pop} bind} ifelse def
/g {/_b xdef /p {_b setgray} def} bdef
/G {/_B xdef /P {_B setgray} def} bdef
/k {/_b xdef /_y xdef /_m xdef /_c xdef /p {_c _m _y _b _k} def} bdef
/K {/_B xdef /_Y xdef /_M xdef /_C xdef /P {_C _M _Y _B _k} def} bdef
/d /setdash ldef
/_i currentflat def
/i {dup 0 eq {pop _i} if setflat} bdef
/j /setlinejoin ldef
/J /setlinecap ldef
/M /setmiterlimit ldef
/w /setlinewidth ldef
% path construction operators
/_R {.25 sub round .25 add} bdef
/_r {transform _R exch _R exch itransform} bdef
/c {_r curveto} bdef
/C /c ldef
/v {currentpoint 6 2 roll _r curveto} bdef
/V /v ldef
/y {_r 2 copy curveto} bdef
/Y /y ldef
/l {_r lineto} bdef
/L /l ldef
/m {_r moveto} bdef
% error operators
/_e [] def
/_E {_e length 0 ne {gsave 0 g 0 G 0 i 0 J 0 j 1 w 10 M [] 0 d
/Courier 20 0 0 1 z [0.966 0.259 -0.259 0.966
_e 0 get _e 2 get add 2 div _e 1 get _e 3 get add 2 div] e _f t T grestore} if} bdef
/_fill {{fill} stopped
{/_e [pathbbox] def /_f (ERROR: can't fill, increase flatness) def n _E} if} bdef
/_stroke {{stroke} stopped
{/_e [pathbbox] def /_f (ERROR: can't stroke, increase flatness) def n _E} if} bdef
% path painting operators
/n /newpath ldef
/N /n ldef
/F {p _fill} bdef
/f {closepath F} bdef
/S {P _stroke} bdef
/s {closepath S} bdef
/B {gsave F grestore S} bdef
/b {closepath B} bdef
% text block construction and painting operators
/_s /ashow ldef
/_S {(?) exch {2 copy 0 exch put pop dup false charpath currentpoint _g setmatrix
_stroke _G setmatrix moveto 3 copy pop rmoveto} forall pop pop pop n} bdef
/_A {_a moveto _t exch 0 exch} bdef
/_L {0 _l neg translate _G currentmatrix pop} bdef
/_w {dup stringwidth exch 3 -1 roll length 1 sub _t mul add exch} bdef
/_z [{0 0} bind {dup _w exch neg 2 div exch neg 2 div} bind {dup _w exch neg exch neg} bind] def
/z {_z exch get /_a xdef /_t xdef /_l xdef exch findfont exch scalefont setfont} bdef
/_g matrix def
/_G matrix def
/_D {_g currentmatrix pop gsave concat _G currentmatrix pop} bdef
/e {_D p /t {_A _s _L} def} bdef
/r {_D P /t {_A _S _L} def} bdef
/a {_D /t {dup p _A _s P _A _S _L} def} bdef
/o {_D /t {pop _L} def} bdef
/T {grestore} bdef
% group construction operators
/u {} bdef
/U {} bdef
% font construction operators
/Z {findfont begin currentdict dup length dict begin
{1 index /FID ne {def} {pop pop} ifelse} forall /FontName exch def dup length 0 ne
{/Encoding Encoding 256 array copy def 0 exch {dup type /nametype eq
{Encoding 2 index 2 index put pop 1 add} {exch pop} ifelse} forall} if pop
currentdict dup end end /FontName get exch definefont pop} bdef
end
%%EndProcSet
%%EndProlog
%%BeginSetup
Adobe_Illustrator_1.1 begin
n
%%BeginEncoding:_Helvetica Helvetica
[
39/quotesingle 96/grave 128/Adieresis/Aring/Ccedilla/Eacute/Ntilde/Odieresis
/Udieresis/aacute/agrave/acircumflex/adieresis/atilde/aring/ccedilla/eacute
/egrave/ecircumflex/edieresis/iacute/igrave/icircumflex/idieresis/ntilde
/oacute/ograve/ocircumflex/odieresis/otilde/uacute/ugrave/ucircumflex
/udieresis/dagger/.notdef/cent/sterling/section/bullet/paragraph/germandbls
/registered/copyright/trademark/acute/dieresis/.notdef/AE/Oslash
/.notdef/.notdef/.notdef/.notdef/yen/.notdef/.notdef/.notdef
/.notdef/.notdef/.notdef/ordfeminine/ordmasculine/.notdef/ae/oslash
/questiondown/exclamdown/logicalnot/.notdef/florin/.notdef/.notdef
/guillemotleft/guillemotright/ellipsis/.notdef/Agrave/Atilde/Otilde/OE/oe
/endash/emdash/quotedblleft/quotedblright/quoteleft/quoteright/.notdef
/.notdef/ydieresis/Ydieresis/fraction/currency/guilsinglleft/guilsinglright
/fi/fl/daggerdbl/periodcentered/quotesinglbase/quotedblbase/perthousand
/Acircumflex/Ecircumflex/Aacute/Edieresis/Egrave/Iacute/Icircumflex
/Idieresis/Igrave/Oacute/Ocircumflex/.notdef/Ograve/Uacute/Ucircumflex
/Ugrave/dotlessi/circumflex/tilde/macron/breve/dotaccent/ring/cedilla
/hungarumlaut/ogonek/caron
]/_Helvetica/Helvetica Z
%%EndEncoding
%%EndSetup
u
u
0 g
0 G
0 i
0 J
0 j
0.2 w
10 M
[]0 d
%%Note:
205.5 145 m
205.5 177 L
119.5 177 L
119.5 145 L
205.5 145 L
s
162.5 161 m
S
U
0.5 w
[2 2 ]0 d
119.5 161 m
205.5 161 l
S
U
u
0.2 w
[]0 d
205.5 97 m
205.5 129 L
119.5 129 L
119.5 97 L
205.5 97 L
s
162.5 113 m
S
U
0.5 w
[2 2 ]0 d
119.5 113 m
205.5 113 l
S
1 w
[]0 d
/_Helvetica 12 12 0 1 z
[1 0 0 1 162.5 117]e
(forward)t
T
u
0.2 w
205.5 50 m
205.5 82 L
119.5 82 L
119.5 50 L
205.5 50 L
s
162.5 66 m
S
U
0.5 w
[2 2 ]0 d
119.5 66 m
205.5 66 l
S
1 w
[]0 d
[1 0 0 1 162.5 70]e
(forward)t
T
u
0.2 w
206.5 6 m
206.5 38 L
120.5 38 L
120.5 6 L
206.5 6 L
s
163.5 22 m
S
U
0.5 w
[2 2 ]0 d
120.5 22 m
206.5 22 l
S
1 w
[]0 d
[1 0 0 1 161.5 25]e
(forward)t
T
0.2 w
[3 3 ]0 d
234 95.5 m
217.5 95.5 l
217.5 57 l
183.5 57 l
S
234.25 133.5 m
212.5 133.5 l
212.5 104 l
184 104 l
S
u
u
[]0 d
320.5 110 m
320.5 142 L
234.5 142 L
234.5 110 L
320.5 110 L
s
277.5 126 m
S
U
0.5 w
[2 2 ]0 d
234.5 126 m
320.5 126 l
S
1 w
[]0 d
[1 0 0 1 277.5 130]e
(B)t
T
U
u
u
0.2 w
320.5 76 m
320.5 108 L
234.5 108 L
234.5 76 L
320.5 76 L
s
277.5 92 m
S
U
0.5 w
[2 2 ]0 d
234.5 92 m
320.5 92 l
S
1 w
[]0 d
[1 0 0 1 277.5 96]e
(C)t
T
U
u
u
0.2 w
320.5 42 m
320.5 74 L
234.5 74 L
234.5 42 L
320.5 42 L
s
277.5 58 m
S
U
0.5 w
[2 2 ]0 d
234.5 58 m
320.5 58 l
S
1 w
[]0 d
[1 0 0 1 275.5 61]e
(D)t
T
[1 0 0 1 276.5 44]e
(nil)t
T
U
0.2 w
304 118.5 m
334.75 118.5 l
334.75 65 l
321.5 65 l
S
254 84 m
226 84 l
226 70.5 l
234.25 70.5 l
S
232.75 104.5 m
226.5 104.5 l
226.5 153.25 l
183 153.25 l
S
u
324.5 61.25 m
320.75 65 l
324.5 68.75 L
324.5 61.25 L
f
U
u
230.75 100.75 m
234.5 104.5 l
230.75 108.25 L
230.75 100.75 L
f
U
u
230.5 66.75 m
234.25 70.5 l
230.5 74.25 L
230.5 66.75 L
f
U
u
252.25 146 m
248.5 142.25 l
244.75 146 L
252.25 146 L
f
U
[3 3 ]0 d
183 12.75 m
226.25 12.75 l
226.25 61.75 l
234.25 61.75 l
S
[]0 d
183.5 169.25 m
248.5 169.25 l
248.5 143 l
S
1 w
[1 0 0 1 102.5 159.75]e
(2)t
T
[1 0 0 1 101.5 113.25]e
(1)t
T
[1 0 0 1 101.5 61.25]e
(1)t
T
[1 0 0 1 101.5 20.25]e
(1)t
T
[1 0 0 1 347.5 125.25]e
(2)t
T
[1 0 0 1 347.5 90.25]e
(2)t
T
[1 0 0 1 347.5 58.25]e
(2)t
T
%%Trailer
_E end
 PE 12 /Times-Bold AF
16682 52128 MT
(Figure 3:)SH
/Times-Roman SF
22582 XM
(Copy the rest of the accessible objects)SH
14 /Times-Bold AF
5400 55946 MT
(4. A Generational Mostly-Copying Collector)SH
12 /Times-Roman AF
6600 58209 MT
(The most straightforward \050and)
95 W( least efficient\051 way to keep track of the age of an object is to)96 W
5400 59604 MT
(place a garbage collection counter in each object.  Each time the object is)
50 W( garbage collected, the)49 W
5400 60999 MT
(counter is incremented.  When the)
99 W( counter gets above a certain value, the object is moved into)100 W
5400 62394 MT
(the stable set.  Since the mostly-copying collector divides memory)
133 W( into pages, an object's age)132 W
5400 63789 MT
(may be approximated)
19 W( by associating it with the page holding the object.  One way to store this is)20 W
5400 65184 MT
(to encode it in the space identifier associated with each page.)SH
6600 67556 MT
(A simple two-generation "generational mostly-copying" garbage collector can be)
87 W( constructed)86 W
10 SS 
24589 68570 MT
(3)SH
12 SS 
5400 68951 MT
(from the)
96 W( previous algorithm as follows)97 W
25089 XM
(. During)
494 W( user program execution, objects are allocated)97 W
10800 50 5400 69990 UL
8 SS 
6400 71655 MT
(3)SH
10 SS 
6800 72000 MT
(Shaw [9] extended stop-and-copy collection in a similar manner and called it stop-and-copy with stable data.)SH
28550 75600 MT
(4)SH
ES
%%Page: 5 8 
BS
0 SI
10 /Times-Roman AF
21796 4286 MT
(M)SH
8 SS 
(OSTLY)SH
10 SS 
(-C)SH
8 SS 
(OPYING)SH
10 SS 
29537 XM
(G)SH
8 SS 
(ARBAGE)SH
10 SS 
33800 XM
(C)SH
8 SS 
(OLLECTION)SH
10 SS 
39207 XM
(P)SH
8 SS 
(ICKS)SH
10 SS 
41836 XM
(U)SH
8 SS 
(P)SH
12 SS 
9000 8023 MT
(with odd-numbered space)
220 W( identifiers.  Objects that have survived one garbage collection are)219 W
9000 9418 MT
(moved into the stable set that is stored in pages marked with an even-numbered space identifier.)SH
10200 11790 MT
(During its execution,)
318 W( the user program assists the garbage collector by constructing the)319 W
9000 13185 MT
(remembered set.  This is done by)
156 W( keeping track of all pages with even-numbered space iden-)155 W
9000 14580 MT
(tifiers that have pointers stored into them.)SH
10200 16952 MT
(Memory allocation is)
112 W( a two part process: first, allocate a page of memory, and then allocate)113 W
9000 18347 MT
(space from it.)
14 W( A page is free when its)13 W
/Times-Italic SF
27320 XM
(space)SH
/Times-Roman SF
30366 XM
(field is odd and not equal to)13 W
/Times-Italic SF
44160 XM
(current_space)SH
/Times-Roman SF
(. When)
326 W( it)13 W
9000 19742 MT
(is allocated, its)SH
/Times-Italic SF
16470 XM
(space)SH
/Times-Roman SF
19503 XM
(identifier is set to)SH
/Times-Italic SF
28174 XM
(next_space)SH
/Times-Roman SF
(.)SH
10200 22114 MT
(The garbage collector is invoked when half)
11 W( the pages in the heap have been allocated.  It starts)12 W
9000 23509 MT
(by advancing)75 W
/Times-Italic SF
15883 XM
(next_space)SH
/Times-Roman SF
21591 XM
(to the next space identifier \050an even number\051.  Next, it makes)
75 W( an edu-)74 W
9000 24904 MT
(cated guess as to what portions)
42 W( of the heap contain accessible items.  This is done by examining)43 W
9000 26299 MT
(each word in the stack and the registers and looking for)
75 W( "hints".  If the word could be a pointer)74 W
9000 27694 MT
(into a)
55 W( page of the heap allocated to the)56 W
/Times-Italic SF
28338 XM
(current_space)SH
/Times-Roman SF
(, then that page is promoted to)56 W
/Times-Italic SF
50467 XM
(next_space)SH
/Times-Roman SF
9000 29089 MT
(by changing the page's)SH
/Times-Italic SF
20400 XM
(space)SH
/Times-Roman SF
23433 XM
(identifier.)SH
10200 31461 MT
(At the completion of this phase, all pages containing items that)
283 W( might be referenced by)282 W
9000 32856 MT
(pointers in the stack or registers are)
148 W( in)149 W
/Times-Italic SF
28790 XM
(next_space)SH
/Times-Roman SF
(. The)
598 W( items which they or members of the)149 W
10 SS 
39386 33870 MT
(4)SH
12 SS 
9000 34251 MT
(remembered set point to are now verified to be in the stable)
15 W( set)16 W
40202 XM
(or copied to)16 W
/Times-Italic SF
46284 XM
(next_space)SH
/Times-Roman SF
(. This)
332 W( is)16 W
9000 35646 MT
(done by sweeping across all pages in the)60 W
/Times-Italic SF
29281 XM
(next_space)SH
/Times-Roman SF
34974 XM
(and the remembered set)
60 W( and updating their)59 W
9000 37041 MT
(pointers by a method similar to that used by the stop-and-copy collector.)
122 W( Once)
546 W( all pointers in)123 W
9000 38436 MT
(pages in)92 W
/Times-Italic SF
13451 XM
(next_space)SH
/Times-Roman SF
19176 XM
(and the remembered set have been updated,)92 W
/Times-Italic SF
41085 XM
(current_space)SH
/Times-Roman SF
48343 XM
(and)SH
/Times-Italic SF
50467 XM
(next_space)SH
/Times-Roman SF
9000 39831 MT
(are set to)SH
/Times-Italic SF
13634 XM
(next_space)SH
/Times-Roman SF
(+1 \050an odd number\051 and garbage collection is complete.)SH
10200 42203 MT
(At some point in time, the garbage collector may wish to recover inaccessible objects)
106 W( in the)107 W
9000 43598 MT
(stable set.  This can be done by changing the space)
151 W( identifier of all pages in the stable set to)150 W
/Times-Italic SF
9000 44993 MT
(current_space)SH
/Times-Roman SF
16167 XM
(and then garbage collecting using the original mostly-copying algorithm.)SH
10200 47365 MT
(Multiple generations)
54 W( can be accomodated by this algorithm with appropriate encodings of the)55 W
9000 48760 MT
(space identifier.  For example, space identifier values equal to 0 modulo 4)
122 W( could represent the)121 W
9000 50155 MT
(first generation,)
181 W( values equal to 1 modulo 4 could represent the second generation, etc.  Ap-)182 W
9000 51550 MT
(propriate remembered sets would be retained)
22 W( for references from older to newer generations.  As)21 W
9000 52945 MT
(objects continue to be retained, they would gradually move from one generation to the)
190 W( next,)191 W
9000 54340 MT
(where higher numbered generations contain older objects that are less often garbage collected.)SH
14 /Times-Bold AF
9000 58158 MT
(5. Implementation for Scheme->C)SH
12 /Times-Roman AF
10200 60421 MT
(The generational mostly-copying collector added to Scheme->C is similar to the)
456 W( one)455 W
9000 61816 MT
(previously described.  It has two generations and the remembered set is)
47 W( maintained by software.)48 W
9000 63211 MT
(When an object survives one garbage collection, it is moved to the stable set.)
41 W( When)
380 W( the amount)40 W
9000 64606 MT
(allocated in the heap following a garbage collection of the first generation)
66 W( is greater than a user)67 W
9000 66001 MT
(defined level, both generations are garbage collected.)SH
10800 50 9000 68885 UL
8 SS 
10000 70550 MT
(4)SH
10 SS 
10400 70895 MT
(Pointers to objects in pages with even space identifier values need not be followed as those objects)
102 W( are in the)101 W
9000 72000 MT
(stable set.)SH
32150 75600 MT
(5)SH
ES
%%Page: 6 9 
BS
0 SI
10 /Times-Roman AF
18196 4286 MT
(M)SH
8 SS 
(OSTLY)SH
10 SS 
(-C)SH
8 SS 
(OPYING)SH
10 SS 
25937 XM
(G)SH
8 SS 
(ARBAGE)SH
10 SS 
30200 XM
(C)SH
8 SS 
(OLLECTION)SH
10 SS 
35607 XM
(P)SH
8 SS 
(ICKS)SH
10 SS 
38236 XM
(U)SH
8 SS 
(P)SH
12 SS 
6600 8023 MT
(When compiling the Lisp dialect)
90 W( Scheme)
89 W( [8],)
SH( the compiler need only generate code to main-)89 W
5400 9418 MT
(tain the remembered set for constructs that destructively)
249 W( change lists: SET-CAR! and SET-)250 W
5400 10813 MT
(CDR!, store into a vectors:  VECTOR-SET!, and make assignments: SET!.)SH
6600 13185 MT
(By comparing the performance of)
80 W( programs running with the old and new garbage collectors)79 W
5400 14580 MT
(one can)
255 W( observe the costs and benefits of generational mostly-copying collection.  The test)256 W
5400 15975 MT
(programs are four)
42 W( benchmarks from Gabriel's benchmark suite)
41 W( [6])
SH( and the Scheme->C compiler)41 W
5400 17370 MT
(compiling a large Scheme program.  The benchmarks chosen perform a significant)
138 W( number of)139 W
5400 18765 MT
(modifications to existing data structures. As they are all fairly)
171 W( short, no garbage collection is)170 W
5400 20160 MT
(done during)
132 W( their execution.  The increase in the time spent in the benchmark programs gives)133 W
5400 21555 MT
(one an estimate of the cost of managing the remembered set via software.  As one)
41 W( might expect,)40 W
5400 22950 MT
(the worst increase was in the program Destructive which constructs a tree as)
115 W( a list of lists and)116 W
5400 24345 MT
(then destructively modifies its elements.  Programs that)
95 W( make extensive use of vectors, such as)94 W
5400 25740 MT
(FFT, Puzzle, and Triangle, showed)
12 W( smaller increases in running time.  The performance decrease)13 W
5400 27135 MT
(observed here is in agreement with measurements reported in [9].)SH
6600 29507 MT
(For larger programs that)
53 W( require garbage collection, the time spent managing the remembered)52 W
5400 30902 MT
(set is more than made up for by the reduced garbage collection time.  In the sample)
50 W( Scheme->C)51 W
5400 32297 MT
(compile, the program time was increased by 8%, but the total running time was reduced by 20%.)SH
9336 34588 MT
(Program)SH
19716 XM
(Program time)SH
32548 XM
(GC time)SH
43712 XM
(Total time)SH
10103 35874 MT
(name)SH
21301 XM
(change)SH
32899 XM
(change)SH
44497 XM
(change)SH
46392 50 5604 36536 LH BX1
-3170 50 17202 36536 LV BX1
-3170 50 28800 36536 LV BX1
-3170 50 40398 36536 LV BX1
6003 37758 MT
(Destructive)SH
21562 XM
(+12%)SH
34399 XM
(-)SH
44758 XM
(+12%)SH
46392 50 5604 38420 LH BX1
6003 39642 MT
(FFT)SH
21862 XM
(+4%)SH
34399 XM
(-)SH
45058 XM
(+4%)SH
46392 50 5604 40304 LH BX1
6003 41526 MT
(Puzzle)SH
21862 XM
(+4%)SH
34399 XM
(-)SH
45058 XM
(+4%)SH
46392 50 5604 42188 LH BX1
6003 43410 MT
(Triangle)SH
21862 XM
(+9%)SH
34399 XM
(-)SH
45058 XM
(+9%)SH
46392 50 5604 44072 LH BX1
6003 45294 MT
(Scheme->C compiler)SH
21862 XM
(+8%)SH
33299 XM
(-82%)SH
44897 XM
(-20%)SH
46392 12590 50 5604 45956 BX BX1
-9420 50 17202 45956 LV BX1
-9420 50 28800 45956 LV BX1
-9420 50 40398 45956 LV BX1
6600 48328 MT
(Similar improvements have been observed for interactive programs.)
30 W( A)
358 W( graphical multiproces-)29 W
5400 49723 MT
(sor performance monitor)
170 W( written by Bert Halstead that used to take approximately 500 ms to)171 W
5400 51118 MT
(garbage collect is now able to collect)
6 W( in less than 30 ms.  Similarly, garbage collection pauses for)5 W
5400 52513 MT
(a visual programming language system written by John)
94 W( Danskin are now 50-400ms rather than)95 W
5400 53908 MT
(2-5 seconds.)SH
6600 56280 MT
(Those familiar with earlier work in generational garbage collection may wonder if this collec-)38 W
5400 57675 MT
(tor is really too simple.  That is, by using only)
97 W( two generations of storage, and moving objects)98 W
10 SS 
45044 58689 MT
(5)SH
12 SS 
5400 59070 MT
(into the stable)
63 W( set when they survive one collection, do we retain too many items)62 W
45544 XM
(? Experience)424 W
5400 60465 MT
(to date with Scheme->C suggests that this is not a problem, and)
9 W( a comparison with Ungar's work)10 W
5700 61860 MT
([12] shows)
346 W( why.  The typical Scheme->C workstation is a DECstation3100 that has ap-)345 W
5400 63255 MT
(proximately one order of magnitude greater performance than the SUN's used by Ungar.  First,)76 W
5400 64650 MT
(this allows Scheme->C programs to allocate)
66 W( 2MB or more of heap between collections and still)65 W
5400 66045 MT
(have good interactive performance.)
74 W( In)
450 W( contrast, Ungar's volatile objects occupied only 200KB.)75 W
5400 67440 MT
(Second, in Scheme->C, reclamation of the stable set takes a few seconds and thus can)
277 W( be)276 W
10800 50 5400 69990 UL
8 SS 
6400 71655 MT
(5)SH
10 SS 
6800 72000 MT
(Ungar calls this the "the tenuring problem".)SH
28550 75600 MT
(6)SH
ES
%%Page: 7 10 
BS
0 SI
10 /Times-Roman AF
21796 4286 MT
(M)SH
8 SS 
(OSTLY)SH
10 SS 
(-C)SH
8 SS 
(OPYING)SH
10 SS 
29537 XM
(G)SH
8 SS 
(ARBAGE)SH
10 SS 
33800 XM
(C)SH
8 SS 
(OLLECTION)SH
10 SS 
39207 XM
(P)SH
8 SS 
(ICKS)SH
10 SS 
41836 XM
(U)SH
8 SS 
(P)SH
12 SS 
9000 8023 MT
(tolerated after some number of minutes of computation.)
99 W( For example, a 12MB heap with 3MB)100 W
9000 9418 MT
(accessible data can be totally reclaimed in less than 7 seconds. Ungar on the other hand)
31 W( suggests)30 W
9000 10813 MT
(that collecting the stable set will take 5 minutes and must be done every 3 to 8 hours.)SH
10200 13185 MT
(Having shown that the generational extension)
153 W( to the mostly-copying collection algorithm is)154 W
9000 14580 MT
(worthwhile for Scheme->C, our attention now turns towards)
23 W( implementations for other program-)22 W
9000 15975 MT
(ming languages, such as C++.)SH
14 /Times-Bold AF
9000 19793 MT
(6. Implementation for C++)SH
12 /Times-Roman AF
10200 22056 MT
(C++ is an object oriented superset \050except for a couple)
2 W( of minor details\051 of the C programming)3 W
10 SS 
55000 23070 MT
(6)SH
12 SS 
9000 23451 MT
(language [11].)
SH( The)
418 W( garbage collector for it evolved from that published in)
59 W( the appendix of)
60 W( [1])SH
55500 XM
(.)SH
9000 24846 MT
(In order)
140 W( to simplify its use, the heap size need not be configured \050it expands automatically as)139 W
9000 26241 MT
(needed\051 and all static data is assumed to contain hints.  Rather than requiring)
193 W( pointers to be)194 W
9000 27636 MT
(located at the beginning of each object, the)
44 W( user provides the garbage collector with a method to)43 W
9000 29031 MT
(locate the pointers.  For example, a class that holds a variable length string, a)
112 W( reference count,)113 W
9000 30426 MT
(and pointers to strings that are greater or lesser than it can be defined as follows:)SH
10 /Courier-Bold AF
11400 31952 MT
(struct word {)600 W
16200 33083 MT
(word* lesser;)SH
16200 34214 MT
(word* greater;)SH
16200 35345 MT
(int count;)600 W
16200 36476 MT
(char symbol[)
600 W( 4 ];)SH
16200 37607 MT
(word\050 char* chars \051;)SH
16200 38738 MT
(void pointers\050\051;)600 W
11400 39869 MT
(};)SH
11400 42131 MT
(void word::pointers\050)
600 W( \051  {)SH
16200 43262 MT
(gcpointer\050 &lesser \051;)SH
16200 44393 MT
(gcpointer\050 &greater \051;)SH
11400 45524 MT
(})SH
11400 47786 MT
(GCCALLBACK\050 word_callback, word::pointers \051;)SH
11400 50048 MT
(word::word\050 char* chars \051)SH
11400 51179 MT
({)SH
16200 52310 MT
(this = \050word*\051gcalloc\050 sizeof\050 word \051+)SH
30000 53441 MT
(strlen\050 chars \051-3,)SH
30000 54572 MT
(word_callback \051;)SH
16200 55703 MT
(lesser = NULL;)SH
16200 56834 MT
(greater = NULL;)SH
16200 57965 MT
(count = 1;)SH
16200 59096 MT
(strcpy\050 symbol, chars \051;)SH
11400 60227 MT
(})SH
12 /Times-Roman AF
10200 62599 MT
(The constructor,)88 W
/Courier SF
18543 XM
(word::word)SH
/Times-Roman SF
(, allocates space in the heap and then initializes)
88 W( it.  Space al-)87 W
9000 63994 MT
(location is done by the)
17 W( call to)18 W
/Courier SF
23559 XM
(gcalloc)SH
/Times-Roman SF
28917 XM
(that takes the size in bytes and a "callback object" as its)18 W
9000 65389 MT
(arguments. The)
496 W( callback object,)98 W
/Courier SF
25391 XM
(word_callback)SH
/Times-Roman SF
(, is declared)
98 W( by)97 W
/Courier SF
42708 XM
(GCCALLBACK)SH
/Times-Roman SF
(. It)
494 W( denotes)97 W
10800 50 9000 68885 UL
8 SS 
10000 70550 MT
(6)SH
10 SS 
10400 70895 MT
(Astute readers of that document will note that)
156 W( processing of objects larger than one page is incorrect in the)155 W
9000 72000 MT
(procedure)SH
/Courier SF
13248 XM
(promote_page)SH
/Times-Roman SF
(, as it does not correctly identify the first page of the object.)SH
32150 75600 MT
(7)SH
ES
%%Page: 8 11 
BS
0 SI
10 /Times-Roman AF
18196 4286 MT
(M)SH
8 SS 
(OSTLY)SH
10 SS 
(-C)SH
8 SS 
(OPYING)SH
10 SS 
25937 XM
(G)SH
8 SS 
(ARBAGE)SH
10 SS 
30200 XM
(C)SH
8 SS 
(OLLECTION)SH
10 SS 
35607 XM
(P)SH
8 SS 
(ICKS)SH
10 SS 
38236 XM
(U)SH
8 SS 
(P)SH
12 SS 
5400 8023 MT
(the method,)118 W
/Courier SF
11604 XM
(word::pointers)SH
/Times-Roman SF
(, that)
118 W( the garbage collector calls to identify all pointers in the)119 W
5400 9418 MT
(object. This is done by calling)101 W
/Courier SF
20776 XM
(gcpointer)SH
/Times-Roman SF
27657 XM
(with the address of each pointer in)
101 W( the object that)100 W
5400 10813 MT
(could point to a garbage collected object.)SH
6600 13185 MT
(Once the object has been defined, storage is allocated using the normal C++ mechanism:)SH
10 /Courier-Bold AF
12600 14711 MT
(sp = new word\050 "dictionary" \051;)SH
12 /Times-Roman AF
6600 17083 MT
(Maintaining the remembered set is more of a problem in C++ than in Scheme.)
318 W( Since)938 W
5400 18478 MT
(Scheme->C was implemented at WRL, it)
240 W( was easy to modify the compiler to add software)239 W
5400 19873 MT
(checks in the small number of areas where data in the stable)
163 W( set could be modified.  In C++)164 W
5400 21268 MT
(though, any store via a pointer has the possibiliy of modifying stable set data. Monitoring)
157 W( all)156 W
5400 22663 MT
(such stores by software would require modification of a foreign)
248 W( compiler \050not desired\051 and)249 W
5400 24058 MT
(would have a significant impact on program performance.)
155 W( An)
609 W( alternative way to manage the)154 W
5400 25453 MT
(remembered set is to use the underlying)
187 W( processor's virtual memory system, as was done by)188 W
5400 26848 MT
(Shaw [9].)
SH( This)
391 W( was not done here as it was desired to keep the garbage collector as architecture)45 W
5400 28243 MT
(independent as possible.  Instead, the entire stable set is)
128 W( considered to be the remembered set.)129 W
5400 29638 MT
(While this is not as good as knowing the actual remembered)
161 W( set, it is better than not using a)160 W
5400 31033 MT
(generational garbage collector.  Given that one expects much of the stable set to be retained,)
25 W( it is)26 W
5400 32428 MT
(cheaper to scan the entire stable set)
8 W( for pointers to first generation objects, than to both move and)7 W
5400 33823 MT
(scan most of the stable set.  Shaw's work with Common Lisp supports this view.)SH
6600 36195 MT
(One extension that an implementer might)
35 W( wish to make is to allow C++ destructor methods to)36 W
5400 37590 MT
(explicitly return storage.  Given that)
158 W( one trusts the programmer to know when to return data,)157 W
5400 38985 MT
(there may be some benefit in this.)
34 W( A)
369 W( second extension that one may wish to make is to have the)35 W
5400 40380 MT
(garbage collector call a destructor method when it detects that an object is no)
47 W( longer needed.  In)46 W
5400 41775 MT
(order to do this without having to scan all recovered storage \050and thus losing one of the ad-)182 W
5400 43170 MT
(vantages of a copying collector\051, one could register those objects needing cleanup)
7 W( action with the)6 W
5400 44565 MT
(garbage collector.)
122 W( One)
545 W( should recognize though that rapid activation of cleanup procedures is)123 W
5400 45960 MT
(not something that generational collection)
200 W( does well.  It gains performance by ignoring long)199 W
5400 47355 MT
(lived objects; the)
104 W( longer an object lives, the longer it will take to recognize that it is no longer)105 W
5400 48750 MT
(needed. One)
408 W( way to get around this would be to)
54 W( keep all objects needing cleanup actions in the)53 W
5400 50145 MT
(first generation.)
220 W( However,)
742 W( if this represents a significant portion of the accessible data, the)221 W
5400 51540 MT
(benefits of generational collection will be lost.)SH
6600 53912 MT
(An alternative type of)
59 W( garbage collector that one might try with C++ is a conservative collec-)58 W
5400 55307 MT
(tor [4].)
SH( Unlike)
820 W( the)
260 W( mostly-copying collector, such collectors do not put any restrictions on)261 W
5400 56702 MT
(pointer use nor do they compact memory.)
146 W( With)
591 W( such collectors, objects in the heap need not)145 W
5400 58097 MT
(have valid pointers nor have runtime discernible structure.  While they might place)
16 W( fewer restric-)17 W
5400 59492 MT
(tions on programs,)
25 W( the benefits of memory compaction provided by the mostly-copying collector)24 W
5400 60887 MT
(are worth the restrictions.)SH
14 /Times-Bold AF
5400 64705 MT
(7. Conclusions)SH
12 /Times-Roman AF
6600 66968 MT
(This note has discussed an improvement to the mostly-copying garbage)
111 W( collection algorithm)112 W
5400 68363 MT
(that allows it to provide generational collection for a variety)
64 W( of programming languages.  While)63 W
5400 69758 MT
(performance data is not available for C++,)
42 W( its performance in the Scheme->C system shows that)43 W
5400 71153 MT
(it provides significant performance improvement over the previous non-generational version)
106 W( of)105 W
10 SS 
28550 75600 MT
(8)SH
ES
%%Page: 9 12 
BS
0 SI
10 /Times-Roman AF
21796 4286 MT
(M)SH
8 SS 
(OSTLY)SH
10 SS 
(-C)SH
8 SS 
(OPYING)SH
10 SS 
29537 XM
(G)SH
8 SS 
(ARBAGE)SH
10 SS 
33800 XM
(C)SH
8 SS 
(OLLECTION)SH
10 SS 
39207 XM
(P)SH
8 SS 
(ICKS)SH
10 SS 
41836 XM
(U)SH
8 SS 
(P)SH
12 SS 
9000 8023 MT
(the collector.  While small benchmarks that don't require any garbage collection run)
6 W( a bit slower,)7 W
9000 9418 MT
(large batch programs such as compiles run faster and interactive programs have shorter pauses.)SH
14 /Times-Bold AF
9000 13236 MT
(8. Acknowledgements)SH
12 /Times-Roman AF
10200 15499 MT
(John Danskin's desire to construct a large interactive Scheme program encouraged the)
61 W( search)60 W
9000 16894 MT
(for a generational mostly-copying collector.)
49 W( Bert)
399 W( Halstead provided a benchmark program. Joel)50 W
9000 18289 MT
(McCormack and Mike Newman spoke strongly)
214 W( in favor of explicit storage deletion in C++.)213 W
9000 19684 MT
(Mary Jo Doherty,)
73 W( David Wall, and Jeremy Dion offered insightful comments that improved the)74 W
9000 21079 MT
(presentation of the material.  I thank you all.)SH
14 /Times-Bold AF
9000 24897 MT
(9. References)SH
12 /Times-Roman AF
9000 27160 MT
([1])SH
12600 XM
(Joel F. Bartlett.)SH
/Times-Italic SF
20603 XM
(Compacting Garbage Collection with Ambiguous Roots)SH
/Times-Roman SF
(. Technical)300 W
9000 28446 MT
(Report WRL Research Report 88/2, Digital Equipment Corporation Western Research)SH
9000 29732 MT
(Laboratory, February, 1988.)SH
9000 31841 MT
([2])SH
12600 XM
(Joel F. Bartlett.  Compacting Garbage Collection with Ambiguous Roots.)SH
/Times-Italic SF
48474 XM
(LISP Pointers)SH
/Times-Roman SF
9000 33127 MT
(1\0506\051:3-12, April-May-June, 1988.)SH
9000 35236 MT
([3])SH
12600 XM
(Joel F. Bartlett.)SH
/Times-Italic SF
20603 XM
(Scheme->C a Portable Scheme-to-C Compiler)SH
/Times-Roman SF
(. Technical)
300 W( Report WRL)SH
9000 36522 MT
(Research Report 89/1, Digital Equipment Corporation Western Research Laboratory, January,)SH
9000 37808 MT
(1989.)SH
9000 39917 MT
([4])SH
12600 XM
(Hans-Juergen Boehm, Mark Weiser.  Garbage Collection in an Uncooperative Environ-)SH
9000 41203 MT
(ment.)SH
/Times-Italic SF
12301 XM
(Software Practice and Experience)SH
/Times-Roman SF
29035 XM
(18\0509\051:807-820, September, 1988.)SH
9000 43312 MT
([5])SH
12600 XM
(Jacques Cohen.  Garbage Collection of Linked Data Structures.)SH
/Times-Italic SF
43667 XM
(ACM Computing)SH
9000 44598 MT
(Surveys)SH
/Times-Roman SF
13033 XM
(13\0503\051:341-367, September, 1981.)SH
9000 46707 MT
([6])SH
12600 XM
(Richard P. Gabriel.)SH
/Times-Italic SF
22467 XM
(Performance and Evaluation of Lisp Systems.)SH
/Times-Roman SF
45003 XM
(The MIT Press, 1985.)SH
9000 48816 MT
([7])SH
12600 XM
(Timothy J. McEntee.  Overview of Garbage Collection in Symbolic Computing.)SH
/Times-Italic SF
51772 XM
(LISP)SH
9000 50102 MT
(Pointers)SH
/Times-Roman SF
13368 XM
(1\0503\051:8-16, August-September, 1987.)SH
10 SS 
37272 52074 MT
(3)SH
12 SS 
9000 52455 MT
([8])SH
12600 XM
(Jonathan Rees, William Clinger \050Editors\051.  Revised)SH
38072 XM
(Report on the Algorithmic Lan-)SH
9000 53741 MT
(guage Scheme.)SH
/Times-Italic SF
16866 XM
(SIGPLAN Notices)SH
/Times-Roman SF
25866 XM
(21\05012\051:37-79, December, 1986.)SH
9000 55850 MT
([9])SH
12600 XM
(Robert A. Shaw.)SH
/Times-Italic SF
21199 XM
(Empirical Analysis of A Lisp System)SH
/Times-Roman SF
(. Technical)
300 W( Report CSL-)SH
9000 57136 MT
(TR-88-351, Stanford University, February, 1988.)SH
9000 59245 MT
([10])SH
12600 XM
(Guy L. Steele Jr.  Multiprocessing Compactifying Garbage Collection.)SH
/Times-Italic SF
47172 XM
(Communications)SH
9000 60531 MT
(of the ACM)SH
/Times-Roman SF
14834 XM
(18\0509\051, September, 1975.)SH
9000 62640 MT
([11])SH
12600 XM
(Bjarne Stroustrup.)SH
/Times-Italic SF
22002 XM
(The C++ Programming Language.)SH
/Times-Roman SF
39555 XM
(Addison-Wesley, 1986.)SH
9000 64749 MT
([12])SH
12600 XM
(David Ungar.  Generation Scavenging: A Non-disruptive High Performance Storage)SH
9000 66035 MT
(Reclamation Algorithm.  In)SH
/Times-Italic SF
22570 XM
(Proceedings of the ACM SIGSOFT/SIGPLAN Software Engineering)SH
9000 67321 MT
(Symposium on Practical Software Development Environments)SH
/Times-Roman SF
(, pages 157-167.  April, 1984.)SH
10 SS 
32150 75600 MT
(9)SH
ES
%%Page: 10 13 
BS
0 SI
10 /Times-Roman AF
18196 4286 MT
(M)SH
8 SS 
(OSTLY)SH
10 SS 
(-C)SH
8 SS 
(OPYING)SH
10 SS 
25937 XM
(G)SH
8 SS 
(ARBAGE)SH
10 SS 
30200 XM
(C)SH
8 SS 
(OLLECTION)SH
10 SS 
35607 XM
(P)SH
8 SS 
(ICKS)SH
10 SS 
38236 XM
(U)SH
8 SS 
(P)SH
10 SS 
28300 75600 MT
(10)SH
ES
%%Page: 11 14 
BS
0 SI
10 /Times-Roman AF
21796 4286 MT
(M)SH
8 SS 
(OSTLY)SH
10 SS 
(-C)SH
8 SS 
(OPYING)SH
10 SS 
29537 XM
(G)SH
8 SS 
(ARBAGE)SH
10 SS 
33800 XM
(C)SH
8 SS 
(OLLECTION)SH
10 SS 
39207 XM
(P)SH
8 SS 
(ICKS)SH
10 SS 
41836 XM
(U)SH
8 SS 
(P)SH
15 /Times-Bold AF
24734 8205 MT
(WRL Research Reports)SH
10 /Times-Roman AF
9000 10807 MT
(``Titan System Manual.'')SH
34200 XM
(``MultiTitan: Four)
250 W( Architecture Papers.'')SH
9000 12202 MT
(Michael J. K. Nielsen.)SH
34200 XM
(Norman P. Jouppi, Jeremy)
2 W( Dion, David Boggs, Mich-)3 W
9000 13597 MT
(WRL Research Report 86/1, September 1986.)SH
35572 XM
(ael J. K. Nielsen.)SH
34200 14992 MT
(WRL Research Report 87/8, April 1988.)SH
9000 16293 MT
(``Global Register Allocation at Link Time.'')SH
9000 17688 MT
(David W. Wall.)SH
34200 XM
(``Fast Printed Circuit Board Routing.'')SH
9000 19083 MT
(WRL Research Report 86/3, October 1986.)SH
34200 XM
(Jeremy Dion.)SH
34200 20478 MT
(WRL Research Report 88/1, March 1988.)SH
9000 21779 MT
(``Optimal Finned Heat Sinks.'')SH
9000 23174 MT
(William R. Hamburgen.)SH
34200 XM
(``Compacting Garbage Collection)
262 W( with Ambiguous)261 W
9000 24569 MT
(WRL Research Report 86/4, October 1986.)SH
35572 XM
(Roots.'')SH
34200 25964 MT
(Joel F. Bartlett.)SH
9000 27265 MT
(``The Mahler Experience: Using)
416 W( an Intermediate)415 W
34200 27359 MT
(WRL Research Report 88/2, February 1988.)SH
10372 28660 MT
(Language as the Machine Description.'')SH
9000 30055 MT
(David W. Wall and Michael L. Powell.)SH
34200 XM
(``The Experimental Literature)
185 W( of The Internet:  An)186 W
9000 31450 MT
(WRL Research Report 87/1, August 1987.)SH
35572 XM
(Annotated Bibliography.'')SH
34200 32845 MT
(Jeffrey C. Mogul.)SH
9000 34146 MT
(``The Packet Filter:)
280 W( An)
812 W( Efficient Mechanism for)281 W
34200 34240 MT
(WRL Research Report 88/3, August 1988.)SH
10372 35541 MT
(User-level Network Code.'')SH
9000 36936 MT
(Jeffrey C. Mogul, Richard)
536 W( F. Rashid, Michael)535 W
34200 XM
(``Measured Capacity of an)
321 W( Ethernet:  Myths and)320 W
10372 38331 MT
(J. Accetta.)SH
35572 XM
(Reality.'')SH
9000 39726 MT
(WRL Research Report 87/2, November 1987.)SH
34200 XM
(David R. Boggs, Jeffrey)
433 W( C. Mogul, Christopher)434 W
35572 41121 MT
(A. Kent.)SH
9000 42422 MT
(``Fragmentation Considered Harmful.'')SH
34200 42516 MT
(WRL Research Report 88/4, September 1988.)SH
9000 43817 MT
(Christopher A. Kent, Jeffrey C. Mogul.)SH
9000 45212 MT
(WRL Research Report 87/3, December 1987.)SH
34200 XM
(``Visa Protocols)
96 W( for Controlling Inter-Organizational)95 W
35572 46607 MT
(Datagram Flow:  Extended Description.'')SH
9000 47908 MT
(``Cache Coherence in Distributed Systems.'')SH
34200 48002 MT
(Deborah Estrin, Jeffrey C. Mogul,)
378 W( Gene Tsudik,)379 W
9000 49303 MT
(Christopher A. Kent.)SH
35572 49397 MT
(Kamaljit Anand.)SH
9000 50698 MT
(WRL Research Report 87/4, December 1987.)SH
34200 50792 MT
(WRL Research Report 88/5, December 1988.)SH
9000 53394 MT
(``Register Windows vs. Register Allocation.'')SH
34200 53488 MT
(``SCHEME->C A Portable Scheme-to-C Compiler.'')SH
9000 54789 MT
(David W. Wall.)SH
34200 54883 MT
(Joel F. Bartlett.)SH
9000 56184 MT
(WRL Research Report 87/5, December 1987.)SH
34200 56278 MT
(WRL Research Report 89/1, January 1989.)SH
9000 58880 MT
(``Editing Graphical Objects)
817 W( Using Procedural)818 W
34200 58974 MT
(``Optimal Group)
1012 W( Distribution in Carry-Skip)1011 W
10372 60275 MT
(Representations.'')SH
35572 60369 MT
(Adders.'')SH
9000 61670 MT
(Paul J. Asente.)SH
34200 61764 MT
(Silvio Turrini.)SH
9000 63065 MT
(WRL Research Report 87/6, November 1987.)SH
34200 63159 MT
(WRL Research Report 89/2, February 1989.)SH
9000 65761 MT
(``The USENET Cookbook: an)
693 W( Experiment in)692 W
34200 65855 MT
(``Precise Robotic Paste Dot Dispensing.'')SH
10372 67156 MT
(Electronic Publication.'')SH
34200 67250 MT
(William R. Hamburgen.)SH
9000 68551 MT
(Brian K. Reid.)SH
34200 68645 MT
(WRL Research Report 89/3, February 1989.)SH
9000 69946 MT
(WRL Research Report 87/7, December 1987.)SH
31900 75600 MT
(11)SH
ES
%%Page: 12 15 
BS
0 SI
10 /Times-Roman AF
18196 4286 MT
(M)SH
8 SS 
(OSTLY)SH
10 SS 
(-C)SH
8 SS 
(OPYING)SH
10 SS 
25937 XM
(G)SH
8 SS 
(ARBAGE)SH
10 SS 
30200 XM
(C)SH
8 SS 
(OLLECTION)SH
10 SS 
35607 XM
(P)SH
8 SS 
(ICKS)SH
10 SS 
38236 XM
(U)SH
8 SS 
(P)SH
10 SS 
5400 7886 MT
(``Simple and Flexible Datagram Access Controls for)82 W
30600 XM
(``Long Address Traces from)
660 W( RISC Machines:)659 W
6772 9281 MT
(Unix-based Gateways.'')SH
31972 XM
(Generation and Analysis.'')SH
5400 10676 MT
(Jeffrey C. Mogul.)SH
30600 XM
(Anita Borg, R.E.Kessler, Georgia Lazana, and)
59 W( David)60 W
5400 12071 MT
(WRL Research Report 89/4, March 1989.)SH
31972 XM
(W. Wall.)SH
30600 13466 MT
(WRL Research Report 89/14, September 1989.)SH
5400 14767 MT
(``Spritely NFS:)
138 W( Implementation and Performance of)137 W
6772 16162 MT
(Cache-Consistency Protocols.'')SH
30600 XM
(``Link-Time Code Modification.'')SH
5400 17557 MT
(V. Srinivasan and Jeffrey C. Mogul.)SH
30600 XM
(David W. Wall.)SH
5400 18952 MT
(WRL Research Report 89/5, May 1989.)SH
30600 XM
(WRL Research Report 89/17, September 1989.)SH
5400 21648 MT
(``Available Instruction-Level)
192 W( Parallelism for Super-)193 W
6772 23043 MT
(scalar and Superpipelined Machines.'')SH
5400 24438 MT
(Norman P. Jouppi and David W. Wall.)SH
5400 25833 MT
(WRL Research Report 89/7, July 1989.)SH
5400 28529 MT
(``A Unified Vector/Scalar Floating-Point)1710 W
6772 29924 MT
(Architecture.'')SH
5400 31319 MT
(Norman P. Jouppi, Jonathan Bertoni, and)
401 W( David)402 W
6772 32714 MT
(W. Wall.)SH
5400 34109 MT
(WRL Research Report 89/8, July 1989.)SH
5400 36805 MT
(``Architectural and Organizational Tradeoffs in)
227 W( the)226 W
6772 38200 MT
(Design of the MultiTitan CPU.'')SH
5400 39595 MT
(Norman P. Jouppi.)SH
5400 40990 MT
(WRL Research Report 89/9, July 1989.)SH
5400 43686 MT
(``Integration and Packaging Plateaus)
326 W( of Processor)327 W
6772 45081 MT
(Performance.'')SH
5400 46476 MT
(Norman P. Jouppi.)SH
5400 47871 MT
(WRL Research Report 89/10, July 1989.)SH
5400 50567 MT
(``A 20-MIPS)
160 W( Sustained 32-bit CMOS Microproces-)159 W
6772 51962 MT
(sor with High Ratio of)
552 W( Sustained to Peak)553 W
6772 53357 MT
(Performance.'')SH
5400 54752 MT
(Norman P. Jouppi and Jeffrey Y. F. Tang.)SH
5400 56147 MT
(WRL Research Report 89/11, July 1989.)SH
5400 58843 MT
(``Leaf: A Netlist to)
432 W( Layout Converter for ECL)431 W
6772 60238 MT
(Gates.'')SH
5400 61633 MT
(Robert L. Alverson and Norman P. Jouppi.)SH
5400 63028 MT
(WRL Research Report 89/12, July 1989.)SH
5400 65724 MT
(``The Distribution of Instruction-Level and)
115 W( Machine)116 W
6772 67119 MT
(Parallelism and Its Effect on Performance.'')SH
5400 68514 MT
(Norman P. Jouppi.)SH
5400 69909 MT
(WRL Research Report 89/13, July 1989.)SH
28300 75600 MT
(12)SH
ES
%%Page: 13 16 
BS
0 SI
10 /Times-Roman AF
21796 4286 MT
(M)SH
8 SS 
(OSTLY)SH
10 SS 
(-C)SH
8 SS 
(OPYING)SH
10 SS 
29537 XM
(G)SH
8 SS 
(ARBAGE)SH
10 SS 
33800 XM
(C)SH
8 SS 
(OLLECTION)SH
10 SS 
39207 XM
(P)SH
8 SS 
(ICKS)SH
10 SS 
41836 XM
(U)SH
8 SS 
(P)SH
15 /Times-Bold AF
25316 8205 MT
(WRL Technical Notes)SH
10 /Times-Roman AF
9000 10807 MT
(``TCP/IP PrintServer: Print Server Protocol.'')SH
9000 12202 MT
(Brian K. Reid and Christopher A. Kent.)SH
9000 13597 MT
(WRL Technical Note TN-4, September 1988.)SH
9000 16293 MT
(``TCP/IP PrintServer: Server Architecture and)762 W
10372 17688 MT
(Implementation.'')SH
9000 19083 MT
(Christopher A. Kent.)SH
9000 20478 MT
(WRL Technical Note TN-7, November 1988.)SH
9000 23174 MT
(``Smart Code,)
29 W( Stupid Memory: A Fast X Server for a)30 W
10372 24569 MT
(Dumb Color Frame Buffer.'')SH
9000 25964 MT
(Joel McCormack.)SH
9000 27359 MT
(WRL Technical Note TN-9, September 1989.)SH
9000 30055 MT
(``Why Aren't Operating)
166 W( Systems Getting Faster As)165 W
10372 31450 MT
(Fast As Hardware?'')SH
9000 32845 MT
(John Ousterhout.)SH
9000 34240 MT
(WRL Technical Note TN-11, October 1989.)SH
9000 36936 MT
(``Mostly-Copying Garbage)
594 W( Collection Picks Up)595 W
10372 38331 MT
(Generations and C++.'')SH
9000 39726 MT
(Joel Bartlett.)SH
9000 41121 MT
(WRL Technical Note TN-12, October 1989.)SH
31900 75600 MT
(13)SH
ES
%%Page: ii 17 
BS
0 SI
10 /Times-Roman AF
18196 4286 MT
(M)SH
8 SS 
(OSTLY)SH
10 SS 
(-C)SH
8 SS 
(OPYING)SH
10 SS 
25937 XM
(G)SH
8 SS 
(ARBAGE)SH
10 SS 
30200 XM
(C)SH
8 SS 
(OLLECTION)SH
10 SS 
35607 XM
(P)SH
8 SS 
(ICKS)SH
10 SS 
38236 XM
(U)SH
8 SS 
(P)SH
10 SS 
28522 75600 MT
(ii)SH
ES
%%Page: iii 18 
BS
0 SI
10 /Times-Roman AF
21796 4286 MT
(M)SH
8 SS 
(OSTLY)SH
10 SS 
(-C)SH
8 SS 
(OPYING)SH
10 SS 
29537 XM
(G)SH
8 SS 
(ARBAGE)SH
10 SS 
33800 XM
(C)SH
8 SS 
(OLLECTION)SH
10 SS 
39207 XM
(P)SH
8 SS 
(ICKS)SH
10 SS 
41836 XM
(U)SH
8 SS 
(P)SH
15 /Times-Bold AF
26690 8205 MT
(Table of Contents)SH
12 SS 
9000 9461 MT
(1. Introduction)SH
55200 XM
(1)SH
9000 10717 MT
(2. An Introduction to Generational Garbage Collection)SH
55200 XM
(1)SH
9000 11973 MT
(3. A Review of Mostly-Copying Collection)SH
55200 XM
(2)SH
9000 13229 MT
(4. A Generational Mostly-Copying Collector)SH
55200 XM
(4)SH
9000 14485 MT
(5. Implementation for Scheme->C)SH
55200 XM
(5)SH
9000 15741 MT
(6. Implementation for C++)SH
55200 XM
(7)SH
9000 16997 MT
(7. Conclusions)SH
55200 XM
(8)SH
9000 18253 MT
(8. Acknowledgements)SH
55200 XM
(9)SH
9000 19509 MT
(9. References)SH
55200 XM
(9)SH
10 /Times-Roman AF
31983 75600 MT
(iii)SH
ES
%%Page: iv 19 
BS
0 SI
10 /Times-Roman AF
18196 4286 MT
(M)SH
8 SS 
(OSTLY)SH
10 SS 
(-C)SH
8 SS 
(OPYING)SH
10 SS 
25937 XM
(G)SH
8 SS 
(ARBAGE)SH
10 SS 
30200 XM
(C)SH
8 SS 
(OLLECTION)SH
10 SS 
35607 XM
(P)SH
8 SS 
(ICKS)SH
10 SS 
38236 XM
(U)SH
8 SS 
(P)SH
10 SS 
28411 75600 MT
(iv)SH
ES
%%Page: v 20 
BS
0 SI
10 /Times-Roman AF
21796 4286 MT
(M)SH
8 SS 
(OSTLY)SH
10 SS 
(-C)SH
8 SS 
(OPYING)SH
10 SS 
29537 XM
(G)SH
8 SS 
(ARBAGE)SH
10 SS 
33800 XM
(C)SH
8 SS 
(OLLECTION)SH
10 SS 
39207 XM
(P)SH
8 SS 
(ICKS)SH
10 SS 
41836 XM
(U)SH
8 SS 
(P)SH
15 /Times-Bold AF
27732 8205 MT
(List of Figures)SH
12 SS 
10800 9461 MT
(Figure 1:)
SH( Mostly-copying)
900 W( memory organization and sample list)SH
55200 XM
(3)SH
10800 10717 MT
(Figure 2:)
SH( Promote)
900 W( possibly referenced pages to)SH
/Times-BoldItalic SF
36067 XM
(next_space)SH
/Times-Bold SF
55200 XM
(4)SH
10800 11973 MT
(Figure 3:)
SH( Copy)
900 W( the rest of the accessible objects)SH
55200 XM
(4)SH
10 /Times-Roman AF
32150 75600 MT
(v)SH
ES
%%Trailer
%%Pages: 20 
%%DocumentFonts: Times-Roman Times-Bold Times-Italic Courier Symbol Courier-Bold Times-BoldItalic
