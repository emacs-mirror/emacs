%!PS-Adobe-3.0
%%Title: (IEEE.754)
%%Creator: (FrameMaker: PSPrinter 8.1.0.1)
%%CreationDate: (6:27 AM Thursday, August 17, 1995)
%%For: (W. Kahan)
%%Pages: 30
%%DocumentFonts: Times-Roman Times-Bold Times-Italic Courier Symbol
%%DocumentNeededFonts: Times-Roman Times-Bold Times-Italic Courier Symbol
%%DocumentSuppliedFonts:
%%DocumentData: Clean7Bit
%%PageOrder: Ascend
%%Orientation: Portrait
%ADO_PaperArea: -19 -14 773 598
%ADO_ImageableArea: 0 0 768 584
%%EndComments
/md 177 dict def md begin
/currentpacking where {pop /sc_oldpacking currentpacking def true setpacking}if
%%BeginFile: adobe_psp_basic
%%Copyright: Copyright 1990-1993 Adobe Systems Incorporated. All Rights Reserved.
/bd{bind def}bind def
/xdf{exch def}bd
/xs{exch store}bd
/ld{load def}bd
/Z{0 def}bd
/T/true
/F/false
/:L/lineto
/lw/setlinewidth
/:M/moveto
/rl/rlineto
/rm/rmoveto
/:C/curveto
/:T/translate
/:K/closepath
/:mf/makefont
/gS/gsave
/gR/grestore
/np/newpath
14{ld}repeat
/$m matrix def
/av 81 def
/por true def
/normland false def
/psb-nosave{}bd
/pse-nosave{}bd
/us Z
/psb{/us save store}bd
/pse{us restore}bd
/level2
/languagelevel where
{
pop languagelevel 2 ge
}{
false
}ifelse
def
/featurecleanup
{
stopped
cleartomark
countdictstack exch sub dup 0 gt
{
{end}repeat
}{
pop
}ifelse
}bd
/noload Z
/startnoload
{
{/noload save store}if
}bd
/endnoload
{
{noload restore}if
}bd
level2 startnoload
/setjob
{
statusdict/jobname 3 -1 roll put
}bd
/setcopies
{
userdict/#copies 3 -1 roll put
}bd
level2 endnoload level2 not startnoload
/setjob
{
1 dict begin/JobName xdf currentdict end setuserparams
}bd
/setcopies
{
1 dict begin/NumCopies xdf currentdict end setpagedevice
}bd
level2 not endnoload
/pm Z
/mT Z
/sD Z
/realshowpage Z
/initializepage
{
/pm save store mT concat
}bd
/endp
{
pm restore showpage
}def
/$c/DeviceRGB def
/rectclip where
{
pop/rC/rectclip ld
}{
/rC
{
np 4 2 roll
:M
1 index 0 rl
0 exch rl
neg 0 rl
:K
clip np
}bd
}ifelse
/rectfill where
{
pop/rF/rectfill ld
}{
/rF
{
gS
np
4 2 roll
:M
1 index 0 rl
0 exch rl
neg 0 rl
fill
gR
}bd
}ifelse
/rectstroke where
{
pop/rS/rectstroke ld
}{
/rS
{
gS
np
4 2 roll
:M
1 index 0 rl
0 exch rl
neg 0 rl
:K
stroke
gR
}bd
}ifelse
%%EndFile
%%BeginFile: adobe_psp_colorspace_level1
%%Copyright: Copyright 1991-1993 Adobe Systems Incorporated. All Rights Reserved.
/G/setgray ld
/:F/setrgbcolor ld
%%EndFile
%%BeginFile: adobe_psp_uniform_graphics
%%Copyright: Copyright 1990-1993 Adobe Systems Incorporated. All Rights Reserved.
/@a
{
np :M 0 rl :L 0 exch rl 0 rl :L fill
}bd
/@b
{
np :M 0 rl 0 exch rl :L 0 rl 0 exch rl fill
}bd
/arct where
{
pop
}{
/arct
{
arcto pop pop pop pop
}bd
}ifelse
/x1 Z
/x2 Z
/y1 Z
/y2 Z
/rad Z
/@q
{
/rad xs
/y2 xs
/x2 xs
/y1 xs
/x1 xs
np
x2 x1 add 2 div y1 :M
x2 y1 x2 y2 rad arct
x2 y2 x1 y2 rad arct
x1 y2 x1 y1 rad arct
x1 y1 x2 y1 rad arct
fill
}bd
/@s
{
/rad xs
/y2 xs
/x2 xs
/y1 xs
/x1 xs
np
x2 x1 add 2 div y1 :M
x2 y1 x2 y2 rad arct
x2 y2 x1 y2 rad arct
x1 y2 x1 y1 rad arct
x1 y1 x2 y1 rad arct
:K
stroke
}bd
/@i
{
np 0 360 arc fill
}bd
/@j
{
gS
np
:T
scale
0 0 .5 0 360 arc
fill
gR
}bd
/@e
{
np
0 360 arc
:K
stroke
}bd
/@f
{
np
$m currentmatrix
pop
:T
scale
0 0 .5 0 360 arc
:K
$m setmatrix
stroke
}bd
/@k
{
gS
np
:T
0 0 :M
0 0 5 2 roll
arc fill
gR
}bd
/@l
{
gS
np
:T
0 0 :M
scale
0 0 .5 5 -2 roll arc
fill
gR
}bd
/@m
{
np
arc
stroke
}bd
/@n
{
np
$m currentmatrix
pop
:T
scale
0 0 .5 5 -2 roll arc
$m setmatrix
stroke
}bd
%%EndFile
%%BeginFile: adobe_psp_customps
%%Copyright: Copyright 1990-1993 Adobe Systems Incorporated. All Rights Reserved.
/$t Z
/$p Z
/$s Z
/$o 1. def
/2state? false def
/ps Z
level2 startnoload
/pushcolor/currentrgbcolor ld
/popcolor/setrgbcolor ld
/setcmykcolor where
{
pop/currentcmykcolor where
{
pop/pushcolor/currentcmykcolor ld
/popcolor/setcmykcolor ld
}if
}if
level2 endnoload level2 not startnoload
/pushcolor
{
currentcolorspace $c eq
{
currentcolor currentcolorspace true
}{
currentcmykcolor false
}ifelse
}bd
/popcolor
{
{
setcolorspace setcolor
}{
setcmykcolor
}ifelse
}bd
level2 not endnoload
/pushstatic
{
ps
2state?
$o
$t
$p
$s
}bd
/popstatic
{
/$s xs
/$p xs
/$t xs
/$o xs
/2state? xs
/ps xs
}bd
/pushgstate
{
save errordict/nocurrentpoint{pop 0 0}put
currentpoint
3 -1 roll restore
pushcolor
currentlinewidth
currentlinecap
currentlinejoin
currentdash exch aload length
np clippath pathbbox
$m currentmatrix aload pop
}bd
/popgstate
{
$m astore setmatrix
2 index sub exch
3 index sub exch
rC
array astore exch setdash
setlinejoin
setlinecap
lw
popcolor
np :M
}bd
/bu
{
pushgstate
gR
pushgstate
2state?
{
gR
pushgstate
}if
pushstatic
pm restore
mT concat
}bd
/bn
{
/pm save store
popstatic
popgstate
gS
popgstate
2state?
{
gS
popgstate
}if
}bd
/cpat{pop 64 div G 8{pop}repeat}bd
%%EndFile
%%BeginFile: adobe_psp_basic_text
%%Copyright: Copyright 1990-1993 Adobe Systems Incorporated. All Rights Reserved.
/S/show ld
/A{
0.0 exch ashow
}bd
/R{
0.0 exch 32 exch widthshow
}bd
/W{
0.0 3 1 roll widthshow
}bd
/J{
0.0 32 4 2 roll 0.0 exch awidthshow
}bd
/V{
0.0 4 1 roll 0.0 exch awidthshow
}bd
/fcflg true def
/fc{
fcflg{
vmstatus exch sub 50000 lt{
(%%[ Warning: Running out of memory ]%%\r)print flush/fcflg false store
}if pop
}if
}bd
/$f[1 0 0 -1 0 0]def
/:ff{$f :mf}bd
/MacEncoding StandardEncoding 256 array copy def
MacEncoding 39/quotesingle put
MacEncoding 96/grave put
/Adieresis/Aring/Ccedilla/Eacute/Ntilde/Odieresis/Udieresis/aacute
/agrave/acircumflex/adieresis/atilde/aring/ccedilla/eacute/egrave
/ecircumflex/edieresis/iacute/igrave/icircumflex/idieresis/ntilde/oacute
/ograve/ocircumflex/odieresis/otilde/uacute/ugrave/ucircumflex/udieresis
/dagger/degree/cent/sterling/section/bullet/paragraph/germandbls
/registered/copyright/trademark/acute/dieresis/notequal/AE/Oslash
/infinity/plusminus/lessequal/greaterequal/yen/mu/partialdiff/summation
/product/pi/integral/ordfeminine/ordmasculine/Omega/ae/oslash
/questiondown/exclamdown/logicalnot/radical/florin/approxequal/Delta/guillemotleft
/guillemotright/ellipsis/space/Agrave/Atilde/Otilde/OE/oe
/endash/emdash/quotedblleft/quotedblright/quoteleft/quoteright/divide/lozenge
/ydieresis/Ydieresis/fraction/currency/guilsinglleft/guilsinglright/fi/fl
/daggerdbl/periodcentered/quotesinglbase/quotedblbase/perthousand
/Acircumflex/Ecircumflex/Aacute/Edieresis/Egrave/Iacute/Icircumflex/Idieresis/Igrave
/Oacute/Ocircumflex/apple/Ograve/Uacute/Ucircumflex/Ugrave/dotlessi/circumflex/tilde
/macron/breve/dotaccent/ring/cedilla/hungarumlaut/ogonek/caron
MacEncoding 128 128 getinterval astore pop
level2 startnoload
/copyfontdict
{
findfont dup length dict
begin
{
1 index/FID ne{def}{pop pop}ifelse
}forall
}bd
level2 endnoload level2 not startnoload
/copyfontdict
{
findfont dup length dict
copy
begin
}bd
level2 not endnoload
md/fontname known not{
/fontname/customfont def
}if
/Encoding Z
/:mre
{
copyfontdict
/Encoding MacEncoding def
fontname currentdict
end
definefont :ff def
}bd
/:bsr
{
copyfontdict
/Encoding Encoding 256 array copy def
Encoding dup
}bd
/pd{put dup}bd
/:esr
{
pop pop
fontname currentdict
end
definefont :ff def
}bd
/scf
{
scalefont def
}bd
/scf-non
{
$m scale :mf setfont
}bd
/ps Z
/fz{/ps xs}bd
/sf/setfont ld
/cF/currentfont ld
/mbf
{
/makeblendedfont where
{
pop
makeblendedfont
/ABlend exch definefont
}{
pop
}ifelse
def
}def
%%EndFile
/currentpacking where {pop sc_oldpacking setpacking}if
end		% md
%%EndProlog
%%BeginSetup
md begin
countdictstack
[
{%stopped
%%BeginFeature: *ManualFeed False
1 dict dup /ManualFeed false put setpagedevice
%%EndFeature
}featurecleanup
countdictstack
[
{%stopped
%%BeginFeature: *PageSize Letter

    2 dict dup /PageSize [612 792] put dup /ImagingBBox null put setpagedevice
%%EndFeature
}featurecleanup
(W. Kahan)setjob
/pT[1 0 0 -1 14 773]def/mT[1 0 0 -1 14 773]def
/sD 16 dict def
300 level2{1 dict dup/WaitTimeout 4 -1 roll put setuserparams}{statusdict/waittimeout 3 -1 roll put}ifelse
%%IncludeFont: Times-Roman
%%IncludeFont: Times-Bold
%%IncludeFont: Times-Italic
%%IncludeFont: Courier
%%IncludeFont: Symbol
/f0_1/Times-Roman :mre
/f0_14 f0_1 14 scf
/f0_12 f0_1 12 scf
/f0_11 f0_1 11 scf
/f0_10 f0_1 10 scf
/f0_9 f0_1 9 scf
/f0_8 f0_1 8 scf
/f1_1/Times-Bold :mre
/f1_14 f1_1 14 scf
/f1_12 f1_1 12 scf
/f1_10 f1_1 10 scf
/f1_9 f1_1 9 scf
/f2_1/Times-Italic :mre
/f2_12 f2_1 12 scf
/f2_10 f2_1 10 scf
/f2_9 f2_1 9 scf
/f3_1/Courier :mre
/f3_12 f3_1 12 scf
/f3_10 f3_1 10 scf
/f3_9 f3_1 9 scf
/f3_8 f3_1 8 scf
/f4_1/Symbol :bsr
240/apple pd
:esr /f4_12 f4_1 12 scf
/f4_10 f4_1 10 scf
/f4_9 f4_1 9 scf
/f5_1 f0_1 1.087 scf
/f5_12 f5_1 12 scf
/f5_10 f5_1 10 scf
/f5_9 f5_1 9 scf
/f6_1 f2_1 1.087 scf
/f6_10 f6_1 10 scf
/Courier findfont[10 0 0 -10 0 0]:mf setfont
% Frame PostScript Prolog for use with Macintosh Frame Products 4.0.2
% Copyright (c) 1986-94 Frame Technology Corp.  All rights reserved.
%%BeginProcSet: "FrameMacDict" 402 17
userdict/FrameMacDict 200 dict put FrameMacDict begin systemdict/setpacking
known{/fMSP currentpacking def true setpacking}if[/fM1/fM18/fM2/fM3/fM4/fM5/fM6
/fM8/fM9/fMBC/fMBM/fMC/fMCD/fMCG/fMCK/fMCM/fMCl/fMCO/fMFl/fMGC/fMGL/fMGM/fMIx
/fMJB/fMJC/fMJG/fMJK/fMJM/fMJR/fMJY/fMK/fML1/fMM/fMN/fMNC/fMNg/fMND/fMOx/fMPC
/fMPH/fMPt/fMRC/fMS/fMSJ/fMUC/fMUM/fMUY/fMY/fMat/fMa2/fMi/fMk/fms/fmBS/fMdp
/freq/sangle/sflipx/sflipy/pflipx/pflipy/xx/yy/xindex/yindex/fM1B/fM0B]{0 def}
forall/fML1/languagelevel where{pop languagelevel}{1}ifelse 2 lt def/fMCl fML1{
/statusdict where{pop statusdict/processcolors known{statusdict/processcolors
get exec 1 gt}{F}ifelse}{F}ifelse}{T}ifelse def/FmBD{bind def}bind def/fmBx{[
exch{dup/FrameMacDict eq{pop FrameMacDict}{dup type dup/arraytype eq exch
/packedarraytype eq or{dup xcheck{fmBi}if}if}ifelse}forall]cvx}FmBD/fmBi{bind
fmBx}FmBD/fmPU{userdict 3 1 roll fmBi put}bind def/T true def/F false def
userdict/fMSuccessfull F put userdict/fMSi F put userdict/fM7 known not{
userdict/fM7 0 put}if/fmXD{exch def}FmBD/FmG/gsave load def/FmR/grestore load
def/fm_l/grestoreall load def/fm_v/save load def/fm_g/setgray load def/fm_r
/setrgbcolor load def/fm_h/sethsbcolor load def/fm_f/fill load def/fm_e/eofill
load def/fm_t/stroke load def/fm_m/imagemask load def/fm_i/image load def/fm_s
/show load def/fm_a/ashow load def/fm_w/widthshow load def/fm_y/awidthshow load
def/fm_k/kshow load def/fMat matrix def/fMa2 matrix def/fmSM{fMat currentmatrix
pop}FmBD/fmRM{fMat setmatrix}FmBD/FmRF{currentpoint 2 copy translate 4 2 roll{
-1 1 scale}if rotate neg exch neg exch translate}FmBD/fmax{2 copy lt{exch}if
pop}FmBD/fmin{2 copy gt{exch}if pop}FmBD systemdict/pdfmark known{/FmPD/pdfmark
load def/FmPT/fm_s load def}{/FmPD/cleartomark load def/FmPT/pop load def}
ifelse/FmDC{transform fMat defaultmatrix itransform cvi exch cvi exch}FmBD/fmgS
32 array def/fMgt 0 def/fMtp 0 def/fmSG{fmgS fMgt get dup null eq{pop fmgS fMgt
10 dict dup 4 1 roll put}if 3 1 roll put}FmBD/fmGG{fMgt -1 -1{fmgS exch get dup
null ne{2 copy exch known{2 copy exch get/_notdef ne{exch get dup exit}if}if}if
pop}for pop}FmBD/gsave{FrameMacDict begin FmG/fMgt fMgt 1 add def fmgS fMgt get
dup null eq{pop}{dup dup{pop/_notdef put dup}forall pop pop}ifelse end}fmPU
/grestore{FrameMacDict begin fMgt fMtp gt{/fMgt fMgt 1 sub def}if FmR null fmCN
end}fmPU/grestoreall{FrameMacDict begin/fMgt fMtp def fm_l null fmCN end}fmPU
/save{FrameMacDict/fm_v get exec FrameMacDict begin/fMgt fMgt 1 add def fmgS
fMgt get dup null eq{pop}{dup dup{pop/_notdef put dup}forall pop pop}ifelse
/fMtp fMgt def end}fmPU/fMND F def/fMCC null fmSG/fMOP F fmSG/fMKO F fmSG/fmRY{
1 exch sub 3 1 roll 1 exch sub 3 1 roll 1 exch sub 3 1 roll 3 copy 2 copy le{
pop}{exch pop}ifelse 2 copy le{pop}{exch pop}ifelse dup dup dup 6 1 roll 4 1
roll 7 1 roll sub 6 1 roll sub 5 1 roll sub 4 1 roll}fmSG/fmkn{2 copy known{get
T}{pop pop false}ifelse}FmBD/fmfp{exch currentfont dup/FontMatrix get exch
/FontInfo fmkn{T}{currentfont/df fmkn{dup/FontInfo fmkn{3 1 roll/FontMatrix get
mtx concatmatrix exch T}{pop pop pop F}ifelse}{pop pop F}ifelse}ifelse{3 -1
roll fmkn{exch 0 3 1 roll dtransform neg exch pop exch pop}{pop exec}ifelse}{
exec}ifelse}FmBD/fmdl{3 index 16 and 0 ne{FmG currentlinewidth 2. div dup
rmoveto currentpoint newpath moveto 2 index 0 rlineto fm_t FmR}if 3 index 24
and 0 ne{FmG currentrgbcolor dup 4 1 roll eq 3 1 roll eq and{1 currentgray sub
setgray}{1 setgray}ifelse 2 index 0 rlineto fm_t FmR FmG 2 index 0 rlineto
strokepath .24 setlinewidth fm_t FmR}{2 index 0 rlineto fm_t 0 0 moveto}ifelse}
FmBD/FmUl{FmG/fM2 fmXD currentpoint/UnderlineThickness{fM2 15 div}fmfp abs dup
setlinewidth/fM1 fmXD 4 index 1 and 0 ne{newpath 2 copy moveto 0
/UnderlinePosition{fM2 10 div neg}fmfp neg rmoveto fmdl}if 4 index 2 and 0 ne{
newpath 2 copy moveto 0/XHeight{FmG newpath 0 0 moveto(x)F charpath flattenpath
pathbbox 4 -1 roll pop pop pop FmR dup 0 eq{pop fM2 2. mul 3. div neg}if}fmfp
2. div rmoveto fmdl}if 4 index 4 and 0 ne{newpath 2 copy moveto 0/CapHeight{FmG
newpath 0 0 moveto(H)F charpath flattenpath pathbbox 4 -1 roll pop pop pop FmR
dup 0 eq{pop fM2 3. mul 4. div neg}if}fmfp fM1 sub rmoveto fmdl}if pop pop pop
pop pop FmR}FmBD/FmTx{/fM3 fmXD/fM2 fmXD/fM1 fmXD 0 32 fM1 fM3 stringwidth pop
fM2 sub fM3 length div sub 0 fM3 fm_y}FmBD/fMN 0 def/fMC 1 def/fMM 2 def/fMY 3
def/fMK 4 def/fMS 5 def/fMNg 0 currenttransfer exec .5 gt def/fMCM fMN def/fMJK
0 def/fMJY 0 def/fMJM 0 def/fMJC 0 def/fMJR 1 def/fMJG 1 def/fMJB 1 def/fMCG 1
def/fMPt null def/fMCK[0 0 0 1 0 0 0]def/fmCH{fML1{14 dict dup begin fMCl{
/HalftoneType 2 def currentcolorscreen[/GraySpotFunction/GrayAngle
/GrayFrequency/BlueSpotFunction/BlueAngle/BlueFrequency/GreenSpotFunction
/GreenAngle/GreenFrequency/RedSpotFunction/RedAngle/RedFrequency]{exch def}
forall}{/HalftoneType 1 def currentscreen[/SpotFunction/Angle/Frequency]{exch
def}forall}ifelse statusdict/checkscreen known{statusdict/accuratescreens get
exec}{F}ifelse/AccurateScreens exch def end}{currenthalftone}ifelse}FmBD/fmSH{
fML1{begin statusdict/checkscreen known{currentdict/AccurateScreens known{
AccurateScreens}{F}ifelse statusdict/setaccuratescreens get exec}if
HalftoneType 1 eq{Frequency Angle currentdict/SpotFunction get setscreen}{
HalftoneType 2 eq{fMCl{RedFrequency RedAngle currentdict/RedSpotFunction get
GreenFrequency GreenAngle currentdict/GreenSpotFunction get BlueFrequency
BlueAngle currentdict/BlueSpotFunction get GrayFrequency GrayAngle currentdict
/GraySpotFunction get setcolorscreen}{GrayFrequency GrayAngle currentdict
/GraySpotFunction get setscreen}ifelse}if}ifelse end}{sethalftone}ifelse}FmBD
/FmCS{14 dict begin/HalftoneType 2 def/AccurateScreens exch def
/GraySpotFunction exch def/GrayAngle exch def/GrayFrequency exch def
/BlueSpotFunction exch def/BlueAngle exch def/BlueFrequency exch def
/GreenSpotFunction exch def/GreenAngle exch def/GreenFrequency exch def
/RedSpotFunction exch def/RedAngle exch def/RedFrequency exch def currentdict
dup end/fMPH exch def fmSH}FmBD/FmSS{5 dict begin/HalftoneType 1 def
/AccurateScreens exch def/SpotFunction exch def/Angle exch def/Frequency exch
def currentdict dup end/fMPH exch def fmSH}FmBD/fMPH fmCH def/fmcp{/FmPr2 exch
cvlit def/FmPr1 exch cvlit def/FmPrn FmPr1 length FmPr2 length add array def
FmPrn 0 FmPr1 putinterval FmPrn FmPr1 length FmPr2 putinterval FmPrn cvx}FmBD
/fmEp{sub dup 0 lt{neg}if .001 le}FmBD/fmQC{2 copy 0 get exch 0 get fmEp{2 copy
1 get exch 1 get fmEp{2 copy 2 get exch 2 get fmEp{3 get exch 3 get fmEp}{pop
pop F}ifelse}{pop pop F}ifelse}{pop pop F}ifelse}FmBD/fmQR{2 copy 4 get exch 0
get fmEp{2 copy 5 get exch 1 get fmEp{6 get exch 2 get fmEp}{pop pop F}ifelse}{
pop pop F}ifelse}FmBD/FmSC{/fMCM fmXD/fMJB fmXD/fMJG fmXD/fMJR fmXD/fMJK fmXD
/fMJY fmXD/fMJM fmXD/fMJC fmXD fmCC}FmBD/FmSP{/fMCM fmXD fmCC}FmBD
/FrameSetSepColors{FrameMacDict begin[exch 1 add 1 roll]/fMSC exch def end}fmBi
def/fmLC{fMSC{exch dup 3 -1 roll fmQC{pop T exit}if}forall dup T ne{pop F}if}
FmBD/fmLR{fMSC{exch dup 3 -1 roll fmQR{pop T exit}if}forall dup T ne{pop F}if}
FmBD/fmLM{fMSC{exch dup 3 -1 roll dup 7 get 3 -1 roll eq{exch pop T exit}{pop}
ifelse}forall dup T ne{pop F}if}FmBD/fmCN{fMND F fMCM fMN ne{/fMOP fmGG{/fMKO
fmGG{pop T}if}if}if dup/fMND exch def{pop pop}{exch dup null ne{exch pop dup
type dup/integertype eq exch/realtype eq or{fm_g}{setcolor}ifelse}{pop{1 fm_g}
if}ifelse}ifelse}FmBD/fill{FrameMacDict begin fMND{newpath}{fm_f}ifelse end}
fmPU/eofill{FrameMacDict begin fMND{newpath}{fm_e}ifelse end}fmPU/stroke{
FrameMacDict begin fMND{newpath}{fm_t}ifelse end}fmPU/imagemask{FrameMacDict
begin fMND{FmG nulldevive fm_m FmR}{fm_m}ifelse end}fmPU/show{FrameMacDict
begin fMND{stringwidth rmoveto}{fm_s}ifelse end}fmPU/fmNX{load fMND{FmG fMa2
currentmatrix end nulldevice setmatrix exec currentpoint FrameMacDict/FmR get
exec moveto}{end exec}ifelse}fmBi def/ashow{FrameMacDict begin/fm_a fmNX}fmPU
/widthshow{FrameMacDict begin/fm_w fmNX}fmPU/awidthshow{FrameMacDict begin/fm_y
fmNX}fmPU/kshow{FrameMacDict begin/RealKshow fmNX}fmPU/image{FrameMacDict begin
fMCM fMN ne fMCM fMK ne and{FmG/fMOP fmGG{nulldevice}{fMNg{{pop 0}}{{pop 1}}
ifelse settransfer}ifelse/fm_i load end exec FmR}{/fm_i load end exec}ifelse}
fmPU/fMGM T def/fMBM F def/setcustomcolor where{pop}{/findcmykcustomcolor{0 0 0
4 -1 roll 8 array astore}fmPU/findrgbcustomcolor{FrameMacDict begin 4 1 roll 3
copy/fmRY fmGG exec 8 4 roll 4 -1 roll 8 array astore end}fmPU
/findgraycustomcolor{0 0 0 exch 1 exch sub exch findcmykcustomcolor}fmPU
/findhsbcustomcolor{FrameMacDict begin 4 1 roll gsave fm_h currentrgbcolor
grestore 4 -1 roll findrgbcustomcolor end}fmPU/setcustomcolor{FrameMacDict
begin dup type dup/integertype eq exch/realtype eq or not{1.0}if exch dup/fMCC
exch fmSG/fMBM F def fMCM fMN eq{0 4 getinterval aload pop 4{4 index mul 4 1
roll}repeat fmSK pop}{dup{7 get}stopped{pop 4 get}if fmLM{exch pop 0 4
getinterval aload pop fMCM fMS eq{fMJK eq exch fMJY eq and exch fMJM eq and
exch fMJC eq and{1 exch sub F}{pop 1 T}ifelse}{5{pop}repeat 1 T}ifelse}{fMCM
fMK eq{3 get F}{fMCM fMY eq{2 get F}{fMCM fMM eq{1 get F}{fMCM fMC eq{0 get F}{
pop 0 T}ifelse}ifelse}ifelse}ifelse 3 1 roll mul 1 exch sub exch}ifelse/fMKO
exch fmSG fmCN}ifelse end}fmPU/setoverprint{FrameMacDict begin/fMOP exch fmSG
null fmCN end}fmPU/currentoverprint{FrameMacDict begin/fMOP fmGG end}fmPU}
ifelse/fmCC{fMCM fMN eq{fMGM fML1 or not{[/Pattern[/DeviceCMYK]]setcolorspace
fMCK 0 4 getinterval aload pop fMPt setcolor}{fMCK 3 get 1.0 ge{fMCG fm_g}{fMCl
fMGM and{0 1 3{fMCK exch get 1 fMCG sub mul}for fmSK}{4 1 6{fMCK exch get fMGM{
1 exch sub 1 fMCG sub mul 1 exch sub}{1.0 lt{fMCG}{1}ifelse}ifelse}for fm_r}
ifelse}ifelse}ifelse null/fMKO F fmSG}{fMBM{fMCG F}{fMCK 0 4 getinterval aload
fmLC{fMCM fMS eq{fMJK eq exch fMJY eq and exch fMJM eq and exch fMJC eq and{
fMCG F}{1 T}ifelse}{pop pop pop pop 1 T}ifelse}{fMCM fMK eq{fMCG 1.0 exch sub
mul 1.0 exch sub 4 1 roll pop pop pop F}{fMCM fMY eq{pop fMCG 1.0 exch sub mul
1.0 exch sub 3 1 roll pop pop F}{fMCM fMM eq{pop pop fMCG 1.0 exch sub mul 1.0
exch sub exch pop F}{fMCM fMC eq{pop pop pop fMCG 1.0 exch sub mul 1.0 exch sub
F}{pop pop pop pop 1 T}ifelse}ifelse}ifelse}ifelse}ifelse}ifelse/fMKO exch fmSG
fMGM fML1 or not{[/Pattern[/DeviceGray]]setcolorspace fMPt}{fMGM not fML1 and{
dup 1 lt{pop fMCG}if}if}ifelse}ifelse fmCN}FmBD/setgray{FrameMacDict begin fMCM
fMN eq{F}{fMCM fMK eq{F}{fMCM fMS eq fMJR 0 eq and fMJG 0 eq and fMJB 0 eq and{
F}{pop 1 T}ifelse}ifelse}ifelse/fMKO exch fmSG fmCN end}fmPU/setrgbcolor{
FrameMacDict begin/fMBM F def fMCM fMN eq{fm_r}{3 copy[4 1 roll]fmLR{fMCM fMS
eq{fMJB eq exch fMJG eq and exch fMJR eq and{0 F}{1 T}ifelse}{pop pop pop 1 T}
ifelse}{/fmRY fmGG exec fMCM fMK eq{1.0 exch sub 4 1 roll pop pop pop F}{fMCM
fMY eq{pop 1.0 exch sub 3 1 roll pop pop F}{fMCM fMM eq{pop pop 1.0 exch sub
exch pop F}{fMCM fMC eq{pop pop pop 1.0 exch sub F}{pop pop pop pop 1 T}ifelse}
ifelse}ifelse}ifelse}ifelse/fMKO exch fmSG fmCN}ifelse end}fmPU/sethsbcolor{
FrameMacDict begin fMCM fMN eq{fm_h}{fm_h currentrgbcolor setrgbcolor}ifelse
end}fmPU/setcmykcolor where{pop/fmSK/setcmykcolor load def}{/fmSK{4 1 roll 3{3
index add 0 fmax 1 fmin 1 exch sub 3 1 roll}repeat fm_r pop}FmBD}ifelse
/currentcmykcolor where{pop}{/currentcmykcolor{FrameMacDict begin
currentrgbcolor/fmRY fmGG exec end}fmPU}ifelse/setcmykcolor{FrameMacDict begin
/fMBM F def fMCM fMN eq{fmSK}{4 copy[5 1 roll]fmLC{fMCM fMS eq{fMJK eq exch
fMJY eq and exch fMJM eq and exch fMJC eq and{0 F}{1 T}ifelse}{pop pop pop pop
1 T}ifelse}{fMCM fMK eq{1.0 exch sub 4 1 roll pop pop pop F}{fMCM fMY eq{pop
1.0 exch sub 3 1 roll pop pop F}{fMCM fMM eq{pop pop 1.0 exch sub exch pop F}{
fMCM fMC eq{pop pop pop 1.0 exch sub F}{pop pop pop pop 1 T}ifelse}ifelse}
ifelse}ifelse}ifelse/fMKO exch fmSG fmCN}ifelse end}fmPU/fMFl[0 .1 .3 .5 .7 .9
.97 1<0f1e3c78f0e1c387><0f87c3e1f0783c1e><cccccccccccccccc><ffff0000ffff0000><
8142241818244281><0102040810204080><8040201008040201>]def fML1{/patScreenDict 7
dict dup begin<0f1e3c78f0e1c387>[45{pop}{exch pop}.5 2 sqrt]FmBD<0f87c3e1f0783c
1e>[135{pop}{exch pop}.5 2 sqrt]FmBD<cccccccccccccccc>[0{pop}dup .5 2]FmBD<ffff
0000ffff0000>[90{pop}dup .5 2]FmBD<8142241818244281>[45{2 copy lt{exch}if pop}
dup .75 2 sqrt]FmBD<0102040810204080>[45{pop}{exch pop}.875 2 sqrt]FmBD<804020
1008040201>[135{pop}{exch pop}.875 2 sqrt]FmBD end def}{/fMPP 5 dict dup begin<
0f87c3e1f0783c1e>{3 setlinewidth -1 -1 moveto 9 9 lineto fm_t 4 -4 moveto 12 4
lineto fm_t -4 4 moveto 4 12 lineto fm_t}FmBD<0f1e3c78f0e1c387>{3 setlinewidth
-1 9 moveto 9 -1 lineto fm_t -4 4 moveto 4 -4 lineto fm_t 4 12 moveto 12 4
lineto fm_t}FmBD<8142241818244281>{1 setlinewidth -1 9 moveto 9 -1 lineto fm_t
-1 -1 moveto 9 9 lineto fm_t}FmBD<8040201008040201>{1 setlinewidth -1 -1 moveto
9 9 lineto fm_t 4 -4 moveto 12 4 lineto fm_t -4 4 moveto 4 12 lineto fm_t}FmBD<
0102040810204080>{1 setlinewidth -1 9 moveto 9 -1 lineto fm_t -4 4 moveto 4 -4
lineto fm_t 4 12 moveto 12 4 lineto fm_t}FmBD end def/fMPD 15 dict dup begin
/PatternType 1 def/PaintType 2 def/TilingType 3 def/BBox[0 0 8 8]def/XStep 8
def/YStep 8 def/PaintProc{begin fMPP fmBS known{fMPP fmBS get exec}{8 8 T[1 0 0
-1 0 8]fmBS fm_m}ifelse end}FmBD end def}ifelse/fMdp 72 0 fMat defaultmatrix
dtransform dup mul exch dup mul add sqrt def/freq fMdp dup 72 div round dup 0
eq{pop 1}if 8 mul div def/sangle 1 0 fMat defaultmatrix dtransform exch atan
def sangle fMa2 rotate fMat fMa2 concatmatrix dup 0 get/sflipx exch def 3 get
/sflipy exch def fML1{/fmgF{fMa2 exch get mul 0 lt{-1}{1}ifelse}FmBD}if/fmPM
fML1{{dup patScreenDict exch known{patScreenDict exch get aload pop freq mul 5
2 roll fMa2 currentmatrix 1 get 0 ne{3 -1 roll 90 add 3 1 roll sflipx 1 fmgF
sflipy 2 fmgF mul}{sflipx 0 fmgF sflipy 3 fmgF neg mul}ifelse 0 lt{exch pop}{
pop}ifelse fMNg{{neg}fmcp}if bind systemdict/setscreen get exec}{/fmBS fmXD
/fM1B 0 def/fM0B 0 def freq 0 fMa2 currentmatrix 1 get 0 ne{90 add/pflipx
sflipx 1 fmgF def/pflipy sflipy 2 fmgF def}{/pflipx sflipx 0 fmgF def/pflipy
sflipy 3 fmgF neg def}ifelse{pflipy mul/yy fmXD pflipx mul/xx fmXD/xindex xx 1
add 2 div 8 mul cvi def/yindex yy 1 add 2 div 8 mul cvi def fmBS yindex xindex
8 idiv add get 1 7 xindex 8 mod sub bitshift and 0 ne fMNg{not}if{/fM1B fM1B 1
add def 1}{/fM0B fM0B 1 add def 0}ifelse}setscreen fM0B fM0B fM1B add div fMNg{
1.0 exch sub}if}ifelse/fMCG exch def/fMGM F def fmCC}}{/fMPC 8 dict def{dup
fMPC exch known{fMPC exch get}{dup fMPD/fmBS 3 -1 roll put fMPD matrix
makepattern dup fMPC 4 -1 roll 3 -1 roll put}ifelse/fMCG 0 def/fMPt exch def
/fMGM F def fmCC}}ifelse FmBD/fmgr{fMGM not{/fMGM T def fML1{fMPH fmSH}if}if
/fMCG exch def fmCC}FmBD/FmP{fMFl exch get dup type/stringtype eq{fmPM}{fmgr}
ifelse}FmBD/FmK{fMCK astore pop/fMBM F def fmCC}FmBD/FmFB{0 0 0 1 0 0 0 fMCK
astore pop/fMCG 0 def/fMBM T def fmCC}FmBD/fMOx matrix def fMOx currentmatrix
pop/FmSO{/FmOs save def fmSM fMOx setmatrix}FmBD/FmIO{fmRM}FmBD/FmEO{FmOs
restore}FmBD/fm3R[{.3 mul add 1}bind{.59 mul add 2}bind{.11 mul add round cvi
fMs exch fMi exch put/fMi fMi 1 add def 0 0}bind]def/fm31{/fMi 0 def 0 exch 0
exch{exch fm3R exch get exec}forall pop pop fMs}FmBD fML1{/Fmi{save userdict
/fM7 3 -1 roll put/fM9 F def{{dup length 1 sub/fMGL fmXD/fMBC fmXD/fMNC fmXD
/fMRC fmXD/fMGC fMGL 1 add array def/setcolortransfer where{pop
currentcolortransfer/gryt fmXD/blut fmXD/grnt fmXD/redt fmXD 0 1 fMGL{/fMIx
fmXD/fMUC 1 fMRC fMIx get sub def/fMUM 1 fMNC fMIx get sub def/fMUY 1 fMBC fMIx
get sub def/fMk fMUC fMUM fmin fMUY fmin def/FmU fMk currentundercolorremoval
exec def fMRC fMIx 1 0 fMUC FmU sub fmax sub redt exec put fMNC fMIx 1 0 fMUM
FmU sub fmax sub grnt exec put fMBC fMIx 1 0 fMUY FmU sub fmax sub blut exec
put fMGC fMIx 1 fMk currentblackgeneration exec sub gryt exec put}for{fMGL mul
cvi fMRC exch get}{fMGL mul cvi fMNC exch get}{fMGL mul cvi fMBC exch get}{fMGL
mul cvi fMGC exch get}setcolortransfer{pop 0}setundercolorremoval{}
setblackgeneration/fM9 T def}{0 1 fMGL{fMGC exch dup dup fMRC exch get .3 mul
exch dup fMNC exch get .59 mul exch fMBC exch get .11 mul add add put}for{fMGL
mul cvi fMGC exch get}currenttransfer fmcp settransfer}ifelse}{dup length 1 sub
/fMGL fmXD/fMGC fmXD{fMGL mul cvi fMGC exch get}currenttransfer fmcp
settransfer}ifelse}{{{1 exch sub}currenttransfer fmcp settransfer}if}ifelse/fM5
fmXD/fM8 fmXD/fM6 fmXD/fM3 fmXD/fM4 fmXD translate rotate scale{-1 1 scale}if
/fM18 fM8 string def fM4 fM3 fM6[fM4 0 0 fM3 fM4 2 div fM3 2 div]{currentfile
fM18 fM5{readstring}{readhexstring}ifelse pop}fM9{{fM18}{fM18}T 3 colorimage}{
fm_i}ifelse fM7 restore}FmBD}{/Fmi{save userdict/fM7 3 -1 roll put/fM9 F def{{
dup length 1 sub/fMGL fmXD/fMBC fmXD/fMNC fmXD/fMRC fmXD[/Indexed/DeviceRGB
fMGL{dup fMRC exch get exch dup fMNC exch get exch fMBC exch get}]setcolorspace
}{dup length 1 sub/fMGL fmXD/fMGC fmXD[/Indexed/DeviceGray fMGL{fMGC exch get}]
setcolorspace}ifelse}{1 4 index bitshift 1 sub/fMGL fmXD[/Indexed/DeviceGray
fMGL 5 -1 roll{{fMGL div 1 exch sub}}{{fMGL div}}ifelse]setcolorspace}ifelse
/fM5 fmXD/fM8 fmXD/fM6 fmXD/fM3 fmXD/fM4 fmXD translate rotate scale{-1 1 scale
}if/fM18 fM8 string def 7 dict begin/ImageType 1 def/Width fM4 def/Height fM3
def/ImageMatrix[fM4 0 0 fM3 fM4 2 div fM3 2 div]def/DataSource{currentfile fM18
fM5{readstring}{readhexstring}ifelse pop}def/BitsPerComponent fM6 def/Decode[0
fMGL]def currentdict end fm_i fM7 restore}FmBD}ifelse/Fmci{save userdict/fM7 3
-1 roll put/fM5 fmXD/fM8 fmXD/fM6 fmXD/fM3 fmXD/fM4 fmXD/fM18 fM8 string def
/fMs fM18 0 fM18 length 3 idiv getinterval def translate rotate scale{-1 1
scale}if fM4 fM3 fM6[fM4 0 0 fM3 fM4 2 div fM3 2 div]fMCl{{currentfile fM18 fM5
{readstring}{readhexstring}ifelse pop}F 3 colorimage}{{currentfile fM18 fM5{
readstring}{readhexstring}ifelse pop fm31}fm_i}ifelse fM7 restore}FmBD fML1{
/fmAn{transform round .5 sub exch round .5 sub exch itransform}FmBD/fmAc{
transform round 1.5 sub exch round 1.5 sub exch itransform}FmBD/fmDn{dtransform
round exch round exch idtransform}FmBD/fmLn{0 dtransform exch cvi 2 idiv 2 mul
.1 add exch idtransform pop}FmBD/FmCv{fmDn 6 2 roll fmDn 6 2 roll fmDn 6 2 roll
rcurveto}FmBD}{T setstrokeadjust/fmAn{}FmBD/fmAc{}FmBD/fmDn{}FmBD/fmLn{}FmBD
/FmCv{rcurveto}FmBD}ifelse/FmM{fmAn moveto}FmBD/M{moveto}FmBD/N{0 rmoveto}FmBD
/S{fm_s}FmBD/A{0 exch fm_a}FmBD/W{0 exch 32 exch fm_w}FmBD/X{0 exch 0 32 5 2
roll fm_y}FmBD/fmQP{fML1 fMGM or not{FmG dup 1 fm_g exec FmR}if exec}FmBD/FmB{
newpath fmAn moveto}FmBD/FmL{rlineto}FmBD/FmAL{fmAn lineto}FmBD/FmSo{fmLn
setlinewidth setlinecap{fm_t}fmQP 0 0 moveto}FmBD/FmS{fmLn setlinewidth
closepath{fm_t}fmQP 0 0 moveto}FmBD/FmDS{fmLn setlinewidth setlinecap{closepath
}if setdash{fm_t}fmQP[]0 setdash 0 0 moveto}FmBD/FmFl{FmG{fm_e}fmQP FmR}FmBD
/fmq{fmDn 4 2 roll fmAn newpath moveto 1 index 0 rlineto 0 exch rlineto neg 0
rlineto closepath}FmBD/FmqP{fmq fmLn setlinewidth{fm_t}fmQP 0 0 moveto}FmBD
/FmqF{fmq FmG{fm_f}fmQP FmR}FmBD/FmKp{{currentpoint}stopped{F 5 1 roll}{T 7 3
roll}ifelse fmDn 4 2 roll fmAn newpath moveto 1 index 0 rlineto 0 exch rlineto
neg 0 rlineto closepath clip{moveto}{newpath}ifelse}FmBD/FmKb{{currentpoint}
stopped}FmBD/FmKe{clip{newpath}{moveto}ifelse}FmBD/FmAF{FmG newpath fmAn
translate not{0.0 0.0 moveto}if rotate fmDn scale 0.0 0.0 1.0 5 3 roll arc
closepath{fm_f}fmQP FmR}FmBD/FmAP{FmG{setdash}if fmLn setlinewidth setlinecap
fmSM newpath 2 index 2 div add exch 3 index 2 div sub exch fmAn 2 index 2 div
sub exch 3 index 2 div add exch translate rotate scale 0.0 0.0 1.0 5 3 roll
exch arcn{closepath}if fmRM{fm_t}fmQP FmR}FmBD/FmST{FmG fmAn translate .3 fmLn
setlinewidth 0 setlinecap 0 setlinejoin newpath 1 fm_g 0 0 10 0 360 arc fm_f 0
fm_g 0 0 10 0 360 arc fm_t 36{1 0 moveto 0 0 10 -2.5 2.5 arc fm_f 10 rotate}
repeat FmR}FmBD/FmSL{FmG fmAn translate .25 fmLn setlinewidth 0 setlinecap 0
setlinejoin newpath 1 fm_g 0 0 10 0 360 arc fm_f 0 fm_g 10 .5 fmLn neg .1{0 0 3
-1 roll 0 360 arc fm_t}for FmR}FmBD/FrameEr where{pop}{userdict/FrameEr(\000)
put}ifelse/fMSJ 100 string def/fmXC{userdict/fMSi 2 index put end{
countdictstack userdict begin/showpage{}def/FmDictStackDepth exch def count
/FmStackDepth exch def}if userdict/fMSuccessfull false put currentfile cvx
stopped pop fMSuccessfull not{/$brkpage where{stop}if systemdict/clear get exec
userdict/FrameEr get 0 1 put FrameMacDict begin FmG systemdict/initmatrix get
exec 0 systemdict/setgray get exec clippath{pathbbox}stopped{100 100 512 692}if
exch pop add 2. div newpath moveto(Courier-BoldOblique)findfont 18 scalefont
setfont FrameEr1 fm_s( \()fm_s $error begin errorname 20 string cvs fm_s(, )
fm_s/command load 128 string cvs fm_s end(\))fm_s FrameEr2 print flush
FrameMacDict/fMSJ get{dup currentfile exch{readline}stopped{pop exch pop T}if
not{exit}if(EndFrame4Picture)eq{exit}if}loop grestore end}if userdict
/fMSuccessfull false put FrameMacDict/fmIR get exec}fmBi def/FmEP{save userdict
/fM7 3 -1 roll put setoverprint{fMN FmSP}if[/fMef/fMet/fMeh/fMew/fMey/fMex/fMei
/fMej/fMek/fMel]{fmXD}forall fMex fMey translate fMet rotate fMew fMeh scale
fMef{-1 1 scale}if 1 fMej fMel sub div 1 fMek fMei sub div scale fMej fMel add
2 div neg fMei fMek add 2 div neg translate newpath fMel fMek moveto fMel fMei
lineto fMej fMei lineto fMej fMek lineto closepath clip newpath T fmXC}FmBD
/FmPI{newpath 0 0 moveto F fmXC}FmBD/FmPc{save userdict/fM7 3 -1 roll put
newpath 3 index neg 3 index neg translate 1 -1 scale 0.0 0.0 moveto T fmXC}FmBD
/fmIR{fMSi{fM7 type/savetype eq{end/FmDictStackDepth where{pop countdictstack
FmDictStackDepth sub dup 0 gt{{end}repeat}{pop}ifelse count FmStackDepth sub
dup 0 gt{{pop}repeat}{pop}ifelse}if fM7 restore}if}if FrameMacDict begin}FmBD
userdict/EndFrame4Picture{userdict/fMSi 3 -1 roll put userdict/fMSuccessfull
true put stop}fmBi put/alphaimage where{pop}{/alphaimage{1 ne{limitcheck}if not
{limitcheck}if pop image}fmPU}ifelse/fmDE{systemdict/initgraphics get exec
clippath{pathbbox}stopped{100 100 512 692}if exch pop add 2. div newpath moveto
(Courier-BoldOblique)findfont 18 scalefont setfont currentpoint 2 copy FrameEr3
fm_s 20 sub 2 copy moveto FrameEr4 fm_s 20 sub 2 copy moveto(\()fm_s statusdict
/jobname get fm_s(\))fm_s 20 sub moveto FrameEr5 fm_s showpage}FmBD/cd where{
dup/cd get/FmRealcd fmXD/cd{FrameMacDict begin FrameEr 0 get 0 ne{fmDE}if
/FmRealcd load end exec}fmBi put}{/endp where{dup/endp get/fMRE fmXD/endp{
FrameMacDict/fMRE get exec FrameEr 0 get 0 ne{FrameMacDict begin currentfile
fMSJ{readline}stopped{pop exch pop true}if pop(%%Trailer)eq{fmDE}if end}if}fmBi
put}if}ifelse systemdict/setpacking known{fMSP setpacking}if end
%%EndProcSet
%%FRMSetup
FrameMacDict begin
/FrameEr1(PostScript error)def
/FrameEr2(A PostScript error occurred. FrameMaker is attempting recovery.)def
/FrameEr3(FrameMaker has detected one or more)def
/FrameEr4(PostScript errors in this document.)def
/FrameEr5(Please check your output.)def
end
%%FRMEndSetup
%%EndSetup
%%Page: 1 1
%%BeginPageSetup
initializepage
(W. Kahan; page: 1 of 30)setjob
%%EndPageSetup
gS 0 0 584 768 rC
1 G
-14 -19 612 792 rF
0 G
0 0 :M
FrameMacDict begin
0 0 0 1 0 0 0 FmK
0 FmP
0 FmSP
0 0 0 1 0 0 0 FmK
7 FmP
58 17 468 10 FmqF
end
0 0 :M
f0_10 sf
( )S
2 0 :M
FrameMacDict begin
0 0 0 1 0 0 0 FmK
0 FmP
58 23.82 M (Work in Progress:                          Lecture Notes on the Status of  IEEE 754                            )S
(August 17, 1995)S
7 FmP
58 729.678 468 10 FmqF
0 FmP
499.064 736.498 M (Page )S
(1)S
7 FmP
58 53 468 648 FmqF
end
3 0 :M
f0_12 sf
( )S
6 0 :M
FrameMacDict begin
0 0 0 1 0 0 0 FmK
0 FmP
219.194 73 M (Lecture Notes on the Status of)S
end
6 0 :M
f1_14 sf
( )S
9 0 :M
FrameMacDict begin
0 0 0 1 0 0 0 FmK
0 FmP
117.42 102.333 M (IEEE Standard 754  for  Binary Floating-Point Arithmetic)S
end
9 0 :M
f0_10 sf
( )S
11 0 :M
FrameMacDict begin
0 0 0 1 0 0 0 FmK
0 FmP
260.625 128.667 M (Prof. W. Kahan)S
226.744 140.667 M (Elect. Eng. & Computer Science)S
243.963 152.667 M (University of California)S
236.596 164.667 M (Berkeley   CA  94720-1776)S
end
12 0 :M
f1_12 sf
( )S
15 0 :M
FrameMacDict begin
0 0 0 1 0 0 0 FmK
0 FmP
58 192 M (Introduction:)S
end
15 0 :M
f0_10 sf
( )S
17 0 :M
FrameMacDict begin
0 0 0 1 0 0 0 FmK
0 FmP
58 204.667 M (Twenty years ago anarchy threatened floating-point arithmetic.  Over a dozen commercially significant arithmetics )S
58 216.667 M (boasted diverse wordsizes,  precisions,  rounding procedures and over/underflow behaviors,  and more were in the )S
58 228.667 M (works.  \322Portable\323  software intended to reconcile that numerical diversity had become unbearably costly to )S
58 240.666 M (develop.)S
58 264.666 M (Ten years ago,  when  IEEE 754  became official,  major microprocessor manufacturers had already adopted it )S
58 276.666 M (despite the challenge it posed to implementors.  With unprecedented altruism,  hardware designers rose to its )S
58 288.666 M (challenge in the belief that they would ease and encourage a vast burgeoning of numerical software.  They did )S
58 300.666 M (succeed to a considerable extent.  Anyway,  rounding anomalies that preoccupied all of us in the 1970s  afflict only  )S
58 312.666 M (CRAYs  now.)S
58 336.666 M (Now atrophy threatens features of  IEEE 754  caught in a vicious circle:)S
58 348.666 M (            Those features lack support in programming languages and compilers,)S
58 360.666 M (             so those features are mishandled and/or practically unusable,)S
58 372.666 M (             so those features are little known and less in demand,  and so)S
58 384.666 M (             those features lack support in programming languages and compilers.)S
58 396.666 M (To help break that circle,  those features are discussed in these notes under the following headings:)S
58 420.666 M (Representable Numbers,  Normal  and  Subnormal,  Infinite  and  NaN )S
147.105 N ( 2)S
58 432.666 M (Encodings,  Span  and Precision )S
300.64 N ( 3)S
58 444.666 M (Multiply-Accumulate,  a  Mixed Blessing )S
262.874 N ( 5)S
58 456.666 M (Exceptions in General;  Retrospective Diagnostics )S
228.187 N ( 6)S
58 468.666 M (Exception:  Invalid Operation;  NaNs )S
279.832 N ( 7)S
58 480.666 M (Exception:  Divide by Zero;  Infinities )S
276.216 N (10)S
58 492.666 M (            Digression on Division by Zero;  Two Examples )S
204.825 N (10)S
58 516.666 M (Exception:  Overflow )S
342.869 N (14)S
58 528.666 M (Exception:  Underflow )S
337.869 N (15)S
58 540.666 M (             Digression on Gradual Underflow;  an Example )S
205.408 N (16)S
58 552.666 M (Exception:  Inexact )S
351.758 N (18)S
58 564.666 M (Directions of Rounding )S
335.076 N (18)S
58 576.666 M (Precisions of Rounding )S
335.625 N (19)S
58 588.666 M (The Baleful Influence of Benchmarks;  a  Proposed Benchmark )S
175.442 N (20)S
58 612.666 M (Exceptions in General,  Reconsidered;  a  Suggested Scheme)S
188.758 N (24)S
58 624.666 M (Ruminations  on  Programming Languages)S
260.088 N (29)S
58 636.666 M (Annotated Bibliography )S
332.576 N (30)S
58 672.666 M (Insofar as this is a status report,  it is subject to change and supersedes versions with earlier dates.  This version )S
58 684.666 M (supersedes one distributed at a panel discussion of  \322Floating-Point Past, Present and Future\323  in a series of  San )S
58 696.666 M (Francisco Bay Area Computer History Perspectives  sponsored by  Sun Microsystems Inc.  in  May 1995.)S
-14 -19 M ( )S
189 771 M (This document was created with FrameMaker 4.0.4) FmPT
[/CropBox[-14 773 FmDC 598 -19 FmDC]/PAGE FmPD
end
endp
%%Page: 2 2
%%BeginPageSetup
initializepage
(W. Kahan; page: 2 of 30)setjob
%%EndPageSetup
gS 0 0 584 768 rC
1 G
-14 -19 612 792 rF
0 G
17 0 :M
FrameMacDict begin
0 0 0 1 0 0 0 FmK
0 FmP
0 FmSP
7 FmP
58 17 468 10 FmqF
end
17 0 :M
f0_10 sf
( )S
19 0 :M
FrameMacDict begin
0 0 0 1 0 0 0 FmK
0 FmP
58 23.82 M (Work in Progress:                          Lecture Notes on the Status of  IEEE 754                            )S
(August 17, 1995)S
7 FmP
58 729.678 468 10 FmqF
0 FmP
499.064 736.498 M (Page )S
(2)S
7 FmP
58 53 468 648 FmqF
end
20 0 :M
f1_12 sf
( )S
23 0 :M
FrameMacDict begin
0 0 0 1 0 0 0 FmK
0 FmP
58 61 M (Representable Numbers:)S
end
23 0 :M
f0_10 sf
( )S
25 0 :M
FrameMacDict begin
0 0 0 1 0 0 0 FmK
0 FmP
58 73.667 M (IEEE 754  specifies three types or  )S
end
25 0 :M
f2_10 sf
( )S
27 0 :M
FrameMacDict begin
0 0 0 1 0 0 0 FmK
0 FmP
199.047 73.667 M (Formats)S
end
28 0 :M
f0_10 sf
( )S
30 0 :M
FrameMacDict begin
0 0 0 1 0 0 0 FmK
0 FmP
232.932 73.667 M (   of floating-point numbers:)S
58 85.667 M ( )S
58 97.667 M (          Single  \( Fortran\'s  REAL*4,  C\'s  )S
end
30 0 :M
f3_10 sf
( )S
36 0 :M
FrameMacDict begin
0 0 0 1 0 0 0 FmK
0 FmP
220.466 97.667 M 0 0 30(float)FmTx
end
36 0 :M
f0_10 sf
( )S
38 0 :M
FrameMacDict begin
0 0 0 1 0 0 0 FmK
0 FmP
250.466 97.667 M ( \),)S
87.207 N (          \( Obligatory \),)S
58 109.667 M (         Double  \( Fortran\'s  REAL*8,  C\'s  )S
end
39 0 :M
f3_10 sf
( )S
45 0 :M
FrameMacDict begin
0 0 0 1 0 0 0 FmK
0 FmP
221.848 109.667 M 0 0 36(double)FmTx
end
45 0 :M
f0_10 sf
( )S
47 0 :M
FrameMacDict begin
0 0 0 1 0 0 0 FmK
0 FmP
257.848 109.667 M ( \),)S
79.825 N (          \( Ubiquitous \),  and)S
58 121.667 M (         Double-Extended  \( Fortran REAL*10+,  C\'s  )S
end
47 0 :M
f3_10 sf
( )S
53 0 :M
FrameMacDict begin
0 0 0 1 0 0 0 FmK
0 FmP
265.39 121.667 M 0 0 66(long double)FmTx
end
53 0 :M
f0_10 sf
( )S
55 0 :M
FrameMacDict begin
0 0 0 1 0 0 0 FmK
0 FmP
331.39 121.667 M ( \),)S
6.282 N (          \( Optional \).)S
58 133.667 M (\( A fourth  Quadruple-Precision  format is not specified by  IEEE 754  but has become a  )S
end
56 0 :M
f2_10 sf
( )S
58 0 :M
FrameMacDict begin
0 0 0 1 0 0 0 FmK
0 FmP
416.196 133.667 M (de facto)S
end
58 0 :M
f0_10 sf
( )S
60 0 :M
FrameMacDict begin
0 0 0 1 0 0 0 FmK
0 FmP
448.129 133.667 M (  standard among )S
58 145.667 M (several computer makers none of whom support it fully in hardware yet,  so it runs slowly at best.\))S
58 169.667 M (Each format has representations for  NaNs \(Not-a-Number\),  )S
end
61 0 :M
f4_10 sf
( )S
63 0 :M
FrameMacDict begin
0 0 0 1 0 0 0 FmK
0 FmP
303.417 169.667 M (\261)S
end
63 0 :M
f0_10 sf
( )S
65 0 :M
FrameMacDict begin
0 0 0 1 0 0 0 FmK
0 FmP
308.906 169.667 M (Infinity,  and its own set of finite real numbers all of )S
58 181.667 M (the simple form)S
274.254 196.866 M (2)S
end
66 0 :M
f0_9 sf
( )S
68 0 :M
FrameMacDict begin
0 0 0 1 0 0 0 FmK
0 FmP
FmG 279.254 192.866 M 0.978 0.978 scale (k+1-N)S FmR
end
68 0 :M
f0_10 sf
( )S
70 0 :M
FrameMacDict begin
0 0 0 1 0 0 0 FmK
0 FmP
302.246 196.866 M ( n)S
58 208.866 M (with two integers   n  \(  )S
end
70 0 :M
f2_10 sf
( )S
72 0 :M
FrameMacDict begin
0 0 0 1 0 0 0 FmK
0 FmP
153.251 208.866 M (Significand)S
end
73 0 :M
f0_10 sf
( )S
75 0 :M
FrameMacDict begin
0 0 0 1 0 0 0 FmK
0 FmP
198.803 208.866 M ( \)  and   k  \( unbiased )S
end
75 0 :M
f2_10 sf
( )S
77 0 :M
FrameMacDict begin
0 0 0 1 0 0 0 FmK
0 FmP
285.441 208.866 M (Exponent)S
end
78 0 :M
f0_10 sf
( )S
80 0 :M
FrameMacDict begin
0 0 0 1 0 0 0 FmK
0 FmP
323.205 208.866 M ( \)  that run throughout two intervals determined )S
58 220.866 M (from the format thus:)S
end
80 0 :M
f0_12 sf
( )S
83 0 :M
FrameMacDict begin
0 0 0 1 0 0 0 FmK
0 FmP
58 248.066 M ( )S
end
83 0 :M
f0_10 sf
( )S
85 0 :M
FrameMacDict begin
0 0 0 1 0 0 0 FmK
0 FmP
61 248.066 M (                 N  Significant bits:   -2)S
end
86 0 :M
f0_9 sf
( )S
88 0 :M
FrameMacDict begin
0 0 0 1 0 0 0 FmK
0 FmP
FmG 195.148 244.066 M 0.978 0.978 scale (N)S FmR
end
88 0 :M
f0_10 sf
( )S
90 0 :M
FrameMacDict begin
0 0 0 1 0 0 0 FmK
0 FmP
201.487 248.066 M (  <  n  <  2)S
end
91 0 :M
f0_9 sf
( )S
93 0 :M
FrameMacDict begin
0 0 0 1 0 0 0 FmK
0 FmP
FmG 242.766 244.066 M 0.978 0.978 scale (N)S FmR
end
93 0 :M
f0_10 sf
( )S
95 0 :M
FrameMacDict begin
0 0 0 1 0 0 0 FmK
0 FmP
249.105 248.066 M (  .                     K+1  Exponent bits:  1 - 2)S
end
95 0 :M
f0_9 sf
( )S
97 0 :M
FrameMacDict begin
0 0 0 1 0 0 0 FmK
0 FmP
FmG 413.34 244.066 M 0.978 0.978 scale (K)S FmR
end
98 0 :M
f0_10 sf
( )S
100 0 :M
FrameMacDict begin
0 0 0 1 0 0 0 FmK
0 FmP
419.679 248.066 M (  <  k  <  2)S
end
100 0 :M
f0_9 sf
( )S
102 0 :M
FrameMacDict begin
0 0 0 1 0 0 0 FmK
0 FmP
FmG 460.958 244.066 M 0.978 0.978 scale (K)S FmR
end
102 0 :M
f0_10 sf
( )S
104 0 :M
FrameMacDict begin
0 0 0 1 0 0 0 FmK
0 FmP
467.297 248.066 M (  .)S
58 417.933 M (This concise representation    2)S
end
105 0 :M
f0_9 sf
( )S
107 0 :M
FrameMacDict begin
0 0 0 1 0 0 0 FmK
0 FmP
FmG 182.392 413.933 M 0.978 0.978 scale (k+1-N)S FmR
end
107 0 :M
f0_10 sf
( )S
109 0 :M
FrameMacDict begin
0 0 0 1 0 0 0 FmK
0 FmP
205.385 417.933 M ( n ,  unique to  IEEE 754,  is deceptively simple.  At first sight it appears )S
58 429.933 M (potentially ambiguous because,  if  n  is even,  dividing  n  by  2  \( a right-shift \)  and then adding  1  to  k  makes no )S
58 441.933 M (difference.  Whenever such an ambiguity could arise it is resolved by minimizing the exponent  k  and thereby )S
58 453.933 M (maximizing the magnitude of  n ;  this is  \322 )S
(Normalization.\323   IEEE 754\'s  Normals  are distinguishable from the  )S
58 465.933 M (Subnormal \( Denormalized \)  numbers lacking or suppressed in earlier computer arithmetics;  Subnormals  are )S
58 477.933 M (nonzero numbers with unnormalized significand and minimal exponent:)S
168.089 505.132 M (Subnormals  have     0  <  | n |  <  2)S
end
110 0 :M
f0_9 sf
( )S
112 0 :M
FrameMacDict begin
0 0 0 1 0 0 0 FmK
0 FmP
FmG 307.516 501.132 M 0.978 0.978 scale (N-1)S FmR
end
112 0 :M
f0_10 sf
( )S
114 0 :M
FrameMacDict begin
0 0 0 1 0 0 0 FmK
0 FmP
321.166 505.132 M (      and     k  =  2 - 2)S
end
114 0 :M
f0_9 sf
( )S
116 0 :M
FrameMacDict begin
0 0 0 1 0 0 0 FmK
0 FmP
FmG 402.072 501.132 M 0.978 0.978 scale (K)S FmR
end
117 0 :M
f0_10 sf
( )S
119 0 :M
FrameMacDict begin
0 0 0 1 0 0 0 FmK
0 FmP
408.411 505.132 M (  .)S
end
119 0 :M
f3_10 sf
( )S
125 0 :M
FrameMacDict begin
0 0 0 1 0 0 0 FmK
0 FmP
58 541.132 M 0 0 6( )FmTx
58 553.132 M 0 0 450(    Subnormals   [--- Normalized Numbers ----- - - -  -  -  -  -   -  -  ->)FmTx
58 565.132 M 0 0 396(                 |               |                               |)FmTx
58 577.132 M 0 0 432( 0-!-!-+-!-+-+-+-!-+-+-+-+-+-+-+-!---+---+---+---+---+---+---+---!------)FmTx
58 589.132 M 0 0 396(   | |   |       |               |                               |)FmTx
58 608.332 M 0 0 102( Powers of 2 :  2)FmTx
end
125 0 :M
f3_9 sf
( )S
130 0 :M
FrameMacDict begin
0 0 0 1 0 0 0 FmK
0 FmP
FmG 160 604.332 M 0.978 0.978 scale 0 0 14.967(2-2)FmTx FmR
FmG 174.634 601.332 M 0.978 0.978 scale 0 0 4.989(K)FmTx FmR
end
130 0 :M
f3_10 sf
( )S
136 0 :M
FrameMacDict begin
0 0 0 1 0 0 0 FmK
0 FmP
179.512 608.332 M 0 0 78(            2)FmTx
end
136 0 :M
f3_9 sf
( )S
141 0 :M
FrameMacDict begin
0 0 0 1 0 0 0 FmK
0 FmP
FmG 257.512 604.332 M 0.978 0.978 scale 0 0 14.967(3-2)FmTx FmR
FmG 272.146 600.332 M 0.978 0.978 scale 0 0 4.989(K)FmTx FmR
end
141 0 :M
f3_10 sf
( )S
147 0 :M
FrameMacDict begin
0 0 0 1 0 0 0 FmK
0 FmP
277.023 608.332 M 0 0 174(                            2)FmTx
end
147 0 :M
f3_9 sf
( )S
152 0 :M
FrameMacDict begin
0 0 0 1 0 0 0 FmK
0 FmP
FmG 451.023 604.332 M 0.978 0.978 scale 0 0 14.967(4-2)FmTx FmR
FmG 465.657 600.332 M 0.978 0.978 scale 0 0 4.989(K)FmTx FmR
end
152 0 :M
f3_10 sf
( )S
158 0 :M
FrameMacDict begin
0 0 0 1 0 0 0 FmK
0 FmP
156.351 633.665 M 0 0 18(-+-)FmTx
end
158 0 :M
f0_10 sf
( )S
160 0 :M
FrameMacDict begin
0 0 0 1 0 0 0 FmK
0 FmP
174.351 633.665 M (   )S
end
161 0 :M
f0_12 sf
( )S
164 0 :M
FrameMacDict begin
0 0 0 1 0 0 0 FmK
0 FmP
181.851 633.665 M (Consecutive Positive Floating-Point Numbers)S
end
164 0 :M
f0_10 sf
( )S
166 0 :M
FrameMacDict begin
0 0 0 1 0 0 0 FmK
0 FmP
402.149 633.665 M (   )S
end
166 0 :M
f3_10 sf
( )S
172 0 :M
FrameMacDict begin
0 0 0 1 0 0 0 FmK
0 FmP
409.649 633.665 M 0 0 18(-+-)FmTx
end
172 0 :M
f5_12 sf
.739 .074( )J
176 0 :M
FrameMacDict begin
0 0 0 1 0 0 0 FmK
0 FmP
196 272.066 M 0 0 193(Table of  Formats\325  Parameters:)FmTx
end
176 0 :M
f0_10 sf
( )S
178 0 :M
FrameMacDict begin
0 0 0 1 0 0 0 FmK
0 FmP
223.309 294.733 M ( Format)S
37.449 N ( N)S
16.461 N ( K+1)S
16.433 N (Bytes)S
226.223 314.733 M (Single)S
40.223 N (24)S
24 N (8)S
33 N (4)S
224.282 334.733 M (Double)S
38.282 N (53)S
21.5 N (11)S
30.5 N (8)S
202 354.733 M ( Double-Extended)S
end
179 0 :M
f4_10 sf
( )S
181 0 :M
FrameMacDict begin
0 0 0 1 0 0 0 FmK
0 FmP
288.006 354.733 M (\263)S
end
181 0 :M
f0_10 sf
( )S
183 0 :M
FrameMacDict begin
0 0 0 1 0 0 0 FmK
0 FmP
293.494 354.733 M ( 64)S
end
184 0 :M
f4_10 sf
( )S
186 0 :M
FrameMacDict begin
0 0 0 1 0 0 0 FmK
0 FmP
319.506 354.733 M (\263)S
end
186 0 :M
f0_10 sf
( )S
188 0 :M
FrameMacDict begin
0 0 0 1 0 0 0 FmK
0 FmP
324.994 354.733 M ( 15)S
end
189 0 :M
f4_10 sf
( )S
191 0 :M
FrameMacDict begin
0 0 0 1 0 0 0 FmK
0 FmP
357.506 354.733 M (\263)S
end
191 0 :M
f0_10 sf
( )S
193 0 :M
FrameMacDict begin
0 0 0 1 0 0 0 FmK
0 FmP
362.994 354.733 M ( 10)S
214.985 374.733 M (\( Quadruple)S
26.485 N (113)S
19 N (15)S
17.586 N (     16  \))S
196 282.316 FmB
0 99.5 FmL
0 0.5 FmSo
282 281.816 FmB
0 100.5 FmL
0 0.5 FmSo
312 281.816 FmB
0 100.5 FmL
0 0.5 FmSo
345 281.816 FmB
0 100.5 FmL
0 0.5 FmSo
388 282.316 FmB
0 99.5 FmL
0 0.5 FmSo
195.75 282.066 FmB
192.5 0 FmL
0 0.5 FmSo
196.25 300.816 FmB
191.5 0 FmL
0 0.5 FmSo
196.25 303.316 FmB
191.5 0 FmL
0 0.5 FmSo
195.75 322.066 FmB
192.5 0 FmL
0 0.5 FmSo
195.75 342.066 FmB
192.5 0 FmL
0 0.5 FmSo
195.75 362.066 FmB
192.5 0 FmL
0 0.5 FmSo
195.75 382.066 FmB
192.5 0 FmL
0 0.5 FmSo
[/CropBox[-14 773 FmDC 598 -19 FmDC]/PAGE FmPD
end
endp
%%Page: 3 3
%%BeginPageSetup
initializepage
(W. Kahan; page: 3 of 30)setjob
%%EndPageSetup
gS 0 0 584 768 rC
1 G
-14 -19 612 792 rF
0 G
194 0 :M
FrameMacDict begin
0 0 0 1 0 0 0 FmK
0 FmP
0 FmSP
7 FmP
58 17 468 10 FmqF
end
194 0 :M
f0_10 sf
( )S
196 0 :M
FrameMacDict begin
0 0 0 1 0 0 0 FmK
0 FmP
58 23.82 M (Work in Progress:                          Lecture Notes on the Status of  IEEE 754                            )S
(August 17, 1995)S
7 FmP
58 729.678 468 10 FmqF
0 FmP
499.064 736.498 M (Page )S
(3)S
7 FmP
58 53 468 648 FmqF
0 FmP
58 59.667 M (Since the  Extended  format is optional in implementations of  IEEE 754,  most chips do not offer it;  it is available )S
58 71.667 M (only on  Intel\'s  x86/x87,  Pentium,  P6  and their clones by  AMD  and  Cyrix,  on  Intel\325s 80960 KB,  on  )S
58 83.667 M (Motorola\'s 68040/60  or earlier  680x0  with   68881/2  coprocessor,  and on  Motorola\'s  88110,  all with  64  sig. )S
58 95.667 M (bits and  15  bits of exponent,  but in words that may be  80  or  96  or  128  bits wide when stored in memory.  This )S
58 107.667 M (format is intended mainly to help programmers enhance the integrity of their  Single  and  Double  software,  and to )S
58 119.667 M (attenuate degradation by roundoff in  Double  matrix computations of larger dimensions,  and can easily be used in )S
58 131.667 M (such a way that substituting  Quadruple  for  Extended  need never invalidate its use.  However,  language support )S
58 143.667 M (for  Extended  is hard to find.)S
58 167.667 M (Most microprocessors that support floating-point on-chip,  and all that serve in prestigious workstations,  support )S
58 179.667 M (just the two  REAL*4  and  REAL*8  floating-point formats.  In some cases the registers are all  8  bytes wide,  and  )S
58 191.666 M (REAL*4  operands are converted on the fly to their  REAL*8  equivalents when they are loaded into a register;  in )S
58 203.666 M (such cases,  immediately rounding to  REAL*4  every  REAL*8  result of an operation upon such converted )S
58 215.666 M (operands produces the same result as if the operation had been performed in the  REAL*4  format all the way.)S
58 239.666 M (But  Motorola 680x0-based Macintoshes  and  Intel ix86-based PCs  with  ix87-based  \( )S
(not  Weitek\'s 1167 or )S
58 251.666 M (3167 )S
(\)  floating-point behave quite differently;  they perform all arithmetic operations in the  Extended  format,  )S
58 263.666 M (regardless of the operands\' widths in memory,  and round to whatever precision is called for by the setting of a )S
58 275.666 M (control word.)S
58 299.666 M (Only the  Extended  format appears in a  680x0\'s  eight floating-point flat registers or an  ix87\'s  eight floating-point )S
58 311.666 M (stack-registers,  so all numbers loaded from memory in any other format,  floating-point or integer or  BCD,  are )S
58 323.666 M (converted on the fly into  Extended  with no change in value.  All arithmetic operations enjoy the  Extended  range )S
58 335.666 M (and precision.  Values stored from a register into a narrower memory format get rounded on the fly,  and may also )S
58 347.666 M (incur  OVER/UNDERFLOW.  \( Since the register\'s value remains unchanged,  unless popped off the  ix87\325s stack,   )S
58 359.666 M (misconstrued ambiguities in manuals or ill-considered  \322 )S
(optimizations )S
(\323  cause some compilers sometimes wrongly )S
58 371.666 M (to reuse that register\'s value in place of what was stored from it;  this subtle bug will be re-examined later under  )S
58 383.666 M (\" )S
(Precisions of Rounding )S
(\"  below.\))S
58 407.666 M (IEEE 754  encodes floating-point numbers in memory  \(not in registers\)  in ways first proposed by  I.B. Goldberg )S
58 419.666 M (in  )S
end
197 0 :M
f2_10 sf
( )S
199 0 :M
FrameMacDict begin
0 0 0 1 0 0 0 FmK
0 FmP
70.778 419.666 M (Comm. ACM)S
end
199 0 :M
f0_10 sf
( )S
201 0 :M
FrameMacDict begin
0 0 0 1 0 0 0 FmK
0 FmP
122.993 419.666 M ( \(1967\) 105-6 ;  it packs three fields with integers derived from the sign,  exponent and significand )S
58 431.666 M (of a number as follows.  The leading bit is the sign bit,  0  for  +  and  1  for  - .  The next  K+1  bits hold a biased )S
58 443.666 M (exponent.  The last  N  or  N-1  bits hold the significand\'s magnitude.  To simplify the following table,  a leftmost )S
58 455.666 M (sign bit is disassociated from the significand  n  so that it may be treated as nonnegative.)S
end
202 0 :M
f0_12 sf
( )S
205 0 :M
FrameMacDict begin
0 0 0 1 0 0 0 FmK
0 FmP
172.85 484.839 M (   Encodings  of    2)S
end
205 0 :M
f0_11 sf
( )S
207 0 :M
FrameMacDict begin
0 0 0 1 0 0 0 FmK
0 FmP
FmG 266.501 480.039 M 0.96 0.96 scale (k+1-N)S FmR
end
207 0 :M
f0_12 sf
( )S
210 0 :M
FrameMacDict begin
0 0 0 1 0 0 0 FmK
0 FmP
294.158 484.839 M ( n    into  Binary Fields :)S
end
210 0 :M
f0_10 sf
( )S
212 0 :M
FrameMacDict begin
0 0 0 1 0 0 0 FmK
0 FmP
58 657.386 M (Note that  +0  and    -0  are distinguishable and follow obvious rules specified by  IEEE 754  even though floating-)S
58 669.386 M (point arithmetical comparison says they are equal;  there are good reasons to do this,  some of them discussed in )S
58 681.386 M (my  1987   paper  \322 )S
(Branch Cuts ... .\323  The two zeros are distinguishable arithmetically only by either  division-by-)S
58 693.386 M (zero  \( producing appropriately signed infinities \)  or else by the  CopySign  function recommended by  IEEE 754 / )S
end
213 0 :M
f1_9 sf
( )S
215 0 :M
FrameMacDict begin
0 0 0 1 0 0 0 FmK
0 FmP
127.5 512.839 M ( Number Type )S
end
215 0 :M
f0_9 sf
( )S
217 0 :M
FrameMacDict begin
0 0 0 1 0 0 0 FmK
0 FmP
198.5 512.839 M (  K+1 bit  )S
end
217 0 :M
f1_9 sf
( )S
219 0 :M
FrameMacDict begin
0 0 0 1 0 0 0 FmK
0 FmP
235.324 512.839 M (Exponent)S
end
220 0 :M
f0_9 sf
( )S
222 0 :M
FrameMacDict begin
0 0 0 1 0 0 0 FmK
0 FmP
272.326 512.839 M ( )S
12.924 N (Nth bit )S
34.63 N ( N-1  bits of   )S
end
222 0 :M
f1_9 sf
( )S
224 0 :M
FrameMacDict begin
0 0 0 1 0 0 0 FmK
0 FmP
399.867 512.839 M (Significand)S
end
224 0 :M
f0_9 sf
( )S
226 0 :M
FrameMacDict begin
0 0 0 1 0 0 0 FmK
0 FmP
163.51 531.839 M (NaNs:)S
12 N (  binary  111...111)S
39.51 N (1)S
53.13 N (  binary  1xxx...xxx )S
158.507 550.839 M (SNaNs:)S
12 N (  binary  111...111)S
39.51 N (1)S
28.25 N (  nonzero binary  0xxx...xxx )S
151.513 569.839 M (Infinities:)S
12 N (  binary  111...111)S
39.51 N (1)S
86 N (0)S
153.011 588.839 M (Normals:)S
218.855 591.719 M (  k-1 + 2)S
end
226 0 :M
f0_8 sf
( )S
228 0 :M
FrameMacDict begin
0 0 0 1 0 0 0 FmK
0 FmP
FmG 249.426 588.119 M 0.99 0.99 scale (K)S FmR
end
228 0 :M
f0_9 sf
( )S
230 0 :M
FrameMacDict begin
0 0 0 1 0 0 0 FmK
0 FmP
255.145 591.719 M ( )S
303.75 588.839 M (1)S
28.25 N (  nonnegative    n - 2)S
end
231 0 :M
f0_8 sf
( )S
233 0 :M
FrameMacDict begin
0 0 0 1 0 0 0 FmK
0 FmP
FmG 410.48 585.239 M 0.99 0.99 scale (N-1)S FmR
end
233 0 :M
f0_9 sf
( )S
235 0 :M
FrameMacDict begin
0 0 0 1 0 0 0 FmK
0 FmP
422.797 588.839 M (   <  2)S
end
235 0 :M
f0_8 sf
( )S
237 0 :M
FrameMacDict begin
0 0 0 1 0 0 0 FmK
0 FmP
FmG 443.622 585.239 M 0.99 0.99 scale (N-1)S FmR
end
237 0 :M
f0_9 sf
( )S
239 0 :M
FrameMacDict begin
0 0 0 1 0 0 0 FmK
0 FmP
141.006 610.719 M (Subnormals:)S
47.125 N ( 0)S
63.375 N (0)S
28.25 N (  positive  n  <  2)S
end
239 0 :M
f0_8 sf
( )S
241 0 :M
FrameMacDict begin
0 0 0 1 0 0 0 FmK
0 FmP
FmG 397.072 607.119 M 0.99 0.99 scale (N-1)S FmR
end
241 0 :M
f0_9 sf
( )S
243 0 :M
FrameMacDict begin
0 0 0 1 0 0 0 FmK
0 FmP
409.389 610.719 M ( )S
163.512 629.719 M (Zeros:)S
47.125 N ( 0)S
63.375 N (0)S
86 N (0)S
121.5 501.089 FmB
0 135.38 FmL
0 0.5 FmSo
192.5 500.589 FmB
0 136.38 FmL
0 0.5 FmSo
281.5 500.589 FmB
0 136.38 FmL
0 0.5 FmSo
330.5 500.589 FmB
0 136.38 FmL
0 0.5 FmSo
462.5 501.089 FmB
0 135.38 FmL
0 0.5 FmSo
121.25 500.839 FmB
341.5 0 FmL
0 0.5 FmSo
121.75 518.589 FmB
340.5 0 FmL
0 0.5 FmSo
121.75 521.089 FmB
340.5 0 FmL
0 0.5 FmSo
121.25 538.839 FmB
341.5 0 FmL
0 0.5 FmSo
121.25 557.839 FmB
341.5 0 FmL
0 0.5 FmSo
121.25 576.839 FmB
341.5 0 FmL
0 0.5 FmSo
121.25 598.719 FmB
341.5 0 FmL
0 0.5 FmSo
121.25 617.719 FmB
341.5 0 FmL
0 0.5 FmSo
121.25 636.719 FmB
341.5 0 FmL
0 0.5 FmSo
[/CropBox[-14 773 FmDC 598 -19 FmDC]/PAGE FmPD
end
endp
%%Page: 4 4
%%BeginPageSetup
initializepage
(W. Kahan; page: 4 of 30)setjob
%%EndPageSetup
gS 0 0 584 768 rC
1 G
-14 -19 612 792 rF
0 G
243 0 :M
FrameMacDict begin
0 0 0 1 0 0 0 FmK
0 FmP
0 FmSP
7 FmP
58 17 468 10 FmqF
end
243 0 :M
f0_10 sf
( )S
245 0 :M
FrameMacDict begin
0 0 0 1 0 0 0 FmK
0 FmP
58 23.82 M (Work in Progress:                          Lecture Notes on the Status of  IEEE 754                            )S
(August 17, 1995)S
7 FmP
58 729.678 468 10 FmqF
0 FmP
499.064 736.498 M (Page )S
(4)S
7 FmP
58 53 468 648 FmqF
0 FmP
58 59.667 M (854.  Infinities,  SNaNs,  NaNs  and   Subnormal  numbers necessitate four more special cases.)S
58 71.667 M (IEEE   Single   and   Double   have no  Nth  bit in their  significant digit  fields;   it is   \322 )S
(implicit.\323   680x0 / ix87  )S
58 83.667 M (Extendeds  have an explicit  Nth  bit for historical reasons;  it allowed the  8087  to suppress the normalization of )S
58 95.667 M (subnormals advantageously for certain scalar products in matrix computations,  but this and other features of the  )S
58 107.667 M (8087  were later deemed too arcane to include in  IEEE 754,  and have atrophied.)S
58 131.667 M (Non-Extended  encodings are all  \322 )S
(Lexicographically Ordered,\323  which means that if two floating-point numbers in )S
58 143.667 M (the same format are ordered  \( )S
(say  x )S
(< )S
(y )S
(\),  then they are ordered the same way when their bits are reinterpreted as  )S
58 155.667 M (Sign-Magnitude  integers.  Consequently,  processors need no floating-point hardware to search,  sort and window )S
58 167.667 M (floating-point arrays quickly.  \( However,  some processors reverse byte-order!\)  Lexicographic order may also ease )S
58 179.667 M (the implementation of a surprisingly useful function   NextAfter\(x, y\)   which delivers the neighbor of  x  in its )S
58 191.666 M (floating-point format on the side towards  y .)S
58 227.666 M (Finally,  as an amenity,  the following table exhibits the span of each floating-point format,  and its precision in  )S
58 239.666 M (\322 )S
(significant decimals.\323)S
58 373.666 M (The entries in the table come from the following formulas:)S
130 402.866 M (Min. Positive Subnormal:)S
112.951 N (2)S
end
246 0 :M
f0_9 sf
( )S
248 0 :M
FrameMacDict begin
0 0 0 1 0 0 0 FmK
0 FmP
FmG 351 398.866 M 0.978 0.978 scale (3 - 2)S FmR
FmG 367.092 396.866 M 0.978 0.978 scale (K)S FmR
FmG 373.431 398.866 M 0.978 0.978 scale ( - N)S FmR
end
248 0 :M
f0_10 sf
( )S
250 0 :M
FrameMacDict begin
0 0 0 1 0 0 0 FmK
0 FmP
130 420.066 M (Min. Positive Normal:)S
126.291 N (2)S
end
250 0 :M
f0_9 sf
( )S
252 0 :M
FrameMacDict begin
0 0 0 1 0 0 0 FmK
0 FmP
FmG 351 416.066 M 0.978 0.978 scale (2 - 2)S FmR
FmG 367.092 414.066 M 0.978 0.978 scale (K)S FmR
end
253 0 :M
f0_10 sf
( )S
255 0 :M
FrameMacDict begin
0 0 0 1 0 0 0 FmK
0 FmP
130 437.266 M (Max. Finite:)S
166.562 N (\(1 - 1/2)S
end
255 0 :M
f0_9 sf
( )S
257 0 :M
FrameMacDict begin
0 0 0 1 0 0 0 FmK
0 FmP
FmG 375.434 433.266 M 0.978 0.978 scale (N)S FmR
end
257 0 :M
f0_10 sf
( )S
259 0 :M
FrameMacDict begin
0 0 0 1 0 0 0 FmK
0 FmP
381.772 437.266 M (\)   2)S
end
260 0 :M
f0_9 sf
( )S
262 0 :M
FrameMacDict begin
0 0 0 1 0 0 0 FmK
0 FmP
FmG 397.6 433.266 M 0.978 0.978 scale (2)S FmR
FmG 401.99 431.266 M 0.978 0.978 scale (K)S FmR
FmG 408.329 433.266 M 0.978 0.978 scale ( )S FmR
end
262 0 :M
f0_10 sf
( )S
264 0 :M
FrameMacDict begin
0 0 0 1 0 0 0 FmK
0 FmP
130 461.266 M (Sig. Dec.,)S
32.566 N (at least:)S
113.182 N (floor\( \(N-1\) Log)S
end
265 0 :M
f0_9 sf
( )S
267 0 :M
FrameMacDict begin
0 0 0 1 0 0 0 FmK
0 FmP
FmG 412.072 463.766 M 0.978 0.978 scale (10)S FmR
end
267 0 :M
f0_10 sf
( )S
269 0 :M
FrameMacDict begin
0 0 0 1 0 0 0 FmK
0 FmP
420.852 461.266 M (\(2\) \)  sig. dec.)S
202 475.366 M (at most:)S
112.059 N (ceil\( 1 + N Log)S
end
269 0 :M
f0_9 sf
( )S
271 0 :M
FrameMacDict begin
0 0 0 1 0 0 0 FmK
0 FmP
FmG 407.729 477.866 M 0.978 0.978 scale (10)S FmR
end
272 0 :M
f0_10 sf
( )S
274 0 :M
FrameMacDict begin
0 0 0 1 0 0 0 FmK
0 FmP
416.509 475.366 M (\(2\) \)   sig. dec.)S
58 501.466 M (The precision is bracketed within a range in order to characterize how accurately conversion between binary and )S
58 513.466 M (decimal has to be implemented to conform to  IEEE 754.  For instance,  \322 6 - 9 \323  Sig. Dec.  for Single  means that,  )S
58 525.466 M (in the absence of  OVER/UNDERFLOW,  ...)S
130 549.466 M (If a decimal string with at most  6 sig. dec.  is converted to  Single  and then )S
130 561.466 M (converted back to the same number of  sig. dec.,  then the final string should )S
130 573.466 M (match the original.  Also, ...)S
130 597.466 M (If a  Single Precision  floating-point number is converted to a decimal string )S
130 609.466 M (with at least  9 sig. dec.  and then converted back to  Single,  then the final )S
130 621.466 M (number must match the original.)S
end
274 0 :M
f0_12 sf
( )S
277 0 :M
FrameMacDict begin
0 0 0 1 0 0 0 FmK
0 FmP
146.529 269 M (Span  and  Precision  of  IEEE 754  Floating-Point Formats :)S
end
277 0 :M
f0_10 sf
( )S
279 0 :M
FrameMacDict begin
0 0 0 1 0 0 0 FmK
0 FmP
117.5 286.666 M ( Format)S
29.344 N (Min. Subnormal)S
16.621 N (Min. Normal)S
22.565 N (Max. Finite)S
30.203 N (Sig. Dec.)S
143.167 300.666 M (Single:)S
22.282 N (1.4 E-45)S
41.064 N (1.2 E-38)S
39.228 N (3.4 E38)S
47.282 N (6 - 9)S
139.286 314.666 M (Double:)S
19.782 N (4.9 E-324)S
36.064 N (2.2 E-308)S
34.228 N (1.8 E308)S
39.782 N (15 - 17)S
130.958 328.666 M (Extended:)S
17.282 N (3.6 E-4951)S
31.064 N (3.4 E-4932)S
29.228 N (1.2 E4932)S
37.282 N (18 - 21)S
118.192 342.666 M ( \( Quadruple:)S
17.282 N (6.5 E-4966)S
31.064 N (3.4 E-4932)S
29.228 N (1.2 E4932)S
29.368 N (   33 - 36  \))S
117.5 277.25 FmB
0 69.5 FmL
0 0.5 FmSo
171.5 276.75 FmB
0 70.5 FmL
0 0.5 FmSo
250.5 276.75 FmB
0 70.5 FmL
0 0.5 FmSo
322.5 276.75 FmB
0 70.5 FmL
0 0.5 FmSo
394.5 276.75 FmB
0 70.5 FmL
0 0.5 FmSo
466.5 277.25 FmB
0 69.5 FmL
0 0.5 FmSo
117.25 277 FmB
349.5 0 FmL
0 0.5 FmSo
117.75 289.75 FmB
348.5 0 FmL
0 0.5 FmSo
117.75 292.25 FmB
348.5 0 FmL
0 0.5 FmSo
117.25 305 FmB
349.5 0 FmL
0 0.5 FmSo
117.25 319 FmB
349.5 0 FmL
0 0.5 FmSo
117.25 333 FmB
349.5 0 FmL
0 0.5 FmSo
117.25 347 FmB
349.5 0 FmL
0 0.5 FmSo
[/CropBox[-14 773 FmDC 598 -19 FmDC]/PAGE FmPD
end
endp
%%Page: 5 5
%%BeginPageSetup
initializepage
(W. Kahan; page: 5 of 30)setjob
%%EndPageSetup
gS 0 0 584 768 rC
1 G
-14 -19 612 792 rF
0 G
280 0 :M
FrameMacDict begin
0 0 0 1 0 0 0 FmK
0 FmP
0 FmSP
7 FmP
58 17 468 10 FmqF
end
280 0 :M
f0_10 sf
( )S
282 0 :M
FrameMacDict begin
0 0 0 1 0 0 0 FmK
0 FmP
58 23.82 M (Work in Progress:                          Lecture Notes on the Status of  IEEE 754                            )S
(August 17, 1995)S
7 FmP
58 729.678 468 10 FmqF
0 FmP
499.064 736.498 M (Page )S
(5)S
7 FmP
58 53 468 648 FmqF
end
283 0 :M
f1_12 sf
( )S
286 0 :M
FrameMacDict begin
0 0 0 1 0 0 0 FmK
0 FmP
58 61 M (Multiply-Accumulate)S
end
286 0 :M
f0_12 sf
( )S
289 0 :M
FrameMacDict begin
0 0 0 1 0 0 0 FmK
0 FmP
167.96 61 M (,   a  Mixed Blessing:)S
end
289 0 :M
f0_10 sf
( )S
291 0 :M
FrameMacDict begin
0 0 0 1 0 0 0 FmK
0 FmP
58 73.667 M (The  IBM Power PC  and  Apple Power Macintosh,  both derived from the  IBM  RS/6000  architecture,  purport to )S
58 85.667 M (conform to  IEEE 754  but too often use a  \322 )S
(Fused )S
(\323  Multiply-Add  instruction in a non-conforming way.  The idea )S
58 97.667 M (behind a  Multiply-Add  \( or  \322 )S
(MAC )S
(\323  for  \322 )S
(Multiply-Accumulate )S
(\323 \)  instruction is that an expression like  )S
end
291 0 :M
f4_10 sf
( )S
293 0 :M
FrameMacDict begin
0 0 0 1 0 0 0 FmK
0 FmP
58 109.667 M (\261)S
end
294 0 :M
f0_10 sf
( )S
296 0 :M
FrameMacDict begin
0 0 0 1 0 0 0 FmK
0 FmP
63.488 109.667 M (a*b )S
end
296 0 :M
f4_10 sf
( )S
298 0 :M
FrameMacDict begin
0 0 0 1 0 0 0 FmK
0 FmP
80.427 109.667 M (\261)S
end
299 0 :M
f0_10 sf
( )S
301 0 :M
FrameMacDict begin
0 0 0 1 0 0 0 FmK
0 FmP
85.915 109.667 M ( )S
(c  be evaluated in one instruction so implemented that scalar products like)S
218.31 121.667 M ( a)S
end
301 0 :M
f0_9 sf
( )S
303 0 :M
FrameMacDict begin
0 0 0 1 0 0 0 FmK
0 FmP
FmG 225.248 124.167 M 0.978 0.978 scale (1)S FmR
end
303 0 :M
f0_10 sf
( )S
305 0 :M
FrameMacDict begin
0 0 0 1 0 0 0 FmK
0 FmP
229.639 121.667 M (*b)S
end
306 0 :M
f0_9 sf
( )S
308 0 :M
FrameMacDict begin
0 0 0 1 0 0 0 FmK
0 FmP
FmG 239.639 124.167 M 0.978 0.978 scale (1)S FmR
end
308 0 :M
f0_10 sf
( )S
310 0 :M
FrameMacDict begin
0 0 0 1 0 0 0 FmK
0 FmP
244.029 121.667 M ( + a)S
end
311 0 :M
f0_9 sf
( )S
313 0 :M
FrameMacDict begin
0 0 0 1 0 0 0 FmK
0 FmP
FmG 259.107 124.167 M 0.978 0.978 scale (2)S FmR
end
313 0 :M
f0_10 sf
( )S
315 0 :M
FrameMacDict begin
0 0 0 1 0 0 0 FmK
0 FmP
263.497 121.667 M (*b)S
end
315 0 :M
f0_9 sf
( )S
317 0 :M
FrameMacDict begin
0 0 0 1 0 0 0 FmK
0 FmP
FmG 273.497 124.167 M 0.978 0.978 scale (2)S FmR
end
318 0 :M
f0_10 sf
( )S
320 0 :M
FrameMacDict begin
0 0 0 1 0 0 0 FmK
0 FmP
277.887 121.667 M ( + a)S
end
320 0 :M
f0_9 sf
( )S
322 0 :M
FrameMacDict begin
0 0 0 1 0 0 0 FmK
0 FmP
FmG 292.965 124.167 M 0.978 0.978 scale (3)S FmR
end
322 0 :M
f0_10 sf
( )S
324 0 :M
FrameMacDict begin
0 0 0 1 0 0 0 FmK
0 FmP
297.355 121.667 M (*b)S
end
325 0 :M
f0_9 sf
( )S
327 0 :M
FrameMacDict begin
0 0 0 1 0 0 0 FmK
0 FmP
FmG 307.355 124.167 M 0.978 0.978 scale (3)S FmR
end
327 0 :M
f0_10 sf
( )S
329 0 :M
FrameMacDict begin
0 0 0 1 0 0 0 FmK
0 FmP
311.746 121.667 M ( + ... + a)S
end
330 0 :M
f0_9 sf
( )S
332 0 :M
FrameMacDict begin
0 0 0 1 0 0 0 FmK
0 FmP
FmG 344.963 124.167 M 0.978 0.978 scale (L)S FmR
end
332 0 :M
f0_10 sf
( )S
334 0 :M
FrameMacDict begin
0 0 0 1 0 0 0 FmK
0 FmP
350.327 121.667 M (*b)S
end
334 0 :M
f0_9 sf
( )S
336 0 :M
FrameMacDict begin
0 0 0 1 0 0 0 FmK
0 FmP
FmG 360.327 124.167 M 0.978 0.978 scale (L)S FmR
end
337 0 :M
f0_10 sf
( )S
339 0 :M
FrameMacDict begin
0 0 0 1 0 0 0 FmK
0 FmP
58 135.767 M (can be evaluated in about  L+3  machine cycles.  Many machines have a  MAC.  A  )S
end
339 0 :M
f2_10 sf
( )S
341 0 :M
FrameMacDict begin
0 0 0 1 0 0 0 FmK
0 FmP
394.626 135.767 M (Fused)S
end
342 0 :M
f0_10 sf
( )S
344 0 :M
FrameMacDict begin
0 0 0 1 0 0 0 FmK
0 FmP
419.062 135.767 M (   MAC  goes further and )S
58 147.767 M (evaluates  )S
end
344 0 :M
f4_10 sf
( )S
346 0 :M
FrameMacDict begin
0 0 0 1 0 0 0 FmK
0 FmP
100.2 147.767 M (\261)S
end
347 0 :M
f0_10 sf
( )S
349 0 :M
FrameMacDict begin
0 0 0 1 0 0 0 FmK
0 FmP
105.688 147.767 M (a*b )S
end
349 0 :M
f4_10 sf
( )S
351 0 :M
FrameMacDict begin
0 0 0 1 0 0 0 FmK
0 FmP
122.626 147.767 M (\261)S
end
352 0 :M
f0_10 sf
( )S
354 0 :M
FrameMacDict begin
0 0 0 1 0 0 0 FmK
0 FmP
128.115 147.767 M ( c  with just one rounding error at the end.  This is done not so much to roughly halve the rounding )S
58 159.767 M (errors in a scalar product as to facilitate fast and correctly rounded division without much hardware dedicated to it.)S
58 183.766 M (To compute  q = x/y  correctly rounded,  it suffices to have hardware approximate the reciprocal  1/y  to several sig. )S
58 195.766 M (bits by a value  t  looked up in a table,  and then improve  t  by iteration thus:)S
241.923 207.766 M ( t   :=   t  +  \(1  -  t*y\)*t  .)S
58 219.766 M (Each such iteration doubles the number of correct bits in  t  at the cost of two  MACs  until  t  is accurate enough to )S
58 231.766 M (produce  q := t*x .  To round  q  correctly,  its remainder  r := x - q*y  must be obtained exactly;  this is what the  )S
58 243.766 M (\322 )S
(Fused )S
(\323  in the  Fused MAC  is for.  It also speeds up correctly rounded square root,   decimal <-> binary   )S
58 255.766 M (conversion,  and some transcendental functions.  These and other uses make a  Fused MAC  worth putting into a )S
58 267.766 M (computer\'s instruction set.  \( If only division and square root were at stake we might do better merely to widen the )S
58 279.766 M (multiplier hardware slightly in a way accessible solely to microcode,  as  TI  does in its  SPARC  chips.\))S
58 303.766 M (A  Fused MAC  also speeds up a grubby  \322Doubled-Double\323  approximation to  Quadruple-Precision  arithmetic by )S
58 315.766 M (unevaluated sums of pairs of  Doubles.  Its advantage comes about from a  Fused MAC\'s  ability to evaluate any )S
58 327.766 M (product  a*b  exactly;  first let  p :=  a*b  rounded off;  then compute  c := a*b - p  exactly in another Fused MAC,  )S
58 339.766 M (so that  a*b = p + c  exactly without roundoff.  Fast but grubby  Double-Double  undermines the incentive to )S
58 351.766 M (provide  Quadruple-Precision  correctly rounded in  IEEE 754\'s  style.)S
58 375.766 M (Fused MACs  generate anomalies when used to evaluate  a*b )S
end
354 0 :M
f4_10 sf
( )S
356 0 :M
FrameMacDict begin
0 0 0 1 0 0 0 FmK
0 FmP
305.966 375.766 M (\261)S
end
357 0 :M
f0_10 sf
( )S
359 0 :M
FrameMacDict begin
0 0 0 1 0 0 0 FmK
0 FmP
311.455 375.766 M ( c*d  in two instructions instead of three.  Which of  )S
58 387.766 M (a*b  and  c*d  is evaluated and therefore rounded first?  Either way,  important expectations can be thwarted.  For )S
58 399.766 M (example,  multiplying a complex number by its  complex conjugate  should produce a real number,  but it might not )S
58 414.966 M (with a  Fused MAC.  If   )S
end
359 0 :M
f4_10 sf
( )S
361 0 :M
FrameMacDict begin
0 0 0 1 0 0 0 FmK
0 FmP
158.535 414.966 M (\326)S
end
362 0 :M
f0_10 sf
( )S
364 0 :M
FrameMacDict begin
0 0 0 1 0 0 0 FmK
0 FmP
164.023 414.966 M (\( )S
(q)S
end
364 0 :M
f0_9 sf
( )S
366 0 :M
FrameMacDict begin
0 0 0 1 0 0 0 FmK
0 FmP
FmG 174.851 410.966 M 0.978 0.978 scale (2)S FmR
end
366 0 :M
f0_10 sf
( )S
368 0 :M
FrameMacDict begin
0 0 0 1 0 0 0 FmK
0 FmP
179.241 414.966 M ( )S
(- )S
(p*r )S
(\)   is real in the absence of roundoff,  then the same is expected for)S
255.066 426.966 M (SQRT\( )S
(q*q )S
(- )S
(p*r )S
(\))S
58 438.966 M (despite roundoff,  but perhaps not with a  Fused MAC.  Therefore,  Fused MACs  should not be used )S
58 450.966 M (indiscriminately.)S
58 474.966 M (By design,  a  Fused MAC  always runs faster than separate multiplication and add,  so compiler writers with one )S
58 486.966 M (eye on benchmarks based solely upon speed leave programmers no opportunity to inhibit  Fused MACs  selectively )S
58 498.966 M (within expressions.)S
58 522.966 M (Ideally,  some locution like redundant parentheses should be understood to control the use of  Fused MACs  on )S
58 534.966 M (machines that have them.  For instance,  in  Fortran,  ...)S
130 546.966 M (\(A*B\) +  C*D   and   C*D + \(A*B\)   should always round  A*B  first;)S
130 558.966 M (\(A*B\) + \(C*D\)     should inhibit the use of a  Fused MAC  here.)S
58 570.966 M (Something else is needed for  C ,  whose  Macro Preprocessor  often insinuates hordes of redundant parentheses.  )S
58 582.966 M (Whatever expedient is chosen must have no effect upon compilations to machines that lack a  Fused MAC;  a )S
58 594.966 M (separate compiler directive at the beginning of a program must say whether the program is intended solely for )S
58 606.966 M (machines with,  or solely for machines without a  Fused MAC.)S
[/CropBox[-14 773 FmDC 598 -19 FmDC]/PAGE FmPD
end
endp
%%Page: 6 6
%%BeginPageSetup
initializepage
(W. Kahan; page: 6 of 30)setjob
%%EndPageSetup
gS 0 0 584 768 rC
1 G
-14 -19 612 792 rF
0 G
369 0 :M
FrameMacDict begin
0 0 0 1 0 0 0 FmK
0 FmP
0 FmSP
7 FmP
58 17 468 10 FmqF
end
369 0 :M
f0_10 sf
( )S
371 0 :M
FrameMacDict begin
0 0 0 1 0 0 0 FmK
0 FmP
58 23.82 M (Work in Progress:                          Lecture Notes on the Status of  IEEE 754                            )S
(August 17, 1995)S
7 FmP
58 729.678 468 10 FmqF
0 FmP
499.064 736.498 M (Page )S
(6)S
7 FmP
58 53 468 648 FmqF
end
372 0 :M
f1_12 sf
( )S
375 0 :M
FrameMacDict begin
0 0 0 1 0 0 0 FmK
0 FmP
58 61 M (Exceptions)S
end
375 0 :M
f0_12 sf
( )S
378 0 :M
FrameMacDict begin
0 0 0 1 0 0 0 FmK
0 FmP
113.992 61 M ( in General.)S
end
378 0 :M
f0_10 sf
( )S
380 0 :M
FrameMacDict begin
0 0 0 1 0 0 0 FmK
0 FmP
58 73.667 M (Designers of operating systems tend to incorporate all trap-handling into their handiwork,  thereby burdening )S
58 85.667 M (floating-point exception-handling with unnecessary and intolerable overheads.  Better designs should incorporate )S
58 97.667 M (all floating-point trap-handling into a run-time  math. library,  along with logarithms and cosines,  which the )S
58 109.667 M (operating system merely loads.  To this end,  the operating system has only to provide default handlers  \( in case the )S
58 121.667 M (loaded library neglects trap-handling \)  and secure trap re-vectoring functions for libraries that take up that duty and )S
58 133.667 M (later,  at the end of a task,  relinquish it.)S
58 157.667 M (To  Disable  an exception\'s trap is to let the numeric \(co\)processor respond to every instance of that exception by )S
58 169.667 M (raising its  Flag  and delivering the result specified as its  \322 )S
(Default )S
(\323  in  IEEE 754.  For example,  the default result )S
58 181.667 M (for  3.0/0.0  is  Infinity  with the same sign as that  0.0 .  The raised flag stays raised until later set down by the )S
58 193.667 M (program,  perhaps after it has been sensed.  IEEE 754  allows for the possibility that raised flags be non-null )S
58 205.666 M (pointers,  but  most microprocessors keep one or two bits per flag in a  Status  register  whose sensing and clearing )S
58 217.666 M (fall outside the scope of these notes.  The same goes for bits in a  Control  register that  Enable/Disable  traps;  see )S
58 229.666 M (manuals for your chip and for the programming environment  \( e.g. compiler \)  that concerns you.)S
end
380 0 :M
f3_10 sf
( )S
386 0 :M
FrameMacDict begin
0 0 0 1 0 0 0 FmK
0 FmP
58 253.666 M 0 0 426(  +-------------------------------------------------------------------+)FmTx
58 265.666 M 0 0 426(  |  CAUTION:  Do not change  \( enable or disable \)  exception traps  |)FmTx
58 277.666 M 0 0 426(  |       in a way contrary to what is expected by your programming   |)FmTx
58 289.666 M 0 0 426(  |       environment or application program,  lest unpredictable     |)FmTx
58 301.666 M 0 0 426(  |       consequences ensue for lack of a handler or its action.     |)FmTx
58 313.666 M 0 0 426(  +-------------------------------------------------------------------+)FmTx
end
386 0 :M
f0_10 sf
( )S
388 0 :M
FrameMacDict begin
0 0 0 1 0 0 0 FmK
0 FmP
58 349.666 M (Disputes over exceptions are unavoidable.  In fact,  one definition for  \322 )S
(Exception )S
(\323  is ...)S
159.823 373.666 M (\322 Event for which any policy chosen in advance will subsequently)S
183.162 385.666 M (give some reasonable person cause to take exception.\323)S
58 409.666 M (A common mistake is to treat exceptions as errors and punish the presumed perpetrators;  usually punishment falls )S
58 421.666 M (not upon deserving perpetrators but upon whatever interested parties happen to be in attendance later when )S
58 433.666 M (exceptions arise from what was perpetrated,  error or not.)S
end
389 0 :M
f3_10 sf
( )S
395 0 :M
FrameMacDict begin
0 0 0 1 0 0 0 FmK
0 FmP
58 457.666 M 0 0 426(  +-------------------------------------------------------------------+)FmTx
58 469.666 M 0 0 426(  |    Exceptions that reveal errors are merely messengers.  What     |)FmTx
58 481.666 M 0 0 426(  |    turns an exception into an error is bad exception-handling.    |)FmTx
58 493.666 M 0 0 426(  +-------------------------------------------------------------------+)FmTx
end
395 0 :M
f0_10 sf
( )S
397 0 :M
FrameMacDict begin
0 0 0 1 0 0 0 FmK
0 FmP
58 517.666 M (Attempts to cope decently with all exceptions inevitably run into unresolved dilemmas sooner or later unless the )S
58 529.666 M (computing environment provides what I call  \322 )S
(Retrospective Diagnostics.\323.  These exist in a rudimentary form in  )S
58 541.666 M (Sun Microsystems\'  operating system on  SPARCs.  The idea is to log  \( in the sense of a ship\'s log \)  every )S
58 553.666 M (suspicious event that is noticed during a computation.  These events are logged not by time of occurrence  \( which )S
58 565.666 M (could fill a disk very soon \)  but by site in a program.  A hashing scheme ensures that events repeated at the same )S
58 577.666 M (site will perhaps update but certainly not add entries to the log.  Neither need an exception that occurs while its flag )S
58 589.666 M (is still raised by a previous exception of the same kind add a new entry to the log.  After a program finishes  \( if it )S
58 601.666 M (ever does \),  its user may be notified discreetly if a dangerous flag like  INVALID  is still raised;  then that flag can )S
58 613.666 M (serve as a pointer to its entry in the log.  The log cannot grow intolerably long,  so unusual entries stand out and )S
58 625.666 M (point to whatever software module put them there.  The user of that software can then ask its supplier whether an )S
58 637.666 M (entry is something to worry about.)S
[/CropBox[-14 773 FmDC 598 -19 FmDC]/PAGE FmPD
end
endp
%%Page: 7 7
%%BeginPageSetup
initializepage
(W. Kahan; page: 7 of 30)setjob
%%EndPageSetup
gS 0 0 584 768 rC
1 G
-14 -19 612 792 rF
0 G
397 0 :M
FrameMacDict begin
0 0 0 1 0 0 0 FmK
0 FmP
0 FmSP
7 FmP
58 17 468 10 FmqF
end
397 0 :M
f0_10 sf
( )S
399 0 :M
FrameMacDict begin
0 0 0 1 0 0 0 FmK
0 FmP
58 23.82 M (Work in Progress:                          Lecture Notes on the Status of  IEEE 754                            )S
(August 17, 1995)S
7 FmP
58 729.678 468 10 FmqF
0 FmP
499.064 736.498 M (Page )S
(7)S
7 FmP
58 53 468 648 FmqF
end
400 0 :M
f0_12 sf
( )S
403 0 :M
FrameMacDict begin
0 0 0 1 0 0 0 FmK
0 FmP
58 61 M (Exception:  )S
end
403 0 :M
f1_12 sf
( )S
406 0 :M
FrameMacDict begin
0 0 0 1 0 0 0 FmK
0 FmP
115.984 61 M (INVALID)S
end
406 0 :M
f0_12 sf
( )S
409 0 :M
FrameMacDict begin
0 0 0 1 0 0 0 FmK
0 FmP
167.975 61 M (  operation.)S
end
409 0 :M
f0_10 sf
( )S
411 0 :M
FrameMacDict begin
0 0 0 1 0 0 0 FmK
0 FmP
58 73.667 M (Signaled by the raising of the  INVALID  flag whenever an operation\'s operands lie outside its domain,  this )S
58 85.667 M (exception\'s default,  delivered only because any other real or infinite value would most likely cause worse )S
58 97.667 M (confusion,  is  NaN ,  which means  \322 )S
(Not a Number.\323  IEEE 754  specifies that seven invalid arithmetic operations )S
58 109.667 M (shall deliver a  NaN  unless they are trapped:)S
130 121.667 M (real )S
end
411 0 :M
f4_10 sf
( )S
413 0 :M
FrameMacDict begin
0 0 0 1 0 0 0 FmK
0 FmP
147.483 121.667 M (\326)S
end
414 0 :M
f0_10 sf
( )S
416 0 :M
FrameMacDict begin
0 0 0 1 0 0 0 FmK
0 FmP
152.971 121.667 M (\(Negative\) ,      0*Infinity ,      0.0/0.0 ,      Infinity/Infinity,)S
130 133.667 M (REMAINDER\(Anything, 0.0\) ,      REMAINDER\( Infinity, Anything \) ,)S
130 145.667 M (Infinity - Infinity  when signs agree   \( but  Infinity + Infinity = Infinity  when signs agree \).)S
58 157.667 M (Conversion from floating-point to other formats can be  INVALID  too,  if their limits are violated,  even if no  )S
58 169.667 M (NaN  can be delivered.)S
58 193.667 M (NaN  also means  \322 )S
(Not any Number )S
(\323 ;  NaN  does not represent the set of all real numbers,  which is an interval )S
58 205.666 M (for which the appropriate representation is provided by a scheme called  \322 )S
(Interval Arithmetic.\323)S
58 229.666 M (NaN  must not be confused with  \322 )S
(Undefined.\323  On the contrary,  IEEE 754  defines  NaN  perfectly well even )S
58 241.666 M (though most language standards ignore and many compilers deviate from that definition.  The deviations usually )S
58 253.666 M (afflict relational expressions,  discussed below.   Arithmetic operations upon  NaNs  other than  SNaNs  \( )S
(see )S
58 265.666 M (below )S
(\)  never signal  INVALID,  and always produce  NaN  unless replacing every  NaN  operand by any finite or )S
58 277.666 M (infinite real values would produce the same finite or infinite floating-point result independent of the replacements.)S
58 301.666 M (For example,  0*NaN  must be  NaN  because  0*Infinity  is an  INVALID  operation \( NaN \).  On the other hand,  )S
58 313.666 M (for   hypot\(x, y\)  :=  )S
end
416 0 :M
f4_10 sf
( )S
418 0 :M
FrameMacDict begin
0 0 0 1 0 0 0 FmK
0 FmP
140.007 313.666 M (\326)S
end
419 0 :M
f0_10 sf
( )S
421 0 :M
FrameMacDict begin
0 0 0 1 0 0 0 FmK
0 FmP
145.495 313.666 M (\(x*x + y*y\)   we find that  hypot\(Infinity, y\) = +Infinity  for all real  y ,  finite or not,  and )S
58 325.666 M (deduce that  hypot\(Infinity, NaN\) = +Infinity  too;  naive implementations of  hypot  may do differently.)S
58 349.666 M (NaNs  were not invented out of whole cloth.  Konrad Zuse  tried similar ideas in the late  1930s;  Seymour Cray  )S
58 361.666 M (built  \322 )S
(Indefinites )S
(\323  into the  CDC 6600  in  1963;  then  DEC  put  \322 )S
(Reserved Operands )S
(\323  into their  PDP-11  )S
58 373.666 M (and  VAX.  But nobody used them because they trap when touched.  NaNs  do not trap  \( unless they are  )S
58 385.666 M (\322 )S
(Signaling )S
(\323  SNaNs,  which exist mainly for political reasons and are rarely used \);  NaNs propagate through most )S
58 397.666 M (computations.  Consequently they do get used.)S
58 421.666 M (Perhaps  NaNs  are widely misunderstood because they are not needed for mathematical analysis,  whose )S
58 433.666 M (sequencing is entirely logical;  they are needed only for computation,  with temporal sequencing that can be hard to )S
58 445.666 M (revise,  harder to reverse.  NaNs  must conform to mathematically consistent rules that were  deduced,  not invented )S
58 457.666 M (arbitrarily,  in  1977  during the design of the  Intel 8087  that preceded  IEEE 754.  What had been missing from )S
58 469.666 M (computation but is now supplied by  NaNs  is an opportunity  \( not obligation \)  for software  \( especially when )S
58 481.666 M (searching \)  to follow an unexceptional path  \( no need for exotic control structures \)  to a point where an )S
58 493.666 M (exceptional event can be appraised after the event,  when additional evidence may have accrued.  Deferred )S
58 505.666 M (judgments are )S
end
421 0 :M
f2_10 sf
( )S
423 0 :M
FrameMacDict begin
0 0 0 1 0 0 0 FmK
0 FmP
116.867 505.666 M (usually)S
end
424 0 :M
f0_10 sf
( )S
426 0 :M
FrameMacDict begin
0 0 0 1 0 0 0 FmK
0 FmP
145.751 505.666 M (  better judgments but )S
end
426 0 :M
f2_10 sf
( )S
428 0 :M
FrameMacDict begin
0 0 0 1 0 0 0 FmK
0 FmP
235.454 505.666 M (not always)S
end
429 0 :M
f0_10 sf
( )S
431 0 :M
FrameMacDict begin
0 0 0 1 0 0 0 FmK
0 FmP
278.508 505.666 M (,  alas.)S
58 529.666 M (Whenever a  NaN  is created from  non-NaN  operands,  IEEE 754  demands that the  INVALID OPERATION  )S
58 541.666 M (flag be raised,  but does not say whether a flag is a word in memory or a bit in a hardware  Status Word.  That flag )S
58 553.666 M (stays raised until the program lowers it.  \( The  Motorola  680x0  also raises or lowers a transient flag that pertains )S
58 565.666 M (solely to the last floating-point operation executed.\)  The  \322 )S
(Sticky )S
(\323  flag mandated by   IEEE 754  allows )S
58 577.666 M (programmers to test it later at a convenient place to detect previous  INVALID  operations and compensate for )S
58 589.666 M (them,  rather than be forced to prevent them.  However,  ...)S
end
431 0 :M
f3_10 sf
( )S
437 0 :M
FrameMacDict begin
0 0 0 1 0 0 0 FmK
0 FmP
58 601.666 M 0 0 426(  +-------------------------------------------------------------------+)FmTx
58 613.666 M 0 0 426(  |  Microsoft\'s  C  and  C++  compilers defeat that purpose of the   |)FmTx
58 625.666 M 0 0 426(  |  INVALID  flag by using it exclusively to detect floating-point   |)FmTx
58 637.666 M 0 0 426(  |  stack overflows,  so programmers cannot use it  \( via library    |)FmTx
58 649.666 M 0 0 426(  |  functions  _clear87  and  _status87 \)  for their own purposes.   |)FmTx
58 661.666 M 0 0 426(  +-------------------------------------------------------------------+)FmTx
end
437 0 :M
f0_10 sf
( )S
439 0 :M
FrameMacDict begin
0 0 0 1 0 0 0 FmK
0 FmP
58 673.666 M (       This flagrant violation of  IEEE 754  appears not to weigh on  Microsoft\325s  corporate conscience.)S
58 685.666 M (       So far as I know,  Borland\'s  C ,  C++  and  Pascal  compilers do not abuse the  INVALID  flag that way.)S
223.25 697.666 M (. . . . . . . . . . . . . . . . . . . . . . . . . . . .)S
[/CropBox[-14 773 FmDC 598 -19 FmDC]/PAGE FmPD
end
endp
%%Page: 8 8
%%BeginPageSetup
initializepage
(W. Kahan; page: 8 of 30)setjob
%%EndPageSetup
gS 0 0 584 768 rC
1 G
-14 -19 612 792 rF
0 G
440 0 :M
FrameMacDict begin
0 0 0 1 0 0 0 FmK
0 FmP
0 FmSP
7 FmP
58 17 468 10 FmqF
end
440 0 :M
f0_10 sf
( )S
442 0 :M
FrameMacDict begin
0 0 0 1 0 0 0 FmK
0 FmP
58 23.82 M (Work in Progress:                          Lecture Notes on the Status of  IEEE 754                            )S
(August 17, 1995)S
7 FmP
58 729.678 468 10 FmqF
0 FmP
499.064 736.498 M (Page )S
(8)S
7 FmP
58 53 468 648 FmqF
0 FmP
58 59.667 M (While on the subject of miscreant compilers,  we should remark their increasingly common tendency to reorder )S
58 71.667 M (operations that can be executed concurrently by pipelined computers.  When such an  \322 )S
(optimization )S
(\323  moves a )S
58 83.667 M (floating-point instruction past a procedure-call intended to deal with a flag in the floating-point status word or to )S
58 95.667 M (write into the control word to alter trapping or rounding,  the programmer\'s intention is thwarted.  Bad moves like )S
58 107.667 M (these have been made even by compilers that come supplied with procedures akin to  _control87 ,  _clear87  and  )S
58 119.667 M (_status87  in their libraries.  Operations\' movements would be easier to debug if they were highlighted by the )S
58 131.667 M (compiler in its annotated re-listing of the source-code.  Meanwhile,  so long as compilers mishandle attempts to )S
58 143.667 M (cope with floating-point exceptions,  flags and modes in the ways intended by  IEEE Standard 754,  frustrated )S
58 155.667 M (programmers will abandon such attempts and compiler writers will infer wrongly that unexercised capabilities are )S
58 167.667 M (unexercised for lack of demand.)S
223.25 179.667 M (. . . . . . . . . . . . . . . . . . . . . . . . . . . .)S
58 203.666 M (IEEE 754\'s  specification for  NaN  endows it with a field of bits into which software can record,  say,  how and/or )S
58 215.666 M (where the  NaN  came into existence.  That information would be extremely helpful for subsequent  \322 )S
(Retrospective )S
58 227.666 M (Diagnosis )S
(\323  of malfunctioning computations,  but no software exists now to employ it.  Customarily that field has )S
58 239.666 M (been copied from an operand  NaN  to the result  NaN  of every arithmetic operation,  or filled with binary  )S
58 251.666 M (1000...000  when a new  NaN  was created by an untrapped  INVALID  operation.  For lack of software to exploit )S
58 263.666 M (it,  that custom has been atrophying.)S
58 287.666 M (680x0  and  ix87  treat a  NaN  with any nonzero binary  0xxx...xxx  in that field as an  SNaN  \( Signaling NaN \)  to )S
58 299.666 M (fulfill a requirement of IEEE 754.  An  SNaN  may be moved  \( copied \)  without incident,  but any other arithmetic )S
58 311.666 M (operation upon an  SNaN  is an  INVALID  operation  \( and so is loading one onto the  ix87\'s  stack \)  that must trap )S
58 323.666 M (or else produce a new nonsignaling  NaN.  \( Another way to turn an  SNaN  into a  NaN  is to turn  0xxx...xxx  into  )S
58 335.666 M (1xxx...xxx  with a logical  OR.\)  Intended for,  among other things,  data missing from statistical collections,  and )S
58 347.666 M (for uninitialized variables,  SNaNs  seem preferable for such purposes to zeros or haphazard traces left in memory )S
58 359.666 M (by a previous program.  However,  no more will be said about  SNaNs  here.)S
58 383.666 M (Were there no way to get rid of  NaNs,  they would be as useless as  Indefinites  on  CRAYs;  as soon as one were )S
58 395.666 M (encountered,  computation would be best stopped rather than continued for an indefinite time to an  Indefinite  )S
58 407.666 M (conclusion.  That is why some operations upon  NaNs  must deliver  non-NaN  results.  Which operations?)S
58 431.666 M (Disagreements about some of them are inevitable,  but that grants no license to resolve the disagreements by )S
58 443.666 M (making arbitrary choices.  Every real  \( not logical \)  function that produces the same floating-point result for all )S
58 455.666 M (finite and infinite numerical values of an argument should yield the same result when that argument is  NaN.  )S
58 467.666 M (\( )S
(Recall  hypot  above.\))S
58 491.666 M (The exceptions are  C  predicates  \322 )S
end
443 0 :M
f3_10 sf
( )S
449 0 :M
FrameMacDict begin
0 0 0 1 0 0 0 FmK
0 FmP
202.648 491.666 M 0 0 36(x == x)FmTx
end
449 0 :M
f0_10 sf
( )S
451 0 :M
FrameMacDict begin
0 0 0 1 0 0 0 FmK
0 FmP
238.648 491.666 M ( \323  and  \322 )S
end
451 0 :M
f3_10 sf
( )S
457 0 :M
FrameMacDict begin
0 0 0 1 0 0 0 FmK
0 FmP
276.964 491.666 M 0 0 36(x != x)FmTx
end
457 0 :M
f0_10 sf
( )S
459 0 :M
FrameMacDict begin
0 0 0 1 0 0 0 FmK
0 FmP
312.964 491.666 M ( \323,  which are respectively  1  and  0  for every )S
58 503.666 M (infinite or finite number  x  but reverse if  x  is  Not a Number \( NaN \);  these provide the only simple unexceptional )S
58 515.666 M (distinction between  NaNs  and numbers in languages that lack a word for  NaN  and a predicate  IsNaN\(x\).  Over-)S
58 527.666 M (optimizing compilers that substitute  1  for   )S
end
460 0 :M
f3_10 sf
( )S
466 0 :M
FrameMacDict begin
0 0 0 1 0 0 0 FmK
0 FmP
235.739 527.666 M 0 0 36(x == x)FmTx
end
466 0 :M
f0_10 sf
( )S
468 0 :M
FrameMacDict begin
0 0 0 1 0 0 0 FmK
0 FmP
271.739 527.666 M (  violate  IEEE 754.)S
58 551.666 M (IEEE 754  assigns values to all relational expressions involving  NaN .  In the syntax of  C ,  the predicate  )S
end
468 0 :M
f3_10 sf
( )S
474 0 :M
FrameMacDict begin
0 0 0 1 0 0 0 FmK
0 FmP
58 563.666 M 0 0 12(x )FmTx
0 0 18(!= )FmTx
0 0 6(y)FmTx
end
474 0 :M
f0_10 sf
( )S
476 0 :M
FrameMacDict begin
0 0 0 1 0 0 0 FmK
0 FmP
94 563.666 M (  is  True  but all others,   )S
end
477 0 :M
f3_10 sf
( )S
483 0 :M
FrameMacDict begin
0 0 0 1 0 0 0 FmK
0 FmP
196.749 563.666 M 0 0 30(x < y)FmTx
end
483 0 :M
f0_10 sf
( )S
485 0 :M
FrameMacDict begin
0 0 0 1 0 0 0 FmK
0 FmP
226.749 563.666 M ( ,  )S
end
485 0 :M
f3_10 sf
( )S
491 0 :M
FrameMacDict begin
0 0 0 1 0 0 0 FmK
0 FmP
236.749 563.666 M 0 0 36(x <= y)FmTx
end
491 0 :M
f0_10 sf
( )S
493 0 :M
FrameMacDict begin
0 0 0 1 0 0 0 FmK
0 FmP
272.749 563.666 M ( ,  )S
end
494 0 :M
f3_10 sf
( )S
500 0 :M
FrameMacDict begin
0 0 0 1 0 0 0 FmK
0 FmP
282.749 563.666 M 0 0 36(x == y)FmTx
end
500 0 :M
f0_10 sf
( )S
502 0 :M
FrameMacDict begin
0 0 0 1 0 0 0 FmK
0 FmP
318.749 563.666 M ( ,  )S
end
502 0 :M
f3_10 sf
( )S
508 0 :M
FrameMacDict begin
0 0 0 1 0 0 0 FmK
0 FmP
328.749 563.666 M 0 0 36(x >= y)FmTx
end
508 0 :M
f0_10 sf
( )S
510 0 :M
FrameMacDict begin
0 0 0 1 0 0 0 FmK
0 FmP
364.749 563.666 M (  and  )S
end
511 0 :M
f3_10 sf
( )S
517 0 :M
FrameMacDict begin
0 0 0 1 0 0 0 FmK
0 FmP
389.188 563.666 M 0 0 30(x > y)FmTx
end
517 0 :M
f0_10 sf
( )S
519 0 :M
FrameMacDict begin
0 0 0 1 0 0 0 FmK
0 FmP
419.188 563.666 M ( ,  are  False  whenever  )S
58 575.666 M (x  or  y  or both are  NaN,  and then all but  )S
end
519 0 :M
f3_10 sf
( )S
525 0 :M
FrameMacDict begin
0 0 0 1 0 0 0 FmK
0 FmP
232.944 575.666 M 0 0 36(x != y)FmTx
end
525 0 :M
f0_10 sf
( )S
527 0 :M
FrameMacDict begin
0 0 0 1 0 0 0 FmK
0 FmP
268.944 575.666 M (  and  )S
end
528 0 :M
f3_10 sf
( )S
534 0 :M
FrameMacDict begin
0 0 0 1 0 0 0 FmK
0 FmP
293.382 575.666 M 0 0 36(x == y)FmTx
end
534 0 :M
f0_10 sf
( )S
536 0 :M
FrameMacDict begin
0 0 0 1 0 0 0 FmK
0 FmP
329.382 575.666 M (  are  INVALID  operations too and must so )S
58 587.666 M (signal.  Ideally,  expressions  )S
end
536 0 :M
f3_10 sf
( )S
542 0 :M
FrameMacDict begin
0 0 0 1 0 0 0 FmK
0 FmP
176.296 587.666 M 0 0 36(x !< y)FmTx
end
542 0 :M
f0_10 sf
( )S
544 0 :M
FrameMacDict begin
0 0 0 1 0 0 0 FmK
0 FmP
212.296 587.666 M ( ,  )S
end
545 0 :M
f3_10 sf
( )S
551 0 :M
FrameMacDict begin
0 0 0 1 0 0 0 FmK
0 FmP
222.296 587.666 M 0 0 42(x !<= y)FmTx
end
551 0 :M
f0_10 sf
( )S
553 0 :M
FrameMacDict begin
0 0 0 1 0 0 0 FmK
0 FmP
264.296 587.666 M ( ,  )S
end
553 0 :M
f3_10 sf
( )S
559 0 :M
FrameMacDict begin
0 0 0 1 0 0 0 FmK
0 FmP
274.296 587.666 M 0 0 42(x !>= y)FmTx
end
559 0 :M
f0_10 sf
( )S
561 0 :M
FrameMacDict begin
0 0 0 1 0 0 0 FmK
0 FmP
316.296 587.666 M ( ,  )S
end
562 0 :M
f3_10 sf
( )S
568 0 :M
FrameMacDict begin
0 0 0 1 0 0 0 FmK
0 FmP
326.296 587.666 M 0 0 36(x !> y)FmTx
end
568 0 :M
f0_10 sf
( )S
570 0 :M
FrameMacDict begin
0 0 0 1 0 0 0 FmK
0 FmP
362.296 587.666 M (  and  )S
end
570 0 :M
f3_10 sf
( )S
576 0 :M
FrameMacDict begin
0 0 0 1 0 0 0 FmK
0 FmP
386.734 587.666 M 0 0 48(x !>=< y)FmTx
end
576 0 :M
f0_10 sf
( )S
578 0 :M
FrameMacDict begin
0 0 0 1 0 0 0 FmK
0 FmP
434.734 587.666 M (  should be valid and  )S
58 599.666 M (quietly  True  if  x  or  y  or both are  NaN ,  but arbiters of taste and fashion for  ANSI Standard C  have refused to )S
58 611.666 M (recognize such expressions.  In any event,  )S
end
579 0 :M
f3_10 sf
( )S
585 0 :M
FrameMacDict begin
0 0 0 1 0 0 0 FmK
0 FmP
231.259 611.666 M 0 0 48(!\(x < y\))FmTx
end
585 0 :M
f0_10 sf
( )S
587 0 :M
FrameMacDict begin
0 0 0 1 0 0 0 FmK
0 FmP
279.259 611.666 M (  differs from  )S
end
587 0 :M
f3_10 sf
( )S
593 0 :M
FrameMacDict begin
0 0 0 1 0 0 0 FmK
0 FmP
337.282 611.666 M 0 0 36(x >= y)FmTx
end
593 0 :M
f0_10 sf
( )S
595 0 :M
FrameMacDict begin
0 0 0 1 0 0 0 FmK
0 FmP
373.282 611.666 M (  when  NaN  is involved,  though )S
58 623.666 M (rude compilers  \322 )S
(optimize )S
(\323  the difference away.  Worse,  some compilers mishandle  NaNs  in all relational )S
58 635.666 M (expressions.)S
58 659.666 M (Some language standards conflict with  IEEE 754.  For example,  APL  specifies  1.0  for  0.0/0.0 ;  this )S
58 671.666 M (specification is one that  APL\'s  designers soon regretted.  Sometimes naive compile-time optimizations replace )S
58 683.666 M (expressions  )S
end
596 0 :M
f3_10 sf
( )S
602 0 :M
FrameMacDict begin
0 0 0 1 0 0 0 FmK
0 FmP
109.65 683.666 M 0 0 18(x/x)FmTx
end
602 0 :M
f0_10 sf
( )S
604 0 :M
FrameMacDict begin
0 0 0 1 0 0 0 FmK
0 FmP
127.65 683.666 M (  by  1  \( wrong if  x  is  zero,  Infinity  or  NaN \)  and  )S
end
604 0 :M
f3_10 sf
( )S
610 0 :M
FrameMacDict begin
0 0 0 1 0 0 0 FmK
0 FmP
346.464 683.666 M 0 0 30(x - x)FmTx
end
610 0 :M
f0_10 sf
( )S
612 0 :M
FrameMacDict begin
0 0 0 1 0 0 0 FmK
0 FmP
376.464 683.666 M (  by  0  \( wrong if  x  is  Infinity  or  )S
58 695.666 M (NaN \)  and  )S
end
613 0 :M
f3_10 sf
( )S
619 0 :M
FrameMacDict begin
0 0 0 1 0 0 0 FmK
0 FmP
107.143 695.666 M 0 0 18(0*x)FmTx
end
619 0 :M
f0_10 sf
( )S
621 0 :M
FrameMacDict begin
0 0 0 1 0 0 0 FmK
0 FmP
125.143 695.666 M (  and  )S
end
621 0 :M
f3_10 sf
( )S
627 0 :M
FrameMacDict begin
0 0 0 1 0 0 0 FmK
0 FmP
149.582 695.666 M 0 0 18(0/x)FmTx
end
627 0 :M
f0_10 sf
( )S
629 0 :M
FrameMacDict begin
0 0 0 1 0 0 0 FmK
0 FmP
167.582 695.666 M (  by  0  \( wrong if ... \),  alas.)S
[/CropBox[-14 773 FmDC 598 -19 FmDC]/PAGE FmPD
end
endp
%%Page: 9 9
%%BeginPageSetup
initializepage
(W. Kahan; page: 9 of 30)setjob
%%EndPageSetup
gS 0 0 584 768 rC
1 G
-14 -19 612 792 rF
0 G
630 0 :M
FrameMacDict begin
0 0 0 1 0 0 0 FmK
0 FmP
0 FmSP
7 FmP
58 17 468 10 FmqF
end
630 0 :M
f0_10 sf
( )S
632 0 :M
FrameMacDict begin
0 0 0 1 0 0 0 FmK
0 FmP
58 23.82 M (Work in Progress:                          Lecture Notes on the Status of  IEEE 754                            )S
(August 17, 1995)S
7 FmP
58 729.678 468 10 FmqF
0 FmP
499.064 736.498 M (Page )S
(9)S
7 FmP
58 53 468 648 FmqF
0 FmP
58 59.667 M (Ideally,  certain other  )S
end
633 0 :M
f2_10 sf
( )S
635 0 :M
FrameMacDict begin
0 0 0 1 0 0 0 FmK
0 FmP
148.505 59.667 M (Real)S
end
635 0 :M
f0_10 sf
( )S
637 0 :M
FrameMacDict begin
0 0 0 1 0 0 0 FmK
0 FmP
166.831 59.667 M (  expressions unmentioned by  IEEE 754  should signal  INVALID  and deliver  NaNs ;  )S
58 71.667 M (some examples in  Fortran  syntax are ...)S
143.456 83.667 M (\(Negative\)**\(Noninteger\) ,      LOG\(Negative\) ,      ASIN\(Bigger than 1\) ,)S
143.853 95.667 M (SIN\(Infinity\) ,      ACOSH\(Less than 1\) ,     ...,      all of them  INVALID .)S
58 107.667 M (These expressions do behave that way if implemented well in software that exploits the transcendental functions )S
58 119.667 M (built into the  680x0  and  ix87 ;  here  i387  and successors work better than  8087 and 80287.)S
58 143.667 M (A number of real expressions are sometimes implemented as  INVALID  by mistake,  or declared  Undefined  by ill-)S
58 155.667 M (considered language standards;  a few examples are  ...)S
170.64 167.667 M (0.0**0.0  =  Infinity**0.0  =  NaN**0.0  =  1.0 ,   not  NaN ;)S
146.137 179.667 M (COS\( 2.0**120 \)  =  -0.9258790228548378673038617641... ,  not  NaN.)S
58 191.666 M (More examples like these will be offered under  DIVIDE by ZERO  below.)S
58 215.666 M (Some familiar functions have yet to be defined for  NaN .  For instance  max{x, y}  should deliver the same result )S
58 227.666 M (as  max{y, x}  but almost no implementations do that when  x  is  NaN .  There are good reasons to define  )S
58 239.666 M (max{NaN, 5} := max{5, NaN} := 5  though many would disagree.)S
58 263.666 M (Differences of opinion persist about whether certain functions should be  INVALID  or defined by convention at )S
58 275.666 M (internal discontinuities;  a few examples are  ...)S
130 299.666 M (1.0**Infinity  =  \(-1.0\)**Infinity  =  1.0  ?)S
47.819 N (\( NaN  is better.\))S
130 311.666 M (ATAN2\(0.0, 0.0\)  =  0.0  or  +)S
end
638 0 :M
f4_10 sf
( )S
640 0 :M
FrameMacDict begin
0 0 0 1 0 0 0 FmK
0 FmP
251.528 311.666 M (p)S
end
640 0 :M
f0_10 sf
( )S
642 0 :M
FrameMacDict begin
0 0 0 1 0 0 0 FmK
0 FmP
257.017 311.666 M (  or  -)S
end
643 0 :M
f4_10 sf
( )S
645 0 :M
FrameMacDict begin
0 0 0 1 0 0 0 FmK
0 FmP
278.672 311.666 M (p)S
end
645 0 :M
f0_10 sf
( )S
647 0 :M
FrameMacDict begin
0 0 0 1 0 0 0 FmK
0 FmP
284.16 311.666 M (  ?)S
52.401 N (\( NaN  is worse.\))S
130 323.666 M (ATAN2\(+Infinity, +Infinity\)  =  )S
end
648 0 :M
f4_10 sf
( )S
650 0 :M
FrameMacDict begin
0 0 0 1 0 0 0 FmK
0 FmP
261.321 323.666 M (p)S
end
650 0 :M
f0_10 sf
( )S
652 0 :M
FrameMacDict begin
0 0 0 1 0 0 0 FmK
0 FmP
266.809 323.666 M (/4  ?)S
61.974 N (\( NaN  is worse.\))S
130 335.666 M (SIGNUM\(0.0\)  =  0.0  or  +1.0  or  -1.0  or  NaN ?)S
14.506 N (\( 0.0  is best.\))S
130 347.666 M (SGN\(0.0\)  =  0 .)S
151.208 N (\( Standard BASIC \))S
130 359.666 M (SIGN\(+0.0\)  =  SIGN\(-0.0\)  =  +1.0 .)S
67.653 N (\( Fortran Standard \))S
130 371.666 M (CopySign\(1.0, )S
end
653 0 :M
f4_10 sf
( )S
655 0 :M
FrameMacDict begin
0 0 0 1 0 0 0 FmK
0 FmP
190.835 371.666 M (\261)S
end
655 0 :M
f0_10 sf
( )S
657 0 :M
FrameMacDict begin
0 0 0 1 0 0 0 FmK
0 FmP
196.323 371.666 M (0.0\)  =  )S
end
658 0 :M
f4_10 sf
( )S
660 0 :M
FrameMacDict begin
0 0 0 1 0 0 0 FmK
0 FmP
227.791 371.666 M (\261)S
end
660 0 :M
f0_10 sf
( )S
662 0 :M
FrameMacDict begin
0 0 0 1 0 0 0 FmK
0 FmP
233.279 371.666 M (1.0   respectively.)S
41.916 N (\( IEEE 754/854 \))S
58 395.666 M (As time passes,  so do disputes over the value that should be assigned to a function at a discontinuity.  For example,  )S
58 407.666 M (a consensus is growing that  x**0 = 1  for every  x ,  including  0 ,  Infinity  and  NaN .  If some day we agree that  )S
58 419.666 M (1**x = 1  for every  x ,  then  1**NaN = 1  will follow;  but for the time being  NaN  is the preferred alternative for  )S
58 431.666 M (1**NaN ,  and for  1**Infinity  too provided it signals.  It seems unlikely that  0  will ever be preferred to  NaN  for  )S
58 443.666 M (sign\(NaN\).  And yet,  unwise choices continue to be inflicted upon us with the best of intentions,  so the struggle to )S
58 455.666 M (correct them is unending.)S
115.6 479.666 M (Between  1964 and 1970  the  U.S. National Bureau of Standards  changed its definition )S
115.6 491.666 M (of  arccot\(x\)  from   )S
end
663 0 :M
f4_10 sf
( )S
665 0 :M
FrameMacDict begin
0 0 0 1 0 0 0 FmK
0 FmP
196.938 491.666 M (p)S
end
665 0 :M
f0_10 sf
( )S
667 0 :M
FrameMacDict begin
0 0 0 1 0 0 0 FmK
0 FmP
202.426 491.666 M (/2  -  arctan\(x\)    to   arctan\(1/x\) ,  thereby introducing a jump at   )S
115.6 503.666 M (x = 0 .  This change appears to be a bad idea,  but it is hard to argue with an arm of the  )S
115.6 515.666 M (U.S.  government.)S
58 551.666 M (Some programmers think invoking language locutions that enable the trap to abort upon  INVALID  operations is )S
58 563.666 M (the safe way to avoid all such disputes;  they are mistaken.  Doing so may abort searches prematurely.  For )S
58 575.666 M (example,  try to find a positive root  x  of an equation like)S
222.958 587.666 M (\( TAN\(x\) - ASIN\(x\) \)/x**4  =  0.0)S
58 599.666 M (by using  Newton\'s  iteration or the  Secant  iteration starting from various first guesses between  0.1  and  0.9 .  In )S
58 611.666 M (general,  a root-finder that does not know the boundary of an equation\'s domain must be doomed to abort,  if it )S
58 623.666 M (probes a wild guess thrown outside that domain,  unless it can respond to  NaN  by retracting the wild guess back )S
58 635.666 M (toward a previous guess inside the domain.  Such a root-finder is built into current  Hewlett-Packard  calculators )S
58 647.666 M (that solve equations like the one above far more easily than do root-finders available on most computers.)S
[/CropBox[-14 773 FmDC 598 -19 FmDC]/PAGE FmPD
end
endp
%%Page: 10 10
%%BeginPageSetup
initializepage
(W. Kahan; page: 10 of 30)setjob
%%EndPageSetup
gS 0 0 584 768 rC
1 G
-14 -19 612 792 rF
0 G
668 0 :M
FrameMacDict begin
0 0 0 1 0 0 0 FmK
0 FmP
0 FmSP
7 FmP
58 17 468 10 FmqF
end
668 0 :M
f0_10 sf
( )S
670 0 :M
FrameMacDict begin
0 0 0 1 0 0 0 FmK
0 FmP
58 23.82 M (Work in Progress:                          Lecture Notes on the Status of  IEEE 754                            )S
(August 17, 1995)S
7 FmP
58 729.678 468 10 FmqF
0 FmP
494.064 736.498 M (Page )S
(10)S
7 FmP
58 53 468 648 FmqF
end
671 0 :M
f0_12 sf
( )S
674 0 :M
FrameMacDict begin
0 0 0 1 0 0 0 FmK
0 FmP
58 61 M (Exception:  )S
end
674 0 :M
f1_12 sf
( )S
677 0 :M
FrameMacDict begin
0 0 0 1 0 0 0 FmK
0 FmP
115.984 61 M (DIVIDE by ZERO)S
end
677 0 :M
f0_12 sf
( )S
680 0 :M
FrameMacDict begin
0 0 0 1 0 0 0 FmK
0 FmP
211.987 61 M (.)S
end
680 0 :M
f0_10 sf
( )S
682 0 :M
FrameMacDict begin
0 0 0 1 0 0 0 FmK
0 FmP
58 73.667 M (This is a misnomer perpetrated for historical reasons.  A better name for this exception is)S
171.073 85.667 M (\322 )S
(Infinite  result computed  Exactly  from  Finite operands. \323)S
58 97.667 M (An example is  3.0/0.0 ,  for which  IEEE 754  specifies an  Infinity  as the default result.  The sign bit of that result )S
58 109.667 M (is,  as usual for quotients,  the exclusive  OR  of the operands\' sign bits.  Since  0.0  can have either sign,  so can  )S
58 121.667 M (Infinity;  in fact,  division by zero is the only algebraic operation that reveals the sign of zero.  \( IEEE 754  )S
58 133.667 M (recommends a non-algebraic function  CopySign  to reveal a sign without ever signaling an exception,  but few )S
58 145.667 M (compilers offer it,  alas.\))S
58 169.667 M (Ideally,  certain other real expressions should be treated just the way  IEEE 754  treats divisions by zero,  rather )S
58 181.667 M (than all be misclassified as errors or  \322 )S
(Undefined )S
(\323;  some examples in  Fortran syntax are ...)S
130 193.667 M (\()S
end
682 0 :M
f4_10 sf
( )S
684 0 :M
FrameMacDict begin
0 0 0 1 0 0 0 FmK
0 FmP
133.328 193.667 M (\261)S
end
685 0 :M
f0_10 sf
( )S
687 0 :M
FrameMacDict begin
0 0 0 1 0 0 0 FmK
0 FmP
138.816 193.667 M (0.0\)**\(NegativeNonInteger\)  =  +Infinity  ,)S
130 205.666 M (\()S
end
687 0 :M
f4_10 sf
( )S
689 0 :M
FrameMacDict begin
0 0 0 1 0 0 0 FmK
0 FmP
133.328 205.666 M (\261)S
end
690 0 :M
f0_10 sf
( )S
692 0 :M
FrameMacDict begin
0 0 0 1 0 0 0 FmK
0 FmP
138.816 205.666 M (0.0\)**\(NegativeEvenInteger\) =  +Infinity  ,)S
130 217.666 M (\()S
end
692 0 :M
f4_10 sf
( )S
694 0 :M
FrameMacDict begin
0 0 0 1 0 0 0 FmK
0 FmP
133.328 217.666 M (\261)S
end
695 0 :M
f0_10 sf
( )S
697 0 :M
FrameMacDict begin
0 0 0 1 0 0 0 FmK
0 FmP
138.816 217.666 M (0.0\)**\(NegativeOddInteger\)  =  )S
end
697 0 :M
f4_10 sf
( )S
699 0 :M
FrameMacDict begin
0 0 0 1 0 0 0 FmK
0 FmP
268.56 217.666 M (\261)S
end
700 0 :M
f0_10 sf
( )S
702 0 :M
FrameMacDict begin
0 0 0 1 0 0 0 FmK
0 FmP
274.048 217.666 M (Infinity  resp.,)S
130 229.666 M (ATANH\()S
end
702 0 :M
f4_10 sf
( )S
704 0 :M
FrameMacDict begin
0 0 0 1 0 0 0 FmK
0 FmP
168.313 229.666 M (\261)S
end
705 0 :M
f0_10 sf
( )S
707 0 :M
FrameMacDict begin
0 0 0 1 0 0 0 FmK
0 FmP
173.801 229.666 M (1.0\)  =  )S
end
707 0 :M
f4_10 sf
( )S
709 0 :M
FrameMacDict begin
0 0 0 1 0 0 0 FmK
0 FmP
205.269 229.666 M (\261)S
end
710 0 :M
f0_10 sf
( )S
712 0 :M
FrameMacDict begin
0 0 0 1 0 0 0 FmK
0 FmP
210.757 229.666 M (Infinity  resp.,)S
130 241.666 M (LOG\()S
end
712 0 :M
f4_10 sf
( )S
714 0 :M
FrameMacDict begin
0 0 0 1 0 0 0 FmK
0 FmP
153.875 241.666 M (\261)S
end
715 0 :M
f0_10 sf
( )S
717 0 :M
FrameMacDict begin
0 0 0 1 0 0 0 FmK
0 FmP
159.363 241.666 M (0.0\)  =  -Infinity .)S
58 265.666 M (The sign of  Infinity  may be accidental in some cases;  for instance,  if  TANdeg\(x\)  delivers the  TAN  of an angle  )S
58 277.666 M (x  measured in degrees,  then)S
232.955 289.666 M (TANdeg\(90.0 + 180*Integer\))S
58 301.666 M (is infinite with a sign that depends upon details of the implementation.  Perhaps that sign might best match the sign )S
58 313.666 M (of the argument,  but no such convention exists yet.   \( For  x  in radians,  accurately implemented  TAN\(x\)  need )S
58 325.666 M (never be infinite ! \))S
58 349.666 M (Compilers can cause accidents by evaluating expressions carelessly.  For example,  when  y  resides in a register,   )S
58 361.666 M (evaluating   x-y   as   -\(y-x\)  reverses the sign of zero if  y = x ;  evaluate it as   -y + x   instead.  Simplifying  x+0  )S
58 373.666 M (to  x  misbehaves when  x  is  -0 .  Doing that,  or printing  -0  without its sign,  can obscure the source of a  -Infinity.)S
58 397.666 M (Operations that produce an infinite result from an infinite operand or two must not signal  DIVIDE by ZERO.  )S
58 409.666 M (Examples include)S
134.693 421.666 M (Infinity + 3 ,     Infinity*Infinity ,     EXP\(+Infinity\) ,     LOG\(+Infinity\) ,    ... .)S
58 433.666 M (Neither can)S
149.649 445.666 M (3.0/Infinity  =  EXP\(-Infinity\)  =  0.0 ,         ATAN\()S
end
717 0 :M
f4_10 sf
( )S
719 0 :M
FrameMacDict begin
0 0 0 1 0 0 0 FmK
0 FmP
356.15 445.666 M (\261)S
end
720 0 :M
f0_10 sf
( )S
722 0 :M
FrameMacDict begin
0 0 0 1 0 0 0 FmK
0 FmP
361.639 445.666 M (Infinity\)  =  )S
end
722 0 :M
f4_10 sf
( )S
724 0 :M
FrameMacDict begin
0 0 0 1 0 0 0 FmK
0 FmP
410.596 445.666 M (\261p)S
end
725 0 :M
f0_10 sf
( )S
727 0 :M
FrameMacDict begin
0 0 0 1 0 0 0 FmK
0 FmP
421.573 445.666 M (/2 ,)S
58 457.666 M (and similar examples be regarded as exceptional.  If all goes well,  infinite intermediate results will turn quietly into )S
58 469.666 M (correct finite final results that way.  If all does not go well,  Infinity  will turn into  NaN  and signal  INVALID.  )S
58 481.666 M (Unlike integer division by zero,  for which no integer infinity nor  NaN  has been provided,  floating-point division )S
58 493.666 M (by zero poses no danger provided subsequent  INVALID  signals,  if any,  are heeded;  in that case disabling the )S
58 505.666 M (trap for  DIVIDE by ZERO  is quite safe.)S
end
727 0 :M
f0_12 sf
( )S
730 0 :M
FrameMacDict begin
0 0 0 1 0 0 0 FmK
0 FmP
186.524 560.999 M (......   Digression on  Division-by-Zero   ......)S
end
730 0 :M
f0_10 sf
( )S
732 0 :M
FrameMacDict begin
0 0 0 1 0 0 0 FmK
0 FmP
58 585.666 M (Schools teach us to abhor  Division-by-Zero  and to stand in awe of the  Infinite.  Actually,  adjoining  Infinity  to )S
58 597.666 M (the real numbers adds nothing worse than another exception to the familiar cancellation laws)S
227.021 609.666 M (\(1/x\)x  =  x/x  =  1 ,     x-x  =  0 ,)S
58 621.666 M (among which the first is already violated by  x = 0 .  That is a small inconvenience compared with the )S
58 633.666 M (circumlocutions we would resort to if  Infinity  were outlawed.  Two examples to show why are offered below.)S
[/CropBox[-14 773 FmDC 598 -19 FmDC]/PAGE FmPD
end
endp
%%Page: 11 11
%%BeginPageSetup
initializepage
(W. Kahan; page: 11 of 30)setjob
%%EndPageSetup
gS 0 0 584 768 rC
1 G
-14 -19 612 792 rF
0 G
733 0 :M
FrameMacDict begin
0 0 0 1 0 0 0 FmK
0 FmP
0 FmSP
7 FmP
58 17 468 10 FmqF
end
733 0 :M
f0_10 sf
( )S
735 0 :M
FrameMacDict begin
0 0 0 1 0 0 0 FmK
0 FmP
58 23.82 M (Work in Progress:                          Lecture Notes on the Status of  IEEE 754                            )S
(August 17, 1995)S
7 FmP
58 729.678 468 10 FmqF
0 FmP
494.064 736.498 M (Page )S
(11)S
7 FmP
58 53 468 648 FmqF
0 FmP
58 59.667 M (The first example shows how  Infinity  eases the numerical solution of a differential equation that appears to have )S
58 73 M (no divisions in it.  The problem is to compute  y\(10\)  where  y\()S
end
736 0 :M
f0_12 sf
( )S
739 0 :M
FrameMacDict begin
0 0 0 1 0 0 0 FmK
0 FmP
309.604 73 M (t)S
end
739 0 :M
f0_10 sf
( )S
741 0 :M
FrameMacDict begin
0 0 0 1 0 0 0 FmK
0 FmP
312.938 73 M (\)  satisfies the  Ricatti  equation)S
206.808 88.867 M (dy/d)S
end
741 0 :M
f0_12 sf
( )S
744 0 :M
FrameMacDict begin
0 0 0 1 0 0 0 FmK
0 FmP
224.587 88.867 M (t)S
end
744 0 :M
f0_10 sf
( )S
746 0 :M
FrameMacDict begin
0 0 0 1 0 0 0 FmK
0 FmP
227.921 88.867 M (  =  )S
end
747 0 :M
f0_12 sf
( )S
750 0 :M
FrameMacDict begin
0 0 0 1 0 0 0 FmK
0 FmP
243.56 88.867 M (t)S
end
750 0 :M
f0_10 sf
( )S
752 0 :M
FrameMacDict begin
0 0 0 1 0 0 0 FmK
0 FmP
246.894 88.867 M ( + y)S
end
752 0 :M
f0_9 sf
( )S
754 0 :M
FrameMacDict begin
0 0 0 1 0 0 0 FmK
0 FmP
FmG 262.534 84.867 M 0.978 0.978 scale (2)S FmR
end
754 0 :M
f0_10 sf
( )S
756 0 :M
FrameMacDict begin
0 0 0 1 0 0 0 FmK
0 FmP
266.924 88.867 M (   for all   )S
end
757 0 :M
f0_12 sf
( )S
760 0 :M
FrameMacDict begin
0 0 0 1 0 0 0 FmK
0 FmP
306.074 88.867 M (t)S
end
760 0 :M
f0_10 sf
( )S
762 0 :M
FrameMacDict begin
0 0 0 1 0 0 0 FmK
0 FmP
309.408 88.867 M ( )S
end
762 0 :M
f4_10 sf
( )S
764 0 :M
FrameMacDict begin
0 0 0 1 0 0 0 FmK
0 FmP
311.908 88.867 M (\263)S
end
765 0 :M
f0_10 sf
( )S
767 0 :M
FrameMacDict begin
0 0 0 1 0 0 0 FmK
0 FmP
317.397 88.867 M ( 0 ,    y\(0\) = 0 .)S
58 102.867 M (Let us pretend not to know that  y\()S
end
767 0 :M
f0_12 sf
( )S
770 0 :M
FrameMacDict begin
0 0 0 1 0 0 0 FmK
0 FmP
196.296 102.867 M (t)S
end
770 0 :M
f0_10 sf
( )S
772 0 :M
FrameMacDict begin
0 0 0 1 0 0 0 FmK
0 FmP
199.63 102.867 M (\)  may be expressed in terms of  Bessel  functions  J... ,  whence)S
58 115.533 M (y\(10\)  =  -7.53121 10731 35425 34544 97349 58\341\341\341 .   Instead a numerical method will be used to solve the )S
58 127.533 M (differential equation approximately and as accurately as desired if enough time is spent on it.)S
58 152.866 M (Q\()S
end
773 0 :M
f4_10 sf
( )S
775 0 :M
FrameMacDict begin
0 0 0 1 0 0 0 FmK
0 FmP
68.547 152.866 M (q)S
end
775 0 :M
f0_10 sf
( )S
777 0 :M
FrameMacDict begin
0 0 0 1 0 0 0 FmK
0 FmP
73.757 152.866 M (, )S
end
778 0 :M
f0_12 sf
( )S
781 0 :M
FrameMacDict begin
0 0 0 1 0 0 0 FmK
0 FmP
78.757 152.866 M (t)S
end
781 0 :M
f0_10 sf
( )S
783 0 :M
FrameMacDict begin
0 0 0 1 0 0 0 FmK
0 FmP
82.091 152.866 M (, Y\)  will stand for an  )S
end
783 0 :M
f2_10 sf
( )S
785 0 :M
FrameMacDict begin
0 0 0 1 0 0 0 FmK
0 FmP
172.892 152.866 M (Updating Formula)S
end
786 0 :M
f0_10 sf
( )S
788 0 :M
FrameMacDict begin
0 0 0 1 0 0 0 FmK
0 FmP
248.163 152.866 M (   that advances from any  estimate  Y )S
end
788 0 :M
f4_10 sf
( )S
790 0 :M
FrameMacDict begin
0 0 0 1 0 0 0 FmK
0 FmP
401.71 152.866 M (\273)S
end
791 0 :M
f0_10 sf
( )S
793 0 :M
FrameMacDict begin
0 0 0 1 0 0 0 FmK
0 FmP
407.198 152.866 M ( y\()S
end
793 0 :M
f0_12 sf
( )S
796 0 :M
FrameMacDict begin
0 0 0 1 0 0 0 FmK
0 FmP
418.026 152.866 M (t)S
end
796 0 :M
f0_10 sf
( )S
798 0 :M
FrameMacDict begin
0 0 0 1 0 0 0 FmK
0 FmP
421.36 152.866 M (\)  to a later estimate  )S
58 166.866 M (Q\()S
end
799 0 :M
f4_10 sf
( )S
801 0 :M
FrameMacDict begin
0 0 0 1 0 0 0 FmK
0 FmP
68.547 166.866 M (q)S
end
801 0 :M
f0_10 sf
( )S
803 0 :M
FrameMacDict begin
0 0 0 1 0 0 0 FmK
0 FmP
73.757 166.866 M (, )S
end
804 0 :M
f0_12 sf
( )S
807 0 :M
FrameMacDict begin
0 0 0 1 0 0 0 FmK
0 FmP
78.757 166.866 M (t)S
end
807 0 :M
f0_10 sf
( )S
809 0 :M
FrameMacDict begin
0 0 0 1 0 0 0 FmK
0 FmP
82.091 166.866 M (, Y\) )S
end
809 0 :M
f4_10 sf
( )S
811 0 :M
FrameMacDict begin
0 0 0 1 0 0 0 FmK
0 FmP
100.138 166.866 M (\273)S
end
812 0 :M
f0_10 sf
( )S
814 0 :M
FrameMacDict begin
0 0 0 1 0 0 0 FmK
0 FmP
105.626 166.866 M ( y\()S
end
814 0 :M
f0_12 sf
( )S
817 0 :M
FrameMacDict begin
0 0 0 1 0 0 0 FmK
0 FmP
116.454 166.866 M (t)S
end
817 0 :M
f0_10 sf
( )S
819 0 :M
FrameMacDict begin
0 0 0 1 0 0 0 FmK
0 FmP
119.788 166.866 M (+)S
end
820 0 :M
f4_10 sf
( )S
822 0 :M
FrameMacDict begin
0 0 0 1 0 0 0 FmK
0 FmP
125.427 166.866 M (q)S
end
822 0 :M
f0_10 sf
( )S
824 0 :M
FrameMacDict begin
0 0 0 1 0 0 0 FmK
0 FmP
130.637 166.866 M (\) .  Vastly many updating formulas exist;  the simplest that might be applied to solve the given  )S
58 179.533 M (Ricatti  equation would be  Euler\'s  formula:)S
231.569 194.733 M (Q\()S
end
825 0 :M
f4_10 sf
( )S
827 0 :M
FrameMacDict begin
0 0 0 1 0 0 0 FmK
0 FmP
242.115 194.733 M (q)S
end
827 0 :M
f0_10 sf
( )S
829 0 :M
FrameMacDict begin
0 0 0 1 0 0 0 FmK
0 FmP
247.325 194.733 M (, )S
end
830 0 :M
f0_12 sf
( )S
833 0 :M
FrameMacDict begin
0 0 0 1 0 0 0 FmK
0 FmP
252.325 194.733 M (t)S
end
833 0 :M
f0_10 sf
( )S
835 0 :M
FrameMacDict begin
0 0 0 1 0 0 0 FmK
0 FmP
255.659 194.733 M (, Y\)  :=  Y + )S
end
835 0 :M
f4_10 sf
( )S
837 0 :M
FrameMacDict begin
0 0 0 1 0 0 0 FmK
0 FmP
307.483 194.733 M (q)S
end
838 0 :M
f0_10 sf
( )S
840 0 :M
FrameMacDict begin
0 0 0 1 0 0 0 FmK
0 FmP
312.693 194.733 M (\341\()S
end
840 0 :M
f0_12 sf
( )S
843 0 :M
FrameMacDict begin
0 0 0 1 0 0 0 FmK
0 FmP
318.521 194.733 M (t)S
end
843 0 :M
f0_10 sf
( )S
845 0 :M
FrameMacDict begin
0 0 0 1 0 0 0 FmK
0 FmP
321.855 194.733 M ( + Y)S
end
846 0 :M
f0_9 sf
( )S
848 0 :M
FrameMacDict begin
0 0 0 1 0 0 0 FmK
0 FmP
FmG 339.714 190.733 M 0.978 0.978 scale (2)S FmR
end
848 0 :M
f0_10 sf
( )S
850 0 :M
FrameMacDict begin
0 0 0 1 0 0 0 FmK
0 FmP
344.104 194.733 M (\) .)S
58 208.733 M (This  \322 )S
(First-Order )S
(\323  formula converges far too slowly as  )S
end
851 0 :M
f2_10 sf
( )S
853 0 :M
FrameMacDict begin
0 0 0 1 0 0 0 FmK
0 FmP
293.173 208.733 M (stepsize)S
end
853 0 :M
f0_10 sf
( )S
855 0 :M
FrameMacDict begin
0 0 0 1 0 0 0 FmK
0 FmP
324.274 208.733 M (  )S
end
856 0 :M
f4_10 sf
( )S
858 0 :M
FrameMacDict begin
0 0 0 1 0 0 0 FmK
0 FmP
329.274 208.733 M (q)S
end
858 0 :M
f0_12 sf
( )S
861 0 :M
FrameMacDict begin
0 0 0 1 0 0 0 FmK
0 FmP
334.484 208.733 M (  )S
end
861 0 :M
f0_10 sf
( )S
863 0 :M
FrameMacDict begin
0 0 0 1 0 0 0 FmK
0 FmP
340.484 208.733 M (shrinks;  a faster  \322 )S
(Second-Order )S
(\323  formula,  )S
58 221.4 M (of  Runge-Kutta  type,  is  Heun\'s :)S
202 236.599 M ( f  :=  )S
end
864 0 :M
f0_12 sf
( )S
867 0 :M
FrameMacDict begin
0 0 0 1 0 0 0 FmK
0 FmP
226.246 236.599 M (t)S
end
867 0 :M
f0_10 sf
( )S
869 0 :M
FrameMacDict begin
0 0 0 1 0 0 0 FmK
0 FmP
229.58 236.599 M ( + Y)S
end
869 0 :M
f0_9 sf
( )S
871 0 :M
FrameMacDict begin
0 0 0 1 0 0 0 FmK
0 FmP
FmG 247.438 232.6 M 0.978 0.978 scale (2)S FmR
end
871 0 :M
f0_10 sf
( )S
873 0 :M
FrameMacDict begin
0 0 0 1 0 0 0 FmK
0 FmP
251.829 236.599 M ( ;       q  :=  Y + )S
end
874 0 :M
f4_10 sf
( )S
876 0 :M
FrameMacDict begin
0 0 0 1 0 0 0 FmK
0 FmP
315.884 236.599 M (q)S
end
876 0 :M
f0_10 sf
( )S
878 0 :M
FrameMacDict begin
0 0 0 1 0 0 0 FmK
0 FmP
321.094 236.599 M (\341f  ;)S
202 252.466 M ( Q\()S
end
879 0 :M
f4_10 sf
( )S
881 0 :M
FrameMacDict begin
0 0 0 1 0 0 0 FmK
0 FmP
215.047 252.466 M (q)S
end
881 0 :M
f0_10 sf
( )S
883 0 :M
FrameMacDict begin
0 0 0 1 0 0 0 FmK
0 FmP
220.257 252.466 M (, )S
end
884 0 :M
f0_12 sf
( )S
887 0 :M
FrameMacDict begin
0 0 0 1 0 0 0 FmK
0 FmP
225.257 252.466 M (t)S
end
887 0 :M
f0_10 sf
( )S
889 0 :M
FrameMacDict begin
0 0 0 1 0 0 0 FmK
0 FmP
228.591 252.466 M (, Y\)  :=  Y + \( f  +  )S
end
889 0 :M
f0_12 sf
( )S
892 0 :M
FrameMacDict begin
0 0 0 1 0 0 0 FmK
0 FmP
305.209 252.466 M (t)S
end
892 0 :M
f0_10 sf
( )S
894 0 :M
FrameMacDict begin
0 0 0 1 0 0 0 FmK
0 FmP
308.543 252.466 M (+)S
end
895 0 :M
f4_10 sf
( )S
897 0 :M
FrameMacDict begin
0 0 0 1 0 0 0 FmK
0 FmP
314.183 252.466 M (q)S
end
897 0 :M
f0_10 sf
( )S
899 0 :M
FrameMacDict begin
0 0 0 1 0 0 0 FmK
0 FmP
319.393 252.466 M ( + q)S
end
900 0 :M
f0_9 sf
( )S
902 0 :M
FrameMacDict begin
0 0 0 1 0 0 0 FmK
0 FmP
FmG 335.033 248.466 M 0.978 0.978 scale (2)S FmR
end
902 0 :M
f0_10 sf
( )S
904 0 :M
FrameMacDict begin
0 0 0 1 0 0 0 FmK
0 FmP
339.423 252.466 M ( \)\341)S
end
905 0 :M
f4_10 sf
( )S
907 0 :M
FrameMacDict begin
0 0 0 1 0 0 0 FmK
0 FmP
347.75 252.466 M (q)S
end
907 0 :M
f0_10 sf
( )S
909 0 :M
FrameMacDict begin
0 0 0 1 0 0 0 FmK
0 FmP
352.96 252.466 M (/2 .)S
58 277.133 M (Formulas like these are used widely to solve practically all ordinary differential equations.  Every updating formula )S
58 289.133 M (is intended to be iterated with a sequence of  stepsizes   )S
end
910 0 :M
f4_10 sf
( )S
912 0 :M
FrameMacDict begin
0 0 0 1 0 0 0 FmK
0 FmP
281.521 289.133 M (q)S
end
912 0 :M
f0_10 sf
( )S
914 0 :M
FrameMacDict begin
0 0 0 1 0 0 0 FmK
0 FmP
286.73 289.133 M (  that add up to the distance to be covered;  for instance,  )S
58 301.133 M (Q\(...\)  may be iterated  N  times with constant stepsize  )S
end
915 0 :M
f4_10 sf
( )S
917 0 :M
FrameMacDict begin
0 0 0 1 0 0 0 FmK
0 FmP
280.139 301.133 M (q)S
end
917 0 :M
f0_10 sf
( )S
919 0 :M
FrameMacDict begin
0 0 0 1 0 0 0 FmK
0 FmP
285.349 301.133 M ( := 10/N  to produce  Y\(n\341)S
end
920 0 :M
f4_10 sf
( )S
922 0 :M
FrameMacDict begin
0 0 0 1 0 0 0 FmK
0 FmP
389.294 301.133 M (q)S
end
922 0 :M
f0_10 sf
( )S
924 0 :M
FrameMacDict begin
0 0 0 1 0 0 0 FmK
0 FmP
394.504 301.133 M (\) )S
end
925 0 :M
f4_10 sf
( )S
927 0 :M
FrameMacDict begin
0 0 0 1 0 0 0 FmK
0 FmP
400.332 301.133 M (\273)S
end
927 0 :M
f0_10 sf
( )S
929 0 :M
FrameMacDict begin
0 0 0 1 0 0 0 FmK
0 FmP
405.82 301.133 M ( y\(n\341)S
end
930 0 :M
f4_10 sf
( )S
932 0 :M
FrameMacDict begin
0 0 0 1 0 0 0 FmK
0 FmP
424.147 301.133 M (q)S
end
932 0 :M
f0_10 sf
( )S
934 0 :M
FrameMacDict begin
0 0 0 1 0 0 0 FmK
0 FmP
429.357 301.133 M (\)  thus:)S
202 321.133 M (Y\(0\) := y\(0\) ;)S
202 333.133 M (for  n = 1 to N  do  Y\(n\341)S
end
935 0 :M
f4_10 sf
( )S
937 0 :M
FrameMacDict begin
0 0 0 1 0 0 0 FmK
0 FmP
297.339 333.133 M (q)S
end
937 0 :M
f0_10 sf
( )S
939 0 :M
FrameMacDict begin
0 0 0 1 0 0 0 FmK
0 FmP
302.549 333.133 M (\) :=  Q\( )S
end
940 0 :M
f4_10 sf
( )S
942 0 :M
FrameMacDict begin
0 0 0 1 0 0 0 FmK
0 FmP
334.842 333.133 M (q)S
end
942 0 :M
f0_10 sf
( )S
944 0 :M
FrameMacDict begin
0 0 0 1 0 0 0 FmK
0 FmP
340.052 333.133 M (, \(n-1\)\341)S
end
945 0 :M
f4_10 sf
( )S
947 0 :M
FrameMacDict begin
0 0 0 1 0 0 0 FmK
0 FmP
367.535 333.133 M (q)S
end
947 0 :M
f0_10 sf
( )S
949 0 :M
FrameMacDict begin
0 0 0 1 0 0 0 FmK
0 FmP
372.745 333.133 M (,  Y\(\(n-1\)\341)S
end
950 0 :M
f4_10 sf
( )S
952 0 :M
FrameMacDict begin
0 0 0 1 0 0 0 FmK
0 FmP
413.274 333.133 M (q)S
end
952 0 :M
f0_10 sf
( )S
954 0 :M
FrameMacDict begin
0 0 0 1 0 0 0 FmK
0 FmP
418.484 333.133 M (\) \) .)S
58 353.133 M (Here the number  N  of  )S
end
955 0 :M
f2_10 sf
( )S
957 0 :M
FrameMacDict begin
0 0 0 1 0 0 0 FmK
0 FmP
155.732 353.133 M (timesteps)S
end
957 0 :M
f0_10 sf
( )S
959 0 :M
FrameMacDict begin
0 0 0 1 0 0 0 FmK
0 FmP
192.941 353.133 M (   is chosen with a view to the desired accuracy since the error  Y\(10\) - y\(10\)  )S
58 365.132 M (normally approaches  0  as  N  increases to  Infinity.  Were  Euler\'s  formula used,  the error in its final estimate  )S
58 380.332 M (Y\(10\)  would normally decline as fast as  1/N ;  were  Heun\'s,  ...  1/N)S
end
960 0 :M
f0_9 sf
( )S
962 0 :M
FrameMacDict begin
0 0 0 1 0 0 0 FmK
0 FmP
FmG 337.478 376.332 M 0.978 0.978 scale (2)S FmR
end
962 0 :M
f0_10 sf
( )S
964 0 :M
FrameMacDict begin
0 0 0 1 0 0 0 FmK
0 FmP
341.868 380.332 M ( .  But the  Ricatti  differential equation is not )S
58 392.332 M (normal;  no matter how big the number  N  of steps,  those formulas\325 estimates  Y\(10\)  turn out to be huge positive )S
58 404.332 M (numbers or overflows instead of  -7.53\341\341\341 .  Conventional updating formulas do not work here.)S
58 428.332 M (The simplest unconventional updating formula  Q  available turns out to be this rational formula:)S
130 446.621 M (     Q\()S
end
964 0 :M
f4_10 sf
( )S
966 0 :M
FrameMacDict begin
0 0 0 1 0 0 0 FmK
0 FmP
153.047 446.621 M (q)S
end
967 0 :M
f0_10 sf
( )S
969 0 :M
FrameMacDict begin
0 0 0 1 0 0 0 FmK
0 FmP
158.257 446.621 M (, )S
end
969 0 :M
f0_12 sf
( )S
972 0 :M
FrameMacDict begin
0 0 0 1 0 0 0 FmK
0 FmP
163.257 446.621 M (t)S
end
972 0 :M
f0_10 sf
( )S
974 0 :M
FrameMacDict begin
0 0 0 1 0 0 0 FmK
0 FmP
166.591 446.621 M (, Y\))S
19.862 N (:=   Y + \()S
end
975 0 :M
f0_12 sf
( )S
978 0 :M
FrameMacDict begin
0 0 0 1 0 0 0 FmK
0 FmP
239.104 446.621 M (t)S
end
978 0 :M
f0_10 sf
( )S
980 0 :M
FrameMacDict begin
0 0 0 1 0 0 0 FmK
0 FmP
242.438 446.621 M ( + )S
end
980 0 :M
f4_10 sf
( )S
982 0 :M
FrameMacDict begin
0 0 0 1 0 0 0 FmK
0 FmP
260.938 446.621 M (q)S
end
983 0 :M
f0_10 sf
( )S
985 0 :M
FrameMacDict begin
0 0 0 1 0 0 0 FmK
0 FmP
266.148 446.621 M (  +  Y)S
end
985 0 :M
f0_9 sf
( )S
987 0 :M
FrameMacDict begin
0 0 0 1 0 0 0 FmK
0 FmP
FmG 289.006 442.621 M 0.978 0.978 scale (2)S FmR
end
988 0 :M
f0_10 sf
( )S
990 0 :M
FrameMacDict begin
0 0 0 1 0 0 0 FmK
0 FmP
293.397 446.621 M (\)\341)S
end
990 0 :M
f4_10 sf
( )S
992 0 :M
FrameMacDict begin
0 0 0 1 0 0 0 FmK
0 FmP
299.224 446.621 M (q)S
end
993 0 :M
f0_10 sf
( )S
995 0 :M
FrameMacDict begin
0 0 0 1 0 0 0 FmK
0 FmP
304.434 446.621 M (/\( 1 - )S
end
995 0 :M
f4_10 sf
( )S
997 0 :M
FrameMacDict begin
0 0 0 1 0 0 0 FmK
0 FmP
326.368 446.621 M (q)S
end
998 0 :M
f0_10 sf
( )S
1000 0 :M
FrameMacDict begin
0 0 0 1 0 0 0 FmK
0 FmP
331.578 446.621 M (\341Y \)             if     |)S
end
1000 0 :M
f4_10 sf
( )S
1002 0 :M
FrameMacDict begin
0 0 0 1 0 0 0 FmK
0 FmP
400.23 446.621 M (q)S
end
1003 0 :M
f0_10 sf
( )S
1005 0 :M
FrameMacDict begin
0 0 0 1 0 0 0 FmK
0 FmP
405.44 446.621 M (\341Y| <  )S
7.86 N (   ,)S
202 472.358 M (:=   \( 1/)S
end
1005 0 :M
f4_10 sf
( )S
1007 0 :M
FrameMacDict begin
0 0 0 1 0 0 0 FmK
0 FmP
231.524 472.358 M (q)S
end
1008 0 :M
f0_10 sf
( )S
1010 0 :M
FrameMacDict begin
0 0 0 1 0 0 0 FmK
0 FmP
236.734 472.358 M ( + \()S
end
1010 0 :M
f0_12 sf
( )S
1013 0 :M
FrameMacDict begin
0 0 0 1 0 0 0 FmK
0 FmP
250.701 472.358 M (t)S
end
1013 0 :M
f0_10 sf
( )S
1015 0 :M
FrameMacDict begin
0 0 0 1 0 0 0 FmK
0 FmP
254.035 472.358 M ( + )S
end
1016 0 :M
f4_10 sf
( )S
1018 0 :M
FrameMacDict begin
0 0 0 1 0 0 0 FmK
0 FmP
272.534 472.358 M (q)S
end
1018 0 :M
f0_10 sf
( )S
1020 0 :M
FrameMacDict begin
0 0 0 1 0 0 0 FmK
0 FmP
277.744 472.358 M (\)\341)S
end
1021 0 :M
f4_10 sf
( )S
1023 0 :M
FrameMacDict begin
0 0 0 1 0 0 0 FmK
0 FmP
283.572 472.358 M (q)S
end
1023 0 :M
f0_10 sf
( )S
1025 0 :M
FrameMacDict begin
0 0 0 1 0 0 0 FmK
0 FmP
288.782 472.358 M ( \)/\( 1 - )S
end
1026 0 :M
f4_10 sf
( )S
1028 0 :M
FrameMacDict begin
0 0 0 1 0 0 0 FmK
0 FmP
316.543 472.358 M (q)S
end
1028 0 :M
f0_10 sf
( )S
1030 0 :M
FrameMacDict begin
0 0 0 1 0 0 0 FmK
0 FmP
321.753 472.358 M (\341Y \)  - 1/)S
end
1031 0 :M
f4_10 sf
( )S
1033 0 :M
FrameMacDict begin
0 0 0 1 0 0 0 FmK
0 FmP
355.906 472.358 M (q)S
end
1033 0 :M
f0_10 sf
( )S
1035 0 :M
FrameMacDict begin
0 0 0 1 0 0 0 FmK
0 FmP
361.116 472.358 M (        otherwise.)S
58 491.092 M (The two algebraically equivalent forms are distinguished to curb rounding errors.  Like  Heun\'s,  this  Q  is a second-)S
58 503.092 M (order formula.  \( It can be compounded into a formula of arbitrarily high order by means that lie beyond the scope )S
58 515.092 M (of these notes.\)  Iterating it  N  times with stepsize  )S
end
1036 0 :M
f4_10 sf
( )S
1038 0 :M
FrameMacDict begin
0 0 0 1 0 0 0 FmK
0 FmP
264.038 515.092 M (q)S
end
1038 0 :M
f0_10 sf
( )S
1040 0 :M
FrameMacDict begin
0 0 0 1 0 0 0 FmK
0 FmP
269.248 515.092 M ( := 10/N  yields a final estimate  Y\(10\)  in error by roughly  )S
58 530.292 M (\(105/N\))S
end
1041 0 :M
f0_9 sf
( )S
1043 0 :M
FrameMacDict begin
0 0 0 1 0 0 0 FmK
0 FmP
FmG 89.653 526.292 M 0.978 0.978 scale (2)S FmR
end
1043 0 :M
f0_10 sf
( )S
1045 0 :M
FrameMacDict begin
0 0 0 1 0 0 0 FmK
0 FmP
94.043 530.292 M (  even if  Division-by-Zero  insinuates an  Infinity  among the iterates  Y\(n\341)S
end
1045 0 :M
f4_10 sf
( )S
1047 0 :M
FrameMacDict begin
0 0 0 1 0 0 0 FmK
0 FmP
394.766 530.292 M (q)S
end
1048 0 :M
f0_10 sf
( )S
1050 0 :M
FrameMacDict begin
0 0 0 1 0 0 0 FmK
0 FmP
399.976 530.292 M (\) .  Disallowing  Infinity  and  )S
58 543.625 M (Division-by-Zero  would at least somewhat complicate the estimation of  y\(10\)  because  y\()S
end
1050 0 :M
f0_12 sf
( )S
1053 0 :M
FrameMacDict begin
0 0 0 1 0 0 0 FmK
0 FmP
424.248 543.625 M (t)S
end
1053 0 :M
f0_10 sf
( )S
1055 0 :M
FrameMacDict begin
0 0 0 1 0 0 0 FmK
0 FmP
427.582 543.625 M (\)  has to pass through  )S
58 557.625 M (Infinity  seven times as  )S
end
1056 0 :M
f0_12 sf
( )S
1059 0 :M
FrameMacDict begin
0 0 0 1 0 0 0 FmK
0 FmP
155.747 557.625 M (t)S
end
1059 0 :M
f0_10 sf
( )S
1061 0 :M
FrameMacDict begin
0 0 0 1 0 0 0 FmK
0 FmP
159.081 557.625 M (  increases from  0  to  10 .    \( See the graph on the next page.\))S
58 582.292 M (What becomes complicated is not the program so much as the process of developing and verifying a program that )S
58 594.292 M (can dispense with  Infinity.  First,  find a very tiny number  )S
end
1061 0 :M
f4_10 sf
( )S
1063 0 :M
FrameMacDict begin
0 0 0 1 0 0 0 FmK
0 FmP
296.821 594.292 M (e)S
end
1064 0 :M
f0_10 sf
( )S
1066 0 :M
FrameMacDict begin
0 0 0 1 0 0 0 FmK
0 FmP
301.21 594.292 M (   barely small enough that   1 + 10 )S
end
1066 0 :M
f4_10 sf
( )S
1068 0 :M
FrameMacDict begin
0 0 0 1 0 0 0 FmK
0 FmP
442.929 594.292 M (\326)S
end
1069 0 :M
( )S
1071 0 :M
FrameMacDict begin
0 0 0 1 0 0 0 FmK
0 FmP
448.417 594.292 M (e)S
end
1071 0 :M
f0_10 sf
( )S
1073 0 :M
FrameMacDict begin
0 0 0 1 0 0 0 FmK
0 FmP
452.807 594.292 M (   rounds off to  )S
58 606.292 M (1 )S
(.  Next,  modify the foregoing rational formula for  Q   by replacing the divisor   \( 1 - )S
end
1074 0 :M
f4_10 sf
( )S
1076 0 :M
FrameMacDict begin
0 0 0 1 0 0 0 FmK
0 FmP
407.319 606.292 M (q)S
end
1076 0 :M
f0_10 sf
( )S
1078 0 :M
FrameMacDict begin
0 0 0 1 0 0 0 FmK
0 FmP
412.529 606.292 M (\341Y \)   in the  \322 )S
(otherwise )S
(\323  )S
58 618.292 M (case by  \( \( 1 - )S
end
1079 0 :M
f4_10 sf
( )S
1081 0 :M
FrameMacDict begin
0 0 0 1 0 0 0 FmK
0 FmP
117.688 618.292 M (q)S
end
1081 0 :M
f0_10 sf
( )S
1083 0 :M
FrameMacDict begin
0 0 0 1 0 0 0 FmK
0 FmP
122.897 618.292 M (\341Y \)  +  )S
end
1084 0 :M
f4_10 sf
( )S
1086 0 :M
FrameMacDict begin
0 0 0 1 0 0 0 FmK
0 FmP
154.084 618.292 M (e)S
end
1086 0 :M
f0_10 sf
( )S
1088 0 :M
FrameMacDict begin
0 0 0 1 0 0 0 FmK
0 FmP
158.474 618.292 M ( \)  .  Do not omit any of these parentheses;  they prevent divisions by zero.  Then perform )S
58 630.292 M (an error-analysis to confirm that iterating this formula produces the same values  Y\(n\341)S
end
1089 0 :M
f4_10 sf
( )S
1091 0 :M
FrameMacDict begin
0 0 0 1 0 0 0 FmK
0 FmP
401.184 630.292 M (q)S
end
1091 0 :M
f0_10 sf
( )S
1093 0 :M
FrameMacDict begin
0 0 0 1 0 0 0 FmK
0 FmP
406.394 630.292 M (\)  as would be produced )S
58 642.292 M (without  )S
end
1094 0 :M
f4_10 sf
( )S
1096 0 :M
FrameMacDict begin
0 0 0 1 0 0 0 FmK
0 FmP
93.554 642.292 M (e)S
end
1096 0 :M
f0_10 sf
( )S
1098 0 :M
FrameMacDict begin
0 0 0 1 0 0 0 FmK
0 FmP
97.944 642.292 M (  except for replacing infinite values  Y  by huge finite values.)S
58 666.292 M (Survival without  Infinity   is always possible since  \322 )S
(Infinity )S
(\323  is just a short word for a lengthy explanation.  The )S
58 678.292 M (price paid for survival without  Infinity  is lengthy cogitation to find a not-too-lengthy substitute,  if it exists.)S
end
253 434 8 24 rC
1099 0 :M
f0_9 sf
( )S
1101 0 :M
FrameMacDict begin
253.078 434.38 7.86 23.023 FmKp
0 0 0 1 0 0 0 FmK
0 FmP
254.258 442.13 M (1)S
254.258 453.153 M (2)S
254.258 447.126 M (-)S
-1.497 N (-)S
-2.987 N (-)S
end
gR
gS 430 433 9 24 rC
1101 0 :M
f0_9 sf
( )S
1103 0 :M
FrameMacDict begin
430.298 433.666 7.86 23.023 FmKp
0 0 0 1 0 0 0 FmK
0 FmP
431.478 441.416 M (1)S
431.478 452.438 M (2)S
431.478 446.412 M (-)S
-1.497 N (-)S
-2.987 N (-)S
end
gR
gS 264 459 9 24 rC
1103 0 :M
f0_9 sf
( )S
1105 0 :M
FrameMacDict begin
264.675 459.403 7.86 23.023 FmKp
0 0 0 1 0 0 0 FmK
0 FmP
265.855 467.153 M (1)S
265.855 478.175 M (2)S
265.855 472.149 M (-)S
-1.497 N (-)S
-2.987 N (-)S
end
gR
gS 0 0 584 768 rC
1106 0 :M
FrameMacDict begin
0 0 0 1 0 0 0 FmK
0 FmP
[/CropBox[-14 773 FmDC 598 -19 FmDC]/PAGE FmPD
end
endp
%%Page: 12 12
%%BeginPageSetup
initializepage
(W. Kahan; page: 12 of 30)setjob
%%EndPageSetup
gS 0 0 584 768 rC
1 G
-14 -19 612 792 rF
0 G
1106 0 :M
FrameMacDict begin
0 0 0 1 0 0 0 FmK
0 FmP
0 FmSP
7 FmP
58 17 468 10 FmqF
end
1106 0 :M
f0_10 sf
( )S
1108 0 :M
FrameMacDict begin
0 0 0 1 0 0 0 FmK
0 FmP
58 23.82 M (Work in Progress:                          Lecture Notes on the Status of  IEEE 754                            )S
(August 17, 1995)S
7 FmP
58 729.678 468 10 FmqF
0 FmP
494.064 736.498 M (Page )S
(12)S
7 FmP
58 53 468 648 FmqF
0 FmP
58 59.667 M ( )S
441.591 402.667 M (End of first example.)S
58 450.667 M (The second example that illustrates the utility of  Infinity  is part of the fastest program known for computing a few )S
58 462.667 M (eigenvalues of a real symmetric matrix.  This part can be programmed to run well on every commercially )S
58 474.667 M (significant computer that conforms to  IEEE 754,  but not in any single higher-level language that all such )S
58 486.667 M (computers recognize.)S
312.08 557.049 M ( .)S
58 633.248 M (Every real symmetric matrix reduces quickly to a tridiagonal form like  T  with the  same eigenvalues)S
end
1109 0 :M
f4_10 sf
( )S
1111 0 :M
FrameMacDict begin
0 0 0 1 0 0 0 FmK
0 FmP
58 645.248 M (t)S
end
1111 0 :M
f0_10 sf
( )S
1113 0 :M
FrameMacDict begin
0 0 0 1 0 0 0 FmK
0 FmP
62.39 645.248 M ([1] < )S
end
1114 0 :M
f4_10 sf
( )S
1116 0 :M
FrameMacDict begin
0 0 0 1 0 0 0 FmK
0 FmP
84.685 645.248 M (t)S
end
1116 0 :M
f0_10 sf
( )S
1118 0 :M
FrameMacDict begin
0 0 0 1 0 0 0 FmK
0 FmP
89.074 645.248 M ([2] < ... < )S
end
1119 0 :M
f4_10 sf
( )S
1121 0 :M
FrameMacDict begin
0 0 0 1 0 0 0 FmK
0 FmP
129.509 645.248 M (t)S
end
1121 0 :M
f0_10 sf
( )S
1123 0 :M
FrameMacDict begin
0 0 0 1 0 0 0 FmK
0 FmP
133.898 645.248 M ([)S
end
1124 0 :M
f2_10 sf
( )S
1126 0 :M
FrameMacDict begin
0 0 0 1 0 0 0 FmK
0 FmP
137.226 645.248 M (n)S
end
1126 0 :M
f0_10 sf
( )S
1128 0 :M
FrameMacDict begin
0 0 0 1 0 0 0 FmK
0 FmP
142.226 645.248 M (] .  The task is to find some of them specified either by an interval in which they lie or by their )S
58 657.248 M (indices.  Typically a few dozen eigenvalues may be sought when the dimension  )S
end
1129 0 :M
f2_10 sf
( )S
1131 0 :M
FrameMacDict begin
0 0 0 1 0 0 0 FmK
0 FmP
381.503 657.248 M (n)S
end
1131 0 :M
f0_10 sf
( )S
1133 0 :M
FrameMacDict begin
0 0 0 1 0 0 0 FmK
0 FmP
386.503 657.248 M (  is in the thousands.  For this task )S
58 669.248 M (the fastest and most accurate algorithm known is based upon the properties of two functions   )S
end
1134 0 :M
f2_10 sf
( )S
1136 0 :M
FrameMacDict begin
0 0 0 1 0 0 0 FmK
0 FmP
433.703 669.248 M (f)S
end
1136 0 :M
f0_10 sf
( )S
1138 0 :M
FrameMacDict begin
0 0 0 1 0 0 0 FmK
0 FmP
436.481 669.248 M ( = )S
end
1139 0 :M
f2_10 sf
( )S
1141 0 :M
FrameMacDict begin
0 0 0 1 0 0 0 FmK
0 FmP
447.121 669.248 M (f )S
end
1141 0 :M
f0_10 sf
( )S
1143 0 :M
FrameMacDict begin
0 0 0 1 0 0 0 FmK
0 FmP
452.399 669.248 M (\()S
end
1144 0 :M
f4_10 sf
( )S
1146 0 :M
FrameMacDict begin
0 0 0 1 0 0 0 FmK
0 FmP
455.727 669.248 M (s)S
end
1146 0 :M
f0_10 sf
( )S
1148 0 :M
FrameMacDict begin
0 0 0 1 0 0 0 FmK
0 FmP
461.755 669.248 M (\)  and  )S
58 681.248 M (k )S
(= )S
(k\()S
end
1149 0 :M
f4_10 sf
( )S
1151 0 :M
FrameMacDict begin
0 0 0 1 0 0 0 FmK
0 FmP
81.967 681.248 M (s)S
end
1151 0 :M
f0_10 sf
( )S
1153 0 :M
FrameMacDict begin
0 0 0 1 0 0 0 FmK
0 FmP
87.995 681.248 M (\)   defined for real variable  )S
end
1154 0 :M
f4_10 sf
( )S
1156 0 :M
FrameMacDict begin
0 0 0 1 0 0 0 FmK
0 FmP
200.144 681.248 M (s)S
end
1156 0 :M
f0_10 sf
( )S
1158 0 :M
FrameMacDict begin
0 0 0 1 0 0 0 FmK
0 FmP
206.171 681.248 M (  thus:)S
end
59 62 466 332 rC
1159 0 :M
FrameMacDict begin
59.5 63 465 331 FmKp
0 0 0 1 0 0 0 FmK
0 FmP
FmPI
66 69 453 319 rC
111 229 -1 1 119 228 1 111 228 @a
-1 -1 119 229 1 1 126 227 @b
-1 -1 127 228 1 1 134 226 @b
-1 -1 135 227 1 1 141 225 @b
-1 -1 142 226 1 1 148 223 @b
-1 -1 149 224 1 1 156 220 @b
-1 -1 157 221 1 1 160 218 @b
-1 -1 161 219 1 1 164 215 @b
-1 -1 165 216 1 1 165 213 @b
-1 -1 166 214 1 1 167 211 @b
-1 -1 168 212 1 1 169 208 @b
-1 -1 170 209 1 1 171 205 @b
-1 -1 172 206 1 1 172 202 @b
-1 -1 173 203 1 1 173 199 @b
-1 -1 174 200 1 1 175 191 @b
-1 -1 176 192 1 1 176 185 @b
-1 -1 177 186 1 1 177 178 @b
-1 -1 178 179 1 1 178 166 @b
-1 -1 179 167 1 1 179 149 @b
-1 -1 180 150 1 1 180 100 @b
-1 -1 185 357 1 1 184 100 @b
-1 -1 186 357 1 1 186 315 @b
-1 -1 187 316 1 1 187 295 @b
-1 -1 188 296 1 1 188 282 @b
-1 -1 189 283 1 1 189 274 @b
-1 -1 190 275 1 1 190 267 @b
-1 -1 191 268 1 1 191 262 @b
-1 -1 192 263 1 1 192 258 @b
-1 -1 193 259 1 1 194 252 @b
-1 -1 195 253 1 1 196 248 @b
-1 -1 197 249 1 1 198 245 @b
-1 -1 199 246 1 1 201 240 @b
-1 -1 202 241 1 1 205 236 @b
-1 -1 206 237 1 1 209 233 @b
-1 -1 210 234 1 1 216 229 @b
-1 -1 217 230 1 1 224 223 @b
-1 -1 225 224 1 1 228 220 @b
-1 -1 229 221 1 1 232 217 @b
-1 -1 233 218 1 1 234 214 @b
-1 -1 235 215 1 1 235 211 @b
-1 -1 236 212 1 1 237 207 @b
-1 -1 238 208 1 1 239 202 @b
-1 -1 240 203 1 1 241 196 @b
-1 -1 242 197 1 1 243 186 @b
-1 -1 244 187 1 1 245 169 @b
-1 -1 246 170 1 1 246 133 @b
-1 -1 247 134 1 1 247 100 @b
249 101 -1 1 251 356 1 249 100 @a
-1 -1 253 357 1 1 252 328 @b
-1 -1 253 329 1 1 253 302 @b
-1 -1 254 303 1 1 254 287 @b
-1 -1 255 288 1 1 255 277 @b
-1 -1 256 278 1 1 256 269 @b
-1 -1 257 270 1 1 257 264 @b
-1 -1 258 265 1 1 258 259 @b
-1 -1 259 260 1 1 260 252 @b
-1 -1 261 253 1 1 262 248 @b
-1 -1 263 249 1 1 266 241 @b
-1 -1 267 242 1 1 269 236 @b
-1 -1 270 237 1 1 277 228 @b
-1 -1 278 229 1 1 284 220 @b
-1 -1 285 221 1 1 286 217 @b
-1 -1 287 218 1 1 288 214 @b
-1 -1 289 215 1 1 290 210 @b
-1 -1 291 211 1 1 292 205 @b
-1 -1 293 206 1 1 294 199 @b
-1 -1 295 200 1 1 296 190 @b
-1 -1 297 191 1 1 297 175 @b
-1 -1 298 176 1 1 299 147 @b
-1 -1 300 148 1 1 300 116 @b
-1 -1 301 117 1 1 300 100 @b
-1 -1 303 357 1 1 302 100 @b
-1 -1 306 357 1 1 307 298 @b
-1 -1 308 299 1 1 308 284 @b
-1 -1 309 285 1 1 309 274 @b
-1 -1 310 275 1 1 311 261 @b
-1 -1 312 262 1 1 312 257 @b
-1 -1 313 258 1 1 313 253 @b
-1 -1 314 254 1 1 314 248 @b
-1 -1 315 249 1 1 316 243 @b
-1 -1 317 244 1 1 318 240 @b
-1 -1 319 241 1 1 322 234 @b
-1 -1 323 235 1 1 329 224 @b
-1 -1 330 225 1 1 334 218 @b
-1 -1 335 219 1 1 336 214 @b
-1 -1 337 215 1 1 338 209 @b
-1 -1 339 210 1 1 339 204 @b
-1 -1 340 205 1 1 340 201 @b
-1 -1 341 202 1 1 341 197 @b
-1 -1 342 198 1 1 342 192 @b
-1 -1 343 193 1 1 343 185 @b
-1 -1 344 186 1 1 345 166 @b
-1 -1 346 167 1 1 346 149 @b
-1 -1 347 150 1 1 347 119 @b
-1 -1 348 120 1 1 347 100 @b
-1 -1 350 357 1 1 349 100 @b
-1 -1 353 357 1 1 352 323 @b
-1 -1 353 324 1 1 353 300 @b
-1 -1 354 301 1 1 354 285 @b
-1 -1 355 286 1 1 355 275 @b
-1 -1 356 276 1 1 356 268 @b
-1 -1 357 269 1 1 357 262 @b
-1 -1 358 263 1 1 358 257 @b
-1 -1 359 258 1 1 360 250 @b
-1 -1 361 251 1 1 362 245 @b
-1 -1 363 246 1 1 364 240 @b
-1 -1 365 241 1 1 368 233 @b
-1 -1 369 234 1 1 375 222 @b
-1 -1 376 223 1 1 377 218 @b
-1 -1 378 219 1 1 379 214 @b
-1 -1 380 215 1 1 381 209 @b
-1 -1 382 210 1 1 382 206 @b
-1 -1 383 207 1 1 383 202 @b
-1 -1 384 203 1 1 384 198 @b
-1 -1 385 199 1 1 384 194 @b
-1 -1 385 195 1 1 386 180 @b
-1 -1 387 181 1 1 387 170 @b
-1 -1 388 171 1 1 388 154 @b
-1 -1 389 155 1 1 389 100 @b
-1 -1 395 357 1 1 394 100 @b
-1 -1 395 357 1 1 395 326 @b
-1 -1 396 327 1 1 396 300 @b
-1 -1 397 301 1 1 397 285 @b
-1 -1 398 286 1 1 398 274 @b
-1 -1 399 275 1 1 399 267 @b
-1 -1 400 268 1 1 400 261 @b
-1 -1 401 262 1 1 402 252 @b
-1 -1 403 253 1 1 403 246 @b
-1 -1 404 247 1 1 405 241 @b
-1 -1 406 242 1 1 409 233 @b
-1 -1 410 234 1 1 413 226 @b
-1 -1 414 227 1 1 417 219 @b
-1 -1 418 220 1 1 419 214 @b
-1 -1 420 215 1 1 421 209 @b
-1 -1 422 210 1 1 422 202 @b
-1 -1 423 203 1 1 424 193 @b
-1 -1 425 194 1 1 426 180 @b
-1 -1 427 181 1 1 428 155 @b
-1 -1 429 156 1 1 429 128 @b
-1 -1 430 129 1 1 429 100 @b
-1 -1 431 357 1 1 430 100 @b
-1 -1 435 357 1 1 435 317 @b
-1 -1 436 318 1 1 436 294 @b
-1 -1 437 295 1 1 437 281 @b
-1 -1 438 282 1 1 437 272 @b
-1 -1 438 273 1 1 439 259 @b
-1 -1 440 260 1 1 440 255 @b
-1 -1 441 256 1 1 441 251 @b
-1 -1 442 252 1 1 443 245 @b
-1 -1 444 246 1 1 447 235 @b
-1 -1 448 236 1 1 450 227 @b
-1 -1 451 228 1 1 454 220 @b
-1 -1 455 221 1 1 456 215 @b
-1 -1 457 216 1 1 458 210 @b
-1 -1 459 211 1 1 459 206 @b
-1 -1 460 207 1 1 460 202 @b
-1 -1 461 203 1 1 461 197 @b
-1 -1 462 198 1 1 462 190 @b
-1 -1 463 191 1 1 463 182 @b
-1 -1 464 183 1 1 464 171 @b
-1 -1 465 172 1 1 465 154 @b
-1 -1 466 155 1 1 466 124 @b
-1 -1 467 125 1 1 466 100 @b
468 101 -1 1 470 356 1 468 100 @a
-1 -1 472 357 1 1 471 332 @b
-1 -1 472 333 1 1 473 288 @b
-1 -1 474 231 1 1 473 226 @b
-1 -1 460 230 1 1 459 227 @b
-1 -1 445 230 1 1 444 227 @b
-1 -1 431 230 1 1 430 227 @b
-1 -1 416 230 1 1 415 227 @b
-1 -1 402 231 1 1 401 226 @b
-1 -1 387 230 1 1 386 227 @b
-1 -1 373 230 1 1 372 227 @b
-1 -1 358 230 1 1 357 227 @b
-1 -1 344 230 1 1 343 227 @b
-1 -1 329 231 1 1 328 226 @b
-1 -1 315 230 1 1 314 227 @b
-1 -1 300 230 1 1 299 227 @b
-1 -1 286 230 1 1 285 227 @b
-1 -1 271 230 1 1 270 227 @b
-1 -1 257 231 1 1 256 226 @b
-1 -1 242 230 1 1 241 227 @b
-1 -1 228 230 1 1 227 227 @b
-1 -1 213 230 1 1 212 227 @b
-1 -1 199 230 1 1 198 227 @b
-1 -1 184 231 1 1 183 226 @b
-1 -1 170 230 1 1 169 227 @b
-1 -1 155 230 1 1 154 227 @b
-1 -1 141 230 1 1 140 227 @b
-1 -1 126 230 1 1 125 227 @b
111 230 -2 2 475 228 2 111 228 @a
109 101 -1 1 113 100 1 109 100 @a
108 109 -1 1 115 108 1 108 108 @a
109 117 -1 1 113 116 1 109 116 @a
109 125 -1 1 113 124 1 109 124 @a
109 133 -1 1 113 132 1 109 132 @a
109 141 -1 1 113 140 1 109 140 @a
108 149 -1 1 115 148 1 108 148 @a
109 157 -1 1 113 156 1 109 156 @a
109 165 -1 1 113 164 1 109 164 @a
109 173 -1 1 113 172 1 109 172 @a
109 181 -1 1 113 180 1 109 180 @a
108 189 -1 1 115 188 1 108 188 @a
109 197 -1 1 113 196 1 109 196 @a
109 205 -1 1 113 204 1 109 204 @a
109 213 -1 1 113 212 1 109 212 @a
109 221 -1 1 113 220 1 109 220 @a
108 229 -1 1 115 228 1 108 228 @a
109 237 -1 1 113 236 1 109 236 @a
109 245 -1 1 113 244 1 109 244 @a
109 253 -1 1 113 252 1 109 252 @a
109 261 -1 1 113 260 1 109 260 @a
108 269 -1 1 115 268 1 108 268 @a
109 277 -1 1 113 276 1 109 276 @a
109 285 -1 1 113 284 1 109 284 @a
109 293 -1 1 113 292 1 109 292 @a
109 301 -1 1 113 300 1 109 300 @a
108 309 -1 1 115 308 1 108 308 @a
109 317 -1 1 113 316 1 109 316 @a
109 325 -1 1 113 324 1 109 324 @a
109 333 -1 1 113 332 1 109 332 @a
109 341 -1 1 113 340 1 109 340 @a
108 349 -1 1 115 348 1 108 348 @a
109 357 -1 1 113 356 1 109 356 @a
-2 -2 113 358 2 2 111 100 @b
289 249 :M
f3_12 sf
(t)S
466 242 :M
-.397(10)A
398 242 :M
(8)S
325 242 :M
(6)S
253 242 :M
(4)S
180 242 :M
(2)S
94 114 :M
-.397(15)A
94 154 :M
-.397(10)A
101 194 :M
(5)S
101 240 :M
(0)S
94 274 :M
-.397(-5)A
87 314 :M
-.297(-10)A
87 354 :M
-.297(-15)A
68 85 :M
-.201(  Maple V r3  plots the solution  y\(t\)  of a  Ricatti  equation )A
2 lw
516 85 :M
false
EndFrame4Picture
end
gR
gS 58 503 255 110 rC
1159 0 :M
f0_12 sf
( )S
2 lw
1162 0 :M
FrameMacDict begin
58 504 254.08 108.582 FmKp
0 0 0 1 0 0 0 FmK
0 FmP
59 560.383 M (Let    T )S
end
1162 0 :M
f2_12 sf
( )S
1165 0 :M
FrameMacDict begin
58 504 254.08 108.582 FmKp
0 0 0 1 0 0 0 FmK
0 FmP
121.419 521.196 M (a)S
end
1165 0 :M
f0_12 sf
( )S
1168 0 :M
FrameMacDict begin
58 504 254.08 108.582 FmKp
0 0 0 1 0 0 0 FmK
0 FmP
135.274 521.196 M (1)S
end
1168 0 :M
f4_12 sf
( )S
1171 0 :M
FrameMacDict begin
58 504 254.08 108.582 FmKp
0 0 0 1 0 0 0 FmK
0 FmP
130.129 521.196 M ([)S
7.703 N (])S
end
1171 0 :M
f2_12 sf
( )S
1174 0 :M
FrameMacDict begin
58 504 254.08 108.582 FmKp
0 0 0 1 0 0 0 FmK
0 FmP
152.619 521.196 M (b)S
end
1174 0 :M
f0_12 sf
( )S
1177 0 :M
FrameMacDict begin
58 504 254.08 108.582 FmKp
0 0 0 1 0 0 0 FmK
0 FmP
166.474 521.196 M (2)S
end
1177 0 :M
f4_12 sf
( )S
1180 0 :M
FrameMacDict begin
58 504 254.08 108.582 FmKp
0 0 0 1 0 0 0 FmK
0 FmP
161.329 521.196 M ([)S
7.703 N (])S
end
1180 0 :M
f0_12 sf
( )S
1183 0 :M
FrameMacDict begin
58 504 254.08 108.582 FmKp
0 0 0 1 0 0 0 FmK
0 FmP
195.52 521.196 M ( )S
28.2 N ( )S
28.7 N ( )S
29.2 N ( )S
end
1183 0 :M
f2_12 sf
( )S
1186 0 :M
FrameMacDict begin
58 504 254.08 108.582 FmKp
0 0 0 1 0 0 0 FmK
0 FmP
121.419 537.993 M (b)S
end
1186 0 :M
f0_12 sf
( )S
1189 0 :M
FrameMacDict begin
58 504 254.08 108.582 FmKp
0 0 0 1 0 0 0 FmK
0 FmP
135.274 537.993 M (2)S
end
1189 0 :M
f4_12 sf
( )S
1192 0 :M
FrameMacDict begin
58 504 254.08 108.582 FmKp
0 0 0 1 0 0 0 FmK
0 FmP
130.129 537.993 M ([)S
7.703 N (])S
end
1192 0 :M
f2_12 sf
( )S
1195 0 :M
FrameMacDict begin
58 504 254.08 108.582 FmKp
0 0 0 1 0 0 0 FmK
0 FmP
152.619 537.993 M (a)S
end
1195 0 :M
f0_12 sf
( )S
1198 0 :M
FrameMacDict begin
58 504 254.08 108.582 FmKp
0 0 0 1 0 0 0 FmK
0 FmP
166.474 537.993 M (2)S
end
1198 0 :M
f4_12 sf
( )S
1201 0 :M
FrameMacDict begin
58 504 254.08 108.582 FmKp
0 0 0 1 0 0 0 FmK
0 FmP
161.329 537.993 M ([)S
7.703 N (])S
end
1201 0 :M
f2_12 sf
( )S
1204 0 :M
FrameMacDict begin
58 504 254.08 108.582 FmKp
0 0 0 1 0 0 0 FmK
0 FmP
183.819 537.993 M (b)S
end
1204 0 :M
f0_12 sf
( )S
1207 0 :M
FrameMacDict begin
58 504 254.08 108.582 FmKp
0 0 0 1 0 0 0 FmK
0 FmP
197.674 537.993 M (3)S
end
1207 0 :M
f4_12 sf
( )S
1210 0 :M
FrameMacDict begin
58 504 254.08 108.582 FmKp
0 0 0 1 0 0 0 FmK
0 FmP
192.529 537.993 M ([)S
7.703 N (])S
end
1210 0 :M
f0_12 sf
( )S
1213 0 :M
FrameMacDict begin
58 504 254.08 108.582 FmKp
0 0 0 1 0 0 0 FmK
0 FmP
226.721 537.993 M ( )S
28.7 N ( )S
29.2 N ( )S
133.12 554.791 M ( )S
end
1213 0 :M
f2_12 sf
( )S
1216 0 :M
FrameMacDict begin
58 504 254.08 108.582 FmKp
0 0 0 1 0 0 0 FmK
0 FmP
152.619 554.791 M (b)S
end
1216 0 :M
f0_12 sf
( )S
1219 0 :M
FrameMacDict begin
58 504 254.08 108.582 FmKp
0 0 0 1 0 0 0 FmK
0 FmP
166.474 554.791 M (3)S
end
1219 0 :M
f4_12 sf
( )S
1222 0 :M
FrameMacDict begin
58 504 254.08 108.582 FmKp
0 0 0 1 0 0 0 FmK
0 FmP
161.329 554.791 M ([)S
7.703 N (])S
end
1222 0 :M
f2_12 sf
( )S
1225 0 :M
FrameMacDict begin
58 504 254.08 108.582 FmKp
0 0 0 1 0 0 0 FmK
0 FmP
183.819 554.791 M (a)S
end
1225 0 :M
f0_12 sf
( )S
1228 0 :M
FrameMacDict begin
58 504 254.08 108.582 FmKp
0 0 0 1 0 0 0 FmK
0 FmP
197.674 554.791 M (3)S
end
1228 0 :M
f4_12 sf
( )S
1231 0 :M
FrameMacDict begin
58 504 254.08 108.582 FmKp
0 0 0 1 0 0 0 FmK
0 FmP
192.529 554.791 M ([)S
7.703 N (])S
end
1231 0 :M
f2_12 sf
( )S
1234 0 :M
FrameMacDict begin
58 504 254.08 108.582 FmKp
0 0 0 1 0 0 0 FmK
0 FmP
215.019 554.791 M (b)S
end
1234 0 :M
f0_12 sf
( )S
1237 0 :M
FrameMacDict begin
58 504 254.08 108.582 FmKp
0 0 0 1 0 0 0 FmK
0 FmP
228.874 554.791 M (4)S
end
1237 0 :M
f4_12 sf
( )S
1240 0 :M
FrameMacDict begin
58 504 254.08 108.582 FmKp
0 0 0 1 0 0 0 FmK
0 FmP
223.73 554.791 M ([)S
7.703 N (])S
end
1240 0 :M
f0_12 sf
( )S
1243 0 :M
FrameMacDict begin
58 504 254.08 108.582 FmKp
0 0 0 1 0 0 0 FmK
0 FmP
258.421 554.791 M ( )S
29.2 N ( )S
133.12 571.588 M ( )S
28.2 N ( )S
end
1243 0 :M
f2_12 sf
( )S
1246 0 :M
FrameMacDict begin
58 504 254.08 108.582 FmKp
0 0 0 1 0 0 0 FmK
0 FmP
183.819 571.588 M (b)S
end
1246 0 :M
f0_12 sf
( )S
1249 0 :M
FrameMacDict begin
58 504 254.08 108.582 FmKp
0 0 0 1 0 0 0 FmK
0 FmP
197.674 571.588 M (4)S
end
1249 0 :M
f4_12 sf
( )S
1252 0 :M
FrameMacDict begin
58 504 254.08 108.582 FmKp
0 0 0 1 0 0 0 FmK
0 FmP
192.529 571.588 M ([)S
7.703 N (])S
end
1252 0 :M
f2_12 sf
( )S
1255 0 :M
FrameMacDict begin
58 504 254.08 108.582 FmKp
0 0 0 1 0 0 0 FmK
0 FmP
215.019 571.588 M (a)S
end
1255 0 :M
f0_12 sf
( )S
1258 0 :M
FrameMacDict begin
58 504 254.08 108.582 FmKp
0 0 0 1 0 0 0 FmK
0 FmP
228.874 571.588 M (4)S
end
1258 0 :M
f4_12 sf
( )S
1261 0 :M
FrameMacDict begin
58 504 254.08 108.582 FmKp
0 0 0 1 0 0 0 FmK
0 FmP
223.73 571.588 M ([)S
7.703 N (])S
14.502 N (\274)S
end
1261 0 :M
f0_12 sf
( )S
1264 0 :M
FrameMacDict begin
58 504 254.08 108.582 FmKp
0 0 0 1 0 0 0 FmK
0 FmP
290.621 571.588 M ( )S
133.12 588.385 M ( )S
28.2 N ( )S
28.2 N ( )S
end
1264 0 :M
f4_12 sf
( )S
1267 0 :M
FrameMacDict begin
58 504 254.08 108.582 FmKp
0 0 0 1 0 0 0 FmK
0 FmP
222.221 588.385 M (\274)S
19.7 N (\274)S
end
1267 0 :M
f2_12 sf
( )S
1270 0 :M
FrameMacDict begin
58 504 254.08 108.582 FmKp
0 0 0 1 0 0 0 FmK
0 FmP
278.419 588.385 M (b)S
6.855 N (n)S
end
1270 0 :M
f4_12 sf
( )S
1273 0 :M
FrameMacDict begin
58 504 254.08 108.582 FmKp
0 0 0 1 0 0 0 FmK
0 FmP
287.13 588.385 M ([)S
8.703 N (])S
end
1273 0 :M
f0_12 sf
( )S
1276 0 :M
FrameMacDict begin
58 504 254.08 108.582 FmKp
0 0 0 1 0 0 0 FmK
0 FmP
133.12 605.183 M ( )S
28.2 N ( )S
28.2 N ( )S
28.2 N ( )S
end
1276 0 :M
f2_12 sf
( )S
1279 0 :M
FrameMacDict begin
58 504 254.08 108.582 FmKp
0 0 0 1 0 0 0 FmK
0 FmP
246.219 605.183 M (b)S
6.855 N (n)S
end
1279 0 :M
f4_12 sf
( )S
1282 0 :M
FrameMacDict begin
58 504 254.08 108.582 FmKp
0 0 0 1 0 0 0 FmK
0 FmP
254.93 605.183 M ([)S
8.703 N (])S
end
1282 0 :M
f2_12 sf
( )S
1285 0 :M
FrameMacDict begin
58 504 254.08 108.582 FmKp
0 0 0 1 0 0 0 FmK
0 FmP
278.419 605.183 M (a)S
6.855 N (n)S
end
1285 0 :M
f4_12 sf
( )S
1288 0 :M
FrameMacDict begin
58 504 254.08 108.582 FmKp
0 0 0 1 0 0 0 FmK
0 FmP
287.13 605.183 M ([)S
8.703 N (])S
end
1288 0 :M
f0_12 sf
( )S
1291 0 :M
FrameMacDict begin
58 504 254.08 108.582 FmKp
0 0 0 1 0 0 0 FmK
0 FmP
103.317 560.383 M (=)S
122.078 608.183 FmB
-3.598 0 FmL
0 -100.784 FmL
2 0.54 FmSo
118.48 507.399 FmB
3.598 0 FmL
2 0.54 FmSo
304.083 608.183 FmB
3.598 0 FmL
0 -100.784 FmL
2 0.54 FmSo
307.681 507.399 FmB
-3.598 0 FmL
2 0.54 FmSo
end
gR
gS 317 506 170 106 rC
1291 0 :M
FrameMacDict begin
317.08 506.549 169.167 104.667 FmKp
0 0 0 1 0 0 0 FmK
7 FmP
319.334 509.812 173.334 100.834 FmqF
end
1291 0 :M
f5_10 sf
.282 .028( )J
1294 0 :M
FrameMacDict begin
317.08 506.549 169.167 104.667 FmKp
0 0 0 1 0 0 0 FmK
0 FmP
319.334 528.478 M 0 0 53(          No   )FmTx
end
1294 0 :M
f6_10 sf
.282 .028( )J
1297 0 :M
FrameMacDict begin
317.08 506.549 169.167 104.667 FmKp
0 0 0 1 0 0 0 FmK
0 FmP
372.334 528.478 M 0 0 10(b )FmTx
end
1297 0 :M
f5_10 sf
.282 .028( )J
1300 0 :M
FrameMacDict begin
317.08 506.549 169.167 104.667 FmKp
0 0 0 1 0 0 0 FmK
0 FmP
382.334 528.478 M 0 0 7([ )FmTx
end
1300 0 :M
f6_10 sf
.282 .028( )J
1303 0 :M
FrameMacDict begin
317.08 506.549 169.167 104.667 FmKp
0 0 0 1 0 0 0 FmK
0 FmP
389.334 528.478 M 0 0 7(j )FmTx
end
1303 0 :M
f5_10 sf
.282 .028( )J
1306 0 :M
FrameMacDict begin
317.08 506.549 169.167 104.667 FmKp
0 0 0 1 0 0 0 FmK
0 FmP
396.334 528.478 M 0 0 27(] = 0 .)FmTx
319.334 552.478 M 0 0 56(          Let   )FmTx
end
1306 0 :M
f6_10 sf
.282 .028( )J
1309 0 :M
FrameMacDict begin
317.08 506.549 169.167 104.667 FmKp
0 0 0 1 0 0 0 FmK
0 FmP
375.334 552.478 M 0 0 10(q )FmTx
end
1309 0 :M
f5_10 sf
.282 .028( )J
1312 0 :M
FrameMacDict begin
317.08 506.549 169.167 104.667 FmKp
0 0 0 1 0 0 0 FmK
0 FmP
385.334 552.478 M 0 0 66([1] :=  0   and)FmTx
319.334 579.678 M 0 0 54(                  )FmTx
end
1312 0 :M
f6_10 sf
.282 .028( )J
1315 0 :M
FrameMacDict begin
317.08 506.549 169.167 104.667 FmKp
0 0 0 1 0 0 0 FmK
0 FmP
373.334 579.678 M 0 0 10(q )FmTx
end
1315 0 :M
f5_10 sf
.282 .028( )J
1318 0 :M
FrameMacDict begin
317.08 506.549 169.167 104.667 FmKp
0 0 0 1 0 0 0 FmK
0 FmP
383.334 579.678 M 0 0 7([ )FmTx
end
1318 0 :M
f6_10 sf
.282 .028( )J
1321 0 :M
FrameMacDict begin
317.08 506.549 169.167 104.667 FmKp
0 0 0 1 0 0 0 FmK
0 FmP
390.334 579.678 M 0 0 7(j )FmTx
end
1321 0 :M
f5_10 sf
.282 .028( )J
1324 0 :M
FrameMacDict begin
317.08 506.549 169.167 104.667 FmKp
0 0 0 1 0 0 0 FmK
0 FmP
397.334 579.678 M 0 0 24(]  :=  )FmTx
end
1324 0 :M
f6_10 sf
.282 .028( )J
1327 0 :M
FrameMacDict begin
317.08 506.549 169.167 104.667 FmKp
0 0 0 1 0 0 0 FmK
0 FmP
421.334 579.678 M 0 0 10(b )FmTx
end
1327 0 :M
f5_10 sf
.282 .028( )J
1330 0 :M
FrameMacDict begin
317.08 506.549 169.167 104.667 FmKp
0 0 0 1 0 0 0 FmK
0 FmP
431.334 579.678 M 0 0 7([ )FmTx
end
1330 0 :M
f6_10 sf
.282 .028( )J
1333 0 :M
FrameMacDict begin
317.08 506.549 169.167 104.667 FmKp
0 0 0 1 0 0 0 FmK
0 FmP
438.334 579.678 M 0 0 7(j )FmTx
end
1333 0 :M
f5_10 sf
.282 .028( )J
1336 0 :M
FrameMacDict begin
317.08 506.549 169.167 104.667 FmKp
0 0 0 1 0 0 0 FmK
0 FmP
445.334 579.678 M 0 0 4(])FmTx
end
1336 0 :M
f5_9 sf
.554 .055( )J
1339 0 :M
FrameMacDict begin
317.08 506.549 169.167 104.667 FmKp
0 0 0 1 0 0 0 FmK
0 FmP
FmG 449.334 575.678 M 0.978 0.978 scale 0 0 5.987(2)FmTx FmR
end
1339 0 :M
f5_10 sf
.282 .028( )J
1342 0 :M
FrameMacDict begin
317.08 506.549 169.167 104.667 FmKp
0 0 0 1 0 0 0 FmK
0 FmP
455.188 579.678 M 0 0 22(  >  0)FmTx
319.334 603.678 M 0 0 111(                      for   1 <  )FmTx
end
1342 0 :M
f6_10 sf
.282 .028( )J
1345 0 :M
FrameMacDict begin
317.08 506.549 169.167 104.667 FmKp
0 0 0 1 0 0 0 FmK
0 FmP
430.334 603.678 M 0 0 4(j)FmTx
end
1345 0 :M
f5_10 sf
.282 .028( )J
1348 0 :M
FrameMacDict begin
317.08 506.549 169.167 104.667 FmKp
0 0 0 1 0 0 0 FmK
0 FmP
434.334 603.678 M 0 0 9(   )FmTx
end
1348 0 :M
f4_10 sf
( )S
1350 0 :M
FrameMacDict begin
317.08 506.549 169.167 104.667 FmKp
0 0 0 1 0 0 0 FmK
0 FmP
443.334 603.678 M (\243 )S
end
1351 0 :M
f5_10 sf
.282 .028( )J
1354 0 :M
FrameMacDict begin
317.08 506.549 169.167 104.667 FmKp
0 0 0 1 0 0 0 FmK
0 FmP
451.322 603.678 M 0 0 3( )FmTx
end
1354 0 :M
f6_10 sf
.282 .028( )J
1357 0 :M
FrameMacDict begin
317.08 506.549 169.167 104.667 FmKp
0 0 0 1 0 0 0 FmK
0 FmP
454.322 603.678 M 0 0 8(n)FmTx
end
1357 0 :M
f5_10 sf
.282 .028( )J
1360 0 :M
FrameMacDict begin
317.08 506.549 169.167 104.667 FmKp
0 0 0 1 0 0 0 FmK
0 FmP
462.322 603.678 M 0 0 6( .)FmTx
end
gR
gS 0 0 584 768 rC
1360 0 :M
FrameMacDict begin
0 0 0 1 0 0 0 FmK
0 FmP
[/CropBox[-14 773 FmDC 598 -19 FmDC]/PAGE FmPD
end
endp
%%Page: 13 13
%%BeginPageSetup
initializepage
(W. Kahan; page: 13 of 30)setjob
%%EndPageSetup
gS 0 0 584 768 rC
1 G
-14 -19 612 792 rF
0 G
1360 0 :M
FrameMacDict begin
0 0 0 1 0 0 0 FmK
0 FmP
0 FmSP
7 FmP
58 17 468 10 FmqF
end
1360 0 :M
f0_10 sf
( )S
1362 0 :M
FrameMacDict begin
0 0 0 1 0 0 0 FmK
0 FmP
58 23.82 M (Work in Progress:                          Lecture Notes on the Status of  IEEE 754                            )S
(August 17, 1995)S
7 FmP
58 729.678 468 10 FmqF
0 FmP
494.064 736.498 M (Page )S
(13)S
7 FmP
58 53 468 648 FmqF
0 FmP
58 59.667 M (      )S
end
1363 0 :M
f4_10 sf
( )S
1365 0 :M
FrameMacDict begin
0 0 0 1 0 0 0 FmK
0 FmP
73 59.667 M (s)S
end
1365 0 :M
f0_10 sf
( )S
1367 0 :M
FrameMacDict begin
0 0 0 1 0 0 0 FmK
0 FmP
79.028 59.667 M ( := )S
end
1368 0 :M
f4_10 sf
( )S
1370 0 :M
FrameMacDict begin
0 0 0 1 0 0 0 FmK
0 FmP
92.446 59.667 M (s)S
end
1370 0 :M
f0_10 sf
( )S
1372 0 :M
FrameMacDict begin
0 0 0 1 0 0 0 FmK
0 FmP
98.474 59.667 M ( + 0 ;)S
10.608 N (                    )S
22 N (        )S
52 N (|      If  )S
end
1373 0 :M
f4_10 sf
( )S
1375 0 :M
FrameMacDict begin
0 0 0 1 0 0 0 FmK
0 FmP
302.655 59.667 M (s)S
end
1375 0 :M
f0_10 sf
( )S
1377 0 :M
FrameMacDict begin
0 0 0 1 0 0 0 FmK
0 FmP
308.683 59.667 M ( = 0 ,  this ensures it is  +0 ,)S
58 71.667 M (       k := )S
end
1378 0 :M
f2_10 sf
( )S
1380 0 :M
FrameMacDict begin
0 0 0 1 0 0 0 FmK
0 FmP
93.918 71.667 M (n)S
end
1380 0 :M
f0_10 sf
( )S
1382 0 :M
FrameMacDict begin
0 0 0 1 0 0 0 FmK
0 FmP
98.918 71.667 M ( ;   )S
end
1383 0 :M
f2_10 sf
( )S
1385 0 :M
FrameMacDict begin
0 0 0 1 0 0 0 FmK
0 FmP
111.696 71.667 M (f)S
end
1385 0 :M
f0_10 sf
( )S
1387 0 :M
FrameMacDict begin
0 0 0 1 0 0 0 FmK
0 FmP
114.475 71.667 M ( := 1 ;)S
135.829 N (|)S
58 83.667 M (       FOR  )S
end
1388 0 :M
f2_10 sf
( )S
1390 0 :M
FrameMacDict begin
0 0 0 1 0 0 0 FmK
0 FmP
99.948 83.667 M (j)S
end
1390 0 :M
f0_10 sf
( )S
1392 0 :M
FrameMacDict begin
0 0 0 1 0 0 0 FmK
0 FmP
102.727 83.667 M (  = 1, 2, 3, ..., )S
end
1393 0 :M
f2_10 sf
( )S
1395 0 :M
FrameMacDict begin
0 0 0 1 0 0 0 FmK
0 FmP
158.366 83.667 M (n)S
end
1395 0 :M
f0_10 sf
( )S
1397 0 :M
FrameMacDict begin
0 0 0 1 0 0 0 FmK
0 FmP
163.366 83.667 M (  IN TURN,)S
62.87 N (|)S
58 99 M (          DO  {  )S
end
1398 0 :M
f2_10 sf
( )S
1400 0 :M
FrameMacDict begin
0 0 0 1 0 0 0 FmK
0 FmP
112.238 99 M (f)S
end
1400 0 :M
f0_10 sf
( )S
1402 0 :M
FrameMacDict begin
0 0 0 1 0 0 0 FmK
0 FmP
115.017 99 M ( := \( )S
end
1403 0 :M
f4_10 sf
( )S
1405 0 :M
FrameMacDict begin
0 0 0 1 0 0 0 FmK
0 FmP
134.262 99 M (s)S
end
1405 0 :M
f0_10 sf
( )S
1407 0 :M
FrameMacDict begin
0 0 0 1 0 0 0 FmK
0 FmP
140.29 99 M ( - )S
9 N ([ )S
end
1408 0 :M
f2_10 sf
( )S
1410 0 :M
FrameMacDict begin
0 0 0 1 0 0 0 FmK
0 FmP
163.445 99 M (j )S
end
1410 0 :M
f0_10 sf
( )S
1412 0 :M
FrameMacDict begin
0 0 0 1 0 0 0 FmK
0 FmP
168.724 99 M (] \) - )S
end
1413 0 :M
f2_10 sf
( )S
1415 0 :M
FrameMacDict begin
0 0 0 1 0 0 0 FmK
0 FmP
186.207 99 M (q )S
end
1415 0 :M
f0_10 sf
( )S
1417 0 :M
FrameMacDict begin
0 0 0 1 0 0 0 FmK
0 FmP
193.707 99 M ([ )S
end
1418 0 :M
f2_10 sf
( )S
1420 0 :M
FrameMacDict begin
0 0 0 1 0 0 0 FmK
0 FmP
199.534 99 M (j )S
end
1420 0 :M
f0_10 sf
( )S
1422 0 :M
FrameMacDict begin
0 0 0 1 0 0 0 FmK
0 FmP
204.813 99 M (]/)S
end
1423 0 :M
f2_10 sf
( )S
1425 0 :M
FrameMacDict begin
0 0 0 1 0 0 0 FmK
0 FmP
210.918 99 M (f)S
end
1425 0 :M
f0_10 sf
( )S
1427 0 :M
FrameMacDict begin
0 0 0 1 0 0 0 FmK
0 FmP
213.697 99 M (  ;)S
52.525 N (|      Note:  This loop has no explicit)S
58 112.667 M (                      k := k - SignBit\()S
end
1428 0 :M
f2_10 sf
( )S
1430 0 :M
FrameMacDict begin
0 0 0 1 0 0 0 FmK
0 FmP
178.637 112.667 M (f )S
end
1430 0 :M
f0_10 sf
( )S
1432 0 :M
FrameMacDict begin
0 0 0 1 0 0 0 FmK
0 FmP
183.916 112.667 M (\)           }  ;)S
46.679 N (|                    tests nor branches.)S
58 124.667 M (       k\()S
end
1433 0 :M
f4_10 sf
( )S
1435 0 :M
FrameMacDict begin
0 0 0 1 0 0 0 FmK
0 FmP
83.828 124.667 M (s)S
end
1435 0 :M
f0_10 sf
( )S
1437 0 :M
FrameMacDict begin
0 0 0 1 0 0 0 FmK
0 FmP
89.855 124.667 M (\) := k ;   )S
end
1438 0 :M
f2_10 sf
( )S
1440 0 :M
FrameMacDict begin
0 0 0 1 0 0 0 FmK
0 FmP
124.379 124.667 M (f )S
end
1440 0 :M
f0_10 sf
( )S
1442 0 :M
FrameMacDict begin
0 0 0 1 0 0 0 FmK
0 FmP
129.658 124.667 M (\()S
end
1443 0 :M
f4_10 sf
( )S
1445 0 :M
FrameMacDict begin
0 0 0 1 0 0 0 FmK
0 FmP
132.985 124.667 M (s)S
end
1445 0 :M
f0_10 sf
( )S
1447 0 :M
FrameMacDict begin
0 0 0 1 0 0 0 FmK
0 FmP
139.013 124.667 M (\) := )S
end
1448 0 :M
f2_10 sf
( )S
1450 0 :M
FrameMacDict begin
0 0 0 1 0 0 0 FmK
0 FmP
155.759 124.667 M (f)S
end
1450 0 :M
f0_10 sf
( )S
1452 0 :M
FrameMacDict begin
0 0 0 1 0 0 0 FmK
0 FmP
158.537 124.667 M ( .)S
110.463 N (|)S
end
1453 0 :M
f0_9 sf
( )S
1455 0 :M
FrameMacDict begin
0 0 0 1 0 0 0 FmK
0 FmP
58 148 M (\(  The function  )S
13.772 N (SignBit\()S
end
1455 0 :M
f2_9 sf
( )S
1457 0 :M
FrameMacDict begin
0 0 0 1 0 0 0 FmK
0 FmP
160.502 148 M (f )S
end
1457 0 :M
f0_9 sf
( )S
1459 0 :M
FrameMacDict begin
0 0 0 1 0 0 0 FmK
0 FmP
165.253 148 M (\)  :=  0    if   )S
end
1459 0 :M
f2_9 sf
( )S
1461 0 :M
FrameMacDict begin
0 0 0 1 0 0 0 FmK
0 FmP
210.569 148 M (f)S
end
1462 0 :M
f0_9 sf
( )S
1464 0 :M
FrameMacDict begin
0 0 0 1 0 0 0 FmK
0 FmP
213.07 148 M (  > 0  or  if   )S
end
1464 0 :M
f2_9 sf
( )S
1466 0 :M
FrameMacDict begin
0 0 0 1 0 0 0 FmK
0 FmP
258.136 148 M (f)S
end
1466 0 :M
f0_9 sf
( )S
1468 0 :M
FrameMacDict begin
0 0 0 1 0 0 0 FmK
0 FmP
260.636 148 M (  is  +0 or -0 ,)S
130 159 M (                    :=  1     if   )S
end
1468 0 :M
f2_9 sf
( )S
1470 0 :M
FrameMacDict begin
0 0 0 1 0 0 0 FmK
0 FmP
215.072 159 M (f)S
end
1471 0 :M
f0_9 sf
( )S
1473 0 :M
FrameMacDict begin
0 0 0 1 0 0 0 FmK
0 FmP
217.572 159 M (  < 0  or  if   )S
end
1473 0 :M
f2_9 sf
( )S
1475 0 :M
FrameMacDict begin
0 0 0 1 0 0 0 FmK
0 FmP
262.638 159 M (f)S
end
1475 0 :M
f0_9 sf
( )S
1477 0 :M
FrameMacDict begin
0 0 0 1 0 0 0 FmK
0 FmP
265.138 159 M (  is   -0 ;)S
58 170 M (   its value at  )S
end
1477 0 :M
f2_9 sf
( )S
1479 0 :M
FrameMacDict begin
0 0 0 1 0 0 0 FmK
0 FmP
108.236 170 M (f)S
end
1480 0 :M
f0_9 sf
( )S
1482 0 :M
FrameMacDict begin
0 0 0 1 0 0 0 FmK
0 FmP
110.737 170 M (  = -0  may not matter but its value at  )S
end
1482 0 :M
f2_9 sf
( )S
1484 0 :M
FrameMacDict begin
0 0 0 1 0 0 0 FmK
0 FmP
248.525 170 M (f)S
end
1484 0 :M
f0_9 sf
( )S
1486 0 :M
FrameMacDict begin
0 0 0 1 0 0 0 FmK
0 FmP
251.025 170 M (  = -Infinity    does.  It can be computed by using logical right-shifts)S
58 181 M (   or  by using)S
130 192 M (\( )S
end
1486 0 :M
f2_9 sf
( )S
1488 0 :M
FrameMacDict begin
0 0 0 1 0 0 0 FmK
0 FmP
135.245 192 M (f)S
end
1489 0 :M
f0_9 sf
( )S
1491 0 :M
FrameMacDict begin
0 0 0 1 0 0 0 FmK
0 FmP
137.745 192 M (  < 0.0 \)                           in  C ,  or)S
130 203 M (0.5 - SIGN\(0.5, )S
end
1491 0 :M
f2_9 sf
( )S
1493 0 :M
FrameMacDict begin
0 0 0 1 0 0 0 FmK
0 FmP
188.482 203 M (f)S
end
1493 0 :M
f0_9 sf
( )S
1495 0 :M
FrameMacDict begin
0 0 0 1 0 0 0 FmK
0 FmP
190.983 203 M ( \)             in  Fortran,   or)S
130 214 M (0.5 - CopySign\(0.5, )S
end
1495 0 :M
f2_9 sf
( )S
1497 0 :M
FrameMacDict begin
0 0 0 1 0 0 0 FmK
0 FmP
203.496 214 M (f)S
end
1498 0 :M
f0_9 sf
( )S
1500 0 :M
FrameMacDict begin
0 0 0 1 0 0 0 FmK
0 FmP
205.997 214 M ( \)     from  IEEE 754 .)S
58 225 M (   However,  the use of shifts or  CopySign  is mandatory on computers that depart from  IEEE 754  by flushing)S
58 236 M (   UNDERFLOWed  subtractions to  -0.0  instead of  UNDERFLOWing Gradually,   q. v. below.)S
58 247 M (   Through an unfortunate accident,  the arguments of  CopySign  are reversed on   Apple  computers,  which otherwise)S
58 258 M (   conform conscientiously to  IEEE 754;  they require    SignBit\( )S
end
1500 0 :M
f2_9 sf
( )S
1502 0 :M
FrameMacDict begin
0 0 0 1 0 0 0 FmK
0 FmP
294.437 258 M (f)S
end
1502 0 :M
f0_9 sf
( )S
1504 0 :M
FrameMacDict begin
0 0 0 1 0 0 0 FmK
0 FmP
296.937 258 M (\)  :=  0.5 - CopySign\()S
end
1504 0 :M
f2_9 sf
( )S
1506 0 :M
FrameMacDict begin
0 0 0 1 0 0 0 FmK
0 FmP
374.255 258 M (f)S
end
1507 0 :M
f0_9 sf
( )S
1509 0 :M
FrameMacDict begin
0 0 0 1 0 0 0 FmK
0 FmP
376.755 258 M ( , 0.5\)           .\))S
end
1509 0 :M
f0_10 sf
( )S
1511 0 :M
FrameMacDict begin
0 0 0 1 0 0 0 FmK
0 FmP
58 280.667 M (The function  )S
end
1511 0 :M
f2_10 sf
( )S
1513 0 :M
FrameMacDict begin
0 0 0 1 0 0 0 FmK
0 FmP
114.37 280.667 M (f )S
end
1514 0 :M
f0_10 sf
( )S
1516 0 :M
FrameMacDict begin
0 0 0 1 0 0 0 FmK
0 FmP
119.648 280.667 M (\()S
end
1516 0 :M
f4_10 sf
( )S
1518 0 :M
FrameMacDict begin
0 0 0 1 0 0 0 FmK
0 FmP
122.976 280.667 M (s)S
end
1519 0 :M
f0_10 sf
( )S
1521 0 :M
FrameMacDict begin
0 0 0 1 0 0 0 FmK
0 FmP
129.003 280.667 M (\)  is a  )S
end
1521 0 :M
f2_10 sf
( )S
1523 0 :M
FrameMacDict begin
0 0 0 1 0 0 0 FmK
0 FmP
155.937 280.667 M (continued fraction)S
end
1524 0 :M
f0_10 sf
( )S
1526 0 :M
FrameMacDict begin
0 0 0 1 0 0 0 FmK
0 FmP
229.533 280.667 M (:)S
end
1526 0 :M
f0_12 sf
( )S
1529 0 :M
FrameMacDict begin
0 0 0 1 0 0 0 FmK
0 FmP
58 307.612 M (         )S
end
1529 0 :M
f0_10 sf
( )S
1531 0 :M
FrameMacDict begin
0 0 0 1 0 0 0 FmK
0 FmP
491.21 307.612 M (   .)S
58 400.259 M (The eigenvalues  )S
end
1532 0 :M
f4_10 sf
( )S
1534 0 :M
FrameMacDict begin
0 0 0 1 0 0 0 FmK
0 FmP
128.247 400.259 M (t)S
end
1534 0 :M
f0_10 sf
( )S
1536 0 :M
FrameMacDict begin
0 0 0 1 0 0 0 FmK
0 FmP
132.636 400.259 M ([)S
end
1537 0 :M
f2_10 sf
( )S
1539 0 :M
FrameMacDict begin
0 0 0 1 0 0 0 FmK
0 FmP
135.964 400.259 M (j)S
end
1539 0 :M
f0_10 sf
( )S
1541 0 :M
FrameMacDict begin
0 0 0 1 0 0 0 FmK
0 FmP
138.742 400.259 M (]  of  T  are the zeros of  )S
end
1542 0 :M
f2_10 sf
( )S
1544 0 :M
FrameMacDict begin
0 0 0 1 0 0 0 FmK
0 FmP
237.849 400.259 M (f )S
end
1544 0 :M
f0_10 sf
( )S
1546 0 :M
FrameMacDict begin
0 0 0 1 0 0 0 FmK
0 FmP
243.127 400.259 M (\()S
end
1547 0 :M
f4_10 sf
( )S
1549 0 :M
FrameMacDict begin
0 0 0 1 0 0 0 FmK
0 FmP
246.455 400.259 M (s)S
end
1549 0 :M
f0_10 sf
( )S
1551 0 :M
FrameMacDict begin
0 0 0 1 0 0 0 FmK
0 FmP
252.482 400.259 M (\) ,  separated by the poles of  )S
end
1552 0 :M
f2_10 sf
( )S
1554 0 :M
FrameMacDict begin
0 0 0 1 0 0 0 FmK
0 FmP
370.209 400.259 M (f )S
end
1554 0 :M
f0_10 sf
( )S
1556 0 :M
FrameMacDict begin
0 0 0 1 0 0 0 FmK
0 FmP
375.488 400.259 M (\()S
end
1557 0 :M
f4_10 sf
( )S
1559 0 :M
FrameMacDict begin
0 0 0 1 0 0 0 FmK
0 FmP
378.815 400.259 M (s)S
end
1559 0 :M
f0_10 sf
( )S
1561 0 :M
FrameMacDict begin
0 0 0 1 0 0 0 FmK
0 FmP
384.843 400.259 M (\)  at which it interrupts its )S
58 412.259 M (monotonic increasing behavior to jump from  +Infinity  to  -Infinity.  The integer function  k\()S
end
1562 0 :M
f4_10 sf
( )S
1564 0 :M
FrameMacDict begin
0 0 0 1 0 0 0 FmK
0 FmP
431.298 412.259 M (s)S
end
1564 0 :M
f0_10 sf
( )S
1566 0 :M
FrameMacDict begin
0 0 0 1 0 0 0 FmK
0 FmP
437.326 412.259 M (\)  counts the )S
58 424.259 M (eigenvalues on either side of  )S
end
1567 0 :M
f4_10 sf
( )S
1569 0 :M
FrameMacDict begin
0 0 0 1 0 0 0 FmK
0 FmP
177.395 424.259 M (s)S
end
1569 0 :M
f0_10 sf
( )S
1571 0 :M
FrameMacDict begin
0 0 0 1 0 0 0 FmK
0 FmP
183.422 424.259 M (  thus:)S
end
1572 0 :M
f4_10 sf
( )S
1574 0 :M
FrameMacDict begin
0 0 0 1 0 0 0 FmK
0 FmP
148.989 448.259 M (t)S
end
1574 0 :M
f0_10 sf
( )S
1576 0 :M
FrameMacDict begin
0 0 0 1 0 0 0 FmK
0 FmP
153.378 448.259 M ([1]  <  )S
end
1577 0 :M
f4_10 sf
( )S
1579 0 :M
FrameMacDict begin
0 0 0 1 0 0 0 FmK
0 FmP
180.673 448.259 M (t)S
end
1579 0 :M
f0_10 sf
( )S
1581 0 :M
FrameMacDict begin
0 0 0 1 0 0 0 FmK
0 FmP
185.063 448.259 M ([2]  <  ...  <  )S
end
1582 0 :M
f4_10 sf
( )S
1584 0 :M
FrameMacDict begin
0 0 0 1 0 0 0 FmK
0 FmP
235.497 448.259 M (t)S
end
1584 0 :M
f0_10 sf
( )S
1586 0 :M
FrameMacDict begin
0 0 0 1 0 0 0 FmK
0 FmP
239.887 448.259 M ([k\()S
end
1587 0 :M
f4_10 sf
( )S
1589 0 :M
FrameMacDict begin
0 0 0 1 0 0 0 FmK
0 FmP
251.542 448.259 M (s)S
end
1589 0 :M
f0_10 sf
( )S
1591 0 :M
FrameMacDict begin
0 0 0 1 0 0 0 FmK
0 FmP
257.57 448.259 M (\)]   )S
end
1592 0 :M
f4_10 sf
( )S
1594 0 :M
FrameMacDict begin
0 0 0 1 0 0 0 FmK
0 FmP
271.725 448.259 M (\243)S
end
1594 0 :M
f0_10 sf
( )S
1596 0 :M
FrameMacDict begin
0 0 0 1 0 0 0 FmK
0 FmP
277.214 448.259 M (  )S
end
1597 0 :M
f4_10 sf
( )S
1599 0 :M
FrameMacDict begin
0 0 0 1 0 0 0 FmK
0 FmP
282.214 448.259 M (s)S
end
1599 0 :M
f0_10 sf
( )S
1601 0 :M
FrameMacDict begin
0 0 0 1 0 0 0 FmK
0 FmP
288.241 448.259 M (  <   )S
end
1602 0 :M
f4_10 sf
( )S
1604 0 :M
FrameMacDict begin
0 0 0 1 0 0 0 FmK
0 FmP
306.381 448.259 M (t)S
end
1604 0 :M
f0_10 sf
( )S
1606 0 :M
FrameMacDict begin
0 0 0 1 0 0 0 FmK
0 FmP
310.771 448.259 M ([k\()S
end
1607 0 :M
f4_10 sf
( )S
1609 0 :M
FrameMacDict begin
0 0 0 1 0 0 0 FmK
0 FmP
322.426 448.259 M (s)S
end
1609 0 :M
f0_10 sf
( )S
1611 0 :M
FrameMacDict begin
0 0 0 1 0 0 0 FmK
0 FmP
328.454 448.259 M (\)+1]  <  ...  <  )S
end
1612 0 :M
f4_10 sf
( )S
1614 0 :M
FrameMacDict begin
0 0 0 1 0 0 0 FmK
0 FmP
384.528 448.259 M (t)S
end
1614 0 :M
f0_10 sf
( )S
1616 0 :M
FrameMacDict begin
0 0 0 1 0 0 0 FmK
0 FmP
388.918 448.259 M ([)S
end
1617 0 :M
f2_10 sf
( )S
1619 0 :M
FrameMacDict begin
0 0 0 1 0 0 0 FmK
0 FmP
392.245 448.259 M (n)S
end
1619 0 :M
f0_10 sf
( )S
1621 0 :M
FrameMacDict begin
0 0 0 1 0 0 0 FmK
0 FmP
397.245 448.259 M (] ,      and)S
end
1622 0 :M
f4_10 sf
( )S
1624 0 :M
FrameMacDict begin
0 0 0 1 0 0 0 FmK
0 FmP
188.2 460.259 M (                   t)S
end
1624 0 :M
f0_10 sf
( )S
1626 0 :M
FrameMacDict begin
0 0 0 1 0 0 0 FmK
0 FmP
240.09 460.259 M ([k\()S
end
1627 0 :M
f4_10 sf
( )S
1629 0 :M
FrameMacDict begin
0 0 0 1 0 0 0 FmK
0 FmP
251.745 460.259 M (s)S
end
1629 0 :M
f0_10 sf
( )S
1631 0 :M
FrameMacDict begin
0 0 0 1 0 0 0 FmK
0 FmP
257.773 460.259 M (\)]   =  )S
end
1632 0 :M
f4_10 sf
( )S
1634 0 :M
FrameMacDict begin
0 0 0 1 0 0 0 FmK
0 FmP
282.568 460.259 M (s)S
end
1634 0 :M
f0_10 sf
( )S
1636 0 :M
FrameMacDict begin
0 0 0 1 0 0 0 FmK
0 FmP
288.595 460.259 M (      just when      )S
end
1637 0 :M
f2_10 sf
( )S
1639 0 :M
FrameMacDict begin
0 0 0 1 0 0 0 FmK
0 FmP
357.199 460.259 M (f )S
end
1639 0 :M
f0_10 sf
( )S
1641 0 :M
FrameMacDict begin
0 0 0 1 0 0 0 FmK
0 FmP
362.477 460.259 M (\()S
end
1642 0 :M
f4_10 sf
( )S
1644 0 :M
FrameMacDict begin
0 0 0 1 0 0 0 FmK
0 FmP
365.805 460.259 M (s)S
end
1644 0 :M
f0_10 sf
( )S
1646 0 :M
FrameMacDict begin
0 0 0 1 0 0 0 FmK
0 FmP
371.833 460.259 M (\) = 0 .)S
58 484.259 M (Evidently the eigenvalues  )S
end
1647 0 :M
f4_10 sf
( )S
1649 0 :M
FrameMacDict begin
0 0 0 1 0 0 0 FmK
0 FmP
166.298 484.259 M (t)S
end
1649 0 :M
f0_10 sf
( )S
1651 0 :M
FrameMacDict begin
0 0 0 1 0 0 0 FmK
0 FmP
170.688 484.259 M ([)S
end
1652 0 :M
f2_10 sf
( )S
1654 0 :M
FrameMacDict begin
0 0 0 1 0 0 0 FmK
0 FmP
174.016 484.259 M (j)S
end
1654 0 :M
f0_10 sf
( )S
1656 0 :M
FrameMacDict begin
0 0 0 1 0 0 0 FmK
0 FmP
176.794 484.259 M (]  of  T  are the  )S
end
1657 0 :M
f2_10 sf
( )S
1659 0 :M
FrameMacDict begin
0 0 0 1 0 0 0 FmK
0 FmP
241.479 484.259 M (n)S
end
1659 0 :M
f0_10 sf
( )S
1661 0 :M
FrameMacDict begin
0 0 0 1 0 0 0 FmK
0 FmP
246.479 484.259 M (  values of  )S
end
1662 0 :M
f4_10 sf
( )S
1664 0 :M
FrameMacDict begin
0 0 0 1 0 0 0 FmK
0 FmP
292.851 484.259 M (s)S
end
1664 0 :M
f0_10 sf
( )S
1666 0 :M
FrameMacDict begin
0 0 0 1 0 0 0 FmK
0 FmP
298.879 484.259 M (  at which  k\()S
end
1667 0 :M
f4_10 sf
( )S
1669 0 :M
FrameMacDict begin
0 0 0 1 0 0 0 FmK
0 FmP
351.359 484.259 M (s)S
end
1669 0 :M
f0_10 sf
( )S
1671 0 :M
FrameMacDict begin
0 0 0 1 0 0 0 FmK
0 FmP
357.387 484.259 M (\)  jumps,  and may be located by  Binary )S
58 496.259 M (Search  accelerated by interpolative schemes that take values of  )S
end
1672 0 :M
f2_10 sf
( )S
1674 0 :M
FrameMacDict begin
0 0 0 1 0 0 0 FmK
0 FmP
317.585 496.259 M (f )S
end
1674 0 :M
f0_10 sf
( )S
1676 0 :M
FrameMacDict begin
0 0 0 1 0 0 0 FmK
0 FmP
322.863 496.259 M (\()S
end
1677 0 :M
f4_10 sf
( )S
1679 0 :M
FrameMacDict begin
0 0 0 1 0 0 0 FmK
0 FmP
326.191 496.259 M (s)S
end
1679 0 :M
f0_10 sf
( )S
1681 0 :M
FrameMacDict begin
0 0 0 1 0 0 0 FmK
0 FmP
332.219 496.259 M (\)  into account too.  Although rounding errors )S
58 508.259 M (can obscure  )S
end
1682 0 :M
f2_10 sf
( )S
1684 0 :M
FrameMacDict begin
0 0 0 1 0 0 0 FmK
0 FmP
110.471 508.259 M (f )S
end
1684 0 :M
f0_10 sf
( )S
1686 0 :M
FrameMacDict begin
0 0 0 1 0 0 0 FmK
0 FmP
115.749 508.259 M (\()S
end
1687 0 :M
f4_10 sf
( )S
1689 0 :M
FrameMacDict begin
0 0 0 1 0 0 0 FmK
0 FmP
119.077 508.259 M (s)S
end
1689 0 :M
f0_10 sf
( )S
1691 0 :M
FrameMacDict begin
0 0 0 1 0 0 0 FmK
0 FmP
125.104 508.259 M (\)  severely,  its monotonicity and the jumps of  k\()S
end
1692 0 :M
f4_10 sf
( )S
1694 0 :M
FrameMacDict begin
0 0 0 1 0 0 0 FmK
0 FmP
322.275 508.259 M (s)S
end
1694 0 :M
f0_10 sf
( )S
1696 0 :M
FrameMacDict begin
0 0 0 1 0 0 0 FmK
0 FmP
328.303 508.259 M (\)  are practically unaffected,  so the eigenvalues )S
58 520.259 M (are obtained more accurately this way than any other.  And quickly too.)S
58 544.259 M (If  Infinity  were outlawed,  the loop would have to be encumbered by a test and branch to prevent  Division-by-)S
58 556.259 M (Zero.  That test cannot overlap the division,  a slow operation,  because of sequential dependencies,  so the test )S
58 568.259 M (would definitely slow down the loop even though zero would be detected extremely rarely.  The test\'s impact would )S
58 580.259 M (be tolerable if the loop contained only one division,  but that is not what happens.)S
58 604.259 M (Because division is so slow,  fast computers pipeline it in such a way that a few divisions can be processed )S
58 616.259 M (concurrently.  To exploit this pipelining,  we search for several eigenvalues simultaneously.  The variable  )S
end
1697 0 :M
f4_10 sf
( )S
1699 0 :M
FrameMacDict begin
0 0 0 1 0 0 0 FmK
0 FmP
485.056 616.259 M (s)S
end
1699 0 :M
f0_10 sf
( )S
1701 0 :M
FrameMacDict begin
0 0 0 1 0 0 0 FmK
0 FmP
491.083 616.259 M (  )S
58 628.259 M (becomes a small array of values,  as do  )S
end
1702 0 :M
f2_10 sf
( )S
1704 0 :M
FrameMacDict begin
0 0 0 1 0 0 0 FmK
0 FmP
219.316 628.259 M (f)S
end
1704 0 :M
f0_10 sf
( )S
1706 0 :M
FrameMacDict begin
0 0 0 1 0 0 0 FmK
0 FmP
222.094 628.259 M (   and  k ,  and every go-around the loop issues an array of divisions.  In )S
58 640.259 M (this context the tests,  though  \322 )S
(vectorized )S
(\323  too,  degrade speed by  25%  or more,  much more on machines with )S
58 652.259 M (multiple pipelines that can subtract and shift concurrently with division,  regardless of what else a branch would )S
58 664.259 M (entail whenever a zero divisor were detected.  By dispensing with those tests,  this program gains speed and )S
58 676.259 M (simplicity from  Infinity  even if  Division-by-Zero  never happens.)S
429.926 688.259 M (End of second example.)S
end
148 88 10 16 rC
1707 0 :M
f2_12 sf
( )S
1710 0 :M
FrameMacDict begin
148.618 89 9 15 FmKp
0 0 0 1 0 0 0 FmK
0 FmP
149.618 99 M (a)S
end
gR
gS 85 285 407 95 rC
1710 0 :M
f2_12 sf
( )S
1713 0 :M
FrameMacDict begin
85 286 406.21 93.593 FmKp
0 0 0 1 0 0 0 FmK
0 FmP
87.776 307.612 M (f)S
end
1713 0 :M
f4_12 sf
( )S
1716 0 :M
FrameMacDict begin
85 286 406.21 93.593 FmKp
0 0 0 1 0 0 0 FmK
0 FmP
100.611 307.612 M (s)S
-12.378 N (\()S
8.936 N (\))S
20.764 N (s)S
end
1716 0 :M
f2_12 sf
( )S
1719 0 :M
FrameMacDict begin
85 286 406.21 93.593 FmKp
0 0 0 1 0 0 0 FmK
0 FmP
152.383 307.612 M (a)S
7.855 N (n)S
end
1719 0 :M
f4_12 sf
( )S
1722 0 :M
FrameMacDict begin
85 286 406.21 93.593 FmKp
0 0 0 1 0 0 0 FmK
0 FmP
161.094 307.612 M ([)S
7.703 N (])S
end
1722 0 :M
f0_12 sf
( )S
1725 0 :M
FrameMacDict begin
85 286 406.21 93.593 FmKp
0 0 0 1 0 0 0 FmK
0 FmP
143.385 307.612 M (\320)S
end
1725 0 :M
f2_12 sf
( )S
1728 0 :M
FrameMacDict begin
85 286 406.21 93.593 FmKp
0 0 0 1 0 0 0 FmK
0 FmP
324.317 300.949 M (b)S
7.855 N (n)S
end
1728 0 :M
f4_12 sf
( )S
1731 0 :M
FrameMacDict begin
85 286 406.21 93.593 FmKp
0 0 0 1 0 0 0 FmK
0 FmP
333.028 300.949 M ([)S
7.703 N (])S
end
1731 0 :M
f0_9 sf
( )S
1733 0 :M
FrameMacDict begin
85 286 406.21 93.593 FmKp
0 0 0 1 0 0 0 FmK
0 FmP
351.176 293.75 M (2)S
end
1733 0 :M
f4_12 sf
( )S
1736 0 :M
FrameMacDict begin
85 286 406.21 93.593 FmKp
0 0 0 1 0 0 0 FmK
0 FmP
191.023 327.26 M (s)S
end
1736 0 :M
f2_12 sf
( )S
1739 0 :M
FrameMacDict begin
85 286 406.21 93.593 FmKp
0 0 0 1 0 0 0 FmK
0 FmP
210.253 327.26 M (a)S
7.855 N (n)S
end
1739 0 :M
f0_12 sf
( )S
1742 0 :M
FrameMacDict begin
85 286 406.21 93.593 FmKp
0 0 0 1 0 0 0 FmK
0 FmP
242.105 327.26 M (1)S
-14.998 N (\320)S
end
1742 0 :M
f4_12 sf
( )S
1745 0 :M
FrameMacDict begin
85 286 406.21 93.593 FmKp
0 0 0 1 0 0 0 FmK
0 FmP
218.963 327.26 M ([)S
25.7 N (])S
end
1745 0 :M
f0_12 sf
( )S
1748 0 :M
FrameMacDict begin
85 286 406.21 93.593 FmKp
0 0 0 1 0 0 0 FmK
0 FmP
201.254 327.26 M (\320)S
end
1748 0 :M
f2_12 sf
( )S
1751 0 :M
FrameMacDict begin
85 286 406.21 93.593 FmKp
0 0 0 1 0 0 0 FmK
0 FmP
353.132 320.597 M (b)S
7.855 N (n)S
end
1751 0 :M
f0_12 sf
( )S
1754 0 :M
FrameMacDict begin
85 286 406.21 93.593 FmKp
0 0 0 1 0 0 0 FmK
0 FmP
384.984 320.597 M (1)S
-14.998 N (\320)S
end
1754 0 :M
f4_12 sf
( )S
1757 0 :M
FrameMacDict begin
85 286 406.21 93.593 FmKp
0 0 0 1 0 0 0 FmK
0 FmP
361.843 320.597 M ([)S
25.7 N (])S
end
1757 0 :M
f0_9 sf
( )S
1759 0 :M
FrameMacDict begin
85 286 406.21 93.593 FmKp
0 0 0 1 0 0 0 FmK
0 FmP
397.987 313.398 M (2)S
end
1759 0 :M
f4_12 sf
( )S
1762 0 :M
FrameMacDict begin
85 286 406.21 93.593 FmKp
0 0 0 1 0 0 0 FmK
0 FmP
266.889 346.908 M (s)S
end
1762 0 :M
f2_12 sf
( )S
1765 0 :M
FrameMacDict begin
85 286 406.21 93.593 FmKp
0 0 0 1 0 0 0 FmK
0 FmP
286.119 346.908 M (a)S
7.855 N (n)S
end
1765 0 :M
f0_12 sf
( )S
1768 0 :M
FrameMacDict begin
85 286 406.21 93.593 FmKp
0 0 0 1 0 0 0 FmK
0 FmP
317.971 346.908 M (2)S
-14.998 N (\320)S
end
1768 0 :M
f4_12 sf
( )S
1771 0 :M
FrameMacDict begin
85 286 406.21 93.593 FmKp
0 0 0 1 0 0 0 FmK
0 FmP
294.829 346.908 M ([)S
25.7 N (])S
end
1771 0 :M
f0_12 sf
( )S
1774 0 :M
FrameMacDict begin
85 286 406.21 93.593 FmKp
0 0 0 1 0 0 0 FmK
0 FmP
277.121 346.908 M (\320)S
end
1774 0 :M
f2_12 sf
( )S
1777 0 :M
FrameMacDict begin
85 286 406.21 93.593 FmKp
0 0 0 1 0 0 0 FmK
0 FmP
390.945 340.246 M (b)S
7.855 N (n)S
end
1777 0 :M
f0_12 sf
( )S
1780 0 :M
FrameMacDict begin
85 286 406.21 93.593 FmKp
0 0 0 1 0 0 0 FmK
0 FmP
422.797 340.246 M (2)S
-14.998 N (\320)S
end
1780 0 :M
f4_12 sf
( )S
1783 0 :M
FrameMacDict begin
85 286 406.21 93.593 FmKp
0 0 0 1 0 0 0 FmK
0 FmP
399.656 340.246 M ([)S
25.7 N (])S
end
1783 0 :M
f0_9 sf
( )S
1785 0 :M
FrameMacDict begin
85 286 406.21 93.593 FmKp
0 0 0 1 0 0 0 FmK
0 FmP
435.8 333.046 M (2)S
end
1786 0 :M
f4_12 sf
( )S
1789 0 :M
FrameMacDict begin
85 286 406.21 93.593 FmKp
0 0 0 1 0 0 0 FmK
0 FmP
342.755 366.556 M (s)S
end
1789 0 :M
f2_12 sf
( )S
1792 0 :M
FrameMacDict begin
85 286 406.21 93.593 FmKp
0 0 0 1 0 0 0 FmK
0 FmP
361.985 366.556 M (a)S
7.855 N (n)S
end
1792 0 :M
f0_12 sf
( )S
1795 0 :M
FrameMacDict begin
85 286 406.21 93.593 FmKp
0 0 0 1 0 0 0 FmK
0 FmP
393.837 366.556 M (3)S
-14.998 N (\320)S
end
1795 0 :M
f4_12 sf
( )S
1798 0 :M
FrameMacDict begin
85 286 406.21 93.593 FmKp
0 0 0 1 0 0 0 FmK
0 FmP
370.696 366.556 M ([)S
25.7 N (])S
end
1798 0 :M
f0_12 sf
( )S
1801 0 :M
FrameMacDict begin
85 286 406.21 93.593 FmKp
0 0 0 1 0 0 0 FmK
0 FmP
352.987 366.556 M (\320)S
end
1801 0 :M
f4_12 sf
( )S
1804 0 :M
FrameMacDict begin
85 286 406.21 93.593 FmKp
0 0 0 1 0 0 0 FmK
0 FmP
418.381 366.556 M (\274)S
end
1804 0 :M
f0_12 sf
( )S
1807 0 :M
FrameMacDict begin
85 286 406.21 93.593 FmKp
0 0 0 1 0 0 0 FmK
0 FmP
409.383 366.556 M (\320)S
end
1807 0 :M
f2_12 sf
( )S
1810 0 :M
FrameMacDict begin
85 286 406.21 93.593 FmKp
0 0 0 1 0 0 0 FmK
0 FmP
449.755 359.894 M (b)S
end
1810 0 :M
f0_12 sf
( )S
1813 0 :M
FrameMacDict begin
85 286 406.21 93.593 FmKp
0 0 0 1 0 0 0 FmK
0 FmP
463.61 359.894 M (2)S
end
1813 0 :M
f4_12 sf
( )S
1816 0 :M
FrameMacDict begin
85 286 406.21 93.593 FmKp
0 0 0 1 0 0 0 FmK
0 FmP
458.466 359.894 M ([)S
7.703 N (])S
end
1816 0 :M
f0_9 sf
( )S
1818 0 :M
FrameMacDict begin
85 286 406.21 93.593 FmKp
0 0 0 1 0 0 0 FmK
0 FmP
476.614 352.694 M (2)S
end
1818 0 :M
f4_12 sf
( )S
1821 0 :M
FrameMacDict begin
85 286 406.21 93.593 FmKp
0 0 0 1 0 0 0 FmK
0 FmP
442.618 374.593 M (s)S
end
1821 0 :M
f2_12 sf
( )S
1824 0 :M
FrameMacDict begin
85 286 406.21 93.593 FmKp
0 0 0 1 0 0 0 FmK
0 FmP
461.848 374.593 M (a)S
end
1824 0 :M
f0_12 sf
( )S
1827 0 :M
FrameMacDict begin
85 286 406.21 93.593 FmKp
0 0 0 1 0 0 0 FmK
0 FmP
475.703 374.593 M (1)S
end
1827 0 :M
f4_12 sf
( )S
1830 0 :M
FrameMacDict begin
85 286 406.21 93.593 FmKp
0 0 0 1 0 0 0 FmK
0 FmP
470.559 374.593 M ([)S
7.703 N (])S
end
1830 0 :M
f0_12 sf
( )S
1833 0 :M
FrameMacDict begin
85 286 406.21 93.593 FmKp
0 0 0 1 0 0 0 FmK
0 FmP
452.85 374.593 M (\320)S
442.618 366.556 M (-)S
-1.997 N (-)S
-1.997 N (-)S
-1.997 N (-)S
-1.997 N (-)S
-1.997 N (-)S
-1.997 N (-)S
-1.997 N (-)S
-1.997 N (-)S
-1.997 N (-)S
-1.997 N (-)S
-1.997 N (-)S
-1.997 N (-)S
-1.997 N (-)S
-1.997 N (-)S
-1.997 N (-)S
-1.997 N (-)S
-1.997 N (-)S
-1.997 N (-)S
-1.997 N (-)S
-1.997 N (-)S
-2.285 N (-)S
-54.871 N (\320)S
342.755 346.908 M (-)S
-1.997 N (-)S
-1.997 N (-)S
-1.997 N (-)S
-1.997 N (-)S
-1.997 N (-)S
-1.997 N (-)S
-1.997 N (-)S
-1.997 N (-)S
-1.997 N (-)S
-1.997 N (-)S
-1.997 N (-)S
-1.997 N (-)S
-1.997 N (-)S
-1.997 N (-)S
-1.997 N (-)S
-1.997 N (-)S
-1.997 N (-)S
-1.997 N (-)S
-1.997 N (-)S
-1.997 N (-)S
-1.997 N (-)S
-1.997 N (-)S
-1.997 N (-)S
-1.997 N (-)S
-1.997 N (-)S
-1.997 N (-)S
-1.997 N (-)S
-1.997 N (-)S
-1.997 N (-)S
-1.997 N (-)S
-1.997 N (-)S
-1.997 N (-)S
-1.997 N (-)S
-1.997 N (-)S
-1.997 N (-)S
-1.997 N (-)S
-1.997 N (-)S
-1.997 N (-)S
-1.997 N (-)S
-1.997 N (-)S
-1.997 N (-)S
-1.997 N (-)S
-1.997 N (-)S
-1.997 N (-)S
-1.997 N (-)S
-1.997 N (-)S
-1.997 N (-)S
-1.997 N (-)S
-1.997 N (-)S
-1.997 N (-)S
-1.997 N (-)S
-1.997 N (-)S
-1.997 N (-)S
-1.997 N (-)S
-1.997 N (-)S
-1.997 N (-)S
-1.997 N (-)S
-1.997 N (-)S
-1.997 N (-)S
-1.997 N (-)S
-1.997 N (-)S
-1.997 N (-)S
-1.997 N (-)S
-1.997 N (-)S
-1.997 N (-)S
-1.997 N (-)S
-1.997 N (-)S
-1.997 N (-)S
-1.997 N (-)S
-1.997 N (-)S
-2.011 N (-)S
-154.974 N (\320)S
266.889 327.26 M (-)S
-1.997 N (-)S
-1.997 N (-)S
-1.997 N (-)S
-1.997 N (-)S
-1.997 N (-)S
-1.997 N (-)S
-1.997 N (-)S
-1.997 N (-)S
-1.997 N (-)S
-1.997 N (-)S
-1.997 N (-)S
-1.997 N (-)S
-1.997 N (-)S
-1.997 N (-)S
-1.997 N (-)S
-1.997 N (-)S
-1.997 N (-)S
-1.997 N (-)S
-1.997 N (-)S
-1.997 N (-)S
-1.997 N (-)S
-1.997 N (-)S
-1.997 N (-)S
-1.997 N (-)S
-1.997 N (-)S
-1.997 N (-)S
-1.997 N (-)S
-1.997 N (-)S
-1.997 N (-)S
-1.997 N (-)S
-1.997 N (-)S
-1.997 N (-)S
-1.997 N (-)S
-1.997 N (-)S
-1.997 N (-)S
-1.997 N (-)S
-1.997 N (-)S
-1.997 N (-)S
-1.997 N (-)S
-1.997 N (-)S
-1.997 N (-)S
-1.997 N (-)S
-1.997 N (-)S
-1.997 N (-)S
-1.997 N (-)S
-1.997 N (-)S
-1.997 N (-)S
-1.997 N (-)S
-1.997 N (-)S
-1.997 N (-)S
-1.997 N (-)S
-1.997 N (-)S
-1.997 N (-)S
-1.997 N (-)S
-1.997 N (-)S
-1.997 N (-)S
-1.997 N (-)S
-1.997 N (-)S
-1.997 N (-)S
-1.997 N (-)S
-1.997 N (-)S
-1.997 N (-)S
-1.997 N (-)S
-1.997 N (-)S
-1.997 N (-)S
-1.997 N (-)S
-1.997 N (-)S
-1.997 N (-)S
-1.997 N (-)S
-1.997 N (-)S
-1.997 N (-)S
-1.997 N (-)S
-1.997 N (-)S
-1.997 N (-)S
-1.997 N (-)S
-1.997 N (-)S
-1.997 N (-)S
-1.997 N (-)S
-1.997 N (-)S
-1.997 N (-)S
-1.997 N (-)S
-1.997 N (-)S
-1.997 N (-)S
-1.997 N (-)S
-1.997 N (-)S
-1.997 N (-)S
-1.997 N (-)S
-1.997 N (-)S
-1.997 N (-)S
-1.997 N (-)S
-1.997 N (-)S
-1.997 N (-)S
-1.997 N (-)S
-1.997 N (-)S
-1.997 N (-)S
-1.997 N (-)S
-1.997 N (-)S
-1.997 N (-)S
-1.997 N (-)S
-1.997 N (-)S
-1.997 N (-)S
-1.997 N (-)S
-1.997 N (-)S
-1.997 N (-)S
-1.997 N (-)S
-1.997 N (-)S
-1.997 N (-)S
-1.997 N (-)S
-1.997 N (-)S
-3.772 N (-)S
-231.08 N (\320)S
191.023 307.612 M (-)S
-1.997 N (-)S
-1.997 N (-)S
-1.997 N (-)S
-1.997 N (-)S
-1.997 N (-)S
-1.997 N (-)S
-1.997 N (-)S
-1.997 N (-)S
-1.997 N (-)S
-1.997 N (-)S
-1.997 N (-)S
-1.997 N (-)S
-1.997 N (-)S
-1.997 N (-)S
-1.997 N (-)S
-1.997 N (-)S
-1.997 N (-)S
-1.997 N (-)S
-1.997 N (-)S
-1.997 N (-)S
-1.997 N (-)S
-1.997 N (-)S
-1.997 N (-)S
-1.997 N (-)S
-1.997 N (-)S
-1.997 N (-)S
-1.997 N (-)S
-1.997 N (-)S
-1.997 N (-)S
-1.997 N (-)S
-1.997 N (-)S
-1.997 N (-)S
-1.997 N (-)S
-1.997 N (-)S
-1.997 N (-)S
-1.997 N (-)S
-1.997 N (-)S
-1.997 N (-)S
-1.997 N (-)S
-1.997 N (-)S
-1.997 N (-)S
-1.997 N (-)S
-1.997 N (-)S
-1.997 N (-)S
-1.997 N (-)S
-1.997 N (-)S
-1.997 N (-)S
-1.997 N (-)S
-1.997 N (-)S
-1.997 N (-)S
-1.997 N (-)S
-1.997 N (-)S
-1.997 N (-)S
-1.997 N (-)S
-1.997 N (-)S
-1.997 N (-)S
-1.997 N (-)S
-1.997 N (-)S
-1.997 N (-)S
-1.997 N (-)S
-1.997 N (-)S
-1.997 N (-)S
-1.997 N (-)S
-1.997 N (-)S
-1.997 N (-)S
-1.997 N (-)S
-1.997 N (-)S
-1.997 N (-)S
-1.997 N (-)S
-1.997 N (-)S
-1.997 N (-)S
-1.997 N (-)S
-1.997 N (-)S
-1.997 N (-)S
-1.997 N (-)S
-1.997 N (-)S
-1.997 N (-)S
-1.997 N (-)S
-1.997 N (-)S
-1.997 N (-)S
-1.997 N (-)S
-1.997 N (-)S
-1.997 N (-)S
-1.997 N (-)S
-1.997 N (-)S
-1.997 N (-)S
-1.997 N (-)S
-1.997 N (-)S
-1.997 N (-)S
-1.997 N (-)S
-1.997 N (-)S
-1.997 N (-)S
-1.997 N (-)S
-1.997 N (-)S
-1.997 N (-)S
-1.997 N (-)S
-1.997 N (-)S
-1.997 N (-)S
-1.997 N (-)S
-1.997 N (-)S
-1.997 N (-)S
-1.997 N (-)S
-1.997 N (-)S
-1.997 N (-)S
-1.997 N (-)S
-1.997 N (-)S
-1.997 N (-)S
-1.997 N (-)S
-1.997 N (-)S
-1.997 N (-)S
-1.997 N (-)S
-1.997 N (-)S
-1.997 N (-)S
-1.997 N (-)S
-1.997 N (-)S
-1.997 N (-)S
-1.997 N (-)S
-1.997 N (-)S
-1.997 N (-)S
-1.997 N (-)S
-1.997 N (-)S
-1.997 N (-)S
-1.997 N (-)S
-1.997 N (-)S
-1.997 N (-)S
-1.997 N (-)S
-1.997 N (-)S
-1.997 N (-)S
-1.997 N (-)S
-1.997 N (-)S
-1.997 N (-)S
-1.997 N (-)S
-1.997 N (-)S
-1.997 N (-)S
-1.997 N (-)S
-1.997 N (-)S
-1.997 N (-)S
-1.997 N (-)S
-1.997 N (-)S
-1.997 N (-)S
-1.997 N (-)S
-1.997 N (-)S
-1.997 N (-)S
-1.997 N (-)S
-1.997 N (-)S
-1.997 N (-)S
-1.997 N (-)S
-3.536 N (-)S
-307.186 N (\320)S
-67.396 N (=)S
end
gR
gS 0 0 584 768 rC
1833 0 :M
FrameMacDict begin
0 0 0 1 0 0 0 FmK
0 FmP
[/CropBox[-14 773 FmDC 598 -19 FmDC]/PAGE FmPD
end
endp
%%Page: 14 14
%%BeginPageSetup
initializepage
(W. Kahan; page: 14 of 30)setjob
%%EndPageSetup
gS 0 0 584 768 rC
1 G
-14 -19 612 792 rF
0 G
1833 0 :M
FrameMacDict begin
0 0 0 1 0 0 0 FmK
0 FmP
0 FmSP
7 FmP
58 17 468 10 FmqF
end
1833 0 :M
f0_10 sf
( )S
1835 0 :M
FrameMacDict begin
0 0 0 1 0 0 0 FmK
0 FmP
58 23.82 M (Work in Progress:                          Lecture Notes on the Status of  IEEE 754                            )S
(August 17, 1995)S
7 FmP
58 729.678 468 10 FmqF
0 FmP
494.064 736.498 M (Page )S
(14)S
7 FmP
58 53 468 648 FmqF
0 FmP
58 59.667 M (How many such examples are there?  Nobody knows how many programs would benefit from  Infinity  because it )S
58 71.667 M (remains unsupported by programming language standards,  and hence by most compilers,  though support in )S
58 83.667 M (hardware has been abundant for over a decade.  To get some idea of the impediment posed by lack of adequate )S
58 95.667 M (support,  try to program each of the two examples in a way that will compile correctly on every machine whose )S
58 107.667 M (hardware conforms to  IEEE 754.  That ordeal will explain why few programmers experiment with  Infinity,  )S
58 119.667 M (whence few programs use it.)S
58 143.667 M (In my experience with a few compilers that support  IEEE 754  on  PCs  and  Macintoshes,  Infinity  and  NaNs  )S
58 155.667 M (confer their greatest benefits by simplifying test programs,  which already tend to grossly worse complexity than the )S
58 167.667 M (software they are designed to validate.  Consequently my programs enjoy enhanced reliability because of  IEEE )S
58 179.667 M (754  regardless of whether it is in force where they run.)S
236.872 203.666 M (......  End of Digression ......)S
end
1836 0 :M
f0_12 sf
( )S
1839 0 :M
FrameMacDict begin
0 0 0 1 0 0 0 FmK
0 FmP
58 253 M (Exception:  )S
end
1839 0 :M
f1_12 sf
( )S
1842 0 :M
FrameMacDict begin
0 0 0 1 0 0 0 FmK
0 FmP
115.984 253 M (OVERFLOW.)S
end
1842 0 :M
f0_10 sf
( )S
1844 0 :M
FrameMacDict begin
0 0 0 1 0 0 0 FmK
0 FmP
58 265.666 M (This happens after an attempt to compute a finite result that would lie beyond the finite range of the floating-point )S
58 277.666 M (format for which it is destined.  The default specified in  IEEE 754  is to approximate that result by an appropriately )S
58 289.666 M (signed  Infinity.  Since it is approximate,  OVERFLOW  is also  INEXACT.  Often that approximation is )S
58 301.666 M (worthless;  it is almost always worthless in matrix computations,  and soon turns into  NaN  or,  worse,  misleading )S
58 313.666 M (numbers.  Consequently  OVERFLOW  is often trapped to abort seemingly futile computation sooner rather than )S
58 325.666 M (later.)S
58 349.666 M (Actually,  OVERFLOW  more often implies that a different computational path should be chosen than that no path )S
58 361.666 M (leads to the desired goal.  For example,  if the  Fortran  expression   x / SQRT\(x*x + y*y\)   encounters  )S
58 373.666 M (OVERFLOW  before the  SQRT  can be computed,  it should be replaced by something like)S
207.824 385.666 M (\(s*x\) / SQRT\( \(s*x\)*\(s*x\) + \(s*y\)*\(s*y\) \))S
58 397.666 M (with a suitably chosen tiny positive  Scale-Factor  s .  \( A power of  2  avoids roundoff.\)  The cost of computing and )S
58 409.666 M (applying  s  beforehand could be deemed the price paid for insurance against  OVERFLOW.  Is that price too high?)S
58 433.666 M (The biggest finite  IEEE 754 Double  is almost  1.8 e308 ,  which is so huge that  OVERFLOW  occurs extremely )S
58 445.666 M (rarely if not yet rarely enough to ignore.  The cost of defensive tests,  branches and scaling to avert  OVERFLOW  )S
58 457.666 M (seems too high a price to pay for insurance against an event that hardly ever happens.  A lessened average cost will )S
58 469.666 M (be incurred in most situations by first running without defensive scaling but with a judiciously placed test for  )S
58 481.666 M (OVERFLOW  \( and for severe  UNDERFLOW \);  in the example above the test should just precede the  SQRT.  )S
58 493.666 M (Only when necessary need scaling be instituted.  Thus our treatment of  OVERFLOW  has come down to this )S
58 505.666 M (question:  how best can  OVERFLOW  be detected?)S
58 529.666 M (The ideal test for  OVERFLOW  tests its flag;  but that flag cannot be mentioned in most programming languages )S
58 541.666 M (for lack of a name.  Next best are tests for  Infinities  and  NaNs  consequent upon  OVERFLOW,  but prevailing )S
58 553.666 M (programming languages lack names for them;  suitable tests have to be contrived.  For example,  the  C  predicate  )S
end
1844 0 :M
f3_10 sf
( )S
1850 0 :M
FrameMacDict begin
0 0 0 1 0 0 0 FmK
0 FmP
58 565.666 M 0 0 48(\(z != z\))FmTx
end
1850 0 :M
f0_10 sf
( )S
1852 0 :M
FrameMacDict begin
0 0 0 1 0 0 0 FmK
0 FmP
106 565.666 M (  is  True  only when  z  is  NaN  and the compiler has not  \322 )S
(optimized )S
(\323  overzealously;)S
end
1853 0 :M
f3_10 sf
( )S
1859 0 :M
FrameMacDict begin
0 0 0 1 0 0 0 FmK
0 FmP
58 577.666 M 0 0 168(\(1.0e37 /\(1 + fabs\(z\)\) == 0\))FmTx
end
1859 0 :M
f0_10 sf
( )S
1861 0 :M
FrameMacDict begin
0 0 0 1 0 0 0 FmK
0 FmP
226 577.666 M (  is  True  only when z  is infinite;  and  )S
end
1861 0 :M
f3_10 sf
( )S
1867 0 :M
FrameMacDict begin
0 0 0 1 0 0 0 FmK
0 FmP
385.68 577.666 M 0 0 60(\(z-z != 0\))FmTx
end
1867 0 :M
f0_10 sf
( )S
1869 0 :M
FrameMacDict begin
0 0 0 1 0 0 0 FmK
0 FmP
445.68 577.666 M (  is  True  only )S
58 589.666 M (when  z  is  NaN  or  infinite,  the  INVALID  trap has been disabled,  and optimization is not overzealous.)S
58 613.666 M (A third way to detect  OVERFLOW  is to enable its trap and attach a handler to it.  Even if a programming )S
58 625.666 M (language in use provides control structures for this purpose,  this approach is beset by hazards.  The worst is the )S
58 637.666 M (possibility that the handler may be entered inadvertently from unanticipated places.  Another hazard arises from the )S
58 649.666 M (concurrent execution of integer and floating-point operations;  by the time an  OVERFLOW  has been detected,  )S
58 661.666 M (data associated with it may have become inaccessible because of changes in pointers and indices.  Therefore this )S
58 673.666 M (approach works only when a copy of the data has been saved to be reprocessed by a different method than the one )S
58 685.666 M (thwarted by  OVERFLOW,  and when the scope of the handler has been properly localized;  note that the handler )S
58 697.666 M (must be detached before and reattached after functions that handle their own  OVERFLOWs  are executed.)S
[/CropBox[-14 773 FmDC 598 -19 FmDC]/PAGE FmPD
end
endp
%%Page: 15 15
%%BeginPageSetup
initializepage
(W. Kahan; page: 15 of 30)setjob
%%EndPageSetup
gS 0 0 584 768 rC
1 G
-14 -19 612 792 rF
0 G
1870 0 :M
FrameMacDict begin
0 0 0 1 0 0 0 FmK
0 FmP
0 FmSP
7 FmP
58 17 468 10 FmqF
end
1870 0 :M
f0_10 sf
( )S
1872 0 :M
FrameMacDict begin
0 0 0 1 0 0 0 FmK
0 FmP
58 23.82 M (Work in Progress:                          Lecture Notes on the Status of  IEEE 754                            )S
(August 17, 1995)S
7 FmP
58 729.678 468 10 FmqF
0 FmP
494.064 736.498 M (Page )S
(15)S
7 FmP
58 53 468 648 FmqF
0 FmP
58 59.667 M (The two costs,  of saving and scoping,  must be paid all the time even though  OVERFLOW  rarely occurs.  For )S
58 71.667 M (these reasons and more,  other approaches to the  OVERFLOW  problem are to be preferred,  but a more extensive )S
58 83.667 M (discussion of them lies beyond the intended scope of this document.)S
58 107.667 M (When  OVERFLOW\'s  trap is enabled,  the  IEEE 754  default  Infinity  is not generated;  instead,  the result\'s )S
58 119.667 M (exponent is  \322 )S
(wrapped,\323  which means in this case that the delivered result has an exponent too small by an )S
58 134.866 M (amount  2)S
end
1873 0 :M
f0_9 sf
( )S
1875 0 :M
FrameMacDict begin
0 0 0 1 0 0 0 FmK
0 FmP
FmG 97.995 130.866 M 0.978 0.978 scale (K-1)S FmR
end
1875 0 :M
f0_10 sf
( )S
1877 0 :M
FrameMacDict begin
0 0 0 1 0 0 0 FmK
0 FmP
111.646 134.866 M (\3413  that depends upon its format:)S
130 150.066 M (Double-Extended  )S
68.473 N (...  too small by  24576 ;   2)S
end
1877 0 :M
f0_9 sf
( )S
1879 0 :M
FrameMacDict begin
0 0 0 1 0 0 0 FmK
0 FmP
FmG 383.719 146.066 M 0.978 0.978 scale (24576)S FmR
end
1880 0 :M
f0_10 sf
( )S
1882 0 :M
FrameMacDict begin
0 0 0 1 0 0 0 FmK
0 FmP
405.67 150.066 M ( = 1.3 E 7398)S
130 165.266 M (Double   )S
107.064 N (...  too small by   1536 ;     2)S
end
1882 0 :M
f0_9 sf
( )S
1884 0 :M
FrameMacDict begin
0 0 0 1 0 0 0 FmK
0 FmP
FmG 386.219 161.266 M 0.978 0.978 scale (1536)S FmR
end
1884 0 :M
f0_10 sf
( )S
1886 0 :M
FrameMacDict begin
0 0 0 1 0 0 0 FmK
0 FmP
403.78 165.266 M ( = 2.4 E 462)S
130 180.466 M (Single   )S
110.946 N (...  too small by     192 ;      2)S
end
1887 0 :M
f0_9 sf
( )S
1889 0 :M
FrameMacDict begin
0 0 0 1 0 0 0 FmK
0 FmP
FmG 388.719 176.466 M 0.978 0.978 scale (192)S FmR
end
1889 0 :M
f0_10 sf
( )S
1891 0 :M
FrameMacDict begin
0 0 0 1 0 0 0 FmK
0 FmP
401.89 180.466 M ( = 6.3 E 57)S
end
1892 0 :M
f0_9 sf
( )S
1894 0 :M
FrameMacDict begin
0 0 0 1 0 0 0 FmK
0 FmP
130 191.799 M (\(  Though required by  IEEE 754,  the latter two are not performed by   ix87  nor  680x0)S
130 202.799 M (    nor some other machines without help from suitable trap-handling software. \))S
end
1894 0 :M
f0_10 sf
( )S
1896 0 :M
FrameMacDict begin
0 0 0 1 0 0 0 FmK
0 FmP
58 226.466 M (In effect,  the delivered result has been divided by a power of  2  so huge as to turn what would have overflowed )S
58 238.466 M (into a relatively small but predictable quantity that a trap-handler can reinterpret.  If there is no trap handler,  )S
58 250.466 M (computation will proceed with that smaller quantity or,  in the case of format-converting  FSTore  instructions,  )S
58 262.466 M (without storing anything.  The reason for exponent wrapping is explained after  UNDERFLOW.)S
end
1896 0 :M
f0_12 sf
( )S
1899 0 :M
FrameMacDict begin
0 0 0 1 0 0 0 FmK
0 FmP
58 347.799 M (Exception:  )S
end
1899 0 :M
f1_12 sf
( )S
1902 0 :M
FrameMacDict begin
0 0 0 1 0 0 0 FmK
0 FmP
115.984 347.799 M (UNDERFLOW)S
end
1902 0 :M
f0_12 sf
( )S
1905 0 :M
FrameMacDict begin
0 0 0 1 0 0 0 FmK
0 FmP
195.309 347.799 M (.)S
end
1905 0 :M
f0_10 sf
( )S
1907 0 :M
FrameMacDict begin
0 0 0 1 0 0 0 FmK
0 FmP
58 360.466 M (This happens after an attempt to approximate a nonzero result that lies closer to zero than the intended floating-)S
58 372.466 M (point destination\'s  \322 )S
(Normal )S
(\323  positive number nearest zero.  2.2 e-308  is that number for IEEE 754  Double.  A )S
58 384.466 M (nonzero  Double  result tinier than that must by default be rounded to a nearest  Subnormal  number,  whose )S
58 396.466 M (magnitude can run  from  2.2 e-308  down to  4.9 e-324  \( but with diminishing precision \),  or else by  0.0  when no )S
58 408.466 M (Subnormal is nearer.  IEEE 754  Extended  and  Single  formats have different  UNDERFLOW  thresholds,  for )S
58 420.466 M (which see the table  \322 )S
(Span and Precision of  IEEE 754  Floating-Point Formats )S
(\323  above.  If that rounding incurs no )S
58 432.466 M (error,  no  UNDERFLOW  is signaled.)S
58 456.466 M (Subnormal numbers,  also called  \322 )S
(Denormalized,\323  allow  UNDERFLOW  to occur  Gradually;  this means that )S
58 468.466 M (gaps between adjacent floating-point numbers do not widen suddenly as zero is passed.  That is why  Gradual  )S
58 480.466 M (UNDERFLOW  incurs errors no worse in absolute magnitude than rounding errors among  Normal  numbers.  No )S
58 492.466 M (such property is enjoyed by older schemes that,  lacking  Subnormals,  flush  UNDERFLOW  to zero abruptly and )S
58 504.466 M (suffer consequent anomalies more fundamental than afflict  Gradual  UNDERFLOW.)S
58 528.466 M (For example,  the  C  predicates  )S
end
1908 0 :M
f3_10 sf
( )S
1914 0 :M
FrameMacDict begin
0 0 0 1 0 0 0 FmK
0 FmP
190.173 528.466 M 0 0 36(x == y)FmTx
end
1914 0 :M
f0_10 sf
( )S
1916 0 :M
FrameMacDict begin
0 0 0 1 0 0 0 FmK
0 FmP
226.173 528.466 M (  and  )S
end
1916 0 :M
f3_10 sf
( )S
1922 0 :M
FrameMacDict begin
0 0 0 1 0 0 0 FmK
0 FmP
250.611 528.466 M 0 0 48(x-y == 0)FmTx
end
1922 0 :M
f0_10 sf
( )S
1924 0 :M
FrameMacDict begin
0 0 0 1 0 0 0 FmK
0 FmP
298.611 528.466 M (  are identical in the absence of  OVERFLOW  only if  )S
58 540.466 M (UNDERFLOW  is  Gradual.  That is so because  )S
end
1925 0 :M
f3_10 sf
( )S
1931 0 :M
FrameMacDict begin
0 0 0 1 0 0 0 FmK
0 FmP
255.156 540.466 M 0 0 18(x-y)FmTx
end
1931 0 :M
f0_10 sf
( )S
1933 0 :M
FrameMacDict begin
0 0 0 1 0 0 0 FmK
0 FmP
273.156 540.466 M (  cannot  UNDERFLOW Gradually;  if  )S
end
1933 0 :M
f3_10 sf
( )S
1939 0 :M
FrameMacDict begin
0 0 0 1 0 0 0 FmK
0 FmP
433.937 540.466 M 0 0 18(x-y)FmTx
end
1939 0 :M
f0_10 sf
( )S
1941 0 :M
FrameMacDict begin
0 0 0 1 0 0 0 FmK
0 FmP
451.937 540.466 M (  is  Subnormal  )S
58 552.466 M (then it is  Exact.  Without  Subnormal  numbers,  x/y  might be  0.95  and yet  x-y  could  UNDERFLOW  abruptly )S
58 564.466 M (to  0.0 ,  as could happen for  x  and  y  tinier than  20  times the tiniest nonzero  Normal  number.  Consequently,  )S
58 576.466 M (Gradual Underflow  simplifies a theorem very important for the attenuation of roundoff in numerical computation:)S
112 600.465 M (If  p  and  q  are floating-point numbers in the same format,  and if   1/2  )S
end
1942 0 :M
f4_10 sf
( )S
1944 0 :M
FrameMacDict begin
0 0 0 1 0 0 0 FmK
0 FmP
402.73 600.465 M (\243)S
end
1944 0 :M
f0_10 sf
( )S
1946 0 :M
FrameMacDict begin
0 0 0 1 0 0 0 FmK
0 FmP
408.218 600.465 M (  p/q  )S
end
1947 0 :M
f4_10 sf
( )S
1949 0 :M
FrameMacDict begin
0 0 0 1 0 0 0 FmK
0 FmP
430.997 600.465 M (\243)S
end
1949 0 :M
f0_10 sf
( )S
1951 0 :M
FrameMacDict begin
0 0 0 1 0 0 0 FmK
0 FmP
436.485 600.465 M (  2 ,   )S
112 612.465 M (then  p - q  is computable exactly   \( without a rounding  error \)   in that format.   But     )S
112 624.465 M (if  UNDERFLOW   is not  Gradual,  and if  p - q   UNDERFLOWs,   it is not exact.)S
58 648.465 M (More generally,  floating-point error-analysis is simplified by the knowledge,  first,  that  IEEE 754  rounds every )S
58 660.465 M (finite floating-point result to its best approximation by floating-point numbers of the chosen destination\'s format,  )S
58 672.465 M (and secondly that the approximation\'s absolute uncertainty  \( error bound \)  cannot increase as the result diminishes )S
58 684.465 M (in magnitude.  Error-analysis,  and therefore program validation,  is more complicated,  sometimes appallingly more )S
58 696.465 M (so,  on those currently existing machines that do not  UNDERFLOW Gradually.)S
[/CropBox[-14 773 FmDC 598 -19 FmDC]/PAGE FmPD
end
endp
%%Page: 16 16
%%BeginPageSetup
initializepage
(W. Kahan; page: 16 of 30)setjob
%%EndPageSetup
gS 0 0 584 768 rC
1 G
-14 -19 612 792 rF
0 G
1952 0 :M
FrameMacDict begin
0 0 0 1 0 0 0 FmK
0 FmP
0 FmSP
7 FmP
58 17 468 10 FmqF
end
1952 0 :M
f0_10 sf
( )S
1954 0 :M
FrameMacDict begin
0 0 0 1 0 0 0 FmK
0 FmP
58 23.82 M (Work in Progress:                          Lecture Notes on the Status of  IEEE 754                            )S
(August 17, 1995)S
7 FmP
58 729.678 468 10 FmqF
0 FmP
494.064 736.498 M (Page )S
(16)S
7 FmP
58 53 468 648 FmqF
0 FmP
58 59.667 M (Though afflicted by fewer anomalies,  Gradual UNDERFLOW  is not free of them.  For instance,  it is possible to )S
58 71.667 M (have   )S
end
1955 0 :M
f3_10 sf
( )S
1961 0 :M
FrameMacDict begin
0 0 0 1 0 0 0 FmK
0 FmP
84.377 71.667 M 0 0 66(x/y == 0.95)FmTx
end
1961 0 :M
f0_10 sf
( )S
1963 0 :M
FrameMacDict begin
0 0 0 1 0 0 0 FmK
0 FmP
150.377 71.667 M (   coexist with   )S
end
1963 0 :M
f3_10 sf
( )S
1969 0 :M
FrameMacDict begin
0 0 0 1 0 0 0 FmK
0 FmP
213.976 71.667 M 0 0 108(\(x*z\)/\(y*z\) == 0.5)FmTx
end
1969 0 :M
f0_10 sf
( )S
1971 0 :M
FrameMacDict begin
0 0 0 1 0 0 0 FmK
0 FmP
321.976 71.667 M (   because  )S
end
1972 0 :M
f3_10 sf
( )S
1978 0 :M
FrameMacDict begin
0 0 0 1 0 0 0 FmK
0 FmP
366.119 71.667 M 0 0 18(x*z)FmTx
end
1978 0 :M
f0_10 sf
( )S
1980 0 :M
FrameMacDict begin
0 0 0 1 0 0 0 FmK
0 FmP
384.119 71.667 M (  and probably also  )S
end
1980 0 :M
f3_10 sf
( )S
1986 0 :M
FrameMacDict begin
0 0 0 1 0 0 0 FmK
0 FmP
465.208 71.667 M 0 0 18(y*z)FmTx
end
1986 0 :M
f0_10 sf
( )S
1988 0 :M
FrameMacDict begin
0 0 0 1 0 0 0 FmK
0 FmP
483.208 71.667 M (  )S
58 83.667 M (UNDERFLOWed  to  Subnormal  numbers;  without  Subnormals  the last quotient turns into either an ephemeral  )S
58 95.667 M (0.0  or a persistent  NaN  \( INVALID 0/0 \).   Thus,  UNDERFLOW  cannot be ignored entirely whether  Gradual  )S
58 107.667 M (or not.)S
58 131.667 M (UNDERFLOWs  are uncommon.  Even if flushed to zero they rarely matter;  if handled  Gradually  they cause )S
58 143.667 M (harm extremely rarely.  That harmful remnant has to be treated much as  OVERFLOWs  are,  with testing and )S
58 155.667 M (scaling,  or trapping,  etc.  However,  the most common treatment is to ignore  UNDERFLOW  and then to blame )S
58 167.667 M (whatever harm is caused by doing so upon poor taste in someone else\'s choice of initial data.)S
58 191.666 M (UNDERFLOWs  resemble ants;  where there is one there are quite likely many more,  and they tend to come one )S
58 203.666 M (after another.  That tendency has no direct effect upon the  i387-486-Pentium  nor  M68881/2,  but it can severely )S
58 215.666 M (retard computation on other implementations of  IEEE 754  that have to trap to software to  UNDERFLOW  )S
58 227.666 M (Gradually  for lack of hardware to do it.  They take extra time to  Denormalize  after  UNDERFLOW  and/or,  )S
58 239.666 M (worse,  to prenormalize  Subnormals  before multiplication or division.  \( Gradual UNDERFLOW  requires no )S
58 251.666 M (prenormalization before addition or subtraction of numbers with the same format,  but computers usually do it )S
58 263.666 M (anyway if they have to trap  Subnormals.\)   Worse still is the threat of traps,  whether they occur or not,  to )S
58 275.666 M (machines like the  DEC Alpha  that cannot enable traps without hampering pipelining and/or concurrency;  such )S
58 287.666 M (machines are slowed also by  Gradual UNDERFLOWs  that do not occur!)S
58 311.666 M (Why should we care about such benighted machines?  They pose dilemmas for developers of applications software )S
58 323.666 M (designed to be portable  \(after recompilation\)  to those machines as well as ours.  To avoid sometimes severe )S
58 335.666 M (performance degradation by  Gradual UNDERFLOW,  developers will sometimes resort to simple-minded )S
58 347.666 M (alternatives.  The simplest violates  IEEE 754  by flushing every  UNDERFLOW  to  0.0 ,  and computers are being )S
58 359.666 M (sold that flush by default.  \( DEC Alpha  is a recent example;  it is advertised as conforming to  IEEE 754  without )S
58 371.666 M (mention of how slowly it runs with traps enabled for full conformity.\)  Applications designed with flushing in mind )S
58 383.666 M (may,  when run on  ix87s  and  Macs,  have to enable the  UNDERFLOW  trap and provide a handler that flushes to )S
58 395.666 M (zero,  thereby running slower to get generally worse results!  \( This is what  MathCAD  does on  PCs  and on  )S
58 407.666 M (Macintoshes.\)  Few applications are designed with flushing in mind nowadays;  since some of these might )S
58 419.666 M (malfunction if  UNDERFLOW  were made  Gradual  instead,  disabling the  ix87  UNDERFLOW  trap to speed )S
58 431.666 M (them up is not always a good idea.)S
58 458.866 M (A format\325s usable exponent range is widened by almost its precision  N  to fully  )S
end
1989 0 :M
f4_10 sf
( )S
1991 0 :M
FrameMacDict begin
0 0 0 1 0 0 0 FmK
0 FmP
383.173 458.866 M (\261)S
end
1991 0 :M
f0_10 sf
( )S
1993 0 :M
FrameMacDict begin
0 0 0 1 0 0 0 FmK
0 FmP
388.662 458.866 M (2)S
end
1994 0 :M
f0_9 sf
( )S
1996 0 :M
FrameMacDict begin
0 0 0 1 0 0 0 FmK
0 FmP
FmG 393.662 454.866 M 0.978 0.978 scale (K)S FmR
end
1996 0 :M
f0_10 sf
( )S
1998 0 :M
FrameMacDict begin
0 0 0 1 0 0 0 FmK
0 FmP
400 458.866 M (  as a by-product of  Gradual )S
58 470.866 M (Underflow;  were this its sole benefit,  its value to formats wider than  Single  could not justify its price.  Compared )S
58 482.866 M (with  Flush-to-Zero,  Gradual Underflow  taxes performance unless designers expend time and ingenuity or else )S
58 494.866 M (hardware.  Designers incapable of one of those expenditures but willing to cut a corner off  IEEE 754  exacerbate )S
58 506.866 M (market fragmentation,  which costs the rest of us cumulatively far more than whatever they saved.)S
end
1998 0 :M
f0_12 sf
( )S
2001 0 :M
FrameMacDict begin
0 0 0 1 0 0 0 FmK
0 FmP
181.7 568.199 M (......   Digression on  Gradual Underflow   ......)S
end
2001 0 :M
f0_10 sf
( )S
2003 0 :M
FrameMacDict begin
0 0 0 1 0 0 0 FmK
0 FmP
58 592.866 M (To put things in perspective,  here is an example of a kind that,  when it appears in benchmarks,  scares many )S
58 604.866 M (people into choosing  Flush-to-Zero  rather than  Gradual UNDERFLOW.  To simulate the diffusion of heat )S
58 616.866 M (through a conducting plate with edges held at fixed temperatures,  a rectangular mesh is drawn on the plate and )S
58 628.866 M (temperatures are computed only at intersections.  The finer the mesh,  the more accurate is the simulation.  Time is )S
58 640.866 M (discretized too;  at each timestep,  temperature at every interior point is replaced by a positively weighted average )S
58 652.866 M (of that point\'s temperature and those of nearest neighbors.   Simulation is more accurate for smaller timesteps,  )S
58 664.866 M (which entail larger numbers of timesteps and tinier weights on neighbors;  typically these weights are smaller than  )S
58 676.866 M (1/8 ,  and timesteps number in the thousands.)S
[/CropBox[-14 773 FmDC 598 -19 FmDC]/PAGE FmPD
end
endp
%%Page: 17 17
%%BeginPageSetup
initializepage
(W. Kahan; page: 17 of 30)setjob
%%EndPageSetup
gS 0 0 584 768 rC
1 G
-14 -19 612 792 rF
0 G
2004 0 :M
FrameMacDict begin
0 0 0 1 0 0 0 FmK
0 FmP
0 FmSP
7 FmP
58 17 468 10 FmqF
end
2004 0 :M
f0_10 sf
( )S
2006 0 :M
FrameMacDict begin
0 0 0 1 0 0 0 FmK
0 FmP
58 23.82 M (Work in Progress:                          Lecture Notes on the Status of  IEEE 754                            )S
(August 17, 1995)S
7 FmP
58 729.678 468 10 FmqF
0 FmP
494.064 736.498 M (Page )S
(17)S
7 FmP
58 53 468 648 FmqF
0 FmP
58 59.667 M (When edge temperatures are mostly fixed at  0 ,  and when interior temperatures are mostly initialized to  0 ,  then at )S
58 71.667 M (every timestep those nonzero temperatures next to zeros get multiplied by tiny weights as they diffuse to their )S
58 83.667 M (neighbors.  With fine meshes,  large numbers of timesteps can pass before nonzero temperatures have diffused )S
58 95.667 M (almost everywhere,  and then tiny weights can get raised to large powers,  so  UNDERFLOWs  are numerous.  If  )S
58 107.667 M (UNDERFLOW  is  Gradual,  denormalization will produce numerous subnormal numbers;  they slow computation )S
58 119.667 M (badly on a computer designed to handle subnormals slowly because the designer thought they would be rare.  )S
58 131.667 M (Flushing  UNDERFLOW  to zero does not slow computation on such a machine;  zeros created that way may speed )S
58 143.667 M (it up.)S
58 167.667 M (When this simulation figures in benchmarks that test computers\' speeds,  the temptation to turn slow  Gradual )S
58 179.667 M (UNDERFLOW  Off  and fast  Flush-to-Zero  On  is more than a marketing manager can resist.  Compiler vendors )S
58 191.666 M (succumb to the same temptation;  they make  Flush-to-Zero  their default.  Such practices bring to mind calamitous )S
58 203.666 M (explosions that afflicted high-pressure steam boilers  a century or so ago because attendants tied down noisy over-)S
58 215.666 M (pressure relief valves the better to sleep undisturbed.)S
end
2007 0 :M
f3_10 sf
( )S
2013 0 :M
FrameMacDict begin
0 0 0 1 0 0 0 FmK
0 FmP
58 227.666 M 0 0 432( +---------------------------------------------------------------------+)FmTx
58 239.666 M 0 0 432( |  Vast numbers of  UNDERFLOWs  usually signify that something about  |)FmTx
58 251.666 M 0 0 432( |  a program or its data is strange if not wrong;  this signal should |)FmTx
58 263.666 M 0 0 432( |  not be ignored,  much less squelched by flushing  UNDERFLOW  to  0.|)FmTx
58 275.666 M 0 0 432( +---------------------------------------------------------------------+)FmTx
end
2013 0 :M
f0_10 sf
( )S
2015 0 :M
FrameMacDict begin
0 0 0 1 0 0 0 FmK
0 FmP
58 287.666 M (What is strange about the foregoing simulation is that exactly zero temperatures occur rarely in  Nature,  mainly at )S
58 299.666 M (the boundary between colder ice and warmer water.  Initially increasing all temperatures by some negligible )S
58 314.866 M (amount,  say  10)S
end
2015 0 :M
f0_9 sf
( )S
2017 0 :M
FrameMacDict begin
0 0 0 1 0 0 0 FmK
0 FmP
FmG 123.823 310.866 M 0.978 0.978 scale (-30)S FmR
end
2017 0 :M
f0_10 sf
( )S
2019 0 :M
FrameMacDict begin
0 0 0 1 0 0 0 FmK
0 FmP
135.525 314.866 M ( ,  would not alter their physical significance but it would eliminate practically all  )S
58 326.866 M (UNDERFLOWs  and so render their treatment,  Gradual  or  Flush-to-Zero,  irrelevant.)S
58 350.866 M (To use such atypical zero data in a benchmark is justified only if it is intended to expose how long some hardware )S
58 362.866 M (takes to handle  UNDERFLOW  and subnormal numbers.  Unlike many other floating-point engines,  the  i387  and )S
58 374.866 M (its successors are slowed very little by subnormal numbers;  we should thank  Intel\'s  engineers for that and enjoy it )S
58 386.866 M (rather than resort to an inferior scheme which also runs slower on the  i387-etc.)S
235.622 410.866 M (......  End of Digression  ......)S
58 470.866 M (When  UNDERFLOW\'s  trap is enabled,  the  IEEE 754  default  Gradual Underflow  does not occur;  the result\'s )S
58 482.866 M (exponent is  \322 )S
(wrapped )S
(\323  instead,  which means in this case that the delivered result has an exponent too big by an )S
58 498.066 M (amount  2)S
end
2020 0 :M
f0_9 sf
( )S
2022 0 :M
FrameMacDict begin
0 0 0 1 0 0 0 FmK
0 FmP
FmG 97.995 494.066 M 0.978 0.978 scale (K-1)S FmR
end
2022 0 :M
f0_10 sf
( )S
2024 0 :M
FrameMacDict begin
0 0 0 1 0 0 0 FmK
0 FmP
111.646 498.066 M (\3413  that depends upon its format:)S
130 513.266 M (Double-Extended  )S
68.473 N (...  too big by  24576 ;   2)S
end
2025 0 :M
f0_9 sf
( )S
2027 0 :M
FrameMacDict begin
0 0 0 1 0 0 0 FmK
0 FmP
FmG 374.835 509.266 M 0.978 0.978 scale (24576)S FmR
end
2027 0 :M
f0_10 sf
( )S
2029 0 :M
FrameMacDict begin
0 0 0 1 0 0 0 FmK
0 FmP
396.786 513.266 M ( = 1.3 E 7398)S
130 528.466 M (Double   )S
107.064 N (...  too big by   1536 ;     2)S
end
2029 0 :M
f0_9 sf
( )S
2031 0 :M
FrameMacDict begin
0 0 0 1 0 0 0 FmK
0 FmP
FmG 377.335 524.466 M 0.978 0.978 scale (1536)S FmR
end
2032 0 :M
f0_10 sf
( )S
2034 0 :M
FrameMacDict begin
0 0 0 1 0 0 0 FmK
0 FmP
394.896 528.466 M ( = 2.4 E 462)S
130 543.665 M (Single   )S
110.946 N (...  too big by     192 ;      2)S
end
2034 0 :M
f0_9 sf
( )S
2036 0 :M
FrameMacDict begin
0 0 0 1 0 0 0 FmK
0 FmP
FmG 379.835 539.665 M 0.978 0.978 scale (192)S FmR
end
2036 0 :M
f0_10 sf
( )S
2038 0 :M
FrameMacDict begin
0 0 0 1 0 0 0 FmK
0 FmP
393.005 543.665 M ( = 6.3 E 57)S
end
2039 0 :M
f0_9 sf
( )S
2041 0 :M
FrameMacDict begin
0 0 0 1 0 0 0 FmK
0 FmP
130 554.999 M (\(  Though required by  IEEE 754,  the latter two wraps are not performed by   ix87  nor  680x0)S
130 565.999 M (    nor some other machines without help from suitable trap-handling software. \))S
end
2041 0 :M
f0_10 sf
( )S
2043 0 :M
FrameMacDict begin
0 0 0 1 0 0 0 FmK
0 FmP
58 589.665 M (In effect,  the delivered result has been multiplied by a power of  2  so huge as to turn what would have )S
58 601.665 M (underflowed into a relatively big but predictable quantity that a trap-handler can reinterpret.  If there is no trap )S
58 613.665 M (handler,  computation will proceed with that bigger quantity or,  in the case of format-converting  FSTore  )S
58 625.665 M (instructions,  without storing anything.)S
58 649.665 M (Exponent wrapping provides the fastest and most accurate way to compute extended products and quotients like)S
143.943 675.11 M (  )S
end
148 654 293 38 rC
2044 0 :M
f2_12 sf
( )S
2047 0 :M
FrameMacDict begin
148.943 654.999 291.114 36.598 FmKp
0 0 0 1 0 0 0 FmK
0 FmP
149.943 675.11 M (Q)S
185.171 664.999 M (a)S
end
2047 0 :M
f0_9 sf
( )S
2049 0 :M
FrameMacDict begin
148.943 654.999 291.114 36.598 FmKp
0 0 0 1 0 0 0 FmK
0 FmP
191.626 669.198 M (1)S
end
2049 0 :M
f2_12 sf
( )S
2052 0 :M
FrameMacDict begin
148.943 654.999 291.114 36.598 FmKp
0 0 0 1 0 0 0 FmK
0 FmP
208.891 664.999 M (b)S
end
2052 0 :M
f0_9 sf
( )S
2054 0 :M
FrameMacDict begin
148.943 654.999 291.114 36.598 FmKp
0 0 0 1 0 0 0 FmK
0 FmP
215.346 669.198 M (1)S
end
2054 0 :M
f0_12 sf
( )S
2057 0 :M
FrameMacDict begin
148.943 654.999 291.114 36.598 FmKp
0 0 0 1 0 0 0 FmK
0 FmP
199.125 664.999 M (+)S
end
2057 0 :M
f4_12 sf
( )S
2060 0 :M
FrameMacDict begin
148.943 654.999 291.114 36.598 FmKp
0 0 0 1 0 0 0 FmK
0 FmP
180.026 664.999 M (\()S
36.379 N (\))S
end
2060 0 :M
f2_12 sf
( )S
2063 0 :M
FrameMacDict begin
148.943 654.999 291.114 36.598 FmKp
0 0 0 1 0 0 0 FmK
0 FmP
242.538 664.999 M (a)S
end
2063 0 :M
f0_9 sf
( )S
2065 0 :M
FrameMacDict begin
148.943 654.999 291.114 36.598 FmKp
0 0 0 1 0 0 0 FmK
0 FmP
248.994 669.198 M (2)S
end
2065 0 :M
f2_12 sf
( )S
2068 0 :M
FrameMacDict begin
148.943 654.999 291.114 36.598 FmKp
0 0 0 1 0 0 0 FmK
0 FmP
266.258 664.999 M (b)S
end
2068 0 :M
f0_9 sf
( )S
2070 0 :M
FrameMacDict begin
148.943 654.999 291.114 36.598 FmKp
0 0 0 1 0 0 0 FmK
0 FmP
272.714 669.198 M (2)S
end
2071 0 :M
f0_12 sf
( )S
2074 0 :M
FrameMacDict begin
148.943 654.999 291.114 36.598 FmKp
0 0 0 1 0 0 0 FmK
0 FmP
256.492 664.999 M (+)S
end
2074 0 :M
f4_12 sf
( )S
2077 0 :M
FrameMacDict begin
148.943 654.999 291.114 36.598 FmKp
0 0 0 1 0 0 0 FmK
0 FmP
237.394 664.999 M (\()S
36.379 N (\))S
end
2077 0 :M
f2_12 sf
( )S
2080 0 :M
FrameMacDict begin
148.943 654.999 291.114 36.598 FmKp
0 0 0 1 0 0 0 FmK
0 FmP
299.906 664.999 M (a)S
end
2080 0 :M
f0_9 sf
( )S
2082 0 :M
FrameMacDict begin
148.943 654.999 291.114 36.598 FmKp
0 0 0 1 0 0 0 FmK
0 FmP
306.362 669.198 M (3)S
end
2082 0 :M
f2_12 sf
( )S
2085 0 :M
FrameMacDict begin
148.943 654.999 291.114 36.598 FmKp
0 0 0 1 0 0 0 FmK
0 FmP
323.626 664.999 M (b)S
end
2085 0 :M
f0_9 sf
( )S
2087 0 :M
FrameMacDict begin
148.943 654.999 291.114 36.598 FmKp
0 0 0 1 0 0 0 FmK
0 FmP
330.082 669.198 M (3)S
end
2087 0 :M
f0_12 sf
( )S
2090 0 :M
FrameMacDict begin
148.943 654.999 291.114 36.598 FmKp
0 0 0 1 0 0 0 FmK
0 FmP
313.86 664.999 M (+)S
end
2090 0 :M
f4_12 sf
( )S
2093 0 :M
FrameMacDict begin
148.943 654.999 291.114 36.598 FmKp
0 0 0 1 0 0 0 FmK
0 FmP
294.761 664.999 M (\()S
36.379 N (\))S
18.147 N (\274)S
-17.145 N (\()S
13.703 N (\))S
end
2093 0 :M
f2_12 sf
( )S
2096 0 :M
FrameMacDict begin
148.943 654.999 291.114 36.598 FmKp
0 0 0 1 0 0 0 FmK
0 FmP
391.965 664.999 M (a)S
end
2096 0 :M
f2_9 sf
( )S
2098 0 :M
FrameMacDict begin
148.943 654.999 291.114 36.598 FmKp
0 0 0 1 0 0 0 FmK
0 FmP
398.745 669.198 M (N)S
end
2098 0 :M
f2_12 sf
( )S
2101 0 :M
FrameMacDict begin
148.943 654.999 291.114 36.598 FmKp
0 0 0 1 0 0 0 FmK
0 FmP
417.791 664.999 M (b)S
end
2101 0 :M
f2_9 sf
( )S
2103 0 :M
FrameMacDict begin
148.943 654.999 291.114 36.598 FmKp
0 0 0 1 0 0 0 FmK
0 FmP
424.571 669.198 M (N)S
end
2104 0 :M
f0_12 sf
( )S
2107 0 :M
FrameMacDict begin
148.943 654.999 291.114 36.598 FmKp
0 0 0 1 0 0 0 FmK
0 FmP
408.026 664.999 M (+)S
end
2107 0 :M
f4_12 sf
( )S
2110 0 :M
FrameMacDict begin
148.943 654.999 291.114 36.598 FmKp
0 0 0 1 0 0 0 FmK
0 FmP
386.821 664.999 M (\()S
40.591 N (\))S
-206.006 N (\327)S
54.368 N (\327)S
54.368 N (\327)S
31.692 N (\327)S
end
2110 0 :M
f2_12 sf
( )S
2113 0 :M
FrameMacDict begin
148.943 654.999 291.114 36.598 FmKp
0 0 0 1 0 0 0 FmK
0 FmP
184.754 683.147 M (c)S
end
2113 0 :M
f0_9 sf
( )S
2115 0 :M
FrameMacDict begin
148.943 654.999 291.114 36.598 FmKp
0 0 0 1 0 0 0 FmK
0 FmP
190.536 687.346 M (1)S
end
2115 0 :M
f2_12 sf
( )S
2118 0 :M
FrameMacDict begin
148.943 654.999 291.114 36.598 FmKp
0 0 0 1 0 0 0 FmK
0 FmP
207.8 683.147 M (d)S
end
2118 0 :M
f0_9 sf
( )S
2120 0 :M
FrameMacDict begin
148.943 654.999 291.114 36.598 FmKp
0 0 0 1 0 0 0 FmK
0 FmP
214.508 687.346 M (1)S
end
2120 0 :M
f0_12 sf
( )S
2123 0 :M
FrameMacDict begin
148.943 654.999 291.114 36.598 FmKp
0 0 0 1 0 0 0 FmK
0 FmP
198.034 683.147 M (+)S
end
2123 0 :M
f4_12 sf
( )S
2126 0 :M
FrameMacDict begin
148.943 654.999 291.114 36.598 FmKp
0 0 0 1 0 0 0 FmK
0 FmP
179.61 683.147 M (\()S
35.957 N (\))S
end
2126 0 :M
f2_12 sf
( )S
2129 0 :M
FrameMacDict begin
148.943 654.999 291.114 36.598 FmKp
0 0 0 1 0 0 0 FmK
0 FmP
241.7 683.147 M (c)S
end
2129 0 :M
f0_9 sf
( )S
2131 0 :M
FrameMacDict begin
148.943 654.999 291.114 36.598 FmKp
0 0 0 1 0 0 0 FmK
0 FmP
247.482 687.346 M (2)S
end
2131 0 :M
f2_12 sf
( )S
2134 0 :M
FrameMacDict begin
148.943 654.999 291.114 36.598 FmKp
0 0 0 1 0 0 0 FmK
0 FmP
264.746 683.147 M (d)S
end
2134 0 :M
f0_9 sf
( )S
2136 0 :M
FrameMacDict begin
148.943 654.999 291.114 36.598 FmKp
0 0 0 1 0 0 0 FmK
0 FmP
271.454 687.346 M (2)S
end
2137 0 :M
f0_12 sf
( )S
2140 0 :M
FrameMacDict begin
148.943 654.999 291.114 36.598 FmKp
0 0 0 1 0 0 0 FmK
0 FmP
254.98 683.147 M (+)S
end
2140 0 :M
f4_12 sf
( )S
2143 0 :M
FrameMacDict begin
148.943 654.999 291.114 36.598 FmKp
0 0 0 1 0 0 0 FmK
0 FmP
236.555 683.147 M (\()S
35.957 N (\))S
end
2143 0 :M
f2_12 sf
( )S
2146 0 :M
FrameMacDict begin
148.943 654.999 291.114 36.598 FmKp
0 0 0 1 0 0 0 FmK
0 FmP
298.646 683.147 M (c)S
end
2146 0 :M
f0_9 sf
( )S
2148 0 :M
FrameMacDict begin
148.943 654.999 291.114 36.598 FmKp
0 0 0 1 0 0 0 FmK
0 FmP
304.428 687.346 M (3)S
end
2148 0 :M
f2_12 sf
( )S
2151 0 :M
FrameMacDict begin
148.943 654.999 291.114 36.598 FmKp
0 0 0 1 0 0 0 FmK
0 FmP
321.692 683.147 M (d)S
end
2151 0 :M
f0_9 sf
( )S
2153 0 :M
FrameMacDict begin
148.943 654.999 291.114 36.598 FmKp
0 0 0 1 0 0 0 FmK
0 FmP
328.4 687.346 M (3)S
end
2153 0 :M
f0_12 sf
( )S
2156 0 :M
FrameMacDict begin
148.943 654.999 291.114 36.598 FmKp
0 0 0 1 0 0 0 FmK
0 FmP
311.926 683.147 M (+)S
end
2156 0 :M
f4_12 sf
( )S
2159 0 :M
FrameMacDict begin
148.943 654.999 291.114 36.598 FmKp
0 0 0 1 0 0 0 FmK
0 FmP
293.501 683.147 M (\()S
35.957 N (\))S
18.147 N (\274)S
-17.145 N (\()S
13.703 N (\))S
end
2159 0 :M
f2_12 sf
( )S
2162 0 :M
FrameMacDict begin
148.943 654.999 291.114 36.598 FmKp
0 0 0 1 0 0 0 FmK
0 FmP
390.284 683.147 M (c)S
end
2162 0 :M
f2_9 sf
( )S
2164 0 :M
FrameMacDict begin
148.943 654.999 291.114 36.598 FmKp
0 0 0 1 0 0 0 FmK
0 FmP
396.282 687.346 M (M)S
end
2164 0 :M
f2_12 sf
( )S
2167 0 :M
FrameMacDict begin
148.943 654.999 291.114 36.598 FmKp
0 0 0 1 0 0 0 FmK
0 FmP
416.696 683.147 M (d)S
end
2167 0 :M
f2_9 sf
( )S
2169 0 :M
FrameMacDict begin
148.943 654.999 291.114 36.598 FmKp
0 0 0 1 0 0 0 FmK
0 FmP
423.62 687.346 M (M)S
end
2170 0 :M
f0_12 sf
( )S
2173 0 :M
FrameMacDict begin
148.943 654.999 291.114 36.598 FmKp
0 0 0 1 0 0 0 FmK
0 FmP
406.93 683.147 M (+)S
end
2173 0 :M
f4_12 sf
( )S
2176 0 :M
FrameMacDict begin
148.943 654.999 291.114 36.598 FmKp
0 0 0 1 0 0 0 FmK
0 FmP
385.139 683.147 M (\()S
42.689 N (\))S
-207.26 N (\327)S
53.946 N (\327)S
53.946 N (\327)S
31.692 N (\327)S
end
2176 0 :M
f0_12 sf
( )S
2179 0 :M
FrameMacDict begin
148.943 654.999 291.114 36.598 FmKp
0 0 0 1 0 0 0 FmK
0 FmP
177.607 675.11 M (-)S
-1.997 N (-)S
-1.997 N (-)S
-1.997 N (-)S
-1.997 N (-)S
-1.997 N (-)S
-1.997 N (-)S
-1.997 N (-)S
-1.997 N (-)S
-1.997 N (-)S
-1.997 N (-)S
-1.997 N (-)S
-1.997 N (-)S
-1.997 N (-)S
-1.997 N (-)S
-1.997 N (-)S
-1.997 N (-)S
-1.997 N (-)S
-1.997 N (-)S
-1.997 N (-)S
-1.997 N (-)S
-1.997 N (-)S
-1.997 N (-)S
-1.997 N (-)S
-1.997 N (-)S
-1.997 N (-)S
-1.997 N (-)S
-1.997 N (-)S
-1.997 N (-)S
-1.997 N (-)S
-1.997 N (-)S
-1.997 N (-)S
-1.997 N (-)S
-1.997 N (-)S
-1.997 N (-)S
-1.997 N (-)S
-1.997 N (-)S
-1.997 N (-)S
-1.997 N (-)S
-1.997 N (-)S
-1.997 N (-)S
-1.997 N (-)S
-1.997 N (-)S
-1.997 N (-)S
-1.997 N (-)S
-1.997 N (-)S
-1.997 N (-)S
-1.997 N (-)S
-1.997 N (-)S
-1.997 N (-)S
-1.997 N (-)S
-1.997 N (-)S
-1.997 N (-)S
-1.997 N (-)S
-1.997 N (-)S
-1.997 N (-)S
-1.997 N (-)S
-1.997 N (-)S
-1.997 N (-)S
-1.997 N (-)S
-1.997 N (-)S
-1.997 N (-)S
-1.997 N (-)S
-1.997 N (-)S
-1.997 N (-)S
-1.997 N (-)S
-1.997 N (-)S
-1.997 N (-)S
-1.997 N (-)S
-1.997 N (-)S
-1.997 N (-)S
-1.997 N (-)S
-1.997 N (-)S
-1.997 N (-)S
-1.997 N (-)S
-1.997 N (-)S
-1.997 N (-)S
-1.997 N (-)S
-1.997 N (-)S
-1.997 N (-)S
-1.997 N (-)S
-1.997 N (-)S
-1.997 N (-)S
-1.997 N (-)S
-1.997 N (-)S
-1.997 N (-)S
-1.997 N (-)S
-1.997 N (-)S
-1.997 N (-)S
-1.997 N (-)S
-1.997 N (-)S
-1.997 N (-)S
-1.997 N (-)S
-1.997 N (-)S
-1.997 N (-)S
-1.997 N (-)S
-1.997 N (-)S
-1.997 N (-)S
-1.997 N (-)S
-1.997 N (-)S
-1.997 N (-)S
-1.997 N (-)S
-1.997 N (-)S
-1.997 N (-)S
-1.997 N (-)S
-1.997 N (-)S
-1.997 N (-)S
-1.997 N (-)S
-1.997 N (-)S
-1.997 N (-)S
-1.997 N (-)S
-1.997 N (-)S
-1.997 N (-)S
-1.997 N (-)S
-1.997 N (-)S
-1.997 N (-)S
-1.997 N (-)S
-1.997 N (-)S
-1.997 N (-)S
-1.997 N (-)S
-1.997 N (-)S
-1.997 N (-)S
-1.997 N (-)S
-1.997 N (-)S
-1.997 N (-)S
-1.997 N (-)S
-1.997 N (-)S
-1.997 N (-)S
-1.997 N (-)S
-3.338 N (-)S
-273.215 N (=)S
end
gR
gS 0 0 584 768 rC
2179 0 :M
FrameMacDict begin
0 0 0 1 0 0 0 FmK
0 FmP
[/CropBox[-14 773 FmDC 598 -19 FmDC]/PAGE FmPD
end
endp
%%Page: 18 18
%%BeginPageSetup
initializepage
(W. Kahan; page: 18 of 30)setjob
%%EndPageSetup
gS 0 0 584 768 rC
1 G
-14 -19 612 792 rF
0 G
2179 0 :M
FrameMacDict begin
0 0 0 1 0 0 0 FmK
0 FmP
0 FmSP
7 FmP
58 17 468 10 FmqF
end
2179 0 :M
f0_10 sf
( )S
2181 0 :M
FrameMacDict begin
0 0 0 1 0 0 0 FmK
0 FmP
58 23.82 M (Work in Progress:                          Lecture Notes on the Status of  IEEE 754                            )S
(August 17, 1995)S
7 FmP
58 729.678 468 10 FmqF
0 FmP
494.064 736.498 M (Page )S
(18)S
7 FmP
58 53 468 648 FmqF
0 FmP
58 59.667 M (when  N  and  M  are huge and when the numerator and/or denominator are likely to encounter premature  OVER/)S
58 71.667 M (UNDERFLOW  even though the final value of  )S
end
2182 0 :M
f2_10 sf
( )S
2184 0 :M
FrameMacDict begin
0 0 0 1 0 0 0 FmK
0 FmP
250.439 71.667 M (Q)S
end
2184 0 :M
f0_10 sf
( )S
2186 0 :M
FrameMacDict begin
0 0 0 1 0 0 0 FmK
0 FmP
257.658 71.667 M (   would be unexceptional if it could be computed.  This situation )S
58 83.667 M (arises in certain otherwise attractive algorithms for calculating eigensystems,  or  Hypergeometric  series,  for )S
58 95.667 M (example.)S
58 119.667 M (What  )S
end
2187 0 :M
f2_10 sf
( )S
2189 0 :M
FrameMacDict begin
0 0 0 1 0 0 0 FmK
0 FmP
84.655 119.667 M (Q)S
end
2189 0 :M
f0_10 sf
( )S
2191 0 :M
FrameMacDict begin
0 0 0 1 0 0 0 FmK
0 FmP
91.875 119.667 M (   requires is an  OVER/UNDERFLOW  trap-handler that counts  OVERFLOWs  and  UNDERFLOWs  )S
58 131.667 M (but leaves wrapped exponents unchanged during each otherwise unaltered loop that computes separately the )S
58 143.667 M (numerator\'s and denominator\'s product of sums.  The final quotient of products will have the correct significant bits )S
58 155.667 M (but an exponent which,  if wrong,  can be corrected by taking counts into account.  This is by far the most )S
58 167.667 M (satisfactory way to compute  )S
end
2192 0 :M
f2_10 sf
( )S
2194 0 :M
FrameMacDict begin
0 0 0 1 0 0 0 FmK
0 FmP
175.454 167.667 M (Q)S
end
2194 0 :M
f0_10 sf
( )S
2196 0 :M
FrameMacDict begin
0 0 0 1 0 0 0 FmK
0 FmP
182.673 167.667 M ( ,  but for lack of suitable trap-handlers it is hardly ever exploited though it was )S
58 179.667 M (implemented on machines as diverse as the  IBM 7094  and  /360  \( by me in  Toronto  in the  1960s;  see  Sterbenz )S
58 191.666 M (\(1974\) \),  a  Burroughs B5500  \( by  Michael Green   at  Stanford  in  1966 \),  and a  DEC VAX \( in  1981  by  )S
58 203.666 M (David Barnett,  then an undergraduate at  Berkeley \).  Every compiler seems to require its own implementation.)S
end
2197 0 :M
f0_12 sf
( )S
2200 0 :M
FrameMacDict begin
0 0 0 1 0 0 0 FmK
0 FmP
58 265 M (Exception:  )S
end
2200 0 :M
f1_12 sf
( )S
2203 0 :M
FrameMacDict begin
0 0 0 1 0 0 0 FmK
0 FmP
115.984 265 M (INEXACT)S
end
2203 0 :M
f0_12 sf
( )S
2206 0 :M
FrameMacDict begin
0 0 0 1 0 0 0 FmK
0 FmP
171.312 265 M (.)S
end
2206 0 :M
f0_10 sf
( )S
2208 0 :M
FrameMacDict begin
0 0 0 1 0 0 0 FmK
0 FmP
58 277.666 M (This is signaled whenever the ideal result of an arithmetic operation would not fit into its intended destination,  so )S
58 289.666 M (the result had to be altered by rounding it off to fit.  The  INEXACT  trap is disabled and its flag ignored by almost )S
58 301.666 M (all floating-point software.  This signal can be used to improve the accuracy of extremely delicate approximate )S
58 313.666 M (computations by  \322 )S
(Exact Preconditioning,\323  a scheme too arcane to be explained here;  for an example see  pp. 107-)S
58 325.666 M (110  of  Hewlett-Packard\325s HP-15C )S
end
2208 0 :M
f2_10 sf
( )S
2210 0 :M
FrameMacDict begin
0 0 0 1 0 0 0 FmK
0 FmP
203.5 325.666 M (Advanced Functions Handbook)S
end
2211 0 :M
f0_10 sf
( )S
2213 0 :M
FrameMacDict begin
0 0 0 1 0 0 0 FmK
0 FmP
329.575 325.666 M ( \(1982\) #00015-90011.  Only exact integer )S
58 337.666 M (computation will be considered now.)S
58 361.666 M (M680x0s  and  ix87s  can handle integers up to  65  bits wide including sign,  and convert all narrower integers to )S
58 373.666 M (this format on the fly.  In consequence,  arithmetic with wide integers may go faster in floating-point than in integer )S
58 385.666 M (registers at most  32  bits wide.  Even so,  an integer result can get too wide to fit exactly in floating-point,  and then )S
58 397.666 M (will be rounded off.  If this rounding went unnoticed it could lead to final results that were all unaccountably )S
58 409.666 M (multiples of  16  for lack of their last few bits.  Instead,  the  INEXACT  exception serves in lieu of an  INTEGER )S
58 421.666 M (OVERFLOW  signal;  it can be trapped or flagged.)S
58 445.666 M (Well implemented  Binary-Decimal  conversion software signals  INEXACT  just when it is deserved,  just as )S
58 457.666 M (rational operations and square root do.  However,  transcendental functions like  X**Y  may on occasion deliver )S
58 469.666 M (exact results and yet signal  INEXACT  undeservedly;  such a signal is very difficult to prevent.)S
end
2213 0 :M
f1_12 sf
( )S
2216 0 :M
FrameMacDict begin
0 0 0 1 0 0 0 FmK
0 FmP
58 523.999 M (Directions)S
end
2216 0 :M
f0_12 sf
( )S
2219 0 :M
FrameMacDict begin
0 0 0 1 0 0 0 FmK
0 FmP
110.641 523.999 M (  of  Rounding:)S
end
2219 0 :M
f0_10 sf
( )S
2221 0 :M
FrameMacDict begin
0 0 0 1 0 0 0 FmK
0 FmP
58 536.666 M (The default,  reset by turning power off-on,  rounds every arithmetic operation to the nearest value allowed by the )S
58 548.666 M (assigned precision of rounding.  When that nearest value is ambiguous  \( because the exact result would be one bit )S
58 560.666 M (wider than the precision calls for \)  the rounded result is the  \322 )S
(even )S
(\323  one with its last bit zero.  Note that rounding )S
58 572.666 M (to the nearest  16-,  32-  or  64-bit  integer  \( float-to-int  store \)  in this way takes both  1.5  and  2.5  to  2 ,  so the )S
58 584.666 M (various  INT,  IFIX,  ...  conversions to integer supported by diverse languages may require something else.  One of )S
58 596.666 M (my  Fortran  compilers makes the following distinctions among roundings to nearest integers:)S
130 620.666 M (IRINT,  RINT, DRINT    round to nearest even,  as  ix87 FIST  does.)S
130 632.666 M (NINT, ANINT, DNINT     round half-integers away from  0 .)S
130 644.666 M (INT, AINT, DINT        truncate to integers towards  0 .)S
58 668.666 M (Rounding towards  0  causes subsequent arithmetic operations to be truncated,  rather than rounded,  to the nearest )S
58 680.666 M (value in the direction of  0.0 .  In this mode,  store-to-int provides  INT  etc.  This mode also resembles the way )S
58 692.666 M (many old machines now long gone used to round.)S
[/CropBox[-14 773 FmDC 598 -19 FmDC]/PAGE FmPD
end
endp
%%Page: 19 19
%%BeginPageSetup
initializepage
(W. Kahan; page: 19 of 30)setjob
%%EndPageSetup
gS 0 0 584 768 rC
1 G
-14 -19 612 792 rF
0 G
2222 0 :M
FrameMacDict begin
0 0 0 1 0 0 0 FmK
0 FmP
0 FmSP
7 FmP
58 17 468 10 FmqF
end
2222 0 :M
f0_10 sf
( )S
2224 0 :M
FrameMacDict begin
0 0 0 1 0 0 0 FmK
0 FmP
58 23.82 M (Work in Progress:                          Lecture Notes on the Status of  IEEE 754                            )S
(August 17, 1995)S
7 FmP
58 729.678 468 10 FmqF
0 FmP
494.064 736.498 M (Page )S
(19)S
7 FmP
58 53 468 648 FmqF
0 FmP
58 59.667 M (The  \322 )S
(Directed )S
(\323  roundings can be used to implement  Interval Arithmetic,  which is a scheme that approximate )S
58 71.667 M (every variable not by one value of unknown reliability but by two that are guaranteed to straddle the ideal value.  )S
58 83.667 M (This scheme is not so popular in the  U.S.A.  as it is in parts of  Europe,  where some people distrust computers.)S
58 107.667 M (Control-Word  control of rounding modes allows software modules to be re-run in different rounding modes )S
58 119.667 M (without recompilation.  This cannot be done with some other computers,  notably  DEC Alpha,  that can set two bits )S
58 131.667 M (in every instruction to control rounding direction at compile-time;  that is a mistake.  It is worsened by the )S
58 143.667 M (designers\' decision to take rounding direction from a  Control-Word  when the two bits are set to what would )S
58 155.667 M (otherwise have been one of the directed roundings;  had Alpha  obtained only the round-to-nearest mode from the  )S
58 167.667 M (Control-Word,  their mistake could have been transformed into an advantageous feature.)S
58 191.666 M (All these rounding modes round to a value drawn from the set of values representable either with the precision of )S
58 203.666 M (the destination or selected by rounding precision control to be described below.  The sets of representable values )S
58 215.666 M (were spelled out in tables above.  The direction of rounding can also affect  OVER/UNDERFLOW ;  a positive )S
58 227.666 M (quantity that would  OVERFLOW  to  +Infinity  in the default mode will turn into the format\'s biggest finite )S
58 239.666 M (floating-point number when rounded towards  -Infinity.  And the expression  \322 )S
(X - X )S
(\323  delivers  +0.0  for every )S
58 251.666 M (finite  X  in all rounding modes except for rounding directed towards  -Infinity,  for which  -0.0  is delivered )S
58 263.666 M (instead.  These details are designed to make  Interval Arithmetic  work better.)S
58 287.666 M (Ideally,  software that performs  Binary-Decimal  conversion  \( both ways \)  should respect the requested direction )S
58 299.666 M (of rounding.  David Gay  of  AT&T Bell Labs  has released algorithms that do so into the public domain  \( Netlib \);  )S
58 311.666 M (to use less accurate methods now is a blunder.)S
end
2225 0 :M
f1_12 sf
( )S
2228 0 :M
FrameMacDict begin
0 0 0 1 0 0 0 FmK
0 FmP
58 361 M (Precisions)S
end
2228 0 :M
f0_12 sf
( )S
2231 0 :M
FrameMacDict begin
0 0 0 1 0 0 0 FmK
0 FmP
109.981 361 M (  of  Rounding:)S
end
2231 0 :M
f0_10 sf
( )S
2233 0 :M
FrameMacDict begin
0 0 0 1 0 0 0 FmK
0 FmP
58 373.666 M (IEEE 754  obliges only machines that compute in the  Extended  \( )S
end
2233 0 :M
f3_10 sf
( )S
2239 0 :M
FrameMacDict begin
0 0 0 1 0 0 0 FmK
0 FmP
324.592 373.666 M 0 0 66(long double)FmTx
end
2239 0 :M
f0_10 sf
( )S
2241 0 :M
FrameMacDict begin
0 0 0 1 0 0 0 FmK
0 FmP
390.592 373.666 M (   or  REAL*10 \)  format to let )S
58 385.666 M (programmers control the precision of rounding from a  Control-Word.  This lets  ix87  or  M680x0   emulate the )S
58 397.666 M (roundoff characteristics of other machines that conform to  IEEE 754  but support only  Single  \( C\'s  )S
end
2242 0 :M
f3_10 sf
( )S
2248 0 :M
FrameMacDict begin
0 0 0 1 0 0 0 FmK
0 FmP
464.384 397.666 M 0 0 30(float)FmTx
end
2248 0 :M
f0_10 sf
( )S
2250 0 :M
FrameMacDict begin
0 0 0 1 0 0 0 FmK
0 FmP
494.384 397.666 M (,  or  )S
58 409.666 M (REAL*4 \)  and  Double \( C\'s  )S
end
2250 0 :M
f3_10 sf
( )S
2256 0 :M
FrameMacDict begin
0 0 0 1 0 0 0 FmK
0 FmP
179.494 409.666 M 0 0 36(double)FmTx
end
2256 0 :M
f0_10 sf
( )S
2258 0 :M
FrameMacDict begin
0 0 0 1 0 0 0 FmK
0 FmP
215.494 409.666 M (,  or  REAL*8 \),  not  Extended.  Software developed and checked out on )S
58 421.666 M (one of those machines can be recompiled for a  680x0  or  ix87  and,  if anomalies excite concerns about differences )S
58 433.666 M (in roundoff,  the software can be run very nearly as if on its original host without sacrificing speed on the  680x0  )S
58 445.666 M (or  ix87.  Conversely,  software developed on these machines but without explicit mention of  Extended  can be )S
58 457.666 M (rerun in a way that portends what it will do on machines that lack  Extended.  Precision Control  rounds to  24  sig. )S
58 469.666 M (bits to emulate  Single,  to  53  sig. bits to emulate  Double,  leaving zeros in the rest of the  64  sig. bits of the  )S
58 481.666 M (Extended  format.)S
58 505.666 M (The emulation is imperfect.  Transcendental functions are unlikely to match.  Although  Decimal -> Binary   )S
58 517.666 M (conversion must round to whatever precision is set by the  Control-Word,   Binary -> Decimal  should ideally be )S
58 529.666 M (unaffected since its precision is determined solely by the destination\325s format,  but ideals are not always attained.  )S
58 541.666 M (Some  OVER/UNDERFLOWs  that would occur on those other machines need not occur on the  ix87 ;  IEEE 754  )S
58 553.666 M (allows this,  perhaps unwisely,  to relieve hardware implementors of details formerly thought unimportant.)S
58 577.666 M (Few compilers expose the  Control-Word  to programmers.  Worse,  some compilers have revived a nasty bug that )S
58 589.666 M (emerged when  Double-Precision  first appeared among  Fortran  compilers;  it goes like this:  Consider)S
202 601.666 M (S  =  X)S
202 613.666 M (T  =  \( S - Y \)/\( . . . \))S
58 625.666 M (in a  Fortran  program where  S  is  SINGLE PRECISION,  and  X  and  Y  are  DOUBLE  or  EXTENDED )S
58 637.666 M (PRECISION  variables or expressions computed in registers.  Compilers that supplant  S  by  X  in the second )S
58 649.666 M (statement save the time required to reload  S  from memory but spoil  T .  Though  S  and  X  differ by merely a )S
58 661.666 M (rounding error,  the difference matters.)S
[/CropBox[-14 773 FmDC 598 -19 FmDC]/PAGE FmPD
end
endp
%%Page: 20 20
%%BeginPageSetup
initializepage
(W. Kahan; page: 20 of 30)setjob
%%EndPageSetup
gS 0 0 584 768 rC
1 G
-14 -19 612 792 rF
0 G
2259 0 :M
FrameMacDict begin
0 0 0 1 0 0 0 FmK
0 FmP
0 FmSP
7 FmP
58 17 468 10 FmqF
end
2259 0 :M
f0_10 sf
( )S
2261 0 :M
FrameMacDict begin
0 0 0 1 0 0 0 FmK
0 FmP
58 23.82 M (Work in Progress:                          Lecture Notes on the Status of  IEEE 754                            )S
(August 17, 1995)S
7 FmP
58 729.678 468 10 FmqF
0 FmP
494.064 736.498 M (Page )S
(20)S
7 FmP
58 53 468 648 FmqF
end
2262 0 :M
f1_12 sf
( )S
2265 0 :M
FrameMacDict begin
0 0 0 1 0 0 0 FmK
0 FmP
58 61 M (The Baleful Influence of Benchmarks:)S
end
2265 0 :M
f0_10 sf
( )S
2267 0 :M
FrameMacDict begin
0 0 0 1 0 0 0 FmK
0 FmP
58 73.667 M (Hardware and compilers are increasingly being rated entirely according to their performance in benchmarks that )S
58 85.667 M (measure only speed.  That is a mistake committed because speed is so much easier to measure than other qualities )S
58 97.667 M (like reliability and convenience.  Sacrificing them in order to run faster will compel us to run longer.  By )S
58 109.667 M (disregarding worthwhile qualities other than speed,  current benchmarks penalize conscientious adherence to )S
58 121.667 M (standards like  IEEE 754;  worse,  attempts to take those qualities into account are thwarted by political constraints )S
58 133.667 M (imposed upon programs that might otherwise qualify as benchmarks.)S
58 157.667 M (For example,  a benchmark should compile and run on every commercially significant computer system.  This rules )S
58 169.667 M (out our programs for solving the differential equation and the eigenvalue problem described above under the  )S
58 181.667 M (Digression on Division-by-Zero.  To qualify as benchmarks,  programs must prevent exceptional events that might )S
58 193.667 M (stop or badly slow some computers even if such prevention retards performance on computers that,  by conforming )S
58 205.666 M (conscientiously to  IEEE 754,  would not stop.)S
58 229.666 M (The  Digression on Gradual Underflow  offered an example of a benchmark that lent credibility to a misguided )S
58 241.666 M (preference for  Flush-to-Zero,  in so far as it runs faster than  Gradual Underflow  on some computers,  by )S
58 253.666 M (disregarding accuracy.  If  Gradual Underflow\'s  superior accuracy has no physical significance there,  neither has )S
58 265.666 M (the benchmark\'s data.)S
58 289.666 M (Accuracy poses tricky questions for benchmarks.  One hazard is the ...)S
end
2267 0 :M
f0_12 sf
( )S
2270 0 :M
FrameMacDict begin
0 0 0 1 0 0 0 FmK
0 FmP
94 315 M (Stopped Clock Paradox:)S
end
2270 0 :M
f0_10 sf
( )S
2272 0 :M
FrameMacDict begin
0 0 0 1 0 0 0 FmK
0 FmP
210.646 315 M (  Why is a mechanical clock more accurate stopped than running?         )S
94 327.666 M (A running clock is almost never exactly right,  whereas a stopped clock is exactly right twice a day.  )S
94 339.666 M (\( )S
end
2273 0 :M
f2_10 sf
( )S
2275 0 :M
FrameMacDict begin
0 0 0 1 0 0 0 FmK
0 FmP
99.828 339.666 M (But  WHEN  is it right?  Alas,  that was not the question)S
end
2275 0 :M
f0_10 sf
( )S
2277 0 :M
FrameMacDict begin
0 0 0 1 0 0 0 FmK
0 FmP
323.98 339.666 M (.\))S
58 363.666 M (The computational version of this paradox is a benchmark that penalizes superior computers,  that produce merely )S
58 375.666 M (excellent approximate answers,  by making them seem less accurate than an inferior computer that gets exactly the )S
58 387.666 M (right answer for the benchmark\'s problem accidentally.  Other hazards exist too;  some will be illustrated by the )S
58 399.666 M (next example.)S
58 423.666 M (Quadratic equations like)S
247.088 438.866 M (p x)S
end
2278 0 :M
f0_9 sf
( )S
2280 0 :M
FrameMacDict begin
0 0 0 1 0 0 0 FmK
0 FmP
FmG 259.588 434.866 M 0.978 0.978 scale (2)S FmR
end
2280 0 :M
f0_10 sf
( )S
2282 0 :M
FrameMacDict begin
0 0 0 1 0 0 0 FmK
0 FmP
263.978 438.866 M (  -  2 q x  +  r  =  0)S
58 450.866 M (arise often enough to justify tendering a program that solves it to serve as a benchmark.  When the equation\'s roots  )S
58 462.866 M (x1  and  x2  are known in advance both to be real,  the simplest such program is the procedure  )S
end
2282 0 :M
f3_10 sf
( )S
2288 0 :M
FrameMacDict begin
0 0 0 1 0 0 0 FmK
0 FmP
438.974 462.866 M 0 0 30(Qdrtc)FmTx
end
2288 0 :M
f0_10 sf
( )S
2290 0 :M
FrameMacDict begin
0 0 0 1 0 0 0 FmK
0 FmP
468.974 462.866 M (  exhibited )S
58 474.866 M (on the next page.)S
58 498.866 M (In the absence of premature  Over/Underflow,  )S
end
2291 0 :M
f3_10 sf
( )S
2297 0 :M
FrameMacDict begin
0 0 0 1 0 0 0 FmK
0 FmP
247.617 498.866 M 0 0 30(Qdrtc)FmTx
end
2297 0 :M
f0_10 sf
( )S
2299 0 :M
FrameMacDict begin
0 0 0 1 0 0 0 FmK
0 FmP
277.617 498.866 M (   computes  x1  and  x2  at least about as accurately as they )S
58 510.866 M (are determined by data  { p, q, r }  uncorrelatedly uncertain in their last digits stored.  It should be tested first on )S
58 522.866 M (trivial data to confirm that it has not been corrupted by a misprint nor by an ostensible correction like   )S
58 534.866 M (\322 )S
( )S
(x1 )S
(:= )S
(\(q+s\)/p )S
(;   x2 )S
(:= )S
(\(q-s\)/p )S
( )S
(\323   copied naively from some elementary programming text.  Here are some trivial )S
58 546.866 M (data:)S
130 566.866 M ({ p = Any nonzero,  q = r = 0 };            x1 = x2 = 0 .)S
130 586.866 M ({ p = 2.0 ,   q = 5.0 ,   r = 12.0 };          x1 = 2.0 ,   x2 = 3.0 .)S
130 606.866 M ({ p = 2.0 E-37,   q = 1.0 ,   r = 2.0 };     x1 )S
end
2299 0 :M
f4_10 sf
( )S
2301 0 :M
FrameMacDict begin
0 0 0 1 0 0 0 FmK
0 FmP
299.561 606.866 M (\273)S
end
2302 0 :M
f0_10 sf
( )S
2304 0 :M
FrameMacDict begin
0 0 0 1 0 0 0 FmK
0 FmP
305.049 606.866 M ( 1.0 ,   x2 )S
end
2304 0 :M
f4_10 sf
( )S
2306 0 :M
FrameMacDict begin
0 0 0 1 0 0 0 FmK
0 FmP
345.049 606.866 M (\273)S
end
2307 0 :M
f0_10 sf
( )S
2309 0 :M
FrameMacDict begin
0 0 0 1 0 0 0 FmK
0 FmP
350.537 606.866 M ( 1.0 E 37 .)S
130 626.866 M (Swapping  p  with  q  swaps  { x1, x2 }  with  { 1/x2, 1/x1 } .)S
130 646.866 M ({)S
end
2309 0 :M
f4_10 sf
( )S
2311 0 :M
FrameMacDict begin
0 0 0 1 0 0 0 FmK
0 FmP
134.8 646.866 M (m)S
end
2312 0 :M
f0_10 sf
( )S
2314 0 :M
FrameMacDict begin
0 0 0 1 0 0 0 FmK
0 FmP
140.559 646.866 M (*p, )S
end
2314 0 :M
f4_10 sf
( )S
2316 0 :M
FrameMacDict begin
0 0 0 1 0 0 0 FmK
0 FmP
155.559 646.866 M (m)S
end
2317 0 :M
f0_10 sf
( )S
2319 0 :M
FrameMacDict begin
0 0 0 1 0 0 0 FmK
0 FmP
161.318 646.866 M (*q, )S
end
2319 0 :M
f4_10 sf
( )S
2321 0 :M
FrameMacDict begin
0 0 0 1 0 0 0 FmK
0 FmP
176.318 646.866 M (m)S
end
2322 0 :M
f0_10 sf
( )S
2324 0 :M
FrameMacDict begin
0 0 0 1 0 0 0 FmK
0 FmP
182.078 646.866 M (*r}  yields  {x1, x2}  independently of nonzero  )S
end
2324 0 :M
f4_10 sf
( )S
2326 0 :M
FrameMacDict begin
0 0 0 1 0 0 0 FmK
0 FmP
375.872 646.866 M (m)S
end
2327 0 :M
f0_10 sf
( )S
2329 0 :M
FrameMacDict begin
0 0 0 1 0 0 0 FmK
0 FmP
381.631 646.866 M ( .)S
[/CropBox[-14 773 FmDC 598 -19 FmDC]/PAGE FmPD
end
endp
%%Page: 21 21
%%BeginPageSetup
initializepage
(W. Kahan; page: 21 of 30)setjob
%%EndPageSetup
gS 0 0 584 768 rC
1 G
-14 -19 612 792 rF
0 G
2329 0 :M
FrameMacDict begin
0 0 0 1 0 0 0 FmK
0 FmP
0 FmSP
7 FmP
58 17 468 10 FmqF
end
2329 0 :M
f0_10 sf
( )S
2331 0 :M
FrameMacDict begin
0 0 0 1 0 0 0 FmK
0 FmP
58 23.82 M (Work in Progress:                          Lecture Notes on the Status of  IEEE 754                            )S
(August 17, 1995)S
7 FmP
58 729.678 468 10 FmqF
0 FmP
494.064 736.498 M (Page )S
(21)S
7 FmP
58 53 468 648 FmqF
end
2332 0 :M
f0_12 sf
( )S
2335 0 :M
FrameMacDict begin
0 0 0 1 0 0 0 FmK
0 FmP
210.205 61 M (A Proposed Accuracy Benchmark)S
end
2335 0 :M
f3_10 sf
( )S
2341 0 :M
FrameMacDict begin
0 0 0 1 0 0 0 FmK
0 FmP
58 81.667 M 0 0 210(         Procedure  Qtest\( Qdrtc \):)FmTx
58 93.667 M 0 0 228(           Parameter  n = 15 ;   ...  )FmTx
end
2341 0 :M
f0_10 sf
( )S
2343 0 :M
FrameMacDict begin
0 0 0 1 0 0 0 FmK
0 FmP
286 93.667 M (In time,  n  may grow.)S
end
2343 0 :M
f3_10 sf
( )S
2349 0 :M
FrameMacDict begin
0 0 0 1 0 0 0 FmK
0 FmP
58 105.667 M 0 0 228(           Real Array  r[1:n] ;  ...  )FmTx
end
2349 0 :M
f0_10 sf
( )S
2351 0 :M
FrameMacDict begin
0 0 0 1 0 0 0 FmK
0 FmP
286 105.667 M (Choose precision here.)S
end
2352 0 :M
f3_10 sf
( )S
2358 0 :M
FrameMacDict begin
0 0 0 1 0 0 0 FmK
0 FmP
58 117.667 M 0 0 246(           r[1] := 2^12 + 2.0 ;      ... )FmTx
end
2358 0 :M
f0_10 sf
( )S
2360 0 :M
FrameMacDict begin
0 0 0 1 0 0 0 FmK
0 FmP
304 117.667 M (for   24 sig. bits,)S
end
2360 0 :M
f3_10 sf
( )S
2366 0 :M
FrameMacDict begin
0 0 0 1 0 0 0 FmK
0 FmP
58 129.667 M 0 0 288(           r[2] := 2^12 + 2.25 ;         ...    )FmTx
end
2366 0 :M
f0_10 sf
( )S
2368 0 :M
FrameMacDict begin
0 0 0 1 0 0 0 FmK
0 FmP
346 129.667 M (and 6 hex.)S
end
2369 0 :M
f3_10 sf
( )S
2375 0 :M
FrameMacDict begin
0 0 0 1 0 0 0 FmK
0 FmP
58 141.667 M 0 0 282(           r[3] := 16^3 + 1 + 1.0/16^2 ; ...   )FmTx
end
2375 0 :M
f0_10 sf
( )S
2377 0 :M
FrameMacDict begin
0 0 0 1 0 0 0 FmK
0 FmP
340 141.667 M (6  hex. IBM.)S
end
2377 0 :M
f3_10 sf
( )S
2383 0 :M
FrameMacDict begin
0 0 0 1 0 0 0 FmK
0 FmP
58 153.667 M 0 0 282(           r[4] := 2^24 + 2.0 ;          ...   )FmTx
end
2383 0 :M
f0_10 sf
( )S
2385 0 :M
FrameMacDict begin
0 0 0 1 0 0 0 FmK
0 FmP
340 153.667 M (48 bits CRAY -)S
end
2386 0 :M
f3_10 sf
( )S
2392 0 :M
FrameMacDict begin
0 0 0 1 0 0 0 FmK
0 FmP
58 165.667 M 0 0 294(           r[5] := 2^24 + 2.25 ;         ...     )FmTx
end
2392 0 :M
f0_10 sf
( )S
2394 0 :M
FrameMacDict begin
0 0 0 1 0 0 0 FmK
0 FmP
352 165.667 M (rounded;)S
end
2394 0 :M
f3_10 sf
( )S
2400 0 :M
FrameMacDict begin
0 0 0 1 0 0 0 FmK
0 FmP
58 177.667 M 0 0 282(           r[6] := 2^24 + 3.0 ;          ...   )FmTx
end
2400 0 :M
f0_10 sf
( )S
2402 0 :M
FrameMacDict begin
0 0 0 1 0 0 0 FmK
0 FmP
340 177.667 M (48 bits chopped.)S
end
2403 0 :M
f3_10 sf
( )S
2409 0 :M
FrameMacDict begin
0 0 0 1 0 0 0 FmK
0 FmP
58 189.667 M 0 0 282(           r[7] := 94906267.0 ;          ...   )FmTx
end
2409 0 :M
f0_10 sf
( )S
2411 0 :M
FrameMacDict begin
0 0 0 1 0 0 0 FmK
0 FmP
340 189.667 M (53  sig. bits.)S
end
2411 0 :M
f3_10 sf
( )S
2417 0 :M
FrameMacDict begin
0 0 0 1 0 0 0 FmK
0 FmP
58 201.666 M 0 0 282(           r[8] := 94906267 + 0.25 ;     ...   )FmTx
end
2417 0 :M
f0_10 sf
( )S
2419 0 :M
FrameMacDict begin
0 0 0 1 0 0 0 FmK
0 FmP
340 201.666 M (53  sig. bits.)S
end
2420 0 :M
f3_10 sf
( )S
2426 0 :M
FrameMacDict begin
0 0 0 1 0 0 0 FmK
0 FmP
58 213.666 M 0 0 282(           r[9] := 2^28 - 5.5 ;          ...   )FmTx
end
2426 0 :M
f0_10 sf
( )S
2428 0 :M
FrameMacDict begin
0 0 0 1 0 0 0 FmK
0 FmP
340 213.666 M (PowerPC, i860.)S
end
2428 0 :M
f3_10 sf
( )S
2434 0 :M
FrameMacDict begin
0 0 0 1 0 0 0 FmK
0 FmP
58 225.666 M 0 0 282(           r[10] := 2^28 - 4.5 ;         ...   )FmTx
end
2434 0 :M
f0_10 sf
( )S
2436 0 :M
FrameMacDict begin
0 0 0 1 0 0 0 FmK
0 FmP
340 225.666 M (PowerPC, i860.)S
end
2437 0 :M
f3_10 sf
( )S
2443 0 :M
FrameMacDict begin
0 0 0 1 0 0 0 FmK
0 FmP
58 237.666 M 0 0 282(           r[11] := 2^28 + 2.0 ;         ...   )FmTx
end
2443 0 :M
f0_10 sf
( )S
2445 0 :M
FrameMacDict begin
0 0 0 1 0 0 0 FmK
0 FmP
340 237.666 M (56  sig. bits,)S
end
2445 0 :M
f3_10 sf
( )S
2451 0 :M
FrameMacDict begin
0 0 0 1 0 0 0 FmK
0 FmP
58 249.666 M 0 0 282(           r[12] := 2^28 + 2.25 ;        ...   )FmTx
end
2451 0 :M
f0_10 sf
( )S
2453 0 :M
FrameMacDict begin
0 0 0 1 0 0 0 FmK
0 FmP
340 249.666 M (  and 14 hex.)S
end
2454 0 :M
f3_10 sf
( )S
2460 0 :M
FrameMacDict begin
0 0 0 1 0 0 0 FmK
0 FmP
58 261.666 M 0 0 282(           r[13] := 16^7 + 1 + 1.0/16^6 ; ...  )FmTx
end
2460 0 :M
f0_10 sf
( )S
2462 0 :M
FrameMacDict begin
0 0 0 1 0 0 0 FmK
0 FmP
340 261.666 M (14 hex. IBM.)S
end
2462 0 :M
f3_10 sf
( )S
2468 0 :M
FrameMacDict begin
0 0 0 1 0 0 0 FmK
0 FmP
58 273.666 M 0 0 282(           r[14] := 2^32 + 2.0 ;         ...   )FmTx
end
2468 0 :M
f0_10 sf
( )S
2470 0 :M
FrameMacDict begin
0 0 0 1 0 0 0 FmK
0 FmP
340 273.666 M (64  sig. bits.)S
end
2471 0 :M
f3_10 sf
( )S
2477 0 :M
FrameMacDict begin
0 0 0 1 0 0 0 FmK
0 FmP
58 285.666 M 0 0 282(           r[15] := 2^32 + 2.25 ;        ...   )FmTx
end
2477 0 :M
f0_10 sf
( )S
2479 0 :M
FrameMacDict begin
0 0 0 1 0 0 0 FmK
0 FmP
340 285.666 M (64  sig. bits.)S
end
2479 0 :M
f3_10 sf
( )S
2485 0 :M
FrameMacDict begin
0 0 0 1 0 0 0 FmK
0 FmP
58 297.666 M 0 0 162(           e := +Infinity ;)FmTx
58 309.666 M 0 0 210(           for  j := 1  to  n  do {)FmTx
58 321.666 M 0 0 294(             t := Qtrial\( Qdrtc, r[j] \) ;   ...  )FmTx
end
2485 0 :M
f0_10 sf
( )S
2487 0 :M
FrameMacDict begin
0 0 0 1 0 0 0 FmK
0 FmP
352 321.666 M (Could be  NaN.)S
end
2488 0 :M
f3_10 sf
( )S
2494 0 :M
FrameMacDict begin
0 0 0 1 0 0 0 FmK
0 FmP
58 333.666 M 0 0 348(             If  \(\(t < e\) or not\(t = t\)\)  then  e := t } ;)FmTx
58 345.666 M 0 0 372(           Display\( \" Worst accuracy is \", e, \" sig. bits\" \) ;)FmTx
58 357.666 M 0 0 198(            Return ;  End  Qtest.)FmTx
58 381.666 M 0 0 342(         Real Function  Log2\(x\) := Log\(Abs\(x\)\)/Log\(2.0\) ;)FmTx
58 405.666 M 0 0 258(         Real Function  Qtrial\( Qdrtc, r \):)FmTx
58 417.666 M 0 0 288(           p := r-2 ;  q := r-1 ;  Qtrial := 0 ;)FmTx
58 429.666 M 0 0 324(           Display\( Nameof\(Qdrtc\), \" for  r = \", r \) ;)FmTx
58 441.666 M 0 0 102(           If  p )FmTx
end
2494 0 :M
f4_10 sf
( )S
2496 0 :M
FrameMacDict begin
0 0 0 1 0 0 0 FmK
0 FmP
160 441.666 M 0 0 6(\243)FmTx
end
2496 0 :M
f3_10 sf
( )S
2502 0 :M
FrameMacDict begin
0 0 0 1 0 0 0 FmK
0 FmP
166 441.666 M 0 0 60( 0  then {)FmTx
58 453.666 M 0 0 354(             Display\(\" Qtrial\(..., r\)  expects  r > 2 .\"\) })FmTx
58 465.666 M 0 0 294(           elseif  not\(\(r-q\)=1 & \(q-p\)=1\)  then {)FmTx
58 477.666 M 0 0 372(             Display\(\"  r  is too big for  Qtrial\(..., r\).\"\) })FmTx
58 489.666 M 0 0 102(           else {)FmTx
58 501.666 M 0 0 276(             Call  Qdrtc\( p, q, r,  x1, x2 \) ;)FmTx
58 513.666 M 0 0 294(             e1 := -Log2\( x1 - 1 \) ;        ...  )FmTx
end
2502 0 :M
f0_10 sf
( )S
2504 0 :M
FrameMacDict begin
0 0 0 1 0 0 0 FmK
0 FmP
352 513.666 M (Could be  NaN .)S
end
2505 0 :M
f3_10 sf
( )S
2511 0 :M
FrameMacDict begin
0 0 0 1 0 0 0 FmK
0 FmP
58 525.666 M 0 0 288(             e2 := -Log2\( \(x2 - 1\) - 2/p \) ;... )FmTx
end
2511 0 :M
f0_10 sf
( )S
2513 0 :M
FrameMacDict begin
0 0 0 1 0 0 0 FmK
0 FmP
346 525.666 M (Heed parentheses!)S
end
2513 0 :M
f3_10 sf
( )S
2519 0 :M
FrameMacDict begin
0 0 0 1 0 0 0 FmK
0 FmP
58 537.666 M 0 0 264(             Qtrial := Min{ e1, e2 } ; ...  )FmTx
end
2519 0 :M
f0_10 sf
( )S
2521 0 :M
FrameMacDict begin
0 0 0 1 0 0 0 FmK
0 FmP
322 537.666 M (Min{NaN,NaN} is NaN .)S
end
2522 0 :M
f3_10 sf
( )S
2528 0 :M
FrameMacDict begin
0 0 0 1 0 0 0 FmK
0 FmP
58 549.666 M 0 0 366(             Display\(\" gets \", e1, \" and \", e2, \" sig. bits\"\))FmTx
58 561.666 M 0 0 150(             If  not\( x1 )FmTx
end
2528 0 :M
f4_10 sf
( )S
2530 0 :M
FrameMacDict begin
0 0 0 1 0 0 0 FmK
0 FmP
208 561.666 M 0 0 6(\263)FmTx
end
2530 0 :M
f3_10 sf
( )S
2536 0 :M
FrameMacDict begin
0 0 0 1 0 0 0 FmK
0 FmP
214 561.666 M 0 0 72( 1.0 \)  then)FmTx
58 573.666 M 0 0 390(               Display\(\" and root \", x1, \" isn\'t at least  1.\"\)};)FmTx
58 585.666 M 0 0 348(           Display\(  \) ;  Return\( Qtrial \) ;  End  Qtrial.)FmTx
58 621.666 M 0 0 270(        Procedure  Qdrtc\( p, q, r,  x1, x2 \):)FmTx
58 633.666 M 0 0 282(           Real  p, q, r, s, x1, x2 ;     ...  )FmTx
end
2536 0 :M
f0_10 sf
( )S
2538 0 :M
FrameMacDict begin
0 0 0 1 0 0 0 FmK
0 FmP
340 633.666 M (Choose precision here.)S
end
2539 0 :M
f3_10 sf
( )S
2545 0 :M
FrameMacDict begin
0 0 0 1 0 0 0 FmK
0 FmP
58 645.666 M 0 0 96(           s := )FmTx
end
2545 0 :M
f4_10 sf
( )S
2547 0 :M
FrameMacDict begin
0 0 0 1 0 0 0 FmK
0 FmP
154 645.666 M 0 0 5(\326)FmTx
end
2547 0 :M
f3_10 sf
( )S
2553 0 :M
FrameMacDict begin
0 0 0 1 0 0 0 FmK
0 FmP
159 645.666 M 0 0 180(\( q*q - p*r \) ;          ...  )FmTx
end
2553 0 :M
f0_10 sf
( )S
2555 0 :M
FrameMacDict begin
0 0 0 1 0 0 0 FmK
0 FmP
339 645.666 M (NaN  if  )S
end
2556 0 :M
f4_10 sf
( )S
2558 0 :M
FrameMacDict begin
0 0 0 1 0 0 0 FmK
0 FmP
373.983 645.666 M (\326)S
end
2558 0 :M
f0_10 sf
( )S
2560 0 :M
FrameMacDict begin
0 0 0 1 0 0 0 FmK
0 FmP
379.471 645.666 M (\( < 0 \).)S
end
2561 0 :M
f3_10 sf
( )S
2567 0 :M
FrameMacDict begin
0 0 0 1 0 0 0 FmK
0 FmP
58 657.666 M 0 0 282(           S := q + CopySign\(s, q\) ;      ...  )FmTx
end
2567 0 :M
f0_10 sf
( )S
2569 0 :M
FrameMacDict begin
0 0 0 1 0 0 0 FmK
0 FmP
340 657.666 M (Fortran\325s  SIGN  O.K.)S
end
2569 0 :M
f3_10 sf
( )S
2575 0 :M
FrameMacDict begin
0 0 0 1 0 0 0 FmK
0 FmP
58 669.666 M 0 0 300(           If S = 0 then { x1 := x2 := r/p }  else)FmTx
58 681.666 M 0 0 282(              { x1 := r/S ;  x2 := S/p }; ...  )FmTx
end
2575 0 :M
f0_10 sf
( )S
2577 0 :M
FrameMacDict begin
0 0 0 1 0 0 0 FmK
0 FmP
340 681.666 M (NaNs  if not real,)S
end
2578 0 :M
f3_10 sf
( )S
2584 0 :M
FrameMacDict begin
0 0 0 1 0 0 0 FmK
0 FmP
58 693.666 M 0 0 282(           Return;  End  Qdrtc.           ...  )FmTx
end
2584 0 :M
f0_10 sf
( )S
2586 0 :M
FrameMacDict begin
0 0 0 1 0 0 0 FmK
0 FmP
340 693.666 M (or else it may abort.)S
[/CropBox[-14 773 FmDC 598 -19 FmDC]/PAGE FmPD
end
endp
%%Page: 22 22
%%BeginPageSetup
initializepage
(W. Kahan; page: 22 of 30)setjob
%%EndPageSetup
gS 0 0 584 768 rC
1 G
-14 -19 612 792 rF
0 G
2586 0 :M
FrameMacDict begin
0 0 0 1 0 0 0 FmK
0 FmP
0 FmSP
7 FmP
58 17 468 10 FmqF
end
2586 0 :M
f0_10 sf
( )S
2588 0 :M
FrameMacDict begin
0 0 0 1 0 0 0 FmK
0 FmP
58 23.82 M (Work in Progress:                          Lecture Notes on the Status of  IEEE 754                            )S
(August 17, 1995)S
7 FmP
58 729.678 468 10 FmqF
0 FmP
494.064 736.498 M (Page )S
(22)S
7 FmP
58 53 468 648 FmqF
0 FmP
58 59.667 M (The proposed benchmark program  )S
end
2589 0 :M
f3_10 sf
( )S
2595 0 :M
FrameMacDict begin
0 0 0 1 0 0 0 FmK
0 FmP
200.996 59.667 M 0 0 30(Qtest)FmTx
end
2595 0 :M
f0_10 sf
( )S
2597 0 :M
FrameMacDict begin
0 0 0 1 0 0 0 FmK
0 FmP
230.996 59.667 M (  runs  )S
end
2597 0 :M
f3_10 sf
( )S
2603 0 :M
FrameMacDict begin
0 0 0 1 0 0 0 FmK
0 FmP
258.212 59.667 M 0 0 30(Qdrtc)FmTx
end
2603 0 :M
f0_10 sf
( )S
2605 0 :M
FrameMacDict begin
0 0 0 1 0 0 0 FmK
0 FmP
288.212 59.667 M (  on a battery of data sets each chosen to expose the worst )S
58 71.667 M (rounding error of which a computing system is capable.  The system\'s precision appears next to its data  r  as an )S
58 83.667 M (annotation in  )S
end
2606 0 :M
f3_10 sf
( )S
2612 0 :M
FrameMacDict begin
0 0 0 1 0 0 0 FmK
0 FmP
115.49 83.667 M 0 0 30(Qtest)FmTx
end
2612 0 :M
f0_10 sf
( )S
2614 0 :M
FrameMacDict begin
0 0 0 1 0 0 0 FmK
0 FmP
145.49 83.667 M (.  Each datum  r  is expressed in a way that avoids damaging roundoff at the precision under )S
58 95.667 M (test and,  since  r  is a large positive number but not too large,  the other two coefficients  p := r-2  and  q := r-1  are )S
58 107.667 M (also computed uncontaminated by roundoff in function  )S
end
2614 0 :M
f3_10 sf
( )S
2620 0 :M
FrameMacDict begin
0 0 0 1 0 0 0 FmK
0 FmP
283.491 107.667 M 0 0 36(Qtrial)FmTx
end
2620 0 :M
f0_10 sf
( )S
2622 0 :M
FrameMacDict begin
0 0 0 1 0 0 0 FmK
0 FmP
319.491 107.667 M (.  Therefore  )S
end
2623 0 :M
f3_10 sf
( )S
2629 0 :M
FrameMacDict begin
0 0 0 1 0 0 0 FmK
0 FmP
371.397 107.667 M 0 0 36(Qtrial)FmTx
end
2629 0 :M
f0_10 sf
( )S
2631 0 :M
FrameMacDict begin
0 0 0 1 0 0 0 FmK
0 FmP
407.397 107.667 M (  knows the correct roots    )S
58 119.667 M (x1 = 1  and  x2 = 1 + 2/p  exactly and can compare them with the roots  x1  and  x2  computed by  )S
end
2631 0 :M
f3_10 sf
( )S
2637 0 :M
FrameMacDict begin
0 0 0 1 0 0 0 FmK
0 FmP
452.6 119.667 M 0 0 30(Qdrtc)FmTx
end
2637 0 :M
f0_10 sf
( )S
2639 0 :M
FrameMacDict begin
0 0 0 1 0 0 0 FmK
0 FmP
482.6 119.667 M (  to )S
58 131.667 M (determine its accuracy.)S
58 155.667 M (More important than accuracy are mathematical relationships implied by correlations among data.  In this problem,  )S
58 170.866 M (inequalities   q)S
end
2640 0 :M
f0_9 sf
( )S
2642 0 :M
FrameMacDict begin
0 0 0 1 0 0 0 FmK
0 FmP
FmG 116.596 166.866 M 0.978 0.978 scale (2)S FmR
end
2642 0 :M
f0_10 sf
( )S
2644 0 :M
FrameMacDict begin
0 0 0 1 0 0 0 FmK
0 FmP
120.986 170.866 M ( )S
end
2644 0 :M
f4_10 sf
( )S
2646 0 :M
FrameMacDict begin
0 0 0 1 0 0 0 FmK
0 FmP
123.486 170.866 M (\263)S
end
2647 0 :M
f0_10 sf
( )S
2649 0 :M
FrameMacDict begin
0 0 0 1 0 0 0 FmK
0 FmP
128.975 170.866 M ( p r   and    0 < p < q < r  and   p-q )S
end
2649 0 :M
f4_10 sf
( )S
2651 0 :M
FrameMacDict begin
0 0 0 1 0 0 0 FmK
0 FmP
267.253 170.866 M (\263)S
end
2652 0 :M
f0_10 sf
( )S
2654 0 :M
FrameMacDict begin
0 0 0 1 0 0 0 FmK
0 FmP
272.742 170.866 M ( q-r   can all be confirmed directly by tests,  and imply that )S
58 182.866 M (both roots must be real and no less than  1.0 .  When  )S
end
2654 0 :M
f3_10 sf
( )S
2660 0 :M
FrameMacDict begin
0 0 0 1 0 0 0 FmK
0 FmP
272.668 182.866 M 0 0 30(Qdrtc)FmTx
end
2660 0 :M
f0_10 sf
( )S
2662 0 :M
FrameMacDict begin
0 0 0 1 0 0 0 FmK
0 FmP
302.668 182.866 M (  fails to honor those implications,  )S
end
2663 0 :M
f3_10 sf
( )S
2669 0 :M
FrameMacDict begin
0 0 0 1 0 0 0 FmK
0 FmP
444.028 182.866 M 0 0 36(Qtrial)FmTx
end
2669 0 :M
f0_10 sf
( )S
2671 0 :M
FrameMacDict begin
0 0 0 1 0 0 0 FmK
0 FmP
480.028 182.866 M (  notices.)S
58 206.866 M (What should we expect would-be benchmark  )S
end
2671 0 :M
f3_10 sf
( )S
2677 0 :M
FrameMacDict begin
0 0 0 1 0 0 0 FmK
0 FmP
243.759 206.866 M 0 0 30(Qtest)FmTx
end
2677 0 :M
f0_10 sf
( )S
2679 0 :M
FrameMacDict begin
0 0 0 1 0 0 0 FmK
0 FmP
273.759 206.866 M (  to find when it runs in  8-byte  floating-point on some )S
58 218.866 M (current computer systems?  Tabulated under  Precision  is how many significant bits are stored in the named )S
58 230.866 M (system\'s  8-byte  format;  different systems trade off precision and range differently,  and this should be taken into )S
58 242.866 M (account before one system is condemned for getting less accuracy than another.  Next comes the worst  Accuracy  )S
end
2680 0 :M
f3_10 sf
( )S
2686 0 :M
FrameMacDict begin
0 0 0 1 0 0 0 FmK
0 FmP
58 254.866 M 0 0 30(Qtest)FmTx
end
2686 0 :M
f0_10 sf
( )S
2688 0 :M
FrameMacDict begin
0 0 0 1 0 0 0 FmK
0 FmP
88 254.866 M (  encountered;  evidently as many as half the sig. bits stored in computed roots can be inaccurate.  Worse,  )S
58 266.866 M (the smaller computed root can fall short of  1.0  in the sig. bit whose position is tabulated last.  These findings cry )S
58 278.866 M (out for explanation;  how can some computer systems get worse accuracy than others that store the same number of )S
58 290.866 M (sig. bits?)S
58 302.866 M ( )S
(   )S
58 588.866 M (The explanation is easy for the  IBM /370 ;  its hexadecimal floating-point loses two or three sig. bits compared )S
58 600.866 M (with binary floating-point of the same width.  No matter;  these formerly ubiquitous machines are disappearing.)S
58 624.866 M (The best accuracy,  32 sig. bits,  is achieved on inexpensive  ix86/87-based PCs  and  680x0-based Macintoshes  )S
58 636.866 M (whose hardware permits every algebraic \(sub\)expression,  though no named variable wider than  8  bytes appears in )S
58 648.866 M (it,  to be evaluated in  Extended  registers  10 bytes  wide,  and by software systems  \( compilers \)  that neither )S
58 660.866 M (disable nor eschew that capability regardless of whether they support named  10-byte variables.  These computer )S
58 672.866 M (systems also accept,  without premature over/underflows,  a wider range of input data  {)S
end
2688 0 :M
f4_10 sf
( )S
2690 0 :M
FrameMacDict begin
0 0 0 1 0 0 0 FmK
0 FmP
410.153 672.866 M (m)S
end
2691 0 :M
f0_10 sf
( )S
2693 0 :M
FrameMacDict begin
0 0 0 1 0 0 0 FmK
0 FmP
415.913 672.866 M (*p, )S
end
2693 0 :M
f4_10 sf
( )S
2695 0 :M
FrameMacDict begin
0 0 0 1 0 0 0 FmK
0 FmP
430.913 672.866 M (m)S
end
2696 0 :M
f0_10 sf
( )S
2698 0 :M
FrameMacDict begin
0 0 0 1 0 0 0 FmK
0 FmP
436.672 672.866 M (*q, )S
end
2698 0 :M
f4_10 sf
( )S
2700 0 :M
FrameMacDict begin
0 0 0 1 0 0 0 FmK
0 FmP
451.672 672.866 M (m)S
end
2701 0 :M
f0_10 sf
( )S
2703 0 :M
FrameMacDict begin
0 0 0 1 0 0 0 FmK
0 FmP
457.431 672.866 M (*r}  than do the )S
58 684.866 M (others,  though this robustness cannot be explored by  )S
end
2703 0 :M
f3_10 sf
( )S
2709 0 :M
FrameMacDict begin
0 0 0 1 0 0 0 FmK
0 FmP
275.446 684.866 M 0 0 30(Qtest)FmTx
end
2709 0 :M
f0_10 sf
( )S
2711 0 :M
FrameMacDict begin
0 0 0 1 0 0 0 FmK
0 FmP
305.446 684.866 M (  without crashing some systems.)S
end
2712 0 :M
f0_14 sf
( )S
2715 0 :M
FrameMacDict begin
0 0 0 1 0 0 0 FmK
0 FmP
111.805 321.533 M (Expected Results from  Qtest\( Qdrtc \)  on  8-byte Floating-Point)S
end
2715 0 :M
f0_12 sf
( )S
2718 0 :M
FrameMacDict begin
0 0 0 1 0 0 0 FmK
0 FmP
124.004 339.7 M (Computer )S
124.354 353.7 M (Hardware)S
198.347 339.7 M (Software    )S
202.334 353.7 M (System)S
269.674 339.7 M -0.265(Precision     )W
273.332 353.7 M (sig. bits)S
341.02 339.7 M -0.396(Accuracy     )W
345.332 353.7 M (sig. bits)S
402.297 339.7 M -0.745(How  far  <  1   )W
419.666 353.7 M (sig. bit)S
end
2718 0 :M
f0_10 sf
( )S
2720 0 :M
FrameMacDict begin
0 0 0 1 0 0 0 FmK
0 FmP
124.669 366.366 M -0.733(ix86/87-  &        )W
117.037 378.366 M (Pentium- based  )S
139.941 390.366 M (PCs)S
196.949 366.366 M -0.256(Fortran,  C,      )W
193.761 378.366 M (Turbo-Basic,  )S
193.347 390.366 M (Turbo-Pascal)S
40.347 N (53)S
62 N (32)S
58.25 N (33.3)S
119.953 402.366 M -1.205(680x0 - based        )W
132.729 414.366 M -0.713(Sun III,            )W
126.894 426.366 M (Macintosh)S
198.199 414.366 M (Fortran,  C)S
121.063 438.366 M (DEC VAX D)S
23.262 N (Fortran,  C)S
45.199 N (56)S
62 N (28)S
58.25 N (29.3)S
123.833 450.366 M (ix86/87    &    )S
126.894 462.366 M (Macintosh)S
190.143 450.366 M (MATLAB 3.5, )S
191.393 462.366 M (MathCAD 2.5)S
287 474.366 M (53)S
58.25 N (26.5)S
54.5 N (27.8)S
-318.97 N (SGI MIPS,  )S
130.911 486.366 M -0.609(SPARC,          )W
121.063 498.366 M (DEC VAX G)S
204.034 474.366 M -1.387(Fortran,                  )W
214.165 486.366 M -0.867(C ,                   )W
191.393 498.366 M (MATLAB 4.x)S
128.417 510.366 M (IBM /370)S
30.617 N (Fortran,  C)S
45.199 N (56)S
58.25 N (26.4)S
54.5 N (26.4)S
120.363 522.366 M (CRAY Y-MP)S
22.563 N (Fortran,  C)S
45.199 N (48)S
62 N (24)S
58.25 N (25.3)S
128.839 534.366 M -0.351(Intel 860,        )W
127.863 546.366 M -0.234(PowerPC,       )W
119.803 558.366 M (IBM RS/6000)S
198.199 546.366 M (Fortran,  C)S
45.199 N (53)S
342.345 534.366 M (NaN  from)S
end
2721 0 :M
f4_10 sf
( )S
2723 0 :M
FrameMacDict begin
0 0 0 1 0 0 0 FmK
0 FmP
348.858 558.366 M (\326)S
end
2723 0 :M
f0_10 sf
( )S
2725 0 :M
FrameMacDict begin
0 0 0 1 0 0 0 FmK
0 FmP
354.347 558.366 M (\( < 0 \))S
414.345 534.366 M (NaN  from)S
end
2726 0 :M
f4_10 sf
( )S
2728 0 :M
FrameMacDict begin
0 0 0 1 0 0 0 FmK
0 FmP
420.858 558.366 M (\326)S
end
2728 0 :M
f0_10 sf
( )S
2730 0 :M
FrameMacDict begin
0 0 0 1 0 0 0 FmK
0 FmP
426.347 558.366 M (\( < 0 \))S
110.75 330.45 FmB
0 27.5 FmL
0 0.5 FmSo
113.25 330.45 FmB
0 27.5 FmL
0 0.5 FmSo
112 358.45 FmB
0 203.5 FmL
0 0.5 FmSo
184 329.95 FmB
0 232.5 FmL
0 0.5 FmSo
256 329.95 FmB
0 232.5 FmL
0 0.5 FmSo
328 329.95 FmB
0 232.5 FmL
0 0.5 FmSo
400 329.95 FmB
0 232.5 FmL
0 0.5 FmSo
470.75 330.45 FmB
0 27.5 FmL
0 0.5 FmSo
473.25 330.45 FmB
0 27.5 FmL
0 0.5 FmSo
472 358.45 FmB
0 203.5 FmL
0 0.5 FmSo
110.5 330.2 FmB
363 0 FmL
0 0.5 FmSo
110.5 358.2 FmB
363 0 FmL
0 0.5 FmSo
111.75 394.199 FmB
144.5 0 FmL
0 0.5 FmSo
111.75 430.199 FmB
360.5 0 FmL
0 0.5 FmSo
111.75 442.199 FmB
360.5 0 FmL
0 0.5 FmSo
111.75 466.199 FmB
144.5 0 FmL
0 0.5 FmSo
111.75 502.199 FmB
360.5 0 FmL
0 0.5 FmSo
111.75 514.199 FmB
360.5 0 FmL
0 0.5 FmSo
111.75 526.199 FmB
360.5 0 FmL
0 0.5 FmSo
111.75 562.199 FmB
360.5 0 FmL
0 0.5 FmSo
[/CropBox[-14 773 FmDC 598 -19 FmDC]/PAGE FmPD
end
endp
%%Page: 23 23
%%BeginPageSetup
initializepage
(W. Kahan; page: 23 of 30)setjob
%%EndPageSetup
gS 0 0 584 768 rC
1 G
-14 -19 612 792 rF
0 G
2731 0 :M
FrameMacDict begin
0 0 0 1 0 0 0 FmK
0 FmP
0 FmSP
7 FmP
58 17 468 10 FmqF
end
2731 0 :M
f0_10 sf
( )S
2733 0 :M
FrameMacDict begin
0 0 0 1 0 0 0 FmK
0 FmP
58 23.82 M (Work in Progress:                          Lecture Notes on the Status of  IEEE 754                            )S
(August 17, 1995)S
7 FmP
58 729.678 468 10 FmqF
0 FmP
494.064 736.498 M (Page )S
(23)S
7 FmP
58 53 468 648 FmqF
0 FmP
58 59.667 M (MATLAB  and  MathCAD  on  ix86/87  and  680x0  platforms store almost every subexpression into internal  8-)S
58 71.667 M (byte  scratch variables,  thereby wasting time as well as the  10-byte  registers\' superior accuracy and range;  that is )S
58 83.667 M (why their accuracy is no better on machines with  10-byte  registers than on machines without.)S
58 107.667 M (The final mystery is the  NaN  \(Not a Number\)  obtained from the  i860,  IBM RS/6000  and  PowerPC  instead of )S
58 119.667 M (roots.  The  NaN  arises from the square root of a negative number  q*q - p*r ,  although tests performed upon input )S
58 131.667 M (data would find that   QQ := q*q  and  PR := p*r   do satisfy  QQ )S
end
2734 0 :M
f4_10 sf
( )S
2736 0 :M
FrameMacDict begin
0 0 0 1 0 0 0 FmK
0 FmP
320.063 131.667 M (\263)S
end
2736 0 :M
f0_10 sf
( )S
2738 0 :M
FrameMacDict begin
0 0 0 1 0 0 0 FmK
0 FmP
325.551 131.667 M ( PR .  This paradox arises out of the  Fused )S
58 143.667 M (Multiply-Accumulate  instruction possessed by those machines.  \( The  i860\325s  MAC  is only partially fused.\)  The )S
58 155.667 M (paradox can be suppressed by inhibiting that instruction at compile time,  but doing so generally would slow those )S
58 167.667 M (machines;  therefore,  their compiler was designed  to render that inhibition inconvenient and unusual.  If  )S
end
2739 0 :M
f3_10 sf
( )S
2745 0 :M
FrameMacDict begin
0 0 0 1 0 0 0 FmK
0 FmP
483.117 167.667 M 0 0 30(Qtest)FmTx
end
2745 0 :M
f0_10 sf
( )S
2747 0 :M
FrameMacDict begin
0 0 0 1 0 0 0 FmK
0 FmP
513.117 167.667 M (  )S
58 179.667 M (were run on these machines in their unusual mode,  would that constitute a fair test?)S
58 203.666 M (Fairness raises troublesome issues for a benchmark.  What if custodians of a computer family allege unfairness?  )S
58 215.666 M (Letting them tweak a benchmark slightly to render it  \322 )S
(fair )S
(\323  lets them overcompensate in devious ways very )S
58 227.666 M (difficult to expose.  For example,  replace  )S
end
2747 0 :M
f3_10 sf
( )S
2753 0 :M
FrameMacDict begin
0 0 0 1 0 0 0 FmK
0 FmP
229.87 227.666 M 0 0 30(Qdrtc)FmTx
end
2753 0 :M
f0_10 sf
( )S
2755 0 :M
FrameMacDict begin
0 0 0 1 0 0 0 FmK
0 FmP
259.87 227.666 M (  by an ostensibly algebraically equivalent procedure  \311)S
end
2756 0 :M
f3_10 sf
( )S
2762 0 :M
FrameMacDict begin
0 0 0 1 0 0 0 FmK
0 FmP
58 251.666 M 0 0 282(       Procedure  PPCQdrtc\( p, q, r,  x1, x2 \):)FmTx
58 263.666 M 0 0 276(         Real  o, p, q, r, s, x1, x2 ;   ...  )FmTx
end
2762 0 :M
f0_10 sf
( )S
2764 0 :M
FrameMacDict begin
0 0 0 1 0 0 0 FmK
0 FmP
334 263.666 M (Choose precision here.)S
end
2764 0 :M
f3_10 sf
( )S
2770 0 :M
FrameMacDict begin
0 0 0 1 0 0 0 FmK
0 FmP
58 275.666 M 0 0 276(         S := p*r ;  o := p*r - S ;      ...  )FmTx
end
2770 0 :M
f0_10 sf
( )S
2772 0 :M
FrameMacDict begin
0 0 0 1 0 0 0 FmK
0 FmP
334 275.666 M (Suits  PowerPC  well.)S
end
2773 0 :M
f3_10 sf
( )S
2779 0 :M
FrameMacDict begin
0 0 0 1 0 0 0 FmK
0 FmP
58 287.666 M 0 0 84(         s := )FmTx
end
2779 0 :M
f4_10 sf
( )S
2781 0 :M
FrameMacDict begin
0 0 0 1 0 0 0 FmK
0 FmP
142 287.666 M 0 0 5(\326)FmTx
end
2781 0 :M
f3_10 sf
( )S
2787 0 :M
FrameMacDict begin
0 0 0 1 0 0 0 FmK
0 FmP
147 287.666 M 0 0 186(\(\(q*q - S\) - o\) ;         ...  )FmTx
end
2787 0 :M
f0_10 sf
( )S
2789 0 :M
FrameMacDict begin
0 0 0 1 0 0 0 FmK
0 FmP
333 287.666 M (NaN  if  )S
end
2790 0 :M
f4_10 sf
( )S
2792 0 :M
FrameMacDict begin
0 0 0 1 0 0 0 FmK
0 FmP
367.983 287.666 M (\326)S
end
2792 0 :M
f0_10 sf
( )S
2794 0 :M
FrameMacDict begin
0 0 0 1 0 0 0 FmK
0 FmP
373.471 287.666 M (\( < 0 \).)S
end
2795 0 :M
f3_10 sf
( )S
2801 0 :M
FrameMacDict begin
0 0 0 1 0 0 0 FmK
0 FmP
58 299.666 M 0 0 276(         S := q + CopySign\(s, q\) ;       ...  )FmTx
end
2801 0 :M
f0_10 sf
( )S
2803 0 :M
FrameMacDict begin
0 0 0 1 0 0 0 FmK
0 FmP
334 299.666 M (Fortran\325s  SIGN  O.K.)S
end
2803 0 :M
f3_10 sf
( )S
2809 0 :M
FrameMacDict begin
0 0 0 1 0 0 0 FmK
0 FmP
58 311.666 M 0 0 288(         If S = 0 then { x1 := x2 := r/p }  else)FmTx
58 323.666 M 0 0 276(            { x1 := r/S ;  x2 := S/p };  ...  )FmTx
end
2809 0 :M
f0_10 sf
( )S
2811 0 :M
FrameMacDict begin
0 0 0 1 0 0 0 FmK
0 FmP
334 323.666 M (NaNs  if not real,)S
end
2812 0 :M
f3_10 sf
( )S
2818 0 :M
FrameMacDict begin
0 0 0 1 0 0 0 FmK
0 FmP
58 335.666 M 0 0 276(         Return;  End  PPCQdrtc.         ...  )FmTx
end
2818 0 :M
f0_10 sf
( )S
2820 0 :M
FrameMacDict begin
0 0 0 1 0 0 0 FmK
0 FmP
334 335.666 M (or else may abort.)S
58 359.666 M (Aside from running slightly slower,  )S
end
2820 0 :M
f3_10 sf
( )S
2826 0 :M
FrameMacDict begin
0 0 0 1 0 0 0 FmK
0 FmP
206.02 359.666 M 0 0 30(Qtest)FmTx
end
2826 0 :M
f0_10 sf
( )S
2828 0 :M
FrameMacDict begin
0 0 0 1 0 0 0 FmK
0 FmP
236.02 359.666 M (\()S
end
2829 0 :M
f3_10 sf
( )S
2835 0 :M
FrameMacDict begin
0 0 0 1 0 0 0 FmK
0 FmP
239.348 359.666 M 0 0 48(PPCQdrtc)FmTx
end
2835 0 :M
f0_10 sf
( )S
2837 0 :M
FrameMacDict begin
0 0 0 1 0 0 0 FmK
0 FmP
287.348 359.666 M (\)  differs from  )S
end
2837 0 :M
f3_10 sf
( )S
2843 0 :M
FrameMacDict begin
0 0 0 1 0 0 0 FmK
0 FmP
348.698 359.666 M 0 0 30(Qtest)FmTx
end
2843 0 :M
f0_10 sf
( )S
2845 0 :M
FrameMacDict begin
0 0 0 1 0 0 0 FmK
0 FmP
378.698 359.666 M (\( )S
end
2846 0 :M
f3_10 sf
( )S
2852 0 :M
FrameMacDict begin
0 0 0 1 0 0 0 FmK
0 FmP
384.525 359.666 M 0 0 30(Qdrtc)FmTx
end
2852 0 :M
f0_10 sf
( )S
2854 0 :M
FrameMacDict begin
0 0 0 1 0 0 0 FmK
0 FmP
414.525 359.666 M ( \)  only by getting  53  sig. )S
58 371.666 M (bits instead of  NaN  on the  PowerPC  and  RS/6000,  which then win the prize for accuracy.  Which of  )S
end
2854 0 :M
f3_10 sf
( )S
2860 0 :M
FrameMacDict begin
0 0 0 1 0 0 0 FmK
0 FmP
58 383.666 M 0 0 30(Qtest)FmTx
end
2860 0 :M
f0_10 sf
( )S
2862 0 :M
FrameMacDict begin
0 0 0 1 0 0 0 FmK
0 FmP
88 383.666 M (\( )S
end
2863 0 :M
f3_10 sf
( )S
2869 0 :M
FrameMacDict begin
0 0 0 1 0 0 0 FmK
0 FmP
93.828 383.666 M 0 0 30(Qdrtc)FmTx
end
2869 0 :M
f0_10 sf
( )S
2871 0 :M
FrameMacDict begin
0 0 0 1 0 0 0 FmK
0 FmP
123.828 383.666 M ( \)  and  )S
end
2871 0 :M
f3_10 sf
( )S
2877 0 :M
FrameMacDict begin
0 0 0 1 0 0 0 FmK
0 FmP
154.094 383.666 M 0 0 30(Qtest)FmTx
end
2877 0 :M
f0_10 sf
( )S
2879 0 :M
FrameMacDict begin
0 0 0 1 0 0 0 FmK
0 FmP
184.094 383.666 M (\( )S
end
2880 0 :M
f3_10 sf
( )S
2886 0 :M
FrameMacDict begin
0 0 0 1 0 0 0 FmK
0 FmP
189.921 383.666 M 0 0 48(PPCQdrtc)FmTx
end
2886 0 :M
f0_10 sf
( )S
2888 0 :M
FrameMacDict begin
0 0 0 1 0 0 0 FmK
0 FmP
237.921 383.666 M ( \)  assesses accuracy more fairly?)S
58 407.666 M (In general,  insisting that a benchmark exist in only one version,  and that it run successfully  \( no NaNs ! \)  on )S
58 419.666 M (every machine,  may cripple speed or accuracy or robustness on computers with advantageous features others lack.  )S
58 431.666 M (Permitting variety may invalidate comparison.  As it is now,  )S
end
2888 0 :M
f3_10 sf
( )S
2894 0 :M
FrameMacDict begin
0 0 0 1 0 0 0 FmK
0 FmP
304.326 431.666 M 0 0 30(Qtest)FmTx
end
2894 0 :M
f0_10 sf
( )S
2896 0 :M
FrameMacDict begin
0 0 0 1 0 0 0 FmK
0 FmP
334.326 431.666 M (\( )S
end
2897 0 :M
f3_10 sf
( )S
2903 0 :M
FrameMacDict begin
0 0 0 1 0 0 0 FmK
0 FmP
340.153 431.666 M 0 0 30(Qdrtc)FmTx
end
2903 0 :M
f0_10 sf
( )S
2905 0 :M
FrameMacDict begin
0 0 0 1 0 0 0 FmK
0 FmP
370.153 431.666 M ( \)  tells us something I think worth )S
58 443.666 M (knowing regardless of whether it is admitted to the ranks of industry-approved benchmarks.)S
[/CropBox[-14 773 FmDC 598 -19 FmDC]/PAGE FmPD
end
endp
%%Page: 24 24
%%BeginPageSetup
initializepage
(W. Kahan; page: 24 of 30)setjob
%%EndPageSetup
gS 0 0 584 768 rC
1 G
-14 -19 612 792 rF
0 G
2905 0 :M
FrameMacDict begin
0 0 0 1 0 0 0 FmK
0 FmP
0 FmSP
7 FmP
58 17 468 10 FmqF
end
2905 0 :M
f0_10 sf
( )S
2907 0 :M
FrameMacDict begin
0 0 0 1 0 0 0 FmK
0 FmP
58 23.82 M (Work in Progress:                          Lecture Notes on the Status of  IEEE 754                            )S
(August 17, 1995)S
7 FmP
58 729.678 468 10 FmqF
0 FmP
494.064 736.498 M (Page )S
(24)S
7 FmP
58 53 468 648 FmqF
end
2908 0 :M
f1_12 sf
( )S
2911 0 :M
FrameMacDict begin
0 0 0 1 0 0 0 FmK
0 FmP
58 61 M (Exceptions in General)S
end
2911 0 :M
f0_12 sf
( )S
2914 0 :M
FrameMacDict begin
0 0 0 1 0 0 0 FmK
0 FmP
171.314 61 M (,  Reconsidered:)S
end
2914 0 :M
f0_10 sf
( )S
2916 0 :M
FrameMacDict begin
0 0 0 1 0 0 0 FmK
0 FmP
58 73.667 M (The prevailing attitude towards exceptions is changing.  Previously they were declared to be errors that would abort )S
58 85.667 M (an offending program.  Abortion could be prevented only by defensive programming that tested for every error )S
58 97.667 M (condition in advance.  Punitive policies and paranoid practices persist,  but now in competition with other options )S
58 109.667 M (afforded programmers by  IEEE 754  though handicapped by their near invisibility in programming languages.  )S
58 121.667 M (How might exception-handling be practiced if other options were supported properly?  The  Standard Apple )S
58 133.667 M (Numerical Environment \( SANE \),  documented in the  Apple Numerics Manual \(1988\),  is one approach.  What )S
58 145.667 M (follows is another I have implemented partially.)S
58 169.667 M (First,  exception-classes must have names,  preferably the same names in all languages.  Venerable languages that )S
58 181.667 M (limit names\' lengths still live,  so the names have to be short;  here are suggestions for five-letter names for floating-)S
58 193.667 M (point exceptions plus a few others:)S
101.2 229.666 M ( Name)S
74.425 N (Description of Exception)S
101.2 241.666 M ( ---------)S
68.351 N (-----------------------------------------------------------------------)S
101.2 253.666 M ( INXCT)S
67.756 N (INeXaCT  due to floating-point roundoff or over/underflow)S
101.2 265.666 M ( UNFLO)S
64.975 N (floating-point UNderFLOw,  Gradual  or not)S
101.2 277.666 M ( DIVBZ)S
67.756 N (Infinity  exactly from finite operand\(s\);  e.g.,  1/0)S
101.2 289.666 M ( OVFLO)S
64.975 N (floating-point OVerFLOw)S
101.2 313.666 M ( INTXR)S
67.756 N (INTeger arithmetic eXception or eRror like overflow or  1/0)S
101.2 337.666 M ( INVLD)S
67.206 N (INVaLiD operation,  most likely one from the list that follows)S
101.2 349.666 M (    ZOVRZ)S
57.475 N (0.0 / 0.0                  :)S
101.2 361.666 M (    IOVRI)S
63.036 N (Infinity / Infinity     :    These four are the rational)S
101.2 373.666 M (    IMINI)S
64.709 N (Infinity - Infinity     :      Removable Singularities.)S
101.2 385.666 M (    ZTMSI)S
60.807 N (0.0 * Infinity           :)S
101.2 397.666 M (    FODOM)S
54.694 N (Function computed Outside its DOMain;  e.g.,  )S
end
2916 0 :M
f4_10 sf
( )S
2918 0 :M
FrameMacDict begin
0 0 0 1 0 0 0 FmK
0 FmP
392.798 397.666 M (\326)S
end
2919 0 :M
f0_10 sf
( )S
2921 0 :M
FrameMacDict begin
0 0 0 1 0 0 0 FmK
0 FmP
398.287 397.666 M (\(-3\))S
101.2 409.666 M (    DTSTR)S
59.135 N (Attempted access outside a DaTa STRucture or array)S
101.2 421.666 M (    NLPTR)S
59.135 N (De-referencing a  NiL  PoinTeR)S
101.2 433.666 M (    UNDTA)S
55.815 N (UNinitialized DaTum or vAriable,  or  SNaN)S
58 469.666 M (These names are intended to identify such flags as may exist to signal exceptions to a program,  and such modes as )S
58 481.666 M (a programmer may choose to predetermine the program\'s response to exceptions.)S
58 505.666 M (More important than the spellings are the length and structure of the list.  It must be parsimonious;  if allowed to )S
58 517.666 M (grow indefinitely it can accrete names unknown to most of us or with overlapping meanings,  and then our )S
58 529.666 M (programs would mishandle their exceptions.  The list should be comprehensive enough to leave no kind of )S
58 541.666 M (exception uncovered by a name;  the list above may be incomplete.  It does include names for exceptions)S
58 553.666 M (practically undetectable on some systems;  examples are  UNFLO  on a  CRAY Y-MP,  IOVRI  on machines that )S
58 565.666 M (lack  Infinity,  DTSTR  on systems that do not check array-bounds,  and  INXCT  on non-conformers to  IEEE 754.  )S
58 577.666 M (The list is structured less to reflect how or where the exception is detected  \( as  C\'s  nearly useless  ERRNO  does \)  )S
58 589.666 M (and more to reflect what may be done to remedy it.  For example,  expressions  0/0,  )S
end
2921 0 :M
f4_10 sf
( )S
2923 0 :M
FrameMacDict begin
0 0 0 1 0 0 0 FmK
0 FmP
397.324 589.666 M (\245)S
end
2924 0 :M
f0_10 sf
( )S
2926 0 :M
FrameMacDict begin
0 0 0 1 0 0 0 FmK
0 FmP
404.453 589.666 M (/)S
end
2926 0 :M
f4_10 sf
( )S
2928 0 :M
FrameMacDict begin
0 0 0 1 0 0 0 FmK
0 FmP
407.231 589.666 M (\245)S
end
2929 0 :M
f0_10 sf
( )S
2931 0 :M
FrameMacDict begin
0 0 0 1 0 0 0 FmK
0 FmP
414.36 589.666 M (,  )S
end
2931 0 :M
f4_10 sf
( )S
2933 0 :M
FrameMacDict begin
0 0 0 1 0 0 0 FmK
0 FmP
421.86 589.666 M (\245)S
end
2934 0 :M
f0_10 sf
( )S
2936 0 :M
FrameMacDict begin
0 0 0 1 0 0 0 FmK
0 FmP
428.989 589.666 M (-)S
end
2936 0 :M
f4_10 sf
( )S
2938 0 :M
FrameMacDict begin
0 0 0 1 0 0 0 FmK
0 FmP
432.316 589.666 M (\245)S
end
2939 0 :M
f0_10 sf
( )S
2941 0 :M
FrameMacDict begin
0 0 0 1 0 0 0 FmK
0 FmP
439.445 589.666 M (  and  )S
end
2941 0 :M
f4_10 sf
( )S
2943 0 :M
FrameMacDict begin
0 0 0 1 0 0 0 FmK
0 FmP
463.884 589.666 M (\245)S
end
2944 0 :M
f0_10 sf
( )S
2946 0 :M
FrameMacDict begin
0 0 0 1 0 0 0 FmK
0 FmP
471.013 589.666 M (*0  are )S
58 601.666 M (distinguished because,  to produce anything of more use than a  NaN,  they require different versions of  l\'Hospital\'s)S
58 613.666 M (rule for the removal of removable singularities.)S
58 637.666 M (Though different named exceptions require different remedies,  the list of remedies worth considering for any )S
58 649.666 M (particular named exception class fits into a short menu for a preprogrammed exception-handling library.  Selection )S
58 661.666 M (from an adequate menu will serve applications programmers far better than coding up each his own handler.  Here )S
58 673.666 M (are five-letter names for the few exception-handling modes thought worth putting into a menu:)S
156.457 697.666 M (PAUSE,  ABORT,  PREMT,  IEEED,  PSUBS,  KOUNT,  ABSNT)S
[/CropBox[-14 773 FmDC 598 -19 FmDC]/PAGE FmPD
end
endp
%%Page: 25 25
%%BeginPageSetup
initializepage
(W. Kahan; page: 25 of 30)setjob
%%EndPageSetup
gS 0 0 584 768 rC
1 G
-14 -19 612 792 rF
0 G
2946 0 :M
FrameMacDict begin
0 0 0 1 0 0 0 FmK
0 FmP
0 FmSP
7 FmP
58 17 468 10 FmqF
end
2946 0 :M
f0_10 sf
( )S
2948 0 :M
FrameMacDict begin
0 0 0 1 0 0 0 FmK
0 FmP
58 23.82 M (Work in Progress:                          Lecture Notes on the Status of  IEEE 754                            )S
(August 17, 1995)S
7 FmP
58 729.678 468 10 FmqF
0 FmP
494.064 736.498 M (Page )S
(25)S
7 FmP
58 53 468 648 FmqF
0 FmP
58 59.667 M (To select mode  PAUSE  for handling,  say,  OVFLO  is to request that each floating-point overflow suspend )S
58 71.667 M (computation and invoke a debugger to display the values of variables defined at that moment,  after which the )S
58 83.667 M (onlooker may either abort computation or else resume it as if the overflow had been handled in the previously )S
58 95.667 M (prevailing mode.  PAUSE  is a debugging mode applicable to every other exception-handling mode.)S
58 119.667 M (ABORT  is a mode now common for severe exceptions;  it empties buffers,  closes files and returns to the operating )S
58 131.667 M (system.  PREMT  pre-empts the handling of a designated exception for whatever language ambience had been over-)S
58 143.667 M (ridden by a previously invoked mode.  For example,  to  PREMT  ZOVRZ  in  APL  is to re-establish the definition  )S
58 155.667 M (0/0 = 1 ;  to  PREMT  ZOVRZ  in  ADA  is to put  0.0/0.0  back among  Arithmetic Errors  that drop execution into )S
58 167.667 M (a program module\'s error handler,  if one has been provided,  or else  ABORTs.  PREMT  is indispensable when a )S
58 179.667 M (language sports control structures like)S
130 191.666 M ( ON ERROR  { do something else or go somewhere else } ;)S
58 203.666 M (and)S
130 215.666 M (ABSENT ERROR  { try something }  ELSE  { do something else } ;)S
58 227.666 M (but lacks locutions to distinguish among different kinds of exceptions.)S
end
2949 0 :M
f0_9 sf
( )S
2951 0 :M
FrameMacDict begin
0 0 0 1 0 0 0 FmK
0 FmP
58 251 M (\( Control  structures like those palliate exceptions rather than handle them all well.  The main deficiency is a lack of recognizable )S
58 262 M (names for modes defined implicitly by  { do something else }  clauses;  a name known to an independently compiled )S
58 273 M (subprocedure of the  {try something}  clause could tell it which exceptions of its own to hide and which to expose.  Other )S
58 284 M (deficiencies exacerbate the cost of scoping:  Which variables in the  {try something}  clause are to be saved,  and in what state,  )S
58 295 M (for the  {do something else}  clause to use after the  ERROR )S
(?   A satisfactory discussion lies beyond the scope of these notes.\))S
end
2951 0 :M
f0_10 sf
( )S
2953 0 :M
FrameMacDict begin
0 0 0 1 0 0 0 FmK
0 FmP
58 318.666 M (IEEED  names the  Default Mode  in which every exception mentioned by  IEEE 754/854  must be handled,  by )S
58 330.666 M (default,  unless a programmer asks explicitly for another mode.  \( This requirement is violated by a few computer )S
58 342.666 M (systems that run much faster in some other mode,  and by some compilers whose authors fear the consequences of )S
58 354.666 M (unleashing  Infinity  and  NaN  upon a programmer who has not said he wants them.\)  To every named floating-)S
58 366.666 M (point exception except  INXCT  and   UNFLO,  IEEED  has assigned what I call a  \322 )S
(presubstitution )S
(\323;  that is a )S
58 378.666 M (precomputed number whose magnitude and possibly its sign will be substituted for the result of an exceptional )S
58 390.666 M (floating-point operation.  For  DIVBZ  and  OVFLO,  IEEED  presubstitutes  )S
end
2953 0 :M
f4_10 sf
( )S
2955 0 :M
FrameMacDict begin
0 0 0 1 0 0 0 FmK
0 FmP
369.299 390.666 M (\261)S
end
2956 0 :M
f0_10 sf
( )S
2958 0 :M
FrameMacDict begin
0 0 0 1 0 0 0 FmK
0 FmP
374.787 390.666 M (Infinity  with an appropriate sign.  )S
58 402.666 M (For the  INVLDs  ZOVRZ, IOVRI, IMINI, ZTMSI  and  FODOM,  IEEED  presubstitutes  NaN.  \( For  INXCT,  )S
58 414.666 M (IEEED  does not presubstitute but yields an approximation in accordance with current modes of rounding direction )S
58 426.666 M (and precision;  IEEED  for  UNFLO  is  Gradual.\)  Here is an example:  with  DIVBZ  in  IEEED  mode,   )S
58 438.666 M (LOG\(0.0\) = -Infinity  is not trapped as an  ERROR  though it does raise the  DIVBZ  flag.)S
58 462.666 M (PSUBS  is a generalization of  IEEED  that presubstitutes any number,  computed by the program in advance,  for )S
58 474.666 M (any floating-point exception.  For example,  PSUBS\( 0.0, )S
end
2958 0 :M
f4_10 sf
( )S
2960 0 :M
FrameMacDict begin
0 0 0 1 0 0 0 FmK
0 FmP
290.449 474.666 M (\261)S
end
2961 0 :M
f0_10 sf
( )S
2963 0 :M
FrameMacDict begin
0 0 0 1 0 0 0 FmK
0 FmP
295.937 474.666 M ( \)  for  UNFLO  replaces  Gradual Underflow  by  Flush-)S
58 486.666 M (to-Zero  with preservation of sign;  invoke  PSUBS\( 0.0 \)  to flush  UNFLO  to  +0.0 .  Similarly,  PSUBS\( y \)  for  )S
58 498.666 M (ZOVRZ  replaces a subsequent  SIN\(x*y\)/x  by  y  whenever  x = 0.0 .  Thus programmers can remove some )S
58 510.666 M (removable singularities with  PSUBS  without explicit tests nor branches.  It is no panacea.  Those tests and )S
58 522.666 M (branches may have to be introduced implicitly  \( by the compiler ? \)  for vectorized machines like  CRAYs.  Neither )S
58 534.666 M (can  PSUBS\( COS\(x\) \)  for  ZOVRZ  shield  \( SIN\(x\) - SIN\(y\) \)/\(x-y\)  from damage caused by roundoff when  x  is )S
58 546.666 M (too near  y ;   use   PSUBS\(1.0\)   and   COS\(\(x+y\)/2\)*)S
end
2963 0 :M
f1_10 sf
( )S
2965 0 :M
FrameMacDict begin
0 0 0 1 0 0 0 FmK
0 FmP
274.426 546.666 M (\()S
end
2966 0 :M
f0_10 sf
( )S
2968 0 :M
FrameMacDict begin
0 0 0 1 0 0 0 FmK
0 FmP
277.753 546.666 M ( SIN\(\(x-y\)/2\) / \(\(x-y\)/2\) )S
end
2968 0 :M
f1_10 sf
( )S
2970 0 :M
FrameMacDict begin
0 0 0 1 0 0 0 FmK
0 FmP
375.471 546.666 M (\))S
end
2971 0 :M
f0_10 sf
( )S
2973 0 :M
FrameMacDict begin
0 0 0 1 0 0 0 FmK
0 FmP
378.798 546.666 M (    respectively instead.)S
58 570.666 M (Mode  KOUNT\(k\)  exploits exponent-wrapping to count  OVER/UNDERFLOWs  in an integer variable  k  as if it )S
58 582.666 M (were a leftward extension of the floating-point exponent field.  We have seen one application above;  it was the fast )S
58 594.666 M (and accurate evaluation of expressions like  Q  described under  UNDERFLOW.  If implemented fast enough,  this )S
58 609.866 M (mode also speeds up the comparison of complex magnitudes   |x + )S
end
2973 0 :M
f1_10 sf
( )S
2975 0 :M
FrameMacDict begin
0 0 0 1 0 0 0 FmK
0 FmP
325.847 609.866 M (\365)S
end
2976 0 :M
f0_10 sf
( )S
2978 0 :M
FrameMacDict begin
0 0 0 1 0 0 0 FmK
0 FmP
328.625 609.866 M (y| = )S
end
2978 0 :M
f4_10 sf
( )S
2980 0 :M
FrameMacDict begin
0 0 0 1 0 0 0 FmK
0 FmP
346.264 609.866 M (\326)S
end
2981 0 :M
f0_10 sf
( )S
2983 0 :M
FrameMacDict begin
0 0 0 1 0 0 0 FmK
0 FmP
351.752 609.866 M (\(x)S
end
2983 0 :M
f0_9 sf
( )S
2985 0 :M
FrameMacDict begin
0 0 0 1 0 0 0 FmK
0 FmP
FmG 360.08 605.866 M 0.978 0.978 scale (2)S FmR
end
2986 0 :M
f0_10 sf
( )S
2988 0 :M
FrameMacDict begin
0 0 0 1 0 0 0 FmK
0 FmP
364.47 609.866 M ( + y)S
end
2988 0 :M
f0_9 sf
( )S
2990 0 :M
FrameMacDict begin
0 0 0 1 0 0 0 FmK
0 FmP
FmG 380.11 605.866 M 0.978 0.978 scale (2)S FmR
end
2990 0 :M
f0_10 sf
( )S
2992 0 :M
FrameMacDict begin
0 0 0 1 0 0 0 FmK
0 FmP
384.5 609.866 M (\)   via the relationship)S
163.201 633.866 M (|x + )S
end
2993 0 :M
f1_10 sf
( )S
2995 0 :M
FrameMacDict begin
0 0 0 1 0 0 0 FmK
0 FmP
180.84 633.866 M (\365)S
end
2995 0 :M
f0_10 sf
( )S
2997 0 :M
FrameMacDict begin
0 0 0 1 0 0 0 FmK
0 FmP
183.619 633.866 M (y|  <  |u + )S
end
2998 0 :M
f1_10 sf
( )S
3000 0 :M
FrameMacDict begin
0 0 0 1 0 0 0 FmK
0 FmP
223.897 633.866 M (\365)S
end
3000 0 :M
f0_10 sf
( )S
3002 0 :M
FrameMacDict begin
0 0 0 1 0 0 0 FmK
0 FmP
226.675 633.866 M (v|     if and only if     \(x-u\)\341\(x+u\)  <  \(v-y\)\341\(v+y\) .)S
end
3003 0 :M
f0_9 sf
( )S
3005 0 :M
FrameMacDict begin
0 0 0 1 0 0 0 FmK
0 FmP
176.9 656.199 M (\( To attenuate roundoff first swap so that  |x| )S
end
3005 0 :M
f4_9 sf
( )S
3007 0 :M
FrameMacDict begin
0 0 0 1 0 0 0 FmK
0 FmP
338.935 656.199 M (\263)S
end
3007 0 :M
f0_9 sf
( )S
3009 0 :M
FrameMacDict begin
0 0 0 1 0 0 0 FmK
0 FmP
343.874 656.199 M ( |y|  and  |u| )S
end
3010 0 :M
f4_9 sf
( )S
3012 0 :M
FrameMacDict begin
0 0 0 1 0 0 0 FmK
0 FmP
386.567 656.199 M (\263)S
end
3012 0 :M
f0_9 sf
( )S
3014 0 :M
FrameMacDict begin
0 0 0 1 0 0 0 FmK
0 FmP
391.506 656.199 M ( |v|.\))S
end
3014 0 :M
f0_10 sf
( )S
3016 0 :M
FrameMacDict begin
0 0 0 1 0 0 0 FmK
0 FmP
58 679.866 M (OVFLO  and  UNFLO  flags do not get raised in  KOUNT  mode.)S
[/CropBox[-14 773 FmDC 598 -19 FmDC]/PAGE FmPD
end
endp
%%Page: 26 26
%%BeginPageSetup
initializepage
(W. Kahan; page: 26 of 30)setjob
%%EndPageSetup
gS 0 0 584 768 rC
1 G
-14 -19 612 792 rF
0 G
3017 0 :M
FrameMacDict begin
0 0 0 1 0 0 0 FmK
0 FmP
0 FmSP
7 FmP
58 17 468 10 FmqF
end
3017 0 :M
f0_10 sf
( )S
3019 0 :M
FrameMacDict begin
0 0 0 1 0 0 0 FmK
0 FmP
58 23.82 M (Work in Progress:                          Lecture Notes on the Status of  IEEE 754                            )S
(August 17, 1995)S
7 FmP
58 729.678 468 10 FmqF
0 FmP
494.064 736.498 M (Page )S
(26)S
7 FmP
58 53 468 648 FmqF
0 FmP
58 59.667 M (For nearly three decades,  no other floating-point exception-handling modes than  PAUSE, ABORT, PREMT, )S
58 71.667 M (IEEED, PSUBS  and  KOUNT  have been found both worthwhile and compatible with concurrent execution of )S
58 83.667 M (floating-point and integer operations on very fast processors.  If not due to a lack of imagination,  this state of )S
58 95.667 M (affairs justifies efforts to promulgate a modest library of exception-handling modes rather than leave every )S
58 107.667 M (programmer to his own devices.  A few more floating-point modes require support on systems that conform to  )S
58 119.667 M (IEEE 754 :)S
58 139.667 M (        Directed Roundings \( DIRND \):     ToNEAR,  ToZERO, ToPOSV, ToNEGV)S
58 151.667 M (        Rounding Precisions \( RNDPR \):    ToSNGL,  ToDBLE, ToEXTD)S
58 171.667 M (Rounding Precision  modes are pertinent only to hardware that evaluates every floating-point expression in the  )S
58 183.666 M (Double-Extended  \( REAL*10+ \)  format.  However,  they do raise a question of general interest:)S
143.299 207.666 M (What if a program attempts to invoke a nonexistent or unsupported mode?)S
58 227.666 M (An error-message protesting the use of an undefined name,  or else the response to  C\'s  )S
end
3020 0 :M
f3_10 sf
( )S
3026 0 :M
FrameMacDict begin
0 0 0 1 0 0 0 FmK
0 FmP
410.488 227.666 M 0 0 36(#ifdef)FmTx
end
3026 0 :M
f0_10 sf
( )S
3028 0 :M
FrameMacDict begin
0 0 0 1 0 0 0 FmK
0 FmP
446.488 227.666 M (  command for )S
58 239.666 M (conditional compilation,  would answer this question at compile-time.  At run-time the answer to an environmental )S
58 251.666 M (inquiry concerning an unsupported mode\'s status might best be  ABSNT,  defined herewith to be the name of no )S
58 263.666 M (mode.  ABSNT  is the mode of  INXCT,  UNFLO  and  DIRND  on a  CRAY Y-MP,  for example.)S
58 287.666 M (Flags and modes are variables of type  Flag  and  Mode  that may be sensed,  saved and set by library programs.  I )S
58 299.666 M (prefer programs that are syntactically functions but actually swap values.  For example,  my function )S
58 311.666 M (Fflag\( )S
(OVFLO, )S
(NewFlag )S
(\)  returns the current value of the  OVFLO  flag and resets that flag to  NewFlag.  )S
58 323.666 M (Fflag\(OVFLO\)  merely returns the value without changing it.  A flag\'s value resembles a pointer,  in that it may be )S
58 335.666 M (either  Null  or some  non-Null  value returned by  Fflag,  and also resembles a  Boolean  value insofar as  Null  )S
58 347.666 M (behaves like  False,  and every other flag like  True.  Consequently a typical pattern of use for  Fflag  goes like this:)S
58 367.666 M ( )S
end
3028 0 :M
f3_10 sf
( )S
3034 0 :M
FrameMacDict begin
0 0 0 1 0 0 0 FmK
0 FmP
60.5 367.666 M 0 0 252(  SavOV :=  Fflag\( OVFLO, Null \) ;   ...  )FmTx
end
3034 0 :M
f0_10 sf
( )S
3036 0 :M
FrameMacDict begin
0 0 0 1 0 0 0 FmK
0 FmP
312.5 367.666 M (saves & clears  OVFLO  flag.)S
58 379.666 M ( )S
end
3037 0 :M
f3_10 sf
( )S
3043 0 :M
FrameMacDict begin
0 0 0 1 0 0 0 FmK
0 FmP
60.5 379.666 M 0 0 312(  X :=  expression that may  Overflow  prematurely ;)FmTx
end
3043 0 :M
f0_10 sf
( )S
3045 0 :M
FrameMacDict begin
0 0 0 1 0 0 0 FmK
0 FmP
58 391.666 M ( )S
end
3045 0 :M
f3_10 sf
( )S
3051 0 :M
FrameMacDict begin
0 0 0 1 0 0 0 FmK
0 FmP
60.5 391.666 M 0 0 252(  If  Fflag\( OVFLO, SavOV \)  then    ...  )FmTx
end
3051 0 :M
f0_10 sf
( )S
3053 0 :M
FrameMacDict begin
0 0 0 1 0 0 0 FmK
0 FmP
312.5 391.666 M (having restored  OVFLO  flag)S
end
3054 0 :M
f3_10 sf
( )S
3060 0 :M
FrameMacDict begin
0 0 0 1 0 0 0 FmK
0 FmP
58 403.666 M 0 0 270(               X :=  alternative expression ;)FmTx
end
3060 0 :M
f0_10 sf
( )S
3062 0 :M
FrameMacDict begin
0 0 0 1 0 0 0 FmK
0 FmP
58 423.666 M (At the end,  premature  OVFLOs  have been hidden,  and the  OVFLO  flag is raised just if it was raised before or if )S
58 435.666 M (the alternative expression  X  overflowed.)S
58 459.666 M (Similarly,  Fmode\( DIRND, NewDir \)  swaps the  DIRND  mode for saving,  sensing and restoring.  For example,  )S
58 471.666 M (if function  g\( z \)  is contrived either to return a monotonic increasing function of its argument  z  and of its )S
58 483.666 M (rounding errors  \( this can be tricky \),  or else to take proper account of  Fmode\( DIRND, \311\),  then a few )S
58 495.666 M (statements like )S
end
3062 0 :M
f3_10 sf
( )S
3068 0 :M
FrameMacDict begin
0 0 0 1 0 0 0 FmK
0 FmP
58 507.666 M 0 0 264(      SavDir :=  Fmode\( DIRND, ToNEGV \) ;   )FmTx
end
3068 0 :M
f0_10 sf
( )S
3070 0 :M
FrameMacDict begin
0 0 0 1 0 0 0 FmK
0 FmP
322 507.666 M (...   Rounding towards  -)S
end
3071 0 :M
f4_10 sf
( )S
3073 0 :M
FrameMacDict begin
0 0 0 1 0 0 0 FmK
0 FmP
418.929 507.666 M (\245)S
end
3073 0 :M
f3_10 sf
( )S
3079 0 :M
FrameMacDict begin
0 0 0 1 0 0 0 FmK
0 FmP
58 519.666 M 0 0 264(      xlo    :=  g\( zlo \) ;                 )FmTx
end
3079 0 :M
f0_10 sf
( )S
3081 0 :M
FrameMacDict begin
0 0 0 1 0 0 0 FmK
0 FmP
322 519.666 M (...     yields upper bound.)S
end
3082 0 :M
f3_10 sf
( )S
3088 0 :M
FrameMacDict begin
0 0 0 1 0 0 0 FmK
0 FmP
58 531.666 M 0 0 264(      Dummy  :=  Fmode\( DIRND, ToPOSV \) ;   )FmTx
end
3088 0 :M
f0_10 sf
( )S
3090 0 :M
FrameMacDict begin
0 0 0 1 0 0 0 FmK
0 FmP
322 531.666 M (...   Rounding towards  +)S
end
3090 0 :M
f4_10 sf
( )S
3092 0 :M
FrameMacDict begin
0 0 0 1 0 0 0 FmK
0 FmP
421.241 531.666 M (\245)S
end
3093 0 :M
f3_10 sf
( )S
3099 0 :M
FrameMacDict begin
0 0 0 1 0 0 0 FmK
0 FmP
58 543.666 M 0 0 264(      xhi    :=  g\( zhi \) ;                 )FmTx
end
3099 0 :M
f0_10 sf
( )S
3101 0 :M
FrameMacDict begin
0 0 0 1 0 0 0 FmK
0 FmP
322 543.666 M (...     yields lower bound.)S
end
3101 0 :M
f3_10 sf
( )S
3107 0 :M
FrameMacDict begin
0 0 0 1 0 0 0 FmK
0 FmP
58 555.666 M 0 0 264(      Dummy  :=  Fmode\( DIRND, SavDir \) ;   )FmTx
end
3107 0 :M
f0_10 sf
( )S
3109 0 :M
FrameMacDict begin
0 0 0 1 0 0 0 FmK
0 FmP
322 555.666 M (...   Restores prior rounding.)S
58 567.666 M (guarantee that   xlo )S
end
3110 0 :M
f4_10 sf
( )S
3112 0 :M
FrameMacDict begin
0 0 0 1 0 0 0 FmK
0 FmP
137.133 567.666 M (\243)S
end
3112 0 :M
f0_10 sf
( )S
3114 0 :M
FrameMacDict begin
0 0 0 1 0 0 0 FmK
0 FmP
142.622 567.666 M ( g\(zlo\) )S
end
3115 0 :M
f4_10 sf
( )S
3117 0 :M
FrameMacDict begin
0 0 0 1 0 0 0 FmK
0 FmP
171.494 567.666 M (\243)S
end
3117 0 :M
f0_10 sf
( )S
3119 0 :M
FrameMacDict begin
0 0 0 1 0 0 0 FmK
0 FmP
176.982 567.666 M (  exact g\(z\)  )S
end
3120 0 :M
f4_10 sf
( )S
3122 0 :M
FrameMacDict begin
0 0 0 1 0 0 0 FmK
0 FmP
226.669 567.666 M (\243)S
end
3122 0 :M
f0_10 sf
( )S
3124 0 :M
FrameMacDict begin
0 0 0 1 0 0 0 FmK
0 FmP
232.158 567.666 M ( g\(zhi\) )S
end
3125 0 :M
f4_10 sf
( )S
3127 0 :M
FrameMacDict begin
0 0 0 1 0 0 0 FmK
0 FmP
261.03 567.666 M (\243)S
end
3127 0 :M
f0_10 sf
( )S
3129 0 :M
FrameMacDict begin
0 0 0 1 0 0 0 FmK
0 FmP
266.518 567.666 M ( xhi   despite roundoff.  This is admittedly a cumbersome way )S
58 579.666 M (to obtain what  Interval Arithmetic  would deliver easily if it received the support it deserves from popular )S
58 591.666 M (programming languages.)S
58 615.666 M (Here follows a simple example of flags and modes working together.  The  Euclidean Length  \( Norm \)  of a  )S
58 627.666 M (Double-Precision  vector  x  is)S
172.534 650.866 M (Vnrm\( x[1:L] \)  :=   )S
end
3130 0 :M
f4_10 sf
( )S
3132 0 :M
FrameMacDict begin
0 0 0 1 0 0 0 FmK
0 FmP
253.974 650.866 M (\326)S
end
3132 0 :M
f0_10 sf
( )S
3134 0 :M
FrameMacDict begin
0 0 0 1 0 0 0 FmK
0 FmP
259.462 650.866 M (\( x[1])S
end
3135 0 :M
f0_9 sf
( )S
3137 0 :M
FrameMacDict begin
0 0 0 1 0 0 0 FmK
0 FmP
FmG 281.945 646.866 M 0.978 0.978 scale (2)S FmR
end
3137 0 :M
f0_10 sf
( )S
3139 0 :M
FrameMacDict begin
0 0 0 1 0 0 0 FmK
0 FmP
286.335 650.866 M ( + x[2])S
end
3139 0 :M
f0_9 sf
( )S
3141 0 :M
FrameMacDict begin
0 0 0 1 0 0 0 FmK
0 FmP
FmG 313.63 646.866 M 0.978 0.978 scale (2)S FmR
end
3142 0 :M
f0_10 sf
( )S
3144 0 :M
FrameMacDict begin
0 0 0 1 0 0 0 FmK
0 FmP
318.021 650.866 M ( + x[3])S
end
3144 0 :M
f0_9 sf
( )S
3146 0 :M
FrameMacDict begin
0 0 0 1 0 0 0 FmK
0 FmP
FmG 345.315 646.866 M 0.978 0.978 scale (2)S FmR
end
3146 0 :M
f0_10 sf
( )S
3148 0 :M
FrameMacDict begin
0 0 0 1 0 0 0 FmK
0 FmP
349.706 650.866 M ( + ... + x[L])S
end
3149 0 :M
f0_9 sf
( )S
3151 0 :M
FrameMacDict begin
0 0 0 1 0 0 0 FmK
0 FmP
FmG 396.249 646.866 M 0.978 0.978 scale (2)S FmR
end
3151 0 :M
f0_10 sf
( )S
3153 0 :M
FrameMacDict begin
0 0 0 1 0 0 0 FmK
0 FmP
400.639 650.866 M ( \) .)S
58 670.866 M (This simple formula arises in so many matrix computations that every matrix package like  LAPACK  and  )S
58 682.866 M (MATLAB  contains a subprogram devoted to it.  It poses two technical challenges;  how may we ...)S
[/CropBox[-14 773 FmDC 598 -19 FmDC]/PAGE FmPD
end
endp
%%Page: 27 27
%%BeginPageSetup
initializepage
(W. Kahan; page: 27 of 30)setjob
%%EndPageSetup
gS 0 0 584 768 rC
1 G
-14 -19 612 792 rF
0 G
3154 0 :M
FrameMacDict begin
0 0 0 1 0 0 0 FmK
0 FmP
0 FmSP
7 FmP
58 17 468 10 FmqF
end
3154 0 :M
f0_10 sf
( )S
3156 0 :M
FrameMacDict begin
0 0 0 1 0 0 0 FmK
0 FmP
58 23.82 M (Work in Progress:                          Lecture Notes on the Status of  IEEE 754                            )S
(August 17, 1995)S
7 FmP
58 729.678 468 10 FmqF
0 FmP
494.064 736.498 M (Page )S
(27)S
7 FmP
58 53 468 648 FmqF
0 FmP
58 62.867 M (  1.  avoid an incorrect result caused by premature  Overflow  of some  x[j])S
end
3157 0 :M
f0_9 sf
( )S
3159 0 :M
FrameMacDict begin
0 0 0 1 0 0 0 FmK
0 FmP
FmG 357.304 58.867 M 0.978 0.978 scale (2)S FmR
end
3159 0 :M
f0_10 sf
( )S
3161 0 :M
FrameMacDict begin
0 0 0 1 0 0 0 FmK
0 FmP
361.694 62.867 M (  or  Underflow  of too many of)S
58 74.867 M (        them though the true value of  Vnrm  is unexceptional?)S
58 94.866 M (  2.  avoid excessive accumulation of roundoff when  L  is huge?  \( For example,  consider the case when every)S
58 110.066 M (         x[j]  for  j > 1  is barely small enough that  x[j])S
end
3161 0 :M
f0_9 sf
( )S
3163 0 :M
FrameMacDict begin
0 0 0 1 0 0 0 FmK
0 FmP
FmG 267.187 106.066 M 0.978 0.978 scale (2)S FmR
end
3164 0 :M
f0_10 sf
( )S
3166 0 :M
FrameMacDict begin
0 0 0 1 0 0 0 FmK
0 FmP
271.577 110.066 M ( + x[1])S
end
3166 0 :M
f0_9 sf
( )S
3168 0 :M
FrameMacDict begin
0 0 0 1 0 0 0 FmK
0 FmP
FmG 298.872 106.066 M 0.978 0.978 scale (2)S FmR
end
3168 0 :M
f0_10 sf
( )S
3170 0 :M
FrameMacDict begin
0 0 0 1 0 0 0 FmK
0 FmP
303.262 110.066 M (  rounds to  x[1])S
end
3171 0 :M
f0_9 sf
( )S
3173 0 :M
FrameMacDict begin
0 0 0 1 0 0 0 FmK
0 FmP
FmG 367.413 106.066 M 0.978 0.978 scale (2)S FmR
end
3173 0 :M
f0_10 sf
( )S
3175 0 :M
FrameMacDict begin
0 0 0 1 0 0 0 FmK
0 FmP
371.803 110.066 M ( ;  then  Vnrm  can come out too)S
58 122.066 M (           small by about  L/4  units in its last place if the additions are performed left-to-right.  L  usually stays)S
58 134.066 M (            below a few hundred,  but often runs into several thousands.\))S
58 158.066 M (These challenges are worth overcoming only if doing so does not slow computation of  Vnrm  too much compared )S
58 170.066 M (with the obvious subprogram:)S
end
3176 0 :M
f3_10 sf
( )S
3182 0 :M
FrameMacDict begin
0 0 0 1 0 0 0 FmK
0 FmP
58 190.066 M 0 0 264(             Double  Vnrm\( Double x[1:L] \) ;)FmTx
58 202.066 M 0 0 150(               s := 0.0 ;)FmTx
58 214.066 M 0 0 360(               For  j := 1 to L  do   s :=  s + x[j]*x[j]  ;)FmTx
58 226.066 M 0 0 186(               Return{ Vnrm := )FmTx
end
3182 0 :M
f4_10 sf
( )S
3184 0 :M
FrameMacDict begin
0 0 0 1 0 0 0 FmK
0 FmP
244 226.066 M 0 0 5(\326)FmTx
end
3184 0 :M
f3_10 sf
( )S
3190 0 :M
FrameMacDict begin
0 0 0 1 0 0 0 FmK
0 FmP
249 226.066 M 0 0 24(s }.)FmTx
end
3190 0 :M
f0_10 sf
( )S
3192 0 :M
FrameMacDict begin
0 0 0 1 0 0 0 FmK
0 FmP
58 250.066 M (On a  680x0-based  Macintosh  or  PC  with  ix87,  our problem has an easy solution provided the compiler )S
58 262.066 M (supports  IEEE 754 Double-Extended  \( REAL*10+\):  begin the obvious subprogram with the declaration)S
end
3193 0 :M
f3_10 sf
( )S
3199 0 :M
FrameMacDict begin
0 0 0 1 0 0 0 FmK
0 FmP
58 274.066 M 0 0 240(               Double-Extended  s := 0 .)FmTx
end
3199 0 :M
f0_10 sf
( )S
3201 0 :M
FrameMacDict begin
0 0 0 1 0 0 0 FmK
0 FmP
58 286.066 M (Then the sum-of-squares  s  will accumulate in a register with  3  more bits of exponent range and  11  more bits of )S
58 298.066 M (precision then  Vnrm  and  x[...].  Thus,  with no loss of speed,  Over/Underflow  is precluded unless  Vnrm  must )S
58 310.066 M (lie out of range,  and roundoff is kept below  1 + L/8192 units  in its last place.  These are typical benefits of an  )S
58 322.066 M (Extended  format.  Moreover,  this subprogram honors   Directed Roundings  and the  KOUNT  mode of  Over/)S
58 334.066 M (Underflow.)S
58 358.066 M (In the absence of  Extended,  a craftier subprogram is needed to fiddle with flags and modes during the computation )S
58 370.066 M (of  Vnrm .  If what follows appears too baroque,  compare it with slower,  less accurate and more elaborate )S
58 382.066 M (subprograms that now infest portable libraries like  LAPACK.)S
end
3201 0 :M
f3_9 sf
( )S
3206 0 :M
FrameMacDict begin
0 0 0 1 0 0 0 FmK
0 FmP
58 404.399 M 0 0 165(  Double  Vnrm\( Double x[1:L] \) ;)FmTx
58 415.399 M 0 0 310(    OVm := Fmode\(OVFLO, IEEED\) ;  UNm := Fmode\(UNFLO, IEEED\) ;)FmTx
58 426.399 M 0 0 340(    OVf := Fflag\(OVFLO, Null\) ;   UNf := Fflag\(UNFLO, Null\) ;  ...  )FmTx
end
3206 0 :M
f0_9 sf
( )S
3208 0 :M
FrameMacDict begin
0 0 0 1 0 0 0 FmK
0 FmP
398 426.399 M (swaps!)S
end
3208 0 :M
f3_9 sf
( )S
3213 0 :M
FrameMacDict begin
0 0 0 1 0 0 0 FmK
0 FmP
58 437.399 M 0 0 145(    b := 1 ;  d := 1 ;  ...  )FmTx
end
3213 0 :M
f0_9 sf
( )S
3215 0 :M
FrameMacDict begin
0 0 0 1 0 0 0 FmK
0 FmP
203 437.399 M (these will be scale factors,  if needed.)S
end
3216 0 :M
f3_9 sf
( )S
3221 0 :M
FrameMacDict begin
0 0 0 1 0 0 0 FmK
0 FmP
58 448.399 M 0 0 150(    s := 0 ;  c := 0 ;  ...  c)FmTx
end
3221 0 :M
f0_9 sf
( )S
3223 0 :M
FrameMacDict begin
0 0 0 1 0 0 0 FmK
0 FmP
208 448.399 M (  will compensate for additive roundoff.)S
end
3223 0 :M
f3_9 sf
( )S
3228 0 :M
FrameMacDict begin
0 0 0 1 0 0 0 FmK
0 FmP
58 459.399 M 0 0 130(    For  j := 1 to L  Do {)FmTx
58 470.399 M 0 0 115(       r := x[j]*x[j] ;)FmTx
58 481.399 M 0 0 200(       t := s ;  s := \(r+c\) + t ;  ...  )FmTx
end
3228 0 :M
f0_9 sf
( )S
3230 0 :M
FrameMacDict begin
0 0 0 1 0 0 0 FmK
0 FmP
258 481.399 M (Compensate for this roundoff:)S
end
3230 0 :M
f3_9 sf
( )S
3235 0 :M
FrameMacDict begin
0 0 0 1 0 0 0 FmK
0 FmP
58 492.399 M 0 0 200(       c := \(\(t-s\) + r\) + c } ;    ...  )FmTx
end
3235 0 :M
f0_9 sf
( )S
3237 0 :M
FrameMacDict begin
0 0 0 1 0 0 0 FmK
0 FmP
258 492.399 M (Heed parentheses!)S
end
3237 0 :M
f3_9 sf
( )S
3242 0 :M
FrameMacDict begin
0 0 0 1 0 0 0 FmK
0 FmP
58 503.399 M 0 0 150(    OVf := Fflag\(OVFLO, OVf\) ;)FmTx
58 517.279 M 0 0 190(    If \( Fflag\(UNFLO, Null\) & \(s < 0.5)FmTx
end
3242 0 :M
f3_8 sf
( )S
3246 0 :M
FrameMacDict begin
0 0 0 1 0 0 0 FmK
0 FmP
FmG 248 513.679 M 0.99 0.99 scale 0 0 14.403(969)FmTx FmR
end
3247 0 :M
f3_9 sf
( )S
3252 0 :M
FrameMacDict begin
0 0 0 1 0 0 0 FmK
0 FmP
262.258 517.279 M 0 0 105(\) \)             ...  )FmTx
end
3252 0 :M
f0_9 sf
( )S
3254 0 :M
FrameMacDict begin
0 0 0 1 0 0 0 FmK
0 FmP
367.258 517.279 M (Constants)S
end
3254 0 :M
f3_9 sf
( )S
3259 0 :M
FrameMacDict begin
0 0 0 1 0 0 0 FmK
0 FmP
58 531.159 M 0 0 170(                  Then {  b := 2.0)FmTx
end
3259 0 :M
f3_8 sf
( )S
3263 0 :M
FrameMacDict begin
0 0 0 1 0 0 0 FmK
0 FmP
FmG 228 527.559 M 0.99 0.99 scale 0 0 14.403(996)FmTx FmR
end
3264 0 :M
f3_9 sf
( )S
3269 0 :M
FrameMacDict begin
0 0 0 1 0 0 0 FmK
0 FmP
242.258 531.159 M 0 0 60( ;  d := 0.5)FmTx
end
3269 0 :M
f3_8 sf
( )S
3273 0 :M
FrameMacDict begin
0 0 0 1 0 0 0 FmK
0 FmP
FmG 302.258 527.559 M 0.99 0.99 scale 0 0 14.403(996)FmTx FmR
end
3274 0 :M
f3_9 sf
( )S
3279 0 :M
FrameMacDict begin
0 0 0 1 0 0 0 FmK
0 FmP
316.516 531.159 M 0 0 55( }    ...  )FmTx
end
3279 0 :M
f0_9 sf
( )S
3281 0 :M
FrameMacDict begin
0 0 0 1 0 0 0 FmK
0 FmP
371.516 531.159 M (suit only)S
end
3281 0 :M
f3_9 sf
( )S
3286 0 :M
FrameMacDict begin
0 0 0 1 0 0 0 FmK
0 FmP
58 542.159 M 0 0 310(       Else If \( OVf \)                                   ...  )FmTx
end
3286 0 :M
f0_9 sf
( )S
3288 0 :M
FrameMacDict begin
0 0 0 1 0 0 0 FmK
0 FmP
368 542.159 M (IEEE 754)S
end
3288 0 :M
f3_9 sf
( )S
3293 0 :M
FrameMacDict begin
0 0 0 1 0 0 0 FmK
0 FmP
58 556.039 M 0 0 170(                  Then {  b := 0.5)FmTx
end
3293 0 :M
f3_8 sf
( )S
3297 0 :M
FrameMacDict begin
0 0 0 1 0 0 0 FmK
0 FmP
FmG 228 552.439 M 0.99 0.99 scale 0 0 14.403(754)FmTx FmR
end
3298 0 :M
f3_9 sf
( )S
3303 0 :M
FrameMacDict begin
0 0 0 1 0 0 0 FmK
0 FmP
242.258 556.039 M 0 0 60( ;  d := 2.0)FmTx
end
3303 0 :M
f3_8 sf
( )S
3307 0 :M
FrameMacDict begin
0 0 0 1 0 0 0 FmK
0 FmP
FmG 302.258 552.439 M 0.99 0.99 scale 0 0 14.403(754)FmTx FmR
end
3308 0 :M
f3_9 sf
( )S
3313 0 :M
FrameMacDict begin
0 0 0 1 0 0 0 FmK
0 FmP
316.516 556.039 M 0 0 55( } ;  ...  )FmTx
end
3313 0 :M
f0_9 sf
( )S
3315 0 :M
FrameMacDict begin
0 0 0 1 0 0 0 FmK
0 FmP
371.516 556.039 M ( Double.)S
end
3315 0 :M
f3_9 sf
( )S
3320 0 :M
FrameMacDict begin
0 0 0 1 0 0 0 FmK
0 FmP
58 567.039 M 0 0 55(    If \( b )FmTx
end
3320 0 :M
f4_9 sf
( )S
3322 0 :M
FrameMacDict begin
0 0 0 1 0 0 0 FmK
0 FmP
113 567.039 M 0 0 5(\271)FmTx
end
3323 0 :M
f3_9 sf
( )S
3328 0 :M
FrameMacDict begin
0 0 0 1 0 0 0 FmK
0 FmP
118 567.039 M 0 0 95( 1 \)  Then {  ...  )FmTx
end
3328 0 :M
f0_9 sf
( )S
3330 0 :M
FrameMacDict begin
0 0 0 1 0 0 0 FmK
0 FmP
213 567.039 M (Redo accumulation with scaled  x[j]\'s.)S
end
3330 0 :M
f3_9 sf
( )S
3335 0 :M
FrameMacDict begin
0 0 0 1 0 0 0 FmK
0 FmP
58 578.039 M 0 0 125(       s := 0 ;  c := 0 ;)FmTx
58 589.039 M 0 0 145(       For  j := 1 to L  Do {)FmTx
58 600.039 M 0 0 175(          t := b*x[j] ;  r := t*t ;)FmTx
58 611.039 M 0 0 180(          t := s :  s := \(r+c\) + t ;)FmTx
58 622.039 M 0 0 175(          c := \(\(t-s\) +r\) + c } } ;)FmTx
58 633.039 M 0 0 150(    UNf := Fflag\(UNFLO, UNf\) ;)FmTx
58 644.039 M 0 0 290(    OVm := Fmode\(OVFLO, OVm\) ;  UNm := Fmode\(UNFLO, UNm\) ;)FmTx
58 655.039 M 0 0 110(    Return{ Vnrm := d*)FmTx
end
3335 0 :M
f4_9 sf
( )S
3337 0 :M
FrameMacDict begin
0 0 0 1 0 0 0 FmK
0 FmP
168 655.039 M 0 0 5(\326)FmTx
end
3337 0 :M
f3_9 sf
( )S
3342 0 :M
FrameMacDict begin
0 0 0 1 0 0 0 FmK
0 FmP
173 655.039 M 0 0 25(s } .)FmTx
end
3342 0 :M
f0_10 sf
( )S
3344 0 :M
FrameMacDict begin
0 0 0 1 0 0 0 FmK
0 FmP
58 674.706 M (The last expression computed and  Returned  also raises and merges only those flags that deserve alteration,  or else  )S
58 686.706 M (KOUNTs.)S
[/CropBox[-14 773 FmDC 598 -19 FmDC]/PAGE FmPD
end
endp
%%Page: 28 28
%%BeginPageSetup
initializepage
(W. Kahan; page: 28 of 30)setjob
%%EndPageSetup
gS 0 0 584 768 rC
1 G
-14 -19 612 792 rF
0 G
3345 0 :M
FrameMacDict begin
0 0 0 1 0 0 0 FmK
0 FmP
0 FmSP
7 FmP
58 17 468 10 FmqF
end
3345 0 :M
f0_10 sf
( )S
3347 0 :M
FrameMacDict begin
0 0 0 1 0 0 0 FmK
0 FmP
58 23.82 M (Work in Progress:                          Lecture Notes on the Status of  IEEE 754                            )S
(August 17, 1995)S
7 FmP
58 729.678 468 10 FmqF
0 FmP
494.064 736.498 M (Page )S
(28)S
7 FmP
58 53 468 648 FmqF
0 FmP
58 59.667 M (The  SANE  library provides two procedures  ProcEntry  and  ProcExit  to save and restore all flags and modes,  )S
58 71.667 M (and merge old flags with new,  simultaneously.  However  SANE  makes no provision for exceptions other than )S
58 83.667 M (those mentioned by  IEEE 754  nor for modes other than  ABORT  and  IEEED  nor for computer systems that do )S
58 95.667 M (not conform to  IEEE 754.  My scheme lets a programmer utter,  for example,)S
end
3348 0 :M
f3_10 sf
( )S
3354 0 :M
FrameMacDict begin
0 0 0 1 0 0 0 FmK
0 FmP
58 115.667 M 0 0 420(  If \( Fmode\(INXCT, IEEED\) = ABSNT \) then  Dummy := Fflag\(INXCT, True\))FmTx
58 127.667 M 0 0 426(                                     else  Dummy := Fflag\(INXCT, Null\);)FmTx
end
3354 0 :M
f0_10 sf
( )S
3356 0 :M
FrameMacDict begin
0 0 0 1 0 0 0 FmK
0 FmP
58 147.667 M (after which his program repeatedly preconditions data until a rounding error renders further repetition unnecessary,  )S
58 159.667 M (on machines that detect  INXCT,  but preconditions just once otherwise.)S
58 195.666 M (I need three more library programs.  Two of them are swapping functions.  Fpsubs\( ExceptionName,  NewValue \)  )S
58 207.666 M (supports presubstitution.  Second,  Kountf\( k, Initk \)  designates  k  to be the integer variable into which  OVER/)S
58 219.666 M (UNDERFLOWs  will be counted,  reads out the current value of  k ,  and then resets it to the value of  Initk .  Those )S
58 231.666 M (two may be embedded in  Fmode.  The third program inserts or updates entries in the log of  Retrospective )S
58 243.666 M (Diagnostics  or reads it out,  but that is a story for another day.)S
58 279.666 M (The foregoing scheme to handle floating-point exceptions can be called elaborate,  complicated,  cumbersome,  ...;  )S
58 291.666 M (add your own pejoratives.  I shall rejoice if somebody shows me a simpler way to accomplish all of what this )S
58 303.666 M (scheme tries to do.  Meanwhile,  onlookers who need not know about all these complications can stay in their )S
58 315.666 M (blissful state because IEEE 754  was designed with their state of mind in mind.)S
58 339.666 M (IEEE 754  acknowledges  partially nested computational domains.  What this means is best illustrated by examples.  )S
58 351.666 M (Someone who wishes to perform floating-point computations exactly,  without roundoff,  must pay close attention )S
58 363.666 M (to the  INXCT  exception;  the rest of us ignore it because we are willing to tolerate roundoff.  Someone whose )S
58 375.666 M (concept of  Real Number  excludes  Infinity  must watch out for  DIVBZ ;   those of us who accept  )S
end
3356 0 :M
f4_10 sf
( )S
3358 0 :M
FrameMacDict begin
0 0 0 1 0 0 0 FmK
0 FmP
458.134 375.666 M (\261)S
end
3359 0 :M
f0_10 sf
( )S
3361 0 :M
FrameMacDict begin
0 0 0 1 0 0 0 FmK
0 FmP
463.623 375.666 M (Infinity  as the )S
58 387.666 M (uttermost among the  Reals  ignore it.  Quantities so small as  1.0E-307  lie beneath our notice most the time,  so we )S
58 399.666 M (ignore  UNFLO ;  and  IEEE 754  specifies that  Underflow  be  Gradual  to reduce the risk of harm from what we )S
58 411.666 M (disdain.  A few people can ignore  OVFLO  in a situation where any sufficiently big number will do;  this belief )S
58 423.666 M (could be tested by recomputing with  OVFLO  in a few modes like  PSUBS\( 1.0E32, )S
end
3361 0 :M
f4_10 sf
( )S
3363 0 :M
FrameMacDict begin
0 0 0 1 0 0 0 FmK
0 FmP
400.424 423.666 M (\261)S
end
3364 0 :M
f0_10 sf
( )S
3366 0 :M
FrameMacDict begin
0 0 0 1 0 0 0 FmK
0 FmP
405.913 423.666 M ( \),  PSUBS\( 1.0E64, )S
end
3366 0 :M
f4_10 sf
( )S
3368 0 :M
FrameMacDict begin
0 0 0 1 0 0 0 FmK
0 FmP
489.243 423.666 M (\261)S
end
3369 0 :M
f0_10 sf
( )S
3371 0 :M
FrameMacDict begin
0 0 0 1 0 0 0 FmK
0 FmP
494.731 423.666 M ( \),  )S
58 435.666 M (PSUBS\( )S
(1.0E128, )S
end
3371 0 :M
f4_10 sf
( )S
3373 0 :M
FrameMacDict begin
0 0 0 1 0 0 0 FmK
0 FmP
133.002 435.666 M (\261)S
end
3374 0 :M
f0_10 sf
( )S
3376 0 :M
FrameMacDict begin
0 0 0 1 0 0 0 FmK
0 FmP
138.491 435.666 M ( \),  ...  instead of  IEEED = PSUBS\( Infinity, )S
end
3376 0 :M
f4_10 sf
( )S
3378 0 :M
FrameMacDict begin
0 0 0 1 0 0 0 FmK
0 FmP
319.365 435.666 M (\261)S
end
3379 0 :M
f0_10 sf
( )S
3381 0 :M
FrameMacDict begin
0 0 0 1 0 0 0 FmK
0 FmP
324.853 435.666 M ( \) .  Nobody can ignore  INVLD  unless )S
58 447.666 M (somebody else has used  Fflag\( INVLD, ... \)  or  Fmode\( INVLD, PSUBS \)  or  IsNaN\(...\)  to cope with that )S
58 459.666 M (exception.)S
58 483.666 M (In short,  most of us can ignore most exceptions most the time provided somebody else has thought about them.  )S
58 495.666 M (That  \322 )S
(somebody else )S
(\323  needs our support lest we all be obliged to face some ugly problems unaided.)S
[/CropBox[-14 773 FmDC 598 -19 FmDC]/PAGE FmPD
end
endp
%%Page: 29 29
%%BeginPageSetup
initializepage
(W. Kahan; page: 29 of 30)setjob
%%EndPageSetup
gS 0 0 584 768 rC
1 G
-14 -19 612 792 rF
0 G
3381 0 :M
FrameMacDict begin
0 0 0 1 0 0 0 FmK
0 FmP
0 FmSP
7 FmP
58 17 468 10 FmqF
end
3381 0 :M
f0_10 sf
( )S
3383 0 :M
FrameMacDict begin
0 0 0 1 0 0 0 FmK
0 FmP
58 23.82 M (Work in Progress:                          Lecture Notes on the Status of  IEEE 754                            )S
(August 17, 1995)S
7 FmP
58 729.678 468 10 FmqF
0 FmP
494.064 736.498 M (Page )S
(29)S
7 FmP
58 53 468 648 FmqF
end
3384 0 :M
f1_12 sf
( )S
3387 0 :M
FrameMacDict begin
0 0 0 1 0 0 0 FmK
0 FmP
58 61 M (Ruminations)S
end
3387 0 :M
f0_12 sf
( )S
3390 0 :M
FrameMacDict begin
0 0 0 1 0 0 0 FmK
0 FmP
123.997 61 M (  on  Programming Languages:)S
end
3390 0 :M
f0_10 sf
( )S
3392 0 :M
FrameMacDict begin
0 0 0 1 0 0 0 FmK
0 FmP
58 73.667 M (Mediaeval thinkers held to a superstition that  Thought  was impossible without  Language;  that is how  \322dumb\323  )S
58 85.667 M (came to change its meaning from  \322speechless\323  to  \322stupid.\323  With the advent of computers,  \322Thought\323  and  )S
58 97.667 M (\322Language\323  have changed their meanings,  and now there is some truth to the old superstition:  In so far as )S
58 109.667 M (programming languages constrain utterance,  they also constrain what a programmer may contemplate productively )S
58 121.667 M (unless disrupted by bitter experience or liberated by vigorous imagination.  Considering how relatively few )S
58 133.667 M (programmers grapple daily with floating-point arithmetic,  and how few of those have time to contemplate )S
58 145.667 M (unsupported features of  IEEE 754,  it comes as no surprise that computer linguists receive hardly any requests to )S
58 157.667 M (support those features.)S
58 181.667 M (Most computer linguists find floating-point arithmetic too disruptive.  Their predilection for  \322 referential )S
58 193.667 M (transparency,\323  which means that a well-formed expression\'s meaning should not change from one context to )S
58 205.666 M (another,  runs counter to an imperative of approximate calculation:)S
94 217.666 M (The precisions with which expressions are evaluated must depend upon context because the accuracy )S
94 229.666 M (required of an approximation depends more upon the uses to which it will be put and upon the )S
94 241.666 M (resources available to compute it than upon alleged precisions of constituent subexpressions.)S
58 253.666 M (Consequently,  rules inherited from  Fortran IV  \( invented in 1963 \)  for evaluating mixed-precision expressions are )S
58 265.666 M (not optimal and never were;  those rules turn pernicious when applied to more than two precisions,  especially when )S
58 277.666 M (precisions can vary at run-time.  See  C. Farnum\'s  1988  paper for better ways to handle mixed precisions.)S
58 301.666 M (Computer linguists dislike functions with side-effects and functions affected by implicit variables not explicit in )S
58 313.666 M (argument lists.  But floating-point operations can raise  IEEE 754  exception flags as side-effects,  and operations )S
58 325.666 M (are affected implicitly by exception-handling and rounding modes eligible at run-time according to  IEEE 754.  )S
58 337.666 M (Alas,  that standard omitted to bind flags and modes to locutions in standard programming languages,  and this )S
58 349.666 M (omission grants computer linguists a licence for inaction.)S
58 373.666 M (The side-effects and implicit variables in  IEEE 754  admit tractable disciplines;  they are not whimsical.  )S
58 385.666 M (Moreover,  other mathematical and computational domains exist where context-dependence,  side-effects and )S
58 397.666 M (implicit variables are rampant.  Here are two examples of context-dependence:  First,  non-interval expressions )S
58 409.666 M (must be evaluated as if they were intervals when mixed with  Interval Arithmetic  expressions.  Second,  in )S
58 421.666 M (ostensibly coordinate-free  Linear Algebra,  expressions must be evaluated in some coordinate system determinable )S
58 433.666 M (from context if it is determinable at all.  Examples of side-effects and implicit variables abound in operating )S
58 445.666 M (systems,  input/output and file-handling,  real-time control systems,  and synchronization of parallel computing.)S
58 469.666 M (In short,  the features of  IEEE 754  that computer linguists disdain raise issues that cannot be evaded by avoiding )S
58 481.666 M (floating-point;  they have to be addressed elsewhere anyway,  and in forms more obnoxious than in  IEEE 754.  )S
58 493.666 M (Programmers ambitious enough to try to apply those features but left to their own devices cannot transport their )S
58 505.666 M (meager successes to different computer systems;  their situation could worsen only if palliatives were incorporated )S
58 517.666 M (into language standards,  and there is some risk of that.  Thoughtful action is needed now to avert an intensification )S
58 529.666 M (of market fragmentation that retards development of robust numerical software and diminishes the market and its )S
58 541.666 M (rewards for all of us.)S
[/CropBox[-14 773 FmDC 598 -19 FmDC]/PAGE FmPD
end
endp
%%Page: 30 30
%%BeginPageSetup
initializepage
(W. Kahan; page: 30 of 30)setjob
%%EndPageSetup
gS 0 0 584 768 rC
1 G
-14 -19 612 792 rF
0 G
3392 0 :M
FrameMacDict begin
0 0 0 1 0 0 0 FmK
0 FmP
0 FmSP
7 FmP
58 17 468 10 FmqF
end
3392 0 :M
f0_10 sf
( )S
3394 0 :M
FrameMacDict begin
0 0 0 1 0 0 0 FmK
0 FmP
58 23.82 M (Work in Progress:                          Lecture Notes on the Status of  IEEE 754                            )S
(August 17, 1995)S
7 FmP
58 729.678 468 10 FmqF
0 FmP
494.064 736.498 M (Page )S
(30)S
7 FmP
58 53 468 648 FmqF
end
3395 0 :M
f1_12 sf
( )S
3398 0 :M
FrameMacDict begin
0 0 0 1 0 0 0 FmK
0 FmP
58 61 M (Annotated Bibliography.)S
end
3398 0 :M
f0_9 sf
( )S
3400 0 :M
FrameMacDict begin
0 0 0 1 0 0 0 FmK
0 FmP
58 73 M (IEEE standards 754  and  854  for  Floating-Point Arithmetic.  For a readable account see the article by  W. J. Cody  et al.  in the  )S
58 84 M (IEEE Magazine  )S
end
3400 0 :M
f2_9 sf
( )S
3402 0 :M
FrameMacDict begin
0 0 0 1 0 0 0 FmK
0 FmP
119.717 84 M (MICRO)S
end
3402 0 :M
f0_9 sf
( )S
3404 0 :M
FrameMacDict begin
0 0 0 1 0 0 0 FmK
0 FmP
148.204 84 M (,  Aug. 1984,  pp. 84 - 100.)S
58 106 M (\322What every computer scientist should know about floating-point arithmetic\323  D. Goldberg,  pp. 5-48 in  )S
end
3404 0 :M
f2_9 sf
( )S
3406 0 :M
FrameMacDict begin
0 0 0 1 0 0 0 FmK
0 FmP
436.881 106 M (ACM Computing )S
58 117 M (Surveys)S
end
3407 0 :M
f0_9 sf
( )S
3409 0 :M
FrameMacDict begin
0 0 0 1 0 0 0 FmK
0 FmP
85.984 117 M ( vol. 23 #1 \(1991\).  Also his  \322Computer Arithmetic,\323  appendix A  in  )S
end
3409 0 :M
f2_9 sf
( )S
3411 0 :M
FrameMacDict begin
0 0 0 1 0 0 0 FmK
0 FmP
341.427 117 M (Computer Architecture:  A Quantitative )S
58 128 M (Approach)S
end
3411 0 :M
f0_9 sf
( )S
3413 0 :M
FrameMacDict begin
0 0 0 1 0 0 0 FmK
0 FmP
93.492 128 M (  J.L. Hennessey and  D.A. Patterson \(1990\),  Morgan Kaufmann,  San Mateo CA.  Surveys the basics.)S
58 150 M (\322Compiler Support for Floating-Point Computation\323  Charles Farnum,  pp. 701-9  in  )S
end
3413 0 :M
f2_9 sf
( )S
3415 0 :M
FrameMacDict begin
0 0 0 1 0 0 0 FmK
0 FmP
366.446 150 M (Software Practices and Experience)S
end
3416 0 :M
f0_9 sf
( )S
3418 0 :M
FrameMacDict begin
0 0 0 1 0 0 0 FmK
0 FmP
493.149 150 M (  vol. 18 )S
58 161 M (no. 7 \(1988\).  Describes,  among other things,  better ways than are now customary in  Fortran  and  C  to evaluate mixed-)S
58 172 M (precision expressions.)S
58 194 M (Intel  )S
end
3418 0 :M
f2_9 sf
( )S
3420 0 :M
FrameMacDict begin
0 0 0 1 0 0 0 FmK
0 FmP
78.99 194 M (Pentium Family User\'s Manual,  Volume 3:  Architecture and Programming Manual)S
end
3420 0 :M
f0_9 sf
( )S
3422 0 :M
FrameMacDict begin
0 0 0 1 0 0 0 FmK
0 FmP
384.336 194 M (  \(1994\)  Order no. 241430  Explains )S
58 205 M (instruction set,  control word,  flags;  gives examples.  Its flaws are listed in  )S
end
3422 0 :M
f2_9 sf
( )S
3424 0 :M
FrameMacDict begin
0 0 0 1 0 0 0 FmK
0 FmP
334.405 205 M (Pentium Processor Specifications Update)S
end
3425 0 :M
f0_9 sf
( )S
3427 0 :M
FrameMacDict begin
0 0 0 1 0 0 0 FmK
0 FmP
484.612 205 M (  Order )S
58 216 M (No. 242480-001 \(Feb. 1995\))S
end
3427 0 :M
f2_9 sf
( )S
3429 0 :M
FrameMacDict begin
0 0 0 1 0 0 0 FmK
0 FmP
58 238 M (Programming the 80386,  featuring 80386/387)S
end
3429 0 :M
f0_9 sf
( )S
3431 0 :M
FrameMacDict begin
0 0 0 1 0 0 0 FmK
0 FmP
226.985 238 M (   John H. Crawford  &  Patrick P. Gelsinger  \(1987\)  Sybex,  Alameda CA.  )S
58 249 M (Explains instruction set,  control word,  flags;  gives examples.)S
end
3431 0 :M
f2_9 sf
( )S
3433 0 :M
FrameMacDict begin
0 0 0 1 0 0 0 FmK
0 FmP
58 271 M (The 8087 Primer)S
end
3434 0 :M
f0_9 sf
( )S
3436 0 :M
FrameMacDict begin
0 0 0 1 0 0 0 FmK
0 FmP
119.488 271 M (   John F. Palmer  &  Stephen P. Morse \(1984\) Wiley Press,  New York NY.  Mainly of historical interest now.)S
58 293 M (User\'s Manuals  \(instruction sets, control words, flags\)  for  ...)S
58 304 M (  MC 68881 and 68882 Floating-Point Coprocessors)S
99.771 N (MC68881UM/AD \(1989\))S
58 315 M (  MC 68040 Microprocessor)S
186.027 N (MC68040UM/AD \(1993\))S
58 326 M (  Motorola  PowerPC 601 Microprocessor)S
137.043 N (MPC601UM/AD  \(1993\))S
58 348 M (Apple )S
end
3436 0 :M
f2_9 sf
( )S
3438 0 :M
FrameMacDict begin
0 0 0 1 0 0 0 FmK
0 FmP
82.242 348 M (Numerics Manual, Second Edition)S
end
3438 0 :M
f0_9 sf
( )S
3440 0 :M
FrameMacDict begin
0 0 0 1 0 0 0 FmK
0 FmP
206.217 348 M (   \(1988\)  Addison-Wesley,  Reading, Mass.  Covers  Apple II  and  680x0-based  )S
58 359 M (Macintosh floating-point;  what a pity that nothing like it is promulgated for the  ix87 !  For  PowerPC-based  Macs,  see  Apple )S
58 370 M (Tech. Library   )S
end
3440 0 :M
f2_9 sf
( )S
3442 0 :M
FrameMacDict begin
0 0 0 1 0 0 0 FmK
0 FmP
114.219 370 M (Inside Macintosh:  PowerPC Numerics)S
end
3443 0 :M
f0_9 sf
( )S
3445 0 :M
FrameMacDict begin
0 0 0 1 0 0 0 FmK
0 FmP
255.681 370 M (  \(1994\);  for  PowerPC  generally,  see a forthcoming document on   )S
end
3445 0 :M
f2_9 sf
( )S
3447 0 :M
FrameMacDict begin
0 0 0 1 0 0 0 FmK
0 FmP
58 381 M (Foundation Services for the)S
end
3447 0 :M
f0_9 sf
( )S
3449 0 :M
FrameMacDict begin
0 0 0 1 0 0 0 FmK
0 FmP
158.224 381 M ( CommonPoint )S
end
3449 0 :M
f2_9 sf
( )S
3451 0 :M
FrameMacDict begin
0 0 0 1 0 0 0 FmK
0 FmP
215.232 381 M (Application System)S
end
3452 0 :M
f0_9 sf
( )S
3454 0 :M
FrameMacDict begin
0 0 0 1 0 0 0 FmK
0 FmP
284.463 381 M (   from  Taligent  which will support  Floating-Point  C  )S
58 392 M (Extensions  now before  ANSI X3-J11.)S
58 414 M (Sun Microsystems   )S
end
3454 0 :M
f2_9 sf
( )S
3456 0 :M
FrameMacDict begin
0 0 0 1 0 0 0 FmK
0 FmP
131.49 414 M (Numerical Computation Guide)S
end
3456 0 :M
f0_9 sf
( )S
3458 0 :M
FrameMacDict begin
0 0 0 1 0 0 0 FmK
0 FmP
242.975 414 M (   Part no. 800-5277-10 \(Rev. A, 22 Feb. 1991\) Information analogous to )S
58 425 M (these notes\' but aimed at  Sun\'s  customers;  describes variances among compilers and hardware,  offers advice,  explains crude )S
58 436 M (retrospective diagnostics.)S
58 458 M (\322Branch Cuts for Complex Elementary Functions,  or Much Ado About Nothing\'s Sign Bit\323  W. Kahan;  ch. 7 in   )S
end
3458 0 :M
f2_9 sf
( )S
3460 0 :M
FrameMacDict begin
0 0 0 1 0 0 0 FmK
0 FmP
470.532 458 M (The State of )S
58 469 M (the Art in Numerical Analysis)S
end
3461 0 :M
f0_9 sf
( )S
3463 0 :M
FrameMacDict begin
0 0 0 1 0 0 0 FmK
0 FmP
164.978 469 M (   ed. by  M. Powell and A. Iserles \(1987\) Oxford.  Explains how proper respect for  -0  eases )S
58 480 M (implementation of conformal maps of slitted domains arising in studies of flows around obstacles.)S
58 502 M (\322The Effects of Underflow on Numerical Computation\323  J.W. Demmel,  pp. 887-919  in  SIAM )S
end
3463 0 :M
f2_9 sf
( )S
3465 0 :M
FrameMacDict begin
0 0 0 1 0 0 0 FmK
0 FmP
404.634 502 M (Jl. Scientific & Statistical )S
58 513 M (Computing)S
end
3465 0 :M
f0_9 sf
( )S
3467 0 :M
FrameMacDict begin
0 0 0 1 0 0 0 FmK
0 FmP
98.001 513 M ( vol. 5 #4 \(Dec. 1984\).  Explains gradual underflow\325s advantages.)S
58 535 M (\322Faster Numerical Algorithms via Exception Handling\323  J.W. Demmel and X. Li,  pp. 983-992 in  IEEE )S
end
3467 0 :M
f2_9 sf
( )S
3469 0 :M
FrameMacDict begin
0 0 0 1 0 0 0 FmK
0 FmP
435.631 535 M (Trans. on Computers)S
end
3470 0 :M
f0_9 sf
( )S
3472 0 :M
FrameMacDict begin
0 0 0 1 0 0 0 FmK
0 FmP
511.88 535 M ( )S
58 546 M (vol. 43 #8 \(Aug. 1994\).  Some computations can go rather faster if  OVERFLOW  is flagged than if it will be trapped.)S
58 568 M (\322Database Relations with Null Values\323  C. Zaniolo,  pp. 142-166 in  )S
end
3472 0 :M
f2_9 sf
( )S
3474 0 :M
FrameMacDict begin
0 0 0 1 0 0 0 FmK
0 FmP
305.935 568 M (Jl. Computer and System Sciences)S
end
3474 0 :M
f0_9 sf
( )S
3476 0 :M
FrameMacDict begin
0 0 0 1 0 0 0 FmK
0 FmP
429.142 568 M ( vol. 28 \(1984\).  Tells )S
58 579 M (how best to treat a  NaN  \( he calls it  \322ni\323  for  \322 )S
(no information )S
(\323\)  when it turns up in a database.)S
end
3476 0 :M
f2_9 sf
( )S
3478 0 :M
FrameMacDict begin
0 0 0 1 0 0 0 FmK
0 FmP
58 601 M (Floating-Point Computation)S
end
3479 0 :M
f0_9 sf
( )S
3481 0 :M
FrameMacDict begin
0 0 0 1 0 0 0 FmK
0 FmP
160.744 601 M (   P.H. Sterbenz \(1974\) Prentice-Hall,  N.J.  Ch. 2  includes a brief description of my early  \(1960s\)  )S
58 612 M (work with  Gradual Underflow,  Over/Underflow Counting,  and  Retrospective Diagnostics  on the  IBM 7094.)S
58 634 M (\"Handling Floating-point Exceptions in Numeric Programs\"  J.R. Hauser \(1995\)   submitted to  )S
end
3481 0 :M
f2_9 sf
( )S
3483 0 :M
FrameMacDict begin
0 0 0 1 0 0 0 FmK
0 FmP
403.012 634 M (ACM  Trans. on Prog. Lang. and )S
58 645 M (Syst.)S
end
3483 0 :M
f0_9 sf
( )S
3485 0 :M
FrameMacDict begin
0 0 0 1 0 0 0 FmK
0 FmP
74.745 645 M (  Surveys many language-related issues and contains a substantial bibliography.)S
[/CropBox[-14 773 FmDC 598 -19 FmDC]/PAGE FmPD
end
endp
%%Trailer
end		% md
%%EOF
