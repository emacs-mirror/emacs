package cm.win;
use cm.geometry;


private class BgFun {
    /**
     * Background function.
     */
    public function(Object object) fn;

    /**
     * Background functions argument.
     */
    public Object arg;

    /**
     * Return a new BgFun.
     */
    public constructor(function(Object object) fn, Object arg) {
	this.fn = fn;
	this.arg = arg;
    }


    /**
     * Apply backgound function.
     */
    extend public void apply() {
	fn(arg);
    }
}


/**
 * Installed background functions/methods.
 */
private BgFun[] background();


/**
 * Index of current function to dispatch.
 */
private int dispatchIndex = 0;


/**
 * Dispatch the next background function, normally called be AppWindow.
 */
public void backgroundDispatch() {
    if (background.count > 0) {
	if (dispatchIndex > background.lastIndex()) dispatchIndex = 0;

	BgFun b = background[dispatchIndex];
	if (b) b.apply();

	dispatchIndex++;
    }
}


/***************************************************************************
 * Usage.
 ***************************************************************************/

/**
 * Install a background function. 
 * The function will be called with 'arg' as arg.
 */
public void installBackgroundFunction(function(Object object) fn, Object arg) {
    //pln("  installBackgroundFunction from arg ", arg.class.name);
    //pln("  installBackgroundFunction ", fn, " with arg ", arg);

    background << BgFun(fn, arg);
}


/**
 * Remove a background function. Return true if 'fn' was found.
 */
public bool removeBackgroundFunction(function(Object object) fn) {
    for(a in background, index=i)
      if (a.fn == fn) {
	  background.remove(i);
	  return true;
      }

    return false;
}


/**
 * Remove a background function. Return true if 'arg' was found.
 */
public bool removeBackgroundFunction(Object arg) {
    for(a in background, index=i)
      if (a.arg == arg) {
	  background.remove(i);
	  return true;
      }

    return false;
}

