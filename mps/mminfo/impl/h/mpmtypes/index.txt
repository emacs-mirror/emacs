                       MEMORY POOL MANAGER TYPES
                            impl.h.mpmtypes
                               draft doc
                           gavinm 1996-07-24

     1 /* impl.h.mpmtypes: MEMORY POOL MANAGER TYPES
     2  *
     3  * $HopeName: MMsrc!mpmtypes.h(trunk.4) $
     4  * Copyright (C) 1996 Harlequin Group, all rights reserved.
     5  *
     6  * .rationale: Types and type constants are almost all defined
     7  * in this header, in advance of any declarations of prototypes
     8  * or structures.  This avoids difficulties in defining recursive
     9  * data structures, and also provides a nice browsable list of
    10  * types.
    11  */
    12 
    13 #ifndef mpmtypes_h
    14 #define mpmtypes_h
    15 
    16 #include "std.h"
    17 #include "lib.h"
    18 
    19 
    20 /* TYPES */
    21 
    22 /* Word, Byte, Index, Addr, etc. -- machine types
    23  *
    24  * Word is an unsigned integral type which matches the size of the
    25  * machine word, i.e. the natural size of the machine registers and
    26  * addresses.  It should be used where an unsigned integer is
    27  * required that might range as large as the machine word.
    28  *
    29  * Byte is an unsigned integral type corresponding to the unit in
    30  * which most sizes are measured, and also the units of sizeof().
    31  *
    32  * Index is an unsigned integral type which is large enough to hold
    33  * any array index.  It should be used where the maximum size of the
    34  * array cannot be statically determined.  However, where it can,
    35  * smaller integers should be used.
    36  *
    37  * Addr is the type used for "managed addresses", that is, addresses
    38  * of objects managed by the MPS.  Limited arithmetic is allowed on
    39  * addresses using AddrAdd and AddrOffset.
    40  *
    41  * Size is an unsigned integral type large enough to hold the size
    42  * of any object which the MPS might manage.
    43  *
    44  * Align is an unsigned integral type which is used to hold alignments.
    45  * All alignments are positive powers of two.  Align is large enough to
    46  * hold the maximum possible alignment.
    47  *
    48  * Shift is an unsigned integral type which can hold the amount by
    49  * which a Word can be shifted.  It is therefore large enough to hold
    50  * the binary log of the word width (in bits).
    51  *
    52  * Ref is a reference to a managed object (as opposed to any old
    53  * managed address).  Ref should be used where a reference is intended.
    54  */
    55 
    56 typedef MPS_T_WORD Word;                /* machine word */
    57 typedef unsigned char Byte;             /* units of size */
    58 typedef struct AddrStruct *Addr;        /* managed address */
    59 typedef Word Size;                      /* size of managed object */
    60 typedef Word Index;                     /* index for any array */
    61 typedef Word Align;                     /* alignment (power of two) */
    62 typedef unsigned Shift;                 /* shift for any word */
    63 typedef Addr Ref;                       /* reference to managed object */
    64 
    65 typedef Word RefSet;                    /* see impl.c.ref */
    66 typedef unsigned Rank;                  /* see impl.c.ref */
    67 typedef Size Epoch;                     /* see impl.c.ld */
    68 typedef unsigned TraceId;               /* impl.c.mpm.check.ti */
    69 typedef unsigned TraceSet;              /* impl.c.mpm.check.ts */
    70 typedef unsigned AccessSet;
    71 typedef unsigned Attr;                  /* impl.h.mpmst.class */
    72 typedef int RootVar;                    /* impl.h.mpmst.root */
    73 typedef unsigned Serial;
    74 typedef struct RingStruct *Ring;        /* impl.c.ring */
    75 typedef struct BufferStruct *Buffer;    /* impl.c.buffer */
    76 typedef struct APStruct *AP;            /* impl.c.buffer */
    77 typedef struct FormatStruct *Format;    /* impl.c.format */
    78 typedef struct LDStruct *LD;            /* impl.c.ld */
    79 typedef struct LockStruct *Lock;        /* impl.c.lock* */
    80 typedef struct PoolStruct *Pool;        /* impl.c.pool */
    81 typedef struct SpaceStruct *Space;      /* impl.c.space */
    82 typedef struct PoolClassStruct *PoolClass; /* impl.c.poolclas */
    83 typedef struct TraceStruct *Trace;      /* impl.c.trace */
    84 typedef struct ScanStateStruct *ScanState; /* impl.c.trace */
    85 typedef struct SegStruct *Seg;          /* impl.c.arena* */
    86 typedef struct ArenaStruct *Arena;      /* impl.c.arena* */
    87 typedef struct VMStruct *VM;            /* impl.c.vm* */
    88 typedef struct RootStruct *Root;        /* impl.c.root */
    89 typedef struct ThreadStruct *Thread;    /* impl.c.th* */
    90 
    91 
    92 /* Pool*Method -- Pool Class Interface types
    93  *
    94  * These methods are provided by pool classes as part of the PoolClass
    95  * object (see impl.h.mpmst.class).  They form the interface which
    96  * allows the MPM to treat pools in a uniform manner.
    97  *
    98  * See design.mps.class-interface.
    99  */
   100 
   101 typedef Res  (*PoolInitMethod)         (Pool pool, va_list arg);
   102 typedef void (*PoolFinishMethod)       (Pool pool);
   103 typedef Res  (*PoolAllocMethod)        (Addr *pReturn, Pool pool, Size 
size);
   104 typedef void (*PoolFreeMethod)         (Pool pool, Addr old, Size size);
   105 typedef Res  (*PoolBufferInitMethod)   (Pool pool, Buffer buf);
   106 typedef void (*PoolBufferFinishMethod) (Pool pool, Buffer buf);
   107 typedef Res  (*PoolBufferFillMethod)   (Addr *baseReturn, Pool pool,
   108                                         Buffer buffer, Size size);
   109 typedef Bool (*PoolBufferTripMethod)   (Pool pool, Buffer buffer,
   110                                         Addr base, Size size);
   111 typedef void (*PoolBufferExposeMethod) (Pool pool, Buffer buffer);
   112 typedef void (*PoolBufferCoverMethod)  (Pool pool, Buffer buffer);
   113 typedef Res  (*PoolDescribeMethod)     (Pool pool, Lib_FILE *stream);
   114 typedef Res  (*PoolCondemnMethod)      (RefSet *condemnedReturn, Pool 
pool,
   115                                         Space space, TraceId ti);
   116 typedef void (*PoolGreyMethod)         (Pool pool, Space space, TraceId 
ti);
   117 typedef Res  (*PoolScanMethod)         (ScanState ss, Pool pool, 
   118                                         Bool *finishedReturn);
   119 typedef Res  (*PoolFixMethod)          (Pool pool, ScanState ss, Seg seg,
   120                                         Ref *refIO);
   121 typedef void (*PoolReclaimMethod)      (Pool pool, Space space, TraceId 
ti);
   122 typedef void (*PoolAccessMethod)       (Pool pool, Seg seg, AccessSet 
mode);
   123 
   124 
   125 /* Format*Method -- Object Format Interface types
   126  *
   127  * These methods are provided by clients in order to describe to
   128  * a pool class how to manage objects in client-specific formats.  They
   129  * are part of the Format object (see impl.h.mpmst.format).
   130  *
   131  * See design.mps.format-interface.
   132  */
   133 
   134 typedef Res  (*FormatScanMethod)   (ScanState ss, Addr base, Addr limit);
   135 typedef Addr (*FormatSkipMethod)   (Addr object);
   136 typedef void (*FormatMoveMethod)   (Addr object, Addr to);
   137 typedef Addr (*FormatIsMovedMethod)(Addr object);
   138 typedef void (*FormatCopyMethod)   (Addr object, Addr to);
   139 typedef void (*FormatPadMethod)    (Addr base, Size size);
   140 
   141 
   142 /* Root*Method -- Root Interface types
   143  *
   144  * These methods are provided by the client so that the MPS can locate
   145  * the root set.
   146  *
   147  * See design.mps.root-interface.
   148  */
   149 
   150 typedef Res (*RootScanMethod)   (ScanState ss, void *p, size_t s);
   151 typedef Res (*RootScanRegMethod)(ScanState ss, Thread thread, void *p);
   152 
   153 
   154 /* CONSTANTS */
   155 
   156 #define AccessSetEMPTY  ((AccessSet)0)
   157 #define AccessREAD      ((AccessSet)(1<<0))
   158 #define AccessWRITE     ((AccessSet)(1<<1))
   159 #define RingNONE        ((Ring)0)       /* impl.c.ring */
   160 #define TraceIdNONE     ((TraceId)-1)
   161 #define TraceSetEMPTY   ((TraceSet)0)
   162 #define AttrFMT         ((Attr)0x0001)  /* is formatted */
   163 #define AttrSCAN        ((Attr)0x0002)  /* is scannable */
   164 #define AttrPM_NO_READ  ((Attr)0x0004)  /* may not be read-protected */
   165 #define AttrPM_NO_WRITE ((Attr)0x0008)  /* may not be write-protected */
   166 #define AttrALLOC       ((Attr)0x0010)  /* has alloc */
   167 #define AttrFREE        ((Attr)0x0020)  /* has free */
   168 #define AttrBUF         ((Attr)0x0100)  /* supports allocation points */
   169 #define AttrBUF_RESERVE ((Attr)0x0200)  /* has reserve/commit */
   170 #define AttrBUF_ALLOC   ((Attr)0x0400)  /* has buf_alloc */
   171 #define AttrGC          ((Attr)0x1000)  /* garbage collecting */
   172 #define AttrINCR_RB     ((Attr)0x2000)  /* read-barrier incremental */
   173 #define AttrINCR_WB     ((Attr)0x4000)  /* write-barrier incremental */
   174 
   175 enum {                          /* rank constants */
   176   RankAMBIG,                    /* ambiguous reference */
   177   RankEXACT,                    /* exact strong reference */
   178   RankWEAK,                     /* exact weak reference */
   179   RankFINAL,                    /* exact strong notifying reference */
   180   RankMAX                       /* the number of ranks, not a rank */
   181 };
   182 
   183 enum {                          /* root variants, see impl.h.mpmst.root 
*/
   184   RootFUN,                      /* function closure */
   185   RootTABLE,                    /* table */
   186   RootREG,                      /* register */
   187   RootFMT                       /* formatted */
   188 };
   189 
   190 #endif /* mpmtypes_h */

