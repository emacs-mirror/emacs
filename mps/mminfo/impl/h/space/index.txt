                                 SPACE
                              impl.h.space
                               draft impl
                             dsm 1995-10-12

/*  ==== SPACE ====
 *
 *  $HopeName: MMsrc/!space.h(trunk.1)$
 *
 *  Copyright (C) 1995 Harlequin Group, all rights reserved
 *
 *  This is the interface to the Space type.
 *
 *  A space object manages a set of memory pools (see pool.h).  A client
 *  program will usually only create a single space object.  No communication
 *  takes place between different spaces.
 *
 *  Automatic memory managers determine the liveness of objects within a
 *  space.  An object is live if it is reachable from a root which is
 *  attached to the space.
 *
 *  A space contains an arena, from which segments are allocated in order to
 *  supply pools with memory.  It also contains special pools used for
 *  bootstrapping and to supply the other pool implementations with memory
 *  for their descriptors and tables.
 *
 *  Notes
 *   1. When we have incremental collection, the space will also manage
 *      the grand plan.  richard 1995-03-07
 *   2. The root scanning methods will need incremental counterparts.
 *      richard 1995-03-07
 */

#ifndef space_h
#define space_h

typedef struct SpaceStruct *Space;

#include "std.h"
#include "lib.h"
#include "spacest.h"
#include "arena.h"
#include "root.h"
#include "fix.h"


/*  == Initialize/Finish a Space ==
 *
 *  SpaceInit prepares a space structure for use.  SpaceFinish frees all
 *  resources associated with a space, rendering the space structure
 *  invalid.  All pools in the space must have been destroyed before
 *  calling SpaceFinish.
 */

extern Error SpaceInit(Space space);
extern void SpaceFinish(Space space);

extern Bool SpaceIsValid(Space space, ValidationType validParam);
extern Error SpaceDescribe(Space space, LibStream stream);

extern Arena (SpaceArena)(Space space);
extern Pool (SpaceSegPool)(Space space);
extern Pool (SpaceControlPool)(Space space);
extern Deque (SpacePoolDeque)(Space space);
extern Deque (SpaceRootDeque)(Space space);

extern void SpaceRootAttach(Space space, Root root);
extern void SpaceRootDetach(Space space, Root root);
extern void SpaceRootScanExact(Space space, Fixes fixes);
extern void SpaceRootScanAmbig(Space space, Fixes fixes);

/*  == LockClaim/Release Space Lock ==
 *
 *  see design.mps.thread.safety
 */
extern void SpaceLockClaim(Space space);
extern void SpaceLockRelease(Space space);

#endif /* space_h */

