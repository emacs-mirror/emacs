                            RECURSIVE LOCKS
                              impl.h.lock
                               draft impl
                             dsm 1995-10-12

/*  impl.h.lock
 *
 *                          RECURSIVE LOCKS
 *
 *  $HopeName$
 *
 *  Copyright (C) 1995 Harlequin Group, all rights reserved
 *
 *  These are simple locks that are exclusively held by a single thread
 *  at a time.
 *
 *  A lock must be inited before use and finished after use.
 *  At most one thread may own a lock at a time.  A lock is initialised
 *  without an owner.  A lock should not have an owner when it is
 *  finished.  Claiming the lock will wait until the lock is not owned
 *  by another thread and then cause the current thread to become the 
 *  owner.  Releasing the the lock will relinquish ownership if the
 *  number of releases matches the number of claims.
 *
 * A lock must be Inited before use and should be Finished after use,
 *  using LockInit and LockFinish
 *
 *  LockClaimRecursive & LockReleaseRecursive are for claiming and
 *  releasing the lock.  These may be used recursively.
 *
 *  LockClaim and LockRelease are non-recursive versions.  These
 *  may be used to initially gain ownership or relinquish
 *  ownership.  They must be used symetrically, i.e. if LockClaim
 *  is used instead of LockClaimRecursive to gain ownership of a lock
 *  then LockRelease must be used to release it for the final time.
 *
 *  impl.h.lockst defines the lock structure which is needed by the
 *  lock user for its allocation.
 */
 
#ifndef lock_h
#define lock_h

typedef struct LockStruct *Lock;

#include "std.h"

/*  == LockInit/Finish == 
 *
 *  lock points to the allocated lock structure.  A lock has no
 *  owner after initialisation.
 */

extern void LockInit(Lock lock);
extern void LockFinish(Lock lock);


/*  == LockClaimRecursive ==
 *
 *  This is called to increase the number of claims on the lock.
 *  LockClaim will wait until the lock is not owned by another
 *  thread and return with the lock owned.
 *  This can be called recursively.
 */

extern void LockClaimRecursive(Lock lock);


/*  == LockReleaseRecursive ==
 *
 *  This is called to reduce the number of claims on the lock.
 *  If the number of claims drops to zero, ownership is relinquished.
 *  This must not be called without possession of the lock.
 */

extern void LockReleaseRecursive(Lock lock);


/*  == LockClaim ==
 *
 *  This may only be used when the lock is not already owned.
 *  When used it behaves like LockClaimRecursive, but must be
 *  matched by a call to LockRelease.
 */

extern void LockClaim(Lock lock);


/*  == LockRelease ==
 *
 *  This must be used to release a Lock symmetrically with
 * LockClaim.  It will therefore should only be called with
 *  a single claim.
 */

extern void LockRelease(Lock lock);


/* == Validation == */

extern Bool LockIsValid(Lock lock, ValidationType validParam);

#endif /* lock_h */

