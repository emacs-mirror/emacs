                    MEMORY POOL MANAGER DEFINITIONS
                               impl.h.mpm
                               draft impl
                           gavinm 1996-09-11

     1 /* impl.h.mpm: MEMORY POOL MANAGER DEFINITIONS
     2  *
     3  * $HopeName: MMsrc!mpm.h(trunk.28) $
     4  * Copyright (C) 1997 The Harlequin Group Limited.  All rights reserved.
     5  */
     6 
     7 #ifndef mpm_h
     8 #define mpm_h
     9 
    10 #include "config.h"     /* this must come first: it defines target 
options */
    11 #include "misc.h"       /* miscellaneous non-specific bits and bobs */
    12 #include "check.h"      /* assertion and consistency checking support */
    13 
    14 #include "mpmtypes.h"
    15 #include "mpmst.h"
    16 #include "event.h"
    17 #include "lock.h"
    18 #include "th.h"
    19 #include "poolmv.h"
    20 #include "poolmfs.h"
    21 #include "ss.h"
    22 #include "mpslib.h"
    23 
    24 
    25 /* AVER, AVERT -- MPM assertions
    26  *
    27  * AVER and AVERT are used to assert conditions within the MPM (as
    28  * opposed to in the MPS Interface layer, impl.c.mpsi).  This allows
    29  * control over internal and interface checking.
    30  */
    31 
    32 #ifdef ASSERT_MPM               /* design.mps.config, impl.h.config */
    33 #define AVER                    ASSERT
    34 #define AVERT(type, val)        ASSERT(type ## Check(val))
    35 #else
    36 #define AVER(cond)              NOCHECK(cond)
    37 #define AVERT(type, val)        NOCHECK(type ## Check(val))
    38 #endif
    39 
    40 
    41 /* MPMCheck -- check MPM assumptions */
    42 
    43 extern Bool MPMCheck(void);
    44 
    45 
    46 /* Miscellaneous Checks -- see impl.c.mpm */
    47 
    48 extern Bool BoolCheck(Bool b);
    49 extern Bool FunCheck(Fun f);
    50 extern Bool AttrCheck(Attr attr);
    51 extern Bool RootVarCheck(RootVar rootVar);
    52 #define FUNCHECK(f)     (FunCheck((Fun)f))
    53 
    54 
    55 /* Address/Size Interface -- see impl.c.mpm */
    56 
    57 extern Bool (WordIsAligned)(Word word, Align align);
    58 #define WordIsAligned(w, a)     (((w) & ((a) - 1)) == 0)
    59 
    60 extern Word (WordAlignUp)(Word word, Align align);
    61 #define WordAlignUp(w, a)       (((w) + (a) - 1) & ~((Word)(a) - 1))
    62 
    63 extern Bool AlignCheck(Align align);
    64 
    65 extern Pointer (PointerAdd)(Pointer p, Size s);
    66 #define PointerAdd(p, s)        ((Pointer)((char *)(p) + (s)))
    67 
    68 extern Pointer (PointerSub)(Pointer p, Size s);
    69 #define PointerSub(p, s)        ((Pointer)((char *)(p) - (s)))
    70 
    71 extern Size (PointerOffset)(Pointer base, Pointer limit);
    72 #define PointerOffset(base, limit) \
    73                                 ((Size)((char *)(limit) - (char 
*)(base)))
    74 
    75 extern Addr (AddrAdd)(Addr addr, Size size);
    76 #define AddrAdd(p, s)           ((Addr)PointerAdd((Pointer)p, s))
    77 
    78 extern Addr (AddrSub)(Addr addr, Size size);
    79 #define AddrSub(p, s)           ((Addr)PointerSub((Pointer)p, s))
    80 
    81 extern Size (AddrOffset)(Addr base, Addr limit);
    82 #define AddrOffset(b, l)        (PointerOffset((Pointer)b, (Pointer)l))
    83 
    84 
    85 /* Logs and Powers
    86  * 
    87  * SizeIsP2 returns TRUE if and only if size is a non-negative integer
    88  * power of 2, and FALSE otherwise.
    89  * 
    90  * SizeLog2 returns the logarithm in base 2 of size.  size must be a
    91  * power of 2.
    92  * 
    93  * SizeFloorLog2 returns the floor of the logarithm in base 2 of size.
    94  * size can be any positive non-zero value.
    95  */
    96 extern Bool SizeIsP2(Size size);
    97 extern Shift SizeLog2(Size size);
    98 extern Shift SizeFloorLog2(Size size);
    99 
   100 #define AddrWord(a)             ((Word)(a))
   101 #define SizeWord(s)             ((Word)(s))
   102 #define AddrIsAligned(p, a)     WordIsAligned(AddrWord(p), a)
   103 #define AddrAlignUp(p, a)       ((Addr)WordAlignUp(AddrWord(p), a))
   104 #define SizeIsAligned(s, a)     WordIsAligned(SizeWord(s), a)
   105 #define SizeAlignUp(s, a)       ((Size)WordAlignUp(SizeWord(s), a))
   106 
   107 
   108 /* Formatted Output -- see design.mps.writef, impl.c.mpm */
   109 
   110 extern Res WriteF(mps_lib_FILE *stream, ...);
   111 
   112 
   113 /* Ring Interface -- see design.mps.ring, impl.c.ring */
   114 
   115 extern Bool RingCheck(Ring ring);
   116 extern Bool RingCheckSingle(Ring ring);
   117 extern Bool RingIsSingle(Ring ring);
   118 
   119 /* .ring.init: */
   120 extern void (RingInit)(Ring ring);
   121 #define RingInit(ring) \
   122   BEGIN \
   123     Ring _ring = (ring); \
   124     AVER(NULL != _ring); \
   125     _ring->next = _ring; \
   126     _ring->prev = _ring; \
   127     AVER(RingCheck(_ring)); \
   128   END
   129 
   130 /* .ring.finish: */
   131 extern void (RingFinish)(Ring ring);
   132 #define RingFinish(ring) \
   133   BEGIN \
   134     Ring _ring = (ring); \
   135     AVER(RingCheckSingle(_ring)); \
   136     _ring->next = RingNONE; \
   137     _ring->prev = RingNONE; \
   138   END
   139 
   140 /* .ring.append: */
   141 extern void (RingAppend)(Ring ring, Ring new);
   142 #define RingAppend(ring, new) \
   143   BEGIN \
   144     Ring _ring = (ring), _new = (new); \
   145     AVER(RingCheck(_ring)); \
   146     AVER(RingCheckSingle(_new)); \
   147     _new->prev = _ring->prev; \
   148     _new->next = _ring; \
   149     _ring->prev->next = _new; \
   150     _ring->prev = _new; \
   151   END
   152 
   153 /* .ring.insert: */
   154 extern void (RingInsert)(Ring ring, Ring new);
   155 #define RingInsert(ring, new) \
   156   BEGIN \
   157     Ring _ring = (ring), _new = (new); \
   158     AVER(RingCheck(_ring)); \
   159     AVER(RingCheckSingle(_new)); \
   160     _new->prev = _ring; \
   161     _new->next = _ring->next; \
   162     _ring->next->prev = _new; \
   163     _ring->next = _new; \
   164   END
   165 
   166 /* .ring.remove: */
   167 extern void (RingRemove)(Ring old);
   168 #define RingRemove(old) \
   169   BEGIN \
   170     Ring _old = (old); \
   171     AVER(RingCheck(_old)); \
   172     AVER(!RingIsSingle(_old)); \
   173     _old->next->prev = _old->prev; \
   174     _old->prev->next = _old->next; \
   175     _old->next = _old; \
   176     _old->prev = _old; \
   177   END
   178 
   179 /* .ring.next: */
   180 extern Ring (RingNext)(Ring ring);
   181 #define RingNext(ring)  ((ring)->next)
   182 
   183 /* .ring.elt: */
   184 #define RING_ELT(type, field, node) \
   185    ((type)((char *)(node) - (size_t)(&((type)0)->field)))
   186 
   187 /* .ring.for */
   188 #define RING_FOR(var, ring) \
   189   for(var = RingNext(ring); \
   190       var != (ring); \
   191       var = RingNext(var))
   192 
   193 
   194 /* Bit Table Interface -- see design.mps.bt.if.* for the interface doc */
   195 
   196 /* design.mps.bt.if.size */
   197 Size BTSize(unsigned long);
   198 
   199 /* design.mps.bt.if.get */
   200 int (BTGet)(BT, Index);
   201 #define BTGet(a, i) ((a)[((i)>>MPS_WORD_SHIFT)] >> \
   202                      ((i)&~((Word)-1<<MPS_WORD_SHIFT)) & (Word)1)
   203 
   204 /* design.mps.bt.if.set */
   205 void (BTSet)(BT, Index);
   206 #define BTSet(a, i) \
   207   BEGIN \
   208     (a)[((i)>>MPS_WORD_SHIFT)] |= \
   209     (Word)1<<((i)&~((Word)-1<<MPS_WORD_SHIFT)); \
   210   END
   211 
   212 /* design.mps.bt.if.res */
   213 void (BTRes)(BT, Index);
   214 #define BTRes(a, i) \
   215   BEGIN \
   216     (a)[((i)>>MPS_WORD_SHIFT)] &= \
   217     ~((Word)1<<((i)&~((Word)-1<<MPS_WORD_SHIFT))); \
   218   END
   219 
   220 void BTSetRange(BT, Index, Index);
   221 void BTResRange(BT, Index, Index);
   222 Bool BTFindResRange(Index *, Index *,
   223                     BT, unsigned long, unsigned long);
   224 
   225 
   226 /* Pool Interface -- see impl.c.pool */
   227 
   228 extern Res PoolInit(Pool pool, Space space,
   229                     PoolClass class, ...);
   230 extern Res PoolInitV(Pool pool, Space space, 
   231                      PoolClass class, va_list args);
   232 extern void PoolFinish(Pool pool);
   233 extern Bool PoolClassCheck(PoolClass class);
   234 extern Bool PoolCheck(Pool pool);
   235 extern Res PoolDescribe(Pool pool, mps_lib_FILE *stream);
   236 
   237 extern Space (PoolSpace)(Pool pool);
   238 #define PoolSpace(pool)         ((pool)->space)
   239 
   240 extern Align (PoolAlignment)(Pool pool);
   241 #define PoolAlignment(pool)     ((pool)->alignment)
   242 
   243 extern Ring (PoolSegRing)(Pool pool);
   244 #define PoolSegRing(pool)       (&(pool)->segRing)
   245 
   246 extern Res PoolSegAlloc(Seg *segReturn, SegPref pref, Pool pool, Size 
size);
   247 extern void PoolSegFree(Pool pool, Seg seg);
   248 extern Bool PoolOfAddr(Pool *poolReturn, Space space, Addr addr);
   249 extern Bool PoolHasAddr(Pool pool, Addr addr);
   250 
   251 extern Res PoolCreate(Pool *poolReturn, Space space, 
   252                       PoolClass class, ...);
   253 extern Res PoolCreateV(Pool *poolReturn, Space space,
   254                        PoolClass class, va_list arg);
   255 extern void PoolDestroy(Pool pool);
   256 extern Res PoolAlloc(Addr *pReturn, Pool pool, Size size);
   257 extern void PoolFree(Pool pool, Addr old, Size size);
   258 extern Res PoolCondemn(Pool pool, Trace trace, Seg seg);
   259 extern void PoolGrey(Pool pool, Trace trace, Seg seg);
   260 extern Res PoolScan(ScanState ss, Pool pool, Seg seg);
   261 extern Res (PoolFix)(Pool pool, ScanState ss, Seg seg, Addr *refIO);
   262 #define PoolFix(pool, ss, seg, refIO) \
   263   ((*(pool)->class->fix)(pool, ss, seg, refIO))
   264 extern void PoolReclaim(Pool pool, Trace trace, Seg seg);
   265 
   266 extern void PoolTrivFinish(Pool pool);
   267 extern Res PoolNoAlloc(Addr *pReturn, Pool pool, Size size);
   268 extern Res PoolTrivAlloc(Addr *pReturn, Pool pool, Size size);
   269 extern void PoolNoFree(Pool pool, Addr old, Size size);
   270 extern void PoolTrivFree(Pool pool, Addr old, Size size);
   271 extern Res PoolNoBufferInit(Pool pool, Buffer buf);
   272 extern Res PoolTrivBufferInit(Pool pool, Buffer buf);
   273 extern void PoolNoBufferFinish(Pool pool, Buffer buf);
   274 extern void PoolTrivBufferFinish(Pool pool, Buffer buf);
   275 extern Res PoolNoBufferFill(Seg *segReturn, Addr *baseReturn, Addr 
*limitReturn,
   276                             Pool pool, Buffer buffer, Size size);
   277 extern Res PoolTrivBufferFill(Seg *segReturn, Addr *baseReturn, Addr 
*limitReturn,
   278                               Pool pool, Buffer buffer, Size size);
   279 extern void PoolNoBufferEmpty(Pool pool, Buffer buffer);
   280 extern void PoolTrivBufferEmpty(Pool pool, Buffer buffer);
   281 extern Res PoolNoDescribe(Pool pool, mps_lib_FILE *stream);
   282 extern Res PoolTrivDescribe(Pool pool, mps_lib_FILE *stream);
   283 extern Res PoolNoCondemn(Pool pool, Trace trace, Seg seg);
   284 extern void PoolNoGrey(Pool pool, Trace trace, Seg seg);
   285 extern void PoolTrivGrey(Pool pool, Trace trace, Seg seg);
   286 extern Res PoolNoScan(ScanState ss, Pool pool, Seg seg);
   287 extern Res PoolNoFix(Pool pool, ScanState ss, Seg seg, Ref *refIO);
   288 extern void PoolNoReclaim(Pool pool, Trace trace, Seg seg);
   289 
   290 
   291 /* Trace Interface -- see impl.c.trace */
   292 
   293 #define TraceSetSingle(ti) BS_SINGLE(TraceSet, ti)
   294 #define TraceSetIsMember(ts, ti)BS_IS_MEMBER(ts, ti)
   295 #define TraceSetAdd(ts, ti)     BS_ADD(TraceSet, ts, ti)
   296 #define TraceSetDel(ts, ti)     BS_DEL(TraceSet, ts, ti)
   297 #define TraceSetUnion(ts1, ts2) BS_UNION(ts1, ts2)
   298 #define TraceSetInter(ts1, ts2) BS_INTER(ts1, ts2)
   299 #define TraceSetDiff(ts1, ts2) BS_DIFF(ts1, ts2)
   300 #define TraceSetSuper(ts1, ts2) BS_SUPER(ts1, ts2)
   301 
   302 extern TraceSet (TraceSetAdd)(TraceSet ts, TraceId id);
   303 extern TraceSet (TraceSetDel)(TraceSet ts, TraceId id);
   304 extern TraceSet (TraceSetUnion)(TraceSet ts1, TraceSet ts2);
   305 extern Bool (TraceSetIsMember)(TraceSet ts, TraceId id);
   306 
   307 extern Bool ScanStateCheck(ScanState ss);
   308 extern Bool TraceIdCheck(TraceId id);
   309 extern Bool TraceSetCheck(TraceSet ts);
   310 extern Bool TraceCheck(Trace trace);
   311 
   312 extern Res TraceCreate(Trace *traceReturn, Space space);
   313 extern void TraceDestroy(Trace trace);
   314 extern Res TraceStart(Trace trace, Pool pool);
   315 extern Res TracePoll(Trace trace);
   316 extern void TraceAccess(Space space, Seg seg, AccessSet mode);
   317 
   318 extern Res TraceFix(ScanState ss, Ref *refIO);
   319 extern void TraceSegGreyen(Space space, Seg seg, TraceSet ts);
   320 
   321 /* Equivalent to impl.h.mps MPS_SCAN_BEGIN */
   322 
   323 #define TRACE_SCAN_BEGIN(ss) \
   324   BEGIN \
   325     Shift SCANzoneShift = (ss)->zoneShift; \
   326     RefSet SCANwhite = (ss)->white; \
   327     RefSet SCANsummary = (ss)->summary; \
   328     Word SCANt; \
   329     {
   330 
   331 /* Equivalent to impl.h.mps MPS_FIX1 */
   332 
   333 #define TRACE_FIX1(ss, ref) \
   334   (SCANt = (Word)1<<((Word)(ref)>>SCANzoneShift&(MPS_WORD_WIDTH-1)), \
   335    SCANsummary |= SCANt, \
   336    SCANwhite & SCANt)
   337 
   338 /* Equivalent to impl.h.mps MPS_FIX2 */
   339 
   340 #define TRACE_FIX2(ss, refIO) \
   341   ((*(ss)->fix)((ss), (refIO)))
   342 
   343 /* Equivalent to impl.h.mps MPS_FIX */
   344 
   345 #define TRACE_FIX(ss, refIO) \
   346   (TRACE_FIX1((ss), *(refIO)) ? \
   347    TRACE_FIX2((ss), (refIO)) : ResOK)
   348 
   349 /* Equivalent to impl.h.mps MPS_SCAN_END */
   350 
   351 #define TRACE_SCAN_END(ss) \
   352    } \
   353    (ss)->summary = SCANsummary; \
   354   END
   355 
   356 extern Res TraceScanArea(ScanState ss, Addr *base, Addr *limit);
   357 extern Res TraceScanAreaTagged(ScanState ss, Addr *base, Addr *limit);
   358 
   359 
   360 /* Action Interface -- see design.mps.action */
   361 
   362 extern Bool ActionCheck(Action action);
   363 extern void ActionInit(Action action, Pool pool);
   364 extern void ActionFinish(Action action);
   365 extern void ActionPoll(Space space);
   366 
   367 
   368 /* Space Interface -- see impl.c.space */
   369 
   370 extern Res SpaceCreate(Space *spaceReturn, Addr base, Size size);
   371 extern void SpaceDestroy(Space space);
   372 extern Bool SpaceCheck(Space space);
   373 extern Res SpaceDescribe(Space space, mps_lib_FILE *stream);
   374 extern Bool SpaceAccess(Addr addr, AccessSet mode);
   375 extern void SpaceEnter(Space space);
   376 extern void SpaceLeave(Space space);
   377 extern void SpacePoll(Space space);
   378 extern Res SpaceAlloc(void **baseReturn, Space space, Size size);
   379 extern void SpaceFree(Space space, Addr base, Size size);
   380 
   381 #define SpacePoolRing(space)    (&(space)->poolRing)
   382 #define SpaceRootRing(space)    (&(space)->rootRing)
   383 #define SpaceTraceRing(space)   (&(space)->traceRing)
   384 #define SpaceThreadRing(space)  (&(space)->threadRing)
   385 #define SpaceEpoch(space)       ((space)->epoch) /* .epoch.ts */
   386 #define SpaceTrace(space, ti) (&(space)->trace[ti])
   387 #define SpaceZoneShift(space) ((space)->zoneShift)
   388 
   389 /* Arena Interface -- see impl.c.arena* */
   390 
   391 extern Res ArenaCreate(Space *spaceReturn, Size size, Addr base);
   392 extern void ArenaDestroy(Space space);
   393 extern Bool ArenaCheck(Arena arena);
   394 extern Align ArenaAlign(Space space);
   395 extern Size ArenaReserved(Space space);
   396 extern Size ArenaCommitted(Space space);
   397 
   398 extern Res ArenaExtend(Space, Addr /* base */, Size /* size */);
   399 extern Res ArenaRetract(Space, Addr /* base */, Size /* size */);
   400 
   401 extern Bool SegPrefCheck(SegPref pref);
   402 extern SegPref SegPrefDefault (void);
   403 extern Res SegPrefExpress (SegPref, SegPrefKind, void *);
   404 
   405 extern Res SegAlloc(Seg *segReturn, SegPref pref,
   406                     Space space, Size size, Pool pool);
   407 extern void SegFree(Space space, Seg seg);
   408 extern Addr SegBase(Space space, Seg seg);
   409 extern Addr SegLimit(Space space, Seg seg);
   410 extern Size SegSize(Space space, Seg seg);
   411 extern Bool SegOfAddr(Seg *segReturn, Space space, Addr addr);
   412 extern Seg SegFirst(Space space);
   413 extern Seg SegNext(Space space, Seg seg);
   414 extern Bool SegCheck(Seg seg);
   415 extern void SegInit(Seg seg, Pool pool);
   416 extern void SegFinish(Seg seg);
   417 
   418 
   419 /* Buffer Interface -- see impl.c.buffer */
   420 
   421 extern Res BufferCreate(Buffer *bufferReturn, Pool pool, Rank rank);
   422 extern void BufferDestroy(Buffer buffer);
   423 extern Bool BufferCheck(Buffer buffer);
   424 extern Res BufferDescribe(Buffer buffer, mps_lib_FILE *stream);
   425 extern Res BufferReserve(Addr *pReturn, Buffer buffer, Size size);
   426 extern Res BufferFill(Addr *pReturn, Buffer buffer, Size size);
   427 extern Bool BufferCommit(Buffer buffer, Addr p, Size size);
   428 extern Bool BufferTrip(Buffer buffer, Addr p, Size size);
   429 extern Res BufferInit(Buffer buffer, Pool pool, Rank rank);
   430 extern void BufferFinish(Buffer buffer);
   431 extern Bool BufferIsReset(Buffer buffer);
   432 extern Bool BufferIsReady(Buffer buffer);
   433 extern void BufferFlip(Buffer buffer);
   434 extern Addr BufferScanLimit(Buffer buffer);
   435 extern AP (BufferAP)(Buffer buffer);
   436 #define BufferAP(buffer)        (&(buffer)->apStruct)
   437 extern Buffer BufferOfAP(AP ap);
   438 #define BufferOfAP(ap)  PARENT(BufferStruct, apStruct, ap)
   439 extern Space BufferSpace(Buffer buffer);
   440 #define BufferSpace(buffer) ((buffer)->space)
   441 extern Pool (BufferPool)(Buffer buffer);
   442 #define BufferPool(buffer)      ((buffer)->pool)
   443 extern Seg (BufferSeg)(Buffer buffer);
   444 #define BufferSeg(buffer)       ((buffer)->seg)
   445 extern Rank (BufferRankSet)(Buffer buffer);
   446 #define BufferRankSet(buffer)   ((buffer)->rankSet)
   447 extern Addr (BufferBase)(Buffer buffer);
   448 #define BufferBase(buffer)      ((buffer)->base)
   449 extern Addr (BufferGetInit)(Buffer buffer);
   450 #define BufferGetInit(buffer)   (BufferAP(buffer)->init)
   451 extern Addr (BufferAlloc)(Buffer buffer);
   452 #define BufferAlloc(buffer)     (BufferAP(buffer)->alloc)
   453 extern Addr (BufferLimit)(Buffer buffer);
   454 #define BufferLimit(buffer)     ((buffer)->poolLimit)
   455 
   456 
   457 /* Format Interface -- see impl.c.format */
   458 
   459 extern Bool FormatCheck(Format format);
   460 extern Res FormatCreate(Format *formatReturn, Space space,
   461                         Align alignment,
   462                         FormatScanMethod scan,
   463                         FormatSkipMethod skip,
   464                         FormatMoveMethod move,
   465                         FormatIsMovedMethod isMoved,
   466                         FormatCopyMethod copy,
   467                         FormatPadMethod pad);
   468 extern void FormatDestroy(Format format);
   469 extern Space FormatSpace(Format format);
   470 extern Res FormatDescribe(Format format, mps_lib_FILE *stream);
   471 
   472 
   473 /* Reference Interface -- see impl.c.ref */
   474 
   475 extern Bool RankCheck(Rank rank);
   476 extern Bool RankSetCheck(RankSet rankSet);
   477 
   478 #define RankSetIsMember(rs, r) BS_IS_MEMBER(rs, r)
   479 #define RankSetSingle(r) BS_SINGLE(RankSet, r)
   480 #define RankSetIsSingle(r) BS_IS_SINGLE(r)
   481 
   482 #define RefSetZone(space, addr) \
   483   (((Word)(addr) >> space->zoneShift) & (MPS_WORD_WIDTH - 1))
   484 #define RefSetUnion(rs1, rs2)   BS_UNION(rs1, rs2)
   485 #define RefSetInter(rs1, rs2)   BS_INTER(rs1, rs2)
   486 #define RefSetAdd(space, rs, addr) \
   487   BS_ADD(RefSet, rs, RefSetZone(space, addr))
   488 #define RefSetIsMember(space, rs, addr) \
   489   BS_IS_MEMBER(rs, RefSetZone(space, addr))
   490 #define RefSetSuper(rs1, rs2)   BS_SUPER(rs1, rs2)
   491 
   492 extern RefSet RefSetOfSeg(Space space, Seg seg);
   493 
   494 
   495 /* Shield Interface -- see impl.c.shield */
   496 
   497 extern void ShieldRaise(Space space, Seg seg, AccessSet mode);
   498 extern void ShieldLower(Space space, Seg seg, AccessSet mode);
   499 extern void ShieldEnter(Space space);
   500 extern void ShieldLeave(Space space);
   501 extern void ShieldExpose(Space space, Seg seg);
   502 extern void ShieldCover(Space space, Seg seg);
   503 extern void ShieldSuspend(Space space);
   504 extern void ShieldResume(Space space);
   505 extern void ShieldFlush(Space space);
   506 
   507 
   508 /* Protection Interface -- see impl.c.prot* */
   509 
   510 extern void ProtSetup(void);
   511 
   512 extern void ProtSet(Addr base, Addr limit, AccessSet mode);
   513 extern void ProtTramp(void **resultReturn, void *(*f)(void *, size_t),
   514                       void *p, size_t s);
   515 extern void ProtSync(Space space);
   516 
   517 
   518 /* Location Dependency -- see impl.c.ld */
   519 
   520 extern void LDReset(LD ld, Space space);
   521 extern void LDAdd(LD ld, Space space, Addr addr);
   522 extern Bool LDIsStale(LD ld, Space space, Addr addr);
   523 extern void LDAge(Space space, RefSet moved);
   524 extern void LDMerge(LD ld, Space space, LD from);
   525 
   526 
   527 /* Root Interface -- see impl.c.root */
   528 
   529 extern Res RootCreateTable(Root *rootReturn, Space space,
   530                              Rank rank, Addr *base, Addr *limit);
   531 extern Res RootCreateReg(Root *rootReturn, Space space,
   532                            Rank rank, Thread thread,
   533                            RootScanRegMethod scan,
   534                            void *p, size_t s);
   535 extern Res RootCreateFmt(Root *rootReturn, Space space,
   536                            Rank rank, FormatScanMethod scan,
   537                            Addr base, Addr limit);
   538 extern Res RootCreateFun(Root *rootReturn, Space space,
   539                         Rank rank, RootScanMethod scan,
   540                         void *p, size_t s);
   541 extern void RootDestroy(Root root);
   542 extern Bool RootCheck(Root root);
   543 extern Res RootDescribe(Root root, mps_lib_FILE *stream);
   544 extern Bool RootIsAtomic(Root root);
   545 extern Rank RootRank(Root root);
   546 extern void RootGrey(Root root, Trace trace);
   547 extern Res RootScan(ScanState ss, Root root);
   548 extern Space RootSpace(Root root);
   549 
   550 
   551 /* VM Interface -- see impl.c.vm* */
   552 
   553 extern Align VMAlign(void);
   554 extern Bool VMCheck(VM vm);
   555 extern Res VMCreate(Space *spaceReturn, Size size, Addr base);
   556 extern void VMDestroy(Space space);
   557 extern Addr VMBase(Space space);
   558 extern Addr VMLimit(Space space);
   559 extern Res VMMap(Space space, Addr base, Addr limit);
   560 extern void VMUnmap(Space space, Addr base, Addr limit);
   561 extern Size VMReserved(Space space);
   562 extern Size VMMapped(Space space);
   563 
   564 #endif /* mpm_h */

