         HARLEQUIN MEMORY POOL SYSTEM LIBRARY INTERFACE (ANSI)
                            impl.c.mpsliban
                             accepted impl
                           gavinm 1996-09-11

     1 /* impl.c.mpsliban: HARLEQUIN MEMORY POOL SYSTEM LIBRARY INTERFACE (ANSI)
     2  *
     3  * $HopeName: MMsrc!mpsliban.c(trunk.2) $
     4  * Copyright (C) 1996 Harlequin Group, all rights reserved.
     5  *
     6  * PURPOSE
     7  *
     8  * .purpose: The purpose of this code is
     9  *   1. to connect the MPS Library Interface to the ANSI C libraries,
    10  *      where they exist, and
    11  *   2. to provide an example of how to implement the MPS Library
    12  *      Interface.
    13  *
    14  * .readership: MPS client application developers, MPS developers.
    15  * .sources: design.mps.lib
    16  *
    17  * TRANSGRESSIONS (rule.impl.trans)
    18  *
    19  * .sunos.warn: The MPM core header, ossu.h, is included so that this
    20  * file will compile without warnings under SunOS 4.1.  In order to
    21  * test whether to include it mpstd.h is included.  This hack must be
    22  * removed before the code is shipped.
    23  */
    24 
    25 #include "mpslib.h"
    26 #include <stdlib.h>
    27 #include <stdio.h>
    28 #include <stdarg.h>
    29 #include <string.h>
    30 
    31 #include "mpstd.h"  /* .sunos.warn */
    32 #ifdef MPS_OS_SU
    33 #include "ossu.h"
    34 #endif
    35 
    36 
    37 int mps_lib_get_EOF(void)
    38 {
    39   return EOF;
    40 }
    41 
    42 mps_lib_FILE *mps_lib_get_stderr(void)
    43 {
    44   return (mps_lib_FILE *)stderr;
    45 }
    46 
    47 mps_lib_FILE *mps_lib_get_stdout(void)
    48 {
    49   return (mps_lib_FILE *)stdout;
    50 }
    51 
    52 int mps_lib_fputc(int c, mps_lib_FILE *stream)
    53 {
    54   return fputc(c, (FILE *)stream);
    55 }
    56 
    57 int mps_lib_fputs(const char *s, mps_lib_FILE *stream)
    58 {
    59   return fputs(s, (FILE *)stream);
    60 }
    61 
    62 void mps_lib_abort(void)
    63 {
    64   abort();
    65 }
    66 
    67 void *mps_lib_memset(void *s, int c, size_t n)
    68 {
    69   return memset(s, c, n);
    70 }

