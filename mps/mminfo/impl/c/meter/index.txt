                    STANDARD METERING IMPLEMENTATION
                              impl.c.meter
                             accepted impl
                             drj 1995-08-04

/*  ==== METERING ====
 *
 *  $Id$
 *
 *  Copyright (C) 1995 Harlequin Group, all rights reserved
 *
 *  This is the implementation of the metering module.
 *
 *  Provided here are a simple observer, the Enable and Disable
 *  methods, and validation methods.
 *
 *  Notes
 *  1. We have a dependency on stdio.h (see issue.general.impl.clib)
 *   1995-07-31 drj
 *  2. Should the default output filename be controllable?
 *   1995-08-01 drj
 *  3. This module has static data in violation of
 *  rule.impl.c.no-static
 *  1995-08-15 drj
 */

#include "std.h"
#include "meter.h"

#include <stdio.h>

#define METER_DEFAULT_FILENAME "hqnmm.mtr"

static Bool streamInited = FALSE;
static FILE *stream = NULL;

#ifdef DEBUG_ASSERT
Bool MeterIsValid(Meter meter)
{
  int i;

  AVER(meter->name != NULL);
  AVER(meter->enabled == TRUE || meter->enabled == FALSE);
  AVER(meter->format != NULL);
  AVER(meter->observers <= METER_OBS_MAX);
  for(i=0; i<meter->observers; ++i) {
    AVER(MeterObserverIsValid(&meter->observer[i]));
  }
  return(TRUE);
}
#endif /* DEBUG_ASSERT */

#ifdef DEBUG_ASSERT
Bool MeterObserverIsValid(MeterObserver observer)
{
  AVER(observer->name != NULL);
  AVER(observer->enabled == TRUE || observer->enabled == FALSE);
  /* period */
  /* tick */
  AVER(observer->f != NULL);
  /* p */
  /* i */
  return(TRUE);
}
#endif /* DEBUG_ASSERT */

void MeterEnable(Meter meter)
{
  AVER(MeterIsValid(meter));

  meter->enabled = TRUE;
}

void MeterDisable(Meter meter)
{
  AVER(MeterIsValid(meter));

  meter->enabled = FALSE;
}

Error MeterStream(FILE **streamReturn)
{
  FILE *s;

  if(streamInited == FALSE) {
    s = fopen(METER_DEFAULT_FILENAME, "a");
    if(s == NULL)
      return(ErrIO);
    stream = s;
    streamInited = TRUE;
  }
  *streamReturn = stream;
  return(ErrSUCCESS);
}

void MeterObserverPrint(Meter meter, int index,
                        const char *file, unsigned line, ...)
{
  FILE *s;
  MeterObserver obs = &meter->observer[index];
  va_list arg;
  /* AVER(MeterIsValid(meter)) circularity problems */

  ++(obs->tick);
  if(obs->tick >= obs->period)
  {
    if(MeterStream(&s) == ErrSUCCESS) {
      fprintf(s, "%s %s %u %s ", meter->name, file, line, obs->name);
      va_start(arg, line);
      vfprintf(s, meter->format, arg);
      va_end(arg);
      putc('\n', s);
    }
    obs->tick = 0;
  }
}


