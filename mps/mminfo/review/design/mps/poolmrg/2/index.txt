                    REVIEW OF DESIGN.MPS.POOLMRG(2)
                      review.design.mps.poolmrg.2
                              draft review
                           gavinm 1997-02-11

Rules: rule.universal
Checklists: check.universal
Candidate status: accepted

Author: drj
Leader: gavinm
Editor: drj
Scribe: gavinm
Approved: 1997-02-28

Entry: entry.universal
Entry manpower: .2


Entry notes:

entry.universal.source-available: Source paper not appropriate for use in review.
entry.universal.training: Failed as usual


Loggingstart: 15:21
Loggingend: 15:55
Logginglength: 34
Loggingrate: 2

Checkers: NickB;Richard;DRJ;GavinM;PTW
Rate: 2 elements
Length: 80 elements
Actual checking time: 188

Kickoff start: 1997-02-12 14:11 UTC, Byre, Longstanton
Kickoff end: 14:15
Kickoff length: 4


ISSUES:

NickB: 9m 35mins
Richard: 12M 10m 26I 4C 40mins
DRJ: 8M 1I ?m 30mins
PTW: 3M 5m 2I 1q 45mins
GavinM: 11m 1C 2q 38 mins

Richard:
1. .over.scan M Incomplete; why do this?
2. .over.message M Incomplete; what's the purpose of messaging?
3. .req M Should come first alogn with goal before design
4. .guardian.two-part M Justification: Why in separate segments; why two fields?
5. - M Justification
6. .grey M Clarity: protected should be shield raised
7. .access M An issue/request should be raised
8. .alloc.one-size M Will be documented how and where?
9. .alloc.grow M Should be documented elsewhere; it's a cross-module 
dependency.  The use of seg->p is a buried cross-module dependency.
10. .scan.find-grey M How is old determined?
11. - M Document seems unstructured

DRJ:
12. INTRODUCTION M Insufficient
13. - M Breaks rule.design.prot
14. TERMINOLOGY M Doesn't define finalization
15. .alloc.grow M Breaks rule.design.error (and in general)
16. .free.overwrite M Doesn't say what it overwrites with
17. Test M This section is badly organised
18. last-para M Needs note that this part isn't implemented and why

PTW:
19. - M It's not clear that this is meant as an internal MM pool, undefined 
client interface
20. .req.dylan.fun.finalization M finalize is not defined

NickB:
21. .over.queues,.over.scan m Clarity: sentences much too long and windy
22. .guardian.assoc m Consistency: "Group"
23. " m Clarity: What is a Group?
24. .guardian.ref.free m Missing word (relative pronoun)
25. " m Should clarify the state of a free guardian here (.scan.free)
26. .poolstruct.extend m Not "a segment" as once
27. .free.improve.seg m e/free/live/
28. .test,2para m Bad grammar
29. last-para m Untagged

Richard:
30. .def.final.ref m Clarity: don't understand second sentence at all
31. .over.queues m Clarity: Each instance of the pool will maintain two pools
32. " m Unnecessary dependency.  entry was a C keyword and exit is a C function
33. .counter-req m Actually this is an anti-requirement
34. .req.general I This should be a general MPS requirement; doesn't belong here
35. .over.* C This is really a description of the process going on in the pool
36. .guardian.two-part C Quote structure declaration?
37. .poolstruct.rings C Justification good
38. .poolstruct.extend m Completeness: How is this calculated?
39. .group m Cross-ref to .guardian.two-part
40. .check m Incomplete: What are the restrictions?
41. .grey m Unclear: What is the current trace?
[Stopped logging]
42. .free.improve.count m Clarity: is this done or not?
[26 I by mail]
Gist: We haven't carefully defined what design is for and this document doesn't 
achieve it.

DRJ:
43. rule.design I Introduction should contain enough to determine if you should 
read the document and what you'll get out of it
44. .def.final.ref m Should reference design for ranks
45. .def.final.object m The tag is wrong e/types/type/
46. .over.scan m "Possibly..." is boguse; design should say what happens
47. .grey m Need extra tag here
48. .free.improve.return m Breaks rule.universal.clear
49. .test m First two paragraphs need tagging
50. .test.promise.fl.alloc-etc m Parenthetical sentence doesn't parse

PTW:
51. - q This document doesn't seem to reflect some of the mail discussion about 
the design (M?)
52. - I A design document should separate issues and risks, improvements not 
intended to be implemented, alternatives and why not chosen
53. .over.queues,.over.scans m Should say "any reference of lower rank", not 
explicit reference types
54. .scan.free m Do we really mean "0"?
55. - I Could the metering help with the test?

GavinM:
56. INTRODUCTION q Is there a Dylan requirement/request that could be 
referenced?
57. .over.scan m "it" is unclear
58. .guardian.two-part C Unhappy about the memory usage here
59. .access.inadequate m WHat's the consequence of this inadequacy?
60. .alloc.grow m overwritten with what?
61. .alloc.pop m initialized with what?
62. - IN Design should specify initial values, etc.
63. .scan.trivial q Is this behaviour required?
64. .test m MPM interface and MPS interface should have references
65. TESTS m Ref for weakness

66. .free.improve.return mN Last sent: These headers are really out-of-band 
aren't they?



Brainstorm start: 16:14
Brainstorm end: 16:53
Brainstorm length: 39


BRAINSTORM:

Richard: Need to step back.  First design as part of development.  Good that we 
produced it.  One purpose was to allow the implementation to be written quickly 
and correctly.  There's more to it than that.

PTW: Review process is too low-level.

Richard: Failed to check that design meets requirements.

NickB: Should check proof, not generate one.

Richard: rule.design about presentation not content.  Second part of review was 
bad use of time.  This document wasn't really discussed in mail before review.  
Review should be a waste of time.

PTW: Was that a design review we just did?

Richard: Take more effort to ensure code correct before review.  What does 
correct mean?  What is the purpose of design?  Design is about ensuring that 
the implementation is of high quality.  rule.design.req isn't true.

GavinM: Design stands between requirements and impelementation.

PTW: Design is an abstraction of implementation to assist the human brain.  

Richard: Other purpose of design is to control the cost of change.  Most 
defects come from later changes; I believe this is because of ignorance of the 
design.

PTW: This is why documentation of alternatives is so important.

DRJ: Richard was talking of the separation of analysis and design.

PTW: Or in a properly structured document.

Richard: Difficult to acheive lots of aims in one document.  Design can refer 
to analysis.  It's important to know what you discarded, but it's more 
important to know the justification for what you chose.  The only reasons for 
changing are because it didn't meet requirements or requirements changed.  You 
should be able to work this out from the design.  Omission is very important.  
E.g. David didn't think about shielding initially.  The design doesn't mention 
why it has two segments -- this is a very important part of the design that's 
been lost.  

PTW: Often the justification for what you did is the large list of what didn't 
work.

Richard: Need abstraction of why it failed and why you did something else.  
Wouldn't need to say much to explain the two segments.
  - Control cost of change
  - Ensuring implementation is of high quality
  - Productivity (easier to do implementation)
  - General communication
  - Intellectual property

PTW: Design is abstract and is easier to reason about.

Richard: Should be a checklist question.

NickB: Clarifications in wrong place.  Formal design with states and predicates 
make it easy to reason.  E.g. shield design could aid reasoning about 
one-segment design.

Richard: We'll be able to do this in time.  Maybe there's a template.  

NickB: Could document structures.

Richard: states, state transitions, dependencies, data, resources, interfaces 
-- all sorts of headings to be filled in.

DRJ: Need to know what design is supposed to do.  Wasn't clear to me when 
writing it.

Richard: Suppose you had to give your design to someone else.  I need to 
specify it in sufficient detail that the implementor does the right thing.  
Good definition for design.  

When we get a requirement, we think of perverse ways of satisfying it without 
being sufficient.  This helps us find additional requirements.  We could do the 
same for designs with peverse implementations.

NickB: This design does cover the gap between requirements and implementation 
for MPS developers.

Other recent designs have been generated from thought, informal design 
meetings, and email rounds.  This seems expensive.

GavinM: Could review in more levels.  Make sure it's right before going on.

Richard: Could have architectural overview.  Has to interact with tracer and 
interface and other documents yet to be written.  This was written in a vacuum.

DRJ: Could reference other design documents.

Richard: Helpful to create placeholder documents, adding notes, and creating 
reference.  Better than not writing things down.

About 4DRC, it had four hours for design and eight for implementation.  

DRJ: It was more like the other way round.  Design 5 hours, coding 8 hours.

NickB: Problem came out of trying it, testing.  Design has consequences for 
4DRC.  When do you review it?  Same time?

Richard: Wouldn't it be great if we could find the defect earlier?

Imagine we do a process improvement, to consider shielding for segments, 
separate client and MPS data.

In theory, that will prevent that happening again.

DRJ: One rule per defect is unwieldy.

Richard: There might be generalizations that might work for design.

NickB: 4DRC: Why I wrote this up, I realised that you won't always have a 
design ready.  Maybe this is of that magnitude.

GavinM: What about an eight day release cycle?

DRJ: Alternate design and implementation.

NickB: Fallback was new idea (wasn't one).  Need to be certain we have 
fallbacks.

Richard: First try, so will get better.  Maybe our estimate is realistic, but 
we're not good at it.  Interleaving might be a good idea.  Ruminating and email 
debate does take elapsed time.

GavinM: Implementation doesn't need to be the week after.

Richard: In most cases, it won't be something new.  Modifications will have a 
different profile.

By explicitly having process, we have a design.  This is a first.  Should 
encourage this approach.

GavinM: Dpeendencies between modules.

Richard: Rules to point out potential depenencies.

GavinM: Need to say in design what things are initialized with, etc.

Richard: If anyone has any exemplary design documents, can I have a look?



Number of major issues: 20
Number of minor issues: 33
Number of issues: 66
Major defects remaining: 5

Edit manpower: 4.75


Edit notes:

7 request.170160
9 Reject. seg->p is part of the interface.
11 Issue: we need some guide for producing design.  Raised in mail.
32 forget.  Are we supposed to guess what keywords future ANSI committees will 
come up with?
34 issue: raised in mail.
51 mail: mail.drj.1997-02-18.09-49 [tag not checked], created 
analysis.mps.poolmrg
52 edit: created analysis.mps.poolmrg to record design meta information
55 mail: mail.drj.1997-02-18.09-56 [tag not checked].
56 mail: mail.drj.1997-02-18.09-59 [tag not checked].  Yes.
58 comment: design.mps.poolmrg.guardian.two-space.justify
63 mail: mail.drj.1997-02-18.10-07 [tag not checked].  No, but explained.

everything else, dispatched.



Exit: exit.universal
Exit manpower: 0.5


Exit notes:

exit.universal.edit: The edit log is not complete as defined, but David assures 
me that:
  - All rejected or escalated issues are in the log;
  - All other issues were fixed;
  - All questions are answered, and tagged in the log.
We both agree that this isn't ideal and should be avoided in future.
  -- GavinM


Manpowerused: 15
Manpowersaved: 170


Estimated major defects remaining:
  20 major issues logged
  - 1 major defect rejected
  = 19 actual major defects
  / 6 pages
  = 3 undetected major defects
  + 2 escalated major defects
  = 5

