                REVIEW OF DESIGN.MPS.BT(1) ON 1997-05-14
                         review.design.mps.bt.1
                           incomplete review
                           gavinm 1997-05-12

Rules: rule.impl, rule.universal
Candidate status: draft

Author: drj
Leader: gavinm
Editor: drj
Scribe: gavinm

Entry: entry.universal
Entry manpower: .1


Entry notes:

Failed .source-available, and .training


Loggingstart: 14:58 BST
Loggingend: 15:32
Logginglength: 34
Loggingrate: 1.4

Rate: 1/6 page
Length: 3.5

Kickoff start: 1997-05-12 14:02 BST
Kickoff end: 14:10
Kickoff length: 8


ISSUES:

Richard: 3M 8m  ? minutes
DRJ: 7m  10 minutes
NickB: 5M 2m 3q  15  minutes
PTW: 6M 6m 3q  20 minutes
Sheep: 3q  10 minutes

1. Richard - C Quite good
2. NickB - M Detailed design doesn't document or justify the fact that there 
are macro versions of soem functions
3. Richard .intro m Considered as?  Surely it is!
4. PTW .intro m "integer between 0 and n" is loose; reset ranges as bits is 
imprecise -- ops reset single range
5. NickB  .intro Nm Would be clearer if n were always bound to number of bits 
in mapping
6. GavinM .intro q Why Bool here and bits elsewhere?  Tested as condition 
suggests Bool.
7. DRJ .intro,last sent m Punctuation unclear
8. PTW REQUIREMENTS M Reqs should not be made up
9. NickB REQUIREMENTS M This should include functional requirements such as 
being able to set/reset bits, etc and some interface reqs.
10. NickB " m Suggest: bit table ops cannot fail because of resource exhaustion
11. Richard " M Requirements incomplete: Alternative implementations exist that 
meet these reqs and are useless
12. NickB .background M mumble-mumble?
13. Richard " m Also used by ArenaVM
14. " " m Suggest refer to version in which this is used
15. GavinM " I Can we tag pool classes more consistently?
16. PTW .def.bt,.def.range M Use of range expressions is not consistent 
throughout the document; would be nice if they were all half-open intervals
17. " " m Variables i,j would be better base and limit
18. " " q Shoudlwe have a consistent policy on ranges throughout MPM?
19. Richard .over m Datastructure should be described; diagram would be nice
20. PTW " m Seems inconsistent that speed is not important but we have 
.req.speed
21. Richard .if.representation.concrete m What does it point at?
22. " .if.typedef m The module is unclear; where is the declaration?
23. " .if.get,etc m No need to comment out arguments in design document
24. " .if.find-res-range M Cryptic description; describe clearly that range 
return is larger and why
25. DRJ .if.size m range sould be half-open
26. " .if.find-res-range m Use of "it" in 3rd sentence is slightly ambiguous
27. " " m 4 set, e/an/a/
28. NickB .if.storage M Doesn't define alignment, protocol[?], etc
29. Sheep .if.storage M is there an implicit assumption that client memory is 
zeroed?
30. NickB .if.get q Why doesn't this return Bool?
31. " .if.* m Why isn't there a BTInit?  Doesn't say anything about state when 
made?
32. " .if.find-res-range m Insufficiently specific about what range this might 
return: first, biggest
33. PTW .if.res q Would this be better called "clear"?
34. " .if.find-res-range M Constraint on n<=(i-j) is wrong
35. NickB DETAILED DESIGN M This design is not very robust because it does not 
permit range checking; no reason why
36. Richard " C Consider using a structure with a sig, length, and an array of 
bits; coudl do all checks and usual methods -- shoudl be thought about
37. DRJ .index.sub-word.justify m missing "is"
38. NickB .indes.word.justify,.index.sub-word.justify q By "good" do you mean 
fast?
39. " " q Do you have any evidence for these assertions?
40. " .iundex.sub-word q Why not: (1<<MPS_WORD_SHIFT)-1
41. GavinM .indes.word.justify,.index.sub-word.justify m Mod: Jusifty without 
special knowledge about compiler
42. Richard .index.su-word m The latter expression is used in code many times; 
shoudl we lift it out?
43. DRJ .fun.find-res.continue m We continue by updating i to be = j; not 
mentioned
44. NickB .fun.find-res.two-loop,.fun.find-res.continue m Hypend are redundant
45. NickB - I When printing; histories come out in ghastly font -- larger
46. Richard - m Could we outline how performance might be imroved if it ever 
becomes necessary



Brainstorm start: 16:20
Brainstorm end: 16:23


BRAINSTORM:

8,9,11: Requirements
PTW: Same old thing
DRJ: Not clear what reqs were or how they should be phrased.  Not including 
func reqs was oversight.
Richard: Suggest we have a design template with a checklist/questionaire.  What 
wre the functions?  What are their attributes?  etc.




Number of issues: 46


Edit notes:

S 1999-04-26T13:51 F 1999-04-26T14:30
S 1999-04-26T14:59

2.

1. Noted

3. reject.  A mapping is a mathematical concept.
4. fixed: clarified.
5. fixed:
6. reject: irrelevant now.
7. fixed:
8. Fix: Now they're not.
9. Fix: now does
10. 


Exit: exit.universal
