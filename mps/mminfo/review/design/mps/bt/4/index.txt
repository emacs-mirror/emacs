                       REVIEW OF DESIGN.MPS.BT(4)
                         review.design.mps.bt.4
                           incomplete review
                             drj 1999-04-29

Rules: rule.universal
Checklists: none
Source: none

Author: drj
Leader: drj
Editor: drj
Scribe: drj

Entry: entry.design
Entry manpower: .1


Entry notes:

Hasn't actually been RFCed but everyone is familiar enough with the broad direction I think.  Review can proceed.


Loggingstart: 1602
Loggingend: about 1635
Logginglength: 33
Loggingrate: 2.3

Checkers: tony; pekka; rit; drj
Rate: 11 lines
Length: 517
Actual checking time: 211

Kickoff start: 1999-04-30T14:46
Kickoff end: 14:49
Kickoff length: 3

Kickoff notes: Pekka was unable to get satisfactory access to IRC


ISSUES:

tony, 65 minutes, 100%, M4 m6 C1 q2
pekka, 50 minutes, 80%, M3 m9 C4 q2
rit, 50 minutes, 100%, M4 m10 C2 q2
drj, 46 minutes, 100%, M0 m21 C0 q1

Notes:

Major defects taken by hand, all the rest were submitted by email not as part 
of the logging meeting.


Tony

1. 76 M There's no mention of any requirement to find ranges in subranges of 
the  entire table. Shouldn't there be?
2. 36,38 M Definition in terms of assignment doesn't match usages in terms of  
state (e.g. on lines 70, 72)
3. 55 M Why are these the requirements? No source documents given. (Some are  
mentioned in the body later, though)
4. 148 M It's a design for an ADT - but there's no justification of why it 
doesn't  follow the conventions of guide.impl.c.adt (e.g. a Sig field, 
checking  function).
5. 12 m sentence spanning this line is clumsy
6. 61 m "values" -> "value" ?
7. 70, 76 & others m use of "contiguous" is a tautology
8. 74 m use of "contiguous" is confusing
9. 85,89 m "find a range" -> "find ranges" ??
10. 326 m No justification for why BTs don't have a length field (for bounds  
checking). Or a Sig field.
11. 387 m "befine" -> "define"
12. 397 m "1998" -> "1999" (surely!)
13. 114 C I wouldn't expect the average length of AWL-hosted Dylan objects to 
be  typical of all Dylan objects. I'd expect them to be much bigger.
14. 112 q Is AWL the only source of this requirement? What about AMS, or the  
ability to support mark-seep in general?
15. 246 q Why is the type of 'length' unsigned long, and not (say) Size

Pekka

16. .req.speed.fast M Should cite mark-sweep pools in general, and AMS in 
particular.
17. .if.declare M A separate header file would be better since it's as 
independent of anything else as anything.
18. .if.size M The argument type ought to be Index (or size_t if we're 
pedantic), and the check ought to check for that, not ULONG.
19. .fun.test.range.set M Should mention why that particular bits_action was 
chosen (see [that change quoted previously]).  Likewise some other functions 
mentioned in that change doc.
20. - M Should explain how this was tested.
21. .def.range & al. C "ie" for "i.e.,"
22. .req.ops.find m "length" should be quoted or renamed to a non-word (say, 
"L")
23. .req.ops.find C Stating the spec once should suffice.
24. .req.ops.find.long.* C grammar: "a range"..."of those"
25. .req.speed.fast m Misleading to cite average size of Dylan objects, when 
AWL object are likely to be much larger.
26. 117 C This would go well in the History section.
27. .if.size m Embedding bit tables in other structures and allocating them in 
pool-managed space can be quite useful.  BTSize should not be deprecated.
28. .index m Explain how ib maps onto the bits in a word.
29. 379 m single_action doesn't iterate, it just performs the action once on a 
single bit.
30. 385 C "part-words", yech!
31. 394 m Needs a tag or several.
32. .fun.find q Why unsigned long for lengths?  Why can't Index be used here?
33. 471 m missing reference (duh)
34. 489 m and ACTION_FIND_SET_BIT_HIGH

RIT

35. M 55--115 No source for most of these requirements
36. M 239 "Meets .req.ops.test.range.same". Only for the case where we wanted 
to compare the _same_ range of bits in the two tables. Maybe the requirement is 
wrong?
37. M 436--448 Do these functions keep testing the rest of the range after 
finding a bit that's wrong? Description of ACT_ON_RANGE seems to imply they 
must.
38. M 471 "searching for a reset bit" and 483 "look for one [a reset bit]". 
(These are really the same step, aren't they?) AFAIK, this isn't part of 
Boyer-Moore search. It could be horrendously inefficient if table has long 
ranges that are all set. So justify it, and add removing it as a suggested 
improvement.
39. M 487 Don't understand. How do the searches exit ACT_ON_RANGE when a test 
fail?
40. M nowhere change.mps.epcore.brisling.160181 refers to 
design.mps.bt.fun.find-res-range.improve.test, which doesn't exist. Presumably 
it was deleted?
41. q Are any BT operations thread-safe? Is that a meaningful question?
42. m 13 "the" -> "be"
43. m 40 add reference to mail.gavinm.1998-07-21.12-57 and subsequent, where 
names are discussed
44. C 76--91 Interesting asymmetry: we don't have functions to search for 'set' 
ranges.
45. m 92 For the avoidance of doubt: they're copied to _the same range_ in the 
other bit table.
46. m 108 "... lots of runs of set bits". Either delete "runs of" or explain 
what is meant.
47. q 162 "empty ranges are not allowed" -- why?
48. C 204 The rot set in when "Reset" was abbreviated to "Res" 8-).
49. m 242 "the same prototype". Add "(but with different names, obviously)"
50. C 273 "will not waste time looking". Hmm. One can imagine circumstances in 
which it wouldn't cost any extra time to find longer ranges (e.g. if you've 
already tested a whole word).
51. m 285 "londer" -> "longer"
52. m 394--395 This can't be true in general -- it must depend on the actions 
in question.
53. m 412 "relevent" -> "relevant"
54. m 488 "hence are efficient at using whole words" -- that depends on the 
actions, surely?

DRJ

55. - NM no model of use
56. 26 m possibly reconstruct history (obviously)
57. 36 m note 1 == TRUE
58. 34 m define low/high left/right?
59. 52 m perhaps define [,) notation too?
60. 74 m unclear whether the two ranges to be tested are at same or     
different positions
61. 93 m source for this slightly bizarre requirement
62. 96 m "very fast" is vague.
63. 162 m "i and j" remove such uses and this sentence.
64. 185 q is this check made in BTCreate too?
65. 203 m tag should be .if.reset for consistency with .req.ops
66. 209 m tag should be .set.range for consistency with .req.ops
67. 216 m tag should be .reset.range for consistency with .req.ops
68. 254 m base,limit not i,j
69. 256 m length > 0
70. 332 m spurious blank line
71. 347 m MPS_WORD_WIDTH a power-of-two, justify or reference or both
72. 387 m s/befine/define/
73. 408-425 m move to line 366
74. 400 m trailing it should be removed.
75. 471 m find references (perhaps not).



Brainstorm start: 1648

Number of major issues: 16
Number of issues: 75
