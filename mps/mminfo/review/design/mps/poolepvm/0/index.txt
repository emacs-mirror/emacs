             REVIEW OF DESIGN.MPS.POOLEPVM(0) ON 1997-12-09
                      review.design.mps.poolepvm.0
                           incomplete review
                           gavinm 1997-12-09

Rules: rule.universal
Source: book.psrm2, req.epcore
Candidate status: draft

Author: nickb;pekka
Leader: gavinm
Editor: pekka
Scribe: gavinm

Entry: entry.universal
Entry manpower: .2


Entry notes:

Looks OK.  GavinM 1997-12-12


Loggingstart: 16:45
Loggingend: 17:01
Logginglength: 16
Loggingrate: 2.3

Checkers: Pekka;DRJ;PTW;GavinM
Rate: 1/6 page
Length: 5 pages
Actual checking time: 126

Kickoff start: 1997-12-09 15:59
Kickoff end: 16:01
Kickoff length: 2


ISSUES:

GavinM: 4m 3q 1C - 30 minutes
PTW: 41 minutes, M: 7, m: 2, C: 1, q: 5, I: 0
DRJ: 5M 1I 1m ~20mins (40%)
Pekka: 1 M, 2 m, 3 C - 35 min

1. PTW req.format.obj.no-header M  Does the last sentence imply there are 
multiple handles to the same object, and potentially to the interior of an 
object?
2. PTW req.prot.obj-string M  This (especially the last sentence) is unclear.  
What is meant by formatted and unformatted objects?  And, if they are roots, 
how is an unformatted object to be scanned?  Don't we have a 
counter-requirement on clients that objects must have a computable scan?
3. PTW arch.mark-sweep M  I don't believe this.  We have already solved 
dictionaries and iterators in a copying pool for Dylan.
4. PTW arch.local M  Unclear what is meant here.  Why does DPS require many VM 
pools?
5. PTW arch.obj-string M  Unclear what is meant here by "segments with empty 
rank set".  Why is this simpler than another pool?  The whole point of the MPS 
is to make it easy to have many specialized pools.
6. PTW low.benefit M  Is this true?  Shouldn't you collect if you are out of 
memory?
7. PTW design M  There has been no design review of this document, hence review 
is premature
.
8. Pekka .low.benefit M GC is not just on demand (except in the first 
prototype), there could be an automatic one governed by setvmthreshold.
  DRJ: but isn't it on demand to us, i.e., vmthreshold can be implemented by 
client, but we don't require to preserve exact vmthreshold semantics anyway.
9. DRJ .source M given comment in .low.ams, we are missing design.mps.poolams.
10. DRJ section SOLUTION IDEAS M it is not clear which solutions are options 
for which requirements and how they combine.
11. DRJ .sol.tickle.glue M it is not clear why tickles cannot allocate hence 
requiring incremental collection.
12. DRJ .low.buffer M Couldn't find .decide.simple.obj-string.
13. PTW .req.tickle q  Are req's in terms the client understands or can we 
formulate them in terms we inderstand?  I.e., can we state this in terms of 
maximum latency and cpu usage?  What percent of CPU does tickle take?
14. PTW .req.format.obj q  So, in our terms, postcript objects all have handles?
15. PTW .req.format.obj.no-header m  I would restate this that ps objects 
consist of a handle and an object.
16. PTW .req.single-thread m  This is an anti-requirement -- no 
multiple-threading, but will there be in the future?  I think highly likely.
17. PTW .req.prot q  No negotiation on this one?  What a pain.
18. PTW .sol.save.segments M [originally C]  Save levels sound like generations 
to me.  Whatever structure we use to manage generations in a generational pool 
should be reused here.
  Hmm.  I think that should be a Major -- significant effort (wasted) to fix
  GavinM: Inter-pool abstraction?  Not much call for that round here.
19. PTW .sol.fix q  Why is sol.struct.pretend not applicable to sol.fix?  That 
is, why do we not treat the handle and body of both objects and \"strings\" as 
a single entity for scanning purposes?
20. PTW .low q  What is the tag \"low\" supposed to mean?
21. Pekka .protection m clarity Refsets _are_ useless here, but the 
justification given is incomplete: We must also note that we don't expect to 
scan any pointers outside PS VM.
22. Pekka .low.buffer C clarity: What arguments?
23. Pekka .low.buffer m correctness: stale tag .decide.simple.obj-string.
24. Pekka .arch.mark-sweep C For a high-residency and high-fragmentation 
application mark-compact should have been at least considered.
25. Pekka .intro C clarity This is really the design of how to support PS VM, 
not just the MPS side of it.
26. DRJ .arch.format I (to design.mps.format) looks like a justification for 
another format variant to me.
27. DRJ section DOCUMENT HISTORY m should not be in bold
28. GavinM .intro,* m "Postscript" should be "PostScript"
  DRJ: (rubbish, it should [be] ScriptWorks' PostScript language compatible VM)
29. GavinM .req.gc.disable q What are local and global memory?
30. GavinM .req.prot.mmi m Should be broken up
31. GavinM .req.prot.mmi m mm_ps_save confuses "level" and "slevel"
32. GavinM .req.prot.mmi q Does the comment about MAXGLOBALSAVELEVEL imply that 
the global save level can exceed that value?
33. GavinM .req.prot.mmi q How should mm_ps_save act if the value of 
slevel/level is not incrementing for the local pool?
34. GavinM .req.prot.mmi M [Originally classified as minor] Regarding 
mm_ps_restore, should clarify "higher".
35. GavinM .req.prot.obj-string C Might we use different pools for these two 
things?
36. PTW .protection NM Since PS is an interpreter, it would seem an ideal 
candidate for a software barrier implementation, permitting copying and 
refsets.  Justify not using this approach.
37. PWT - Nq is the value of a savelevel exposed to the PS user?  Or is it 
opaque?



Brainstorm start: 17:03
Brainstorm end: 17:28
Brainstorm length: 25


BRAINSTORM:

PTW: I think the entire PB can be summarized:  Why no design review prior to 
review?
GavinM: PTW, what document did you want reviewed?
DRJ: he didn't.  he wanted design review
PTW: I want a _design_ review, before _review_
GavinM: D'oh.
DRJ: ie discussion through mail
PTW: This is a major flaw in our process
GAvinM: Agreed.
PTW: mail or on IRC as Pekka initiated for the multiple alloc
GavinM: OK.  We already plan to have more of that.
Pekka: I thought there'd been one before I ever joined the group.
  Even though the document itself is fairly new
GavinM: I hope to see Tony mediating some of that.
PTW: I think that they happen "by accident" so far
GavinM: I should make it an entry criterion for design documents.
PTW: I think there is a process improvement:  design documents may not enter 
review unless a design review has been passed.
Pekka: Stuff like that should really do before ay implementation work is 
scheduled, not
  after the implementation has been completed...
GavinM: Suggest: entry.design.review: Some less formal peer review (such as 
e-mail RFC, or IRC discussion) has already been applied to the document, and 
acted upon.
PTW: pekka: right
GavinM: I don't want to force waterfall design.
DRJ: in particular I was slightly appalled to hear that the document was being 
reviewed despite the fact that pekka didn't think it was perfect. [as mentioned 
in the kickoff meeting -- GavinM]
PTW: There should be an "approver" for design review.  (I've said this before, 
but RFC's sometimes fall on deaf ears if there is noone tasked to respond).
Pekka: Because we promised to deliver it in March
  last March...
DRJ: I know...
PTW: Yow!
GavinM: PTW: approver, possibly.
  I agree with the concept, but ...
PTW: I don't care what you call it, but someone has to be assigned it as a task
GavinM: Yes.
Pekka: I think the person issuing an RFC should just be persistent.
DRJ: yes, otherwise design mailed to 'mm' falls on deaf ears
GavinM: Suggest: proc.rfc lay down a procedure for appointing someone who must 
respond to the RFC.
Pekka: no
PTW: I think anyone can volunteer, but the process manager must assign if noone 
does.
GavinM: I don't think it's _process_ management.
Pekka: Why not whoever issues it?
PTW: Because it is a flaw in our process that we need to correct
Pekka: ?
GavinM: Pekka, what did you say "no" to?
Pekka: I don't think we need more procedure there, just what we discussed 
first: that there be an RFC that has been acted upon.
PTW: IMHO the whole MPM suffers because everytime we get a requirement someone 
goes off and designs a new pool from scratch rather than working with the 
resources of the group to generalize the existing pools (and hence strenghthen 
them).
GavinM: PTW, I strongly agree.
DRJ: I weakly agree
GavinM: We need more chance for comment, further upstream.
DRJ: it's easier to steal the ideas from another pool into a new pool and then 
later consolidate them
GavinM: Pekka, if everyone who issues an RFC, finds themselves a responder, 
then that's a process.
PTW: They get away with this partly because there is no design review.  It 
hasn't happenned voluntarily (up til now) so I think a process is required.
DRJ: than it is to try and adapt an existing design to two requirements 
immediately.  it's like twice as much work up front.
PTW: But significantly less work in the end.
GavinM: I think we need smaller components than pools that we can assemble.
DRJ: maybe
PTW: Look at EPDL, there is no reason it could not ber MV
Pekka: It hasn't happened voluntarily, because we haven't required effective 
RFCs.
  And because we haven't reviewed most things anyway.
DRJ: pekka and I were discussing MV / EPDL earlier today
PTW: EPDL was split off on the excuse that MV didn't work well, but now EPDL 
has a flaw that MV does not.  Now we have two pools to maintain where one 
would/should do
DRJ: we concluded that probably we should merge and resplit MV EPDL into 
BootStrap and NewMV
PTW: I agree 1000%
Pekka: "control" and NewMV
GavinM: Presumably bootstrap/control would subsume MFS.
PTW: (we're drifing, but) my opinion exactly as I tried to approach my epdl 
tasks.
GavinM: We should be able to wrap one pool in another, perhaps.
DRJ: perhaps, yes, but there a lot of brittleness in the MPS wrt trying to do 
that
PTW: So, how do we schedule time to go back and rethink a request-driven 
implementation?
Pekka: I think we usually have the ideas, while scrambling to fulfill the 
requests
PTW: We just need more substrate, like BT.  Similarly, groups of segments 
should be a shared substrate.
Pekka: (we should turn down more of them)
PTW: pekka:  I agree, we need to push back to make sure we are not so 
request-driven that our core technology is hurt
Pekka: What we need is time to implement some of the ideas (and a decision 
process to decide which ones to implement).
GavinM: If we want to do architectural improvements, we can either do them as 
"customer invisible" changes, or do them as part of satisfying customer 
requests.
DRJ: but we'll never find a specific customer request that they satisfy
Pekka: I didn't like the proposals to get rid of the mps product in Darwin, for 
this reason among others
GavinM: DRJ, I meant originally.  E.g., EPVM could have been satisfied by 
fixing MV.
DRJ: it's the satisfaction of a meta requirement, namely that "we be able to 
satisfy unknown future requirement which such-and-such a responsiveness
  EPDL
  but I don't see how your statement follow gavin
Pekka: Resurrect a closed request to do a more general solution?
GavinM: But we can't have a request in every release that says "MPS 
architecture is insufficiently responsive", can we?
  Pekka, that's an idea (that DARWIN doesn't support well, of course).
Pekka: Just copy the text and xref.
DRJ: in any case, wrt MV and EPDL we almost are in a position where we can 
throwaway MV, make EPDL the NewMV and either create a new BootStrap pool or 
massively simplify MV to get a BootStrap pool
PTW: I think we just have to make sure that we don't take requests too 
narrowly.  There is satisfying the request and maintaining our integrity.
GavinM: DRJ, I was returning to the idea of doing the Right Thing first time 
round, instead of proliferating pools.
PTW: Design review, I think, will go a long way to "doing the right thing" in 
response to a specific request.
GavinM: That is what we are supposed to do on the trunk.
  We have far too much release-branch patching, and subsequent patch-porting to 
the trunk.
PTW: drj: 'cept EPDL needs something better than one massive free list
DRJ: one reason why we seem to be creating pools left right and centre is that 
I think we are genuinely understocked in poolclasses
Pekka: agreed
GavinM: Ah.  I remember creating a list or required poolclasses at one point, 
but I've never been able to find it.
PTW: Not so sure.  I think we have a pretty good set of pools, but they need 
tuning and generalizing.
DRJ: gavinm, big patches on branches are because (I claim) that we can't so 
releases from the trunk often enough, because the trunk is not stable enough
GavinM: Again, this is wrong.
DRJ: typically the tip of the latest release branch is much more stable than 
the trunk.  
  and so is a more attractive place to do new development.
GavinM: We've had a lot of fire-fighting recently, and it's done a lot of 
damage.
DRJ: weeell, we don't have a write-barrier pool yet.  We're only just on the 
verge (with EPDL) of getting a decent manual pool
PTW: Time to rebuild, replant
GavinM: I suggest we have a design discussion of required pool classes.
PTW: !
DRJ: having AWL, LO, PSVM, _and_ AMS seems like overkill
  we are rambling again
GavinM: AMS was never very serious.
PTW: Yes
DRJ: (but AMS has all the good design decisions in!)
GavinM: I'd like to draw this discussion to a close soon.  Does anyone have any 
other points or suggestions they want to make?
DRJ: not relevent to this no
PTW: AMS should be the basis for all those others, with the right format
Pekka: Again we note that pools should share more code.
DRJ: anyway
  I was about to say that I think AMC would do fine as a Java pool.  So we 
succeed sometimes
GavinM: I'd like a design discussion on how pools can share more code.



Number of major issues: 15
Number of minor issues: 9
Number of issues: 37

Edit manpower: 7


Edit notes:

1. Fix: If I understand PTW's terminology right, that's what the last sentence 
says, but I edited it to be even clearer.  While this could cause major defects 
in the implementation, if the implementors were confused about it, Nick and I 
weren't.
2. Fix: Removed the phrase "formatted and unformatted objects" as it's a vague 
desription of a situation better described by other parts of the document.  I 
don't see how this could be a major defect.
3. Reject: It says "special work", that would still be required, and on the RIP 
side, to boot.
4. Reject: This is not a defect, this is a question.  DPS is not part of the 
requirements in any case.  Answered in mail.pekka.1997-12-16.12-40(0).
5. Reject: How else could you say it?  And it is simpler, when you know what it 
is.  Answered as a question in mail.pekka.1997-12-16.12-40(0).
6. Reject: This is not a defect, this is a question.  Answered in 
mail.pekka.1997-12-16.12-40(0).
7. Comment: It's too late now, but this review and the mail generated from it 
will spark off some discussion, I'm sure.
8. Fix: Deleted .low.benefit and added .sol.trigger.*, .anal.trigger.* and 
.arch.trigger.glue.
9. Reject: This design is not derived from design.mps.poolams, it just 
references it (I've added an explicit reference now).
10. Comment: This is forced upon us by the design template.  Wrote an 
improvement suggestion on that, and passed it to Gavin.
11. Reject: It was stated in the requirements.
12. Fix: Should have been .arch.obj-string.  This was not a major defect.
13. Mail: mail.pekka.1997-12-18.17-12(0).
14. Mail: mail.pekka.1997-12-16.12-40(0).
15. Reject: That would be incorrect, since simple objects don't, and against 
established PS terminology.
16. Fix: Yes, it's a counter-requirement.
17. Mail: mail.pekka.1997-12-16.12-40(0).
18. Reject: Save levels are not like generations: they behave like a stack.
19. Mail: mail.pekka.1997-12-18.17-12(0).
20. Mail: mail.pekka.1997-12-16.12-40(0).
21. Fix: Added justification.
22. Fix: Clarified.
23. Fix: Same as 12.
24. Fix: Added .mark-compact.
25. Fix: Changed .intro and .overview.
26. Forget: I don't think design.mps.format should change every time a new 
format variant is needed.  Also I think it's premature to define more of them 
without a reviewed design.
27. Fix: Fixed.
28. Fix: Changed to 'PostScript'.
29. Mail: mail.pekka.1997-12-18.17-12(0).
30. Reject: This is a verbatim excerpt from a SW header file.
31. Reject: This is a verbatim excerpt from a SW header file.
32. Mail: mail.pekka.1997-12-18.17-12(0).
33. Mail: mail.pekka.1997-12-16.12-40(0).
34. Reject: This is a verbatim excerpt from a SW header file, and "higher" is 
standard SW usage, that is explained at the beginning of the excerpt.
35. Reject: This is covered in .arch.obj.string.
36. Fix: Noted that software barriers should be considered.  Although since we 
don't need barriers, I don't see how this is a defect.
37. Mail: mail.pekka.1997-12-16.12-40(0).



Exit: exit.universal


Exit notes:

The editor withdrew the document from review, because he felt that the 
difficulties experienced prevented the reviewers from fully understanding the 
problems and therefore the review might have missed some major problems.

