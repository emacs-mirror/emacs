                         REVIEW OF IMPL.C.TRACE
                         review.impl.c.trace.0
                              draft review
                             drj 1995-10-26


Candidate: impl.c.trace(0)
Rules: rule.universal, guide.impl.c.*
Author: richard
Leader: drj
Lines: 362
Status: draft
Entry: ?
Exit: ?
Checkers: dsm (stable), drj (gettting hotter), ptw (rushed)
Kickoff time: 1995-10-26 1447

Rate: 10 lines / min

Logging start 17:10 finish  17:19, Major 0, minor 9, questions 2, unknown 11

1. drj, 37, m, should check id >= 0.  or use an Addr
2. drj, 48, m, bizaare. surely TRACE_MAX > ADDRWIDTH won't work?
3. drj, 63, m, We now have RefSigIsValid (I think).
4. drj, 121, m, thing?TRUE:FALSE is better.
5. drj, 123, m, document find
6. drj, 251, m, already printed out trace on line 239
7. dsm, 9, m, lack of comments
8. dsm, 140, m, should say "see issue.single-collection"
9. dsm, 332;345, m, indentation error
10. ptw, 30, ?, use bitops package
11. ptw, 48, ?, Either broken or needs comment, c.f. 78
12. ptw, 124, ?, Called find-first-zero in most bit operation sets I've seen.  
Many architectures have hardware support for this-- one reason to abstract it 
to a general bit operation substrate.  If no hardware support, there is an 
elegant hack by Gosper that implements this quite efficiently, I believe.
13. ptw, 141, ?, Phase limitation
14. ptw, 154-5, ?, Cast missing on 0.
15. ptw, ?, ?, I have some concern over the general design here of just noting 
mark "work" and scan "work".  It will be absolutely critical that mark and scan 
in _every_pool_ do scrupulous accounting for this to work.  I highly suggest 
that we have a back-up "high water mark"-based system that is available at 
least in debug mode.  My concern is there is no "audit trail" to say who 
mis-accounted and you may never terminate if a pool believes it has done all 
its work yet scan != mark.
16. ptw, 194, ?, Should this be resource based?  Even simpler, should # of 
concurrent traces be a compile-time configuration option and Create/Destroy 
just manage a static table.
16a. ptw, 264;271;280, ?,  I would prefer to see these named TraceNoteXXX, as 
that is all they do, they note things in the trace, they do not actually 
perform the XXX.
17. ptw, 277, ?, I thought we were going to use Addr and Offset?  It should be 
an error to add two Addr's/
18. ptw, 290-307, ?, There is no design documentation for this, even in 
trace.h.  Who calls it.  Where is IsOld now?  Split between here and the Pool?  
Should this verify that the Pool or Segment is actually old before calling the 
Pool? This is a critical overhead function, how is that to be addressed?
19. ptw, 324-335;337-348, ?,  I think these deserve a comment.  Why roots are 
scaned then Pools.  Does it make sense to scan the roots on subsequent times 
around the loop?  Can roots be marked as a result of Scanning?  Or are they 
only markable by RootMark?
20. ptw, 328;341, q, DequeParent vs. DEQUEUENODEELEMENT.  Please explain.
21. ptw, 350, q,  Please explain why the rank is reset each time you scan, vs. 
just not advancing.

Edit (dsm, 1995-10-27)

1. TraceId is now an unsigned int
2. Changed to TRACE_MAX == ADDRWIDTH
3. We do.  ISVALID check reincluded
4. I disagree.  Not changed.
5. Documented
6. Yes, this is intentional.  No action taken.
7. Some comments added
8. This is now a tag to a comment in header.
9. Tabs found and expanded.
10. I have now commented the function but not changed its name.  It is only 
used locally in a non-critical part of the code.
11. fixed. see 2.
12. see 10.
13. Added comment in file header.
14. Done now.  But I will check policy.
15. Created issue.work-noting
16. Number of concurrent traces within a space is a compile-time option. No 
action taken
16a. Changed TraceMark to TraceNoteMarked; TraceScan to TraceNoteScanned.
17. This is still an open issue: issue.addr.
18. Added partial comment to trace.h.  But see also issue.fix.  IsOld is 
split.  Maybe.  See issue.fix
19. Added a comment
20. DequeParent works on a Deque, DEQUENODEELEMENT on a DequeNode.  The use of 
DequeParent on line 328 is a bug.  Now fixed.
21. Added comment in file.



