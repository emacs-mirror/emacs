                 REVIEW OF (PART OF) IMPL.C.POOLEPVM(3)
                        review.impl.c.poolepvm.3
                           incomplete review
                           gavinm 1997-09-15

Rules: rule.universal, rule.impl
Source: design.mps.poolams, design.mps.poolepvm, impl.c.poolepvm, impl.h.mpscepvm
Candidate status: draft

Author: nick
Leader: gavinm
Editor: nick
Scribe: gavinm

Entry: entry.universal, entry.impl
Entry manpower: .2


Entry notes:

Very cursory because of time pressure.  There are some major defects in the document, but I haven't seen any that would cause problems directly.  GavinM 1997-09-15


Loggingstart: 15:17
Loggingend: 15:29
Logginglength: 12
Loggingrate: 2.9

Checkers: NickB;GavinM;Pekka
Rate: 10 lines
Length: 734 lines
Actual checking time: 197

Kickoff start: 1997-09-15 13:34 BST
Kickoff end: 13:36
Kickoff length: 2


ISSUES:

NickB: 2M 3m 1C, about 45 minutes before I lost hope
GavinM: 4M 11m 2q 1C 4I  72 minutes  all
Pekka: 2 M, 4 C, 2 q, 80 min

1. Pekka 1050 M argument trace is not checked
2. Pekka 769 M argument group is not checked
3. NickB 1559 M what about the tickle requirements?
4. NickB 1400-1439 M what about the grain colour?
5. GavinM 695 M Group not checked 
6. GavinM 773 M f not checked
7. GavinM 1413 M Arena not checked
8. Pekka 1471 m [upgraded from q] Why is this check after the code that 
modifies the pool?
9. Pekka 1419 C clarity: Missing cast
10. Pekka 1029 C [upgraded from q] Why check it if we don't use it?
  NickB: we at least write to it, at line 1041 
11. Pekka 1028 C clarity: Missing cast
12. Pekka 973 C efficiency: Don't need to calculate this in hot varieties
  GavinM: Not necessarily true; consult me.
  NickB: what about line 980 
  Pekka: Right.  it's not needed in the Exact branch if you inline it inside 
the AVER
13. Pekka 785 C clarity: this is a pointless exercise in boolean logic
  NickB: No, we're excluding the case that i gets into the buffer without 
passing the scan limit.
14. NickB 1526-7,&c m document these checks.
15. NickB 1036,1040 m use macros for these two conditions (and get rid of 
marked and scanned variables).
16. NickB 483 m comment inconsistent with code
17. NickB - C too much new code for such a simple pool class!
  possibly I should have excluded ranks other than exact for this class
18. GavinM 494 m Should be RING_FOR (after my imminent change)
19. GavinM: 546 m This "b" could be, say, "canAllocate"
20. GavinM 627 m This group could be newGroup for clarity
21. GavinM 695,697 m Clarity: Could have both AVERs outside conditional
22. GavinM 777-797 m The justification for this unusual loop structure is 
unclear
23. GavinM 760,810 m Inconsistent closure naming
24. GavinM 817 q What are the restrictions on the object's colour?
25. GavinM 962 m Consistency: Should be "alloced"
26. GavinM 1036 m scanned (or marked) seems to be redundant here, except for 
AVERs
27. GavinM 1068-1073 m Clarity: blocks are preferable here because of comments
28. GavinM 1410 m Consistency: Should be "addr"
29. GavinM 1527 m A baffling AVER
30. GavinM 1444 q How does this support the required mm_ps_save interface?
31. GavinM 142 I Inconsistent abbreviation
32. GavinM - C For efficiency, could store a low-water-mark for allocation in a 
segment, updated by Alloc and Free
33. GavinM design.mps.poolepvm I Requirements should be in requirements section
34. GavinM design.mps.poolepvm I Need some definitions
35. GavinM design.mps.poolepvm I level/slevel confusion



Brainstorm start: 15:29
Brainstorm end: 16:05
Brainstorm length: 36


BRAINSTORM:

> Unchecked parameters
GavinM: Why did it happen?
NickB: Several of them are due to common code being picked apart, with checks 
added.
  (and I didn't add all the checks, because I couldn't be bothered).
  Yes, it's actually quite good, this code. Let's hope it works :-)
GavinM: It's a simple enough check.  I noticed several of these in "brief 
check".
Pekka: ??
NickB: (it's the old "but I know that this variable is right, because I just 
assigned it at the call site" issue)
GavinM: Um, it's easy to check whether parameters are checked.
  I'll be stricter about this if there's more time.
NickB: Yes. I consciously missed out some checks.
GavinM: Then that should be commented. 


> 3. NickB 1559 M what about the tickle requirements?
NickB: Right, there is an epcore requirement, req.epcore.attr.something, which 
basically says that the
  MM mustn't hog the processor for more than, I think, a sixtieth of a second.
  We can either be incremental, or call back into the client.
GavinM: And we meet this by tickling?
NickB: Right, "tickling" is applying a callback (actually it's a macro which 
checks a variable and does the callback if the variable is set).
GavinM: And some of the functions here have unbounded execution time.
NickB: It does things like push a packet of bits out to the output device, &c.
  Indeed.
  For the allocation we mostly don't care.
Pekka: And why wasn't this requirement mentioned in design.mps.poolepvm?
NickB: I just skipped it.
GavinM: So for O(N) functions we might tickle every 1.
Pekka: Do we need to ArenaLeave to do that?
NickB: Yeah, probably. It's easy enough in mps_epvm_collect, as you can see, 
and that's really the place we care about this.
  If the allocation gets bad, we need to fix the algorithm rather than put 
tickles in.
  (c.f. MVFree()).
GavinM: So how could we have avoided skipping this?
NickB: Well, the reason I skipped it is that I'm intending to cover it in a 
later release :-)
  I should have been more thorough when I went through the requirements 
constructing the requirements part of design.mps.poolepvm.
GavinM: If we'd reviewed the design, would we have picked up the missing 
requirement?
NickB: Probably, as req.epcore is plainly a source document for the design.
  (and it is very clear in req.epcore).
GavinM: Would it have been appropriate to review this design first?
NickB: So design review seems to be the process point here.
Pekka: Agreed
NickB: Well, this design, as it currently exists, isn't really up to scratch 
(although I deliberately wrote it to be interestingly different in character to 
design docs I have previously written for the MPS)
GavinM: But the design is still incomplete.
NickB: Right.
  It could have been reviewed as-is, and such a review would probably have 
turned up this defect.
GavinM: So we would need: More work from Nick to finish the design; design 
review and edit; impl revision; impl review and edit.
NickB: (along with a zillion picky little defects)
GavinM: This design is barely worth reviewing in its current state.
Pekka: So, do we believe in finishing designs, or do we just write random notes?
GavinM: Good question.
Pekka: Not that random notes aren't valuable, too.
GavinM: We have trouble justifying good design documents in schedules.
NickB: Right, random notes are worth, say, 80% of a finished design.
  We have trouble writing good design documents, as we don't really know what 
they look like.
GavinM: Could you have handed the design polishing on to anyone?
NickB: Can you clarify that question?
Pekka: Those zillion picky little defects...
GavinM: I think that trying to review the design in its current state would 
have raised many trivial issues.
NickB: ... make up the other 20%.
GavinM: It needs a few hours of polishing at least.
  Could someone else have done that effectively?
NickB: The requirements section is just about finished, the high-level design 
section is mostly there but unfinished, and the low-level section is patchy, 
mainly because the low-level design is already covered in design.mps.poolams.
GavinM: Aye.
  I should have pressured you about design more.
  entry.universal.source-* are for precsiely this.
Pekka: And design.mps.poolams is also incomplete, so that should really be 
reviewed first....
GavinM: I'm supposed to be gradually tightening up the enry criteria.
  Yes.
  I'll try to be firmer next time.


> 4. NickB 1400-1439 M what about the grain colour?
GavinM: Nick, tell us about grain colour.
NickB: Right. mps_epvm_check() is meant to tell us if the pointer points to 
PSVM data, and if so what pool and what save level. If I'm given a pointer to a 
free grain, I should return FALSE (just as if I'm given a pointer to a free 
page).
  It's another tiny bit of arithmetic and a memory access, but still cheap.
  The process defect here was a failure to think.
  The previous implementation of PSVM doesn't have any free blocks interspersed 
with allocated blocks (because it doesn't have GC, so things are only freed by 
restore, i.e. en masse)
  so it just does some pointer comparisons.
  I wrote this by analogy with that.
GavinM: Did we (as checkers) have enough information to detect this defect?
NickB: You tell me.
GavinM: I found the relationship between mm_ps_* and mps_epvm_* rather 
confusing.
NickB: Possibly it was covered by design.mps.poolepvm.req.prot.mmi
GavinM: No, I got confused after I read that.  8-)
Pekka: I'd say no, not enough
  But how would PS ever get hold of a pointer to a free object?
  I.e. should it assert rather than return FALSE
NickB: (but not really, as one needs a small amount of glue code to turn 
mps_epvm_check() into mm_ps_check(), as (for instance), the pool types are 
quite distinct.
GavinM: I can believe that the glue manages to implement one in terms of the 
other, but I'd liek to have seen some documentation of that.
NickB: Well, I'm not sure. The existing mm_ps_check just returns FALSE if it's 
given a pointer outside the PS VM areas. 
Pekka: But this isn't outside, it's a stale pointer.  I guess it depends on SW 
internals...
GavinM: design.mps.poolepvm.low.check merely says "whether a pointer is to an 
EPVM pool".
NickB: Right. I try to keep my knowledge of RIP internals to a minimum.
GavinM: So its contract is unclear.
  We need clear contracts on client interfaces.
  Perhaps we should have had symbol.<whatever> as source documents.   
NickB: No, it says "whether a pointer is to an EPVM pool and if so which pool 
and at what save level". It would be a lie to say "yes, this pool, this level" 
for a pointer to a free grain.
GavinM: Presumably they haven't been written yet. 
NickB: (which is what the current impl does).
GavinM: Nick, that's less that absolutely clear.
  So I claim we could have avoided this by having the right sort of 
documentation.
NickB: Fair enough. I think it's clear because I have other possible impls in 
my head in which one would get a different answer.
  (e.g. a different save level).
GavinM: If Nick has written symbol doc, he'd have thought about this.
NickB: What symbol doc? For mps_epvm_check()?
GavinM: Yes.
  More work, I know, but we want to do it anyway.
NickB: Right. So that may be a process improvement.
  I don't mind writing symbol doc; I was going to do it anyway, as you say.
GavinM: Suggestion: New external functions need symbol doc.


Pekka: I didn't get all the way through.
GavinM: Ah.  Why was that?
  Too much source doc?
Pekka: Just too slow/not enough time.  I wonder if I get faster with more 
experience.
GavinM: Certainly more familiarity with things helps.
Pekka: I wouldn't mind doing larger reviews, if there was enough time.
GavinM: I would have allowed more time, but it was already over-length.
  We find that 60 minutes of checking are enough to fry brains.
  But we don't normally start before 14:00.
Pekka: It takes me 20-25 minutes to read and understand the design.
GavinM: Yes.
  I try to allow source-reading time.
  I anticipated that there might not be enough time.  I think it worked out OK.



Number of major issues: 7
Number of minor issues: 14
Number of issues: 35


Edit notes:

1. Fix: Added check.
2. Reject: Internal function, not necessary.
3. Comment: mps_epvm_collect is a temporary hack.
4. Fix: AVER that it's alloced.
5. Reject: Internal function, not necessary.
6. Fix: Checked.
7. Reject: ArenaEnter is a check as well.
8. Fix: Moved check.
9. Fix: Added cast.
10. Fix: Removed check.
11. Fix: Added cast.
12. Forget: No reason to complicate the code.
13. Reject: Like Nick said.
14. Fix: Checked interface compatibility in EPVMCheck (and mpsi_check) instead.
15. Fix: Introduced EPVMIsBlack and EPVMIsWhite.
16. Fix: Already fixed.
17. Reject: This cannot be fixed in the implementation, it's caused by the 
inadequacy of design.mps.pool and the C language to handle inheritance.  Wrote 
an analysis about this, which might eventually result in an improvement to 
design.mps.pool.
18. Fix: Changed.
19. Fix: Changed to 'canAlloc'.
20. Reject: We specifically want to store it in the 'group' variable to pass it 
to other parts of this function.
21. Fix: Moved.
22. Reject: It refers to the design that explains it.
23. Fix: Made it 'closure' in both.
24. Mail: mail.pekka.1997-12-17.18-32(0).
25. Fix: Changed.
26. Reject: A better fix was done in 15.
27. Forget: Only one comment.
28. Fix: Changed.
29. Fix: It was an interface compatibility test, I moved it in 14.
30. Mail: mail.pekka.1997-12-17.18-32(0).
31. Fix: Made consistent.
32. Forget: This is probably unnecessary, as we don't do BufferFills that often.
33. Fix: Done as a part of preparation for review.design.mps.poolepvm.0.
34. Fix: There are more now.
35. Reject: That is a verbatim excerpt from a SW header file.


Exit: exit.universal
