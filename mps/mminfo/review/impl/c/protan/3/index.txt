                       REVIEW OF IMPL.C.PROTAN(3)
                         review.impl.c.protan.3
                           incomplete review
                           gavinm 1997-04-15

Rules: rule.impl
Source: design.mps.protan(incomplete)
Candidate status: draft

Author: drj
Leader: gavinm
Editor: drj
Scribe: gavinm

Entry: entry.universal, entry.impl
Entry manpower: .2


Entry notes:

entry.universal.source-approved: Design is incomplete
entry.universal.rules-approved: rule.impl is draft
rule.universal.training: Failed as usual


Loggingstart: 15:18
Loggingend: 15:37
Logginglength: 19
Loggingrate: 1.2

Checkers: DRJ (backwards);NickB;GavinM (backwards);PTW
Rate: 10 lines
Length: 67

Kickoff start: 1997-04-16 14:41 BST, Byre
Kickoff end: 14:44


ISSUES:

NickB: 4m 5I  10 mins
PTW: 1M 1m 1I  7 mins
GavinM: 1M 4m 3I  21 mins
DRJ: 3m 2I 4 mins

1. PTW 35-56 M Modularity: shouldn't be peeking into Seg structure as it does
2. GavinM - I We don't track symbol usage or module relationships very well
3. GavinM 12 m no tag
4. NickB 25,47,49,impl.h.mpmst m Why are we using pm as a name?
5. NickB 28 m "nor"
6. GavinM 25 m pm differs from prototype
7. GavinM 28-29 I We should have a AccessSetCheck even it can't do anything
8. GavinM 30 I We should have a way of saying UNSED except in AVER
9. DRJ 47 m long line
10. DRJ design.mps.protan.fun.sync.seg I Should exist
11. DRJ design.mps.protan I Design does not make it clear why ShieldEnter/Leave 
are used
12. NickB design.mps.protan,etc I We should have a function that allows MM to 
similar client access to segment, return Bool
13. GavinM 58 m rReturn does not match prototype
14. GavinM 59-60 m misaligned
15. NickB 60 Nq Should these be on separate lines?
16. DRJ 66 m brackets around f and rReturn are unnecessary and slightly 
confusing
17. NickB 25-29 NI Should have an AddrCheck, even if it does nothing
18. NickB design.mps.prot I complete this document
19. NickB design.mps.protan I This shoudl refer to design.mps.prot
20. NickB design.mps.protan.fun.protsetup I "Pointer" should be "point"
21. NickB " I "appropropriate" should be "appropriate"
22. NickB " I In last sentence, say why.  Clarity?
23. NickB design.mps.protan I What about ProtSet?


Brainstorm start: 15:46
Brainstorm end: 15:52


BRAINSTORM:

1. seg->pm used a lot, seg-> even more.  Is this part of the interface?
GavinM: Should have access macros.
DRJ: Oscillated between viewpoints.
PTW: Did we talk about slicing Seg up?  If so, cost of changing structure is 
high
GavinM: Access methods making changing and usage tracking cheap.
NickB: Seg is in the process of becoming more abstract.  Now impl.c.seg.
GavinM: Shouldn't use "->" unless defined in interface or in ADT implementation.
PTW: Pity language doesn't enfore this.
GavinM: LCLint might.


Number of issues: 23

Exit: exit.universal
