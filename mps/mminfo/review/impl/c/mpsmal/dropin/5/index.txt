               REVIEW OF IMPL.C.MPSMAL(MMDEVEL_DROPIN.5)
                     review.impl.c.mpsmal.dropin.5
                           incomplete review
                           gavinm 1997-10-14

Rules: rule.universal, rule.impl
Source: design.product.soft.drop.manual, standard.ansic
Candidate status: draft

Author: pekka
Leader: gavinm
Editor: pekka
Scribe: gavinm

Entry: entry.universal, entry.impl
Entry manpower: .1


Entry notes:

Source not approved.
Leader not trained.
At least one major defect.
S'OK.  GavinM 1997-10-14


Loggingstart: 16:08
Loggingend: 16:29
Logginglength: 21
Loggingrate: 1.4

Checkers: Pekka;GavinM;Sheep;PTW
Rate: 15 lines
Length: 238
Actual checking time: 82

Kickoff start: 1997-10-14 14:00 BST (09:00 EDT), Pool Hall, See review.design.product.soft.drop.manual.0


ISSUES:

GavinM: 2M 7m 2C 3q, 37 minutes, 100%
PTW: 0%
Sheep: 5M 5m  several q's,  30 mins, 100%
Pekka: 1M 1m, 15 min, 100%

1. Sheep 131 M in free should the code either init or assert inited ? 
  Same for realloc 
2. Sheep -,79 M Macros in upper and lower case is confusing ...
3. Sheep 81 M should we have an assert over negative size 
  GavinM: 7.1.6 says size_t is "unsigned integral type" 
  Sheep: If can never be negative then possibly someone might call malloc ( 0 - 
56 ) or something which would turn into a call for a super large object
  Pekka: That's C for you.
  GavinM: We have already had such a bug with Dylan. 
4. Sheep 191 M precidance assumpition ? 
5. Sheep 208 M assert not reached ? 
6. Pekka 161 M mps_res_t is not guaranteed to be boolean, pointless here anyway
7. GavinM 78 M "8" should be "CHAR_BIT"
8. GavinM 136,189 M This check relies on a violation of the interface.
  Checking for a double-free by accessing possibly-freed memory, is a bit 
circular.
9. Sheep 179,81,145,1254 m I'm confused by this  use of void *(malloc)( size ) 
  I'm confused by this non normal presentaion
10. Sheep 114 m calling convention seems non-normal too
11. Sheep 154 m should assert HEADER_SIZE is positve ?
12. Pekka 181 m header_s is a stupid name, and not required by convention
13. GavinM - m Long lines
14. GavinM 1 m Tag wrong
15. GavinM 4 m Wrong copyright message
16. GavinM 6 m readership unclear: maybe "any competent C programmer"?
17. GavinM - q Is there any requirement for our drop-in replacement to be 
freestanding?
18. GavinM 11 m size_t and NULL are both defined in stdlib.h (see 7.10)
19. GavinM 36 q When is our platform alignment larger that sizeof alignment, 
and if it is, why do we need platform alignment here?
20. GavinM 31-40 C We could have had a second char[1] member of this structure
  Pekka: what for?
  GavinM: it might make some of the conversion clearer.  Or maybe not.
21. GavinM 78 m Relies on number of bits in size_t being even
22. GavinM 62,115,157,165,184,191 m guide.impl.c.misc.single-step
23. GavinM 136,189 q Is this the best check we can do?  
24. GavinM - C Making size inclusive lets us distinguish zero-size blocks from 
free blocks
25. GavinM standard.ansic I 7.10.3.1 should define boundary cases more clearly
26. PTW 83-110 Nm Overflow checking seems too complex.  Is there not a simpler 
form, such as verifying that the answer is larger than the inputs?  Should the 
"hard way" be out of line?
27. Sheep Nq is there someway of avoiding long computes on the overflow 
compution
28. PTW 174 Nm Is this the best way to do this?  There is not a standard min?  
Or at least one that avoids multiple evaluation?
29. PTW 193-206 NM either use malloc/free or mps_alloc/mps_free.  Mixing them 
is confusing and may lead future programmers down a garden path



Number of major issues: 9
Number of minor issues: 13
Number of issues: 29

Edit manpower: 3


Edit notes:

1. Reject: Calling free first (with a non-NULL argument) is a protocol 
violation, it can't succeed.  The MPS will assert (no arena).  Likewise for 
realloc when it is used as free; when used to allocate, it will call malloc 
which will init.
2. Reject: Standard MM practice.  (Note: If this were a defect, I don't see how 
it could be a major defect.)
3. Reject: See Gavin's comment.  Large allocations will fail.
4. Reject: We're allowed to know that - preceeds == in ANSI C.
5. Reject: Pointless.  If we'd manage to fall through, we'd get a compiler 
warning.
6. Reject: Yes, it is.
7. Fix: Used CHAR_BIT.
8. Reject: It's a valid method, guaranteed to succeed if the client follows 
protocol.   It's like a signature check.
9. Reject: Standard C idiom.
10. Reject: As 9.
11. Reject: No need to test the compiler.
12. Reject: Stupid, but practical.
13. Fix: Reformatted.
14. Fix: Changed.
15. Reject: No way to know what's right.
16. Fix: Changed to "MPS developers, product users".
17. Mail: mail.pekka.1997-11-04.15-47(0)
18. Reject: NULL isn't.  stddef.h is correct, see standard.ansic.7.1.6.
19. Mail: mail.pekka.1997-11-04.15-47(0)
20. Reject: It wouldn't be clearer.
21. Fix: Checked that it is even.
22. Fix: Reformatted.
23. Mail: mail.pekka.1997-11-04.15-47(0)
24. Reject: There aren't any zero-sized blocks.
25. Forget: So it should, but there's no practical hope of achieving an 
improvement.
26. Reject: I don't think there is a simpler check.  Moving part of it out of 
line will just make it harder to understand.
27. Mail: mail.pekka.1997-11-04.15-47(0)
28. Reject: Yes, that is the best you can do in C.
29. Reject: The choices follow from the requirements of efficiency and 
functionality, and will not confuse anybody who knows the functional 
requirements.


Exit: exit.universal
