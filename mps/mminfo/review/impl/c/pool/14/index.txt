                       REVIEW OF IMPL.C.POOL(14)
                         review.impl.c.pool.14
                              draft review
                           gavinm 1996-07-30

Rules: rule.universal, rule.impl, rule.impl.c (obsolete)
Checklists: check.impl.c.clarity, check.impl.c.consistency, check.impl.c.convention, 
check.impl.c.correctness, check.impl.c.source
Source: impl.h.mpmst(8)
Candidate status: accepted

Author: richard
Leader: gavinm
Editor: gavinm
Approved: 1996-10-30

Entry: entry.universal, entry.universal
Entry manpower: 1


Entry notes:

Failed entry.universal.source-approved on impl.h.mpmst(8)

Failed entry.universal.rules-approved on all rules.
Failed entry.universal.training.
entry.universal.auto-check not performed as not defined.


Loggingstart: 16:29
Loggingend: 17:09
Logginglength: 40
Loggingrate: 2.6

Checkers: gavinm (Conventions);nickb (Consistency);richard (Source);ptw (Clarity);drj (Correctness)
Rate: 10 lines/minutes
Length: 521 lines

Kickoff start: 1996-07-31 15:11 BST
Kickoff end: 15:16
Kickoff length: 5


ISSUES:

Richard (Source)
1. 12 I SRCID macro should be documented as a convention
2. 8 m Transgresses source.doc
3. 17-39 I The practice of checking every field should be a convention
4. 18 m rule.impl.complete insufficient constraint on class name
5. 21 M rule.impl.complete Field attr not checked
6. 21-37 C suggest isFunction macro
7. 47 M rule.impl.complete bufferSerial field not checked
8. 57 I This is misplaced design; don't have rule
9. 57 m Misplaced design about alignment
10. 61-69 I C Guide should document convention for varargs
11. 128 q When should Addr mutate into void *
12. 128-133 m rule.impl.dep link to finish operation
13. 153 m rule.impl.justify Why?
14. 147 I C guide show document that all fields must be finished
15. 175-176 m rule.impl.justify Why?
16. 182-183 m rule.impl.dep link to initialisation
17. 187,204,212,219,etc m rule.impl.simple parens unnecessary
18. 231 M rule.impl.trans Indirections won't meet performance requirements; 
need faster mechanism
19. mpm.h I poolPoll redundant
20. rule.impl I Need superfluousness clause
21. 257 m rule.impl.complete not all information represented
22. 276 M rule.universal.clear Explain the thread safety issue here
23. 313 M rule.impl.justify
24. 358-364 m Misplaced design
25. 521 m rule.impl.complete No TrivFinish, TrivAlloc

NickB (Consistency)
26. 48 m No check that spaceRing field is attached to the space
27. 55-59 m This should precede line 71
28. 55-59 m Inconsistent level of documentation; only banner in file
29. 57 m It does more than this; see lines 90-93
30. 75,123 M No check on pool class
31. 84-84 m If these came before line 78, the fields would be initialised in 
order [ask Richard]
32. 95 m See .issue.48; could move to line 88; if moved remember RingRemove in 
failure case
33. 109,117 m Should be called args for consistency with lines 64 & 71
34. 187,212,225 C Return arguments are placed inconsistently
35. 215,221,239 M No checks on space argument; or pool->space == space
36. 233,245 M NO check on seg argument
37. 276 m This comment is meaningless, context-free, and inconsistent with doc 
level
38. 279 M No check on the argument
39. 298 m Modularity breach
40. 298 I Should be in SegAlloc; then this fn becomes a lot simpler
41. 309 M No check on seg arg
42. 323 M No check on space arg
43. 399-403 q Is this really a trivial buffer init?

DRJ (Correctness)
44. 46 m rule.impl.mod
45. 55 m & pool init
46. 85 mN rule.impl.mod
47. 117 m spacing error
48. 124 m AVER class
49. 138,93 m rule.universal.cons.self
50. 182,183 m Should be cast to Size
51. 208 m AVER size
52. 212,219 q Why is space a parameter?
53. 221,237 m AVER space
54. 215,237 m AVER traceId
55. 212,219,225,231,237,243 m General lack of AVER
56. 276 q Should this be a tag?
57. 276 m rule.univeral.clear
58. 309 m AVER seg->pool == pool
59. 326 m rule.impl.mod
60. 342 m rule.universal.simple
61. 415 m Should be a NOOP here
62. 514 C poolTrivReclaim makes sense

PTW (Clarify)
63. - M Requirements and design unclear
64. - M rule.universal.readership
65. 10 m .include what is mpm.h for?
66. 17-38 I .clear SLDU better names
67. 75,76 I AVERT better name
68. 82 I .macro.non-function ARCH_ALIGN
69. 133 I .magic, .clear, .doc type coercion; clarify
70. 193 q What about zero length allocation in PS?
71. 276 M unclear
72. 372,373,etc m exception behaviour unclear

GavinM (Conventions)
73. - m rule.universal.risk
74. 10 m rule.impl.c.conventions.include.std
75. 18 I extra CHECK macro for non-null
76. 20 m unclear, needs doc
77. 65,67,110,112 m check.impl.c.conventions.include.lib
78. 75 I extra AVER for non-null
79. 86 m clarity, unclear binding
80. 91 m rule.impl.open re-use of class
81. 95 I I/O param at end
82. 101 m what about space->poolSerial? 
83. 117 m inconsistent indentation
84. 131 m typo in address
85. 133 I AddrAdd macro couldz take extra type argument
86. 147,167 m rule.impl.open no varargs version
87. 147,167 m no resReturn
88. 159 q what about removing from buffering?
89. 187,204,212,219,&c m if this has a macro version, this should be documented.
90. 207 m use NULL or document why not.
91. 208 q can we AVER size here?
92. 219,237,243 m no resReturn
93. 225,228,231,234 m IO and return param ordering
94. 252,264 m document 'e'
95. 296 m inconsistent line break.
96. 325,341 I unclear Bool return
97. 372,381,&c c can we log parameters here?
98. 373&c I resUNIMPL inconsistent capitalization
99. 402,415 m insert NOOP
100. 467 m inconsistent line break
101. 489,498 m inconsistent IO parm ordering.

Richard again:
102. check..source I req correct illegal tag format
103. check...source I head ambiguous
104. - I req complete no requirements for this implementation





Brainstorm start: 15:37
Brainstorm end: 16:19
Brainstorm length: 42


BRAINSTORM:

5. Revise rule.impl.c to include checking all fields.  Also, we haven't had 
source role.  Source valuable, but takes twice as long.  Need backwards source 
checker.  Changing the review procedure won't reduce defect rates.  What's the 
difference between a guide and a rule?  A guide is a readable discussion that 
instructs.  A procedure is an ordered set of steps.  Rules are things documents 
must follow; they don't say how you manage to follow them.  NickB suggested a 
standard as an automatically checkable rule.

18. Richard believe this mechanism won't meet performance requirements; this 
should be documented. Requirements are documented.

63,64. Need to make sure we do design work.  We're all willing.  Why haven't 
we?  What do we want to write down?  Not enough constraints.  See 
process.design.arch.  Achieving functional requirements is easy (says 
Richard).  Harder are attribute requirements.  How do we judge whether PoolFix 
breaks requirements (.issue.18)?  How do we go from a 15s in 120s requirement 
(Dylan) to constrains on modules?  Need method for requirement decomposition; 
design.  guide.design will describe how to make these connections.

22. Dangerous and important things insufficiently marked.  This function has to 
be re-entrant; this is a special requirement on this function which this 
implmentation meets.  Hence no AVER.  Could have thread safe version.  
impl.c.mpsi.threadsafe

Logging doesn't seem to be working in the way that Gilb says it should.  We 
aren't finding new issues.  Could it be that we're going to fast?  
Rule/checklist reference is less mnemonic. Important our rules represent best 
knowledge.  Editor could link to rules.  Does identification of a rule help the 
editor?  Yes!  rule.impl.c is too detailed and doesn't concentrate on 
requirements and quality.  Need to gather important rules, apart from trivia 
guidelines.  Major/minor/trivial?  Need to work out why logging doesn't work.  
Quote rule; rule & comment; comment only?  Could develop language for 
expressing issues.


Number of major issues: 14
Number of minor issues: 59
Number of issues: 104
Major defects remaining: 1.5

Edit manpower: 21


Edit notes:

1. See rule.impl.c.srcid
2. Added references to impl.h.mpmst and design.mps.pool
3. See rule.impl.c.check.complete
4. Comment added
5. Added AttrCheck to mpmtypes.h
6. IsFunction added to assert.h and used
7. Added comment
8. See rule.impl.design
9. Moved to design.mps.pool.align
10. See rule.impl.c.varargs
11. See issue.managed-address
12. Linked
13. Removed
14. See rule.impl.c.adt.dest
15. Comment added
16. Done
17. Removed where no macro version exists
18. Macro version of method should meet performance requirements
19. Removed
20. Already covered by rule.impl.c.simple
21. Fields added
22. Added link
23. Added link
24. Moved to design.mps.pool.no and design.mps.pool.triv
25. Added PoolTrivFinish and PoolTrivAlloc
26. Wouldn't be O(1)
27. Extended comment
28. Reformat
29. Corrected comment
30. Added
31. Added comment
32. Moved and added
33. Corrected
34. See issue.parameter-ordering
35. Added AVERT and AVER
36. Added AVERT
37. Fixed
38. AVERT added
39. Deleted; was done in arena*.c anyway.
40. See 39
41. AVERT added
42. AVERT added
43. Yes; specific init may override generic fields
44. Modularity breach justifiable because this is checking code; added comment
45. Extended comment
46. See issue.serial-ring
47. Indentation adjusted
48. Added
49. Changed to use error fall-through
50. Casts added
51. Done.
52. See issue.redundant-parameters
53. Done
54. Checks added
55. Added
56. Added .pool.space
57. Added ref
58. Done
59. True; not worth fixing
60. Split into two steps 
61. Done 
62. No; leave until we have a requirement
63. Now refers to design.mps.pool; requirements still unclear
64. See issue.mps-readership
65. See design.mps.headers
66. See design.mps.check
67. See design.mps.assert
68. See issue.macro-naming
69. Comment extended
70. design.mps.interface says that PoolAlloc allocates a block; I take this to 
imply non-zero size.
71. Fixed.
72. Perhaps NOTREACHED could be better named, but this is well within our 
common practice, so rejected
73. Elevated to mail discussion
74. See design.mps.headers
75. Not worth it
76. Comment added
77. These are standalone built-in
78. Not worth it
79. Parentheses added
80. Insignificant; rejected
81. See issue.parameter-order
82. Comment added
83. Fixed
84. Fixed
85. It wouldn't add anything
86. Destroy and Finish need no extra parameters
87. Destroy and Finish can't fail meaningfully
88. AVER added
89. Comments added and parentheses removed as appropriate
90. Changed 0 to NULL
91. Added AVER(size > 0)
92. See check.impl.adapt.res
93. See issue.parameter-order
94. e changed to nChars and comment added
95. Fixed
96. This is perfectly clear; checker doesn't know what he's talking about
97. See issue.user-assert
98. See issue.macro-naming (although it's an enum))
99. Added NOOP in line 415, line 402 doesn't need one.
100. Fixed
101. See issue.parameter-order
102. Fixed.
103. Changed head to header
104. Added placeholder in design.mps.pool and PoolFix's requirement to be fast.



Exit manpower: 1


Exit notes:

Manpower saved: 14 major defects * 10 hours each = 140 hours
Estimated remaining: 14 major defects / 9 pages


Manpowerused: 34.5
Manpowersaved: 140
