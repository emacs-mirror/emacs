             REVIEW OF IMPL.C.POOLMV2.SPLAY.17 LINES 1-589
                     review.impl.c.poolmv2.splay.17
                           incomplete review
                           gavinm 1998-07-06

Candidate status: draft

Author: ptw
Leader: gavinm
Editor: ptw
Scribe: gavinm

Loggingstart: 14:24 GMT
Loggingend: 15:08 GMT
Logginglength: 44
Loggingrate: 1.6

Rate: 10 lines
Length: 589 lines
Actual checking time: 322


ISSUES:

These transcribed from irc.review.1998-06-26(0) [probably -- drj 1998-11-20]

GavinM: 3M 10m 2q 1C 5I  69 minutes  62%
LTH: 0M 2m 0q 0I 70 minutes 100% but not familiar with coding conventions
DRJ: 5M 6m 1q 2C 10I 65 minutes ~120%
Tony: 2M, 2m 0q 0C 0I 70minutes 90%
PTW: 48 minutes, M: 0, m: 3, C: 0, q: 2, I: 10


DRJ:
1. 81 M in the comment, "contingency" is not explained.
  (and the reference to the design is not helpful)
2. 98-134 M all this meter stuff should be unified with Tony's recent STATISTIC 
stuff which is similar.
3. 176 M even documented as transgressions these macros should go.
  The less C-like we are the worse.
4. 245ff M ResLIMIT is not appropriate here (but see my comment about how 
ResBADARG might be a good idea)
5. 268 M 3 is magic! or at least unexaplined.

Tony:
6. 283 M Use of default seg pref only sounds limited, given 
design.mps.poolmv2(4).arch.parameters
7. 476 M Is it right that we give up so easily when we can't get a seg from the 
arena? How do we know there isn't a free block? (Perhaps I've just missed a 
detail in the rush)

GavinM: 
8. 463 M What happens to the rest of this segment?  Is it leaked?
9. 474 M There could also be blocks on the ABQ or in the CBS only big enough.  
There is no attempt to used them for oversize blocks.  (as Tony's)
10. 538 M Could usefully AVER(AddrOffset(base, limit) >= minSize)

DRJ: 
11. I design.mps.cbs add .abbr.cbs
12. I design.mps.cbs add .def.isolated as is used as a technical term.
13. I design.mps.cbs.req.client "isolated" is unclear
  PTW: where is "isolated" from?
  GavinM: "isolated contiguous block"
14. I design.mps.cbs.type.cbs.block s/returns/returned/
15. I design.mps.cbs.type.new.method "This function pointer type is a client 
method..."  false.  the type is a pointer type to methods that blah bl;ah
16. I design.mps.cbs.type.delete.method semantics are unclear.  What happens if 
middle of an isolated block is deleted for example?
17. I design.mps.cbs Shrinka and Grow (the parms to Init) not described.
18. I design.mps.cbs.function.cbs.finish preconditions not mentioned, e.g. 
shoudl the set it describes be empty?
  GavinM: Good point.
19. "the review" I lines 15-18 clearly indicate source documents (header files) 
which were not mentioned in the review
  GavinM: I actively decided not to use the header files as source. 
  DRJ: ah well, I tell the difference between that and a mistake; missing a 
source document could be really bad
20. 32 C unconventional but ok.  (convention would have the function 
topologicallu sorted within the file and the class structure decl at the end)
  PTW: I passively decided to organize the code for literary style, not 
"topologically"
  DRJ: I'm inclined to prefer your style ptw, so perhaps we should change the 
convention
21. 242 C I think we probably should have a ResBADARG, or maybe client protocol 
AVER or something
22. 308 m missing space before "*/"
23. 344 m (since you put one in Finish) missing Init EVENT
24. 372 m conjuction of checks should be two separate checks, then you can tell 
which one fired.
25. 383 m add the else clause to check something when !mv2->splinter ?
26. 486 m (followup) reset splinter fields to INIT values so you can check them!
27. 520 q how is this perfect?
28. 522 m 1 True Brace style would join this line to the next, block brace 
style would put { on a line of its own.  Coding style admits either, but not 
this hybrid
  GavinM: also 503, 528
29. 536 m more conventional to use < rather than >
30. 563 m something we could try is to ask for a segment that is just large 
enough (minSize aligned to a page).  but I suppose that would violate the 
SegSize assumption
31. 627 I is there an accounting error if size==0

Tony: 
32. m 252 What does this comment refer to? A wish for the future?
33. m 256 What does this comment refer to? A wish for the future?
  PTW: I appear to use --- where @@@ is the group convention (that I was 
unaware of)

PTW: 
34. I  rule.impl.c.adt.create Not all ADT require a creation function:  some 
are embedded, some are created by the abstract superclass.
35. I  rule.impl.c.adt.create.check Because not all ADT's require a creation 
function, the check call should be required of the initialisation function
36. I  rule.impl.c.adt.dest Because of the way our class implementation works, 
the finish and destroy functions must take instances of the abstract superclass 
as an argument, not the concrete class.
37. q 1 rule.imple.c.name.adt Is the ADT PoolMV2 or simply MV2?
38. m 13 rule.impl.c.inc.std Missing compulsory inclusion
39. I 136 rule.impl.c.adt.sig Having the signature as the last field but 
checked first will increase the liklihood that a check function will assert on 
an instance that has been changed by adding or removing slots.  Not doing so 
increases the likelihood that the check function will fail in some mysterious 
way when checking non-existent slots.
40. q 184 .cons Why is this method called PoolPoolMV2?  Historical 
anachronism?  Confusion over the ADT name?
  DRJ: [well you can't call PoolPoolMV2 PoolMV2 can you? :)]
41. I 228 rule.impl.c.adt.init The init function cannot take an \"instance of 
the class\" as its argument, as the object is not a proper instance until it 
has been initialized.
42. I 242  There should be a standard checking function for checking input 
parameters that are supplied by the client.
43. I 390 rule.impl.c.check.sense Rephrase in terms of TRUE and failure.
44. I 441 rule.impl.c.assert.brief Class methods should not check parameters 
that have already been checked in the generic function.
45. I 445  There should be a standard function for checking that an instance of 
an abstract class is an instance of a concrete class.
46. I 549 guide.tag Suggest that a different delimiter (e.g., ':') be used to 
delimit the document tag from a tag within a document to aid both humans and 
programs in finding tags within documents
47. m 582  meters need to be designed, documented (or at least meter.c should 
have been a source document).
48. m 472, 514 .cons Here and other places in the code where it is assumed that 
segments cannot be coalesced (a limitation in the current segment substrate) 
should be tagged.
  DRJ: [this is essentially what your "---" convention is telling you: tag it!]
49. nI STATISTICS should be designed and documented, so someone does not go off 
and invent METERS in a parallel universe
50. nI Code should be organized in a "literary" rather than "topological" style
51. nI rule.impl.c.check conjunctions should be avoided in checks

LTH: 
52. m (throughout) inconsistent use of unless/when relative to one-branch if.
53. m 267-68  document/justify `3`.

GavinM:
54. 178 m Unused macro.
55. 265 m Could use SizeAlignUp here.
  DRJ: 265 can't use SizeAlignUp as that only works with powers of 2]
56. 289-306 m These initialisations are unnecessarily out of order.
57. 305 m For clarity, this could usefully use the calculation of 373.
  DRJ: your comment re line 305 is unclear
  GavinM: this value is a cached calculation based on size and fragLimit.  The 
fact that the result is initially zero is a side-effect of the actual 
calculation.
58. 363,365 q What are these lines doing here?
59. 367-373 m These checks are unnecessarily out of order.
60. 372 m If this is a percentage, the field name could usefully reflect the 
fact.
61. 373 m This calculation appears three times in this file, and could usefully 
appear only once. 
62. 382 m Could usefully note that this CHECKL may become untrue.
  PTW: 382 is still unclear
  DRJ: concur, when will it be false except in bug?
  GavinM: It's the same seg boundary potential change that could usefully be 
tagged.
63. 514-540 C This code would be a lot simpler with either segment merging or 
multi-segment buffers.
64. 529 mN Too many seconds.
65. 561 m This control-flow is slightly confusing.
66. 880 I Read access to output parameter.
67. 1003,1019 I This is an odd place to find these function names.
68. 1003 q What used does this function make of size?
69. design.mps.poolmv2.def.alignment I This is wrong.  How about "... address 
to be a multiple of some value, typical a power of 2 ...", or "... typically to 
be a multiple of a power of 2 ..."?
70. design.mps.poolmv2.arch.fragmentation.internal I Something has gone wrong 
in this paragraph.

DRJ:
71. rule.impl.c.inc.std nI Ancient history and should be removed.
72. rule.impl.c nI whole document is probably a bit ancient and needs a lookover

[ From process brainstorm ]
PTW: 
73. nI role.positive  I've suggested this before, we ought to encourage 
positive comments to balance what can otherwise seem like a very negative 
process

GavinM: 
74. design.mps.meter NM Shoudl exist.



Brainstorm start: 15:31 GMT
Brainstorm end: 16:07 GMT
Brainstorm length: 36


BRAINSTORM:

GavinM: I'd like to start with:
  > DRJ: 2. 98-134 M all this meter stuff should be unified with Tony's recent 
STATISTIC stuff which is similar.
  How did this happen?
PTW: Well, this is pretty simple.  Sounds like Tony and I duplicated effort due 
to lack of communication
DRJ: yep
GavinM: Both of you had to invent complex metering stuff as part of other work.
  Neither of you sent round an RFC about it.
DRJ: and that wasn't recorded in darwin or rfced
GavinM: Interesting, at least one group member has read both Tony and PTW's 
code, but failed to make the connection.  [Blushes]
DRJ: happened again when ptw and I added the same makefile for lippgc
PTW: I don't think this is that great a loss.
DRJ: in this case.
GavinM: So we could be better at RFC when we spin off new technology.
PTW: I had no requirement for meters, but invented them to improve my code.
GavinM: Tony needed meters to measure the effectiveness of instruction 
emulation.
DRJ: or maybe if we had weekly plans and summaries of stuff done
PTW: Yes.  I should have (and actually intended to) RFC, but it slipped through 
the cracks.  And the meter stuff grew
GavinM: Suggest: Weekly group meetings for status reports.
PTW: Ooh.  Maybe if we had weekly group meetings with "what are you working on" 
status reports.
DRJ: that's a radically different suggestion than mine, and one I would object 
to.
GavinM: Weekly group meetings has been raised a couple of times this week, and 
it's something I intend to discuss with the UK people.
DRJ: in general I don't think the MM group has been very good at 
communication.  particualrly wrt to what everyone is doing.
PTW: I think a time-limited meeting, by phone or even on IRC would be useful.
Tony: The Dylan group had a HOPE trigger so anyone could see what checkins 
happened
GavinM: An interactive meeting, where people can ask questions and exchange 
ideas, has something going for it.
DRJ: yes
PTW: Oh, no!  Not more automated email!

GavinM:
  > Tony: 7. 476 M Is it right that we give up so easily when we can't get a 
seg from the arena? How do we know there isn't a free block? (Perhaps I've just 
missed a detail in the rush)
  > GavinM: 9. 474 M There could also be blocks on the ABQ or in the CBS only 
big enough.  There is no attempt to used them for oversize blocks.  (as Tony's)
PTW: This is an explicit policy decision, documented in the design.  Perhaps 
all that is missing is a tag.
DRJ: I think so.
  though is it true that it leaks memory (as GavinM pointed out elsewhere)?
PTW: No it does not.
  The tag is there on line 456.
GavinM: Whilst I concede that we want on-the-side large object allocation ...
   ... it seems churlish to refuse allocation requests that might have been 
satisfied.
PTW: The memory is "unused" until the exceptional object is returned, at which 
time it is recovered.
GavinM: Was that deliberate Tucker?
DRJ: but they can only be satisfied by allocating across segment boundaries 
gavin. which it can't do chiefly because buffers can't overlap segment 
boundaries
PTW: Also an explicit policy decision.
GavinM: Er, no.
PTW: Exceptional objects are expected to have exceptional lifetimes so normal 
objects are intentionally not placed adjacent to them.
DRJ: gavinm, er, no, what?
GavinM: Er, yes.
DRJ: aha
GavinM: I see now.
Tony: Yes, I'm happy with this now
PTW: So, was this an oversight by the reviewers, or is there a process flaw 
here?
GavinM: There can't be a within-segement block on the ABQ or CBS because they 
all have the same segment size, which is already known to be too small.
DRJ: I suppose it could be more explicitly stated that no segment on the CBS 
will be bigger than er, whatever size it won't be bigger than.
  no, I think the design is quite subtle.
GavinM: This will be moot if we abolish segment boundaries in some way.
PTW: No it will not be moot.

GavinM:
  > GavinM: 8. 463 M What happens to the rest of this segment?  Is it leaked?
PTW: Point of order
DRJ: (because blocks on the CBS are all smaller than reusesize anyway)
GavinM: (drj, not true)
  PTW?
PTW: Because it is an explicit policy decision in the design, reviewed and 
(nearly) accepted.
  Segment merging will not change that.
GavinM: Ah.  It's not leaked because we recognize the largeness when we free?
PTW: Yes.  Exceptional blocks are treated specially, all the way around.
  The alternative would be to simply fail.
GavinM: Hmm.  I think there's some clarity issues around here somewhere.
Tony: FWIW, I think it's pretty clear - I just didn't do all the xrefs
GavinM: How could we have ensured that this aspect of the design was clear to 
the reviewers?
Tony: Give more time to reading the source docs
DRJ: the code could make it more explicit
Tony: drj: agree
GavinM: The code could treat segments more consistently.
DRJ: it could redundantly use the seg->p field to indicate segments which had 
exactly one (presumably overlarge) object in, for example.
PTW: [This point was a subject of misunderstanding in the design review.  I 
thought I cleared it up in edit.]
DRJ: gavinm, but treating them consistently wouldn't be in accordance with the 
design.
GavinM: Mmm.
PTW: [Perhaps I did not]
DRJ: well, I certainly wasn't as familiar with the design as I would've liked.

GavinM:
  > DRJ: 4. 245ff M ResLIMIT is not appropriate here (but see my comment about 
how ResBADARG might be a good idea)
DRJ: we should sit exams on the source docs before being allowed into review
PTW: Perhaps this point is buried in the desgin and should be at top level
DRJ: (not convinced this is major)
GavinM: How did this problem get into draft code?
  I guess a developer is reluctant to widen the scope of his assignment to the 
creation of additional infrastructure.
PTW: Er
DRJ: ah, irony.
  design.mps.type.res is unclear.
GavinM: I think there's a request about interface checking that Tony's defining.
PTW: By marking it ---, I was signalling that it was something I knew needed 
improving.
DRJ: ResLIMIT: "An internal limitation was reached"
GavinM: (as I tried to clarify at kickoff)
PTW: I would say it is there due to insufficient time on my part (an internal 
implementation limit)
DRJ: :)
PTW: Yes, well, is there a process for such things?
  Can a document be reviewed with @@@'s in it?
GavinM: You could create a request.
PTW: And how was I to know that @@@ is better than ---?
DRJ: in practise if a document has @@@@ in and gets reviewed all the @@@@s get 
pointed out as major defects.  which I find annoying.
  ptw, good question.
PTW: Well, yes.  --- means I need to create a request.  Should I not be able to 
review the document until a request has been entered?
GavinM: Hmm.
PTW: (apropos of the first item, removing the --- by implementing what I need 
is wrong)
GavinM: It is possible to escalate defects to requests in edit.
PTW: Er, this was a defect I knew about well before edit
GavinM: I'm beginning to think that all @@@s should be reflected in requests.
DRJ: now you're going to get me started about how darwin isn't necessarily the 
right tool for describing all things that need changing in our code
GavinM: In fact, I'm defining a request to that effect.
  It's to sort out the status of @@@s in code.
PTW: And ---'s, I expect.
DRJ: gavinm, I believe there's a request about that
GavinM: Then we're sorted.

  Does anyone want to raise any issues about review porocess?
DRJ: yes
GavinM: I think today's review went quite well.
DRJ: er I thought the logging went quite well
  you seemed to guide people more
GavinM: Yes.  The logging was satisfyingly brisk, but effective.
DRJ: however, 
GavinM: I had more uptime.
DRJ: I still think there is a problem with review setup and teardown
GavinM: Could you clairfy?
DRJ: The review mail which you send round is too indirect a way of telling 
people what they should be doing.
  (e.g. tony's missed role)
GavinM: Ah.
DRJ: er, perhaps it was ptw
  I forget
GavinM: Is providing bits of paper better?
DRJ: or maybe it was a source document
  no, providing bits of paper is no better
GavinM: What would you suggest?
  I could run over roles in the kickoff meeting.
DRJ: and when the document enters edit, the editor is magically supposed to 
know without being explicitly told.
GavinM: Ah.  That is something you've raised before.
DRJ: gavinm, roles in the kickoff would be good.
GavinM: I think I agreed to send a mail to the editor at that point, but I may 
well have been lax.
DRJ: well, now I've told you in time so that you can fix it for this review :)
GavinM: Mmm.
DRJ: There should be a procedure to follow.  I suppose there is, so I'm 
suggesting it be "improved".
GavinM: SUGGEST: proc.review.ko The leader makes sure everyone knows and 
understands his roles.
  OK.

  Any other issues?
Tony: yes
PTW: nI: role.positive  I've suggested this before, we ought to encourage 
positive comments to balance what can otherwise seem like a very negative 
process
GavinM: Tony?
DRJ: no doubt if we were all trained properly we'd just grok it straight from 
the amil automatically. however...
GavinM: PTW, noted.
Tony: What was the reason for not having include files as source docs?
PTW: It wasn't bad today... but can be sometimes
LTH: ObPositive: Lisp programmers write nicer C code than C programmers.
GavinM: I decided we have enough meaty source documents already, and there was 
little to the header files that wasn't checked by the compiler.
PTW: Not if they're not allowed to #define when/unless ;-)
Tony: gavinm: It meant I had to dig them out during the review
  which wasted time ...
GavinM: I thought that using header files as source documents wouldn't be a 
productive use of time.
DRJ: okay, so perhaps they should be listed in the review record as source 
documents that aren't being checked.
PTW: Clearly not as at least 2 reviewers dug them out anyways
DRJ: DRJ, noted.
  so that retentive people like tony can check them anyway :)
GavinM: Could they explain why?
Tony: I didn't want to check them
PTW: I wonder how anyone could make sense of METER_xxx without meter.h
Tony: I just wanted to make sense of poolmv2.c
  ptw: quite
DRJ: well, I just guessed.  a bit hazardous.
PTW: But as noted, it was a major defect that design.mps.meter did not exist
GavinM: Hmm.
PTW: Did we note that?
GavinM: design.mps.meter would have been a lot better.
  design.mps.meter NM Should exist.
  We have now.
PTW: nM/nI: create design.mps.meter



Number of major issues: 10
Number of minor issues: 25
Number of issues: 72


Edit notes:

1. Fix:

/* design.mps.poolmv2:impl.c.parameter.avail-limit */


2. Fix:

Use STATISTIC instead of explicit #ifdef on heat in meter.h

3. Fixed.

4. Fix:

Create ResPARAM.  Use it.

5. Fix:

Removed

