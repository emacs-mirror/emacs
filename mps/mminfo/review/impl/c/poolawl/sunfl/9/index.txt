                 REVIEW OF IMPL.C.POOLAWL.SUNFLOWER(9)
                     review.impl.c.poolawl.sunfl.9
                           incomplete review
                           gavinm 1997-08-06

Rules: rule.impl
Source: analysis.mps.poolawl, design.mps.poolawl, mail.drj.1997-03-11.12-05

Author: drj
Leader: gavinm
Editor: drj
Scribe: gavinm

Entry: entry.universal, entry.impl
Entry manpower: .5


Entry notes:

Entry is cursory in this special case because we are re-reviewing from review.impl.c.poolawl.11 to ensure adequate coverage, and also to verify release branch changes.

entry.universal.author: DRJ is on holiday, and has already approved the previous review.
entry.universal.brief-check: 16 major defects found in 11 pages

I am disinclined to review this document because of the number of major defects found, and also because of the outstanding review, but will allow the review to proceed because it is important to find defects in this code, and because the preceding review did not find any of the problems encountered so far.  GavinM 1997-08-06


Loggingstart: 16:15 BST (11:10 EDT)
Loggingend: 15:45
Logginglength: 30
Loggingrate: 2.3

Checkers: 
Richard: Backwards;Convention
NickB: Source (design.mps.poolawl);Correctness
Pekka: Backwards;Source (analysis.mps.poolawl) 
PTW: Backwards;Source (mail.drj.1997-03-11.12-05)
GavinM: Clarity;Consistency

Rate: 10
Length: 718
Actual checking time: 296

Kickoff start: 1997-08-06 14:55 BST (09:30 EDT)
Kickoff end: 14:59
Kickoff length: 4

Kickoff notes: I am only allowing 60 minutes for checking, to ensure coverage.  Get done what 
you can.
Richard may be interrupted by Tony.
Logging will be on IRC.
Purpose.


ISSUES:

NickB: 60 minutes, 360 lines, 1M, 7m, 4q
GavinM: 65 minutes  2M 11m 6q 2I  got to line 381 forwards
Richard: 60 minutes.  2M, 13m, 4C, I reached line 569, then skipped a bit, 
because I wanted to check something else.
PTW: 51 minutes, M: 1, m: 2, C: 0, q: 3, I: 0 line 418 backwards
Pekka: 60 min, 1 M, 6 m, 1C, got to 508

1. NickB 235 M should zap awl->sig
2. Richard 695-704 M Format not checked
3. Richard 363-381 M What does AWLGrey to buffered segments?  It causes them to 
allocate grey.  I'm surethis is dodgy.
4. Pekka 615 M This check could be much tighter, and should probably be on the 
result of skip, not j.
5. PTW 549 M  Musn't this be conditional on the containing object being weak?
6. GavinM 67,99,239,363,- M function parameters not checked
7. GavinM - M space->allocTime only seems to be updated in impl.c.amc.  Can 
this be right?

8. Richard general  m  convention  No section comments on functions explaining 
what they do or pointing to design.
9. Richard C  Stronger checks would be nice.
10. Richard 714  m  consistency  But you do on the next line!
11. Richard 662-686  m  convention  No short comments explaining members.
12. Richard 658  C  This is almost certainly too frequent for Dylan.  
Parameterize it, at least.
13. Richard 643  m  tag  This comment should be tagged.
14. Richard 639  m  tag  Should refer to comment on line 643.
15. Richard 578  m  convention  So?  We haven't changed the convention of 
checking parameters, AFAIK.
16. Richard 597,610  m  clarity  Avoid "continue".
17. Richard 602,606,607 C Lift out buffer scan limit to avoid calls.  Buffer 
limit also.
18. Richard 569-626 m clarity Use of both i and p as iterators is unclear.  Use 
just p and provide IsMarked(p) etc.
19. Richard 575-613 m convention Don't use i and j.  Give these meaningful 
names.
20. Richard 613 m clarity Why?  Is it important?
21. Richard 624 m clarity Why?  Is it important?
22. Richard 569-626 m conventions Unclear.  Not enough commentary justifying 
the code.
23. Richard - C This pool has caused us more time wasted than almost anything 
else we've ever written.
24. NickB 67 m doesn't AVERT group
25. NickB 73,117,131 m could do with some more blank lines here for clarity
26. NickB 70,100,194 etc q shouldn't we check the pool class before doing 
PoolPoolAWL?
27. NickB 96 m doesn't AVERT buffer
28. NickB 158,269 q why aren't base and limit passed as indices?
29. NickB 183,290 m how come the alloc bits aren't set in AWLGroupAlloc?
30. NickB 193 m needs comment like the one at 217
31. NickB: 222ff q why not RING_FOR
32. NickB: 249 m the other return parameters not checked
33. NickB: 321 q how come BufferGetInit is named inconsistently with the other 
buffer macros?
34. NickB: 365 m typo
35. Pekka 548 m clarity: weak case mixed with the others
36. Pekka 582 m clarity: this could be abstracted into SegGroup(seg)
37. Pekka 591 m clarity: no strategy comment
38. Pekka 595 C bad formatting: no empty line
39. Pekka 599 m clarity: addr->index mapping could be abstracted
  Richard: Strongly agree.
  NickB: 599 also strongly agree, in fact this came up before as an issue, and 
it is one of mine
40. Pekka 600, 601 C SegBuffer accessed each time around the loop
  Richard: It needs to be.  It might change.
41. Pekka 643 m benefit based on some pool-specific count would be better
42. Pekka 711-713 m could verify consistency of mark, scan vs. alloc
43. GavinM 595 NI Surely BT should support this sort of functionaility?
  PTW: As in FindNextSet?
44. Pekka I We should look at test material as well when reviewing
    white box tests can be very effective if matched to the structure of the 
code,
  Richard: We should do more coverage testing.  We used to used Visual C to get 
line coverage.  It was quite effective.
  Pekka: That's good, but tests are code and shoudl satisfy some standards
45. PTW 479 q  What are the permitted values of dependent?
46. PTW 658 q  What is the scale of benefit?
47. PTW 451,600 m  inconsistent
48. PTW 451,600 m  inefficient to check buffering each time around
49. PTW 551-553 q  The logic of this escapes me.
  Richard: 551-553 is a patch that David applied.  It's not my favoured 
solution, which I covered in mail.  It should have a comment pointing to the 
change, anyway.
50. GavinM 17 q What is our policy on internal and external headers for pool 
classes
51. GavinM 53,56 m Inconsistent naming
52. GavinM 74 I BT's non-encapsulation leads to other modularity breaches
53. GavinM 79,design.mps.sig I Should justify why we invalidate signatures last.
  Richard: Should invalidate signatures _first_!
  GavinM: We don't tend to.
  Richard: Well, I do.
54. GavinM 91,178,369 m Clarity: Is "bits" the number of grains in the table?  
Why not call it grains or tableGrains?
55. GavinM " q Is it worth storing this size?
56. GavinM 93 m Table size is Size.  Are the tables managed or unmanaged?
57. GavinM 109 m Inconsistent error case handling
58. GavinM 109 q Does this style influence which case the compiler will 
optimise?
59. GavinM 145,147,151 m Clarity: Bad names
60. GavinM 179 m Clarity: Is this number of grains to be allocated?
61. GavinM 194 m Clarity: Should justify not checking pool
  Richard: 194 Can check pool, in fact.
  GavinM: We have some unwritten policy that the pool will check itself in some 
cases when called class-spoecific methods.
    I think.
    Maybe.
62. GavinM 201 q Is alignShift a common requirement in pool classes?  Could it 
be in the pool?
63. GavinM 267-269 m Consistency: Inconsistent conjunction
64. GavinM 270 m Convention: Tab character?
  Pekka: also 549, 551
65. GavinM 293 q Should we be using Darwin documents, especially changes, as 
documentation?
  Richard: When we're patching it's essential.
66. GavinM 336,347 m Consistency: Either this test is redundant or the comment 
is wrong.
67. NickB: general IN: would greatly benefit from having a generic mark/sweep 
pool which h as passed review.
  Richard: and works.
  NickB: Some of the problems with AWL are problems with writing a mark/sweep 
pool in our framework.
    Some of them are problems with the tricky client requirements.
    And some of them are problems with the way this particular implementation 
fits together.
    Having a canonical mark/sweep pool would separate these.
  Richard: Other mark/sweep implementations should share code with it, too.
    Just as other copying pools should share code with AMC.



Brainstorm start: 15:57
Brainstorm end: 16:54
Brainstorm length: 57


BRAINSTORM:

[ Freely reformatted, trimmed, and reordered.  GavinM 1997-08-06 ]

> This pool has caused us more time wasted than almost anything else we've ever 
written.
PTW: You said this code sucked (in so many words)
  Clearly it is due to lack of time
  Is the lack of time due to spending too much time developing process?
Richard: I don't wish to malign the author while he's not here.
PTW: No malignancy intended.  This pool has many authors, AFAIK
Richard: It's true that this has to be one of the most defective things we've 
released.  It's certainly blown our reputation for robustness withthe Dylan 
group.
Pekka: Review is supposed to find major defects before they get delivered, ergo,
Richard: Not really.  David wrote it.  I've patched it a bit, but hardly 
touched it.
Pekka: this review was far too late
PTW: I believe all deficiency can be laid at the foot of time pressure.
Richard: Well, for one thing this code was delivered before it was reviewed.
GavinM: Was the previous review too late?
NickB: I think it is a lot harder to write pool classes than it ought to be.
Pekka: But how to manage the time so that reviews get done
PTW: What caused that and how can it be prevented in the future?
Richard: The Dylan guys were screaming for weak table support.  We complied.  
We all suffered.
Pekka: Was it in the original reqs?
PTW: But we knew this was needed, for a long time.  Did we get the priority 
wrong?
Richard: In fact, the requirement changed quite late on.  They wanted 
mini-finalization.
  We didn't anticipate that.
PTW: We _did_ at least review the design of the pool.
GavinM: We did?
PTW: Hm.  Perhaps only an RFC was done?
GavinM: Arguably then, Richard bowed to external pressure and produced an 
unrealistic schedule?
Richard: That might be so, yes.
NickB: None of us (ptw excepted?) have used weak tables (in this sense) and so 
misunderstood their requirement
PTW: I don't think the difficulties lie with the mini-finalization, though, do 
they?
Richard: Though the problems have not been with the finalization, the need for 
that did cause us to write a new pool.  This caused David to write a 
mark-and-sweep pool.
Richard: I think that David's decision, documented in the design, that mark and 
sweep would be easier, was just plain wrong, given that the system has been 
successfully running with copying and never with M&S.
  Before the requirement, we just had AMC allocate weak objects, which was much 
easier.
NickB: I have been surprised at how hard it is to do M&S in our framework.
PTW: Hm.  How did we let the M&S decision by then?
NickB: : LO was already M&S, of course, or at least M.
Richard: LO has never been used.
  AFAIK
  It is probably just as defective.
NickB: The difficulty is with scanning a non-moving pool.
  (AIUI, this is where most of the problems have arisen)
  disagree.
  (mildly)
  I think LO will avoid most of the defects we've found in AWL, because it is 
not scanned.
Richard: How do you know?  On what basis is your opinion formed?
NickB: It'll still suffer from some, of course.
Richard: I see.
NickB: My impression is that a sizable proportion of the serious bugs in AWL 
have been to do with scanning, summaries, &c, none of which apply to LO.
Richard: They have also been to do with buffered allocation and the consistency 
of that with bit tables, but yes, mostly in scanning.  LO had similar problems 
in reclaim which had never been hit.

GavinM: I'm beginning to think that the pool model has drawbacks in terms of:
  reliability; maintainability; ease of implementation/
Pekka: can you be more specific
GavinM: We ought to have a hard look at the cost inherent in increasing the 
number of pool classes.
PTW: It does not surprise me that it is hard to introduce new pool classes.  We 
intended to evolve the framework to fit.
  Yes, I think we don't have a general _scanning_ framework
Richard: It does not surprise me that new _sorts_ of pool classes are difficult.
PTW: What's the difference between a "sort" and a "class"?
Richard: I would like to talk to you about that.  Maybe later.
NickB: "sort": M&S, copying, replicating, distributed, ...
Pekka; Without inheritance "sort" and "class" aren't reflected in the strcture 
of the code
PTW: Are these not classes?
Richard: "scanning framework"
GavinM: As the number of pool classes grows, we get more duplicated code, more 
inconsistency, and arguably more bugs.
Richard: There is certainly not enough shared between pool classes.  This is 
something that we need to sort out.
  Currently we have some support structure: rings, BTs, segments, etc. but not 
enough.
GavinM: Perhaps that would be a good focus for a design brainstorm.
Pekka: I think we should take a good look at our class mechanism, and design 
something that matches our requirements that migh well be C++ or a 
reimplementation of a subset thereof.
Richard: Yesterday I spent some time thinking about a generalized first-fit 
free list thing, which could be useful.
NickB: I think we've got into a state where we don't have enough time to do 
generic things.
  (e.g. reconstruct the pool class contract)
PTW: I think we knew it would be non-trivial to introduce any pool unlike AMC.  
I think we didn't provide for that.  We probably should have done some other 
pool "sort"s _on_spec_ (as they say).
Richard: Agree.  We should have an example mark-and-sweep pool.
GavinM: I sometimes wonder what our customers are going to think of our ad hoc 
hotchpotch of pool classes.
  BTW, somewhere there's a list of pool classes we think we should have in the 
product.
NickB: product customers aren't going to be interested in AWL, of course.
  because it has dylan format embedded in the design and code.
Richard: Unnecessarily, but that's already been covered in a previous review.
NickB: Right.
  What can we provide product customers which will let them do weak tables?
Richard: Re "we don't do generic things": I used to sit back and think these 
through.  Recently I've not been holding the conceptual integrity together.  It 
is all part of the management/technicial crisis.
GavinM: It's a pity we can't select pool classes by attribute.
Richard: See ptw's mail passim on the subject of a Dylan interface.
NickB: Is AMC our canonical copying pool?
PTW: So, AWL done right [where mini-finalize is abstracted into format], could 
be of use to product customers.
Richard: I think it might be useful, yes.
NickB: Yes, I suppose. I think it's quite hard to do right (the protection 
tweaking would need to be exposed to the format somehow)
Richard: Not so, but never mind.
Pekka: Selecting by attribute could be possible in a multiple-inheritance 
language, but there are efficiency and testing problems
NickB: re "management/technical" agree.
Richard: If and when we get a new manager, I feel I have a lot of consolidation 
to do.  Tidying up, documenting, etc.  I intend to get a manager who recognizes 
this.
PTW: .soln: Dylan and upper mgmt should be made aware of the cost of the crisis
GavinM: The selection could still end up with what we think of as a pool class, 
but they could have switchable behaviour, share code, and meet attribute 
requirements more efficiently in future releases.
NickB: Tucker's right.
PTW: .soln: Dylan and upper mgmt should be made aware of the cost of the crisis
  [Just to reenforce the need for a resolution]
Richard: Oh, yes.  Well I've been pretty clear with them.
Richard: They just look at me in a worried way and ask what I want them to do.
PTW: Nifty
Richard: Because, you see, they are no more competent than I.
  (At least, that is my impression.)
NickB: "If MM doesn't get a decent group manager, the Dylan and EP2000 products 
will fail"
Richard: Is this channel logged?
  Anyway, we are on the route to recovery.  There are some candidates.  We are 
still in crisis, but I believe the end is in sight.
GavinM: I'll sumarise: Get a Group Manager; Have Richard spend time on 
genericity; make promises more carefully; review before release; beware of new 
pool classes.


> 5. PTW 549 M  Musn't this be conditional on the containing object being weak?
NickB: Isn't that covered by ss->rank being weak?
PTW: Apparently the issue here is I have no idea how this pool really works!
Pekka: And there's no doc on scanning
Richard: The Fix method is called when a reference is found to objects in 
_this_ pool, from anywhere else.  This is true for all such Fix methods.  The 
Tracer arranges that the scan state rank is correct for the object that is 
being scanned, wherever that is.
GavinM: Cool.
  A comment to that effect would not be amiss.
PTW: How?
Richard: It knows the rank of all things.
  So, when scanning a segment from another pool, is uses the rank of that 
segment.
  The rank is set by the pool when it creates the segment, so it's under the 
control of the pool that owns the segment.
  The AWL pool creates segments with both RankWEAK and RankEXACT.  AMC with 
RankEXACT.
  The Tracer doesn't currently copy with segments of RankAMBIG, because there 
may be roots of RankEXACT.
PTW: And we are careful not to allocate weak objects in the wrong segment?  
This was a bug found in the previous review, in a place I didn't get to review 
this time.
Richard: Patched.  See line 268
  In fact, segments have a rank _set_, so in future we might be able to cope 
with segments with objects of mixed rank, weak slots, etc.  Then segments will 
need to have multiple shades of grey.  I don't with to do this unless we have 
to.
PTW: I'm still confused.
Richard: Fix is called for inbound references.  Scan finds outbound ones.
  Therefore Fix doesn't care if the object being fixed is weak or not.
Pekka: So am I, Is that zeroing on line 549 where the weak reference disappears
Richard: Any weak reference anywhere is zeroed (by convention) when it is 
splatted.  All fix methods do this.  The fact that this is a pool that has weak 
objects in it is irrelevant.
  What matters is whether the reference being fixed is weak, and that is 
elsewhere.
GavinM: Maybe it's about time design.mps.fix was completed.
PTW: So, the nulling bit would need to appear in _every_ pool fix?
PTW: modularity: that weakness must be implemented by every pool
Richard: Erm, in some sense.
  The interface between scan and fix is what makes collection between pools 
work.  It's magic.  It's secret.  It's wonderful.
PTW: It's annoying
Richard: Separating "is old" and "snap out" might make it tidier.  I'm in 
favour of investigating that.
  My only concern is the critical path in that case contains two calls through 
function pointers.  It's in my "Important" mailbox.


> 3. Richard 363-381 M What does AWLGrey to buffered segments?  It causes them 
to allocate grey.  I'm surethis is dodgy.
Richard: I think this third issue is to do with the fact that the invariants on 
the bits in these bit tables haven't been worked out, and aren't checked.
  The relationship between them, the state of objects, the state of the 
segment, and the state of the buffer needs to be examined closely.
PTW: Nor the invariants on Buffers?
Richard: I believe the invariants on buffers for the read-barrier collector are 
OK.  Where it gets complicated is when we introduce the "late flip".  That's 
when we get that amazing diagram.
NickB: You mean, when we allow the mutator to run before the flip.
Richard: Precisely.
PTW: I believe that amazing diagram is still in my "Needs Reply" inbox
Richard: I am very confident about the buffer implementation as far as it goes 
at the moment.
PTW: Wait a minute.  The mutator is _always_ running before the flip?
Richard: Always?
NickB: No, the mutator current does not run between start and flip.
Richard: At the moment it doesn't run between condemn and flip at all.
PTW: Well, define "before the flip"
Richard: before = between start and flip
NickB: (only after flip)
Richard: i.e. write-barrier incremental update collection
  (when the mutator is "grey" not "black")
PTW: Ah.  so before the flip does not include before the start...
Richard: No.  Sorry.
  To avoid this question, document the scan/fix design.


GavinM: Um, does anyone have any comments about today's review?
  I think the issue selection in brainstorm worked well.
  I think that IRC is still causing more duplicate issues.
  Any process suggestions?
Richard: Document anything that gets asked more than once.
  Need process for keeping documents up to date.  We are sorely lacking in this 
area.
  They won't do it by themselves.
  Assume we're all very lazy about doing it.
Pekka: If we start changing the docs a lot, they need to get rereviewed
GavinM: There are any number of ways of identifying documents that are likely 
to be out of date.
PTW: Need process to ensure people are up to date
Pekka: (assuming they have been, in the first place)
GavinM: Resolving this is a scheduling problem.
PTW: Review is a mechanism for ensuring people are up to date
Pekka: not really, although it does have that effect
PTW: right.

NickB: Ahem: "Don't attempt to write a pool class until the pool class contract 
is completely documented"
GavinM: ... but how many of these defects arose from that?
Richard: I think process which says "don't do this unless this other thing 
which has no process has been done" is useless.
  It's easy to say "don't write undocumented code" but it says nothing about 
documentation.
  Saying "just write the doc" isn't helpful.
  We need positive measures, not negative ones.
GavinM: Can we drive all design writing from implentation writing?
PTW: Oral tradition can be a substitute
Pekka: A poor one
PTW: But better than nothing
Richard: It's essentially what we have.  Everyone asks me.
  We need to get from here to somewhere else.
PTW: Er, no.  I meant, you must _tell_.
[ Everyone laughs ]
  And tell often.
Richard: Some sort of structure for telling?
  Let's not pretend we have docs, and arrange to meet to do show and tell?
  Maybe we've been in denial.
Pekka: If a decent document is created i the beginning, then it's not that hard 
to keep it up to date.
Richard: I'm not so sure.
PTW: Group meetings (i.e., when we are all in one place) should have some time 
devoted to "lectures"
GavinM: Maybe Richard should answer all technical questions by email.
PTW: If no document is created in the beginning, it is very hard to keep it up 
to date.
GavinM: In fact, it's not actually necessary for the person who knows something 
to write and maintain the polished documentation for it.
Richard: I would love to explain it to someone else who would write it down.
Pekka: email is better than just verablly, but I'm not sure we should invent 
ways of not writing doc
GavinM: Richard, this can be done.
Pekka: Well, I don't mind writig things down
Richard: I don't mind doing it, but I'm usually under pressure to "get it done" 
and talking is much quicker.
GavinM: We could arrange a weekly Richard-dump.
Richard: I like to write.
PTW: It was very enlightening to have DRJ blather for 2 hours when he was here 
about his view of how this all works.
GavinM: What happened to your tape recorder?
Richard: No time to transcribe tapes!
GavinM: Richard, then delegate.  I said before that transcription was a poor 
use of your time.
GavinM: Surely we have audio typists?
Pekka: At least we could keep the incomplete/draft/accepted status up to date, 
i.e. meaningfu
Richard: We should not discourage doc, but we should also not pretend we have 
it when we don't.  It's another case of trying to go too far with our process, 
I suspect.
Pekka: I guess adding references to email in the docs would help finding info.
PTW: I like to watch
Richard: "Being There"?
PTW: Yes
GavinM: I have a scheme for keeping the status up to date 
(design,infosys.expiry), but haven't solved the problem of how to fix all the 
dead documents.
Richard: _Someone_ has to maintain the documentation as a coherent whole.
  It's too bitty at the moment.
Pekka: There's still the problem whether it's all still current info.
GavinM: Maybe we need a librarian.
Pekka: very true: more like an editor
Richard: Hmm.  If someone were responsible for getting documentation together, 
keeping an eye on it, ensuring it's up to date, etc. that might help sort 
things out.  That person would know which bits are missing, for example.
GavinM: Does anyone else think we need an editor?
PTW: #t
GavinM: It's just that I know where there's one going ...
Richard: I spurt out facts here and there, often in mail, but they don't form 
documents.
  Tucker, we must arrange a trip for you to come here soon.
PTW: What of OOPSLA?
Richard: *sigh* Yet another thing in my "Urgent" box.
GavinM: Part of my design is that every document is someone's responsibility.
PTW: I considered coming when you get back from holiday, but that is also the 
week before OOPSLA
  I will deal with this before the end of the week.
Richard: Someone should go.  I will sanction it.  Chris Cox is on holiday.
PTW: Ok

Pekka: That's good if it implies they will expend some effort on the doc as well
GavinM: That's the problem.
  There's alsways something more urgent.
Richard: It's better now that Tony has found their bug that they suspected us 
of.
PTW: What was the bug?
Pekka: Not really, if they allow themselves to be interrupted to answer 
questions about it
Richard: This is a problem with trust.  AWL has broken their trust, so they 
blame the MM, and I get pulled in, even when it's their bug.
  ptw: Something in streams, Tony suspects.
PTW: Trust:  does anyone ever _really_ trust the GC?
Richard: Only if they write it.
Pekka: I trust the LW GC
Richard: Cool.
Pekka: (modulo some points about the small object buffer)


GavinM: How about everyone summarises some actions?
Richard: 1. Deal with OOPSLA issue.
  2. Discuss "editor" with Gavin and group.
  3. Arrange "show and tell" meetings
  4. Arrange ptw's trip here
PTW: 5. Reenforce urgency of MM Manager



Number of major issues: 7
Number of minor issues: 37
Number of issues: 67

Exit: exit.universal
