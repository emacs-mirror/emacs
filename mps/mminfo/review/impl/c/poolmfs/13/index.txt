                      REVIEW OF IMPL.C.POOLMFS(13)
                        review.impl.c.poolmfs.13
                           incomplete review
                           gavinm 1996-09-17

Rules: rule.universal, rule.impl
Checklists: check.impl.*, check.universal.cons
Source: impl.h.mpmst(9), design.mps.class-interface(1;incomplete), impl.h.poolmfs(4)
Candidate status: draft

Author: drj
Leader: gavinm
Editor: nickb
Scribe: gavinm

Entry: entry.universal, entry.impl
Entry manpower: 0.5


Entry notes:

impl.c.poolmfs(12) polished for review by DRJ; defect in impl.h.mpmst(8) fixed in process.
entry.universal.source-available: design.mps.poolmfs is empty
entry.universal.source-approved: impl.h.mpmst(9) is in edit; design.mps.class-interface(1) is incomplete; impl.h.poolmfs(4) is in simultaneous review


Loggingstart: 15:16
Loggingend: 15:39

Rate: 10 lines/minute
Length: 317

Kickoff start: 1996-09-17 14:00 BST Byre, Longstanton (see review.project.epcore.1)


ISSUES:

DRJ: 4m 1M
NickB: 1M 9m 2q
PTW: 4M 7m 2q
GavinM: 1M 17m 4I 2q

DRJ:
1. 98 M Inconsistent with check on 306

NickB:
2. 229 M No check that old belongs to pool

PTW:
3. 20-23 M Statement unclear
4. 27-28,30-31 M Adapt.limit
5. 185-196 M No purpose in SUB define
6. 228 M Should there be a check for a double free?

GavinM:
7. 85 M Should be AVERT on pool

DRJ:
8. 90,91 m Should be linked to doc of restrictions
9. 124 m The use of NULL is not consistent with 105 & 313
10. 163 m Init is not justified
11. 303 m extendBy not checked against unroundedUnitSize

NickB:
12. 8 m readership?
13. 8 m pointer to design
14. 8 m misplaced design
15. 41-46 m Unused
16. 104,105 q Why this distinction between NULL and 0?
17. 160 m Should i have type Index
18. 160 q What is the correct type for unitesPerSeg
19. 206 m Should AVER that this value is null or belongs to pool
20. 309-312 What about the other headers on the freeList
21. 313-315 What about the other segs on the seglist?

PTW:
22. 66 m What is the purpose of this comment?
23. 62-64 q Is the const attribute propagated such that it can't be danced on?
24. 91 q Should extendBy be an even (whole) multiple of unitSize?
25. 125 m Don't know where this is going
26. 249 m Could there be some attempt to say what you're describing?
27. 259 m Could describe give some statistics about percentage in use, etc?

GavinM: I had trouble finishing this document
28. 20 q Is this checked?
29. 48 m PoolPoolMFS breaks macro naming convention
30. 48 m having this macro is less simple for no real benefit
31. 60 m UNIT_MIN breaks macro naming convention
32. 66 m implicit cast from size_t to Size
33. 72 m redundant parentheses
34. 79 m should this be MFSInitV? (no)
35. 79 m shoudl arg be args?
36. 79 I design document initial state of Inited pool
37. 98 I ARCH_ALIGN breaks macro naming convention
38. 104 m no cast of NULL
39. 114 I Finished value should be in design document
40. 185 m comment required
41. 185 m SUB breaks macro naming convention
42. 191 m this AVER is dangerous, because it might not catch problems.
43. 55 q could we have a signature in HeaderStructs?
44. 247 I could we have a check function for mps_lib_FILEs?
45. 255 m for "begin" read "begins"
46. 257-259 m simple.  this could be return res

NickB:
47. 171 mN .seg.chain belongs in design



Brainstorm start: 16:09
Brainstorm end: 16:24


BRAINSTORM:

1. Lack of design.  Alignment issue is fudged throughaout MPS.  Need 
design.mps.align.  rushed -> Oversight.  Start off with prototype; didn't 
continue round loop.

2. Design of pools in general isn't documented.  Check is in pool.c.  

4. Hacky prototype.  Not necessarily a bad thing.  Need requirements on MFS.

6. Checking a double free would be hard.  Don't check integer multiple.  
Prototype.  Still part of code used by client.  Should have design for checks.


Exit: exit.universal
