                        RAMSTREAM/PIANOKEY VIEW
                     design.product.tool.pianoview
                           incomplete design
                            sheep 1997-06-11


INTRODUCTION:

This document is intended as a way of thinking about possible ways that the 
tool might present information. The drawings are intended to be indicative of 
how the view might look in a window. Feel free to add your ideas or suggestions


OVERVIEW:

In essence the vertical axis represents the memory location. The horizontal 
axis represents Time. Each allocation is represented as a horizontal bar. The 
height of the bar represents the amount of memory allocated to the 'object'. 
The length of the bar represents the longitivity of the object. 

The vertical access could be divide by horizontal lines which should mark out 
the page boundaries. If possible the pages should be toned/coloured by white 
(ram resistant page), grey (swapped out page). This would aide with views when 
toolusers are trying to locate causes of swapping such as the Watson group().

.interaction. 

Clicking on the bar should display more detailed information about the 
allocation point.

Double clicking on the point should open the allocation point from the source 
code.

Option or Right mouse clicking may present a menu allowing the tool user too. 
Jump to the definition of an object (look at the .h file for example). Send a 
message too the MPS system to give a full dump of that object in the depth 
layout view . Alternatively more information could be extracted from the 
object, for example an in detail view showing every field and every value of 
every field. I expect this would require the type and type-field information of 
that object. 

A horizontal scroll bar, possibly similar to the quicktime control, would 
permit the tool user to look back in time to previous events. Time could also 
be 'zoomed' so the view would permit a longer or shorter time period to be 
viewed. 

The vertical axis (memory location ) should be zoomable as well, this intern 
would require a vertical axis scroll bar when necessary. 

Problems.

Zoomed out to see all of allocated memory we need loos a big about of detail, 
might also take a long time to scan though memory.

.options.

Colour objects are coloured in number of ways. 

1. By tooluser selected colours. There are 7 or 8 of these prefixed colours. 
More complex colour allocations would make it very hard to read - the legend 
would be too complex. If the tooluser has more than 8 things on the go at one 
point then they are trying to track too much. 

2. By allocation point. Each allocation point is assigned it's own colour. The 
colour of each block then represents the line in the source file which 
represents the allocation. For example if you see a large number of blocks 
allocated then you will know that they are all allocated at the same point in 
the sourcecode.

3. By Type.  Each object is assigned a colour based on it's type. Again there 
is no direct association between colour and type, this view is primarily there 
to produce an over view of the whole process. If a number of objects are the 
same colour then they will be allocated from the same class/type but in 
different locations.

4. By access. If it is possible to check how often an object has been accessed 
then the colour in this view would be a spectrum from red  (recently accessed ) 
to blue (most unaccessed). Every time the object is 'read' then this would 
change the colour of the block to blue. This helps respond to the Dylan  
problem of hanging on to unnecessary and unused links.

5.  By modification. IF it is possible to check how often an object has been 
access then the colour in this view would be a spectrum  from red (most 
recently accessed) to blue (least recently access). Every time an object 
changes it state then this would change the colour to red. This might help when 
looking at over allocation of objects.  I suggest that it might beneficial to 
have a special colour (black ?) to *inicate* an object that has never been 
written too. This would indicate an object which has been allocated but as yet 
has not been written too. All black bars would represent unused objects.






TESTING:

One way of testing these diagrams is to ask your self if the function of the 
chart was immediately obvious after looking at the diagram ? Could you think of 
a use for the view might you find this view useful. If you think of ways of 
improving the chart and adding more elements too it them again it might be more 
useful than one you cannot think of adding to


TEXT:

items *likethis* are mis spelt


ATTACHMENT:

   "RAMSTR~1.VSD"


