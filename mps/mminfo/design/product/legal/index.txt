                DESIGN FOR ENFORCING LEGAL  REQUIREMENTS
                          design.product.legal
                           incomplete design
                            nick 1997-05-30


INTRODUCTION:

This proposed licensing strategy concerns the external AMM Product. It was 
notified to management and legal in mail from nick on 1997-05-14 , and further 
discussed in meeting.spman.1997-05-29(0) .

The quartet would still appreciate comments on the strategy from business, 
legal and technical perspectives, so that it can be implemented (and proved) in 
early versions of the product.



OVERVIEW:

The product's requirements include an immediate "return on investment": a 
novice user of AMM must be able to discern a clear advantage to using this 
software, after less than half-a-day's trial use. This requirement will be met 
by structuring the product into a series of levels of complexity. Both the 
runtime libraries and analysis tools will operate on the same set of levels in 
parallel. The simplest (or "dropin") level will serve as the evaluation arena 
for both libraries and tools.

The  licensing strategy must cooperate with the evaluation scenario (not 
prevent successful evaluations) but still protect the product from unauthorised 
use.


REQUIREMENTS:

.req: See req.product.attr.mkt.lic.* () for requirement at product level. From 
this are derived the following design requirements on this design.

.req.royalty: No runtime royalty on libraries.

.req.analysis: Analysis tools to be licensed, similar to other Hqn development 
products. 

.req.eval: Evaluators should get far enough to appreciate the product without 
gaining commercial advantage before they've purchased.



IDEAS:

.sol.audit: - user is given activation key, which is buried in libraries and 
leaves us an audit trail. We can let the fact of this be known - it may be 
enough to scare off unauthorised redistribution.

.sol.restrict: the activation key for evaluators permits use only of the dropin 
libraries and some subset (see .sol.restrict.subset) of the analysis tools, and 
nothing more sophisticated

.sol.restrict.subset: Original suggestion (mail of 1997-05-14 , derived from 
meeting.product.1997-05-07(0)) was to make this subset be that part of the 
overall functionality which corresponds to the dropin libraries. However, 
George suggests (in meeting.spman.1997-05-29(0)) that more should be visible, 
so as to entice the evaluator to want to use it and hence purchase.

.sol.nagware: activation key for evaluation is different. In "evaluation" mode, 
every invocation of user's end product (their application) starts with a large 
splash screen which (i) announces Harlequin and (ii) warns about legal 
consequences of redistributing evaluation software. This leaves MM-driven 
application fully functional (for evaluation purposes) but not commercially 
redistributable.  Alternative to that - user has to type an activation code for 
every run of evaluation software. Requirement is to prevent commercial  
distribution.



TESTING:

.test.times: Licensing is like a time lock. How long do we intend that the 
above solution will keep a determined hacker away from our goods? 

.test.naive: It can be entertaining to test the security of licensing code by 
handing a product to a naive - but friendly - hacker (ie work here but does not 
know anything about product or its implementation) and ask them to break into 
it. 

