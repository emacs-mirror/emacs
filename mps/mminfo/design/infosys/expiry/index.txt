          DESIGN OF EXPIRY SCHEME FOR SPRING INFOSYS DATABASE
                         design.infosys.expiry
                           incomplete design
                           gavinm 1997-04-03


INTRODUCTION:

request.process.170174.sol.expiry requires a scheme to prevent InfoSys 
documents from becoming out of date by systematic review.


OVERVIEW:

Documents of various types have differing expiry times.  This is currently a 
placeholder for my thoughts on the subject.  GavinM


IMPLEMENTATION:

New Types

.new-type: Three new document types are added:
  .new-type.meeting: Minutes of a meeting;
  .new-type.plan: Project plans;
  .new-type.expiry: Expiry classes (see .expiry).


Expiry Classes

.expiry: Four expiry classes are defined, and each type is assigned to one of 
these classes.  Hence an expiry length can be determined for any document type.
  
.expiry.short: The short expiry is for documents that must have a close eye 
kept on them, and are likely to get out of date quickly.
  .expiry.short.types: Types: proc, guide, process, plan (see .new-type.plan)
  .expiry.short.length: Suggested length: 3 months

.expiry.medium: The medium expiry is for documents that have an average 
rottability and includes most document types.
  .expiry.medium.types: Types: arch, attr, builder, check, design, doc, fun, 
goal, idea, issue, message, obj, os, overview, person, platform, role, rule, 
variety
  .expiry.medium.length: Suggested length: 1 year

.expiry.long: The long expiry is for documents that are simple, fundamental, 
and are highly unlikely to change.  This mainly includes InfoSys keywords.
  .expiry.long.types: Types: bib, expiry (see .new-type.expiry), importance, 
stage, status, type, urgency
  .expiry.long.length: Suggested length: 3 years

.expiry.infinite: The infinite expiry is for documents that represent snapshots 
of events and that therefore cannot change.
  .expiry.infinite.types: Types: impl, mail, meeting (see .new-type.meeting), 
quote, review
  .expiry.infinite.length: Suggested Length: Infinite

.expiry.length: The lengths suggested here are ideals we would work towards.  
For bootstrapping of the system they should be set at a level that represents 
an acceptable workload and brought down.  In fact, their final values could be 
set by acceptable workload, but we have no information on which to base that 
now.  The ratios of 3 or 4 between the lengths should be about right.  Note 
that plans are likely to be quarterly.

.expiry.just: The justification for doing it by expiry classes, rather than by 
an expiry length for each type, is that it will be more convenient to rescale 
the entire system, and also because we are unlikely to want to fine-tune the 
expiry of lots of document types against each other.


Owner

.owner: Each document will have an owner, who is responsible for keeping it up 
to date.

.owner.new: The owner of new documents will be the creator.  

.owner.change: Anyone may change the owner.  It is expected that people will 
not assign others to own documents without commitment.

.owner.old: Old documents will gain an owner by dividing them into projects, 
and assigning default owners for projects.

.owner.role: Perhaps owners should be able to be roles as well.  E.g. 
role.process-engineer could be in charge of the process project.


Procedures

.set: There are a number of possible ways to set the expiry date:

  .set.create: Have the expiry date as a modifiable field which has a default 
set on creation.  This means that particular documents could have specific 
dates set.

  .set.modify: Have the expiry date as a calculated field which is set whenever 
the document is modified.  This means that specific dates cannot be set.  All 
modifications implicitly refine the entire document.  It also means that 
changes to the expiry lengths or expiry classes can be propagated.

  .set.button: Have the expiry date calculated on creation, and whenever a 
magic button (or macro) is pressed (in edit mode).  This means that documents 
can be modified without implicitly claiming the document has no rot.  It would 
be better to store the "RefinementDate" and display the calculated "ExpiryDate" 
so that changes to expiry length or expiry classes could be propagated.  There 
could be another button (or macro) to set the value explicitly; this would 
conflict with propagation.

.expire: When the document passes its expiry date, I suggest that its status be 
set to "expired" (or "obsolete").  We may want to exclude expired documents 
from some views or colour documents in views by status.  We definitely need a 
plan for dealing with expired documents.


