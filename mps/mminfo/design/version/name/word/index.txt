       ANALYSIS AND DESIGN FOR USING WORDS AS NAMES FOR VERSIONS
                        design.version.name.word
                              draft design
                          richardk 1998-03-24


INTRODUCTION:

A string of MM releases is called a version, and the version needs a name.  
This document presents a requirements-analysis, and a design for using 
English-language words as names.  (An alternative would be to use numeric 
names).  [The requirements-analysis could later be moved to its own "req" 
document.  richardk 1998-03-24]


OVERVIEW:

In summary, the design is:
  1) Prepare a series of words which are good names clearly linked by a common 
theme.
  2) To select the next name, skip two or three places down the series from the 
last-selected name.

.overview.example:
  Series:  Aardvark, Ape, Baboon, Chimp, Gnu, Hartebeest, Springbok, Wildebeest.
  Chosen names:  Ape, Chimp, Springbok.

.def:
  .def.name: Thing reserved for designating an MM version.
  .def.word: An English-language word, considered as a candidate name.
  .def.series: An (alphabetically) ordered set of words, linked by a common 
theme.
  .def.theme: The idea that conceptually links the words in a series.



REQUIREMENTS:

.req: We want the names to have certain properties:
  .req.distinctive: Not susceptible to confusion with other words.
  .req.distinctive.search: We want to search text with few spurious hits.
  .req.usable: Reasonably easy to pronounce, spell, etc.
  .req.recall: Reasonably easy to remember, so not too obscure.
  .req.theme: Easy for a human to go from name --> theme, so you can tell 
    which series a name belongs to.
  .req.order: Can tell which of two names comes first.
 (.req.adjacency.not: Names do _not_ indicate adjacency, ie. you cannot 
    tell whether or not there is an intervening name (or several) between 
    two names).
  .req.insert: We may need an interstitial name between two previous names.
    .req.insert.rare: This is rare.

  .req.distinctive.wham: (Preferable) Sufficiently distinctive that when 
    you first hear the name, it is a 'fresh' word, thereby helping you to 
    form a strong association between the name and the thing named.
  .req.theme.link: (Nice) Something (eg. a joke) linking the theme with the 
    application of the series (eg. fish for SW).

.note.tension: There is a tension between 
  - using rare words (.req.distinctive, .req.distinctive.wham), and 
  - using common words (.req.distinctive.search, .req.usable, .req.theme)
Generally, common words are better: even a common word will usually be 
sufficiently distinctive.



IDEAS:

.design: The design is
  1) Prepare a series of words which are good names clearly linked by a 
     common theme.
  2) To select the next name, skip two or three places down the series from 
     the last-selected name.
     (eg. after "Ape" select "Chimp", passing-over "Baboon").

.design.insert: If an insert (.req.insert) is needed, choose one of the
passed-over names (eg. "Baboon").  If none is available, have to resort to
using letter suffixes (eg. "Baboon-B"), or a special case word that isn't
clearly linked to the same theme.  Remember .req.insert.rare.  In an 
emergency, a dictionary lists all the insertable words.  Between "Baboon" 
and "Chimp", "Bagel" would acceptable though not ideal.

.design.one-per-letter.not: Note that there is _not_ one name per alphabet
letter.  Some letters have no names beginning with them; some letters have
several names beginning with them.

.design.secret: The as-yet-unused portion of the series should _not_ be
made public.  This helps prevent unused names being seen, which helps
.req.distinctive.wham and .design.grow (below).

.design.grow: If people think of a new name to add to the series, later
than the latest used name, it can be added without breaking any
requirements.

.design.run-out: If/when the series runs out, invent a new series and start
using it.

.design.length: Aim for about forty (40) words in a series, allowing about 
20 names to be taken from it.  This is clearly just a rule of thumb.



IMPLEMENTATION:

See for example, design.dylan.release.naming.

