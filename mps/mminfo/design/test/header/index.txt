              DESIGN FOR A TEST PROGRAM FILE HEADER FORMAT
                           design.test.header
                           incomplete design
                             rit 1997-05-09


INTRODUCTION:

This document describes the information which can be included in the header of 
a test program file, and its format.


OVERVIEW:

The test header tells the test system how to run the test, and how to tell 
whether it has passed or failed.


REQUIREMENTS:

.req.readable.human: human-readable

.req.readable.machine: machine-readable (with perl)

.req.unobtrusive: can be hidden easily in comments (either bracketing or single 
line style)

.req.robust: not too sensitive to whitespace, formatting &c

.req.separate: it must be clear when the header starts and stops

.req.floating: it must not be required to be at a particular position (e.g. the 
start) of the file

.req.element: must include:
.element.summary: English-language summary of the test
.element.language: what language it's written in (e.g. c)
.element.language.options: language specific options, e.g. files required for 
linking; more generally, how to run the test
.element.platform.options: platform specific options, e.g. only run / don't run 
on particular platforms
.element.specified-output: specification of constraints the output should 
satisfy for the test to have passed
.element.time-out: time-out information?



ARCHITECTURE:

.arch.test.output: The test program will produce output in a "key = value" 
format. The specified output in the test header will consist of constraints 
such as "size_1 > 20". Constraints can be textual or numeric, and the test will 
be deemed to have passed if they are all met. Exception: if the test header 
specifies no constraints, then the test is considered to have passed only if it 
reports "completed = yes".

Example:

/* TEST_HEADER
summary=try lots of allocation to provoke errors
language=c; link=testlib.o
OUTPUT_SPEC
alloc=OK
size1>20
END_HEADER
*/


IDEAS:

.sol.key-value: key-value format (as suggested by gavinm).
.sol.bookends: explicit start and end cues.
.sol.separators: line-break or semicolon separates clauses.
.sol.identifiers.alphanumeric: (a-zA-Z0-9 and _) for identifiers.
.sol.garbage: all non-alphanumeric stuff at start of entries ignored, to allow 
for comment characters.
.sol.relations: output specified using relations such as =, <, >, <=, >=, =~ 
(with regexp string match?)

