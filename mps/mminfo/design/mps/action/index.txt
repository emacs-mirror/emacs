                   THE DESIGN OF THE ACTION PROTOCOL
                           design.mps.action
                             incomplete doc
                           richard 1997-02-10

INTRODUCTION

.intro: This document is the design of the "Action" protocol, by which pools 
communicate possible actions to the MPM's planner.

.readership: This document is intended to be read by MPS developers.

.bg: Options are an implementation of the ideas expressed in 
overview.ideas.adapt, overview.ideas.gen, and overview.ideas.strategy.  They 
are suitable input for the MLWorks strategy, mentioned in 
meeting.general.1997-02-05.


History

.hist.0: Initial draft created by Richard Brooksby <richard> as part of step 1 
of Tracer2 development.  At this stage the document described a minimal Action 
structure and the scope for extension in future.


GOAL

.goal: The purpose of the Action Protocol is to provide a means by which pools 
can communicate the set of possible actions to the MPM's planner.

A garbage collecting pool, for example, can express the set of generations as 
Actions.  These Actions express the possibility of collecting those 
generations.  A compacting pool could express the possible action of performing 
a compaction.


REQUIREMENTS

.req.actions: Actions must express the set of possible actions.

.req.cost: Actions must express the predicted cost of taking the action.

.req.benefit: Actions must express the predicted benefit of taking the action.

.req.rams: Actions must express the ramifications of taking an action, such as 
transient costs and longer term consequences.


DESIGN


Action Structures

Each pool contains a set of zero or more Actions, representing the actions that 
can be taken in that pool.  At any point, the MPM planner can look over the set 
of available Actions and "take" one or more, subject to the constraints they 
express.

The pool instance structure (PoolStruct) has a field which is a ring of 
actions, (actionRing).  This is attached to the poolRing field of zero or more 
Action structures (ActionStruct).  These ActionStructs are created, managed, 
and destroyed by the pool class code.  They are not manipulated by the MPM 
except to take them.

The pool may add add actions to the pool action ring at any time.  This is 
known as "proposing" an action.

The pool may remove action from the pool action ring at any time before they 
are taken by the planner.  This is known as "withdrawing" an action.  Once an 
action has been taken it cannot be withdrawn.

ActionStruct is declared at impl.h.mpmst.actionstruct.

  #define ActionSig  ((Sig)0x519AC20N)

  typedef struct ActionStruct {
    Sig sig;
    RingStruct poolRing;
    ActionVar var;
    union {
      struct {
        /* fields relating to collection action */
      } collect;
      struct {
        /* fields relating to the compaction option */
      } compact;
      struct {
        /* fields relating to the spong action */
      } spong;
      /* add structures for further action variants here */
    } the;
  } ActionStruct;


Action Variants

The variant of an Action is expressed by its "var" field, which has one of the 
values in the ActionVar enumeration (impl.h.mpmtypes.actionvar).

  typedef int ActionVar;

  enum {
    ActionNOOP,     /* no action */
    ActionCOLLECT,  /* collect */
    ActionCOMPACT   /* compact */
  };

For each action variant there may be a structure in the "the" union of the 
ActionStruct which contains additional information about the action's costs, 
benefits, and ramifications.  This information is interpreted by the MPM's 
planner in a variant-dependent way documented in the planner design document 
(design.mps.planner).

Init

[Init to ActionNOOP attached to pool.]

Finish

[Detached from pool.]


