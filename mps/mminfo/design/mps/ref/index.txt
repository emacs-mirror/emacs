                        THE DESIGN OF REFERENCES
                             design.mps.ref
                           incomplete design
                             dsm 1995-10-23


INTRODUCTION:

Not designed yet but, some notes:
/* typedef Addr RefSet; */
/* Replace refsigs like this?
 * extern RefSet RefSetEmpty(void);
 * extern RefSet RefSetAdd(RefSet set, Ref ref);
 * extern RefSet RefSetUnion(RefSet left, RefSet right);
 * extern Bool RefSetIsMember(RefSet set, Ref ref);
 */

dsm 1995-??-??

What is a ref?  A ref is the address of the base of an object.  Representation 
of ref depends on the language of the interface being used (but at the moment 
we only have a C interface).  The design is intended to restrict client's 
choice of representation of references minimally.  The client can encode 
references however they like.  Clients must must decode references into the 
appropriate MPS representation before being passing them across the interface 
and must be encode references from the MPS represention when the MPS returns 
references.  See also design.mps.fix which is one of the key interfaces 
involving references.

drj 1997-07-21

Interior pointers (aka locatives) are entirely the responsibility of the 
client. No explicit support in the MPS is provided for them at the moment.

drj 1997-07-21

Ambiguous references.  An ambiguous reference is only guaranteed to preserve an 
object if it points to the base of object [true? -- drj 1997-07-21].  Client is 
at liberty to encode and decode ambiguous references.  MPS guarantees not to 
change the value of ambiguous references.

drj 1997-07-21




