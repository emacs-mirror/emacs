                 DESIGN OF MPS THREAD MODULE FOR LINUX
                            design.mps.thli
                             incomplete doc
                            tony 2000-01-27

INTRODUCTION

.readership: Any MPS developer.

.intro: This is the design of the thread module for Linux and LinuxThreads.  
Since LinuxThreads is an implementation of Pthreads, the design might also be 
applicable for other platforms supporting POSIX and Pthreads (but we're making 
no strong claim about that now).


DEFINITIONS

.pthreads: The term "Pthreads" means an implementation of the POSIX 
1003.1c-1995 thread standard (or the Single UNIX Specification, Version 2, 
a.k.a. USV2 or UNIX98).

.linuxthreads: LinuxThreads is one of a number of different implementations of 
Pthreads for Linux.  It's the closest the Linux platform currently has to a 
standard threads package. It uses a separate kernel process for each thread.  
Because of this is known to be slightly nonconformant with Pthreads; for 
example signals may be given to inappropriate threads in some circumstances 
(see <URL:http://pauillac.inria.fr/~xleroy/linuxthreads/>).


REQUIREMENTS

.req.thread: Required to implement the general threads interface defined in 
design.mps.thread-manager.  (Actually it isn't defined, but it should be. tony 
2000-01-27)  The interface includes registration & deregistration, suspension & 
resumption of threads, and stack scanning.

.req.platform: Required to use platform-specific interfaces in a "legal" manner.


ANALYSIS

.anal.suspend: Pthreads doesn't include a facility to suspend and resume 
threads.  We can use the MPS PThreads extensions to do this (see 
design.mps.pthreadext).


IMPLEMENTATION

.impl.like-win32: The implementation is very similar to that for Win32 (see 
design.mps.thnt, not that it will tell you much at the moment). 

.impl.thread: ThreadStruct is defined as follows:

typedef struct ThreadStruct {    /* PThreads thread structure */
  Sig sig;                       /* design.mps.sig */
  Serial serial;                 /* from arena->threadSerial */
  Arena arena;                   /* owning arena */
  RingStruct arenaRing;          /* threads attached to arena */
  PThreadextStruct thrextStruct; /* PThreads extension */
  pthread_t id;                  /* Pthread object of thread */
  struct sigcontext *scpSusp;    /* Context if thread is suspended */
} ThreadStruct;

.impl.thread.field.id: The id field contains the Pthread ID for the thread.

.impl.thread.field.thrext: The thrextStruct field contains an embedded 
PThreadext structure (see design.mps.pthreadext).

.impl.thread.field.scp: The scpSusp field contains the context for a thread, if 
it has been successfully suspended.  If an attempt to suspend a thread fails, 
this field is set to NULL (indicating that the thread may be presumed dead).

.impl.thread.suspend: Threads are suspended using PThreadextSuspend (see 
design.mps.pthreadext).  This is when the scpSusp field is updated.  We assume 
that we won't want to scan a thread if PThreadextSuspend failed to suspend it.  
This presumably happened because the thread exited unexpectedly.

.impl.thread.resume: Threads are resumed using PThreadextResume (see 
design.mps.pthreadext).

.impl.thread.scan: The thread scanning function (ThreadScan) uses the scpSusp 
field of the Thread object to determine the context of threads other than the 
current thread.  If a valid (i.e., non-NULL) context is found the value of the 
stack pointer register is accessed from it.  This code is platform-specific.  
If the context is NULL, then we assume we don't need to scan the thread (see 
.impl.thread.suspend).

