                          MISCELLANEOUS MODULE
                            design.mps.misc
                           incomplete design
                             drj 1996-08-30


INTRODUCTION:

This is the design for various miscellaneous components used in the MPS.  
Currently it provides design for code implemented in MMsrc!mpm.c (impl.c.mpm) 
and the header file MMsrc!misc.h (impl.h.misc).


OVERVIEW:

There are various miscellaneous types, operations, and services that we use 
that don't (or that we don't bother to) fit into a nice categorization.  
Various primitive types (Word, Addr, Count, Size, Fun, Shift, Accumulation) are 
provided as well as methods for acting on these.


REQUIREMENTS:

.parent.thread-safe: It is required that the PARENT macro be thread-safe.


ARCHITECTURE:

.accumulator: (see the type design as well: design.mps.type.accumulator)  This 
type implements an abstraction of accumulators.

.accumulator.reset: AccumulatorReset resets an accumulator (so that reading it 
gives 0).  It may take an initialized or unitialized accumulator as an argument.

.accumulator.accumulate: Accumulate adds a number to the accumulator (so that 
reading it gives a value that is bigger by the amount indicated).

.accumulator.read.unsignedlong: AccumulatorToUnsignedLong.  This function is 
unimplemented.  This functions attempts to convert the value stored in the 
accumulator to an unsigned long.  It returns true if the conversion is done; it 
returns false if the value in the accumulator is too large to be stored in an 
unsigned long.

.accumulator.read.double: AccumulatorToDouble.  This function is 
unimplemented.  As AccumulatorToUnsignedLong (.accumulator.read.unsignedlong 
above), but for the type double.

.accumulator.read.not: The functions which read an accumulator value are 
currently unimplemented.  There is no client requirement for any sort of 
interface to these accumulators, they are not used programmatically 
internally.  There are useful for examining under the debugger and probably 
will be used in the future, which is why we currently have them. [drj 
1998-05-08]


IMPLEMENTATION:

.discard: For macro arguments that are not used (because, for example, they are 
only used in some varieties), we provide a macro called DISCARD, which checks 
that the argument is a syntactically valid expression, but generates no code.

.str: For stringizing macro arguments, we provide the usual STR hack.

