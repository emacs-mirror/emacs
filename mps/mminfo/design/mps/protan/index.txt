                ANSI IMPLEMENTATION OF PROTECTION MODULE
                           design.mps.protan
                             incomplete doc
                             drj 1997-03-19

INTRODUCTION

.readership: Any MPS developer

.intro: This is the design for the ANSI implementation of the Protection Module.


REQUIREMENTS

.req.test: This module is required for testing.  Particularly on platforms 
where no real implementation of the protection module exists.

.req.rapid-port: This module is required for rapid porting.  It should enable a 
developer to port a minimally useful configuration of the MPS to new platforms 
very quickly.


OVERVIEW

.overview: Most of the functions in the module do nothing.  The exception is 
ProtSync which traverses over all segments in the arena and simulates an access 
to each segment that has any protection on it.  This means that this module 
depends on certain fields in the segment structure.

.overview.noos: No operating system specific (or even ANSI hosted specific) 
code is in this module.  It can therefore be used on any platform, particularly 
where no real implementation of the module exists.  It satisfies .req.test and 
.req.rapid-port in this way.


FUNCTIONS

.fun.protsetup:

ProtSetup

Does nothing as there is nothing to do (under UNIX we might expect the 
Protection Module to install one or more signal handlers at this pointer, but 
that is not appropropriate for the ANSI implementation).  Of course, we can't 
have an empty function body, so there is a NOOP; here.

.fun.sync:

ProtSync

.fun.sync.what:
ProtSync is called to ensure that the actual protection of each segment (as 
determined by the OS) is in accordance with the segments's pm field.  In the 
ANSI implementation we have no way of changing the protection of a segment, so 
instead we generate faults on all protected segments in the assumption that 
that will remove the protection on segments.

.fun.sync.how:
Continually loops over all the segments until it finds that all segments have 
no protection.  .sync.seg: If it finds a segment that is protected then 
PoolAccess is called on that segment's pool and with that segment.  The call to 
PoolAccess is wrapped with a ShieldEnter and ShieldLeave thereby giving the 
pool the illusion that the fault was generated outside the MM.  This depends on 
being able to determine the protection of a segment (using the pm field), on 
being able to call ShieldEnter and ShieldLeave, and on being able to call 
PoolAccess.

