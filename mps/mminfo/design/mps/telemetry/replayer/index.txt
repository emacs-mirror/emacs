                THE DESIGN OF THE MPS TELEMETRY REPLAYER
                     design.mps.telemetry.replayer
                           incomplete design
                            pekka 1999-07-20

INTRODUCTION

.intro: This documents the design of the allocation replayer for MPS telemetry.

.readership: This document is intended for any MPS developer.


Document History

.hist.0: Wrote first draft.  pekka 1999-07-20



OVERVIEW

.over: The replayer is a tool for replaying an allocation sequence from a 
telemetry log.  We envision two uses for the replayer: Performance trials while 
developing MPS code and permanent realistic tests.


REQUIREMENTS

.req.replay: Replay an allocation sequence recorded in a telemetry log, 
including deallocations, and all other client actions on the MPS.  Only manual 
MM needs to be supported.  Critical.

.req.replay.mod: Replay an allocation sequence recorded in a telemetry log, 
modified in some interesting way.  (It is not possible to completely enumerate 
the interesting modifications.)  Critical.

.req.time: Replay should be several times faster than running a real 
application (such as SW) to reproduce the allocation sequence.  The overhead 
(reading log, keeping accounts) should not be more than 100%.

.req.independence: Take a log of allocation produced with one memory manager 
and replay it using another.  Optional.


ARCHITECTURE


Usage

.build: The replayer is built using the MPS makefiles in the usual way.  There 
are two executables, one for built with SW settings (replaysw), the other with 
Dylan settings (replay).

.use: For performance tests, the mode of use will involve hacking the code of 
the replayer to make it use different pools or settings in order to test them.

.control: Generally, most events are needed to preform a successful replay, 
onlysegment events can be omitted.  Set control to 0x77.

.partial: The log doesn't have to include the whole run, or all the events for 
all the pools, but it should contain info about all the arenas (ArenaCreate* 
and ArenaDestroy) and about all the pools that are to be replayed (PoolInit* 
and PoolDestroy, if any).

.buffered: To get buffered allocation logged, arena->bufferLogging should be 
set to TRUE (1) -- there's no interface for this, use the debugger to 
breakpoint the first BufferCreateV and set it manually (note that this has to 
be done once for each arena in the run).


IMPLEMENTATION

.internal: The tool doesn't want to replay allocations in internal pools, 
naturally.  We have decided to distinguish them by pool class: each class is 
either for internal or for external use (implementations can be shared, where 
necessary). 

.debug: There's no support for replaying debug pools.  I don't think we need 
that, and it's harder to code.  If debug pools are used, they will be replayed 
without fenceposting.


TESTING

.test.first: Replay in ti and compared the two logs.  See  for an example.


NOTES

.request: See request.epcore.160042: ScriptWorks' use of MPS can't be replayed 
for initial implementation.
.usage: See guide.mps.telemetry for detailed instructions for use.

