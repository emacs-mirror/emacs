        THE REQUIREMENTS OF THE MPS ON THE EXECUTION ENVIRONMENT
                          design.mps.exec-env
                           incomplete design
                           richard 1996-08-30

INTRODUCTION

.intro: This document describes how the MPS is designed to work in different 
execution environments (see standard.ansic section 5.1.2).


History

.hist.1: Created by Richard on 1996-08-30 in order to clarify concepts needed 
for design.mps.io(1).


DISCUSSION


The ANSI Standard

.std: These are the relevant statements from standard.ansic, with tags added:

  4 Compliance

  ...

  .std.com.hosted: A "conforming hosted implementation" shall accept any
  strictly conforming program.  .std.com.free: A "conforming freestanding
  implementation" shall accept any strictly conforming program in which the
  use of the features specified in the library clause (clause 7) is confined
  to the contents of the standard headers <float.h>, <limits.h>, <stdarg.h>,
  and <stddef.h>.  A conforming implementation may have extensions (including
  additional library functions), provided they do not alter the behaviour of
  any strictly conforming program.

  ...

  5.1.2 Execution environments

  .std.def: Two execution environments are defined: "freestanding" and
  "hosted". ...

  .std.init: All objects in static storage shall be "initialized" (set to
  their initial values) before program startup. The manner and timing of such
  initialization are otherwise unspecified. ...

  .std.term: "Program termination" returns control to the execution
  environment. ...

  5.1.2.1 Freestanding environment

  .std.free.lib: Any library facilities available to a freestanding environment
  are implementation-defined.

  .std.free.term: The effect of program termination in a free-standing
  environment is implementation-defined.


Interpretation

.int.free: We interpret the "freestanding environment" as being the sort of 
environment you'd expect in an embedded system.  The classic example is a 
washing machine.  There are no library facilities available, only language 
facilities.

.int.free.lib: We assume that the headers stdarg.h, limits.h, stddef.h are 
available in the freestanding environment, because they define only language 
features and not library calls.  We assume that we may not make use of any 
other definitions if freestanding parts of the system.

.int.free.term: We may not terminate the program in a freestanding environment, 
and therefore we may not call abort().  We can't call abort anyway, because 
it's not defined in the headers listed above (.int.free.lib).  .int.free.term
.own: We can add an interface for asserting, i.e., reporting an error and not 
returning, for use in debugging builds only.  This is because the environment 
can implement this in a way that does not return to the MPS, but doesn't 
terminate, either.  We need this if debugging builds are to run in a (possibly 
simulated or emulated) freestanding environment at all.


REQUIREMENTS

.req: It should be possible to make use of the MPS in a freestanding 
environment such as an embedded controller.  In fact, ScriptWorks could be just 
such an environment.  [Although there are no embedded platforms currently.  
pekka 2000-06-06]  .req.conf: There can be configurations of the MPS that are 
not freestanding (such as using a VM arena).


ARCHITECTURE

.arch: The core system -- the MPM and Pool Classes -- must be freestanding.  
Any library or other external support must go through a defined external 
interface.  When the MPS is deployed in a hosted environment these interfaces 
can be attached to modules which link through to the relevant parts of that 
environment.  When in a freestanding environment, custom modules must be 
written to supply whatever the core system needs to function.



 - Exec Env Architecture Diagram 

.plinth: The library and the I/O modules are collectively called the plinth.

.usage: See doc.mps.guide.interface for user-level instructions.


IMPLEMENTATION

.impl: See symbol.mps.c.mps_lib_* and symbol.mps.c.mps_io_* for details of the 
interface.

ATTACHMENT
   "Exec Env Architecture Diagram"

