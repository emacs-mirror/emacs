                  WORKING DEFINITION OF MPS INTERFACE
                      design.mps.interface-working
                              obsolete doc
                             dsm 1995-10-16

This is a working list of what is in the external MPS interface.

typedef struct SpaceStruct {..}

Error SpaceInit(Space space);
void SpaceFinish(Space space);

void SpaceRootAttach(Space space, Root root);
void SpaceRootDetach(Space space, Root root);

Error RootCreateTable(Root *rootReturn, Pool pool, RootMode mode,
                             Addr *base, Addr *limit);

Error RootCreateFun(Root *rootReturn, Pool pool, RootMode mode,
                           void (*scan)(void *p, int i, Fixes fixes),
                           void *p, int i);

void RootDestroy(Root root);

Error PoolCreate(Pool *poolReturn, PoolClass class, Space space, ...);
Error PoolCreateV(Pool *poolReturn, PoolClass class, Space space,
  va_list arg);
void PoolDestroy(Pool pool);
Error PoolAllocP(void **pReturn, Pool pool, size_t size);
void PoolFreeP(Pool pool, void *old, size_t size);


typedef struct FormatStruct {..}

typedef struct FormatStruct *Format;

typedef Addr (*FormatScan)(Addr object, Fixes fixes);
typedef Addr (*FormatScan1)(Addr object, Fix fix);
typedef Addr (*FormatSkip)(Addr object);
typedef Addr (*FormatLength)(Addr object);
typedef Bool (*FormatIsNotObject)(Addr addr);
typedef Bool (*FormatIsMoved)(Addr *lengthReturn, Addr *toReturn, Addr object);
typedef void (*FormatMove)(Addr from, Addr to);

Error FormatInit(Format format, Addr alignment,
                        FormatScan scan,
                        FormatScan1 scan1,
                        FormatSkip skip,
                        FormatLength length,
                        FormatIsNotObject isNotObject,
                        FormatIsMoved isMoved,
                        FormatMove move);
void FormatFinish(Format format);


typedef struct BufferStruct
{
#ifdef DEBUG_SIGN
  Sig sig;
#endif
  Addr base;            /* base address of allocation buffer */
  Addr limit;           /* limit of allocation buffer */
  Addr alloc;           /* limit of allocated area */
  Addr init;            /* limit of initialized area */
  Addr alignment;       /* allocation alignment */
  DequeNodeStruct poolDeque;    /* buffers are attached to pools */
  Error (*reserve)(Addr *pReturn, Buffer buffer, Addr size);
  Bool (*commit)(Buffer buffer, Addr p, Addr size);
  Bool (*trip)(Buffer buffer, Addr p, Addr size);
  void *p; int i;       /* closure variables */
} BufferStruct;

Error BufferCreate(Buffer *bufferReturn, Pool pool);
void BufferDestroy(Buffer buffer);
Error BufferReserve(Addr *pReturn, Buffer buffer, Addr size);
Bool BufferCommit(Buffer buffer, Addr p, Addr size);

Bool FixesApply(Fixes fixers, Addr *what, Addr ref);
Bool FixApply(Fix fix, Addr *what, Addr ref);

Error SpaceDescribe(Space space, LibStream stream);
Error PoolDescribe(Pool pool, LibStream stream);
Bool BufferIsValid(Buffer buffer, ValidationType validParam);
Error BufferDescribe(Buffer buffer, LibStream stream);


