THE DESIGN OF THE MEMORY POOL SYSTEM FAULT HANDLING MECHANISM FOR WIN32
                         design.mps.fault.win32
                           incomplete design
                           richard 1995-08-25


INTRODUCTION:

This document will describe the fault handling mechanism used on the Win32 
platform.


TEXT:

Each platform will have its own special mechanism for fault handling.  The 
strategy for dealing with this is to "convert" the hardware fault into a soft 
load/store request which will trigger the software barrier mechanism.  This 
reduces the dependency on the the details of the hardware.  The interaction 
between the two needs to be worked out in detail: when is hardware protection 
lifted, for example?  Signal-based platforms will be able to invoke the 
software barrier from the bottom.  Win32 SEH will need to come in from the top 
somehow.

Implementing the hardware barrier is just a matter of converting hardware loads 
and stores to protected memory into calls to the software barrier mechanism.  
With the right abstractions this can be independent of the rest of the MM 
machinery.  For Win32 we already have a mechanism which uses Structured 
Exception Handling, but this is not very satisfactory and we should investigate 
alternatives.  We should also be able to construct barriers on our Unix 
platforms without much difficulty.

  conversion to software
  implementations
    Win32
      SEH-based
      signal-based?
      other hack?
    Unix

