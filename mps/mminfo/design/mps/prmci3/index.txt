           PROTECTION MUTATOR CONTEXT ACCESSORS FOR INTEL 386
                           design.mps.prmci3
                           incomplete design
                       Martin Simmons 1999-08-04

INTRODUCTION

.intro: This is the design for accessing the details of the mutator context, as 
used by the Intel 386 implementation of the protection module.


OVERVIEW

.overview: impl.c.proti3 requires access to the registers in the mutator 
context so that it can attempt to decode and emulate the instruction that 
trapped.


REQUIREMENTS

.req.sharing: Required to allow sharing of the details of Intel 386 instruction 
decoding and stepping between different OSes.

.req.context.update: Updates to the mutator context are expected to change the 
the state of the processor when the mutator resumes.


INTERFACE

.if.type.mref:

typedef Word *MRef;

The MRef type is used to describe pointers to machine words.

.if.fun.regaccess:

MRef Prmci3AddressHoldingReg(MutatorFaultContext context, unsigned int regnum);

Prmci3AddressHoldingReg will be called to gain access to the general registers 
in the context.  Regnum is the code used by the 386 for registers in the /r 
part of the opcode (range 0 thru 7 representing EAX, ECX, EDX, EBX, EBP, ESP, 
ESI, EDI).  The function should return the address of the slot containing that 
register in the context, through which the caller will read or change the 
register value.

.if.fun.decode:

void Prmci3DecodeFaultContext(MRef *faultmemReturn, Byte **insvecReturn, 
MutatorFaultContext context);

Prmci3DecodeFaultContext will be called to decode the context to locate the 
fault address and the faulting instruction.  These addresses are returned to 
the caller in *faultmemReturn and *insvecReturn.

.if.fun.step:

void Prmci3StepOverIns(MutatorFaultContext context, Size inslen);

Prmci3DecodeFaultContext will be called to step the context's program counter 
forward by inslen bytes after the instruction has been emulated.



