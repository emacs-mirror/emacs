        DESIGN OF THE COMPILER OPTIONS FOR MICROSOFT VISUAL C++
                        design.windows.compiler
                              obsolete doc
                            tony 1999-03-19

READERSHIP

.readership: Any MM developer - or anyone at all, really.

SCOPE

.scope: This document describes some of the compiler options for Visual C++, 
and how they relate to the MPS build system.

STATUS

.status: This document currently only covers the implications for MPS of the 
compiler options which affect the choice of C runtime library.

SOURCES

.sources: Section headed "/MD, /ML, /MT, /LD (Use Run-Time Library)" from the 
VC++ documentation. (URL mk:@ivt:vccore/F19/D1E/S4D030.HTM)

DESIGN

.flags: The compiler options affect 3 flags, _MT, _DLL and _DEBUG. These in turn
determine whether the C library is thread-safe, in a separate DLL, and supports
debugging. The relevant options are as follows:-

 option  _MT _DLL _DEBUG  C library
 ------  --- ---- ------  ---------
 /MD  yes yes no  MSVCRT.LIB
 /MDd  yes yes yes  MSVCRTD.LIB
 /MT  yes no no  LIBCMT.LIB
 /MTd  yes no yes  LIBCMTD.LIB
 /ML  no no no  LIBC.LIB
 /MLd  no no yes  LIBCD.LIB

.effect.link: The options are intended to be used in conjunction with 
particular linking options for the C runtime library, as given by the last 
column in the table above. 

.usage.mps: MPS source code avoids any dependency upon C library functionality. 
However, the code generated by the VC++ compiler introduces implicit 
dependencies when certain language constructs are used (e.g. for SEH, or 
casting between ints & floats). Since MPS is normally provided as a library, 
the mapping to the library cannot be ensured at release time. There may be 
problems if an attempt is made to link an MPS library with an inappropriate C 
library, depending on whether the inappropriate C library implements the 
implicit dependencies any differently from expected C library. The safe option 
is to always link with the correct C library - and the Microsoft documentation 
doesn't strictly permit any other combination. But other combinations should be 
reliable too - and the following discussion shows which.

.flag._MT: The effect of _MT is that code to access errno and a few other 
global locations is compiled specially to use a function call instead. This 
shouldn't make any difference to MPS, since the implicit dependencies won't be 
accessing errno or the other locations.

.flag._DLL: The effect of _DLL is that the compiler will generate code to 
access functions and variables from the C library via indirections in the DLL 
import table). Code compiled without _DLL may call C library functions whether 
or not the C library is in a separate DLL. OTOH, it  may not be possible to 
link a non-DLL C library with code compiled with _DLL (there would be a 
link-time error). The _DLL flag must be set correctly for variable accesses to 
work (and this won't be checked at link time). However MPS has no implicit 
dependencies on variables in the C library.

.flag._DEBUG: The effect of _DEBUG is that in appropriate circumstances the 
compiler generates additional calls to the C library for checking and debugging 
purposes, and also uses special debugging versions of C library functions. This 
is not necessary for program correctness, but it may aid debugging. It's 
possible to link code compiled without _DEBUG with a debug version of the C 
library with impunity. However this won't be true the other way around if the 
compiler did, indeed, generate an additional call (leading to a link-time 
error). 

.implication.ml-and-mt: The /ML and /MT options should each generate code which 
is compatible with all versions of the C library (assuming the only 
dependencies are the implicit ones). These options are "universal donors" - but 
they may lead to slight inefficiencies when used with DLL versions of the C 
library.

.implication.md: The /MD option generates code which probably won't statically 
link against a C library (leading to a link-time error). It should be possibly 
to link against either MSVCRT.LIB or MSVCRTD.LIB.

.implication.mdd: The /MDd option generates code which probably won't 
statically link against a C library, or against a non-debugging library 
(leading to a link-time error). It's only known to be safe to link this against 
MSVCRTD.LIB. Currently there don't appear to be any problems linking MPS code 
compiled in this way against MSVCRT.LIB.

.mps.options: The MPS build system for the VC++ compiler currently uses the 
following compiler options: .mps.options.sw: For ScriptWorks-related targets 
(mmsw.lib & epvmss.exe) MPS is compiled with option /MD for white hot variety 
builds, and /MDd for all other varieties. These are expected to be used with 
MSVCRT.LIB and MSVCRTD.LIB respectively, as used by ScriptWorks release and 
debug builds respectively. .mps.options.default: For all other targets, 
regardless of variety, MPS is compiled with option /ML.


