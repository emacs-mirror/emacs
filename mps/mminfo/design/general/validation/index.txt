                        OBJECT VALIDATION DESIGN
                       design.general.validation
                              obsolete doc
                           richard 1995-08-22

From: David Jones <drj>
Date: Wed, 9 Aug 95 10:37:54 GMT
To: mm
Subject: A review of the validation design.

This covers much of the state of the modified MM as seen in my personal
environment.

Validation is a service provided by many modules in the MM.  The
interface is provided by the std part (in the include file valid.h).
Requests for validation go via a macro; This gives us more control over
the actual amount of checking going on.  Validation requests made from
normal code are distinguished from validation requestes made from
validation methods themselves (nested calls).

So far this is all very wonderful and vague.  Specifically:
All calls to FooIsValid(thing) have been changed to ISVALID(Foo, thing) or
ISVALIDNESTED(Foo, thing) as appropriate.  All calls to isValid(thing)
have been replaced with calls to ISVALIDLOCAL(thing) or
ISVALIDNESTEDLOCAL(thing) as appropriate.  All validation methods
(called either FooIsValid or isValid) have been change by the addition
of an extra formal argument.

What does this allow us to do?

All calls to validation methods can be switched off.  Nested checking
of substructures can be switched off.  Nested checking to a limited
depth can be implemented.  Requests for validation can use some other
mechanism (such as calling a lighterweight validation method).
Nested checking can call some other method to perform validation.

Suppose we wanted to do full checking of structures, but only a quick
check of the substructures of structures.  For every FooIsValid method
create FooCheck (or somesuch) method.  The FooCheck method justs checks
the signature of the structure (say).  Now redirect nested validation
requests to the FooCheck method.  If the alternative validation method
(FooCheck in this example) is very simple, then it will increase the
maintainence burden minimally.

