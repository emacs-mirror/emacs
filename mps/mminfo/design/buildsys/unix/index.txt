                  THE DESIGN OF THE UNIX BUILD SYSTEM
                          design.buildsys.unix
                           incomplete design
                             drj 1996-07-11


INTRODUCTION:

This document describes the build system for Unix platforms.

.readership: MPS developers.


Document History

.hist.0: mail.drj.1996-07-11.08-04 was a source for this document.  You may 
find it useful.


OVERVIEW:

The Unix build system helps developers build deliverables and tests on the Unix 
OS's.  It uses gnumake with a common makefile comm.gmk, a set of 
platform-specific makefiles <platform>.gmk, and a set of compiler-specific 
makefiles <builder>.gmk.


REQUIREMENTS:

.req: req.epcore.dc.plat.sus8gc, req.epcore.dc.plat.sos8gc, 
req.epcore.dc.plat.i4m2cc,
req.epcore.dc.plat.sos9sc, req.epcore.dc.plat.i5m2cc, req.epcore.dc.plat.iam4cc


IDEAS:

.idea.gnumake: Use gnumake.

.idea.recursive: Invoke make recursively with certain variables set to 
different values each time in order to make different varieties.

.idea.noisy-control: @@@@

.idea.common: Have one makefile fragment that is common to all (UNIX) 
platforms.  It will be parameterized by various compiler flags and names.

.idea.compiler-specific: For each compiler have a file that indicates the name 
of the compiler, and sets of options for all compilations, for debug 
compilations, and for optimized compilations.

.idea.platform-specific: For each platform have a file that indicates which 
source files comprise each target.


IMPLEMENTATION:

.files.platform: Each platform has an associated file <platform>.gmk.  See 
platform.* for platform codes.

.files.compiler: Each compiler has an associated file <builder>.gmk.  See 
builder.* for builder codes.

.files.common: There is a common file comm.gmk.

.files.relation: Each platform file includes exactly one of the compiler files 
at the end.  Each compiler file includes comm.gmk at the end.

.impl.platform:  Each platform file should assign values to the following 
variables:
PFM -- the name of the platform
PFMDEFS -- (optional) list of extra flags to the C compiler (eg, sospgc.gmk has 
PFMDEFS = -D_POSIX_SOURCE -D__EXTENSIONS__)
LIBS -- (optional) list of flags for the linker step (commonly -lm to link in 
math libraries)
<part>PF -- For each software part with platform-specific components (e.g., 
MPM) list of the appropriate source files.  Currently MPMPF, MPMS (optional), 
MPMPS (optional), and SWPF.

.impl.compiler: Each compiler file should assign values to the following 
variables:
CFLAGSCOMPILER -- list of flags to be used in all C compilations.  It is 
current practice to use the compiler in a mode where it is as strict ANSI as it 
can be made and where the maximum possible warnings are being generated and 
warnings are treated as errors.  This typically requires a whole host of flags; 
they should be included here.
CFLAGSDEBUG -- list of (additional) flags to be used in C compilations where we 
want  the maximum amount of debugging information, and any optimization 
possible with it (typically -g), 
CFLAGSOPT -- list of (additional) flags to be used in  C compilations for best 
optimization level, and any debug info possible (typically -O -g)
CFLAGSOPTNODEBUG -- list of (additional) flags to be used in C compilations for 
best optimization level, and absolutely no debug info (typically -O)
CC -- the command used to invoke the C compiler (typically cc or gcc)
gendep -- (optional) sequence of commands to generate a dependency file (.d) 
from a C file (.c).  It is used in a rule of the form:   $(PFM)/$(VARIETY)/%.d: 
%.c

.impl.common: See comm.gmk for documentation of its structure.


TESTING:

.testing: It pretty much tests itself.

