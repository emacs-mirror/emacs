                         ENGINEERING STRUCTURE
                       design.buildsys.structure
                              obsolete doc
                           richard 1994-04-19

NOTE: This document was written very early on in the project, and used to be a 
FrameMaker document which was part of the HOPE structure.

 - structure.doc 


1  Introduction

This document describes the following aspects of the Memory Management project:

- file and Hope structures and their purpose,
- the build system used to compile products,
- how Hope is used to support the development,
- how the project is administered on the various platforms,
- various procedures to be followed by developers.

The description that follows is couched in terms of the Unix file system and 
naming conventions. The structure is designed to be instantiable under other 
systems, notably the Macintosh OS, MS-DOS, Windows, and Windows NT. The 
directory separator is mapped to the local equivalent by Hope.

The enginnering structure provides a consistent development and build 
environment for all the products within the Memory Management project. The aim 
is to provide a sound and consistent method of developing Memory Management 
products across Harlequin sites and on several different platforms. Emphasis is 
placed on:

- separation of the development environment from the products under development;
- good control over the development environment in order to provide consistent 
and reproducible results;
- portable build method;
- solid, automated testing system;
- maintenance of audit information in products.

1.1  Background

The project was set up during 1994–04 in order to exploit Harlequin's expertise 
in Memory Management as one or more component products for both internal and 
external markets. Initially the project consisted of two designers: Richard 
Brooksby at Barrington Hall, and Tucker Withington at One Cambridge Center. It 
is their physical separation which lead to more rigorous engineering and 
documentation than had been traditional in Harlequin projects.

1.2  Document history

This document was created on 1994–04–14 by Richard Brooksby, at roughly the 
same time as the Hope system was coming into use in throughout the company, and 
at the same time as Memory Management product proposals were being formulated. 
The document was based on personal experience of file structures and build 
systems accumulated during the MLWorks and Compare projects. The initial design 
was also discussed with Richard Kistruck (for Macintosh compatibility) and 
David Gilday (for commonality with the Kanji Harpoon project).

2  File Structure

2.1  Environment

The environment occupies the top level of the file structure. It provides 
programs, scripts, and other files which support the development but do not 
form part of any product.

  etc: Technical administration files (see Section 112.1.1).
  bin: Executable parts of development tools. This directory is divided up 
according to the development architecture.
  lib: Auxiliary files used by the development tools, e.g. bison.hairy.
  info: Tool documentation in GNU info format.
  man: Tool documentation in man(1) format.
  tools: Sources of development tools (see Section 112.1.2).
  products: Sources of products (see Section 112.3).
  tests: Sources of global tests and benchmarks (see Section 112.4).

2.1.1  Administration

The project's technical administration files are part of the environment, and 
are stored in the mm/etc directory (the MMetc compound in Hope). These include:

  crontab: The mm user's crontab(1) file, which controls the actions to be 
performed regularly on Unix.
  overnight: A Unix Bourne-shell script run at midnight by the mm user's 
crontab.

2.1.2  Tools

The development environment is built from the sources of tools stored in the 
mm/tools directory (compound MMtools). Each tool is stored in its own 
directory, named mm/tools/tool-name, and each such directory is also a Hope 
compound named MMtooltool-name so that specific versions of the tools can be 
included in product specific tools directories (see Section 112.3).

As far as possible, the tools are stored in the format in which they arrived.

2.2  Documentation

Project documentation is kept in the mm/doc directory (the MMdoc compound in 
Hope). This includes documentation relating to the project as a whole, but not 
internal or user documentation specific to a particular product.

  project: This directory contains project management documents, including 
project plans.
  admin: Administration documents, e.g. this document.
  external: Documents form external sources, e.g. academic papers. A 
bibliography should be maintained in this directory.

2.3  Products and Parts

The items developed by the project fall into two categories: products and 
parts. Products are built out of modules (sources in various languages) and 
parts. A part is a sub-product and has the same struture as a product.

Products reside in the mm/products directory (the MMproducts compound in Hope). 
Each has its own directory, called mm/products/product-name (and a Hope 
compound named MMprodproduct-name. The structure of the product directory is 
described below.

  src: Module sources (see Section 112.3.1).
  include: Exported module interfaces. The name include is derived from C, but 
the interfaces could be specified in other languages. However, C is the most 
likely.
  tools: Sometimes it is necessary to use either an additional tool or a 
specific version of a tool to engineer a product. This directory is the 
product-local equivalent of the top-level tools directory (see Section 112.1.2) 
and follows the same format and conventions. The local environment is built 
into the bin, lib, and etc directories as at top-level. This directory is a 
seperate Hope compound, called MMprodproduct-nametools, allowing specific 
version of the global tool compounds to be included.
  doc: Product documentation.
  tests: Product specific tests (see Section 112.4).
  parts: Subproducts.  Parts are just like products, except that they have 
multiple positions within the file structure. A part is managed just like a 
product, with a directory mm/products/part-name and a Hope compound 
MMpartpart-name. However, specific versions of a part are also contained in the 
*****

2.3.1  Sources

The sources are arranged into modules — files which compile into standard 
object files for the target platform, obeying the standard calling conventions. 
Modules have names up to eight characters long, as imposed by the most 
restrictive naming convention in Hope. The sources for a module can be in any 
language provided for by the development environment. The language of a 
particular file which implements a module is determined from the filename 
extension. For example, foo.c is a C language implementation of module foo.
The source directory is structures so that particular modules can be overridden 
with architecture and OS specific versions. This enables parallel development 
on several target platforms while maintaining the ability to provide portable 
and general default modules.

  src: Portable module implementations which can be used on all platforms and 
architectures. These must be in languages which are available for all the 
targets.
  src/arch/arch-name: Target architecture specific module implementations. For 
example, assembler subroutines which are not OS specific. These can be in 
languages which are only available for the architecture, but potentially for 
all operating systems.
  src/OS/os-name: Module implementations which are specific to the OS but not 
to the architecture.
  src/OS/os-name/arch/arch-name: These are the most specific modules, which can 
be both architecture and OS specific. An example might be a device driver 
written in assembler. 
The build system will prefer a module in a directory which is later in the 
above list, so more specific implementations override more portable ones. This 
makes it possible to customize a particular module for performance on a 
particular target.

This model has been successfully *****

2.4  Tests and Benchmarks

mm/tests/test-name
mm/projects/product-name/tests/test-name


3  Hope Structure

Hope compounds:

  MM: The root compound of the project.
  MMetc: Global project administration files.
  MMdoc: Global project documentation.
  MMtools: Global project development tool sources.
  MMproducts: Contains product and part compounds.
  MMtool_tool-name: Development tools.
  MMprod_product-name: Products.
  MMpart_part-name: Parts.
  MMprod_product-name_tools: Contains development tools local to a product.
  MMpart_part-name_tools: Contains development tools local to a part.

The relationship between the Hope compounds and the file structure is slightly 
subtle. Some compounds may only have a single instantiation, and have a single 
parent compound within Hope. There is a one-to-one mapping between these 
compounds and the file structure. The product and tool compounds may have 
multiple parents. In the case of a product, one parent is MMproducts, the 
global product 'catalog', and other parents are the parts compounds of other 
products. This is because a particular version of one product can also be a 
part of another product. Tools may also have multiple parents: the MMtools 
compound for global tools, and the tools compound of a product when a 
particular tool or version of that tool is required locally. A table of 
compounds and their possible instantiations within the file system is shown 
below.

compound: directory instantiations
MM: mm
MMetc: mm/etc
MMdoc: mm/doc
MMtools: mm/tools
MMproducts: mm/products
MMtests: mm/tests
MMprod_product-name_tools: mm/products/product-name/tools
MMprod_product-name_tests: mm/products/product-name/tests
MMtool_tool-name: mm/tools/tool-name, mm/products/product-name/tools/tool-name
MMprod_product-name: mm/products/product-name, 
mm/products/product-name/parts/product-name

4  Platform operation

4.1  The mm user

The concept of the mm user is supported to varying degrees on the various 
development platforms. On Unix it is an actual login.

The mm user is like a robot working on the project. It acts like a developer in 
all respects, but its responsibility is to take care of automated procedures 
such as overnight builds and regular test runs. Its home directory on Unix 
(~mm) is its workspace, and should not be used by other developers, except in 
that mm's files will be checked out overnight and are therefore a convenient 
reference point.

4.2  Unix

4.2.1  The overnight script

The mm user uses crontab(1) to run a the overnight script at midnight, local 
time. The overnight script performs the following actions:

1. check out the MM compound, and thence the file structure, from Hope.

5  Further issues

- SPRs — Software Problem Reports
- Audit trails through sources to object files and products. Checkpoint ids.
- Are hardware environments another parameter to the build process?
- Is compiler architecture another parameter?
- Is customer another parameter?
- Is the feature list a parameter?
- The build system should invoke Hope to put products together.
- The build system should cope with a separate target hierarchy so that the 
sources can be read-only.
- The build system should cope with developing products which are not 
physically located within the environment. (Shadowing of products and parts.)
- Is the tools directory within a product a subcomponent?
- Separate the build environment from the target environment.
- Use perl for scripts — it will be available anyway because of Hope and we may 
be able to call Hope as a perl library, thus avoiding problems with Macintosh's 
lack of a process model.
- Pay attention to the emerging Hope compound naming convention.
- Are interfaces logically separate products?
- Distinguish between logical interfaces and actual interfaces for development. 
(C has some nice ways of doing this.)


6  Glossary

module

part

compound

product

unit

Hope

architecture

OS

perl

build

ATTACHMENT
   "structure.doc"

