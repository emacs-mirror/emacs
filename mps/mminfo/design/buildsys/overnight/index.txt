                THE ORGANIZATION OF THE OVERNIGHT BUILDS
                       design.buildsys.overnight
                              draft design
                            pekka 1997-09-16


INTRODUCTION:

This document describes how the automatic overnight builds are organized.

.readership: MM developers.


Document History

.hist.0: First draft written by Pekka P. Pirinen 1997-09-16, on the basis of 
mail.richard.1997-08-07.12-10(0).


OVERVIEW:

The overnight builds consist of automatic builds of all the actively developed 
branches of the MPS sources.  This should turn up any integration problems at 
an early stage.


ARCHITECTURE:

.arch: The user "mm" has a home directory which is stored in HOPE in the 
compound HOMEmm.  Every night, the script /u/mm/bin/checkout is run which 
checks out HOMEmm and reinstalls the crontab.  The scripts in the crontab 
package up their results as mail which is sent to "mm" on failure.


IMPLEMENTATION:

.crontab: The crontab looks similar to this:

# $HopeName: HOMEmm!etc:trillian.cron(trunk.1) $
 0 21  *  *  *  sh -c ". etc/shenv && overnight checkout"
15 21  *  *  *  sh -c "./bin/tidy"
30  1  *  *  *  sh -c ". etc/shenv && overnight ./bin/build/MM_src_trunk sos8gc"
 0  4  *  *  *  sh -c ". etc/shenv && overnight ./bin/build/MM_dylan_debug 
sos8gc"

.crontab.files: There's a separate crontab file for each machine, named 
<machine>.cron.  When overnight builds are started on a new machine, the file 
needs to be installed using crontab(1), but after that the checkout script will 
reinstall the latest version each night.

.shenv: The "etc/shenv" script sets up mm's environment (PATH etc.).

.overnight: The "overnight" script runs another script, and packages up its 
results as mail which is sent to "mm" on failure.

.script: Each of these build scripts check out a copy of the MM compound (or 
some sub-compound) from HOPE in $HOME/Builds (where HOME is /u/mm for the mm 
user), then build and run tests.  For example, bin/build/MM_src_trunk builds 
the tip of the trunk for the MMsrc compound.  This is the important one, as it 
catches mistakes we make.

.test-sets: The tests to run used to be explicitly specified in the scripts, 
but since 1998-07-27 on the trunk and any branches younger than that, they are 
defined in impl.gmk.comm (q.v.), and the scripts merely use the targets testrun 
and testrunep.

.cleanup: After a successful test run, the scripts delete the whole branch to 
make space for the next script, except for the trunk script which merely cleans 
out the binaries.  .cleanup.fail:  If the build or one of the tests fails, all 
files are left on the disk.   Note that this might cause the disk to fill up, 
and subsequent test runs are likely to fail, until these remains are disposed 
of.

.release.script: We should add new build scripts every time we create a release 
branch.


TESTING:

.no-test: Test harnesses are notoriously self-testing.  To verify that it isn't 
failing to report failures, take a look at the log files in ~mm/var/log once in 
a while.


TEXT:

.pc: On the PC platforms, we do not use the implementation above.  Instead we 
have asked the SW people to do regular builds with their autobuild system (see 
ScriptWorks Information "SWIG\PC Build System", or ask Peter Westlake).  They 
basically build the 'all' target for the default set of varieties, and they 
don't run any tests.

.pc.where: platform.w3i3mv is built on "kingdom", and platform.w3al.mv is built 
on "brunel".  These are in The Box Room at the Hall [no they're not.  drj 
1998-11-09], off the back staircase on the first floor, but you can see them on 
the PC network.  platform.w3ppmv is not built regularly, but when it is it is 
built on "oem".

.pc.problem: If there's a problem with the build, mail gets sent to mm, giving 
the machine name.  You then need to look in the logs in 
\\Kingdom\Builds\YYYYMMDD\tr-mm or \\brunel\Builds\YYYYMMDD\tr-mm.  The log 
file is called <machine><n>.log, where n is 1 or 2.  There is a summary of the 
mail in <machine>.out.  There are also .log and .out files in the YYYYMMDD 
directories, which are not of much interest.  You want the ones inside tr-mm.

.mac: On the Mac platforms, we do not use the implementation above.  Instead we 
have asked the SW people to do regular builds with their autobuild system (see 
ScriptWorks Information "SWIG\Macintosh Build System").  They basically build 
the he and ci varieties of the mmsw library, and they don't run any tests.  [We 
really should run some tests.  Pekka 1998-01-08]

.mac.where: platform.s7ppac is built on McAroni (sic) and the results are 
archived and stored on the server McVitie.  McVitie is the public server and 
should be used to access the results, McAroni is a private build machine and is 
not usually accessible.  McVitie is in The Box Room at the Hall; you can access 
it on AppleTalk or through FTP.  Other Mac platforms are not built at all.

.mac.problem:  If there's a problem with the build, mail gets sent to mm.  You 
then need to look at McVitie:McVitieSRC:Archives:tr:<Date>:MMsrc.sit, where 
Date is the build date in YYYYMMDD format.  [Not sure the logs are really 
there.  Pekka 1998-01-08]

