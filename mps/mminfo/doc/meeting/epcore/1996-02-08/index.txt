      SUMMARY OF MM/EP-CORE REQUIREMENTS PRESENTATION, 1996-02-08
                       meeting.epcore.1996-02-08
                               draft doc
                            nickb 1996-02-06

.intro: On Thursday 8th February 1996, Nick Barnes met Sarah Woodall, Hugo 
Tyson, Angus Duggan, Freeland Abbott, Peter Barada, Tom Schuneman, Andy Cave, 
and Mamye Kratt, to introduce them to the MM/EP-core project and to seek their 
comments on the MM/EP-core requirements document req.epcore. This is the 
minutes of that meeting.
.tags: Each elementary statement in this document, as in other memory 
management information system documents, is tagged so that it can be 
referenced. The tags are defined relative to the document as a whole. See 
guide.text.
.tags.eg: The relative tag of this statement is ".tags.eg". The absolute tag of 
this statement is "meeting.epcore.1996-02-08.tags.eg".
.scope: The scope of the meeting was:
.scope.intro: To introduce EP developers to the MM/EP-core project. To explain 
the origins, goals, and current state of the project.
.scope.req: To show the MM/EP-core requirements document req.epcore to EP 
developers. To seek comments leading to refinement and improvement of the 
requirements.
.scope.devel: To seek comments on the proposed MM development and delivery 
process design.epcore.overview.deliv.
.scope.layer: To seek comments on the level and breadth of the proposed MM 
interface layer.
.scope.impl: To seek ideas and comments for the implementation of the new 
memory manager.
.goal: The goals of the meeting were:
.goal.inform: To inform EP developers about MM/EP-core.
.goal.req: To refine the MM/EP-core requirements.
.goal.design: To contribute to the design of the new memory manager.
.goal.relate: To broaden the relationship between MM and EP.
----------------------------------------
----------------------------------------
.overview: The following items are from email sent out by Nick in preparation 
for the meeting.
.overview.group: The memory management group is a concentration of Harlequin 
expertise in the area of memory management in general and garbage collection in 
particular. The group is managed by Richard Brooksby. Also in the group are 
Tucker Withington, David Jones, David Moore, and Nick Barnes (who is 
transferring from the ML project). The group's current work includes providing 
memory management for the Dylan group.
.overview.infosys: Most information relating to the work of the memory 
management group can be found in Spring, in the memory management information 
system database [PROJECTS\MEMMAN\MMINFO]. You will need to be able to use 
Spring to get at MM documents. The memory management information system is 
designed to be independent of the underlying database system (i.e. it's almost 
all plain text files). It's organised into documents, each of which is 
identified with a short tag (e.g. this is part of the document tagged 
meeting.epcore.1996-02-08). Individual statements within documents have 
relative tags (e.g. this paragraph has the relative tag .overview.infosys). 
This system allows statements to be identified uniquely, which contributes 
greatly to communication (once you get used to it).
.overview.proj: The MM/EP-core project was initiated by Richard and Yoryos in 
about March 1995. The basic idea of the project is for the memory management 
project (managed by Richard) to replace the existing RIP memory management code 
with a new memory manager. Among the motivations for this change is the need to 
provide garbage collection for PostScript VM. The full goals of the MM/EP-core 
relationship, as agreed by the relevant managers, are laid out in goal.epcore.
.overview.req: The requirements of the MM/EP-core project (req.epcore) were 
thrashed out in a series of meetings during 1995(meeting.epcore.1995-*). This 
document is still a draft, but has now reached the stage where we can open up 
discussion for further refinement to a wider group.
.overview.plan: There is a plan for the development and delivery to EP of 
MM/EP-core products. This plan is currently in design.epcore.overview.deliv. 
This is also open to discussion.
.overview.impl: The MM group have concrete ideas about the implementation of 
MM/EP-core products. However, many EP developers have thought about and dealt 
with memory-related issues in the RIP for some time. We are keen to hear your 
ideas on memory management in the RIP.
--------------------------------------------------------------------------------
.summary: The meeting went well. There was general interest in MM/EP-core and 
approval of the requirements document and delivery plan. General questions were 
fielded. Several suggestions for refinement were made, although there was a 
general feeling that the length and detail of the requirements document made it 
hard to absorb in a short time.
.suggest.extend Andy raised the issue of dynamic arena extension, to allow 
unusually large jobs to complete without painting to disk (in circumstances 
where painting to disk is unacceptable). This would be "Nice".
.suggest.reliable Following a long discussion on our reliability requirement, 
Hugo suggested having some class of desirable memory state (e.g. low 
fragmentation, large free blocks), and requiring that the memory manager 
reliably return to a desirable state after each job. This then ensures that the 
MM state does not degrade over time, and reduces our reliability requirement to 
ensuring that jobs don't fail if started in a desirable state.
.suggest.compact Peter Westlake and Nick Barnes suggested that a low-memory 
action could do in-memory compaction of some objects (e.g. images). Such a 
compaction could use a chain of memory fragments of any size, but would need to 
be able to request fragments from the MM. 
.suggest.mobile Angus suggested that it would be desirable to be able to move 
some objects between display list pools. Nick said that this might be possible, 
but that a more general approach providing general pool creation and 
destruction operations would probably fit better within the existing MPS 
framework.
.suggest.cache Angus noted that references to "font caches" should be made more 
general (to "caches"), because there are several other sorts of cache which 
could also benefit from the same ideas and interface (e.g. half-tone cache, 
user path cache, colour cache).
.note.basemap1 Hugo noted that there is a large piece of memory called 
"basemap1",allocated out of "temporary memory", used for bands during 
rasterization, which is also used as scratch space by various other parts of 
the RIP.
.note.functions The requirement .dc.lib.approved refers to a list of "approved 
functions". This list is to be found in the document entitled "ScriptWorks 
PRogrammers' Reference".
.note.linking There is a limit on total static object size using certain 
compilers on the Mac.

