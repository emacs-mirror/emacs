         SUMMARY OF MM/EPCORE REQUIREMENTS MEETING, 1996-06-06
                       meeting.epcore.1996-06-06
                               draft doc
                           richard 1996-06-07

INTRODUCTION

.intro: Richard Brooksby, David Jones, and Nick Barnes met Freeland Abbott, 
Andy Cave, and Angus Duggan to discuss the requirements of memory management 
work for the memory manager which will ship with the 4.1 release of 
ScriptWorks.  (See mail.kap.1996-05-24.15-52 and mail.richard.1996-05-28.16-41 
for some background.)


MISCELLANEOUS

.plan: The planning section of req.epcore needs revision.

.tickle: Freeland says that 4Hz isn't enough for tickling in 
req.epcore.attr.tickle.


REQUIREMENTS FOR TRAPPING

.trap.size.total: Trapping uses lots of memory which needs to be earmarked.  
Trapping size maximum given by linear function of DL memory (minus in-line 
images) which is approximately 30*(DL-images).

.trap.recover: Trapping doesn't recover properly.  Need to delete on error.

.trap.pool: Suggest new pool for handling trapping memory.

.trap.size.min: Request minimum is 8b.

.trap.size.max: Max is several K (128K).  [Freeland to confirm.]

.trap.size.typ: Common is 40b.  [Freeland to confirm.]

.trap.realloc: Realloc is used extensively and need to be efficient.

.trap.zero: The trapper relies on newly allocated memory being zeroed.

.trap.leak: The trapper is leaky -- it doesn't free everything properly.  Needs 
mass free at end of trapping and on error.

.trap.multi: No need for multiple trapping memory pools (in 4.1) but could be 
later.

.trap.proto: A new protocol/interface is needed to talk to the trapping engine 
so that it can use a new pool.

.aside.malloc: Angus: malloc is being used by various components outside the 
RIP where it shouldn't be.

.trap.show: Trapping is done per page, so it's completely reset on "show".

.trap.stage: It happens before rendering, after interpretation.

.trap.transfers: It involveds transferring data from DL to trapper memory, then 
operating mostly in trapper memory, then doing some modifications to DL.  Then 
it goes back to the RIP in order to render.  During this period it's tickling 
the RIP.

.trap.other: Little other allocation goes on during trapping.  There is some on 
return from trapping to transfer results.

.trap.varies: The trapper reallocates and frees a lot while it's running.  It 
does a large amount of initial allocation (see above), then it varies quite a 
lot.

.trap.speed: In general, we're not competing for speed.  Trapping in the RIP 
must be quicker and more convenient than trapping in a separate application 
(which is the only alternative).  

.trap.tests: Test jobs are available, but Freeland isn't satisfied that they 
express everything necessary.

.trap.tests.speed: Speed on test jobs must be as good.  Total time on any job 
must be as good.

.trap.tp: Throughput on test jobs must be as good.


GENERAL REQUIREMENTS FOR 4.1

.nopp: Need to cope with jobs involving trapping and recombining, during which 
there can be no partial painting.  Aim is to be able to do these jobs on a 
smaller system.  Andy: We promised a solution by January.  That solution is the 
4.1 release.

.high.pp: High end customers want no paint to disk anyway (it takes too long).  
Better to page a bit.  That uses less disk space (page file vs. image).

.var: Richard: So you want to decrease the variance on memory requirements vs. 
time.



Get more jobs through successfully.  Degrade more gracefully.  Use less memory.

.cg: There are particular jobs and clients in mind: Creo and Gerber.

.cg.specific: They want to RIP certain kinds of jobs within specific contraints 
[what are they?].  The test jobs are available, and some are on CD.

.cg.platforms: They both use DEC Alpha SMP running Windows NT.

.cg.lock: The RIP tries to lock down memory on these systems.

.cg.platforms.intel: They might want to use Intel SMP systems.

.cg.general: But in general also want to make sure trapping and recombining 
work.  Requirement could be encapsulated as: "Always run to completion without 
partial paint" (Andy) "except when VM is too small" (Angus).

.cg.machine: One problem is that we don't have machines equivalent to theirs.  
Maybe the "Rawhide" machines at 1CC and Manchester are near enough?  We need 
more memory anyway.

.cg.summary: Summary: "Any job should run in any RIP (fixed memory config) 
provided that swap is available."


OTHER ISSUES

.low: Angus: The low memory mechanism needs improvement by the "Equivalent" 
release.  [We will talk.]

.controls: Andy: Customers do like controls.  Tools would need to log their 
settings for support.

.sep: Richard: [Idea] Separate arena into paged and non-paged anyway?

.graph: Andy: Could do with graph of object type vs. longevity.

.db2: Dave Berry joins as Core RIP manager soon.  He will be coming to the UK.


POSSIBLE SOLUTION




ACTIONS

.act.trap.size: Freeland to confirm formula for max size of trapping memory, 
min, typ, and max size of trapping objects.

.act.low: MM to discuss low memory controls with Angus.

.act.tickle: Richard to talk to David Gilday about tickle frequencies.

.act.write: Richard to write up meeting and update requirements document.

