                INFORMAL MEETING WITH EPCORE, 1998-10-21
                       meeting.epcore.1998-10-21
                             incomplete doc
                          richardk 1998-10-21

[Far from complete -----]

.overview:
RichardK (finding himself near Longstanton on 1998-10-21 Wednesday) visited 
EP-Core group, chatting to EricP about:
  - mm_truncate slow;
  - pool usage;
  - profiler "Quantify";
and to DaveTB about:
  - SW schedule;
  - performance of Mac, Irix, Solaris.


MM_TRUNCATE

.prob: The DL pool uses promises.  Truncating these seems to be 10x slower in 
Trunk than in SW_B1.  Currently this causes a measurable but not disasterous 
slowdown of total job time.  See mail.ericp.1998-10-19.14-10(0) ("More 
profiling..."):
 "...time spent in mm_dl_promise_end (+ descendants) has drastically increased, 
even though the number of calls is unchanged..."

(.sugg.free-list: On mail and by phone it was suggested that perhaps the DL 
free-list could be getting larger, as a result of frees or intermingled segs 
from other pools?  No, no reason to think SW's behaviour is radically 
different.)

.profile: EricP has Rational's "Quantify" profiler on evaluation.  Using this 
it was quick to follow downwards from EPDLFree, which in SW 5.0 only the DL 
pool will use.

.conclusion: The bulk of the time is in mapping and unmapping VM segments.

.analysis.behaviour: Promises are implemented by mps_alloc-ing a large object 
(62K) and then mps_free-ing most of it.  Given seg-size of 64K, this will cause 
a new segment to be created almost every time a promise is created, and freed 
almost everytime one is truncated.  This causes a VM page to be mapped and then 
unmapped.

.analysis.prob: So using VM arena (instead of client arena) seems to be the 
cause of the observed slow-down, because a VM arena has a higher cost for this 
sort of 'segment thrashing'.  This has not been experimentally verified (we 
could by timing a Trunk rip doctored to use a client arena).

.fallback: For good performance the promise should be over-size.  If SW uses 
all the promise object and still wants more, it aborts the object and falls 
back to a less time-efficient algorithm (which allocates in smaller pieces).

.severity: The extra time is currently estimated at 0.5% of total job-time.  
This is not an emergency, but it is appropriate to plan more investigation and 
probable improvement for the next scheduled MPS version.  RichardK takes 
responsibility for remembering this issue for version.epcore.brisling.

.poss: Possible implementation changes were discussed informally.

.poss.core.tune: Minor changes to EP-Core code, eg. tuning the size of the 
promise allocated (currently 62K) or the default segment size.[Didn't we do 
this once before, to arrive at the 62K number?  richardk 1998-10-21]

.poss.core.reorganise: Major changes to EP-Core code, to use several smaller 
promises instead of one 

.poss.



