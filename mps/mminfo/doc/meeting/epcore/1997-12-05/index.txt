                  MEETING ON MM/EP-CORE ON 1997-12-05
                       meeting.epcore.1997-12-05
                               draft doc
                            pekka 1997-12-05

INTRODUCTION

.intro: Pekka P. Pirinen <Pekka> met with David Gilday <DavidG> to discuss 
MM/EPcore requirements and techniques.


PARTIAL PAINT

.overview: Partial paint means stopping in the middle of generating the display 
list, RIPping the partial list into the page buffer, writing each band to disk 
when it has been painted, discarding the current display list, and then 
continuing to generate more display list.  Subsequently, the page buffer is 
read from disk one band at a time, the display list is RIPped for that band, 
and the band is written back to disk (if it changed).

.performance: This means that the display list does not have to be paged out 
(this would typically happen at least twice, because the list is processed in 
the same order that it's generated), but the page buffer is written twice and 
read once.  If the display list is larger than the page buffer, it is more 
efficient to partial paint than to page the display list.

.disk-access: It was noted that since the access pattern on the page buffer was 
highly predictable, it was probably more efficient to "page it out" explicitly 
than to let the VM do that.  In some cases, bands in the middle of the page are 
modified more than others.  David admitted that there's been no attempt to 
optimize this disk access by reading ahead.

.partial-dl: Pekka observed that the ability to recycle part of the display 
list (by painting more than once) is useful whatever the MM strategy.


DISPLAY LIST LOCALITY

.z: Display lists are generated in z order, i.e., bottom-most objects first.  
Sometimes this does result in suboptimal locality.

.span: Some objects can span multiple bands, even the whole page.  David 
suggested putting such objects near each other would be a good thing.

.images: Images can span many bands, but there is a scheme afoot to split them 
into small rectangular regions for better locality (for reasons related to 
reading rotated images from disk).


USING VIRTUAL MEMORY

.no-virtual: On some embedded systems, there is no disk, so no virtual memory 
and no paint-to-disk.  Other techniques must make the most of the memory 
available.  [As pointed out in .partial-dl, they could still partial paint, 
just without the paint-to-disk part (to a frame buffer in memory which is 
pre-allocated to be large enough for the entire page).  Pekka 1997-12-05]

.must-virtual: While recombining, 3/4 of the display list (the first three 
colour separations) must be retained all through the page, so partial painting 
is not an option [trapping has the same sort of a problem].  Therefore, being 
able to extend the arena, even at the expense of paging more, is the only way 
of doing some large jobs.  [This was discussed in meeting.epcore.1996-05-16, 
and is supported by mps_arena_extend, but isn't being used in SW 4.5, because 
they haven't had time to write the code.  The VM arena supports this in a 
different way.  Pekka 1997-12-05]

