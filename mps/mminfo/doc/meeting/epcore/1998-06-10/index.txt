                    ABOUT MINNOW, MV2, SW 5.0 FINAL
                       meeting.epcore.1998-06-10
                             incomplete doc
                          richardk 1998-06-10

.intro: Partial notes from meeting with DTB, EricP, RichardK, about 
version.epcore.minnow and MV2.


MEETING YESTERDAY

.mps.sw-5-0.beta: We are to give EPCore the mps intended for SW 5.0 Beta by 
Friday 1998-06-12.  This is version.epcore.minnow.  SW would like this to be 
the mps that really does go out in the beta.  (I.e.: they'd prefer not to have 
to swap in a later one closer to beta ship).

.minnow.no-mv2: Minnow does _not_ include poolmv2.  EPCore had understood that 
it definitely would include poolmv2, and were not happy.

.minnow.fix: We will try to see whether some other fix is possible in lieu of 
poolmv2.


MEETING TODAY

.date.sw-5-0.final: October 1998.

.mps.sw-5-0.final: If a later release of MPS was available, SW would be 
interested in using it for final.  [MM have _not_ promised a subsequent MPS, 
AFAIK.  richardk 1998-06-10]

.when.mv2: DTB asks, when do we now expect poolmv2 to be available?

.poolepdr: MM will make a modified poolepdl, called poolepdr.  It will be 
suitable for providing the temp pool.  We will implement it immediately and 
release it in minnow.  See request.epcore.160078.

[These details were not discussed in the meeting.  richardk 1998-06-10

 .poolepdr.segpref: Poolepdr is SegPref High.

 .poolepdr.splinter: Poolepdr is designed to avoid wasting splinters, which 
cause fragmentation on allocation, when allocating into virgin segments.  
Within a block (for example, the pool's very first segment) it starts 
allocating from the high end, to leave a splinter at the low end.  New segments 
are expected to abut the current segment at its low end; by allocating across 
segment boundaries the splinter is used.

 .poolepdr.placement: Poolepdr will still keep an address-ordered free list, 
search from low-addresses, and allocate first-fit.  So, like the current 
poolmv, poolepdr will therefore tend to allocate from new segments.  This is 
believed to risk fragmentation when there is some freeing (see 
analysis.epcore.trap-mv.mv.placement.new-seg), but should not be worse than the 
current poolmv.  Note that poolepdr's placement _is_ different from poolepdl, 
which tends to old-seg placement.

 .poolepdr.seg-boundary: Like poolepdl, poolepdr ignores seg-boundaries when 
allocating.  So where adjacent segments belong to the same pool it avoids 
seg-boundary fragmentation.

 .poolepdr.no-promise: Though poolepdr will contain code to support promises, 
it will be asserted because promises with SegPref High produce pathological 
fragmentation.

 .temp-pool.frag.splinter: MM (RichardK, following info from EricP) believes 
that splinter-waste is the prime cause of the perceived shortcomings of the 
temp-pool as provided on poolclass poolmv.

 .temp-pool.frag.seg-boundary: RichardK believes that seg-boundary 
fragmentation is another cause of the perceived shortcomings of the temp-pool 
as provided on poolclass poolmv.
]

.temp-pool.frag-fix.minnow: With minnow for SW 5.0 Beta, the temp pool will 
simply change to use poolepdl instead of poolmv.

.temp-pool.frag-fix.trapping-beta: For SW_B1, DTB would like the same fix of 
changing the temp pool to use poolepdl instead of poolmv.


LONG TERM

.timely: Again, a salient issue was the need to give EPCore _timely_ 
information about any changes of plan.  Failure to do so here was due to 
several factors (as such failures usually are), including:
  - Unclear communication of plans within MM (e.g., between RichardK and 
GavinM) about contents of minnow, possibly aided and abetted by Darwin.
  - Unclear communication of plans between MM and EPCore: meeting notes says 
"preferably MV2" etc; this vagueness is unhelpful.
  - GavinM being off work with chicken-pox.
  - Insufficient communication of SW requirements between MM and EPCore: MM has 
absorbed a lot more information about SW behaviour and requirements recently, 
and this needs to continue, eventually resulting in an improved requirements 
document; EPCore could also do better at providing clear requirements.  
Specifically, what fragmentation problems exist (other than trapping SW:45066).

