              SUMMARY OF SPMAN HOPE DISCUSSION, 1995-09-20
                        meeting.spman.1995-09-20
                               draft doc
                           richard 1995-09-21

Jason Trenouth wrote:

>         Venue: main meeting room
>         Date: Wednesday 20 September
>         Time: 3:00pm-4:00pm 
>         Topic: the ML, MM, and Lisp HOPE experiences
  :
> Some things to think about:
> 
> * INTEGRATION
>         
>         builds
>         bug/task tracking (spring)
>         programming environment (emacs, ...)
>         supplemental file distribution
>         symbolic link maintenanc
> 
> * REPORTING
>         
>         change log summaries
>         claim summaries
>         cron-based reporting
>         trigger-based reporting
> 
> * POLICIES
> 
>         scripts (to do certain kinds of checkout etc)
>         trigger-based enforcement
>         private editing
>         naming/structuring (compounds/subcompounds)
>         keyword expansion
>         configuration identification
> 
> * SITES
>         
>         timing of batch hope jobs

Richard wrote:

> Date: Wed, 20 Sep 1995 08:45:01 +0100
> To: mm
> From: richard (Richard Brooksby)
> Subject: The MM HOPE experience
> 
> I am meeting the local SP managers today to discuss the SP HOPE experience.
> This is mainly to share experiences and maybe produce some feedback for
> the HOPE developers.
> 
> Points I intend to make:
> 
>   - We use HOPE in a very simple way.
>   - The cost of using HOPE is often high (30% of drj's week, on occasion).
>   - HOPE does make multi-platform multi-site file and version management
>     easier, but it's not clear that we couldn't do as well using FTP,
>     because the overhead of this on top of code review is minor.
>   - HOPE doesn't substitute for a human project librarian.
> 
> As with other tools, my policy on HOPE is one of conservatism -- we use
> HOPE but don't depend on it.  Our build system doesn't need HOPE to
> operate, and out working practices don't rely on it very much.  This makes
> it possible for the system to survive changes.  Perhaps it is not
> surprising that this leads to the benefits of HOPE only just outweighing
> the costs.
> 
> If you have any comments on our use of HOPE, or points you would like to
> make, please get them to me before 14:00.

David Jones wrote:

> A gripe I have with hope is that it doesn't do well the thing that I
> expect of some version control system.  In particular:
> 
> Branching is uneconomical.  If branching were cheaper then I could
> create a branch for each development task I have, and use HOPE to
> manage the versions that I develop along that branch, and then merge
> the changes back into the trunk.
> 
> Doing a non-trivial merge is a nightmare.  Applying a delta obtained on
> a branch is difficult, partly due to inadequate documention and partly
> because the relevant command does the wrong thing (or did last I tried).
> 
> It can't particularly support users who each have more than one concurrent
> development task (I can't claim a unit twice).
> 
> As an aside, the conflation of units and the names of units, and compounds
> and directories, exacerbates certain problems and removes the usefulness
> of others of HOPE's design features (like revision tracking).

At this meeting we swapped various HOPE hints and tips, discussed practices, 
and had a cathartic gripe as well.

Some generally relevant points:

 1. Where is HOPE's requirements process?  There was a period of consultation
    when HOPE was first set up, but there has been very little since, except for
    requests for the top ten gripes.  A call tracking database does not
    substitute for a requirements list.  The requirements analysis should be
    continuous (by which I mean periodic).

 2. We (MM) should do more change reporting.  We have a place to write reports
    on our objectives in the InfoSys now, but it should be clearer what to write
    and when.  The procedure should be documented.

 3. We could use HOPE's "status" keyword to indicate document status: "draft",
    "temporary", "accepted", etc.  It would then be easier to ensure that we
    built stuff only from accepted code, etc.

 4. The LISP group have a cron job which fetches reports of activity in HOPE and
    mungs it into a digestible form which is mailed to everyone.  The code
    "uncles" can then pore over this to see what's been going on and look at
    updated code if necessary (they don't do review yet).  Even though we have
    code review, I think this would be a nice thing to have.

 5. We should insert audit information into binaries during build so that we can
    always find out what the conditions are for a particular defect.  Our 
release
    procedure is simple enough at the moment that we haven't needed this yet.
    (Essentially we hand a diskette to Nosa.)  Some minor changes could save us
    a lot of hassle in future.

We will be meeting again to discuss use of Notes.

