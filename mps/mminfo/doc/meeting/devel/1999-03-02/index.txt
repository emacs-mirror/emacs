             NOTES FROM MM DEVELOPMENT AND PRODUCT MEETING
                        meeting.devel.1999-03-02
                             incomplete doc
                            tony 1999-03-03

Telecon: andys, daveb, pekka, rit, tony

drj is off sick.


NEWS

* have JVM

tony: Have now got the JVM (1.2). drj's started working on that.


* sampler CD

tony: Also have schedule for Sampler CD. Have to get preliminary contents
to Gary by April 6th. That means it must contain exactly the filenames in
the eventual release (so Gary can make the installers), but the files can
change. Final contents by April 13th.

daveb: I'm not sure if those dates are definite.


* Dr Dobbs

tony: Dr Dobbs' article still ongoing. I mailed out a suggestion that we
could do something about the advantages of a hybrid exact/conservative
collector. I'm interested in comments on the abstract (not perfect) and on
whether this is a sensible topic for an article.

andys: I guess I'm not convinced it's right for Dr D, tho' it would be an
interesting article. I percieve Dr Dobbs to be largely a hackers' magazine.
We can always ask them whether they'd be interested.

daveb: Other suggestions?

pekka: Something on the same theme as the book -- improving the performance
of your application under garbage collection. Programming techniques.
Andrew and Tucker did quite a lot of work for the book...

daveb: I never read that. Is the text available?

pekka: Not easily, I think. Sample chapters were sent round, but the main
bulk of it is somewhere offline.

tony: A slight concern is that it doesn't tie in to our marketing.

andys: ... which raises the question of why we're producing the article. Is
it to promote a specific product?

tony: As background, I've got a copy of the article in Dr Dobbs a year ago
about conservative garbage collection. They had a GC to sell.

tony: We could write an article about why the Dylan garbage collector gives
Dylan a competitive edge.

pekka: Would anyone read it?

andys: You could present it from the point of view of Dylan: set out with
goals of interoperability, etc. Therefore we built collector in a certain
way. Is that what you had in mind?

tony: I was thinking we'd talk about what was happening in GC world -- Java
more mainstream, move towards exactness. Talk about approach we took with
Dylan, and how it's applicable to Java as well.

andys: So we're trying to make a statement about how the middle path is best?

pekka: Why would a programmer be interested?

tony: They have a choice of language and implementation of languages. They
might be interested to learn about GC technology.

daveb: A case for showing you can have GC without giving up the benefits of
the native platform. Programmers might not believe there were any
lanaguages that could do that.

andys: Does anyone know of any native (server-side) Java platforms?

daveb: Yes, the Microsoft one.

andys: Can you generate OLE components / COM obejects &c in Java?

daveb: Yup.

andys: What constraints does that impose on GC?

tony: Most implementations I think use conservative, non-incremental
collection.

andys: Goal in Dylan was to make such components behave just like
straightforward components. That's a benefit of conservatism.

tony: Right, that's a point I wanted to make. Costs of going exact include
removal of ease of interoperability.

andys: ... top of stack problem.

tony: We have a system which gives you the best of both worlds.

tony: Would be nice to sell Dylan in the article, but probably more people
will be interested in reading it if it talks about Java.

pekka: The interoperability discussion might be interesting to application
programmers. Difficulty is that we have to find out more detail about what
current implementations do.

tony: AFAIK, they're conservative. Sun have been working on a new
implementation with -- I think -- a completely exact collector. But I don't
think it's available yet without signing non-disclosure agreements.

pekka: When they say they have exact collection, they might have almost the
same thing as we do. They just need to put enough stuff in the foreign
function interface, instead of nailing.

tony: John Hotchkiss is keen on having something soon.

pekka: Andrew Shires has just sent an email with info on the work that was
done on the book.

tony: Ok, given that we have to look at more stuff, I suggest we don't
continue this discussion now.

andys: Tools quartet this afternoon. Can we get it on the agenda there? To
get some idea of what's needed.

daveb: Yes, I'll put it on. Obviously it's a two-way process.


RELEASES

tony: Main ongoing release is the Java work. drj's been off yesterday and
today, so I haven't been able to check how progress is going. I guess we
have to assume it's on track, as he hasn't said anything.

tony: Intention is that in early-JVM we'll have minimal support for
weakness (even though we have JDK 1.2).

tony: rit found an article on Reference Objects in Java. Although it's
still slightly unclear, it strongly suggests that the semantics are what we
think they should be.

pekka: Yes, it gets it right, but contradicts itself.

tony: It also mentions something called a WeakHashMap class, which appears 
to be a form of weak-linking - similar to weak hash tables in Dylan. What's 
not clear from the description is whether that's been internally implemented 
on top of standard weakness mechanisms in Java, or whether there's extra GC 
support. 

rit: It has to shrink when entries die, presumably.

pekka: Yes, but looking at the spec, it's pretty easy to implement with
ordinary Java weak references and no extra GC support.



PLAN

tony: I made a new version of the plan yesterday afternoon. Not
substantially different from last week. Removed support for weakness from
early JVM work. Split process retrospective into two parts. First part to
is produce a report about what's good or bad. Hopefully we'll get that by
end of March.

rit: I notice that MilestoneBrislingComplete happened on 1st March? What's
up there?

tony: It's just a mistake. Brisling was complete some while ago. I'll fix it.


* Process retrospective (turning gradually into WORK PRACTICES)

tony: David reckons there's another two or three days to go to produce a
document.

pekka: I thought the point of splitting the process retrospective was to
get something done soon. I don't really understand how what we're currently
planning helps us to get our process working any better in the near future.
We haven't had a review for ages, for example.

rit: Problem is that no one feels it's their responsibility to organise
reviews.

daveb: Need to decide what to review, who will participate, assign roles,
print out code, schedule time for reading code and going through comments.

pekka: Gavin used to have special responsibility for this, but he also
relied on people asking for things to be reviewed. The issue now is that
there's a review defecit -- stuff has been done that's complete enough to
be reviewed but never has been. I thought identifying that was part of the
process retrospective.

tony: I didn't think it was.

pekka: Well, it was in the original plan that I wrote.


andys: Can I ask: in general, what is subject to review:

tony: code, designs, ...

andys: ... all deliverables, then? What are default rules for deciding what
to review?

pekka: I think one of the ideas of the retrospective was to change the
rules. None of us has enough history to remember how it used to work. The
person who could really help us here is drj.

rit: I think there used to be about one review a week.

andys: So why did they become less frequent?

rit: Perhaps because it used to one of Gavin's specific responsibilities,
but then he became group manager and didn't have time to do it. (I think
this may be drj's view.)

tony: So what would be best candidates for review? New code?

rit: Yes.

pekka: Or older code that hasn't been exercised so well.

tony: So dave, can we slip the early JVM release in order to do reviews?
Currently scheduled for March 25th?

daveb: Let's see, overhead is about one afternoon (say Wednesday afternoon)
a week...

tony: ... plus a bit more for the editor who will have to deal with issues.

daveb: Yes, we should start reviews. I'd like to see something on the Java
front by the end of March though.

tony: Do we have an IRC server?

daveb: Do you need one, if you're all in the same room?

daveb: When I did reviews, we just produced a big list of defects in some
central document.

pekka: Yes, I don't think it's much of a problem. The author can make
additional notes if they need them.

pekka: I'm sure there are many other changes that might come out of the
process retrospective. drj of course would be the best person to tell us.
We don't want to wait until June.



daveb: What other sorts of work practices need to be examined?

pekka: I don't have it at the tip of my tongue -- I could probably think of
a lot of small details, but I don't think it's useful to spend this meeting
discussing that.

daveb: So what's in the plan currently?

tony: It has drj producing an earlier deliverable from the process
retrospective task (around the end of March).

rit: What kind of thing is the deliverable? Recommendations for improved
processes?

tony: Unfortunately I'm not sure, as I was going to talk to him yesterday.
But I think it's more a description of where we are than recommendations.



andys: What's motivating this whole thing? Is it known that things are
broken, or is it just a general drive to improve our process?

pekka: Well, we do still follow much of our process. I don't like the
general assumption that we've stopped following it.

rit: ... yes, it's more that we've stopped examining the extent to which we
follow it, and how suitable it is.

daveb: Personally, I was surprised particualrly by (a) code reviews having
stopped, (b) no ratings used in Darwin, (c) scheduling wasn't being done.
(c) now is being done of course. Pekka's describing feedback -- I think
it's more important to follow the process than define it, and sometimes
under Gavin's leadership more importance was attached to defining it. I
think that was a problem.

pekka: It was one of Gavin's special responsibilities to maintain and
improve the description of the process. In the beginning he wasn't the
manager, so he didn't have to actually run the process. When he was the
manager, he didn't do very much in term of making sure the documented
practice really happened, or change the process documents if it didn't.

andys: It seems from what people are saying that a main reason the process
atrophying is that Gavin stopped being responsible for it. That role was
quite significant and isn't being filled now.

rit: I think that's true and quite important. But it's not so much the
process that's atrophying (tho' it may be) as our awareness of it.

pekka: What's crucial is that we're no longer aware whether we're following
the process or not.

daveb: So. This process retrospective task must deal with the question of
how we get the feedback about what processes are and whether they're being
followed. We should use the "Work Practices" section of the weekly meeting
for this too.


daveb: Someone should take on the responsibility of making sure a review
happens. Pekka, would you like to do this?

pekka: Ok.


