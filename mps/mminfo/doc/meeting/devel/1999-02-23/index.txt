             NOTES FROM MM DEVELOPMENT AND PRODUCT MEETING
                        meeting.devel.1999-02-23
                             incomplete doc
                            tony 1999-02-25

Telecon: Andy Sizer <andys>, Dave Berry <daveb>, David Jones <drj>, Pekka
Pirinen <pekka>, Richard Tucker <rit>, Tony Mann <tony>


tony: we've got Andy Sizer with us this week...

andys: and for the foreseeable future!


NEWS


* JVM

tony: Looks like we'll get the JVM today.

drj: At about 1630, I think. It's taking hours to download.

tony: This is the first thing that's happened when the schedule said it should 
;-)

pekka: Which version is it?

drj: 1.2.


* Dr Dobbs

tony: I gather from John Hotchkiss and Christine van Roosen that Dr Dobbs
Journal is interested in writing an article about memory management. I've
sent some mail to John suggesting some possible options, but haven't had a
reply yet.

andys: Did we prod them into asking us?

tony: I don't know how it got started. Dave, do you know?

daveb: No, I don't. I think I've heard of it, though. A press kit has been
going out, or it may have been something more specific.

andys: Can we see the press kit, so we know what people are being told?

daveb: I haven't seen it!

tony: Dr Dobbs would probably want some gory technical details.

daveb: What have we made public already?

tony: Nothing really about the details of MPS.

pekka: Or even that there is an MPS?

drj: That's in the press release that went out at OOPSLA...

pekka: ... ah, which is on the website as well.

tony: The question is, how far would we be prepared to go. I understand
that they like to see code in their articles. Would we be prepared to show
some example Dylan container format code, for instance.

pekka: I don't know how interesting it would be to them or their readers to
have code that they can't use.

tony: We'll have to do the free personal release of MPS then? 8-)

andys: If it's going to the quartet, and if it's currently going through
Christine, is it worth the quartet considering the possibility of someone
from MM discussing it directly with Dr Dobbs?

daveb: Yep.


* Stack scanning

tony: Andy's released the stack scanning article. Andy, the original thing
you wrote about MPS interfaces to languages...

andys: ... needs to be changed, yes.

andys: Should I go and do that?

tony, pekka: Yes.

pekka: It should go in MM info somewhere, with tags and stuff.

andys: Sure, as long as people think it's worth doing.

tony, pekka: Yes.

andys: Review?

drj: If only ...


* Java benchmarks

daveb: What's the story with the MM Java Benchmarks? That might come up at
the Quartet meeting.

tony: Intention was that we'd make them freely available. Lars wrote some
benchmarks -- work is reasonably complete but perhaps not exactly ready for
public consumption. Last week you expressed the concern that it might be
best to wait until we know what it shows for MPS.


* Peerless

daveb: Who are Peerless?

tony: Californian companany, with their own DP operation. They're talking
about very high throughput.

andys: Seems to be primarily text.

tony: DP&P have had a meeting with Peerless, and discussed what would be
necessary to have the core rip running with Peerless display list
technology on top of it. Details not worked out, but the work we'll have to
do probably pretty insignificant compared with the amount EP will have to
do.

pekka: Fast and slow options for them. Even fast option is several man months.

tony: For us, need to get MPS running on VxWorks, single thread. We've
also seen info on Peerless's memory management system. I suppose it's
possible (but not likely) we might be asked to provide their APIs on top of MPS.

tony: I sent some mail to dtb saying it'd take of the order of a month to
get MPS working on VxWorks.


RELEASES

tony: Should get JVM 1.2 source code today. Because it's 1.2 it does have
weakness -- two weak ranks and an extra finalisation rank, in MPS terms.
We're not entirely sure what the semantics are. If they're what the book
describes they're completely brain-dead and would need the new rank system.
If not, might be easier.

tony: Question is: what implementation of weakness do we want for the
initial release?

andys: How many of Lars' benchmarks involve weakness?

drj: None. 1.2 wasn't available then.

pekka: But there are some for finalisation.

tony: So, what are motives for the early release? Need to get something out
ASAP so we can start talking to people about it.

pekka: We could put one weak rank there easily, cos we've got one for Dylan.

tony: That would require a new pool because there's a queueing mechanism
with a kind of finalisation attached to it.

andys: What do we do if the benchmarks show us to be slower than the
existing technology? What's more important: performance or completeness.

daveb: I'd have thought the main selling point of MPS would be performance.

tony: Yes. We have reasons to believe the GC in JDK 1.2 is likely to
perform poorly.

andys: We ought to check the validity of this assumption pretty soon.

andys: Question is, what is purpose of early release?

pekka, drj: Proof of concept: can plug the MPS into a JVM,

andys: ... and get what?

daveb: (1) something that runs at all. (2) faster than the bog-standard
system. I'm not convinced that full support for finalisation and weakness
is that important to begin with.

tony: Ok. So shall I rejig the plan to leave out the weakness work from the
early JVM?

drj: Yes.

andys: The problem with weakness you mentioned: is it just badly specified,
or did they make the wrong choice?

tony, drj: We think it's just been badly written.
andys, drj: Now we've got the JDK we can see what the actual behaviour is.


* Patches on trunk

tony: I know there's also been some work getting patches from release
branches onto the trunk.


* MMQA test harness

rit: There's been a new release of the MMQA test harness, by the way. I
sent out some mail.


PLAN

tony: I've made a new version of the plan. Only minor changes from last
week. I've added a couple of links to postscript files, at rit's request.
These have the task descriptions in them.

tony: Dave, is there any problem with the fact that our target for the
early java stuff is the end of March. Was there a hope to get something
going in this financial year?

daveb: Originally I think the plan was end of February; even that would
have been very unlikely to bring in any money this financial year. So no,
it's not a problem. But of course the sooner we can do it the better, in
general.

tony: We've seen some slippage in the plan (though early-Java stuff hasn't
slipped since last week). Partly as a result of adding new tasks (e.g. QA
effort more accurately represented). I'm not too surprised, because we're
still learning to do scheduling, and because there's lots of work that
isn't represented in the schedule. But I do think I should raise it. A task
that has slipped in particular is the process retrospective, which now
isn't scheduled until May. I'm not very happy with that.

daveb: Indeed. Is part of the difficultly the fact that drj is doing that,
and is on the critical path for the Java work.

drj: The task could be split up.

tony: I guess the general point is that (a) some adjustment may be
necessary (b) dates in the future can't be though of as very reliable.

andys: Is there slack in the schedule, or you are all down as working at 100%?

tony: There's no explicit allowance for overheads. But we did try to
consider them when we produced our original estimates for how long tasks
would take.

andys: I think in MS project you can allow for overhead by specifying that
people are working at, say, 80% efficiency.

rit: Would be nice if we could estimate a higher overhead / lower
efficiency the further into the future we look, as we'd expect more tasks
to arise.

tony, andys: Not likely in MS project!


AOB

* Stack scanning questions

andys: The stack-scanning stuff. I think there are open issues in what I've
described. There needs to be some form of implementation to describe what
the right thing is. Q: what is the interface that we've specced and how do
you do it on the Dylan side? Question about filter functions, new
resolve/preserve, &c. It would be good to do an early implementation to get
a feel for what the costs and benefits would be.

daveb: What are the open questions? Could you do a summary?

andys: Yes, ok. E.g. the size of the maps, the cost of finding them. I've
been making assumptions about the costs being localized in one place.

andys: So question is: when is it worth doing a prototype. Could someone
come along and do that?

daveb: Well, priority for MM is still Java.

tony: Most of the work is Dylan work. But we'd want to provide the
appropriate interface, and think it through beforehand.

andys: ... because?

tony: For someone outside the group to pick up the MPS code and hack it
could compromise our framework and other changes we're about to embark on.
Also, I don't think it's a huge amount of work.

tony: It's important work because not only does Dylan accurate scanning
depend on it, but so would any future LISP work.

pekka: Also, there's a lot of Java vendors who are making noise about exact
scanning.


* Future of JVM work

andys: Java VM work. Do we know who we might go and approach?

daveb: I don't know. John would be doing it. He's done some research but I
don't know who he's got in mind.

andys: I think it's quite important. Background: Siemens have got some new
wireless telecom standard, claim in place by 2002, claim transmission rates
of 2Mbaud if near a cell, otherwise 2K. Clearly a big increase in bandwidth.

tony: Similarly with ADSL (p: asymmetric digital subscriber line). BT are
trialling it. Gives you a permanent connection, as I understand. It
works on standard copper cables.

tony: With comms side becoming less of a bottleneck, performance of JVMs
might become more important.

pekka, andys: Embedded Java might become a much bigger market.

pekka: So the message that MPS has been designed to work as a standalone (no
dependencies on C library) is important.
tony: But incremental GC does currently depend on page protection.

pekka, andys: Other solutions possible with software barriers.

andys: These issues may well get flushed out as LISP contemplates moving to
MPS. They're not likely to be keen on read barriers.




