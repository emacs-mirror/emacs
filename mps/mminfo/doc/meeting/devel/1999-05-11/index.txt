             NOTES FROM MM DEVELOPMENT AND PRODUCT MEETING
                        meeting.devel.1999-05-11
                             incomplete doc
                            tony 1999-05-11

Telecon: Dave Berry <dave>, Pekka Pirinen <pekka>, Richard Tucker <rit>,
Tony Mann <tony>

David Jones <drj> was on holiday; Andy Sizer <andys> wasn't around.

Date:   1999-05-11
Start:  11:35 GMT
Finish: 12:21 GMT


NEWS:

tony: New CEO and new 13-week rule. Don't know what that means in practice
but I suppose it might have implications.

tony: Had more discussion with Jonathan about DOOD replacement. He's
confirmed that it's not urgent and is lower priority that other things
we're doing like new strategy.

pekka: I submitted release.web.diadem to be installed. It hasn't happened
yet, though. The web people don't know how to install it. I gather there
are procedures in other cases. They're working on it.


RELEASES


* product.web

tony: We've just spoken about that.

pekka: Content deadline for new release.web.garden is 11 weeks from now.
Should be out in about 13 weeks. We'll discuss the details when drj's here.


* release.java.amaretto

tony: There's no progress to report. drj tells me he spent last week mainly
working on the edits for the bt review.


* telemetry

tony: Pekka's made some progress on a maintainable tool for processing
telemetry event logs. Will be of use for some upcoming chub work.


* release.dylan.kinglet, release.epcore.chub

tony: Not much specific to say.


* Dr Dobbs Journal

tony: I mailed out a draft yesterday, and I'm starting to get some feedback.


* MMQA

rit: I released a new version (3.0) of the MMQA harness; I'm not sure
anyone has used it yet.

pekka: I think I did recompile the libraries, but haven't done any testing
with it yet.



PLAN

tony: New version. Main change: took the SMP work out of chub. From MM
perspective, it doesn't seem to be feasible.

* Windows 98 issues

pekka: Suggestion: Windows98 is probably a significant Dylan platform or is
going to be.

tony: Do you mean Windows2000?

pekka: No.

rit: Dylan already runs on W98, as well as W95 and NT.

pekka: 2 things: MM should probably have a W98 machine to test on. In
practice that means we'd dual-boot one of our existing PCs.

pekka: The other thing is there's a feature in W98 called GetWriteWatch 
that would probably allow us to do our refsets more efficiently. In all 
probability it's going to be in W2000 as well, but even if it isn't.

rit: Do Dylan need to have the same executables running on NT and W98, and
if so how would that affect this?

tony: Yes they do, but it is possible to find out dynamically whether an
API is available. So there might be a cost (e.g. extra indirection). May
not be a big deal.

pekka: Do we need a purchase order for W98?

tony: No, it's in MSDN. So all we need is sysadmins to help us install it.


* linux port

daveb: What's the plan for the linux port at the moment?

tony: It's scheduled fairly aggresively. There'll be linux support for EP
first, and then full linux support for Dylan. The milestone for that is
currently the beginning of August. Do we know any more about the date
requirements from Dylan's perspective?

daveb: Er, no! How does this fit in with the kinglet work?

tony: I think we get the strategy prototype out a little before it,
according to the plan.

daveb: I'll mail mm-dylan, and see what they say.

pekka: If there's a problem, I imagine the java work would come first. Is
that right?

tony: Well, there are fallback options for Dylan anyway, if they're just
starting up on that platform. They could use the Boehm collector.


* release.epcore.dogfish

pekka: release.epcore.dogfish is in the wrong place.

tony: Ah yes, because all the work is scheduled for chub. It's pretty
meaningless until we know what's in it.

pekka: You could make it depend on the milestone for the release of chub.


* stack scanning

rit: Should we be talking to Dylan about whether they require a patch for
this stack scanning stuff?

tony: Yes, I'll send some mail. We also have to get to the bottom of the
stack alignment thing. I'm starting to get more confident that everything
will be ok, but I'm not quite satisfied yet.

tony: In fact there's potentially also an issue about whether Dylan has a
particular requirement that we've never discussed before in W95, W98:

tony: In W95, W98 (but not NT), a 32-bit appl can load a 16-bit DLL. If a
thread is currently executing in such a DLL, we don't scan the stack
properly. We've never discussed whether it is or isn't a requirement that
Dylan can interact with 16-bit code in that way.

daveb: How many 16-bit DLLs are there about?

tony: They're basically legacy code -- I don't suppose many new ones are
being written.

tony: There are solutions to this, but they're probably best solved by
collaborative effort between the Dylan and the MM group. We can't easily
solve them by ourselves.

tony: Problem is if the MPS decides to do a stack scan at a time when one
of its registered threads is in 16-bit code. A thread will get registered
with the MPS if it ever calls into Dylan. At the moment a thread can safely
call 16-bit code if and only if it has never been near Dylan.

rit: Are you excluding 16-bit code in the OS from these comments, tony?

tony: Yes, I think so (tho' as I said I'm not entirely sure yet). It seems
OS code is running in the kernel rather than on your threads, so it's ok.

daveb: How much work would it be to support 16-bit code?

tony: It's connected with the discussion we've been having on making
stack-scanning more general. Letting the client decide which regions need
to be scanned. So a small amount of work in MPS allowing client to specify
what stack scanning function gets called. And some work in Dylan specifying
this function.

daveb: Might we want to do this work anyway?

tony: If we were to do the stack scanning work that Andy's been working on,
this would be necessary. And we'd need it to support Lisp.

daveb: The quartet were quite keen on the idea of moving Lisp over to MPS.
So it sounds like this work contributes to several goals.

pekka: If we're going to do Lisp support in 13 weeks, we need more people!


WORK PRACTICES

tony: Last time we said we'd get a review schedule sorted out to get a plan
of what documents to review when.

tony: drj now has a review schedule, but he hasn't given it to me yet. When
he does, I'll put it up on the web page.

tony: So implication is we'll be able to do a review next week, by picking
the first thing off this schedule.


AOB

* JVM testing

daveb: Java testing stuff.

tony: Options: running benchmarks, ours and others, and things like
compiler. Measuring elapsed times, or user times. Pause times.

pekka: Hard to measure pause times.

tony: Yes, but not hard to get some qualitative impression of them, by e.g.
running animation programs.

daveb: Porting. Easier if we were working with a client?

tony: Yes. Hardest part for drj has been having this mass of code and no
documentation on how it all works.

pekka: Would certainly help to have partners to talk to.

tony: I also suggested we could use our Dylan experience: show stuff
working with Dylan, on the grounds that Java and Dylan are not that
different.

rit: I suppose that would also be a way to show off more features such as
weakness, finalization that may not be in our initial Java work.

tony: And again to demonstrate pause times, scalability. Harlequin Dylan's
a big program.

tony: Do we have in mind who we're going to talk to when we start?

daveb: I think JH has people in mind, but I don't know who. He wanted to
have something to show them first.

daveb: Other JVM vendors will be put under pressure by HotSpot and the IBM
compiler. The big opportunity would be getting Sun to use it, but there are
other opportunities out there.


* realtime support

daveb: Other thing JH is keen on is potential for real time support for
JVMs. I can't really be more specific -- that's what he said.

tony: You're aware of the real-time Java group, these guys from Newmonics
&c. They clearly see a big bandwagon for real-time Java, but they're not
seeing real-time garbage collection as part of that story. They want to
keep a real-time kernel outside of the rest of Java such as GC. Of course
they're not the only people -- Sun will have their own ideas.

rit: Didn't we discuss this a couple of weeks ago and say that the MPS
wasn't really suited to realtime work?

tony: Well, it's not been designed in that way, but that's not to say it
couldn't be taken in that direction.

daveb: And we do have people with the experience.

pekka: And it's a toolkit, which puts us in a better position than most.

pekka: Of course, just having an incremental GC will be a great improvement
for some JVMs.

tony: I would imagine so, compared e.g. with JDK1.2. That's why I think
there's likely to be a big improvement in pause times.

daveb: How much work would be involved in adding some support for real-time
GC in MPS?

tony: Really depends what you mean by real-time, and stringency of
requirements.

daveb: Well, say, minimum latency in the millisecond range.

pekka: Current code tries to keep the average pause time manageable, but it
doesn't count the things you'd need to count to keep the maximum down.

daveb: Andy said there are three issues: latency, allocation rate, memory
itself. E.g. to make some guarantees about latency you need to know
something about the allocation rate.

daveb: You could have some req like "latency less than x milliseconds 95%
of the time, under such-and-such an amount of allocation."

rit: What does "95% of the time mean"?

daveb: Hmm...

tony: Presumably 95% of the times that you measure it.

rit: So that requirement would say 95% of pauses shall be shorter than x
milliseconds? You can meet that just by adding 19 extra very short pauses
for each time-consuming pause that you want to do work in. Which suggests
it probably isn't your real requirement.

pekka: RCLE had a requirement along the lines of you can only fail so many
times a day, with some characterisation about what the load is like.

daveb: We should have a task to estimate how much work would be required to
provide some support for real-time collection.

pekka: I think we should talk to Martin, who already knows something about
the MPS. He might have some idea. It sounds like the design of it is going
to be on the scale of a month or two, and the implementation will take
longer, and will have to be tuned (that's what happened with RCLE). You
can't make a perfect design that's guaranteed to satisfy the requirement --
you end up tuning an implementation. That means you have to have a set of
requirements that you can actually measure, and an idea of what type of
realtime you want to do. But the basic design, to figure out which parts
need to be improved, could perhaps be done even if we don't have a good
idea what the customer's going to be like.

tony: ... well, I don't know ... hard realtime for example would be very
different.

pekka: Hard realtime is just out. It means rewriting the whole thing.

daveb: Why is it out?

tony: Well, I don't think it's necessairily out, but it would be a lot of work.

pekka: For hard real time, you can't just tune the GC -- you need a fairly
good proof that things will take no more than x clock cycles. You need much
more work on special cases, although they might be extremely rare in
practice. You need to do low level things like look at the actual compiler
output. All that will take a lot of time.

tony: It's also likely to lead to an ultimately slower GC. So it's good for
the people that really want it, but might not be so good for the rest of
the customer base.

pekka: ... and there aren't very many people who really need it. If you're
controlling some industrial robot maybe, but for e.g. phone calls you can
have the occasional glitch.

tony: So should we do a bit of work on the design of soft realtime? We'd
need to to produce an estimate of how much would be involved.

pekka: We can have a couple of long talks with Martin and put up a plan on
how to do the design.

daveb: Yes, not a major task, but getting some information.

tony: Ok.

pekka: Yes.

-=-=-



