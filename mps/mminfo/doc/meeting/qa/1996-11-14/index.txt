            MM/QA: EXTRA ARGS FOR THE DIFFERENT POOL CLASSES
                         meeting.qa.1996-11-14
                               draft doc
                             rit 1996-11-14

As explained by richard and drj.

mps_pool_create(&pool, space, class, ...)

... is extra arguments specific to the pool class, as follows:

MV

3 args: size_t extendBy, size_t avgSize, size_t maxSize
all compulsory

extendBy: the minimum amount of memory to grab at a time from the OS (when the 
pool is full, that is). It could be a bad idea to make this huge, e.g. 1000 
Meg, 'cos then you won't be able to allocate anything in the pool. Making it 
too small shouldn't matter.

avgSize: the approximate average size of the objects you're going to put in the 
pool. This is just advice to the mps -- it doesn't matter if the objects end up 
being bigger or smaller.

maxSize: the maximum likely size of the entire pool (but it's not a limit in 
any sense). It must be bigger then extendBy.

Advice if you don't care:
set extendBy to one page (4K?)
    avgSize to, say. 32 bytes
    maxSize to, say, 64K

None of them can be zero. The developers aren't entirely happy with this setup 
-- ideally the user wouldn't have to give this information if they didn't want 
to.

MFS

2 args: size_t extendBy, size_t unitSize

extendBy: as for MV, and must be >= unitSize.
unitSize: the size of the objects in the pool, which must be at least as big as 
the architecture word size in bytes (that is, as big as sizeof(mps_word_t)). 
This is a silly restriction, which may be removed.

N

LO

1 arg: mps_format_t format (but it only uses skip and alignment)

AMC

1 arg: mps_format_t format

