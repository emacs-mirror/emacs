                 NOTES FROM MM/LFCS MEETING, 1997-03-24
                        meeting.lfcs.1997-03-24
                               draft doc
                           richard 1997-03-25

INTRODUCTION

.intro: Richard Brooksby <richard> and David Jones <drj> met Paul Jackson 
<pbj@dcs.ed.ac.uk> and Healf Gogen <hhg@dcs.ed.ac.uk> to further MM 
collaboration with the LFCS.


Document History

.hist.0: On 1997-03-25, Richard wrote an incomplete draft from four of his five 
pages of hand-written notes and distributed it to mm-lfcs.

.hist.1: On 1997-04-18, Richard completed the write-up from his hand-written 
notes.


AGENDA

1. Report on trip to University of Kent (meeting.ukc.1997-03-21) (1h).
2. Agree on models for further development (2h).
3. Discuss next stage towards a verifiable model (30min).
4. Discuss papers and answer Paul's questions about them (30min).
5. Discuss Paul's forthcoming visit to SRI in Menlo Park (15min).
6. Set date of next meeting and objectives (30min).


COLLABORATION WITH UKC

.ukc: Richard reported on the discussions with Richard Jones and Simon Thompson 
of the University of Kent.  For a detailed report, see meeting.ukc.1997-03-21.

.ukc.placement: Healf mentioned that the LFCS were considering "short 
placements" of graduate students with industry.  Richard expressed enthusiasm.

.ukc.examples: Paul suggested that programs in cash registers, washing 
machines, and also X servers were good examples of "real" programs that 
suffered from poorly understood memory behaviour, and therefore might be 
suitable subjects for examination by UKC.

.ukc.seminar: Paul suggested that if Richard prepared lectures for Kent he 
could also give them at the LFCS.

.ukc.student: Paul said that Eric Pohl had recently mentioned that there was a 
recently finished student at Kent interested in formal verification of some new 
GC algorithm.  Perhaps there is an opportunity for an exchange of ideas.

.ukc.dilute: Healf expressed the concern that collaboration with UKC would 
dilute collaboration with the LFCS.  Richard replied that LFCS collaboration 
was already pretty dilute due to pressure on his time, but that a replacement 
manager would make it possible to give more time to both projects.


MODELS

.mod: The following discussion was based around Paul's mail describing possible 
models (mail.pbj.1997-03-18.15-31).

.mod.rdl-graph: Richard suggested using a rooted directed labelled graph, 
rather than a simple directed graph, in the model.  Labels on the edges are 
drawn from some abstract set.  There should be no ordering on labels, except 
that determined by the scanning method.  The GC should still be correct even 
with a random ordering.

.mod.fixed: The graph has a fixed finite size, making conditions on the 
algorithms much easier to state.  Richard questioned this.  It was decided that 
modelling of getting extra store from the OS (i.e. adding nodes to the graph) 
would be tackled later.  The property to show would be equivalence of a GC'd 
graph to an infinite allocator.

.mod.free-gen: Remove the restriction on to-space by removing the free-list 
from any generation.  But, mention that a generation in each free-list does 
model more primitive size-restricted collectors, where a generation corresponds 
to an area of memory.

.mod.incr-rem: Rather than clearing the remembered set before every trace, 
incrementally maintain it by moving objects in or out after they are scanned.  
This is much closer to our system (we calculate a summary during scan).  You 
need to remove objects from the remembered set when they are moved on to the 
free-list.

.mod.del-write: The del mutator action doesn't necessarily trigger the write 
barrier.  Consider the case of a global variable which affects the existence of 
edges from all objects, but is not itself protected.  The GC must be OK in both 
cases.

.mod.random: The GC must operate correctly in the presence of random triggering 
of the read and write barriers.  Suggest extra mutator operations, peek and 
poke, which trigger the barrier given an object.  Then prove that the GC is OK 
no matter where these are inserted in the actions of the mutator.  Then you 
don't have to worry about del not triggering the write barrier -- it's just 
poke then del.  This also models reads and writes of non-pointers to objects by 
the mutator.

.mod.cond: The barrier might be tripped depending on what is being read or 
written.  The model should capture this possibility.  On architectures that 
don't support this implementation a write would be a poke followed by a write, 
and a read would be a peek followed by a read.

.mod.balance: Consider controlling the load balancing between the mutator and 
the GC with a function (of the state) which is a parameter of the model, rather 
than assuming a global "fairness condition".  This will make it possible to 
express progress control.


NEXT STEP TOWARDS A MODEL

.mod.root-edge: Edges from the root node should be labelled (registers, stack 
locations, etc.) because it is vital that the GC doesn't re-arrange them.

.mod.barrier: The barrier could be expressed as being on object x label (i.e. 
on a subset of the references out of an object) therefore objects could be 
partially coloured.  The remembered set can be used during refinement to decide 
which bits are black and which bits are grey.  This might correspond to 
scanning of large objects in a real implementation.

.mod.black: Objects should naturally be black.  They should be whitened when 
they are condemned.  This corresponds better to Harlequin's system.

.mod.trans: There was a discussion of state transition diagrams and what they 
represented, which left everyone quite confused.  Mostly Richard didn't 
understand Paul's use of diagrams to represent the states of the GC.  Paul said 
he'd talk to a concurrency expert to try and find out which formalism was best.


QUESTIONS ABOUT LITERATURE

.lit: Richard and David attempted to answer Paul's questions about papers and 
reports he had read.

.lit.mlworks: Paul and Healf would like to know about the MLWorks collector.  
It will be described at a future meeting.

.lit.lucid: Paul asked "Is Sobalvarro used in Lucid?".  Richard suggested he 
contact Jon L. White <jonl@harlequin.com> who would be able to answer.  Paul 
should make it clear he's under an NDA.

.lit.url: Paul will send a URL for Sharma & Soffa.


PAUL IN THE USA

.sri: Paul will be visiting SRI to do GC work using PVS for three months, May 
to July this year.  They've looked at some GC stuff before.  Richard observed 
that SRI was only a short walk from Harlequin's Menlo Park office -- see 
<URL:http://www.harlequin.com/full/offices/usa.html>.  Paul could take the 
opportunity to talk to the Lucid folks, including JonL.


ISSUES FOR THE MPS

.one-phase: One-phase allocation might see old pointers in recycled memory 
objects.  This isn't necessarily a problem, but we need to check.

.root.pc: In an extreme model, the only root is the PC, since the SP can be a 
global variable referenced from the code, and all other instructions could be 
two- or three-address with real addresses.

.read-barrier: A pure read-barrier collector is not "snapshot-at-beginning", as 
Richard often has often been heard to claim, since the mutator can write to 
objects and therefore change the graph behind the barrier after the flip.  In 
practice, we only have an access barrier (read and write) available, so a 
read-barrier collector is snapshot-at-beginning.

.multi-barrier: When we get an access in the MPS we only appear to take one 
action: scan.  As it happens, this has the effect of updating the remembered 
set.  These are separate pieces of the design, and perhaps ought to be cleanly 
separated.

.scan-global: We must be sure to specify the restriction on scan methods 
accessing global variables.  Can they, or not?  Under what restrictions?


ACTIONS

.act.nda: Richard will raise the issue of a need for an LFCS departmental NDA 
with George Cleland.

.act.mail: Paul will mail the text of his notes in "tx-systems.txt".

.act.conc: Paul will discuss concurrency formalism with a concurency expert and 
report on the best conventions.

.act.lucid: Paul will contact Jon L. White <jonl@harlequin.com> to ask about 
Lucid's GC.

.act.url: Paul will send a URL for Sharma & Soffa to mm-lfcs@harlequin.co.uk.

.act.resolve: Paul will resolve remaining issues with model description, 
especially the state transition diagram business.

.act.flesh: Paul will flesh out the model in PVS according to the decisions 
made today, for at least the Basic and Incremental models.

.act.update: Paul will update his text description and send it to mm-lfcs.

.act.ml-model: Richard will consolidate the ML model into one identifiable 
place and possibly put it under version control.

.act.alt: Healf will consider alternative models for state representation.

.act.learn-ml: David will learn ML.

