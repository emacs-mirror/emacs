           SUMMARY OF MM/ML REQUIREMENTS MEETING, 1996-04-23
                         meeting.ml.1996-04-23
                               draft doc
                           richard 1996-04-24

INTRODUCTION

.intro: On Tuesday 4th April 1996 Richard Brooksby met Jon Thackray (and later 
Nick Barnes) to discuss the memory management requirements of the ML Group.

.scope: The meeting covered the topics:

  - MLWorks release schedule
  - maintenance and development responsibilities to be taken on by MM
  - provision for the transition of memory management from the ML Group to MM,
    and in particular for Nick Barnes moving from the ML Group to the MM Group
  - requirements for the MLWorks release
  - levels of response to bugs
  - maintenance and porting effort


BACKGROUND

.bgnd: Nick Barnes is leaving the ML group and joining the Memory Management 
group.  At present his time is split, and he is working on the replacement of 
the EP Core RIP memory manager and subsequently the GC of PostScript VM.  The 
MM group will be taking responsibility for the MLWorks GC and memory manager, 
as detailed below.


MLWORKS RELEASE SCHEDULE

Jon stated the following schedule for MLWorks releases:
  .rel.beta.limited: limited beta release at end of May,
  .rel.beta: open beta release at end of June,
  .rel.full: unknown date for full product release.

.transfer.nick: Nick will finally leave the ML Group and become a full member 
of the MM Group after .rel.beta.


RESPONSIBILITY

The following responsibilities will be transferred from the ML Group to the MM 
Group.  Naturally we both accept that these aren't rigid, but they give us 
guidelines to work to.

.resp.gc: The garbage collector

  .resp.gc.comp: not including compiler modifications
  .resp.gc.entry: including GC entry/exit code
  .resp.gc.seq: including design of code sequences

.resp.root: Root management

  .resp.root.global: including "global" roots
  .resp.root.use: not _use_ of roots
  .resp.root.advice: advice on how to use roots
  .resp.root.if: interface to root declaration, etc.
  .resp.root.req: required root facilities

.resp.malloc: Malloc and Free

.resp.image: Image Load and Save

.resp.alloc: Allocation

  .resp.alloc.seq: the allocation sequence
  .resp.alloc.comp: not the compiler code for emitting it
  .resp.alloc.static: allocating static objects
  .resp.alloc.dynamic: allocating dynamic objects

.resp.rep: Representation

  .resp.rep.advice: advice on modifications to object format
  .resp.rep.veto: mutual veto on format protocol changes subject to resource
                    constraints
  .resp.rep.ancillary: not ancillary info (but we need to be consulted)

.resp.measure: Measurement

  .resp.measure.space: space profiling
    (There's some stuff in the implicit vector to do with this.)
  .resp.measure.time: not time profiling
    (But this is a bit mingled with space profiling.)
  .resp.measure.env: not maintenance of the environment code to display the
                        results (We might suggest stuff, of course.)
  .resp.measure.explore: heap explorer

.resp.stack: Management of ML and C stacks

  .resp.stack.alloc: allocating and freeing stacks
  .resp.stack.props: determining properties of stack memory (is this a stack
                        pointer?)
  .resp.stack.use: not code for actually making use of the stacks

See also .act.mark.


REQUIREMENTS FOR RELEASE

In order of priority:

.req.small: Get MLWorks running on small machines.
.req.out: Improve the behavior when out of memory (heap or stack).  (What is 
current?)
.req.mach-fix: Reincorporate the assembler fix-up routine for the 386.
.req.defensive: Make the code more defensive in general.  Look around for 
bomb-out places.
.req.mips: MIPS failures in general (malloc re-entry?)

Desirable attributes by the release are:

.req.small.pc: Need to be able to compile "student-size" programs on a 16Mb 
target PCs.
.req.pause: MM shall not prevent MLWorks from responding within 2 seconds of a 
user action.  [Ideas: low-level event response, e.g. highlighting.  Watch 
cursor.]


PROVISIONS FOR TRANSITION

Transfer of Debugging Knowledge

Few ML staff are currently competent to debug random bus errors, and this 
knowledge needs to be passed over, mainly from Nick to Steven, but also to 
other members of the ML group.

Nick will write down some important information relevant to debugging, and 
transfer skills as far as possible to Steven.  Nick will spend four days 
between now and the beginning of June writing down information about how to 
debug, or pieces of code to assist with the process.  Nick will also spend a 
day with Steven before June to pass on debugging tips and go through example 
sessions.

After June we will play it by ear, but as far as possible, crash-type bugs will 
be investigated within the ML group and help asked for if it appears to be a 
memory management problem.


MAINTENANCE

Levels of Response

.level.guide: The following levels will be used as guidelines unless there are 
overriding priorities from senior management (e.g. "the EP emergency scenario").

.level.1: A bug which is preventing the ML team from working will be given the 
full attention of one person from MM until fixed or worked around.

.level.2: A bug which is preventing an external person from working will be 
given an initial response within 48 hours and fix or workaround within one week.

.level.3: A bug which annoys an external person (but for which there's a 
workaround or it's low-grade random) will be given an initial response within 
one week and fix or workaround by the next patch release of MLWorks.  (These 
are likely to be more than a month apart).

.level.4: An infelicity (e.g. poor performance under certain circumstances) 
will be fixed by the next major release.

General Maintenance

.maint.port: Nick's estimates of porting effort were:
  - Couple of weeks to write code sequences etc.
  - OS porting (UNIX-like, incl. NT) approx. two weeks.
  - Mac, might be longer, but probably less than a month.
  - Whole port is probably two months including initial mach fixup.

.maint.effort: Based on this estimate, plus the current level of MM resourcing, 
we agreed on a general level of effort of three man months per year on porting 
and general improvement.


ACTIONS

.act.mark: Nick will mark areas of code which mustn't be modified without 
consulting MM.  These will be things that the memory manager relies on.  For 
example, parts of "interface.s" and "arch_code.c".

.act.list: Nick will generate a list of files (and functions) which we are 
going to maintain, and mark them (see above).

.act.doc: Nick will write down information about approaches to dealing with 
random bus errors.

.act.mail: Richard will set up an mm-ml mailing list for discussion of MLWorks 
memory management.

