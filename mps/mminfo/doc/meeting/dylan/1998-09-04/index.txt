                      MM/DYLAN MEETING 1998-09-04
                        meeting.dylan.1998-09-04
                             incomplete doc
                            tony 1998-09-07

INTRODUCTION

.intro: Dave Berry <DaveB>, Jonathan Bachrach <Jonathan>, Nosa Omorogbe <Nosa>, 
and Tony Mann <Tony> met to discuss Dylan release schedules, and their effect 
on priorities for future MM/Dylan releases. 

DYLAN RELEASE SCHEDULE

.schedule.dylan: DaveB described the expected scheduling of future Dylan 
releases. Some dates may be tentative:-  

  - 1.1. Expected release date: imminent
      This is currently top priority for the Dylan group

  - Enterprise Beta. Expected release date: 25 Sept (to manufacturing)
      Includes CORBA, remote development, source control.
      Not expected to have any MM implications

  - Enterprise Final. Expected release date: End of November

  - 1.2. Expected release date: End of November (date uncertain)
      Bug fix of 1.1
      May be released simultaneously with Enterprise final.

  - 2.0. Expected release date: Spring 1999 (date uncertain).
      Expect to finish development work by end of 1998
      Will include work to make the compiler use less memory


MM RELEASE SCHEDULE

.schedule.mm: Tony explained that the MM group are planning on making some 
major changes to the strategy for scheduling of garbage collections. They also 
plan to make some other architectural improvements which should help to improve 
performance. They wish to fit this work into the Dylan release schedule. It was 
expected that this new work would be used in the Dylan 2.0 release.


PORTING TO OTHER PLATFORMS

.platforms: DaveB asked to what extent MPS had been ported to other platforms. 
Tony explained that EP use MPS on "all platforms" (a Harlequin standard term). 
However, EP don't use GC. We should be able to port the Dylan MM to any 
platform apart from MacOS without significant difficulty. The lack of real VM 
on the Mac makes it a more demanding port. DaveB explained that the Mac is the 
lowest priority for Dylan, and that the first Dylan port would probably be for 
Intel/Linux. Plans for this are still very tentative, but it's unlikely to be 
released until after 2.0. However, work might start before the 2.0 release. As 
a datapoint, Dave described the relative importance DP&P attach to platforms. 
The order of decreasing importance is:
  - Windows
  - Alpha NT
  - Sparc
  - Mips (SGI)
  - Mac
Dave also requested some consultancy time from Tony to help with the compiler 
and runtime retargetting for the next Dylan port.


DISCUSSION

.ramps: DaveB asked whether the Dylan group should continue to use "ramp" 
allocation patterns, or whether there should be new MM support for them, given 
Jonathan's discovery that their use makes it slower to build reversi. Tony 
advised that they should continue to use ramps, but should use make use of the 
"park" mechanism as an acceptable workaround to the performance problems. (See 
mail.tony.1998-09-03.14-13(0) for details). In the longer term, it will 
probably be appropriate to have some other mechanism which avoids the need for 
"park"; this is likely to be tied to the new GC scheduling strategy.

.pretenuring: Jonathan asked about the possibility of an interface for 
"pretenuring" objects if they are expected to have long lifetimes, following 
discussions with ptw about the problems with ramps (see 
mail.jonathan.1998-09-01.21-16(0) for details). Jonathan expressed an interest 
in using profiling to control the usage. Tony mentioned than MM have already 
started looking at possibilities of using profiling runs for this, as a 
collaboration with ASG. Tony suggested that a pretenuring interface should be 
provided after the new scheduling strategy is in place.

.measuring: Jonathan mentioned that he was still interested in writing a 
regression test which would measure the size of the heap during compilation. 
The measurement must not cause too much perturbation of the behaviour of the GC 
(which rules out the current forced GC interface). Ideally, the heap size would 
be measured multiple times during compilation, so the solution would not be 
tied to the use of ramps. But in the short term, Tony's suggestion for a full 
incremental GC after the end of each ramp could be acceptable for this (see 
mail.tony.1998-08-25.09-52(0)). This is fairly urgent. MM should flesh out a 
proposal for this.

.wrappers: Jonathan mentioned that there's a plan to change the representation 
of functions, such that entry points are stored in the wrapper. This implies 
that wrappers would contain some more raw slots than they do currently. The MM 
repercussions for this should be fairly small (just a change to the Dylan 
format code). The Dylan group will provide information about the details when 
they are known.

.db-flushing: Jonathan is continuing to work on improvements to the flushing of 
compiler databases, and requests some consultancy time from Tony. This would be 
needed after the work for the 1.2 release.

.weak-tables: Jonathan reminded us that he had seen performance problems when 
increasing the usage of weak tables, while investigating DB flushing in the 
past (see mail.tony.1998-07-31.09-44(0)). This is probably either because the 
weak pool (AWL) is inherently slow, or because there are an excessive number of 
read or write barrier hits on weak tables, due to load or store instruction 
emulation. A probable fix for the former involves replacing AWL with a faster 
pool based on AMC (which will be simple after MM's planned architectural 
changes). The latter will require some investigation to see if it is a genuine 
problem.

.stack-pool: DaveB said that the request for a stack pool is very important, 
and the highest priority of all MM/Dylan issues (see request.dylan.160122: 
There is no pool suitable for stack-like management). Dave would like to have 
an implementation of this for use in the 1.2 release. Ideally MM would release 
this by the end of September (i.e. in 3 weeks). Tony said that this might be 
possible - but that the date would require confirmation after some planning 
within MM.

.heap-vis: The issue of heap visualization tools was discussed. Tony explained 
that no work had been scheduled in MM for this since Sheep left Harlequin. 
There hasn't been any agreement to replace Sheep either. In the short term, 
Jonathan is keen to get a 2nd order breakdown of what's in the heap. It should 
be possible to implement this fairly easily on top of the existing heap stats 
code written by Tony. Jonathan could do this - possibly with some consultancy 
from Tony. In the longer term, there is the possibility of a stronger 
collaboration with the Dylan group, involving AndrewA working on the GUI code, 
and possibly PHoward working on the tether support. Dave mentioned that he 
can't commit any of AndrewA's time at present. However, we agreed to hold a 
meeting on Sept 13th to discuss options, involving Jonathan, AndrewA, PHoward, 
Tony and DaveB.

.chunk-size: DaveB commented on the documented performance problems with 
extensible arenas, and the suggestion that the initial chunk size should be set 
to 256MB. He wondered what the plans were for improving this, and was 
particularly concerned that it might be problematic for components which are 
known to be very small. Tony explained that the recommendation for the initial 
chunk size was chosen to be bigger than the anticipated maximum heap size for 
Harlequin Dylan running the compiler. If an application is expected to run with 
a much smaller footprint than the Dylan compiler, then there should be no 
problem in reducing the initial chunk size pro-rata. MPS already provides an 
inteface for letting Dylan choose this value - so in principle Dylan could 
parameterize that for the benefit of smaller components. That's acceptable as a 
solution in the short term - but MM will work on removing the restrictions.


ACTIONS

.action.ramp: To avoid paying a performance cost for ramps, Dylan will use the 
"park" hack. MM will consider providing an alternative interface for the future.

.action.stack-pool: MM will work on the implementation of a stack pool with 
high priority. MM will consider the timescales for this and let Dylan know 
whether it will be possible to release this by the end of September.

.action.strategy: MM will work on a new GC scheduling strategy for eventual use 
with Dylan 2.0. This will include some support for pretenuring objects, based 
on profiling data.

.action.measure: MM will provide a means to measure the size of the heap with 
medium priority. This will probably be tied to the use of ramps. MM will also 
provide a mechanism which is not tied to ramps - e.g. a non-perterbuing 
collect-all. This is less important.

.action.consultancy: MM will offer some of Tony's time for consultancy for 
shrinking the compiler after the 1.2 release work. Also for helping with a 
Dylan port, whenever that may be.

.action.heap-vis-meeting: Jonathan, AndrewA, PHoward, Tony and DaveB will meet 
on September 13 to discuss a collaboration on developing heap visualization 
tools.




