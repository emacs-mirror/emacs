           SUMMARY OF DYLAN REQUIREMENTS MEETING, 1995-08-31
                        meeting.dylan.1995-08-31
                               draft doc
                           richard 1995-08-31

INTRODUCTION

.intro: Richard Brooksby and Andy Sizer met to review Dylan's requirements on 
MM.


MODIFICATIONS TO LAST MEETING

Andy sent the following comments on the last meeting:

>.clib: Otherwise, a C library for the platform is acceptable.

I don't know if its clearer to state that we require the functionality to
be provided in both statically and dynamically linkable form (that's
effectively what we want - i.e its not an *either/or* but an *and*.

>.libs: The compiler will require support to solve, for example, the "pig in
>the python" problem as and when necessary.  We will not be ready to expose
>this to the outside world by the first release.  This should be low down on
>your list of things to do.

What I wanted to say to was I'm not convinced that we the Dylan group
require the ability to express preferences on mm policies in Dylan at the
user level by the first release. If we can do that all to the good. However
I can easily believe that we will require internally some means to cope
with 'pig in the python' type issues (like in the compiler).

>.prio.1: Low (i.e. productive) latency in the development environment.
>.prio.2: Acceptable throughput/performance.
>.prio.3: Flexibility to the user.

I 'd like to change this to:

.prio.1: reliability
.prio.2a: Acceptable throughput/latency performance
.prio.2b: ability respond to a change in 2a within an agreed upon time.

These each beg questions (but that's ok for now). Also I don't know which
of 2a and 2b is more important. I think that they are related and whenever
one cannot be achieved (especially without compromising the other) then
there should clearly be a renogiation between us.

We also mentioned that we wish to enable Dylan programmers to meter memory
usage. I'm not sure if that's what you meant by '.leak'

Did we identify any actions? If we did, a record of those would also be good.


REQUIREMENTS APPROACHES

.accept: The Dylan group must develop a set of acceptance tests which stress 
the MM in various ways.  It will be a requirement to pass these tests without 
failure.

.phase: Thereafter, we could define acceptable rates of failure during phases 
of development.  For example, during alpha release, beta release, and operation.

.dev: The development environment might be used for up to a week at a time, so 
that is a baseline for failure rate.

.fourth: We must consider fourth-party (application user) requirements.  We 
can't predict these, but we can consider ranges of applications that might be 
written.  .fourth.policy: We can define a policy for these requirements -- say, 
inheriting the development environment requirements.

.bound: There's no point in reliability exceeding the reliability of the host 
platform.  Similarly, there's no point in exceeding the latency of the host 
platform.

.malloc: It would be desirable for the MM to be comparable with manual 
management (malloc).  We should at least investigate the attributes from 
Wilson's study for comparison.


ATTRIBUTE SPACES

.lang: We discussed various ways in which we could specify characteristics of 
the MM.  Here are some of our ideas.  These could form a useful language for 
communication between us.

.idea.manual: richard: I imagine a user manual for the MM system, with the 
management policies catalogued and keyed by diagrams such as these, showing 
their characteristics in typical situations.  The client programmer compares 
these diagrams with his actual situation, and chooses the appropriate policy.

.space.tradeoff:



.space.markspace:


.space.pause:


