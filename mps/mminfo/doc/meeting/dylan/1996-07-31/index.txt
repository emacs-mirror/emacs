          SUMMARY OF MM/DYLAN REQUIREMENTS MEETING, 1996-07-31
                        meeting.dylan.1996-07-31
                               draft doc
                           richard 1996-08-01

INTRODUCTION

.intro: Richard Brooksby <richard> met John Hotchkiss <jh>, Tony Mann <tony>, 
and Peter Benson <pabenson> to settle curent Dylan requirements.  This meeting 
was mainly a followup to meeting.dylan.1996-07-29.


TIMESCALES

.rp: The Dylan Group define four "release points":

  .rp.a: "A": Kansas devlopment (i.e. Dylan workers developing Kansas),
  .rp.b: "B": final Kansas delivery (i.e. Kansas ships),
  .rp.c: "C": multi-platform delivery,
  .rp.d: "D": eventual Dylan plans (i.e. everything else).

.rp.change: Dylan and MM full acknowledge that these are likely to change, and 
later release points are likely to split and become better defined as they 
approach.  These definitions are for convenience in this meeting only.

.rp.time: Richard and John will discuss acceptable dates for meeting the 
requirements of each release point (.act.time).


REFERENCE PLATFORM

.refplat: Where platform specific attributes were discussed in this meeting, 
they were defined as being for a 100 MHz Pentium machine with 32Mb of RAM 
running Windows 95.


PRIORITIES

.prio: The Dylan Group discussed priorities and decided on the following, 
highest priority first:

  .prio.1: reliability,
  .prio.2: time to market,
  .prio.3: size of Dylan applications,
  .prio.4: performance (both latency and throughput),
  .prio.5: portability,
  .prio.6: adaptability,
  .prio.7: flexibility to user.


REQUIREMENTS

.req: The requirements were grouped according to the release points defined 
above (.rp).

.tags: The tags in this section correspond to the tags in the document 
req.dylan(3).

.fun.obj.alloc: critical for A.
.fun.obj.recycle: critical for A.
.fun.obj.still: essential for A.
.fun.obj.pin: essential for A.
.fun.misc.alloc: essential for A.
.fun.root: All root requirements are essential for A.

.fun.measure: This breaks down into two: internal tools for use by Dylan group 
developers, which are required for B, and third-party tools for customer 
developers, which are required for D.

.fun.valid: All validation requirements are essential for A.

.fun.weak: Weak table and index support are optional for A, essential for B.
.fun.weak.slot: Weak slot support is merely nice for D.

.fun.final: Support for finalization is optional for A but essential for B.

.attr.test-suite: This is essential for A, and needs to be discussed between 
the groups.

.attr.control: Unsure until D.  Richard will send results of product analysis 
to Dylan Group in order to clarify (.act.control).

.attr.tune.effort: Unsure until D.  See .attr.control.

.attr.capacity: Essential for B.
.attr.obj.max: Essential for A.

.attr.debug.find: A new requirement is the ability to find references which 
point to otherwise dead data.  This is optional for A but essential for B.

.attr.debug: Don't know about other debugging stuff.

.attr.rel: John said he was unable to specify it in hours, but he would not 
like to see more than two or three problems due to memory management per year, 
with a customer base of around 1000 units.

.attr.adapt: Essential for A.

.attr.time.boot: Rephrase this such that the MM may not use more than 5s, 
including any initial root registration.  Essential for B.

.attr.time.pause.max: Shorten to 0.5s.

.attr.time.pause.80: The Dylan Group like this one.

.attr.time.pause.med: The Dylan Group can't really specify the median and mean 
times.

.attr.time.over.max: We don't want the MM to consume more than 15s in any 120s 
period.  This needs to be 75% true for B and 100% for D.

.attr.time.alloc: Don't know.
.attr.time.hash: Don't know.

.attr.time.thread.reg: 50 instructions.  50% for B, 100% for D.
.attr.time.thread.dereg: 10 instruction.  50% for B, 100% for D.
.attr.time.ffi.in: 10 instructions.  50% for B, 100% for D.
.attr.time.ffi.out: 2 instructions.  50% for B, 100% for D.

.attr.space.boot: The total overhead, including the MM code, should be no more 
than 50Kb.  50% for B, 100% for D.

.attr.space.struct: The structural overhead should be no more than 10%.  75% 
for B and 100% for D.

.attr.space.accuracy: The Dylan Group didn't really have a good feel for this 
metric.  Richard said that the MM Group themselves didn't really know how to 
specify this well.  It's a research problem we're trying to solve.

.attr.flex: Essential for B, e.g. a variety of hardware configurations, 
transaction processing, user-interface code.  [Maybe even Jonathan's real-time 
music stuff -- richard.]

.dc.env.thread: Essential for A.
.dc.env.multi: Essential for B.
.dc.env.ambig: Essential for A.
.dc.env.gc: Essential for B.
.dc.env.self: Essential for B.
.dc.env.malloc: Essential for A.
.dc.env.hog: Essential for B.

.dc.env.odi: Essential for B.  The feasibility of this needs to be investigated 
(see .act.odi).

.dc.env.coop: Nice for B.
.dc.env.load: Essential for A.

.dc.link.object: Essential for B.
.dc.link.single: Essential for B.
.dc.link.c.header: Essential for A.
.dc.link.c.macro: Essential for A.
.dc.link.no-crt: Essential for B.

.dc.plat.nti4mv: Change this to "work with code compiled with Visual C" rather 
than saying the MM must be compiled with Visual C.  Critical for A.

.dc.var.ro: Essential for B.  A library without validation is essential for B.  
A library with debugging information stripped might be essential for C.

.dc.var.dp: Essential for A.

.dc.var.i4-opt: Downgrade this to just "nice".

.dc.var.i5-pro: Add a requirement to provide a "Pentium Pro" optimized 
version.  This is optional for B.

.prot.obj: The object format should be carefully reviewed (see .act.obj).

.prot.obj.read: Critical for A.
.prot.obj.write: Critical for A.

.prot.rehash: Essential for A.
.prot.debug: Essential for A (see .act.debug).
.prot.ffi: Essential for A.
.prot.ffi.exc: Essential for A.
.prot.ffi.access: Essential for A.
.prot.abort: Essential for B.
.prot.stack-overflow: Essential for A (see .act.error).
.prot.error: Essential for B (see .act.error).
.prot.exc.dylan: Essential for A.
.prot.fail-alloc: Essential for B.
.prot.consult: Essential for B.

.plan.deliv: The delivery plan will be developed by Richard and approved by 
John later (see .act.time).

.plan.int.effort: Integration should take about one good week's work from 
someone in the Dylan Group.  [This is an underestimate in the longer term -- 
richard]

.plan.int.dylan: Don't know.

.plan.supp.use.init: This is a good estimate.

.plan.support: This depends on the support plans for the Dylan product itself.  
It seems likely that the LISP support will be migrated, rather than a new 
support structure created.  We can't really pin this requirement down yet.

.plan.avail.1: This is essential for A.

.plan.avail.2-3-4: Essential for B.

.plan.avail: The Dylan Group reserve the right to specify which category (1 to 
4) a problem falls into.

.plan.port.fun: This is a good estimate.
.plan.port.full: This is a good estimate.


COUNTER-REQUIREMENTS

.counter: John guarantees that the Dylan Group will comply with the 
counter-requirements specified in req.dylan(3).  The test suite needs to be 
discussed (.act.test-suite), but he guarantees that something will be developed.


ANTI-REQUIREMENTS

.anti: These look correct.


OPEN ISSUES

.fourth: John stated that they were unable to speculate about fourth-party 
requirements, and felt that they were adequately covered by the others at the 
moment.  It seems likely that they will emerge when Dylan has been shipped and 
is in use by customers.  The MM Group should expect change.


MISCELLANEOUS

.prot.tls: This should be clarified.  It's OK to use thread local store 
provided that there is an ambiguous root somewhere else which duplicates the 
value stored.

.time.thread: Tony stated that threads will be required in a couple of months.
.time.debug: Tony stated that debugger integration will be required in a couple 
of months.


POINT OF CONTACT

.poc: The point of contact within the Dylan Group for MM requirements will by 
Tony.  Richard stated that this meant that the MM Group would take Tony's word 
on the requirements document and approve all changes through him.


ACTIONS

.act.update: Richard will update the Dylan requirements to req.dylan(4) based 
on the results of this meeting.  [See also mail.tony.1996-08-02.13-51 -- 
richard, 1996-08-07]

.act.time: Richard will estimate the timing of deliverables for at least A and 
B and submit then to John.

.act.test-suite: Richard and John will discuss test suite development 
requirements by mail.

.act.control: Richard will forward the results of analysis of MM control tools 
for the shrink-wrapped product to the Dylan Group.

.act.odi: The risk of non-compatibility with ODI (and therefore a problem with 
meeting .dc.env.odi) will be investigated urgently and the results send to the 
Dylan Group.

.act.obj: The Dylan Container Format document (design.dylan.container) will be 
subjected to a formal review involving members of the Dylan Group.

.act.debug: The debugger protocol will be discussed between the groups and 
defined, so that .prot.debug can be met.

.act.error: Stack and error handling will be discussed so that .prot.stack and 
.prot.error can be met.

