                      MM/DYLAN MEETING 1998-04-06
                        meeting.dylan.1998-04-06
                             incomplete doc
                            tony 1998-04-06

INTRODUCTION

.intro: Dave Berry <DaveB>, Jonathan Bachrach <Jonathan>, Nosa Omorogbe <Nosa>, 
Keith Playford <Keith>, Tony Mann <Tony>, David Jones <DRJ>, Richard Kistruck 
<RichardK> and Gavin Matthews <GavinM> met to discuss priorities for 
post-Salamander MM/Dylan releases. richardk was present for part of the meeting 
only.


AGENDA

.agenda.functional: Gavin enumerated the functional requirements that are not 
currently met by MPS:
  - Arenas should be dynamically extensible
  - Heap visualization tools
  - Handling of low-memory conditions
  - Wrapper pool (for dynamically allocated wrapper objects)

.agenda.potential: Gavin speculated about some possible new functional 
requirements that Dylan might want to express:
  - Additional platforms
  - Additional types of weakness (e.g. weak-before-final)

.agenda.attribute: Gavin enumerated the attribute requirements that are not 
currently fully met by MPS:
  - Performance
  - Splatting weak references more promptly
  - Handle pigs better
  - Opportunistic collection (e.g. collecting during idle time).


DISCUSSION

.discussion.turnaround: Dave said it was important to improve the turnaround 
time of Dylan compiler builds. Jonathan explained that his goal is to be able 
to compile the entire compiler in a single process, but that this is currently 
impossible due to excess heap sizes. The usage of weak tables is central to the 
strategy for achieving this. This is currently insufficient - but it's not 
known why.

.discussion.forced-gc: Jonathan said that he had experimented with forced GCs 
to ensure full weak-reference splatting - but that this caused some resource 
hogging problems in the GC. Jonathan had been doing this on Tony's advice to 
test the hypothesis that the observed compiler memory leaks are related to the 
behaviour of the GC with weak references. Gavin pointed out that MM don't 
recommend forced GC as a tool for solving the problem in a non-test environment.

.discussion.weakness: Nosa observed that the weak pool (AWL) apears to be slow 
to return memory to the OS when objects in the pool die, and this can lead to 
excess VM usage. David thought this might be a genuine problem with the pool 
implementation. Tony explained that we might decide to replace AWL with an 
AMC-based implementation anyway (in the same way as LO was recently replaced 
with AMCZ).

.discussion.vis: Dave said that heap visualization tools are important to help 
look at what's in the heap and why. Jonathan gave some details of the sorts of 
things he would like to visualize - including:
  - "2nd order" stats (e.g. the proportion of objects of class A which are 
referenced by objects of class B).
  - Aggregation of classes in heap-walking results, similar to the way 
functions can be aggregated in profiling results.

.discussion.vis.reachable: Gavin explained that MM have been working on a tool 
for finding "reachable garbage", and for finding key nodes in the object graph 
which are keeping large amounts of data alive. Jonathan said this would be 
really useful.

.discussion.vis.joint: Tony suggested that it might be productive to develop a 
heap visualizer tool as a joint effort between the Dylan and MM groups. This 
would use code both from MM's existing tools (under development by Sheep) and 
from Dylan's debugger substrate. This might lead to faster development of a 
useful interactive tool with faster turnaround of ideas. It also avoids the 
need for the telemetry stream to contain enough information to rebuild the heap.

.discussion.pauses: Keith mentioned that he would like some way to determine 
whether observed pauses are caused by the GC or not. We should have further 
discussions about this.

.discussion.win95: Nosa mentioned that the problem whereby an MPS assertion 
failure can occur on Win95 at shutdown has now been classified by Dylan as 
Priority 1. This problem is related to a recursive claim of the arena lock. MM 
are aware of this problem, and have previously requested that Dylan say how 
high a priority this is. This is the first time that MM had heard that it was 
high priority. We should have further discussions about this.

.discussion.keyboard-break: Jonathan asked whether the implementation of a 
keyboard break handler was an MM issue. Tony stated that it shouldn't be. There 
is a restriction that Dylan may not recursively enter MM code, which might 
happen if an asynchronous handler should allocate. It would be hard to avoid 
this - so it is expected that the asynchrounous handler should set a flag which 
would be synchronously polled by the Dylan runtime at convenient times.


SCHEDULES

.schedule.dylan: Dave explained that the Dylan schedules haven't been fixed 
yet. It is expected that the Enterprise beta release will be at the end of July 
- simultaneously with updates to the Personal and Professional releases.

.schedule.importance.dylan: Dave gave an indication of the importance of each 
of the agenda items to the Dylan group:
  - extensible arena: important that this should be fixed for the benefit of 
multiple-component processes. Moderate priority.
  - Heap visualization tools: more important than extensible arenas
  - Handling low memory: At least moderate priority
  - Wrapper pool: Not very important
  - Additional platforms: None scheduled as yet. Gavin requested early 
information as soon as it's available.
  - Weak-before-final: Importance not known. MM explained that it would be low 
effort to implement (for both MM and Dylan).
  - Speed: not as important as keeping the heap size down (to avoid thrashing)
  - Splatting weak refs: most important
  - Handling pigs: important
  - Opportunistic collection: Sounds sensible, but not high priority.

.schedule.importance.mm: Gavin explained that some of the agenda items imply 
higher development risk than others, so the MM group would like to work on them 
as early as possible. These include Splatting weak refs, and Handling Pigs.

.schedule.rollout: MM suggested having 3 releases between now and the 
Enterprise beta - notionally at the end of April, May & June respectively. 
Functionality would be included in these releases according to the following 
schedule (at the latest):-
  - release 1: Low-memory handling support and better weak reference splatting
  - release 2: Support for managing pigs
  - release 3: Extensible arena.
Heap visualization tools will be iteratively improved with each release. The 
first release may be delayed past the end of April in order to provide all its 
functionality. 

.schedule.consultancy: Jonathan requested some consultancy time from Tony after 
the Dylan 1.0 release to help get to the point where the compiler can compile 
itself in one go. The results from this might affect the scheduling of MM 
features.

