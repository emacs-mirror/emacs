          NOTES FROM GENERAL PROJECT MEETING, 1995-06-26 TO 30
                       meeting.general.1995-06-26
                               draft doc
                           richard 1995-08-04

Monday

- MM/LFCS meeting
 - Introductions
 - Tell Healf and Tucker about the system
  - Dynamic threatening boundary
  - Are labels the right way?  Need some spec. of semantic correctness.
  - Container formats are like graph types, scan in particular.
  - Naked graphs without labels etc. might be useful.
 - Graph types and consequences: lack of canonicalness
 - John and Rod's coding exercise
  - Implementation of the model of the system in ML?
 - GC(t)
 - Apply the system to a simple algorithm
 - Apply it to a more realistic algorithm
 - Next meetings
  - Monday 17th July at LFCS, Edinburgh
  - Monday 21st August at Harlequin, Cambridge (including Healf)

Tuesday

- Introducing David Moore
- Definition review
 - Functional requirement hierarchy is a bit crooked.
 - Bunch automatic and manual management at the same level.
 - Find out when platforms are required.  Act on platform requirements.
 - Add MM.DYLAN.ENV.THREAD requirement.
 - Add MM.DYLAN.ENV.OS.MACOS, ARCH.POWERPC, ARCH.68K
 - Must cooperate with C libraries as well as being one.
 - Third party licensing is a requirement for products.
 - Flexibility / adaptation effort is an attribute requirement.
 - Separate "scale" into definition and units.
 - DYLAN.OH.SPACE can be split into:
  - comparison with perfect program
  - comparison with an exact collector
  - the overhead of extra data such as wrappers and bookkeeping
 - What about a working set (i.e. real memory) requirement?
- EP requirement questions
 - What is required by the PostScript definition (book)?
 - What is required by our compatability with Adobe and other RIPs?
 - What is required by the ScriptWorks implementation?
 - What is required by the tricky jobs out there?
 - How much are you willing to change ScriptWorks to fit with MM?
 - What are the tricky cases for a GC of PS?
 - What are the tricky jobs that cause problems?
 - Will you write test jobs?
 - Can we have acceptance criteria clearly defined?
 - What are the environment requirements: platforms, linkage, etc.?
 - Traverse the requirement headings from Gilb.
 - Justify requirements.
 - Maintentance and support requirements?
 - Availability? MTBF etc.?
 - Performance requirements: timing constraints, space constraints?
- Planning for the week
- Measurement
 - Use gnuplot and home-grown data manipulation.
 - Use jga for complicated cases
 - Investigate jga's tools for migration to Dylan and shipping as part of
the environment.
 - Investigate mathematical tools: Axiom, Mathematica, Maple, Maxima.
 - Data Explorer (DX) is available on a 60 day trial.
 - Metering interface should be a code annotation in the style of debugging.
 - Need more control over annotations.
 - Strategy will use separate (sufficient) data gathering.
- EP requirements meeting (17:00) postponed
 
Wednesday

- Tucker and Tony talk about threads
 - No more direct input required by Tucker.
 - Tucker to review drafts of documents produced by Tony.
- Arranged meeting with Peter Bayley (in Longstanton)
- Discussion of AMC design
 - Separate the concepts of "Space" (units of collection) and "Gen"
 - Scanning could be driven by traversing lower level structures
 - Can the mark bit really go with the object?  Need to study.
- RCLE meeting (13:00ish)
 - Data structures are easy to accommodate.
 - Complex allocation (two or three parts) hard to deal with.
 - Extra parameters to allocation.
 - Security risks of leaving memory uninitialized on allocation.
 - Non-trivial formats for "references"
 - Dichotomy of pointers and references
 - Making guarantees about addresses -- choosing related addresses.
 - Extensions to language as part of the interface.
 - Need to explain to clients what won't work.  (Which compilers, etc.)
 - Consider interaction of barriers more carefully.

Thursday

- Meeting with Peter Bayley at Longstanton at 10:00
- Dylan meeting
 - The Dylan Compiler and Environment groups merge into one
 - Neal and Mike are joint managers
 - Plans and milestones will be merged
- EP requirements meeting (cancelled)
- Determine areas that most urgently need detailed design
 - Incremental infrastructure
 - Generational strategy infrastructure
- Started ML specification of GC

Friday

- Documentation structure
 - Performance review -> productivity loss -> design requirement
 - Overview
  - Goals / justifications / history
  - Requirements and where they came from
  - Ideas and how they impact on requirements (dynamic?)
  - Joining the ideas into design
  - Refinement of design into product
 - Process of development
  - How we get from requirement to product
  - It's OK to leap, but you must fill in the gaps
 - Distributed development model for Harlequin
 - Definition / requirements / solutions of the engineering practice
 - Feedback on practices
 - Use dsm as a catalyst for documentation
  - Both record and check off
  - Get David to write documentation
 - Harlequin is: Intuition -> Arch -> Code
 - Narrow and wide pyramids and how that relates to effort
 - Keep product materials together: doc with code
 - Module documentation
  - Overview
  - What is it for?
  - How to use it.
  - How does it relate to other modules?
  - How does it relate to design?
  - Implementation isn't so important.
- Strategy brainstorm and conclusions
 - Too soon to build a module
 - Test concepts using the Generational Tactics Death Predictor (TM)
 - Try to figure out interface requirements
 - Look for measurables during code and design review
 - Brainstorm
  - Time
   - Mutator
    - between allocations
    - between faults
   - MM
    - by pool class
    - by part: tracer, arena manager, etc.
    - by module/function (profiling)
    - by task
    - by process
     - flip
     - trace
     - reclaim
     - allocation
    - by graph level
     - by container attribute
      - shape
      - location
      - identity
      - age
      - lifetime
      - size
      - mutator type
   - OS
  - Space
   - Hierarchy
    - Disk
    - Address
    - Backing store
     - fragmentation
     - wastage
     - stats
      - faults/sec, etc.
    - Working set
     - VM efficiency
     - locality
     - pages referenced from a page
     - dynamic analysis
    - Cache
   - Categories
    - Pool class
    - Graph level
     - Arena
     - Zone
     - etc.
    - Container attribute (see above)
  - Meeting requirements
   - acceptance criteria
   - from definition
    - present
    - future
   - system must meet requirements
  - Stats
   - total
   - deviation
   - median
   - min/max
   - etc.
  - State
   - Counts
    - ambiguous
    - nailed
    - total objects
   - Size
   - What time is it (wall time, tea time)
  - Recording
 - Look at
  - BSD stats
  - Dumping training information
  - Look for metres during review
- Rough plan for next month
 - Tucker
  - Book
  - Defining detailed design
  - ML
 - David
  - Visualization tools round-off
  - Measurement interface
  - Debugging overhead control
  - Fault-handling example (Boehm 4.5)
 - Richard
  - Definition (platforms, threads!)
  - Planning
  - Start writing documentation
  - Talk to Yoryos
  - Talk to Peter Bayley
  - Introduce David Moore
  - Longstanton
  - Decide about the AMC / allocation buffer stuff
- Set date of next meeting
 - Week of 28th August

Things to do this week
- Design measurement infrastructure
- Concurrent collections
- Debugging overhead

