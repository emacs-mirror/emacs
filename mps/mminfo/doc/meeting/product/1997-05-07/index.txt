               NOTES FROM MM/PRODUCT MEETING, 1997-05-07
                       meeting.product.1997-05-07
                               draft doc
                            nick 1997-05-08

INTRODUCTION

.intro.intro: Richard Brooksby <richard> and Nick Levine <nick> met to discuss 
planning of the (A)MM Product.

.intro.goal: Work out how to get to a Product Plan

.intro.approve: MM quartet should review (and eventually approve some 
descendant of) this document.

.intro.sources: 
 analysis.product source
 req.product  product requirements, largely blank still
 design.product.arch top-level product design, to be
     checked against req.product
 plan.product  plan for implementing design.product.arch
 *.product[.*]  version / release / request etc 

.intro.sound-byte: "Meeting the need of high-level OOP."


REQUIREMENTS

.req.action.nick: Discuss the following potential requirements with Chris Cox.

.req.action.outcome: More detail in req.product

.req.naive: Generate a base plan for things we definitely need. Eg: We need to 
allocate memory! Do we need to allocate memory fast? Do we need multiple 
policies?

.req.debugging: Is debugging (detecting dangling pointers / memory leaks) a 
requirement?

.req.purify: Is complementing Purify a requirement? (Richard suggests it is.)

.req.events: Need we publish the Event Format (proprietary)? Or will an Event 
Dumper do?

.req.format: Gain in making some / all the graphical data available in some 
other form (text / binary)?

.req.live: Need for live measurement (at least on course grain). Otherwise 
really large measurement runs will consume too mush disk!

.req.roi-spec: Need detailed spec of performance requirements and ROI, for the 
various levels. What determines exact contents of each level is precisely this 
ROI curve.

.req.benchmarks: Define what benchmarks we should meet.

.req.vertical: Are we aiming at any particular market area?

.req.training: See .idea.training below


LEVELS

.level.intro: These now exist in multiple documents, and not consistently. Need 
to firm out concept of evaluation -> pool classes -> deeper in.

.level.canonical: The following will be the basis for the canonical "levels".

.level.enumerate: How many divisions of the "pool class" levels are there? The 
following assumes two.

.level.action.doc.nick: Canonical levels -> design.product.arch ; annotate 
other appearances (eg overview.mps.usage / analysis.product) that they are 
superseded.

.level.one: "Drop In" - this is what evaluators get. Usual story about tangible 
gain within a few hours of installation.

.level.two: "Simple Pool Classes" 

.level.next: "Advanced Pool Classes"

.level.last: consultancy

.level.gc: All of these have option of GC path or non-gc path.

.level.tool: All of these have access to analysis tool(s), at the appropriate 
level. 


DROP IN

.dropin.alternatives: plain malloc / malloc with GC / allocation analysis.

.dropin.malloc: malloc on its own might not improve performance, unless we put 
serious effort into it.

.dropin.malloc-with-gc: lower performance but immediate integrity (like Great 
Circle).

.dropin.analysis: better performance provided user recomoiles. We need a story 
how this will work at level 1...

.dropin.analysis.story:  1) run baseline (for future comparison) 2) link code 
with Measuring MM 3) run and analyse 4) add "#include" lines from analysis 
(find better way, so no source edited!)  5) recompile 6) link with Optimizing 
MM 7) run and measure benefit

.dropin.choice: user must choose at dropin level which one (only) alternative 
to follow. Ie they are mutually exclusive at this level.

.dropin.rough: The Allocation Analyser does a rough but automated job of what 
the client / user would do at level 2. It's a path into level
2 usage. (Generalisation: each level entices user into the next?)


LICENSING

.lic.danger: Last minute unpleasant suprises from legal dept

.lic.immediate: Licensing must be sorted out and planned ASAP

.lic.overview: No runtime royalty on libraries. Analysis tools to be licensed. 

.lic.evaluate: Evaluators should get far enough to appreciate the product 
without gaining commercial advantage before they've purchased.

.lic.libraries.audit: Best we can hope for is once-only (or is that twice? - 
once when they evaluate, again when they convert to purchase) call to support, 
which delivers them a timed key. Time governs when they install the key, not 
how long it runs for. Once installed, key hides a signature within their 
libraries. This gives us an audit trail.

.lic.libraries.nagware: If running eval, every startup to have a massive 
"Harlequin" splash screen. Consequence is that they can test the eval software 
fully but wouldn't be able to redistribute it.

.lic.libraries.expire: Possibly could ammend the above to have runtime 
libraries expire at some point, eg after some date, or per run after so much 
allocation. 

.lic.action.nick: Draft one or two paragraphs to Legal.

.lic.action.richard: Review such paragraphs for technical content.


IDEAS

.idea.combine: Make the Allocation Analyser part of the GMAT - more attractive 
(& good first target for Sheep).

.idea.training: Application trains itself. Training data output through MPS 
interfacwe for save / restore in preferences file / registry. 


MISCELLANEOUS

.misc.action.redirect.richard: Look into redirection of mm-quartet.

.misc.action.rating.nick: Sort out rating formula & questionnaire.

.misc.action.rivals.nick: Ask Chris to check rival web sites and update 
analysis.product as necessary.

.misc.action.doc.nick: Minor updates to design.product.arch

.misc.action.benchmarks.nick: Can we obtain SmartHeap benchmarks?


FURTHER STEPS

.further.pools: Pool class development needs direction (once we have 
requirements, particularly market area).

.further.enumerate: Enumerate benefits in *.level doc.

.further.breakdowns: Provide step-by-step breakdowns of each level in *.level 
doc. 

.further.parts: Roles of product parts at different levels.

.further.tabulate: Tabulate cost and benefit for each level.

.further.donm: Next meeting is on Wednesday May 14th, at the House.


