               NOTES FROM MM/PRODUCT MEETING, 1997-05-14
                       meeting.product.1997-05-14
                             incomplete doc
                            nick 1997-05-19

INTRODUCTION

.intro.intro: Richard Brooksby <richard> and Nick Levine <nick> met to continue 
planning of the (A)MM Product.

.intro.sources: 
 
 meeting.product.1997-01-24(0)  notes on last meeting

.intro.accumulation: This document includes surviving requirements raised at 
the previous meeting. When they've been firmed up and moved into req.product 
they can be dropped from meeting writeups.


REQUIREMENTS

.req.action.nick: Add potential requirements to req.product. [Annotate as 
required.] Categorise them with Chris, then notify mm-product. (See req.dylan 
as guide.)

.req.purify: Complementing Purify is seen to be a requirement. (mail from 
Richard 05-13)

.req.smart-heap: Is there a need to provide a SmartHeap compatible interface? 

.req.events: We need not publish the proprietary Event Format. An Event Dumper 
(in whatever format) is optional for now.

.req.live: Need for live measurement (at least on course grain). Unclear yet 
how course, and whether this is required to be variable or fixed. 

.req.roi-spec: Need detailed spec of performance requirements and ROI, for the 
various levels. What determines exact contents of each level is precisely this 
ROI curve. This is one of the key requirements and needs to be specified soon.

.req.long-compile: Dropin to demonstrate ROI on applications which take a long 
time to compile.

.req.flash: Flash graphics should be present at all levels, in particular the 
demonstrator (dropin) level. Effectively, the Allocation Analyser becomes part 
of the GMAT.

.req.benchmarks: As good as SmartHeap on their benchmarks. Better than 
SmartHeap on ours (whatever these should be, but less artifical then 
SmartHeap). Our benchmarks to be described in sufficient detail that they can 
be reproduced - ideally the code to be published.

.req.vertical: The sort of vertical market we might aim at is the Java world. 
What others?

.req.training: A "unique selling point", according to Chris.

.req.split: Should the dropin level be split in two (link-only and recompile) 
phases?


RELEASES

.release.benchmark: The benchmark release will be known as "plough".

.release.dropin: The dropin release will be known as "drill".

.release.format: In what format shall these releases be available?


LEVELS

.level.intro: These now exist in multiple documents, and not consistently.

.level.action.doc.nick: Canonical levels -> design.product.arch ; annotate 
other appearances (eg overview.mps.usage / analysis.product) that they are 
superseded. This action waiting on .req.split.

.level.one: "Drop In" - this is what evaluators get. Usual story about tangible 
gain within a few hours of installation.

.level.two: "Simple Pool Classes" - are we really happy with the term "simple"? 

.level.three: "Advanced Pool Classes"

.level.four: consultancy

.level.gc: All of these have option of GC path or non-gc path.


FURTHER STEPS (all waiting)

.further.pools: Pool class development needs direction (once we have 
requirements, particularly market area).

.further.enumerate: Enumerate benefits in *.level doc.

.further.breakdowns: Provide step-by-step breakdowns of each level in *.level 
doc. 

.further.parts: Roles of product parts at different levels.

.further.tabulate: Tabulate cost and benefit for each level.

.further.donm: Next meeting is on the morning of Wednesday May 21st, at the 
House.




