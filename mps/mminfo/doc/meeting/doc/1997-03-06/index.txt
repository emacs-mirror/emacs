            NOTES FROM MM/DOCUMENTATION MEETING, 1997-03-06
                         meeting.doc.1997-03-06
                             incomplete doc
                           richard 1997-03-06

INTRODUCTION

...


AGENDA

1. The Plan
2. Product description.
3. Describing the customer/user (including the internal customers).
4. Discussion of documentation goals and requirements.
5. Documentation development process.
6. Safe and Unsafe things to do with references and objects [See gc safety 
papers]
7. Environment in which MPS is running.  Effects it has.  Restrictions.
8. Reference documentation: Go over background and major parts.
9. Review the of what we have so far from previous meetings (about 15-20 
pages).  Include outlines.
10. Documenting messages and assertions.
11. Internal documentation -- design etc.
12. The BOOK.
13. Root declaration.
14. Registration of various things: roots, threads, finalized objects.
15. Sequence points and explicit roots.
16. Location dependency.
17. Supported compilers and platforms.


DOCUMENTATION PLAN ISSUES

.customers: Richard will describe users and internal customers later
in the week.

.doc.support: Richard will provide support on the development side,
but if Leah needs face-to-face explanations, she can talk to Tucker.

.target-platforms: The initial target platform is Windows 95.

.req.hw-and-sw: Leah will need:
   a. .machine: a Windows 95 machine that meets standard development
       specifications (her current PC should be sufficient, until she
       needs to work on Dylan, in which case she'll need 128M of RAM)
   b. .cd-rom: a CD-ROM drive
   c. .prog-env: a copy of MS Visual C++
   d. .c-dev-tools: a standard set of C development tools [how is this
       different from .prog-env?]

.issue.color: Color is "not necessary", but not "not required".

.ui-improvements: The "usual channels" for suggesting UI improvements
is the mm-doc mailing list.

.i18n: The documentation needs to be in international English; Leah
should consult the Quartet to resolve the question of
internationalization.

.risks: Contingencies (aka risks) are potential problems that are
likely to cause costs.  Leah should write down the potential problems
she foresees, what they are likely to cost, and what she plans to do
about them.

.legal: Leah should talk to the PM about legal issues.  These are
probably similar to issues with ScriptWorks and the language products.
Neal Dench and David Williams think Harlequin is covered sufficiently
well by the notice on the copyright page; this should be cleared with
the Legal Department.

.information: Leah should read the notes from the Quartet meetings.

.tutorial: The decision about whether the first chapters of the user
guide will be a tutorial should be deferred.  Richard pointed out that
our users will not want to have their hands held.  Leah said that you
can have a tutorial structure without the handholding.


NOTES

Updating stretchy vectors: Keep the new value in a register until the new
length is written, or update with safe value, change length, update with
real value.

The wrappers could have a bit-vector of pattern bits, rather than a
non-traceable word vector.

If the assertion handler longjmps, the MM can't be used again.

Reserve must be passed the address of a _root_.  [RESERVE_BLOCK doesn't have a 
root.]

Need a long section on roots, how to handle them, and how to debug them.  Base 
on MLWorks run-time experience.


DOC DESIGN

1. There should be an installation guide.
- It may be used by someone who isn't the user (e.g. a sysadmin who wants to 
install the package for a bunch of users).
- It therefore shouldn't discuss the product itself except insofar as it need 
to for installation.
- It should have minimal introductory material.  It should be just enough for 
the installer to do his job.
- Installation guide should include deinstallation details.

2. Contents of the Preface
- Richard said that preface should only contain meta-information about the 
manual.  Conventions are OK.
- Preface should only contain "about the manual" not "about the product".  This 
excludes stuff about the documentation set itself, which is "about the product".

3. Instead of a "QuickStart" guide we could point someone straight at the 
beginning of chapter 2 -- or wherever the start of the practical information 
is.  This reduces the number of documents, which is important for maintenance 
and production of the documentation, as well as the user's desk.



ACTIONS

- HP, release vars, sep. pool classes
- vm, prot, ss for platforms SGI, Alpha, HP, etc.
- more AP protocols
- format with init for alloc
- merge AP and alloc
- What happens if you pass a return parameter address in protected memory?
- Can never condemn buffered segments because there might be a half-allocated 
object in a root (passed back from reserve or alloc) which is invalid and can't 
be fixed.
- malloc drop-in
- CustoMalloc tool
- Scheme evaluator example
- IDs on dialogs (like asserts)
- backtrace on error to be mailed to support
- critical section protocol that prevents "flip" so that references can be 
temporarily hidden
- All pools should support reserve/commit, so that it is the most conservative 
protocol.
- Implement mps_ap_alloc etc.
- Consider merging mps_pool_alloc into mps_ap_alloc(mps_pool_ap(pool)) to 
simplify both documentation and protocols.
- Consider eliminating format->copy.
- Need a good example of an object format.  Maybe two: one using C structures 
and one using word-based scanning, as in MLWorks.  One example must have 
encoded references.
- MPS might be useless for systems integrator because it isn't tolerant.  Is it 
a requirement to be tolerant?  Can we tolerate interface problems while noting 
them, making assertions into warnings and fixing things up as far as possible?  
In release versions, there would just be the fixing up.
- Might want to call the tool the "profiler" to make it understood quickly.
- The MM must be debuggable (or assist debugging) by our customers.  In 
particular, we should expose certain breakpoints, some data structures, etc. so 
that they can diagnose problems.  We must document what's available.
- Must work with Purify.  Must say that we do.  If we do, there's no way anyone 
can mistake us for a Purify competitor.
- Must talk to Clive about the product image and get agreement for a general 
approach which will govern the activities of development, documentation, 
marcomm and sales.
- Product design must provide goals for documentation based on usability and 
marketing requirements: evaluation, etc.

