                      VARIOUS DOCUMENTATION ISSUES
                         meeting.doc.1997-03-12
                             incomplete doc
                             lmb 1997-04-11

INTRODUCTION

.intro: Richard Brooksby and Leah Bateman met at Longstanton House on
1997-03-12 to discuss various documentation issues.


NOTES

.safety.source: GC safety papers are useful sources for what you can
and can't do with references.

.mm-model.work: In the MM model of software, you work to achieve goals
and requirements, not to achieve the functional specification.  [I
assume that the functional spec arises out of the goals and
requirements.]  .mm-model.integ.concept: Conceptual integrity is a key
concept -- at any time, you must be able to answer the question, "Why
did we do that?"

.cont.ex: An example of a contingency plan influencing the design is
the ScriptWorks MM interface.  The MM Group designed this interface so
that the SW Group could use either the old or the new MM behind the
interface.

.var.dist: versions (products) != varieties (libraries) != variants
(records)

.meeting.missing: Richard and I were unable to discuss the following:
   Internal documentation
   Assertions
   Environment
   Doc-book [?]

.MPS.modes: Modes of use -- Different ways in which a user can use the
MM; different configurations (see mail).  Can probably generalize to,
say, "ambiguous vs. exact object formats", various matrices.  These
modes also correspond to levels and pool classes.

.nih.def: NIH - Not Invented Here

.doc.image: The manuals need to look dry and professional, like
engineering documents, to inspire trust.  They need to convey the
appropriate image.  .doc.advoc: We must provide the advocacy we need
in Ch. 1 -- it SHOULD be big.  We need something with the same
characteristics as the Purify testimonials.

.if.platform: The platform interfaces will be pretty much identical.
Do we pull IF-specific material into a separate section, or scatter it
through the doc, or both?  XREFs from chapters to an appendix is
probably best.

.i18n.basic-engl: Look up the Basic English wordlist in the Cambridge
Encyclopedia of Language.

.sys-req.sw: The customer will also need Visual C++ or another
compiler that will talk to our product.

.var.list: There is no definitive list of the product's varieties.
For Dylan, see e-mail.  .var.check: The consistency check checks the
data structures constantly during runtime to make sure they're
behaving as they ought to.

.tag: Tags work backward.  You have to search for tags to go forward.
This way is better because people look at the end product and want
justification, and because it's difficult to go back and create
forward tagging.

.doc.figures.change: We have to ensure that when the product changes,
the figures in the doc also change.

.product.use: How to use the doc yields how to use the product in
these different situations.  Divide the information up by customer
type and point the users towards the correct information.

.files.mpstd.h: mpstd.h needs documenting.  It sets variables
depending on which platform you are using.

.doc.process: Write text-based documentation in Spring; tag it; etc.
Put the actual documentation into HOPE and do version control.  We
need distinct switch-over points, after which we'll output the text,
with tags, from FrameMaker.  I should generate PDF and attach it to
the text file in Spring.  We need meta-designs in Spring for the
boilerplate and style sheet.

.tramp.def: Trampoline: Try and do something, except when there's a
fault; fix it up and then continue.  It's a handler for protection
faults in GC; surround the whole thread with a construct (thread =
something).

[diagram of the trampoline]

.tramp.term: Write a function that goes between the top level and
....; in general, this type of thing is called a trampoline, but that
name isn't good for users; we need a better name, such as "wrapper".

