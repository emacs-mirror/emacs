                  MPS RAMP ALLOCATION PATTERN PROTOCOL
                    protocol.mps.alloc-pattern-ramp
                             incomplete doc
                             drj 1998-06-25

INTRODUCTION

.intro: This document describes the functions and types used in the Ramp 
Allocation Pattern Protocol in the MPS.

INTERNAL NOTES

.source: See mail.drj.1998-06-22.15-07(0) for the original proposal in mail.  
(The design was based (but not explicitly because I couldn't find the 
reference) on Genera's with-ephemeral-mode described in 
mail.ptw.1996-10-25.01-05(0) and mail.ptw.1998-02-12.16-58(0) (and 
mail.ptw.1998-03-17.18-50(0)))

OVERVIEW

.overview: A Ramp Allocation Pattern is a particularly Allocation Pattern (see 
documentation which hasn't been written, but would be 
symbol.mps.c.mps_alloc_pattern_t and friends).  Using Ramp Allocation Patterns 
conforms to the general use of allocation patterns.  (so in particularly a ramp 
allocation is associated with a particular allocation point)

.overview.expect: Ramp Allocations are expected to be used by the Dylan 
compiler to declare the building of large compiler datastructures during the 
compilation of a file which are almost entirely thrown away at the end of 
compilation.


DEFINITIONS

.def.ramp-allocation: "Ramp Allocation" is used to describe a pattern of 
allocation whereby the mutator builds up an increasingly large datastructure 
the live size of which increases until a particularly time at which time most 
of the datastructure is discarded resulting in sharp cutoff and decline in the 
live size.

STUFF

.usage: It's probably only worth declaring a ramp allocation if the expected 
size is much larger than the nursery generation.  The MPS doesn't guarantee to 
change its behaviour anyway (the initial release with this interface does 
nothing, but future releases are expected to try and do something helpful).

.anatomy: A Ramp Allocation has two interesting points: a beginning and an 
end.  .anatomy.beginning: The beginning is the point in time at which the 
mutator beings the ramp allocation.  .anatomy.end: The end is the point when 
the mutator has discarded most of the live object and the live size has 
declined.

.declare.begin: The beginning of a ramp allocation is declared using 
mps_ap_alloc_pattern_begin:
mps_ap_alloc_pattern_begin(an_ap, mps_alloc_pattern_ramp())

.declare.end: The end of a ramp allocation is declared using 
mps_ap_alloc_pattern_end:
mps_ap_alloc_pattern_end(an_ap, mps_alloc_pattern_ramp())

.nest: Ramp allocations on a given allocation point can nest.  
mps_ap_alloc_pattern_end is a declaration that the most recently begun ramp 
allocation on the specified allocation point has ended.

.reset: In case you forgot what you were doing you can reset all declarations 
of all allocation patterns on a particular allocation point:
mps_ap_alloc_pattern_reset(an_ap)


