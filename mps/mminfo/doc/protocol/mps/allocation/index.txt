                        MPS ALLOCATION PROTOCOL
                        protocol.mps.allocation
                             incomplete doc
                            pekka 2000-05-22

[most of this is still missing, but it's trivial]

ALIGNMENT

.alignment.background: Some processors require that you align accesses to 
memory; others just work better if you do.  For example, a double precision 
floating point number on many architectures must be aligned on a double 
boundary (that is, its address must be a multiple of 8).  Alignments of eight 
bytes mean the last three bits are 0, etc.

.alignment.pool-class: As a consequence of this, every pool has an alignment.  
If the pool alignment is eight bytes, then all allocated objects must be eight 
bytes.  If a six-byte object is allocated, two bytes are wasted.  A pool's 
alignment is should be available to the client through the interface, but is 
not [this is probably a bug -- drj 1998-10-20].  Often this does not matter as 
for many pool classes clients can specify the pool's alignment when creating it 
(but crucially not for Pool Class MV).

.alignment.platform: MPS_PF_ALIGN is a C preprocessor symbol defined in mpstd.h 
which defines the MPS's notion of the platform alignment.  The platform 
alignment is the least common multiple (since we assume all alignments are 
powers of 2 this is the maximum) of all alignments on that platform.  If 
objects are allocated at platform alignment, generally everything is allocated 
with no problems, but a lot of space may be wasted.

.alignment.rounding: If the client application allocates memory using an 
allocation function, the function sorts everything out for it.  If it is using 
reserve and commit, it has to round allocations up to the pool alignment.  
Alloc and Init always need the correct alignment -- if the pool size is four 
bytes, then the size variable must be four bytes.

