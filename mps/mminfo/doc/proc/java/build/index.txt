            HOW TO BUILD SUN'S JAVA 1.2 JVM FROM THE SOURCES
                            proc.java.build
                             incomplete doc
                             drj 1999-03-31

INTRODUCTION

.intro: This document describes the procedure for building a new JVM from the 
sources for Sun's Java 1.2 JVM.


CONVENTIONS

.pathname: Where a pathname (filename) appears without other qualification it 
is to be taken relative to the base of the source tree for the Java 1.2 JVM 
provided by sun.


SOURCES

.source.readme: javasrc/README is Sun's description of the build process.


RESOURCES

.req: In order to build the JVM you will need:
.req.os: Solaris 2.5 or Solaris 2.5.1 or Solaris 2.6 running on a SPARC.  
.source.readme claims you need Solaris 2.5.1 or 2.6.  We're obviously on shaky 
ground using 2.5 but it works so far.  The JVM is also designed to work on 
Windows NT and Intel Solaris, but those haven't been tried.
.req.cc: SunSoft Developer Products C compiler version 4.2 (aka Sun Pro C).  
Sun's commercial (not bundled with the OS, available separately for more money) 
C compiler.  See builder.sc(0).  Currently (1999-03-31) this is available on 
zaphod.cam.harlequin.co.uk.
.req.gnumake: Gnumake version 3.71 (or later?).  .source.readme claims you need 
3.74.
.req.jdk: JDK 1.2 binary release for Sparc/Solaris.  This is used to bootstrap.
.req.motif: Motif.  Preferably in /usr/dt
.req.odbcjdbc: JDBC-ODBC Bridge.
.req.hope: HOPE, Harlequin's source code control system.
.req.source: The sources.  These are stored in hope and obtained during the 
build process.


PRE-FLIGHT CHECKS

.check.os: Check the version of the OS by running the command:

  uname -a

.check.os.output: Example output is:

  SunOS zaphod 5.5 Generic_103093-24 sun4m sparc sun4m

It's important that it say "SunOS", "5.5" (or 5.5.1 or 5.6) and "sparc".

check.cc: Check the C compiler by running the command:

  cc -V

.check.cc.output: Example output is:

  cc: WorkShop Compilers 4.2 30 Oct 1996 C 4.2
  usage: cc [ options] files.  Use 'cc -flags' for details

It's important that it begins "cc:" and says "C 4.2" and that it not say:

  ucbcc: WorkShop Compilers 4.2 30 Oct 1996 C 4.2

(beginning with "ucbcc:").  If it starts "ucbcc:" you've found /usr/ucb/cc 
instead which must not be used.  See builder.sc for hints.

.check.gnumake: Check the version of gnumake (well only if you're feeling 
virtuous, it's much less likely to be wrong than anything else) by running the 
command:

  gnumake --version

.check.gnumake.output: Example output is:

  GNU Make version 3.71, by Richard Stallman and Roland McGrath.
  Copyright (C) 1988, 89, 90, 91, 92, 93, 94 Free Software Foundation, Inc.
  This is free software; see the source for copying conditions.
  There is NO warranty; not even for MERCHANTABILITY or FITNESS FOR A
  PARTICULAR PURPOSE.

.check.jdk: Check the version of the JDK by running the command:

  java -version

.check.jdk.output:  Example output is:

  java version "1.2"
  Classic VM (build JDK-1.2-V, green threads, sunwjit)

It's important that it say "1.2".

.check.odbcjdbc: Check the ODBC-JDBC Bridge is installed by running the command:

  pkginfo -l ISLIodbc

.check.odbcjdbc.output: Example output is:

   PKGINST:  ISLIodbc
      NAME:  ODBC (Open DataBase Connectivity) Driver Manager
  CATEGORY:  application
      ARCH:  sparc
   VERSION:  2.11,REV=1.0
   BASEDIR:  /opt
    VENDOR:  INTERSOLV, Inc.
      DESC:  ODBC Driver Manager 2.11 library
    PSTAMP:  alice960205122445
  INSTDATE:  Mar 09 1999 17:45
   HOTLINE:  ODBC Driver Manager is a product of INTERSOLV, for all technical qu
estions or support please contact INTERSOLV.
     EMAIL:  sunsoft@intersolv.com
    STATUS:  completely installed
     FILES:     28 installed pathnames
                27 shared pathnames
                 9 directories
                 6 executables
              3604 blocks used (approx)

if BASEDIR is something other than "/opt" then you'll need to modify the step 
(.shenv.odbc) that sets the ODBC_ALTDIR environment variable below.


CHECKOUT

.co: The sources should be checkd out from hope.  This will create and populate 
a directory called 'javasrc'.  Use the command:

  hope co -compound MMsunjdk_1.2 -branch . -missing-dir create -recursive

(This took about 41 minutes when I tried it.  - drj)



ENVIRONMENT VARIABLES

.shenv: Before you start you need to set the following environments variables:

.shenv.insane:

  INSANE=yes

.shenv.insane.why: This suppresses the error that the build system produces 
when using the release version of the JDK 1.2 binary.  drj is fairly certain 
that the error is bogus in this case.  Subsequent versions of the JDK (or 
indeed perhaps an earlier version?  JDK 1.2fcs?) may not require this variable 
to be set.

.shenv.motif:
  ALT_MOTIF_DIR=/usr/dt

.shenv.motif.why: For the headers.  If it's not in /usr/dt set it to where 
motif is.

.shenv.odbc:
  ALT_ODBCDIR=/opt

.shenv.odbc.why: The location of the odbc-jdbc bridge.  If the BASEDIR entry 
from "pkginfo -l ISLIodbc" is different then set it to that.

.shenv.jdk:
  ALT_BOOTDIR=/u/drj/opt/SunOS5sun4/jdk1.2

.shenv.jdk.why: The version of the JDK compiler used to bootstrap.  
"/bin/javac" appended to the path ought to be the exact location of the 
compiler.


BUILD

.cd: Change current directory to javasrc/build/solaris using the command:

  cd javasrc/build/solaris

.gnumake: Make the target 'world' using gnumake; issue the command:

  gnumake world

(The 'all' target might be better.)


TARGETS

.targets: Other targets to make are (from .source.readme)
  world-clobber (cleans all files from a gnumake world)
  all  (optimized and debug versions of the core JDK)
  ext  (optimized and debug versions of the extensions)
  releasedocs (run javadoc on everything)
  alldocs (run javadoc on everything except sun.*)


BUILDING THE JVM WITH MPS

.mps: It is possible to build the JVM including the MPS.  Indeed some versions 
of the JVM may require this.

.mps.where: The (modified) build system expects to find the MPS and JVM support 
files (stack and object scanners) in a library {something}/lib/libmmsj.a, it 
expects to find the headers in the directory {something}/include/.

.mps.how: Prior to building (or on the command line), the environment variable 
MPSJVM should be set:

  MPSJVM=true

and MPSHOME should name the directory containing the libmmsj.a library file

  MPSHOME=/u/drj/prj/mps-for-java

Now build as normal.

.mps.what: Setting MPSJVM=true causes the compiler to add MPS include 
directories to the include path, causes linking with libmmsj.a, defines the 
symbol JM_MPS in the C preprocessor.

