        REQUIREMENTS OF THE "SHRINK-WRAPPED" MM PRODUCT SOFTWARE
                              req.product
                             incomplete doc
                           richard 1996-07-25

INTRODUCTION


HISTORY

.hist.0: Initial brainstorm created by Richard Brooksby, 1996-07-25, mainly 
working from the product vision set forth in analysis.product(0), which was 
approved by the Memory Management Quartet in meeting.product.1996-07-17.

.hist.1: Merged in potential requirements identified in 
meeting.product.1997-05-14.  nick 1997-05-20

.hist.2: Refined and updated following meeting with Chris Cox and Nick Levine.  
Refined market requirements based on that meeting and added comments indicating 
further work to be done on many others.  richard, nick 1997-05-21


CONVENTIONS

.conv.req: Each requirement is tagged, and the following three lines contain a 
description, category, and source reference respectively.  Source references 
are in decreasing order of relevance.  Most descriptions are implicitly 
prefixed with "The Memory Manager shall...".

.conv.req.cat: Categories are used to determine priorities for work in 
planning, especially in contingency planning.  The categories are:

  critical: The requirement is critical to the project.  If the requirement
            is not met, the project can be said to have failed.

  essential: The requirement is essential and may not be omitted without
             renegotiating the requirements.

  optional: The requirement will be met if at all possible, but failure to
            meet it does not cause the project to fail.

  nice: Meeting the requirements is recognised as a "good thing" and will
        be attempted if the cost is low.

  unknown: The category of the requirement is unknown and needs to be resolved.


DEFINITIONS

.def.mm: "MM" refers to the memory manager to be supplied.  The term includes 
non-software parts of the deliverable.

.def.work: Where it is stated that the MM must "work with" some other 
component, this means that the MM will function correctly and to requirements, 
and will not interfere with the operation of the other component such that it 
no longer meets its requirements.


FUNCTIONS

.fun.malloc: Support the standard C malloc/calloc/realloc/free interface.
  Category: Critical
  Source: analysis.product.req.c

.fun.new: Support the standard C++ new/delete interface.
  Category: Critical
  Source: analysis.product.req.c

.fun.man.man: Support manual memory management.  [Is this not an attribute? 
richard 1997-05-21]
  Category: Essential
  Source: meeting.product.1997-05-14

.fun.man.auto: Support automatic memory management.  ["Release the user from 
the responsibility of freeing"? richard 1997-05-21]
  Category: Essential
  Source: 

.fun.man.mixed: Support mixed manual and automatic memory management.
  Category: Essential
  Source: Meeting between nick and chrisc, 1997-05-21.


Marketing

.fun.mkt.purify.compete: Do not compete with Purify.
  Category: Critical
  Source: Many statements by Clive Harris.  Meeting between nick and chrisc, 
1997-05-21.

.fun.mkt.purify.compl: Complement Purify [This needs to be defined.  
"Complement" in particular.  I guess it means that our software will work with 
Purify (i.e the developer can use both successfully) and that the activities 
are seen as complementing each other.  For the product it implies a lot about 
the marketing position, which needs to be worked out, derived from all these 
requirements.  richard 1997-05-21]
  Category: Critical
  Source: meeting.product.1997-05-14

.fun.mkt.smart-heap.compl: Complement  SmartHeap [our software will coexist 
with SmartHeap]
  Category: Optional [essential in time]
  Source: meeting.product.1997-05-14

.fun.mkt.smart-heap.mapping: Provide mapping functions between SmartHeap calls 
and mps [eg by way of an include file]
  Category: Optional 
  Source: meeting.product.1997-05-14

.fun.mkt.geodesic.compete: Compete with Great Circle! Outshine them!
  Category: Essential
  Source: Meeting between nick and chrisc, 1997-06-04..

ATTRIBUTES

Marketing

.attr.mkt.image: The software must contribute towards the product looking good.
  Category: Unknown
  Source: analysis.product.req.image
  [This needs to be refined.  This covers the marketing requirements to do with 
the
   appeal or attaractiveness of the product.  It's more like a heading.  For 
example,
   using appropriate windowing technology and having the right look-and-feel.
   richard 1997-05-21]


.attr.mkt.usp: The software must contribute to the unique selling propositions 
of the product as a whole.
  Category: Unknown
  Source: analysis.product.req.usp
  [This is another candidate for refinement.  What are the unique selling 
propositions
   going to be?  ROI?  Development time improvements?  Performance 
improvements?  This
   requirement is here to make sure these get listed at some point and 
specified as
   separate requirments, then it can be removed.  richard 1997-05-21]

.attr.mkt.usp.adapt: The software must support the unique selling proposition 
of "adaptiveness" or of being "adaptive".
  Category: Critical [Check with Chris.  Do we really fail completely if we 
don't have this buzzword?  richard 1997-05-21]
  Source: meeting.product.1997-05-14.  Meeting between nick and chrisc, 
1997-05-21.

.attr.mkt.usp.tune: The software must be graphically tunable.
  Category: Critical [Check with Chris.  Do we really fail completely if we 
don't have this? nick1997-05-21]
  Source: Meeting between nick and chrisc, 1997-05-21.

.attr.mkt.build: The software should contribute to the product building markets 
for further memory management products and consultancy.
  Category: Unknown
  Source: analysis.product.req.build
  [This is the requirement that leads us to work on the "levels" idea which 
guides people
   towards coming to Harlequin and asking for custom solutions.  If this is 
removed then
   we simply won't do that.  Talking about _specific_ OEM or consultancy deals 
isn't
   enough.  We could just go around meeting each one without seeing the general 
underlying
   design (and the requirement it must meet).  richard 1997-05-21]

.attr.mkt.impact: The product must have "desk impact", i.e. it must persuade 
the evaluator that they must have the product within a certain amount of time 
[how much?].  [How should we measure this?  richard 1997-05-21]  Chris's 
description is, "You get a copy on your desk, plug it in, and immediately think 
'We must have this.'.".
  Category: Essential
  Source: Meeting between richard and nick, 1997-05-21, based on earlier 
comments by Chris.

.attr.mkt.eval: The product must evaluate well (as defined by .attr.mkt.eval.*).
  Category: Critical
  Source: .attr.mkt.eval.*

.attr.mkt.eval.impress: Must give a good impression within the first hour.  The 
evaluator must be convinced that further investigation is worthwhile.  There 
should be nothing to annoy them in that first hour.  [Measure and test by 
trials.  richard 1997-05-21]
  Category: Critical
  Source: Meeting between richard and nick, 1997-05-21

.attr.mkt.eval.improve: Must have provided net benefit to the evaluator within 
three hours.
  Category: Essential
  Source: Meeting between richard and nick, 1997-05-21

.attr.mkt.eval.convince: Within three hours it must convince the evaluator that 
it will be of net benefit to their project in the longer term, and therefore 
convice them to buy.  [Measure and test by trials.  richard 1997-05-21]  [Three 
hours is roughly the amount of time it takes to find and fix a very small bug, 
so this could be a useful comparison.  gavinm 1997-05-21]
  Category: Critical
  Source: Meeting between richard and nick, 1997-05-21

.attr.mkt.lic: The product must be suitably licensed
  Category: Critical [assumed - nick, 1997-05-30]
  Source: meeting.product.1997-05-07.lic.*



Flexibility

.attr.flex: Flexibility to meet a wide range of customer requirements.
  Category: Unknown
  Source: analysis.product.req.flex, analysis.product.prod.oem.req
  [Needs refining.  I suggest developing this from the set of user scenarios 
that ptw wrote with Clive.  Can we satisfy the user in all these situations?  
Which situations are we trying to provide benefit in?  This is an important 
area to specify, and must not be ingnored because it is woolly at the moment.  
See also analysis.product.market.segs.  richard 1997-05-21.]


Reliability

.attr.rel: "Rock solid" reliability.
  Category: Critical
  Source: analysis.product.req.reliable
  [What we need here is a way of measuring this attribute.  How reliable?  How 
do we specify?  Something we've used in EP is "minimum time between failures" 
but it's not clear how useful this is (see req.epcore.attr.rel.mtbf).  It can 
be tested statistically. richard 1997-05-21]


Performance

.attr.perform.benchmarks: The product must benchmark well (as defined by 
.attr.perform.benchmarks.*)
  Category: Critical
  Source: attr.perform.benchmarks.*

.attr.perform.benchmarks.SmartHeap: As good as SmartHeap on their benchmarks.
  Category: Essential
  Source: meeting.product.1997-05-14

.attr.perform.benchmarks.best: Better than SmartHeap (and any other competition 
we identify) on our own benchmarks. [Whatever these should be. But less 
artifical then SmartHeap. nick 1997-05-21]
  Category: Critical
  Source: meeting.product.1997-05-14

.attr.perform.benchmarks.publish: Our benchmarks to be described in sufficient 
detail that they can be reproduced - ideally the code to be published.
  Category: Essential
  Source: meeting.product.1997-05-14



Adaptability

.attr.adapta.customer: The MM technology must be adaptable so that it can be 
changed to meet a wide range of customer requirements at low cost.
  Category: Unknown
  Source: analysis.product.req.adapt, analysis.product.prod.oem.req
  [Needs refining.  nick 1997-05-21]

.attr.adapta.target: The MM technology should be cheaply retargettable to new 
development platforms.
  Category: Essential 
  Source:  Meeting between nick and chrisc, 1997-05-21. 
  [Original requirement was to use off-shelf gui toolkits, but that looks like 
a solution to a partial problem.  nick 1997-05-21]


Usability

.attr.use.roi: Return on investment at each stage of involvement.
  Category: Critical
  Source: analysis.product.req.roi, meeting.product.1997-05-14

.attr.use.level.1: Dropin level supports evaluation requirements 
(attr.mkt.eval.*)
  Category: Critical
  Source: analysis.product.prod.sw.eval, meeting.product.1997-05-14

.attr.use.level.1.partial: Dropin successful for applications too large to 
fully recompile in the evaluation period.
  Category: Critical
  Source: meeting.product.1997-05-14

.attr.use.level.2or3: At least one level offering more sophisticated choice 
than dropin.
  Category: Critical
  Source: analysis.product.prod.sw.lib, meeting.product.1997-05-07

.attr.use.level.2and3: Precisely two levels beyond dropin (simple / advanced) 
offering increasing sophistication.
  Category: Essential
  Source: meeting.product.1997-05-14
  [This looks like a solution. But it has strong elements of "how it feels" - 
so unsure, this may or may not be a requirement - nick 1007-05-21.]

.attr.use.events: Event dumper (in whatever format)
  Category: Optional
  Source: meeting.product.1997-05-14

.attr.use.live: Live measurement (at least on course grain), with dynamic 
control.
  Category: Essential
  Source: meeting.product.1997-05-14, meeting between nick and chrisc, 
1997-05-21.

.attr.use.live.grain: Fine grain measurement.
  Category: Optional
  Source: meeting.product.1997-05-14, meeting between nick and chrisc, 
1997-05-21.


Rapid deployment

.attr.deploy.rapid: Rapid deployment for OEMs.  [Underspecified.]
  Category: Optional
  Source: analysis.product.req.rapid


DESIGN CONSTRAINTS


Environment

.dc.env.c: With respect to the C language:

.dc.env.c.reasonable: The drop-in interface will work with all reasonable uses 
of calloc, free, malloc, and realloc.
  Category: Essential
  Source: meeting.product.1997-10-22

.dc.env.c.reserved: We will document symbols reserved by the MPS, and what we 
consider to be (un)reasonable use of calloc, free, malloc, and realloc.
  Category: Essential
  Source: meeting.product.1997-10-22

.dc.env.c.no-warn: It will be possible to use all facilities of the product at 
the highest checking levels of the various platform compilers without 
generating warnings.
  Category: Nice
  Source: mail.gavinm.1997-10-22.14-33.1, mail.gavinm.1997-10-23.11-12

.dc.env.ansi-c: With respect to standard.ansic (the ANSI/ISO 9899-1990 standard 
and normative addenda):
  Source: meeting between nick and chrisc, 1997-06-03

.dc.env.ansi-c.conform: Conformant programs shall be able to use all the 
facilities of the product.
  Category: Critical
  Source: meeting.product.1997-10-22

.dc.env.ansi-c.strict: Strictly conformant programs shall be able to use the 
dropin facilities of the product without modification.
  Category: Critical
  Source: meeting.product.1997-10-22

.dc.env.cpp: With respect to the C++ language:

.dc.env.cpp.reasonable: The drop-in interface will work with all reasonable 
uses of new, delete, and their derivatives.
  Category: Essential
  Source: meeting.product.1997-10-22

.dc.env.cpp.reserved: We will document symbols reserved by the MPS, and what we 
consider to be (un)reasonable use of new, delete, and their derivatives.
  Category: Essential
  Source: meeting.product.1997-10-22

.dc.env.cpp.no-warn: It will be possible to use all facilities of the product 
at the highest checking levels of the various platform compilers without 
generating warnings.
  Category: Nice
  Source: mail.gavinm.1997-10-22.14-33.1, mail.gavinm.1997-10-23.11-12

.dc.env.iso-cpp: With respect to paper.iso96a and successors (the emergent 
ANSI/ISO standard for C++):
  Source: meeting between nick and chrisc, 1997-06-03

.dc.env.iso-cpp.conform: Conformant programs shall be able to use all the 
facilities of the product.
  Category: Critical
  Source: meeting.product.1997-10-22

.dc.env.iso-cpp.strict: Strictly conformant programs shall be able to use the 
dropin facilities of the product without modification.
  Category: Critical
  Source: meeting.product.1997-10-22


Operating Environment

.dc.env.great-circle: Work with Geodesic's Great Circle
  Category: Optional
  Source: mail.chrisc.1997-06-09.13-32

.dc.env.smart-heap: Work with MicroQuill's SmartHeap (rival.smartheap)
  Category: Optional
  Source: mail.chrisc.1997-06-09.13-32

.dc.env.purify: Work with Pure's Purify (rival.purify)
  Category: Essential
  Source: mail.chrisc.1997-06-09.13-32

.dc.env.boehm: Work with Hans Boehm's conservative collector (rival.boehm)
  Category: Optional
  Source: mail.chrisc.1997-06-09.13-32


Platforms

.dc.plat.w3i3mv: Operate on Win32 (Windows 95 and Windows NT): devel on Intel 
i486 and up,  end applications deliver on Intel i386 and up, Visual C++.
  Category: Critical
  Source: analysis.product.req.platform.win
  [Is this overspecified - ie any other compilers? - nick 1997-05-21]

.dc.plat.sos8gc: Operate on Solaris 2.4+, SPARC, gcc. 
  Category: Essential
  Source: analysis.product.req.platform.unix
  [Is this overspecified - ie any other compilers? One hopes not. - nick 
1997-05-21]

.dc.plat.sos8cc: Operate on Solaris 2.4+, SPARC, cc.
  Category: Essential
  Source: analysis.product.req.platform.unix


.dc.plat.s760mw: Operate on Mac OS 7, Motorola 68K, Metrowerks.
  Category: Nice
  Source: analysis.product.req.platform.mac

.dc.plat.s860mw: Operate on Mac OS 8, Motorola 68K, Metrowerks.
   Category: Nice
   Source: analysis.product.req.platform.mac

.dc.plat.s7ppmw: Operate on Mac OS 7, PowerPC, Metrowerks.
  Category: Nice
  Source: analysis.product.req.platform.mac

.dc.plat.s8ppmw: Operate on Mac OS 8, PowerPC, Metrowerks.
  Category: Nice
  Source: analysis.product.req.platform.mac

.dc.plat.sus8gc: Operate on SunOS 4, SPARC, GCC.
  Category: Nice
  Source: analysis.product.req.platform.unix

.dc.plat.sus8cc: Operate on SunOS 4, SPARC, CC.
  Category: Nice
  Source: analysis.product.req.platform.unix

.dc.plat.hp: Operate on HPs.  [Underspecified.]
  Category: Nice
  Source: analysis.product.req.platform.unix

.dc.plat.sgi: Operate on SGIs.  [Underspecified.]
  Category: Nice
  Source: analysis.product.req.platform.unix

.dc.plat.alpha: Operate on DEC Alphas. [Underspecified.]
  Category: Nice
  Source: analysis.product.req.platform.unix


PLANNING

.plan:


