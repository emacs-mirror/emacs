              THE DESIGN OF THE MPS DESCRIPTION FUNCTIONS
                          design.mps.describe
                             incomplete doc
                            nickb 1997-07-21

Sketchy notes:

Each ADT Foo in the MPS has a description function FooDescribe(Foo foo, 
mps_lib_FILE *stream), which uses WriteF (see design.mps.writef) to output a 
description of the Foo to the specified stream. The output should be useful to 
MPM developers in analyzing and debugging the Foo.  If there are complex 
bitfields &c in the ADT, they should be presented in a useful way: the 
description functions are often called from debuggers when fiddling around with 
bitfields and pointers may not be very easy.

The description functions are responsible for describing 'owned' structures. 
There's a convention for describing in such a way that nested structures can be 
easily navigated: FooDescribe should print

  Foo (0xdeadbeef) 97 {
    ...description of contents comes here...
  } Foo (0xdeadbeef) 97

where 0xdeadbeef is the pointer to the Foo and 97 is its serial.

.robust: Description functions should be as robust as possible, i.e., they 
should not error on broken structures.  .robust.justify: This is so that they 
can be used from a debugger with possibly broken arguments.  .robust.noaver: 
Explicit use of AVER is forbidden; if the function finds the structure is so 
broken it cannot continue the description, it should just return ResFAIL.  
.robust.check: The Foo argument should be checked like this:
  if(!CHECKT(Foo, foo)) return ResFAIL;

