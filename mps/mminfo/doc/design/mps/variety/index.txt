                 DESIGN OF USE OF VARIETIES IN THE MPS
                           design.mps.variety
                             incomplete doc
                           gavinm 1997-08-13

INTRODUCTION

.scope: This document describes the design underlying the various varieties of 
the MPS.  [Actually, it just describes the architecture, at the moment.  pekka 
2000-06-20]

.source: mail.gavinm.1997-08-08.10-33 gives an outline of the analysis.  [Fold 
it in.]


History

.hist.0: Gavin described the architecture with he, ce, wi, hi, ti.  1997-08-13


OVERVIEW

.overview: The MPS library and its associated executables can all be built in 
several different varieties.  All varieties have essentially the same 
functional behavior, but may have different performance attributes.  Varieties 
are classified by two orthogonal characteristics: paranoia about 
reverse-engineering; and debugging features that slow the MPS down.

.overview.paranoia: To prevent reverse-engineering, we want to remove all 
information about internal workings from deliverables shipped to external 
customers.  On the other hand, this information is useful to us for debugging, 
backtraces, and profiling.  Hence we have external varieties that are paranoid, 
and internal varieties that are not.  The paranoia is indicated by the second 
letter of the variety name (E or I).  See .def.strip for more details.

.overview.slow: There are currently three categories of debugging features that 
slow the MPS down: C compiler debugging features (lack of optimization, more 
information in stack frames and function objects), assumption checking (see 
design.mps.check), and telemetry (see design.mps.telemetry).  They are useful 
for robustness and (tool) usability, and we want to encourage our customers to 
use them, despite the cost.  We use heat as a metaphor for their inclusion: Hot 
and White-hot (see .variety.wi) indicate high speed; Cool indicates high 
robustness and (tool) usability.  Telemetry is temporarily an addition to this 
scale (see .variety.ti).  Heat is indicated by the first letter of the variety 
name (W, H, C, or T).

[Checking should perhaps be divided into client and internal checks.  The 
problem is that not all client checks can conveniently be performed in the 
interface.  pekka 2000-06-20  Perhaps internal checks should only be done in 
internal versions.  The assert texts seem to reveal quite a lot about the 
implementation.  pekka 2000-06-22]

[If we can make the maximum (not default) speed of the debug variety 
acceptable, we can use it for telemetry.  pekka 2000-06-22]


DEFINITIONS

.def.old: What I describe here as "old" is what was on the trunk prior to 
1997-08-27.

.def.current: What I describe as "current" (or without qualification) is what 
is now on the trunk.

.def.future: What I describe as "future" is currently unscheduled, and subject 
to change.

.def.switch: "Switchable" means controllable dynamically, currently by global 
flags, and possibly in future by user functions.

.def.telemetry.internal: Internal telemetry is the logging of events into 
internal buffers for traceback (in future) and post-mortem.  This is quite 
cheap and is consequently not switchable.  Currently there is one internal 
buffer for a single event, but in the future it will be multiple events, 
divided by kind.

.def.telemetry.external: External telemetry is the logging of events through 
the plinth for tool use.  This is relatively expensive and will always be 
switchable when available.

.def.strip: "Stripped" currently means without debugger information that is 
required for single stepping, and that facilitates reverse-engineering.  In the 
future, "stripped" may include library symbol stripping.


REQUIREMENTS

[missing]


VARIETIES

.variety: The following eight varieties are available:
  variety.wi: White-hot Internal
  variety.hi: (red) Hot Internal
  variety.ci: Cool Internal
  variety.ti: Telemetry cool Internal
  variety.we: White-hot External
  variety.he: (red) Hot External
  variety.ce: Cool External
  variety.ii: (who knows)

See the variety documents for details, but note that:
  .variety.strip: The external varieties are stripped.
  .variety.telemetry: variety.ti is currently the only one to have telemetry; 
that variety will disappear with future work.
  .variety.white-hot: variety.wi only exists as a performance benchmark.  
[Probably not true, anymore.]
  .variety.hot: variety.hi and variety.he should be no more than 10% slower 
than variety.wi.
  .variety.cool: variety.ci and variety.ce should be no more than 3 times 
slower than variety.wi.


INTERNAL CONTROL

.macro: Inside the MPS, the varieties are converted into definition of the 
following macros:
                     wi  hi  ci  ti  he  ce
  MPS_HOT            Y   Y   .   .   Y   .
  MPS_HOT_WHITE      Y   .   .   .   .   .
  MPS_HOT_RED        .   Y   .   .   Y   .
  MPS_COOL           .   .   Y   Y   .   Y
  EVENT              .   .   .   Y   .   .

Note that MPS_HOT_WHITE and MPS_HOT_RED are subclasses of MPS_HOT; it is often 
unnecessary to distinguish them.

.macro.note: Note that the internal/external division is not detectable.  The 
code is intended to be functionally identical.

.control.check: To control the checking level in cool varieties, set the global 
"CheckLevel", to one of "CheckNONE", "CheckSHALLOW", or "CheckDEEP".  The 
default is currently "CheckSHALLOW".  This controls how deeply the check 
methods check.  This control is likely to change.

.control.check.gdb: For example, in GDB, the checking level can be set via:

  break ArenaCreateV
  run
  delete 1
  set CheckLevel=CheckDEEP
  continue


SUMMARY

.summary:
          Checking         Current Telemetry  Future Telemetry  Stripped
     --------------------  -----------------  ----------------  --------
hi   Subset, unswitchable  None               Subset, internal  No
he   Subset, unswitchable  None               Subset, internal  Yes
ci   All, switchable       None               All, switchable   No
ce   All, switchable       None               All, switchable   Yes
ti   All, switchable       All, switchable    Will not exist    No
wi   None                  None               None              No

.summary.build: The default build will currently build three varieties: 
.variety.hi, .variety.ci, and .variety.ti.  These are sufficient for normal 
development, and release to internal customers; they meet the requirements that 
the old five varieties did.  External varieties for external customer releases 
(.variety.he and .variety.ce) and the White Hot benchmark (.variety.wi) can be 
built explicitly (see proc.build).  In future, there will be two varieties 
built by default.  [Should there be a target for building all varieties?  
GavinM 1997-08-21] 
[That's right: variety.we and variety.ii don't fit the plan.  pekka 2000-06-22]


FUTURE

.future: Future development is likely to see the following happen:
  - Merge in of telemetry variety;
  - Finer control of checking;
  - Check method invocations distinguished, to prevent repeated checking of 
high level objects;
  - Check methods receiving check level parameter;
  - Complete but infrequent checking.

