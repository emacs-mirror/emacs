                DESIGN OF THE IDENTIFIER LENGTH CHECKER
                        design.buildsys.idlench
                             incomplete doc
                             drj 1998-11-04

INTRODUCTION

.intro: This document describes the design for a program to check the length of 
identifiers.

.readership: Intended to be read by any MM developer.

.program: The program is MMsrc!idlench.awk(.)


REQUIREMENTS

.req.violate: Must be able to catch violations of C guidelines on identiefier 
length (see guide.impl.c.naming(5).ident.length).

.req.truncate: Ensure that the Dylan debugger function list (see req.dylan(6)
.prot.debug and proc.release.dylan.debug.fn-list(0)) does not contain truncated 
names.


INPUT

.input: The program expects as input files that are the output of cxref.


OUTPUT

.output: The program emits a list of names appearing in the 3rd field of the 
output (the FUNCTION field) that completely fill the field.  Duplicate names 
are not emitted.  If cxref is invoked such that the FUNCTION is one longer than 
the maximum allowed length then the program will emit the names that exceed the 
maxmimum allowed length.


DESIGN

.awk: The program is written in awk.  It happens to be convenient for the sort 
of processing that it does.  An awk man page (including a specification) can be 
found at http://www.opengroup.org/onlinepubs/7908799/xcu/awk.html.  This is 
slightly problematic because not all versions of awk are the same.  This 
program requires a UNIX98 compatible awk.  Some suggestions are included in 
comments in the program so you might try there.

.cxref.format: (see the cxref(1) man page for details) The output of cxref 
consists of a series of lines.  .cxref.format.line1: The 1st line contains the 
name of the file which was processed by cxref (a C program).  
.cxref.format.line2: The 2nd line contains column headings for the 4 fields in 
the remainder of the file (NAME, FILE, FUNCTION, LINE).  .cxref.format.rest: 
The rest of the file contains names and where they are used and defined.  The 4 
fields are fixed width (specified when invoking cxref).

.non-blank: The program works by examining the last character of the FUNCTION 
field.  If this character is not blank (not a space character) then the 
function name is assumed to be too long and is printed out.  There is a 
mechanism for removing duplicate names from the output.

.function.why: The FUNCTION field is used because that is the field used to 
create the dylan debugger function list.

.width: The position and width of the FUNCTION field is determined by the 
positions of the column headings for FUNCTION and LINE where they appear on the 
2nd line (.cxref.format.line2)

