                      MALLOCDEBUG.APP FOR MACOS X
                         rival.mallocdebug.app
                             incomplete doc
                            pekka 2000-06-02

MallocDebug.app is a replacement for the system malloc of MacOS X, that 
provides a host of debugging features with a nice GUI.

This is from 
<URL:http://www.stepwise.com/SpecialCoverage/WWDC2000/Performance.html>:

"MallocDebug.app was shown next. This application launches an external process,
 and displays all allocated memory -- every single malloc node, with a stack
 backtrace from where each was created. It can be used to find out which regions
 have been underrun or overrun, which functions requested large chunks of
 memory, and to find memory leaks.

 It works by replacing the stock malloc() and related functions with its own 
special
 versions. Relinking the target application is not required -- the special 
malloc()
 version is linked in via a dynamic library, as on Mac OS X Server.

 The main display shows all allocated nodes in a browser, with the amount of
 memory allocated by each "tree" also shown. In Standard mode, the browser
 shows the top of the call stack in the first column, and in Inverted mode the
 malloc() calls are in the first column (i.e. it shows the stack from the 
bottom up).
 Marks can be set to display only nodes allocated after the mark was set.

 MallocDebug can also display a list of "trashed" nodes, i.e. buffers that have 
either
 been overrun or underrun. It does this by allocating an extra 8 bytes for each
 malloc() call and inserting the integers 0xDEADBEEF and 0xBEEFDEAD at the
 beginning and end of the buffer. If either of those values are changed, then 
the
 node is marked as trashed.

 Memory leaks are detected in the same fashion as the NEXTSTEP version did --
 memory is searched for pointers to each malloc'ed node. Any nodes that no
 pointers are found for is considered a leak. In general this does pretty well, 
but it
 can result in some false positives if programs don't keep a pointer to the 
head of a
 malloc'ed region. In these cases (there are several in the system libraries), 
nodes
 can be marked as such and will be removed from the display. Apple is working on
 improvements in this area.

 It is also possible for some real memory leaks to not be found. If a random 
integer
 happens to have the same value as a node pointer, then that node will not show 
up
 even if it is really a leak. Leak cycles (e.g. A has a pointer to B, B has a 
pointer to
 A, but nothing else has a pointer to either) are also not found, since 
pointers exist
 for all of their nodes. Similarly, only the top node of a tree of leaked nodes 
will be
 found. Because of this, all leaked nodes should be carefully scrutinized, 
because a
 seemingly small leak may just be the tip of the iceberg.

 Occasionally applications will crash under MallocDebug but run fine normally. 
This
 is typically indicative of accessing freed memory, as MallocDebug fills 
free()'ed
 buffers with 0x7F instead of leaving it alone. If an application crashes with a
 reference to 0x7f7f7f7f, then this is what happened.

 Currently, MallocDebug logs some extra information to the console, so it is a 
good
 idea to have the system console running when using MallocDebug. Apple is
 working on ways of providing an interface to this information in the UI. I 
think it
 had to do with doubly-freed memory, but details weren't mentioned."


