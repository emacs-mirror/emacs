                      DESCRIPTION OF MPS CONCEPTS
                        doc.mps.ref-man.concepts
                             incomplete doc
                             lmb 1997-05-28

.mm: The Memory Manager

A library that you use to manage memory.  This term is interchangeable with MPS.

.arena: Arenas

Objects that represent the state of the MPS. 

You start a session with the MPS by making an arena and end the session by 
destroying 
the arena.  Even if you do not destroy it, it is guaranteed not to hang on to 
resources; but it is better to destroy it, to finish off properly.  Before 
destroying the arena, you must first destroy all objects and data in it.

Other types of objects are created "in the arena".  They are part of the world 
within the arena, and may interoperate with each other.

The MPS has a multiple arenas policy.  It might be useful to have two active 
arenas and to try different things out in them.  The maximum number of arenas 
that the system can support is around 10.  Using multiple arenas is an advanced 
technique.  For more information, see [xref].

Arenas do not interact.  However, they may conflict with each other in terms of 
resources.

.client-app:  Client application

No definition available.

.object.mps: MPS object

A single block of memory allocated from the MPS.

.object.client: Client object

An object created by the client application.

.pool-class: Pool class

Code that dictates an MPS policy.  Different pool classes are suitable for 
different purposes.  At the moment, there are five pool classes; we hope to 
ship more in future.  For information on the individual pool classes, see the 
Pool Class Catalog.

.policy: Policy

A set of rules for handling program objects and memory blocks.  Some examples 
of policies are:

   -- Whether the pool class garbage collects or not.
   -- Whether the formats of the objects need to be known in advance.

.alloc: Allocating

The act of finding a block of memory of a certain size on request.

.free: Freeing

The act of recycling a block of memory for later reuse.

.pool: Pool

A pool class object plus parameters; a set of allocated memory blocks that 
behave according to class.  [Need to choose one definition and refine it.]  The 
blocks may contain client objects; they are allocated and formatted by 
[what?].  A pool is managed using a particular policy and lives in an arena.  
Multiple pools can coexist in one arena.

pool-alloc: Pool allocation

No definition available.

.reference: Reference

.ref: A reference represents potentially shared access to an object.  In 
typical languages and runtime systems, a reference will be represented as a 
"pointer" -- that is, the address of the object in memory.  Sometimes a 
reference contains more information, such as a type and a length.

.ref.c: The MPS C interface admits only one representation of a reference.  A 
reference is represented by an object of type "void *" which, when cast to a 
suitable type, points to the base of the object.  The pointer returned by 
mps_alloc and mps_reserve is a reference to the object allocated.

.ref.represent: The client application is free to represent references in any 
way,
the only restriction being that the client application should be able to 
"decode" a
reference from the client representation into the MPS C interface 
representation and "encode" a reference from the MPS C interface representation 
into the client representation.

.ref.example: An example encoding might be to "tag" pointers.  A client 
application might wish to distinguish between a pointer and an integer purely 
by their representations.  On a byte-addressed architecture where pointers are 
aligned to 4-byte boundaries, one way to achieve this would be to add a 
constant offset (between 0 and 3) to all pointers, and multiply all integers by 
4 and add a different constant offset (note that this reduces the range of 
available integers).

Concretely, imagine we represented pointers using offset 2 and integers using 
offset 1:

Pointer to object at address 0x0008:
   0x000a

The integer 8:
   0x0021 (8*4 + 1)

Note that it is possible to easily distinguish between pointers and integers 
and to easily convert between the client application's pointer representation 
and the MPS C interface representation.

.format: Format

An MPS object that allows you to tell the MPS how client objects are laid out.  
Some pool classes require formats; these are called "formatted pool classes" 
and are generally the pool classes that include garbage collection. 

You must tell the MPS the format.  For information on how to do this, see 
[xref].

.alloc-point: Allocation point

An object that allows your application to do fast in-line groups of 
allocations.  The MPS hands over a block of memory to your application for 
allocation, with the requirement that your application obey a certain 
protocol.  For more information, see [xref].

.root: Root

An MPS object that you must create to tell the MPS what objects are assumed to 
be alive.  The MPS assumes that some things are alive, such as registers.  You 
must explicitly declare that other objects are alive. 

.thread-reg: Thread registration

An MPS object that you must create if you are using threads, to tell the MPS 
what threads are around.  For information on how to do this, see [xref].

.loc-dep: Location dependency

An MPS object that tells the client application when client objects have been 
moved.  Some pool classes move objects around and change the objects' 
addresses.  For more information on using location dependencies, see [xref].

.reg-file: Register file

No definition available.

.tracing:  Tracing

The act of following the chains of references from the roots to find all the 
objects reachable in this way.  We typically do this as a part of a collection, 
in order to find the objects that aren't garbage.

.scan: Scan

Locating all the references in an object and fixing them (q.v.).  The MPS does 
this when it needs to examine (and possibly modify) references, for example, as 
a part of tracing (q.v.).

.fix: Fix

This is an abstract term designating the operation that we're performing on 
each reference while scanning (q.v.) an object.  Typical things that the MPS 
might do are scanning the object that the reference points to (as a part of 
tracing) and updating the reference (as a part of a moving GC).  [This is not 
very clear: the name "fix" is not well-chosen, and we'd be perhaps better off 
not trying to make it a separate idea, just describe it as a part of a scan 
method.  Pekka 1998-01-13]

.opaque-adt: Opaque ADT

An ADT that you may not know the internals of.  We cannot support code that 
depends on the internals of an opaque ADT.

.trans-adt: Transparent ADT

An ADT that you may know the internals of.  For information on the internal 
structure of transparent ADTs, see [xref].

.gen-method: Generic method

No definition available.

.protocol: Protocol

No definition available.

collected:  Collected

No definition available.

