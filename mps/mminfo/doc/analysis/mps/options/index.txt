            ANALYSIS OF OPTIONAL ARGUMENT PASSING MECHANISMS
                          analysis.mps.options
                             incomplete doc
                           richard 1997-02-17

INTRODUCTION

.intro: This document analyses various methods of passing optional arguments to 
the MPS.

.readership: This document is intended for MPS developers.


Document History

.hist.0: Draft created by Richard Brooksby <richard> in response to mail debate 
about keyword argument design (design.mps.keyargs).


GOALS

The goal of an optional argument passing mechanism is to allow the caller of a 
function to request behaviour, but not be burdened with specifying it if it is 
not required, while maintaining maximum durability and flexibility of the 
interface.


REQUIREMENTS


SOLUTIONS


Keyword Arguments (keyargs)

Usage synopsis:

  foo(<arg0>, <arg1>, ..., <arg[args-1]>,
      <key0>, <key0 arg0>, <key0 arg1>, ..., <key0 arg[key0args-1]>,
      <key1>, <key1 arg0>, <key1 arg1>, ..., <key1 arg[key1args-1]>,
      ...
      KeyEND,
      <vararg0>, <vararg1>, ..., <vararg[varargs-1]>)

Usage examples:

  foo(bar, baz, KeyEND);

  foo(bar, baz,
      KeySPONG, (void *)spong_arg1, (void *)spong_arg2,
      KeyWIBBLE,
      KeyEND);

  format("Hello: %d %s\n",
         KeySTYLE, (unsigned long)(FmtStyleBOLD | FmtStyleITALIC), KeyEND,
         number, string);

Declarations:

  #define KeySPONG   ((Key)0xCE325B96)
  Res Foo(Bar bar, Baz baz, ...)
  {
    <key parsing loop>



Abstract Option Structures

Usage synopsis:

  FooOpt fooOpt;

  res = FooOptCreate(&fooOpt);
  if(res != ResOK) return res;
  FooOptSetKey0(fooOpt, <key0 arg0>, <key0 arg1>, ..., <key0 arg[key0args-1]>);
  FooOptSetKey1(fooOpt, <key1 arg0>, <key1 arg1>, ..., <key1 arg[key1args-1]>);
  ...
  Foo(<arg0>, <arg1>, ..., <arg[args-1]>,
      fooOpt,
      <vararg0>, <vararg1>, ..., <vararg[varargs-1]>);
  FooOptDestroy(fooOpt);

Usage examples:

  foo(bar, baz, FooOptDefault());

  FooOpt fooOpt;
  res = FooOptCreate(&fooOpt);
  if(res != ResOK) return res;
  FooOptSetSpong(fooOpt, spong_arg1, spong_arg2);
  FooOptSetWibble(fooOpt);
  foo(bar, baz, fooOpt);
  FooOptDestroy(fooOpt);

  FormatOpt formatOpt;
  res = FormatOptCreate(&formatOpt);
  if(res != ResOK) return res;
  FormatOptSetStyle(formatOpt, FmtStyleBOLD | FmtStyleITALIC);
  format("Hello: %d %s\n", formatOpt,number, string);
  FormatOptDestroy(formatOpt);


Concrete Option Structures

Usage synopsis:

  FooOptStruct fooOptStruct = FooOptDEFAULT;
  fooOptStruct.<key0> = TRUE;
  fooOptStruct.<key0name0> = <key0 arg0>;
  fooOptStruct.<key0name1> = <key0 arg1>;
  ...
  fooOptStruct.<key0name[key0args-1]> = <key0 arg[key0args-1]>;
  fooOptStruct.<key1> = TRUE;
  fooOptStruct.<key1name0> = <key1 arg0>;
  fooOptStruct.<key1name1> = <key1 arg1>;
  ...
  fooOptStruct.<key1name[key1args-1]> = <key1 arg[key1args-1]>;
  ...
  Foo(<arg0>, <arg1>, ..., <arg[args-1]>,
      &fooOptStruct,
      <vararg0>, <vararg1>, ..., <vararg[varargs-1]>);

Usage examples:

  foo(bar, baz, FooOptNONE);

  FooOptStruct fooOptStruct = FooOptDEFAULT;
  fooOptStruct.spong = TRUE;
  fooOptStruct.spong_arg1 = spong_arg1;
  fooOptStruct.spong_arg2 = spong_arg2;
  fooOptStruct.wibble = TRUE;
  foo(bar, baz, &fooOptStruct);

  FormatOptStruct formatOptStruct = FormatOptDEFAULT;
  formatOptStruct.style = TRUE;
  formatOptStruct.style_arg1 = FmtStyleBOLD | FmtStyleITALIC;
  format("Hello: %d %s\n", &formatOptStruct, number, string);


SOLUTION ANALYSIS


CONCLUSION



