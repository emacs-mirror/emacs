                     ANALYSIS OF THE REVIEW PROCESS
                            analysis.review
                             incomplete doc
                           gavinm 1996-11-20

[This a a place to put the ideas that occur to me, until I get around to a 
proper analysis -- GavinM]
[This document wanders between discussing review in general, and review of 
implementations.]

GOALS

.goal: To quote process.review:
The first objective of review is to identify and correct major defects.  
Secondly, but more importantly, review should identify and remove the causes of 
defects.

.goal.major: To identify and remove major defects.  [To improve the quality of 
products?]

.goal.process: To improve process so that major defects do not reoccur.

.goal.quality: To determine the quality of products.  


REQUIREMENTS

.req.trunk: The tip of the trunk will be of known quality (.goal.quality).


PROBLEMS WITH EXISTING PROCESS

.prob.backlog: There is such a backlog of unreviewed documents, that we have no 
hope of meeting .req.trunk in the near future.

.prob.change: Documents are often modified (on the trunk) between review and 
exit, so the resulting merge is not, strictly speaking, accepted.

.prob.improve: Taking immediate action on improvement suggestions (on the 
trunk) causes documents to become no longer accepted.

.prob.minor: Minor changes (including improvement suggestions) are not worth 
branching for, and are hence done on the trunk.

.prob.branch: Development branches are merged and checked into the trunk before 
review.

.prob.simul: Many changes, such as type or interface changes, require 
simultaneous change to more than one file.  An edit may therefore require 
changes to many other files before the revised product document can be checked 
in.

.prob.edit.delay: Often, the editting of a document is delayed consierably by 
other pressures.  See also .prob.change.

.prob.edit.hard: Some issues are hard to solve, and may require extensive 
consultation.


SOLUTION IDEAS

.idea.branch: Have review branches, and take some special action for 
improvement suggestions.

.idea.approval: Have a lighter weight mechanism for assessing whether minor 
changes:
  - Do not reduce the quality of the document (permit, whilst retaining 
accepted status);
  - Have an unknown effect of the quality of the document (become unaccepted/go 
to review);
  - Definitely reduce the quality of the document (reject change, with reason).

.idea.line: Track the mapping of line numbers across changes, and which lines 
are changed.  Deduce and track the status of each line.  How does this deal 
with deletion?

.idea.decl: Detect within the code each declaration of a function, type, tag, 
macro, or whatever, together with associated comments.  Track changes to these 
and deduce and track their status.  How does this deal with deletion?

.idea.page: Divide the documents up into "pages", using existing sections where 
available.  Tag these pages parseably. Track changes to these pages and deduce 
and track their status.

.idea.team: Assign more than one person (probably two) as Editor; acting as a 
team they can proceed much faster and resolve hard issues better 
(.prob.edit.hard).

See also mail.gavinm.1996-11-11.14-03.

