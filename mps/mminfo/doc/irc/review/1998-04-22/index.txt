                    #REVIEW ON 1998-04-22 WEDNESDAY
                         irc.review.1998-04-22
                             incomplete doc
                           gavinm 1998-04-22

.logbot.00-05-08: PART

.logbot.00-05-12: JOIN

.logbot.00-05-12.1: This channel is logged to irc.review.1998-04-22

.logbot.00-05-12.2: Now that I have my ``APPLE,'' I comprehend COST ACCOUNTING!!

.ptw.14-43-52: JOIN

.logbot.14-43-52: This channel is logged to irc.review.1998-04-22

.logbot.14-43-52.1: Yow!  Those people look exactly like Donnie and Marie 
Osmond!!

.ptw.14-44-21: I always imagined myself more of a Peter Fonda

.gavinm.14-47-32: JOIN

.logbot.14-47-32: This channel is logged to irc.review.1998-04-22

.logbot.14-47-32.1: An Italian is COMBING his hair in suburban DES MOINES!

.gavinm.14-48-11: Let's give people a couple more minutes.

.tony.14-54-18: JOIN

.logbot.14-54-18: This channel is logged to irc.review.1998-04-22

.logbot.14-54-18.1: It don't mean a THING if you ain't got that SWING!!

.drj.14-54-59: JOIN

.logbot.14-54-59: This channel is logged to irc.review.1998-04-22

.logbot.14-54-59.1: ..  I wonder if I ought to tell them about my PREVIOUS LIFE

.logbot.14-54-59.2:  as a COMPLETE STRANGER?

.richardk.14-56-16: JOIN

.logbot.14-56-16: This channel is logged to irc.review.1998-04-22

.logbot.14-56-16.1: Hello.  I know the divorce rate among unmarried Catholic

.logbot.14-56-16.2:  Alaskan females!!

.pekka.14-56-22: JOIN

.logbot.14-56-22: This channel is logged to irc.review.1998-04-22

.logbot.14-56-22.1: Yow!  I want my nose in lights!

.richardk.14-57-04: ACTION waves.

.gavinm.14-57-08: Ok.  Let's start.

.gavinm.14-57-31: Could I have counts, actual checking time, and percentage 
completed from everyone, please?

.gavinm.14-57-53: 7M 22m 5q -- 70 minutes -- 100%

.ptw.14-57-57: 59 minutes, M: 5, m: 7, C: 0, q: 2, I: 4, 37%

.richardk.14-58-19: [A form to fill-in, with fields for these, would help me 
have this info to hand at the start of logging]

.pekka.14-58-36: 6 M, 8 m, 6 C, 3 q, 70 min, 70%

.gavinm.14-58-51: Log it as a suggested improvement to proc.review.check

.tony.14-59-21: 3M, 6m, 0C, 5q, 70min, 100%

.gavinm.15-00-29: ACTION drums his fingers.

.ptw.15-00-42: ACTION twiddles his thumbs

.gavinm.15-00-49: There's always one.

.gavinm.15-00-52: ... or two.

.drj.15-00-58: check: M 1 m 10 C 2 I 2  53 mins (unfinished).  reading source: 
10 mins. reading review gumph: 5 mins.  50%

.richardk.15-01-20: 2M, 11m, 3C, 1q, 2I -- 65mins -- 70%

.ptw.15-01-24: ACTION notes his screen has dimmed

.gavinm.15-01-44: Are you on charge?

.richardk.15-01-54: There's a spare powerbook transformer her, I believe

.richardk.15-02-00: her/here

.richardk.15-02-28: Master-at-arms, put this man on charge!

.ptw.15-02-39: I need a 45 watt supply, but now have a spare battery.

.gavinm.15-03-02: I believe that all parts of the document have had at least 3 
people checking them.

.gavinm.15-03-42: Tucker, as author/editor, I must remind you that you may 
remove a document from review at any time.

.ptw.15-04-13: I'm not easily intimidated

.gavinm.15-04-17: OK.

.gavinm.15-04-40: Can I have major defects, please, in turn.  RichardK?

.richardk.15-05-02: BEGIN

.gavinm.15-05-05: Remember to check each defect in the document, seeking new 
defects.

.richardk.15-05-14: (Note: I abandoned role.check.backwards (I checked with 
Gavin about this).  I can't do backwards in combination with role.check.clarity 
for a document-type that is only required to be clear when read forwards.)

.drj.15-05-21: ACTION thinks gavin sounds like reviewbot

.richardk.15-05-24: (page 6)

.richardk.15-05-36: M .sol.strategy  There really really ought to be a 
discussion of how the MPS design of requiring objects to be in exactly one 
segment affects fragmentation.  In other words, the effect of segment 
boundaries on fragmentation.  See EPDL, which massively

.richardk.15-05-36.1: reduces fragmentation by circumventing seg-boundary 
problems (albeit in a brittle way).

.pekka.15-05-43: I don't have page numbers

.richardk.15-05-52: (er, that's not actually page 6 anyway)

.richardk.15-05-55: (sorry)

.ptw.15-06-04: I don't have line numbers!

.richardk.15-06-16: M .arch.allocation-point  "(this indicates the client has 
misused the pool": this is inconsistent with .attr.range.  This inconsistency 
should be fixed, so we know which one is the real requirement.

.richardk.15-06-51: END major defects

.gavinm.15-07-06: Thanks.  PTW?

.ptw.15-07-19: 393 M .risk .arch.dependency: What is the schedule for the locus 
mechanism being available?  Does this dependency put the schedule for poolmv2 
(and the schedule of its expected clients) at risk? Is there a fall-back in the 
exisiting substrate that can be used? (E.g., will seg preferences work at all?)

.ptw.15-07-36: 399 M .risk .arch.adapt: Given the clients of this pool, should 
we be engaging in experimental policies such as this? How can we minimize the 
risk to the client?

.ptw.15-07-50: 442 M .risk Iimpl.c.poolmv2: s there design missing for a pool 
interface that supports buffered allocation _and_ freeing?  Can this pool be 
built without buffered freeing?  Will there be a significant cost to adding 
buffered freeing at a later time?  Can this pool support buffered freeing?

.gavinm.15-08-03: .risk?

.ptw.15-08-10: 475 M .risk impl.c.poolmv2.free.merge.segment: This policy does 
not sound well thought out or convicing.  Is it the best we can do?

.richardk.15-08-16: ACTION can't keep up with ptw's rate of logging.

.ptw.15-08-26: rule.universal.risk

.ptw.15-08-57: 483 M .impl.c.multiAP If pools are the one, true interface to 
the MPS, what is this \"glue layer\"?  Is this properly part of the pool 
design, or does it belong in the design of the MPS interface, or does it belong 
in the client manual as example code?

.ptw.15-09-02: CTS?

.ptw.15-09-43: ./

.drj.15-09-55: surely that should be RTS and we should be responding CTS ?

.ptw.15-10-18: Yes, but I had nothing to say anyways!

.richardk.15-10-24: CTS.  Thanks for pausing; I may ask for pauses again.

.gavinm.15-10-33: Thanks.  Pekka?

.pekka.15-10-54: ACTION still thinks about ptw's issues

.gavinm.15-11-04: ACTION waits.

.pekka.15-11-35: M .source req.product and other sources are incomplete.

.pekka.15-12-00: M .source Should have used the proposed changes to req.epcore 
(mail.pekka.1998-02-16.15-57 and further proposals).

.pekka.15-12-23: M .sol.mech.reallocate This would turn .fun.suballocate into a 
critical requirement, and break .fun.debug.

.pekka.15-12-46: M .arch.allocation-point This "reuse size" works differently 
from the mechanism described in .anal.policy.  I'm sure this paragraph doesn't 
mean what it says.

.pekka.15-13-21: Hmm. I have a duplicate of Tucker's 483, forget that.

.pekka.15-15-21: M .arch.debug This is a major change in the MPS, and an 
inefficient

.pekka.15-15-24: way to provide these services.

.gavinm.15-15-24: ACTION waits for PTW to reboot.

.ptw.15-15-37: JOIN

.logbot.15-15-37: This channel is logged to irc.review.1998-04-22

.logbot.15-15-37.1: INSIDE, I have the same personality disorder as LUCY 
RICARDO!!

.pekka.15-15-50: I'll repeat that issue for ptw:

.gavinm.15-15-54: Pekka, could you repeat your last two major defects, please?

.pekka.15-15-57: M .arch.debug This is a major change in the MPS, and an 
inefficient

.ptw.15-16-03: LUUUUCY, I'm Hooooome!

.pekka.15-16-03: way to provide these services.

.pekka.15-16-20: M .arch.allocation-point This "reuse size" works differently 
from the mechanism described in .anal.policy.  I'm sure this paragraph doesn't 
mean what it says.

.pekka.15-16-33: That's it.

.pekka.15-16-40: For now.

.gavinm.15-16-46: Thanks.  Tony?

.tony.15-16-58: Here goes ...

.tony.15-17-07: M .sol.strategy.death.birth This is big assumption, of 
importance to the design, & yet unsubstantiated. Suggest quoting research

.tony.15-17-28: M .sol.mech.allocate.optimize-new This isn't clear. Why acquire 
the memory when in a position to preserve it?

.tony.15-17-43: M TESTING NYI

.tony.15-17-50: That's it

.gavinm.15-18-01: Thanks.  DRJ?

.drj.15-18-10: ACTION clears his throat

.gavinm.15-18-31: ACTION tries to pronounce "NYI!".

.pekka.15-18-52: NYI! NYI!

.drj.15-18-59: M .arch.allocation.point unclear what happens is reuse size is 
small (< page size) which presumably can happen if fragmentation pressure is 
high (see .arch.adapt)

.pekka.15-19-00: Dead easy

.drj.15-19-16: nM .fun.debug too vague

.drj.15-19-22: that's all

.gavinm.15-19-41: Thanks.  GavinM?

.drj.15-19-45: -2s/is/if

.gavinm.15-19-56: M .attr.adapt Surely this requires it to be adaptive, not 
adaptable?

.gavinm.15-20-05: M .req Doesn't seem to mention the requirement of having a 
low space overhead, or not running out of memory.  This would be required to 
justify .strategy.

.gavinm.15-20-14: M .req Doesn't specify requirement implied by .overview that 
the code should be resusable as a substrate (except possibly in .attr.flex)

.richardk.15-20-22: ACTION isn't keeping up.

.gavinm.15-20-27: ACTION waits

.pekka.15-20-55: "performance" is a weasel-word.

.richardk.15-21-33: (CTS)

.gavinm.15-21-50: We don't need no STINKIN' WEASELS!!!!

.gavinm.15-21-54: M .req Doesn't mention debugging requirements that must be 
detected by the pool if anywhere, such as double-frees. 

.gavinm.15-22-07: M .req Doesn't explain whether the pool would support 
malloc/free requirements like tolerating double-frees.

.richardk.15-22-11: ACTION nods.

.gavinm.15-22-22: M .sol.policy.size This seems to combine a policy with a 
mechanism.  Having a minimum size is only an approximate measure to prevent 
"comsuming all of memory".  When combined with a vague solution like 

.drj.15-22-35: gavinm. halt please

.gavinm.15-22-42: .sol.policy.size.adapt, it really sounds like it's trying to 
limit the overhead of the deferred use.  I'd rather see this related to actual 
requirements such as space overhead or "not running out".  

.gavinm.15-23-00: ACTION waits

.drj.15-23-06: gavinm, please clarify your issue starting "Doesn't mention 
debugging..." (-3)

.drj.15-23-38: CTS

.gavinm.15-23-48: It would be impossible (or needlessly expensive) for a client 
layer to detect double frees.

.pekka.15-24-13: No. the one before that.

.gavinm.15-24-14: Hence, were it to be detected, ti should be a service 
provided by the pool.

.richardk.15-24-38: pool/MPS, shurely?

.gavinm.15-24-39: That was the one before.

.pekka.15-24-48: OK

.gavinm.15-24-48: _pool_

.ptw.15-24-51: Which source document has that rquirement?

.gavinm.15-25-09: It should be clear whether it is a requirement.

.drj.15-25-13: ACTION only wanted a clarification not a discussion

.drj.15-25-16: thanks gavinm

.pekka.15-25-23: req.product.dc.env.c

.ptw.15-25-30: Anything that is not in the source is clearly not required?

.gavinm.15-25-33: M .impl.c.CBS The outlined facilites don't permit the 
location of a specific neighbour to a freed block, nor do they support to 
location of the neighbour other than the one found.

.gavinm.15-26-09: (See my recent mail on splay trees)

.gavinm.15-26-13: Done.

.gavinm.15-26-28: RichardK, any issues?

.gavinm.15-26-59: -3 e2/to/the/\

.richardk.15-27-07: (at this point I should log any remaining issues, yes?)

.gavinm.15-27-16: Yes.

.gavinm.15-28-06: I could have said "non-majors", but I didn't want to exclude 
new major issues.

.drj.15-28-20: gavinm, you should consistently use one of Zed, ed, sed, E 
syntax imo

.gavinm.15-28-24: -3 e/\//

.richardk.15-28-30: BEGIN any remaining issues

.gavinm.15-28-57: Remember to indicate new issues with "N".

.richardk.15-29-04: I role.check.*  Note: I abandoned role.check.backwards (I 
checked with Gavin about this).  I can't do backwards in combination with 
role.check.clarity for a document-type that is only required to be clear when 
read forwards.

.ptw.15-29-10: Not "n"?

.richardk.15-29-35: (page 1)

.richardk.15-29-47: q .overview  "EP .. other than the PS object pool": 
colleciton in EPVM is very rare -- it would almost be better to thiink of it as 
a manual pool perhaps?  Is there any way the strengths of poolmv2 could be used 
to benefit EPVM?

.gavinm.15-29-51: (ptw, see guide.review.class.new)

.richardk.15-30-07: I req.epcore  Where one logical document is split into 
several physical documents (as in req.epcore) if the sub-documents' tags were 
in alphabetical order they would print in a helpful order.

.richardk.15-30-26: m .fun.align  "req.epcore.fun.dl.promise.alignment" -- this 
tag does not exist.

.richardk.15-30-43: I MMIS  I want to search MMIS for partial tags.  It doesn't 
seem to work: ".promise.alloc" doesn't find ".dl.promise.alloc: ...".

.richardk.15-30-53: (page 2)

.richardk.15-31-05: m .fun.reallocate  req.epcore.fun.dl.* does _not_ require 
realloc.

.gavinm.15-31-09: (That's a notes Full Text Index issue)

.richardk.15-31-37: m .fun.thread  req.epcore.fun.dl.* does _not_ require 
multiple threads.

.richardk.15-31-50: m .fun.thread  "threads of allocation": "thread" is not 
defined.  It should at least be clarified whether they are pre-emptive etc, or 
whether this is just more than one AP.

.richardk.15-32-08: m .attr.performance  "rec.epcore.{run-time,tp}": these tags 
don't exist.

.richardk.15-32-42: nM  <tags referred to>  It is not right to burden the 
reader with a big tag-hunt.  [The only point of these references is so the tags 
_do_ get looked-up.  So tag look-up must be easy or people won't do it.]

.richardk.15-33-21: ACTION apologies for any emotional/stress overtones in the 
wording of that last issue -- they were unintentional.

.ptw.15-33-32: That must be an Improvement suggestion?

.richardk.15-33-36: apologies/apologises

.richardk.15-34-08: "I"] no, because it's a defect in the socument, not in the 
support for the document, I assert.

.ptw.15-34-12: I am required to use those tags, that you can't look them up is 
not a defect in the document under review.

.richardk.15-34-27: Ahh, I should clarify:

.ptw.15-35-19: Please do.

.richardk.15-35-26: nM <tags referred-to>  Some of these tags are 'almost 
right'.  It's important that they be right.  Otherwise they are very hard 
(though not impossible) to look-up.

.drj.15-35-35: ACTION detects repetetive stress noises

.richardk.15-35-43: ACTION fears he's not explaining his issue very well.

.richardk.15-36-29: Let's skip this -- you'll see lots of "thjis tag does not 
exist" minor defetcs come by.

.gavinm.15-36-33: I think we could take further clarification off-line.

.richardk.15-36-59: retract that last nM of mine pleases.

.richardk.15-37-06: m .fun.debug  "req.epcore.debug.support": tag doesn't exist.

.ptw.15-37-10: Ok.  I'm not sure if this is due to typographical error or 
sloppiness; although I believe the former.  It was certainly not my intention 
to obfuscate.

.gavinm.15-37-10: Carry on.

.richardk.15-37-30: m .fun.suballocate  Not clear why this ability is of any 
interest.  The sources quoted do not seem to support this req (even at "nice").

.richardk.15-37-42: (ran out of time on page 2)

.richardk.15-37-46: (page 3)

.richardk.15-38-04: m .sol.strategy.debug  This is good, but not a 
".sol.strategy" I think.  It's an ".impl" matter.

.richardk.15-38-37: 9General point: this only my second review,m and my first 
design review, and I found it Rich Learning Experience)

.richardk.15-38-46: (Corollary: many of my issues may be crock)

.richardk.15-39-03: m .sol.policy.debug  Clarify what counters and meters are, 
and how far they go to meeting .fun.debug.

.richardk.15-39-16: C .sol.mech  The link from .fun-man-var to 
.sol.mech.free-list.* is that there is a _task_ the pool must perform, namely: 
coalescing free blocks.  A list of tasks like this, would be a useful addition 
to the design.

.richardk.15-39-37: C .sol.mech  I think some part of this design is generic -- 
applicable to all manual-variable allocation -- and merits a separate analysis 
document.

.richardk.15-40-00: Clarification" "separate" separate from poolmv2 
specifically.

.richardk.15-40-21: (rushed on page 4)

.ptw.15-40-25: not if poolmv2 intends to be the one true m-v pool!

.richardk.15-40-25: (page 5)

.richardk.15-40-28: m .anal.strategy  "(fragmented memory is memory allocated 
to the program": this is a mistake I think.

.richardk.15-40-58: m .anal.policy.reallocate  ".fun.suballocate...doing so 
will cause the freed block to obey .sol.policy.allocate": it is not clear why 
this is so.  [.s.p.a talks about objects, not free blocks -- I'm confused]

.pekka.15-41-04: richard: It's you second design review -- but the poolams 
design was much simpler.

.richardk.15-41-32: pekka: you're quitre right.  I did find this one much 
harder/ thought I did less well.

.richardk.15-41-51: (nearly done)

.richardk.15-41-55: (page 6)

.pekka.15-41-58: Code is much more fun to review

.richardk.15-42-04: C .arch.overview  One effect of deferred re-use + minimum 
size (.sol.policy.size) is to try to decrease the ratio of effective object 
sizes -- we do our best to encourage the holes to grow till they are as big as 
a page.  See

.richardk.15-42-04.1: mail.richardk.1998-04-16.18-20(0).frag.ratio.

.richardk.15-42-22: (end of page 6)

.richardk.15-42-30: (ran out of time)

.richardk.15-42-36: END remaining issues

.drj.15-42-40: ACTION thinks abbreviating tags makes them hard to look up.

.gavinm.15-42-46: Thanks.  PTW any remaining issues?

.ptw.15-42-58:  I proc.review Include a copy of the role assignments with the 
review packet

.gavinm.15-43-02: ACTION agrees with DRJ.

.ptw.15-43-08:  I rule.universal.head.time States that the document should be 
marked with its creation time.  Does this really mean date?

.richardk.15-43-18: ACTION apologises for .s.p.a.

.drj.15-43-49: It's not important.  there should've been at least half a smiley 
on my comment.

.gavinm.15-44-17: ACTION waits for Tucker's next issue.

.ptw.15-44-26: Blech.  I seem to have lost some issues when my batter went dead.

.ptw.15-44-31: 'ang on a mo'

.gavinm.15-44-47: Ooops!  Bad scene.

.gavinm.15-45-01: What do you want to do about it?

.ptw.15-45-54: I can reconstruct them from notes, but not rapidly.

.gavinm.15-46-08: You could co-ordinate with the Editor to reconstruct them 
later.

.pekka.15-46-21: ACTION smiles

.gavinm.15-46-38: What do you want to do about it?

.ptw.15-47-30: co-ordinate with the Editor to reconstruct them later.

.gavinm.15-47-41: Ok.  Any issues you do have handy?

.ptw.15-48-29: Let someone else go.

.gavinm.15-48-58: Pekka?

.pekka.15-48-59: I proc.review Large or complex documents should have more 
reading time allocated to them per page.

.pekka.15-49-08: I req.product Doesn't address documentation requirements.

.pekka.15-49-19: C .intro Should be "second-generation" and "drop-in".

.pekka.15-49-32: m .req Tagging and punctuation in this whole section are 
non-standard (see guide.text.tag).

.pekka.15-49-45: m .req All the requirements are subjectless sentences -- it is 
often

.pekka.15-49-48: useful to state exactly which part of the product or software 
system

.pekka.15-49-48.1: must satisfy the requirement.  Furthermore, in pool class 
designs it

.pekka.15-49-48.2: is useful to make the distinction between requirements that 
apply to

.pekka.15-49-48.3: every pool instance, and requirements that can be satisfied 
by

.pekka.15-49-51: choosing appropriate values for the parameters for a set of 
instances.

.pekka.15-50-04: mN .attr.performance "performance" is a weasel-word, should 
split into the measurable categories.

.pekka.15-50-14: Everybody keeping up?

.gavinm.15-50-37: ACTION is

.pekka.15-50-38: m .not.fun.reallocate.in-place.happy.gavinm.make It's not 
clear where

.pekka.15-50-41: this requirement comes from.  It is not implied by

.pekka.15-50-41.1: req.product.dc.env.ansi-c because the drop-in interface 
could handle

.pekka.15-50-41.2: the moving.  In fact, there is something to be said for a 
resizing

.pekka.15-50-41.3: interface that would guarantee not to move (and I have said 
it in the

.pekka.15-50-44: past).

.pekka.15-50-56: m .attr.reliability req.product asks for more: "rock-solid 
reliability".

.drj.15-51-02: ACTION deasserts CTS

.drj.15-51-33: ACTION reassert CTS

.pekka.15-51-45: C .attr.range This is not an attribute requirement.

.pekka.15-52-32: C .sol.strategy.death.type.size This is a minor tweak that 
should be demoted to a mechanism.  Not sure this strategy/policy/mechanism 
added much to the clarity.

.pekka.15-53-19: that is the distinctions didn't do much for me

.drj.15-53-19: (a comment which applies to the Wilson paper too IMO)

.pekka.15-53-38: so file an improvement suggestion for it. ;-)

.ptw.15-53-47: model/controller/view?

.richardk.15-54-16: I think strategy/policy/mechanism is a Good Split.

.gavinm.15-54-28: 0Let's keep moving.

.pekka.15-54-35: I just don't think they are that independent if you only 
consider one or two of eaxh...

.pekka.15-54-45: C .sol.policy Why mention this, if you don't name and 
distinguish the different policies.

.pekka.15-54-57: m .sol.policy.size.fixed This is unjustified.

.pekka.15-55-06: (was that a duplicate?)

.pekka.15-55-16: q .sol.policy.reallocate Why outside?

.pekka.15-55-30: m .sol.mech Tagging and punctuation in this whole section are 
non-standard (see guide.text.tag).

.pekka.15-55-38: q .anal.policy.size Can you explain your reasoning here?

.ptw.15-55-52: do solutions have to be justified?  aren't they there to be 
analysed?

.pekka.15-55-53: C .anal.mech.allocate.optimize-new This is irrelevant because

.pekka.15-55-56: the reference in paper.wil95 probably applies to an 
implementation

.pekka.15-55-56.1: using brk().  Furthermore, this behaviour is not under the 
control of

.pekka.15-55-56.2: the pool, but of the arena.

.pekka.15-56-36: Yes, you're right.  I did file a question about the analysis.

.pekka.15-56-54: C .arch.allocation-point This needs to be broken down into 
individual tagged statements.  Likewise the other paragraphs in this section.

.gavinm.15-57-04: ( Though ut's vaguely relevent to MacOs temp space.)

.richardk.15-57-08: ~CTS

.pekka.15-57-53: Only if we implement an arena that uses it.  I did toy with 
the idea of a sbrk() arena at one point...

.ptw.15-58-13: (It's relevant to the segment the arena gives the pool when it 
is much bigger than what is needed to satisfy an allocation request.)

.gavinm.15-58-42: It's relevant to an arena solution we don't intend to use.  I 
just thought I'd mention it while we were waiting.

.ptw.15-58-46: (But I seem to have failed to convey that point.)

.gavinm.15-59-15: PTW, I see what you mean.

.drj.15-59-20: well I thought ptw's point was clear, but that doesn't mean it 
was.

.pekka.15-59-21: (You failed to explain you were going to ask for segments that 
large.)

.ptw.15-59-46: I explain pretty clearly that segments of "reuse size" are 
always requested.

.ptw.15-59-57: [We're drifting]

.richardk.16-00-01: CTS

.pekka.16-00-11: q .arch.allocation-point How will you achieve the reclamation 
of the splinters?

.pekka.16-00-25: C .arch.available-block-queue Instead of a HWM decay, it would 
be better to have the arena to ask for the pages back.

.pekka.16-01-02: q .arch.contingency What is "total free space"?

.pekka.16-01-25: That's it.

.gavinm.16-01-31: Thanks.  Tony?

.ptw.16-01-32: (I wondered that too.  One of my lost defects.)

.tony.16-02-00: m .attr.performance "... Clearly there is a missing 
requirement" It's not clear (to me) there's a need for this requirement.

.tony.16-02-22: m .attr.range The quoted Dylan requirements refer to Dylan 
objects, and hence do not apply to MV2

.tony.16-02-34: m .sol.policy "hopefully" - are you hoping the design is 
correct? or that it's implemented correctly? or just making a general 
statement??

.tony.16-02-56: q .sol.policy.size.fixed I note that page alignment isn't taken 
into account so there's no guarantee of entire pages being free. What's the 
motivation for basing this on page size? 

.gavinm.16-03-05: Stop.

.pekka.16-03-42: That was rude...

.richardk.16-03-46: ACTION watches gavinm and ptw share batteries.  GavinM 
appears to be a 'dealer'.

.gavinm.16-04-30: JOIN

.logbot.16-04-30: This channel is logged to irc.review.1998-04-22

.logbot.16-04-30.1: Do you have exactly what I want in a plaid poindexter bar 
bat??

.richardk.16-04-30: ACTION hears Gavin hope he's still connected.

.richardk.16-05-19: Are we back again?

.gavinm.16-05-27: Sorry about that.  I'm buddy-battery-ing with Tucker.

.gavinm.16-05-33: Tucker?

.gavinm.16-06-03: Because of a small piece of plastic, I can't change batteries 
without leaving the dock.

.richardk.16-06-14: I have a small saw here.

.richardk.16-06-49: Tum te tum.

.ptw.16-07-51: JOIN

.logbot.16-07-51: This channel is logged to irc.review.1998-04-22

.logbot.16-07-51.1: Uh-oh!!  I forgot to submit to COMPULSORY URINALYSIS!

.ptw.16-08-00: Back, sorry

.gavinm.16-08-06: Tony?

.ptw.16-08-18: I would like to be back to the flat as soon after 6pm as 
possible to prepare for my date tonight.

.tony.16-08-21: Do I need to rewind?

.ptw.16-08-36: If you don't mind, could you rewind?

.tony.16-08-45: How far back??

.ptw.16-08-54: I didn't see any of your minors

.tony.16-09-04: OK.

.tony.16-09-19: m .attr.performance "... Clearly there is a missing 
requirement" It's not clear (to me) there's a need for this requirement.

.tony.16-09-29: m .attr.range The quoted Dylan requirements refer to Dylan 
objects, and hence do not apply to MV2

.gavinm.16-09-38: ACTION micro-sleeps

.tony.16-09-42: m .sol.policy "hopefully" - are you hoping the design is 
correct? or that it's implemented correctly? or just making a general 
statement??

.tony.16-09-52: q .sol.policy.size.fixed I note that page alignment isn't taken 
into account so there's no guarantee of entire pages being free. What's the 
motivation for basing this on page size? 

.tony.16-10-04: [Does anyone have any problems with these long lines, BTW?]

.tony.16-10-22: q .sol.mech.allocate.optimize-new Many small blocks won't have 
short lifetimes. Is this a problem? What does small mean anyway?

.richardk.16-10-28: [long lines no problem for richardk]

.gavinm.16-10-34: (The IRC protocol does impose a hard limit of something or 
other.)

.tony.16-10-37: m .anal.policy "where as" -> "whereas"

.tony.16-10-45: m .anal.policy.reallocate Clumsy first sentence

.drj.16-10-49: ACTION has not problem with long lines

.tony.16-11-00: m .anal.policy.size This belief depends on page alignment too, 
and not just size, doesn't it?

.tony.16-11-14: q .arch.allocation-point This implies clients must either keep 
separate APs per thread or implement their own locking. Are we confident 
there's no need for an MPS-locking mechanism?

.tony.16-11-39: q .arch.coalescing-block-structure There's no mention about 
whether 2 blocks big enough to be on the ABQ can become merged due to 
coalescing. Can this happen? How do the CBS & ABQ communicate?

.tony.16-11-53: q .impl.c.multiAP What support (if any) will the glue layer 
provide for multiple threads

.tony.16-12-04: That's all

.gavinm.16-12-14: Thanks.  DRJ?

.drj.16-12-31: I rule.universal: it should fit on one printed page

.drj.16-13-06: I ? (guide.text?) large documents should have a tag map of some 
of the top N levels of tag hierarchy to aid navigation.  \

.drj.16-13-35: e.g. it's not clear where .sol.policy and .sol.strategy come wrt 
each other, or .arch and .req, say.

.drj.16-13-56: I template.design (it should exist) there sdhould be a template 
for design documents./

.ptw.16-14-21: I thought I used it?

.drj.16-14-29: m .def.* (it should exist) definitions at front so that they can 
be easily found when (unfamiliar) terms are encountered.

.gavinm.16-14-50: ACTION agrees

.pekka.16-14-51: or at end

.drj.16-14-54: you may have used the Notes form called design.

.drj.16-15-04: (at beginning for consistency)

.ptw.16-15-08: I did

.richardk.16-15-16: (end] to help in role.check.backwards :-)

.gavinm.16-15-24: ... but that's not the same as having a deisgn template

.pekka.16-15-36: at beginning will lead to complaints about all these strange 
terms being unclear.

.drj.16-15-40: m .not.fun.reallocate.in-place.happy.gavinm.make ridiculously 
long tag

.richardk.16-16-04: ACTION laughs.

.drj.16-16-33: m .sol.mech.allocate.optimize-small: this sounds like two 
separate mechanisms or at least one mechanism and a separate assumption

.ptw.16-16-51: Nm .not.fun.reallocate.in-place.happy.gavinm.make: inept attempt 
to satisfy req.humor.funny

.drj.16-17-25: m .sol.mech.allocate.optimize-new use of "preserve" is unclear 
(does it mean "delay reusing"?)

.richardk.16-17-34: (it _was_ funny!  this is not inconsistent with being 
ridiculously long :-)

.drj.16-17-44: ACTION thinks it was funny too

.gavinm.16-17-48: That's req.humour-funny.

.drj.16-18-10: m .anal.policy last sentence.  tag with .risk.blah perhaps.

.richardk.16-18-54: s/.risk.blah/risk.blah ?

.gavinm.16-19-06: no

.drj.16-19-11: m .anal.mech.freelist should have tags beginning with .sol.mech.*

.drj.16-19-15: richardk, no, sic

.drj.16-19-43: (I am suggesting creeating a tagged sentence)

.richardk.16-19-58: Your issue is unclear to me.

.drj.16-20-16: I'm suggesting that the last sentence bear a tag that reflects 
the risk implied by the sentence

.ptw.16-20-25: Tag the sentence design.mps.poolmv2.risk.might-not-work

.ptw.16-20-42: eliding the d.m.p bit, per convention

.ptw.16-21-38: Nm r.u.tag: There aren't enough tags in this document

.gavinm.16-22-04: People aren't wearing enough hats.

.pekka.16-22-13: Yeah. I thought so too.

.ptw.16-22-23: Enough people aren't wearing hats

.drj.16-22-31: c .arch.allocation-point sentence beginning "it is intended" 
surely only useful if in addition the reuse size is small compared with total 
volume of allocation at this class size, otherwise will be large space overhead

.richardk.16-22-35: ACTION realises that in ".risk.blah", "blah" was a 
meta-syntactic variable.

.pekka.16-22-50: People are getting waery of hats.

.drj.16-23-34: C .arch.available-block-queue last sentencei, it's not clear 
that the MPM has any has any way to support such mechanisms at the moment.

.drj.16-24-08: m .arch.modular.initial referenced tags should be .sol.mech,.*

.drj.16-24-14: -s/,//

.drj.16-24-39: m .impl.c.abq clarity, what is High Water Mark (may be due to 
role.backwards)

.drj.16-25-21: nC .impl.c.poolmv2.free.merge.segment  this will make more sense 
when we have pages and segments and can free interior pages (or at least I 
think/hope it will).

.drj.16-25-46: m .impl.c.multiap clarity.  unclear if these APs are in 
different pools or not

.gavinm.16-26-16: ACTION thinks they're probably in different cohorts.

.drj.16-26-29: m TESTING no testing section.  as suggested in (incomplete) 
rule.design, could be separate (presumably incomplete :-) ) document reference 
from here.

.drj.16-26-37: and that's all

.gavinm.16-26-47: Thanks.  GavinM?

.gavinm.16-26-56: m * Use of "it's" where "its" is appropriate.

.gavinm.16-27-05: m .source Could mention paper.st85

.gavinm.16-27-13: m .req Could specify non-requirements of being formatted, 
scannable, and collectable

.gavinm.16-27-22: m .not.fun.reallocate.in-place.happy.gavin.make Could justify 
this non-requirement on the grounds that such behaviour could be provided in 
realloc wrapper if required for a particular platform, particularly if 

.ptw.16-27-25: .not until I've used it!

.gavinm.16-27-36: .fun.suballocate is satisfied (see also 
.sol.policy.reallocate)

.pablo.16-27-43: JOIN

.logbot.16-27-43: This channel is logged to irc.review.1998-04-22

.logbot.16-27-43.1: Don't SANFORIZE me!!

.richardk.16-27-47: ~CTS

.richardk.16-28-12: CTS

.gavinm.16-28-23: Hello Pablo.  You may find this meeting confusing.  Do not 
adjust your world-view.

.gavinm.16-28-36: m .req Could usefully separate the alloc and free 
requirements in order to clairfy the status of sub-free.

.gavinm.16-28-45: m * Missing newline before sub-section titles

.pekka.16-28-51: Gavin: are you saying n.f.r.i.h.g.m is not a intended as a 
requirement, but a non-requirement?

.gavinm.16-28-54: m .req Would benefit from a clear definition of "aligned".

.richardk.16-29-00: ~CTS

.gavinm.16-29-11: Pekka, er yes.

.richardk.16-29-12: Gavin, can youclarify what "sub-free" means?

.drj.16-29-18: please, don't abbreviate tags.  pay the expensive cost once, 
when you write down the tag

.gavinm.16-29-30: see .fun.suballocate

.pekka.16-29-46: Gavin, well I read it in the opposite sense.

.drj.16-29-57: (though see my comment on tags being too long).

.gavinm.16-30-02: m .sol.mech.free-list.* Source references should be in this 
document, not in comments

.gavinm.16-30-16: m .sol.mech.free-list.splay-tree Surely this should be "is 
competetive within a small constant factor"?

.richardk.16-30-19: ~CTS!

.richardk.16-31-18: CTS

.ptw.16-31-19: NI References are conventionally demarcated with [] which is 
ambiguous with text document comment convention.  How should they be demarcated?

.gavinm.16-31-22: m .sol.mech.free-list.bit-map Could usefully use the word 
"grain" instead of block, as using "block" confuses the allocation grains with 
the allocated blocks

.richardk.16-31-22: Thanks.

.gavinm.16-31-56: m .sol.mech.storage.in-band Could useful speculate about the 
actual minumum size

.gavinm.16-32-07: m .sol.mech.storage.in-band Should explain how this minimum 
size restriction could satisfy the requirements

.gavinm.16-32-23: m .sol.mech.desc.in-band This paragraph should mention 
whether it is talking about in-band data.

.gavinm.16-32-38: q .sol.mech.desc.in-band How would we go from an interior 
pointer to the header and footer?

.gavinm.16-33-03: m .anal.mech.free-list Could usefully speculate about the 
overheads of these techniques, otherwise this paragraph cannot be verefied.

.gavinm.16-33-11: q .arch.allocation-point Why two-phase?

.gavinm.16-33-33: m .arch.available-block-queue Blocks on the ABQ aren't 
guaranteed to be (or even contain) VM-aligned pages.  The arrangement for 
returning memory to the arena should be better defined.

.gavinm.16-33-33.1: (partial duplicate)

.gavinm.16-33-49: m .arch.available-block-queue I don't understand how this 
decaying high water mark is going to work.

.gavinm.16-34-01: m .arch.coalescing-block-structure Does "can simultaneously 
be" mean that it will be?

.gavinm.16-34-26: m .arch.dependency Could usefully document these dependencies 
separately.
.gavinm.16-34-41: q .arch.adapt How does the CBS measure fragmentation?

.gavinm.16-34-51: m .impl.c.* Tags should be lower-case.

.gavinm.16-35-02: q .impl.c.CBS Why do we need to suballocate blocks from the 
control pool?  Why not use MFS?

.gavinm.16-35-13: q .impl.c.CBS Why use Addr,Size (presumably base,size) 
instead of base,limit?

.gavinm.16-35-28: m .impl.c.poolmv2.ap.empty Second bullet point could usefully 
use the term "LIFO".,

.gavinm.16-35-36: m .impl.c.poolmv2.ap.empty Could usefully clarify whether an 
attempt will be made to coalesce in case two.

.drj.16-35-40: ACTION would like to get rid of MFS

.richardk.16-35-40: ~CTS

.drj.16-35-56: ~CTS

.pekka.16-37-03: drj: You mean the implementation, not the concept?

.ptw.16-37-07: ACTION would use MFS if he felt it was efficient and maintained 
good locality

.richardk.16-37-36: CTS

.drj.16-38-11: yes, I mean the implementation.  ATM it's only used as part of 
baroque MC boot process which is overly complicated because MV tries to do too 
many things at once.  Which is one of the things that MV2 addresses

.drj.16-38-15: ~CTS (still)

.drj.16-38-51: CTS

.gavinm.16-38-55: Perhaps we ought to distinguish the boot and control 
requirements.

.gavinm.16-39-03: CN - The glue layer problem can be viewed two ways.  Either 
we have one allocating thingie that can allocate in more than one AP; or we 
have lots of conceptual allocating thingies that can share actual APs for 
efficiency.

.gavinm.16-39-16: Done.

.gavinm.16-39-22: RichardK, any more?

.ptw.16-40-02: GavinM, your battery is dead again...

.drj.16-40-16: ACTION goes

.gavinm.16-40-16: Any more issues anyone?

.pekka.16-40-22: Yep

.gavinm.16-40-28: Go on.

.richardk.16-40-29: Yep.

.tony.16-40-35: No

.richardk.16-40-51: Gavin is swapping batteries again.

.gavinm.16-41-18: JOIN

.logbot.16-41-18: This channel is logged to irc.review.1998-04-22

.logbot.16-41-18.1: Hey, wait a minute!!  I want a divorce!!..  you're not 
Clint Eastwood!!

.gavinm.16-41-32: Pekka?

.pekka.16-41-36: Guessed that.  I hope we're not logging on one of these 
portables...

.pekka.16-41-42: mN .impl.c.CBS Tags should be lower-case.

.gavinm.16-41-45: trillian

.pekka.16-41-56: mN .impl.c.CBS Suballocating from the control pool is premature

.pekka.16-41-57: optimization, or perhaps just putting the improvement effort 
in the

.pekka.16-41-57.1: wrong place.

.ptw.16-42-27: JOIN

.logbot.16-42-27: This channel is logged to irc.review.1998-04-22

.logbot.16-42-27.1: GOOD-NIGHT, everybody..  Now I have to go administer 
FIRST-AID

.logbot.16-42-27.2:  to my pet LEISURE SUIT!!

.pekka.16-42-30: mN .impl.c.ABQ If it's fixed size, what happens to 
non-page-aligned splinters that cannot be returned to the arena, when you run 
out of space in the ABQ?

.pekka.16-42-46: Oh, should I repeat the first two?

.ptw.16-43-07: Or I can get them from the editor.

.gavinm.16-43-08: Just the last, please.

.pekka.16-43-22: mN .impl.c.ABQ If it's fixed size, what happens to 
non-page-aligned splinters that cannot be returned to the arena, when you run 
out of space in the ABQ?

.pekka.16-43-29: That's all.

.gavinm.16-43-33: RichardK?

.ptw.16-44-31: ACTION wonders why IRC disconnects when I sleep.  Why not wait 
until waking?

.gavinm.16-44-43: ping-pong

.richardk.16-44-44: BEGIN

.richardk.16-45-01: Nm <throughout>  a discussion of, and clear terminology 
(perhaps "grain" vs. "block") for, the uses of segments, blocks and pages 
within segments, sub-blocks, suballocation, and subfreeing, would help 
clarity.  I ended-up rather confused about what was

.richardk.16-45-01.1: going on with these various divisions.

.richardk.16-45-50: Nm .impl.*  Much (most?) of this seems to be policy.  
Policy states, exhaustively, what you do when, for all things that affect the 
observable state of the system.  Mechanism and implementation are how you 
decide to construct code that will carry-out the

.richardk.16-45-50.1: policy.  Perhaps my understanding of the term "policy" is 
divergent?

.pekka.16-46-40: I think it's just confusing to try to fit a design into such 
categories.

.richardk.16-47-04: Clarification: That is, given a policy, you should be able 
to produce another allocator whose only observable difference is the time taken 
to perform tasks.

.richardk.16-47-19: Anyway, I'll press on.

.richardk.16-47-25: NI proc.review  After the process-brainstorm (which 
discusses the process that made the reviewed document), there should be a 
review-review, that discusses how well the review went, and how appropriate it 
was, and how it could be improved.

.richardk.16-47-49: (perhaps s/review-review/review-brainstorm/)

.richardk.16-47-55: END

.gavinm.16-48-27: Anyone else?

.ptw.16-48-34: ./

.tony.16-48-38: ./

.pekka.16-48-44: I think it's important that reviews are non-judgmental.

.richardk.16-48-57: ACTION agrees.

.pekka.16-48-58: Both ways.

.gavinm.16-49-10: NC Maybe we should have this document explain the use of CBS 
and ABQ, and other design documents explain their designs. 

.gavinm.16-49-27: I think we don't have time for a brainstorm today.

.ptw.16-49-48: I don't have the energy

.gavinm.16-49-52: So, if no-one has any other remarks, I'll close the meeting.

.ptw.16-49-55: (;-))

.richardk.16-50-05: Pekka, this is quite meta of me, but could you point to an 
example of judgemental stuff in this review? I fear I edged that way, and would 
appreciate it being pointed out to me so I can work on avoiding it.  Perhaps by 
email or voice if you prefer.

.gavinm.16-50-19: Closed.

.gavinm.16-50-26: Thans everyone.

.ptw.16-50-37: PART

.gavinm.16-51-14: PART

.pekka.16-51-21: PART

.richardk.16-54-21: PART

.pablo.16-56-01: PART


