                    #REVIEW ON 1998-04-15 WEDNESDAY
                         irc.review.1998-04-15
                               draft doc
                           gavinm 1998-04-15

.logbot.14-05-11: JOIN

.logbot.14-05-11.1: This channel is logged to irc.review.1998-04-15

.logbot.14-05-11.2: Are you still an ALCOHOLIC?

.tony.14-05-49: JOIN

.logbot.14-05-49: This channel is logged to irc.review.1998-04-15

.logbot.14-05-49.1: PUNK ROCK!!  DISCO DUCK!!  BIRTH CONTROL!!

.pekka.14-05-58: JOIN

.logbot.14-05-58: This channel is logged to irc.review.1998-04-15

.logbot.14-05-58.1: Youth of today!  Join me in a mass rally for traditional 
mental attitudes!

.richardk.14-06-12: JOIN

.logbot.14-06-12: This channel is logged to irc.review.1998-04-15

.logbot.14-06-12.1: I am deeply CONCERNED and I want something GOOD for 
BREAKFAST!

.gavinm.14-06-36: Did everyone finish?

.pekka.14-06-41: yes

.tony.14-06-48: yes

.richardk.14-07-05: yes

.richardk.14-07-24: ACTION begins to read proc.logging or whatever

.gavinm.14-07-25: Ok.  Could I have defect counts by class, and actual checking 
time from everyone, please?

.gavinm.14-07-43: 3M 4m 2C 2q 3I  34 minutes

.pekka.14-08-19: 2 M, 6 m, 1 C, 1 I, 41 min

.tony.14-09-04: 0m 1m 2C 3q 0I  40min

.richardk.14-09-56: 14M  0m  0C  3q  1I  --  42min

.gavinm.14-10-10: Thanks.  In accordance with proc.review.log.author, I'll 
remind Pekka that he may withdraw the document from review at any time.

.pekka.14-10-19: ACTION sighs

.richardk.14-10-19: (Don't worry about the high count of Major 'defects')

.pekka.14-10-29: ACTION worries

.gavinm.14-11-12: I'm going to ask for defects by person, first major, then 
non-major and new major, then any new issues.

.richardk.14-11-19: ACTION believes that "Major", as a characterisation of a 
defect, is a tautology, given the official definition of "Major".  Just BTW.

.pekka.14-11-37: Not accoring to guide.review.class

.gavinm.14-11-49: Please watch the defects as they are logged, eliminating 
duplicates, and finding new ones.

.gavinm.14-12-04: ACTION thinks RichardK is a little early with improvement 
suggestions.

.gavinm.14-12-34: Richard's just left.  We'd better wait for him.

.gavinm.14-13-37: Richard, major issues please.

.richardk.14-13-57: Shall I just paste them into IRC a line at a time?

.gavinm.14-14-02: Yes, please.

.richardk.14-14-35: I proc.review.check(0)  After ".class" there is the word 
"End", followed by more procedure.

.richardk.14-14-41: Ooops.

.richardk.14-14-48: Sorry -- major defects coming up...

.richardk.14-15-02: M .readership  Which product manager?

.richardk.14-15-30: M .req.format  "be formatted"/"support formatted objects"

.richardk.14-15-40: M .align  What does the term "the format alignment" mean?

.richardk.14-15-55: (on to page 2)

.richardk.14-16-02: M .buffer  Add ", satisfying .req.incremental"

.richardk.14-16-14: M .colour.object  Unclear near "in order to colour all the 
grains".

.richardk.14-16-29: M .colour.object  The implications of only colouring first 
grain are not made clear.

.richardk.14-16-41: M .scan.segment  What does "objects already skipped" mean?

.richardk.14-16-50: (tell me i this is too fast or slow)

.gavinm.14-17-06: Fine by me.

.richardk.14-17-10: (was rushed towards end of p2; on to page 3)

.pekka.14-17-19: fine

.richardk.14-17-26: M .iteration.buffer  "callers have [to] make sure they take 
the appropriate action" -- clarify or example?

.tony.14-17-40: fine

.richardk.14-17-47: (on p3 I felt insufficiently familiar with mark-sweep and 
MPS to assess clarity well)

.richardk.14-17-52: (on to page 4)

.richardk.14-17-58: M .marked  What is a "group"?

.richardk.14-18-06: M .marked  Perhaps "marked" isn't a good name.  Perhaps 
"marksChanged"?

.richardk.14-18-20: M .marked.scan.fail  What is "the format scanner"?

.richardk.14-18-39: M .marked.reclaim  Clarify "must be" -- should the flag be 
put into that state, or should the code AVER that it is in that state?

.pekka.14-18-51: If you had made those questions, oyou would have got answers...

.richardk.14-19-20: M .reclaim.empty.buffer  Clarify "could be" -- is this a 
hazard, a potential future enhancement, or a reassurance that this happening is 
not a problem?

.gavinm.14-19-33: [Procedural point.  It's important to indicate when you've 
fionished. ]

.richardk.14-20-19: (clarification: when I phrase these 'defects' as questions, 
I mean that I think the document should contain the answers)

.richardk.14-20-32: (on to page 5)

.richardk.14-20-41: M .benefit.repeat Clarify "the lastReclaimed value".  What 
is this set to?

.richardk.14-21-05: (end of Major defects)

.gavinm.14-21-16: Thanks.  Pekka, major defects?

.pekka.14-21-33: M .fill.slow It's not just that BufferFill is slow, it's that 
the

.pekka.14-21-34: whole structure of Buffers is inefficient for a non-moving 
pool.  This

.pekka.14-21-37: needs to share with MV2 (eventually).

.pekka.14-21-54: M .colour.bits This doesn't work with ambiguous pointers in 
the middle

.pekka.14-21-55: of objects.

.pekka.14-22-03: .

.pekka.14-22-47: that's it

.gavinm.14-23-06: Thanks.  Tony, no major defects.  GavinM, major defects?

.gavinm.14-24-16: M .source Should list documents like design.mps.buffer, 
design.mps.collection, design.mps.refset, and design.mps.class-interface even 
if they aren't currently very useful

.gavinm.14-24-28: M .req.ambiguous Should specify whether it supports the other 
ranks.  This implies not.

.gavinm.14-24-38: M .not-req.grey Should specify how that restriction is 
enforced

.gavinm.14-24-48: Done.

.gavinm.14-25-13: Going around again, Richard all other issues, including new 
majors?

.richardk.14-25-55: (no New issues; 1I and 3q to go; in document order...)

.richardk.14-26-25: I proc.review.check(0)  After ".class" there is the word 
"End", followed by more procedure (on my print-out anyway).

.gavinm.14-26-34: What is the defect?

.richardk.14-27-07: The defect is that "End" outside any tagged paragraph 
suggests that it marks the end of the procedure.  But it doesn't -- there is 
one further paragraph.

.richardk.14-27-23: I haven't checked rule.proc

.richardk.14-27-28: Am I confused?

.gavinm.14-27-36: Yes.  Carry on.

.richardk.14-27-50: q .colour  Does MPS always condemn a whole segment at a 
time?

.richardk.14-28-16: q .fill  Does using memory to refill a buffer change the 
flags for that memory?  Does it only use uncondemned segments?

.richardk.14-28-28: q .benefit.guess  What does "the pool is condemned" mean?

.richardk.14-28-56: (end of issues)

.gavinm.14-29-10: Pekka, non-majors?

.pekka.14-29-41: m .one-condemn Uses the old term "mark/scanned tables", should 
say

.pekka.14-29-42: "colour tables".

.pekka.14-30-00: m .stress Should say "impl.c.amsss"

.pekka.14-30-10: m .stress Should say "impl.c.amsss"

.pekka.14-30-16: sorry

.pekka.14-30-19: m .reclaim.empty.buffer Need to add "after reclaim".

.gavinm.14-30-25: S'ok.

.pekka.14-31-00: m .marked.scan.fail Unclear, should reference some doc of scan

.pekka.14-31-01: failures (but I suspect there is none).

.pekka.14-31-26: m .marked.condemn Unnecessary to set the marked flag, it must 
be FALSEalready.

.pekka.14-31-40: C .iteration.buffer Last sentence awkward.

.pekka.14-32-03: m .colour.single Duplicates .one-condemn.

.pekka.14-32-07: end

.gavinm.14-32-27: Thanks.  Tony?

.tony.14-32-49: C .overview There may be a general interest in an efficient M&S 
pool for Dylan as a way of evaluating the benefit of copying

.pekka.14-32-52: Oh, I missed one

.gavinm.14-33-02: I'll come round again.

.tony.14-33-14: C .req.correct I have doubts about the plausibility of an 
"obviously correct" measure

.tony.14-33-30: q .not-req.grey Shouldn't there be a source document which 
describes a grey mutator?

.tony.14-33-41: q .no-alloc Couldn't one-phase allocation be simply achieved by 
using buffered allocation inside the arena lock?

.tony.14-34-18: (that's all that we haven't seen already)

.gavinm.14-34-55: Thanks.  Gavin?

.gavinm.14-35-04: m .no-alloc Surely it's the fact that it's formatted and 
exact?

.gavinm.14-35-13: q .fix.to-black Would it be useful to do this elsewhere?

.gavinm.14-35-23: C .colour.bits This seems an odd halfway house between 
mark/scan and white/grey/black

.gavinm.14-35-33: C .colour.single The bit tables could be allocated on condemn

.gavinm.14-35-43: I .colour.* We could usefully implement the idea of a 
tri-colour array of grains once, centrally, efficiently

.gavinm.14-35-53: ACTION pauses

.pekka.14-36-31: What's that an improvement to?

.gavinm.14-36-50: It's not clear.  Some MPM support thingie.

.richardk.14-36-54: (I don't understand your "m .no-alloc" issue)

.pekka.14-37-10: I disagree with it.

.gavinm.14-37-47: .no-alloc: I claim that incrementality and collection are not 
sufficient to imply that we can't have alloc.

.gavinm.14-38-01: We must have non-ambiguous references as well.

.gavinm.14-38-25: It's a detail of buffer design.  It's not very important.

.richardk.14-38-36: Okay, I don't grok this, but I'm a GC newbie still.  I'll 
puzzle over this one off-line.  Ta.

.gavinm.14-38-43: m .marked It's not clear what a "scan iteration" is here

.gavinm.14-38-53: m .init Could refer to the (placeholder) design.mps.align

.gavinm.14-39-04: m .benefit.repeat Surely this is "lastCondemned", or is it 
set on reclaim as well?

.gavinm.14-39-33: ACTION waits

.pekka.14-39-46: ACTION waits

.richardk.14-40-02: ACTION catches up.

.richardk.14-40-20: ACTION has caught up.

.gavinm.14-40-24: q .one-condemn Is there any way that object colour could 
usefully be conservatively correct for all active traces (assuming disjoint 
condemned sets)?

.gavinm.14-40-48: I role.check.backwards Should clarify granularity of reversal.

.gavinm.14-41-13: IN role.check.backwards Should recommend forwards logging 
order.

.gavinm.14-41-25: I design.mps.buffer Should be completed

.gavinm.14-41-29: 8-)

.pekka.14-41-37: indeed

.gavinm.14-41-48: Ok.  Richard, anything else?

.richardk.14-42-00: Um, like what?  Other iisues?

.richardk.14-42-15: No more issues, as I said.

.richardk.14-42-28: (oh, is this iterating to completion? I get it.)

.gavinm.14-42-35: Pekka?

.pekka.14-42-52: I design.mps.action The problem in .benefit.repeat is a general

.pekka.14-42-55: problem with actions, and should have a general solution.

.pekka.14-43-04: that's it

.gavinm.14-43-10: Tony?

.tony.14-43-19: No

.richardk.14-44-07: It may be wrong to add this now, but here goes...

.gavinm.14-44-20: IN guide.review.class.major Status of clarifications should 
be clarified

.richardk.14-44-38: M .marked.scan.fail Clarify "the problem condition" -- this 
may intersect with other issues people raised on this paragraph

.gavinm.14-44-59: Ok.  I believe we're all done.

.richardk.14-45-14: (What does "IN" mean?  Is that just "I"?)

.gavinm.14-45-21: Let's have another tea break, and meet up at 16:00 for a 
process brainstorm.

.gavinm.14-45-25: (New)

.richardk.14-45-31: (ta.)

.gavinm.14-45-42: TOPIC: Tea

.richardk.14-45-49: ACTION smiles.

.pekka.14-45-58: ACTION goes to get tea

.gavinm.14-50-21: Richardk's last major issue was MN

.tony.14-53-35: I didn't think to include the following suggestion earlier ...

.richardk.14-54-17: ACTION comes up with an issue he should have mentioned.

.tony.14-54-29: IN I found the checking time to be somewhat limited. Increasing 
it (by say 50%) would have helped me

.pekka.14-54-58: Did you know that in 1710, Britain got 10% of its state 
revenues from the import tax on tea?

.tony.14-55-33: Does that imply we must concentrate on tea in the tea break?

.richardk.14-55-53: IN guide.review.class.major  The term "cost to fix" isn't 
(I understand) what is meant.  What is meant is "accumulated cost of the 
defect".

.richardk.14-56-29: 10%] Wow!  Hpw much does gov.uk get from tobacco and 
alcohol now?

.richardk.14-56-54: 10%] is there any tax on coffee, or remaining tax on tea?

.pekka.14-56-58: One of the benefits of loggin is supposed to be that everybody 
gets to read what the others thought -- if we're all back at the terminal we 
might as well continue

.richardk.14-58-16: IN guide.review.class.major  Almost all defects have an 
"accumulated cost" which is higher the later you fix the defect.  Ergo this is 
not a useful categorisation of defects.

.pekka.14-58-53: So pick one of yours as an example and explain how its cost 
increases

.pekka.14-59-42: "cost to fix" that is.

.gavinm.14-59-58: Please see your mail for a list of major defects logged.  I'm 
still choosing which ones to brainstorm.

.richardk.15-00-11: icnreases] The longer a defect is in a document, the more 
people encounter it. The cost of making the correction is constant.  So the 
accumulated cost is increasing with time.

.pekka.15-01-16: But the cost to fix isn't.

.richardk.15-01-51: ie. accumulated cost (eventually) = Rate-of-cost * 
time-defect-lingers  +  cost-of-correction

.richardk.15-02-31: The curernt statement is "cost to fix".  I believe this is 
not what is meant -- thsi from Gavin, in discussion yesterday.

.richardk.15-03-30: (and hence my first of two INs just logged)

.richardk.15-04-25: Sorry -- I'm not sure I've explained this in the most clear 
order.

.pekka.15-04-36: So what do you believe is the _intended_ distinction between 
"major" and "minor".

.pekka.15-04-40: ?

.richardk.15-06-01: I think what we _ought_ to be distinguishing is which 
defects deserve close attention -- (wit the caveat that such binary division of 
the whole spectrum of worthwhile-ness of fixing into two camps is necessarily 
an approximation).

.richardk.15-06-22: I guess the major/minoir distinction is seeking for this, 
but I think it's a way away from it.

.gavinm.15-06-48: TOPIC: Process

.pekka.15-06-54: No, it's seeking for an objectively justification for 
concentrating on some defects.

.gavinm.15-06-59: TOPIC: "Process

.gavinm.15-07-08: TOPIC: Process-Brainstorm

.gavinm.15-07-17: TOPIC: Process\

.gavinm.15-07-20: TOPIC: Process-Brainstorm

.gavinm.15-07-27: ACTION humphs

.pekka.15-07-33: Let us know when you're finiashed, Gavin....

.gavinm.15-07-48: Ok.  There were 20 major issues logged.

.gavinm.15-08-09: Most of them relate to clarity.

.richardk.15-08-20: Pekka] Yes, that's what I meant too.  "which defects 
deserve close attention" == "concentrating on some defects", non?

.pekka.15-08-31: Non.

.gavinm.15-08-33: Why is there so much unclear in a document that's been RFC'd?

.gavinm.15-09-43: How could we have higher clarity in design documents when 
they reach review?

.richardk.15-09-47: (Umm, presumably what we want here is responses of the form 
"Hmm, if we'd done X instead of Y, these defets would have been caught earlier" 
(eg. by RFC) ?)

.pekka.15-10-15: Or, even better, avoided altogether

.tony.15-10-35: One interpretation is that many of the reported major issues 
aren't very major

.gavinm.15-10-39: What we're trying to do here is to find ways we can change 
our process to prevent defects of the type under discussion from occurring.

.pekka.15-10-48: But they were unclear

.gavinm.15-11-07: Irregardless of their classification, they are unclear.

.richardk.15-11-42: English is a hard language to avoid unclaerness in 
(compared to machine languages).

.pekka.15-12-09: So lets write them in German.

.richardk.15-12-13: It's a hard problem.  Checking for clarity is a process of 
two levels (I ad-hoc freely...)

.gavinm.15-12-30: I think a lot of the unclearness arose from a lack of 
references to documents that should (but mostly don't) define terms.

.richardk.15-12-48: ...1) can you understand it?  2) is there a plausible 
misunderstanding that might confuse someone other than you?

.tony.15-13-03: I agree with Gavin's comment about references

.pekka.15-13-14: It think 2) is a dangerous game.

.gavinm.15-13-40: (1) is better as, "it is clear to me?"

.richardk.15-14-14: We should also consider that the unclearness was in part 
due to the inexperience (in MPS design) of the checker (Me!).  Whether this is 
'signal' or 'noise' (how clear do we want it to be to inexperienced MMers?) is 
a fair question.

.pekka.15-14-15: Regarding terms, certain terms should be common language: 
scan, mark, pool, etc., but Gavin is right that a definition should exist 
somewhere.

.gavinm.15-14-30: I think we need to try harder at referring to placeholder 
documents, as well as completing them.

.pekka.15-14-40: Yes

.tony.15-14-51: Some terms aren't common (e.g. group)

.pekka.15-15-18: OTOH, reviewers should be familiar with those documents before 
the review starts (or,

.gavinm.15-15-27: Perhaps we should have a general architectural design for 
what MPS documents should exist and be kept up to date, and what they should 
contain.

.pekka.15-15-33: in the absence of useful docs, the subject matter)

.tony.15-15-51: Is it a process goal that few problems turn up at review time?

.tony.15-15-58: If so, then how few?

.gavinm.15-15-59: We have a number of rusty design documents I didn't mention 
earlier, like design.mps.fix and design.mps.scan.

.pekka.15-16-02: No, we should have an editor, because that changes very fast.

.richardk.15-16-02: (2)] 2) is a dangerous game in that it can be taken too 
far, looking for perverse misunderstandings.  But it is also a vital aspect of 
clrity.  Clarity isn't just "it's clear to _me_".

.pekka.15-16-09: editor/librarian

.pekka.15-16-28: 2) that's why we have multiple reviewers

.gavinm.15-16-55: Tony, the ultimate goal is that there should be no defects in 
documents reaching review.

.gavinm.15-17-06: Of course, this is distinct from there being no defects 
logged.

.tony.15-17-24: If we were successful at that, the review wouldn't have much of 
a payoff

.gavinm.15-17-25: Pekka, could you expand on your editor/librarian suggestion?

.pekka.15-17-38: I think I have

.pekka.15-17-43: ACTION looks

.richardk.15-17-47: (1) and (2)]  My point is that both of these are hard and 
time-consuming for the author to satisfy and verify.

.gavinm.15-17-53: Tony, true, but the same would apply to QA.  I don't think 
we're in any danger at the moment.

.tony.15-18-25: Gavin - agreed. But we could make the RFC process more formal 
at the expense of spending more time in that

.tony.15-18-57: I suspect that RFC scrutiny is typically less pedantic

.gavinm.15-19-24: We had an RFC of this document.  Why weren't clarity problems 
resolved in that?

.pekka.15-19-33: It's role.librarian plus some of role.architect (because the 
doc is so patchy ATM)>

.pekka.15-20-35: The funny thing is, I didn't want an RFC at all, because I 
didn't think it was would be useful.

.pekka.15-20-48: Well, it wasn't but for all the wrong reasons.

.pekka.15-21-24: So, own up: who read the RFC?

.richardk.15-21-35: I read it.

.tony.15-21-39: I read it

.pekka.15-21-44: So...?

.gavinm.15-21-51: I think that, outside the context of a formal review, we tend 
to regard conprehension problems as our (the reader's) problem and hence to 
work harder rather than reporting them.

.richardk.15-21-54: reasons why more came out in review than from RFC, for 
richardk:

.richardk.15-22-10: a) what Gavin's just said about comprehension problems.,

.gavinm.15-22-17: DRJ and RIT read it.

.richardk.15-22-17: err, that's it.

.pekka.15-22-45: Would it have helped to prepare for the review in some way?

.richardk.15-23-09: b) things I didn't understand in RFC gave response "come 
back to this later" -- things I didn't understand in review gave response "log 
this a s defect now".

.richardk.15-23-45: gave response/made me respond

.gavinm.15-24-01: SUGGEST: proc.rfc (made-up name) should state that the RFC 
should state the type of comments required.  Further, clarity problems should 
be high on the list.

.gavinm.15-25-31: ACTION waits for any responses.

.pekka.15-25-42: I think the suggestion we came up with the last time was 
better:

.richardk.15-25-46: It was very easy (emotionally/psychologically) to list 
clarity problems in review, cos there's a clear 'licence' from the author to do 
so, and it's clear that the author has the final say -- the position of how 
much pressure the 'defect report' applies is

.richardk.15-25-46.1: clear: it's not a personal criticism in review, it's 
almost mechanical.

.tony.15-26-03: I'm not clear why we would want both an RFC and a review if the 
intention is to have identical scrutiny in both

.pekka.15-26-14: Nominate someone to respond, then they'll feel obligated to 
read it thoroughly.

.gavinm.15-26-56: SUGGEST: proc.rfc should state that the author should get at 
least one person who has to respond.

.pekka.15-27-00: Tony: Agreed.

.richardk.15-27-10: If I'd come to Pekka in response to his RFC with the list 
of defects, I'd have been worried that it would have seemed pressurising or 
picky.  A review is a licence to be picky, without that pickiness being taken 
as negativeness.

.richardk.15-27-31: the list/my very long list

.gavinm.15-27-38: OK.  I think we've got something to work with here.

.gavinm.15-27-45: We've got a few minutes left.

.tony.15-28-01: Gavin - what should an author do if he desn't get a response in 
RFC?

.gavinm.15-28-15: Does anyone have any other important issues that we could 
brainstorm process improvements to?

.gavinm.15-28-34: Tony, get someone to undertake to respond.

.tony.15-28-41: By force?

.richardk.15-28-46: ACTION smiles.

.gavinm.15-28-58: Either by request or by management.

.tony.15-29-07: OK

.pekka.15-29-28: How about 16?

.gavinm.15-29-44: OK.  Could you explain that one a little?

.richardk.15-30-06: In summary (of my view), there is a long list of reasons 
why review brings out things an RFC doesn't.  At least some of these (getting 
around to it, thoroughness) come from the formal, heavyweight nature of 
review.  It might be v. hard to get these

.richardk.15-30-06.1: benefits with a 'cheap' lightweight process.

.gavinm.15-30-12: Could ambiguous pointers give you an illegal bit combination?

.gavinm.15-30-42: a/ambiguous/interior/

.pekka.15-31-12: Well, if ambiguous fixes set random bits in the interior of an 
object, then the other parts of the program can't

.tony.15-31-16: If I come up with thought about the process over time, is there 
a procedure for making suggestions later?

.pekka.15-31-58: just scan the bit tables to find interesting objects, they 
also need to determine whether they bit they found is

.gavinm.15-32-14: [ Tony, e-mail, talking to process manager, creating request 
in process product ]

.pekka.15-32-15: at the beginning of an object (and hence meaningful).

.pekka.15-33-12: And ambiguous interior pointers is a global property, not a 
pool one.

.gavinm.15-33-26: How do we find free grains?

.pekka.15-33-37: when?

.pekka.15-33-56: There's an alloc bit table.

.gavinm.15-34-17: Ah.  Where does the design mention that?

.pekka.15-34-36: .alloc-bit-table

.richardk.15-34-37: ACTION remembers it.

.gavinm.15-34-40: .alloc.bit-table

.gavinm.15-35-10: mI .colour.bits Could mention alloc table again.

.pekka.15-35-14: Anyway, I wonder if there shouldn't be a standard test for new 
pools, that would try alll the hard things...

.pekka.15-35-30: "mI" ?

.gavinm.15-35-47: e/I/N/

.gavinm.15-35-57: ACTION wonders where his brain went

.pekka.15-36-22: Any suggestions?

.tony.15-36-41: About what?

.gavinm.15-36-45: We ought to sort out the relative merits of alloc/mark/scan, 
alloc/mark/grey, and black/grey/white.

.pekka.15-36-57: About the current subject

.gavinm.15-37-01: As bit tables.

.gavinm.15-37-09: We're looking at issue 16:

.gavinm.15-37-24: 16. M .colour.bits This doesn't work with ambiguous pointers 
in the middle

.gavinm.15-37-24.1: of objects.

.pekka.15-37-55: I was trying to sort that out, but failed, as this issue 
points out.

.gavinm.15-38-15: SUGGEST: Some design document restrict and define possible 
colour representations

.pekka.15-38-27: SUGGEST: this one.

.gavinm.15-39-24: Tony, can you take on this task?

.pekka.15-39-28: Also, I suspect the alloc bit table is just the simplest 
solution, not a good solution, as ptw has concluded.

.pekka.15-39-35: I want to do it.

.richardk.15-39-54: Gavin, are you saying that choice of representation of 
colour+freeness in bit-tables interacts with behaviour of ambig interior 
pointers?  (If so the reason is over my head, and I'll ponder it off-line)

.gavinm.15-40-11: Richard, yes.

.gavinm.15-40-48: There are five possible grain states: black, white, grey, 
free, interior.

.gavinm.15-41-09: These are represented here in the three bit-tables 
alloc/mark/grey.

.pekka.15-41-27: That's how Nick put it, I decided that wasn't a very useful 
description.

.gavinm.15-41-41: Fixing an ambiguous reference sets mark/grey bits without 
reference to the alloc bit.

.gavinm.15-41-45: I think.

.richardk.15-42-13: ACTION growls loudly at his IRC lient.

.gavinm.15-42-17: Ok.  Pekka, can you write up something generic about this?

.gavinm.15-42-34: I think we're about out of time, here.

.tony.15-42-35: Gavin - are you suggesting that pools should not be allowed to 
pick their own encodings of colour?

.gavinm.15-42-54: Yes.  Or at least not inadvisedly.

.richardk.15-42-58: I think he's sug that it's tricky, given implications of 
ambig interior ptrs.

.richardk.15-43-23: tricky -> make a separate study/analysis that pool-class 
implementors can refer to.

.gavinm.15-43-30: For example, we used to have a mixture of alloc and free 
tables, with the same (but reversed) significance.

.richardk.15-43-30: ->/=>

.gavinm.15-43-48: After much confusion, we standardised on alloc tables.

.gavinm.15-44-14: I'm not sure that this is even documented.

.gavinm.15-44-51: I'm happy to continue explaining things, but I want to call 
thisd Process Brainstorm to a halt soon.

.gavinm.15-45-10: Any more process improvement suggestions?

.gavinm.15-45-32: ACTION pauses

.richardk.15-45-36: Will someone be writing a list of concrete suggestions for 
making RFCs a bit more thororugh?

.gavinm.15-45-48: Yes.  Based on this brainstorm.

.richardk.15-45-54: 'kay.

.gavinm.15-46-12: ACTION thinks guide.rfc would be better.

.pekka.15-46-27: We're getting way too mcuh process, and way too little 
enforcement.

.gavinm.15-46-30: Ok.  Done.

.gavinm.15-46-33: TOPIC: More-tea

.gavinm.15-46-56: Thanks for your time, everyone.

.gavinm.15-46-59: Pekka, true.

.richardk.15-47-11: I would like to know how well this review met Pekka's hopes 
for it.

.pekka.15-47-21: PART

.gavinm.15-47-25: But there's still process we ought to have but don't.

.richardk.16-14-23: PART

.gavinm.16-41-59: PART


