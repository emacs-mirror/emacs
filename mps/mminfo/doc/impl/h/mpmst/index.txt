                  MEMORY POOL MANAGER DATA STRUCTURES
                              impl.h.mpmst
                             accepted impl
                           gavinm 1996-07-24

     1 /* impl.h.mpmst: MEMORY POOL MANAGER DATA STRUCTURES
     2  *
     3  * $HopeName: MMsrc!mpmst.h(trunk.9) $
     4  * Copyright (C) 1996 Harlequin Group, all rights reserved.
     5  *
     6  * .rationale: Almost all MPM data structures are defined in this
     7  * header, or in headers selected from here.  Most structures have
     8  * already been partially declared in impl.h.mpmtypes.  This
     9  * organization means that there is an easily browsable view of the
    10  * data structures, and that it is easy to experiment.
    11  *
    12  * .rationale.sig: Object signatures (PoolSig, etc.) are defined
    13  * here, along with the structures, so that any code which can see
    14  * a structure can also check its signature before using any of its
    15  * fields.
    16  */
    17 
    18 #ifndef mpmst_h
    19 #define mpmst_h
    20 
    21 #include "mpmtypes.h"
    22 
    23 #if defined(MPS_OS_W3)
    24 #include <windows.h>
    25 #endif /* MPS_OS_w3 */
    26 
    27 
    28 /* RingStruct -- double-ended queue structure
    29  *
    30  * .ring: The ring structure is used as a field in other structures
    31  * in order to link them together into "rings".  See impl.c.ring.
    32  */
    33 
    34 typedef struct RingStruct {     /* double-ended queue structure */
    35   Ring next, prev;              /* links to next and prev element */
    36 } RingStruct;
    37 
    38 
    39 /* PoolClassStruct -- pool class structure
    40  *
    41  * .class: The pool class structure is defined by each pool class
    42  * implementation in order to provide an interface between the MPM
    43  * and the class (see design.mps.class-interface) via generic
    44  * functions (see impl.c.pool).  A class XXX defines a function
    45  * PoolClassXXX() returning a PoolClass pointing to a PoolClassStruct
    46  * of methods which implement the memory management policy.
    47  *
    48  * .class.end-sig: The class structure has another copy of the
    49  * signature at the end.  This causes the compiler to complain
    50  * if the class structure is extended without modifying static
    51  * initializers.
    52  */
    53 
    54 #define PoolClassSig    ((Sig)0x519C1A55)
    55 
    56 typedef struct PoolClassStruct {
    57   Sig sig;                      /* impl.h.misc.sig */
    58   const char *name;             /* class name string */
    59   size_t size;                  /* size of instance structure */
    60   size_t offset;                /* offset of PoolStruct in instance */
    61   Attr attr;                    /* attributes */
    62   PoolInitMethod init;          /* initialize the pool descriptor */
    63   PoolFinishMethod finish;      /* finish the pool descriptor */
    64   PoolAllocMethod alloc;        /* allocate memory from pool */
    65   PoolFreeMethod free;          /* free memory to pool */
    66   PoolBufferInitMethod bufferInit;
    67   PoolBufferFinishMethod bufferFinish;
    68   PoolBufferFillMethod bufferFill;
    69   PoolBufferTripMethod bufferTrip;
    70   PoolBufferExposeMethod bufferExpose;
    71   PoolBufferCoverMethod bufferCover;
    72   PoolCondemnMethod condemn;
    73   PoolGreyMethod grey;
    74   PoolScanMethod scan;          /* find references during tracing */
    75   PoolFixMethod fix;            /* make a referent live during tracing */
    76   PoolReclaimMethod reclaim;
    77   PoolAccessMethod access;      /* handle an access to shielded memory */
    78   PoolDescribeMethod describe;  /* describe the contents of the pool */
    79   Sig endSig;                   /* .class.end-sig */
    80 } PoolClassStruct;
    81 
    82 
    83 /* PoolStruct -- pool instance structure
    84  *
    85  * .pool: A pool instance structure is created when a pool is created
    86  * and holds the generic part of the pool's state.  Each pool defines
    87  * a "subclass" of the pool structure which contains PoolStruct as a
    88  * a field.  The surrounding structure holds the class-specific part
    89  * of the pool's state.  See impl.c.pool.
    90  */
    91 
    92 #define PoolSig         ((Sig)0x519B0011)
    93 
    94 typedef struct PoolStruct {     /* Pool instance structure */
    95   Sig sig;                      /* impl.h.misc.sig */
    96   Serial serial;                /* from space->poolSerial */
    97   PoolClass class;              /* pool class structure */
    98   Space space;                  /* owning space */
    99   RingStruct spaceRing;         /* link in list of pools in space */
   100   RingStruct bufferRing;        /* allocation buffers are attached to 
pool */
   101   Serial bufferSerial;          /* serial of next buffer */
   102   Align alignment;              /* alignment for units */
   103 } PoolStruct;
   104 
   105 
   106 /* MFSStruct -- MFS pool instance structure
   107  *
   108  * .mfs: See impl.c.poolmfs.
   109  *
   110  * The MFS pool instance structure is declared here because it is 
in-lined
   111  * in the control pool structure which is in-lined in the space.  
Normally,
   112  * pool instance structures are declared with the pools.
   113  *
   114  * Note that the signature appears at the end.  There's already one at 
the
   115  * beginning (in the poolStruct) so putting it at the end gives some 
extra
   116  * fencepost checking.
   117  */
   118 
   119 #define MFSSig          ((Sig)0x5193F5B1)
   120 
   121 typedef struct MFSStruct {      /* MFS instance structure */
   122   PoolStruct poolStruct;        /* generic pool structure */
   123   Size unroundedUnitSize;       /* the unit size requested */
   124   Size extendBy;                /* segment size rounded using unitSize */
   125   Size unitSize;                /* rounded for management purposes */
   126   Word unitsPerSeg;             /* number of units per segment */
   127   struct MFSHeaderStruct *freeList; /* head of the free list */
   128   Seg segList;                  /* the first segment */
   129   Sig sig;                      /* impl.h.misc.sig */
   130 } MFSStruct;
   131 
   132 
   133 /* MVStruct -- MV pool instance structure
   134  *
   135  * .mv: See impl.c.poolmv.
   136  *
   137  * The MV pool instance structure is declared here because it is the
   138  * control pool structure which is in-lined in the space.  Normally,
   139  * pool instance structures are declared with the pools.
   140  *
   141  * Note that the signature appears at the end.  There's already one at 
the
   142  * beginning (in the poolStruct) so putting it at the end gives some 
extra
   143  * fencepost checking.
   144  */
   145 
   146 #define MVSig           ((Sig)0x519E3FEE)
   147 
   148 typedef struct MVStruct {
   149   PoolStruct poolStruct;        /* generic pool structure */
   150   MFSStruct blockPoolStruct;    /* for managing block descriptors */
   151   MFSStruct spanPoolStruct;     /* for managing span descriptors */
   152   Size extendBy;                /* segment size to extend pool by */
   153   Size avgSize;                 /* client estimate of allocation size */
   154   Size maxSize;                 /* client estimate of maximum size */
   155   Size space;                   /* total free space in pool */
   156   Size lost;                    /* lost because free couldn't 
allocate(!) */
   157   RingStruct spans;             /* span chain */
   158   Sig sig;                      /* impl.h.misc.sig */
   159 } MVStruct;
   160 
   161 
   162 /* VMStruct -- virtual memory structure
   163  *
   164  * .vm: The VM structure is used when the MPM is configured to use a
   165  * virtual-memory based arena (impl.c.arenavm) which uses memory mapping
   166  * (impl.h.mpm.vm).  It holds the state information necessary to provide
   167  * that mapping, and as such, is specific to the operating system.
   168  */
   169 
   170 #define VMSig   ((Sig)0x519FEE33)
   171 
   172 #ifdef TARGET_VM_RM
   173 
   174 typedef struct VMStruct { /* Real Memory fake VM; impl.c.vmrm */
   175   Sig sig;   /* impl.h.misc.sig */
   176   Align align;   /* made-up alignment */
   177   Addr base, limit;             /* boundaries of reserved space */
   178   Size reserved;                /* total reserved address space */
   179   Size mapped;                  /* total mapped memory */
   180 } VMStruct;
   181 
   182 #elif defined(MPS_OS_W3)
   183 
   184 typedef struct VMStruct {       /* Win32 VM structure; impl.c.vmnt */
   185   Sig sig;                      /* impl.h.misc.sig */
   186   Align align;                  /* page size */
   187   Addr base, limit;             /* boundaries of reserved space */
   188   Size reserved;                /* total reserved address space */
   189   Size mapped;                  /* total mapped memory */
   190 } VMStruct;
   191 
   192 #elif defined(MPS_OS_O1) || defined(MPS_OS_S7) || defined(MPS_OS_IR)
   193 
   194 typedef struct VMStruct {       /* ANSI fake VM structure; impl.c.vman */
   195   Sig sig;                      /* impl.h.misc.sig */
   196   Addr base, limit;             /* boundaries of malloc'd memory */
   197   void *block;                  /* pointer to malloc'd block, for free() 
*/
   198   Size reserved;                /* total reserved address space */
   199   Size mapped;                  /* total mapped memory */
   200 } VMStruct;
   201 
   202 #elif defined(MPS_OS_SU) || defined(MPS_OS_SO)
   203 
   204 typedef struct VMStruct {       /* SunOS 4 VM structure; impl.c.vmsu */
   205   Sig sig;                      /* impl.h.misc.sig */
   206   int zero_fd;                  /* see impl.c.vmsu */
   207   int none_fd;                  /* see impl.c.vmsu */
   208   Align align;                  /* page size */
   209   Addr base, limit;             /* boundaries of reserved space */
   210   Size reserved;                /* total reserved address space */
   211   Size mapped;                  /* total mapped memory */
   212 } VMStruct;
   213 
   214 #else
   215 #error "No definition of VMStruct for this OS."
   216 #endif
   217 
   218 
   219 /* SegStruct -- segment structure
   220  *
   221  * .seg: Segments are the basic units of memory allocation from
   222  * the arena, and also the units of scanning, shielding, and colour
   223  * for the MPM (pool classes may subdivide segments and have a finer
   224  * grained idea of colour, for example).
   225  *
   226  * .seg.pm: The pm field is used by both the shield (impl.c.shield)
   227  * and the ANSI fake protection (impl.c.protan).
   228  */
   229 
   230 typedef struct SegStruct {      /* segment structure */
   231   Pool pool;                    /* .seg.pool: owner, 
   232      * MUST BE FIRST, impl.c.arenavm.page */
   233   Bool single;                  /* single page segment */
   234   Rank rank;                    /* rank of all references in this seg */
   235   AccessSet pm, sm;             /* protection and shield modes */
   236   Size depth;                   /* see impl.c.shield.def.depth */
   237   void *p;                      /* pointer for use of owning pool */
   238   TraceId condemned;            /* seg condemned? for which trace? */
   239 } SegStruct;
   240 
   241 
   242 /* ArenaStruct -- arena structure
   243  *
   244  * .def: The arena structure is in-lined in the space structure
   245  * (impl.h.mpmst.space).
   246  */
   247 
   248 #define ArenaSig        ((Sig)0x519A7E9A)
   249 
   250 #ifdef TARGET_ARENA_ANSI
   251 
   252 /* This is the arena structure used by the ANSI-based  */
   253 /* arena implementation, impl.c.arenaan. */
   254 
   255 typedef struct ArenaStruct {    /* ANSI arena structure */
   256   Sig sig;                      /* impl.h.misc.sig */
   257   RingStruct blockRing;         /* list of blocks in arena */
   258   Size committed;               /* total allocated memory */
   259 } ArenaStruct;
   260 
   261 #else /* TARGET_ARENA_ANSI not */
   262 
   263 /* This is the arena structure used by the virtual memory based */
   264 /* arena implementation, impl.c.arenavm. */
   265 
   266 typedef struct PageStruct *Page;/* page type */
   267 typedef Word *BT;               /* bool table type */
   268 
   269 typedef struct ArenaStruct {    /* VM arena structure */
   270   Sig sig;                      /* impl.h.misc.sig */
   271   VMStruct vmStruct;            /* virtual memory structure */
   272   Addr base;                    /* base address of arena area */
   273   Addr limit;                   /* limit address of arena area */
   274   Size pageSize;                /* size of block managed by PageStruct */
   275   Shift pageShift;              /* log2 of page size, for shifts */
   276   Size pages;                   /* number of pages in table */
   277   Page pageTable;               /* the page table */
   278   BT freeTable;                 /* page free table */
   279   Size tablesSize;              /* size of area occupied by tables */
   280   Size tablePages;              /* number of pages occupied by tables */
   281 } ArenaStruct;
   282 
   283 #endif /* TARGET_ARENA_ANSI */
   284 
   285 
   286 /* APStruct -- allocation point structure
   287  *
   288  * See impl.c.buffer.
   289  *
   290  * The allocation point is exported to the client code so that it can
   291  * in-line buffered allocation.
   292  *
   293  * .ap: This structure must match impl.h.mps.ap.
   294  * See also impl.c.mpsi.check.ap.
   295  */
   296 
   297 typedef struct APStruct {
   298   Addr init;                    /* limit of initialized area */
   299   Addr alloc;                   /* limit of allocated area */
   300   Addr limit;                   /* limit of allocation buffer */
   301 } APStruct;
   302 
   303 
   304 /* BufferStruct -- allocation buffer structure
   305  *
   306  * See impl.c.buffer.
   307  *
   308  * The buffer contains an AP which may be exported to the client.
   309  */
   310 
   311 #define BufferSig       ((Sig)0x519B0FFA)
   312 
   313 typedef struct BufferStruct {
   314   Sig sig;                      /* impl.h.misc.sig */
   315   Serial serial;                /* from pool->bufferSerial */
   316   Space space;                  /* owning space */
   317   Pool pool;                    /* owning pool */
   318   Seg seg;                      /* segment being buffered */
   319   Rank rank;                    /* rank of references being created */
   320   Addr base;                    /* base address of allocation buffer */
   321   APStruct ap;                  /* the allocation point */
   322   Align alignment;              /* allocation alignment */
   323   Bool exposed;                 /* is buffer memory exposed? */
   324   RingStruct poolRing;          /* buffers are attached to pools */
   325   AccessSet shieldMode;         /* shielding for allocated memory */
   326   TraceSet grey;                /* colour for allocated memory */
   327   void *p; int i;               /* closure variables */
   328 } BufferStruct;
   329 
   330 
   331 /* FormatStruct -- object format structure
   332  *
   333  * See impl.c.format.
   334  *
   335  * The only format actually implemented is variant "A" described by
   336  * the MPS Interface.  In future, when more variants are added, the
   337  * FormatStruct will have to be adapted in some way to cope.
   338  */
   339 
   340 #define FormatSig       ((Sig)0x519F43A2)
   341 
   342 typedef struct FormatStruct {
   343   Sig sig;                      /* impl.h.misc.sig */
   344   Serial serial;                /* from space->formatSerial */
   345   Space space;                  /* owning space */
   346   RingStruct spaceRing;         /* link in list of formats in space */
   347   Align alignment;              /* alignment of formatted objects */
   348   FormatScanMethod scan;
   349   FormatSkipMethod skip;
   350   FormatMoveMethod move;
   351   FormatIsMovedMethod isMoved;
   352   FormatCopyMethod copy;
   353   FormatPadMethod pad;
   354 } FormatStruct;
   355 
   356 
   357 /* LDStruct -- location dependency structure
   358  *
   359  * See impl.c.ld.
   360  *
   361  * A version of this structure is exported to the client.
   362  * See impl.h.mps.ld and impl.c.mpsi.check.ld.
   363  */
   364 
   365 typedef struct LDStruct {
   366   Epoch epoch;
   367   RefSet rs;
   368 } LDStruct;
   369 
   370 
   371 /* LockStruct and ThreadStruct -- locking and thread structures */
   372 
   373 #define LockSig         ((Sig)0x519110CC)
   374 #define ThreadSig       ((Sig)0x51924EAD)
   375 
   376 #if defined(MPS_OS_W3)
   377 
   378 typedef struct LockStruct {     /* Win32 lock structure */
   379   Sig sig;                      /* impl.h.misc.sig */
   380   unsigned long claims;         /* # claims held by the owning thread */
   381   CRITICAL_SECTION cs;          /* Win32's recursive lock thing */
   382 } LockStruct;
   383 
   384 typedef struct ThreadStruct {   /* Win32 thread structure */
   385   Sig sig;                      /* impl.h.misc.sig */
   386   Serial serial;                /* from space->threadSerial */
   387   Space space;                  /* owning space */
   388   RingStruct spaceRing;         /* threads attached to space */
   389   HANDLE handle;                /* Handle of thread 
impl.c.thnti3.thread.handle */
   390   DWORD id;                     /* Thread id of thread */
   391 } ThreadStruct;
   392 
   393 #elif defined(MPS_OS_SU) || defined(MPS_OS_O1) || \
   394  defined(MPS_OS_S7) || defined(MPS_OS_IR) || defined(MPS_OS_SO)
   395 
   396 typedef struct LockStruct {     /* ANSI fake lock structure */
   397   Sig sig;                      /* impl.h.misc.sig */
   398   unsigned long claims;         /* # claims held by owner */
   399 } LockStruct;
   400 
   401 typedef struct ThreadStruct {   /* ANSI fake thread structure */
   402   Sig sig;                      /* impl.h.misc.sig */
   403   Serial serial;                /* from space->threadSerial */
   404   Space space;                  /* owning space */
   405   RingStruct spaceRing;         /* attaches to space */
   406 } ThreadStruct;
   407 
   408 #else
   409 #error "No definition of LockStruct or ThreadStruct for this OS."
   410 #endif
   411 
   412 
   413 /* RootStruct -- tracing root structure
   414  *
   415  * See impl.c.root.
   416  *
   417  * .root: The discriminator for the union is of type RootVar.
   418  */
   419 
   420 #define RootSig         ((Sig)0x51940022)
   421 
   422 typedef struct RootStruct {
   423   Sig sig;                      /* impl.h.misc.sig */
   424   Serial serial;                /* from space->rootSerial */
   425   Space space;                  /* owning space */
   426   RingStruct spaceRing;         /* attachment to space */
   427   Rank rank;                    /* rank of references in this root */
   428   TraceSet grey;                /* marked but not scanned for per trace 
*/
   429   RootVar var;                  /* union discriminator */
   430   union RootUnion {
   431     struct {
   432       RootScanMethod scan;      /* the function which does the scanning 
*/
   433       void *p;                  /* environment for scan */
   434       size_t s;                 /* environment for scan */
   435     } fun;
   436     struct {
   437       Addr *base;               /* first reference in table */
   438       Addr *limit;              /* last reference, plus one */
   439     } table;
   440     struct {
   441       RootScanRegMethod scan;
   442       Thread thread;
   443       void *p;
   444     } reg;
   445     struct {
   446       FormatScanMethod scan;
   447       Addr base, limit;
   448     } fmt;
   449   } the;
   450 } RootStruct;
   451 
   452 
   453 /* Scan State
   454  *
   455  * See impl.c.trace.
   456  *
   457  * The first four fields of the trace structure must match the
   458  * external scan state structure (mps_ss_s) thus:
   459  *   ss->fix            mps_ss->fix
   460  *   ss->zoneShift      mpm_ss->w0
   461  *   ss->condemned      mpm_ss->w1
   462  *   ss->summary        mpm_ss->w2
   463  * See impl.h.mps.ss and impl.c.mpsi.check.ss.  This is why the
   464  * Sig field is in the middle of this structure.
   465  *
   466  * .ss.zone: The zoneShift field is therefore declared as Word
   467  * rather than Shift.
   468  */
   469 
   470 #define ScanStateSig    ((Sig)0x5195CA95)
   471 
   472 typedef struct ScanStateStruct {
   473   Res (*fix)(ScanState ss, Addr *refIO);
   474   Word zoneShift;
   475   RefSet condemned;             /* condemned set, for inline fix test */
   476   RefSet summary;               /* accumulated summary of scanned 
references */
   477   Sig sig;                      /* impl.h.misc.sig */
   478   Space space;                  /* owning space */
   479   TraceId traceId;              /* trace ID of scan */
   480   Rank rank;                    /* reference rank of scanning */
   481   Addr weakSplat;               /* value of weak refs to unforwarded 
objects */
   482 } ScanStateStruct;
   483 
   484 typedef struct TraceStruct {
   485   RefSet condemned;
   486 } TraceStruct;
   487 
   488 
   489 /* SpaceStruct -- the space structure
   490  *
   491  * See impl.c.space.
   492  *
   493  * .space: The space structure is the top-level state of the
   494  * MPS, and as such contains a lot of fields which are considered
   495  * "global".  These fields belong to different modules.  The module
   496  * which owns each group of fields is commented.
   497  */
   498 
   499 #define SpaceSig        ((Sig)0x5195BACE)
   500 
   501 typedef struct SpaceStruct {
   502   /* space fields (impl.c.space) */
   503   Sig sig;                      /* impl.h.misc.sig */
   504   Serial serial;                /* from static spaceSerial */
   505   RingStruct globalRing;        /* node in global ring of spaces */
   506   Bool poolReady;               /* has control pool been initialized? */
   507   MVStruct controlPoolStruct;   /* pool for miscellaneous items */
   508   LockStruct lockStruct;        /* space's lock */
   509   Size pollThreshold;           /* see SpacePoll() */
   510   Bool insidePoll;              /* prevent recursive polling */
   511 
   512   /* arena fields (impl.c.arena*) */
   513   ArenaStruct arenaStruct;      /* the arena */
   514 
   515   /* pool fields (impl.c.pool) */
   516   RingStruct poolRing;          /* list of pools in space */
   517   Serial poolSerial;            /* serial of next pool */
   518 
   519   /* root fields (impl.c.root) */
   520   RingStruct rootRing;          /* ring of roots attached to space */
   521   Serial rootSerial;            /* serial of next root */
   522 
   523   /* format fields (impl.c.format) */
   524   RingStruct formatRing;        /* ring of formats attached to space */
   525   Serial formatSerial;          /* serial of next format */
   526 
   527   /* thread fields (impl.c.thread) */
   528   RingStruct threadRing;        /* ring of attached threads */
   529   Serial threadSerial;          /* serial of next thread */
   530   
   531   /* shield fields (impl.c.shield) */
   532   Bool insideShield;             /* TRUE iff inside shield */
   533   Seg shCache[SHIELD_CACHE_SIZE];/* Cache of unsynced segs */
   534   Size shCacheI;                 /* index into cache */
   535   Size shDepth;                  /* sum of depths of all segs */
   536   Bool suspended;                /* TRUE iff mutator suspended */
   537 
   538   /* trace fields (impl.c.trace) */
   539   TraceSet busyTraces;          /* set of running traces */
   540   TraceStruct trace[TRACE_MAX]; /* trace structures */
   541   Shift zoneShift;              /* see impl.c.ref */
   542 
   543   /* location dependeny fields (impl.c.ld) */
   544   Epoch epoch;                  /* current epoch */
   545   RefSet prehistory;            /* all-time history of movements */
   546   RefSet history[SPACE_LD_LENGTH]; /* history of object movements */
   547 } SpaceStruct;
   548 
   549 
   550 #endif /* mpmst_h */

