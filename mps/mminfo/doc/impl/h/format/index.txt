                        OBJECT FORMAT INTERFACE
                             impl.h.format
                               draft impl
                           richard 1995-10-09

/*  ==== OBJECT FORMATS ====
 *
 *  $HopeName: MMsrc/!format.h(trunk.1)$
 *
 *  Copyright (C) 1995 Harlequin Group, all rights reserved
 */

#ifndef format_h
#define format_h

typedef struct FormatStruct *Format;

#include "std.h"
#include "trace.h"


/*  == Format Structure ==
 *
 *  alignment is the alignment required by the object format.  It must
 *  be a positive power of two.
 *
 *  The "scan" method searches a single object at "object" and fixes
 *  all references therein by applying the TraceFix.
 *
 *  The "skip" method skips a single object at "object" and returns
 *  the address just past the object.  "length" returns the length
 *  of the object in bytes.  Neither may be called on a forwarded
 *  object.
 *
 *  "isNotObject" examines the memory at "addr" to determine whether
 *  it is possibly an object.  If it is definitely not an object,
 *  the method returns TRUE.  If it is or might be an object, it returns
 *  FALSE.
 *
 *  "isMoved" returns TRUE if the object has been moved, updating
 *  *toReturn with the new address.  Otherwise it returns FALSE, and
 *  updates *lengthReturn with the number of bytes that would be
 *  required to move the object into.
 *
 *  "move" copies the object at "from" to "to" and marks the original as
 *  moved.
 */

typedef Addr (*FormatScan)(Addr object, Trace trace);
typedef Addr (*FormatSkip)(Addr object);
typedef Addr (*FormatLength)(Addr object);
typedef Bool (*FormatIsNotObject)(Addr addr);
typedef Bool (*FormatIsMoved)(Addr *lengthReturn, Addr *toReturn, Addr object);
typedef void (*FormatMove)(Addr from, Addr to);

typedef struct FormatStruct
{
#ifdef DEBUG_SIGN
  Sig sig;
#endif
  Addr alignment;
  FormatScan scan;
  FormatSkip skip;
  FormatLength length;
  FormatIsNotObject isNotObject;
  FormatIsMoved isMoved;
  FormatMove move;
} FormatStruct;


extern Bool FormatIsValid(Format format, ValidationType validParam);
extern Error FormatInit(Format format, Addr alignment,
   FormatScan scan,
   FormatSkip skip,
   FormatLength length,
   FormatIsNotObject isNotObject,
   FormatIsMoved isMoved,
   FormatMove move);
extern void FormatFinish(Format format);


#endif /* format_h */

