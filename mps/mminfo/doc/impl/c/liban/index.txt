    ANSI OPERATING SYSTEM ENVIRONMENT LIBRARY SUPPORT IMPLEMENTATION
                              impl.c.liban
                             accepted impl
                           richard 1995-08-30

/*  ==== ANSI LIBRARY SUPPORT ====
 *
 *  $Id: liban.c,v 1.1 1995/01/16 14:19:43 richard Exp $
 *
 *  Copyright (C) 1994 Harlequin Group, all rights reserved
 *
 *  This is the ANSI C Library implementation of the library support
 *  interface.
 */

#include "std.h"
#include "lib.h"
#include <stdarg.h>
#include <stdlib.h>
#include <string.h>
#include <stdio.h>


LibStream LibStreamIn(void)
{
  return((LibStream)stdin);
}

LibStream LibStreamOut(void)
{
  return((LibStream)stdout);
}

LibStream LibStreamErr(void)
{
  return((LibStream)stderr);
}


extern void LibAbort(void)
{
  abort();
}

extern Error LibFormat(LibStream stream, char *format, ...)
{
  FILE *file;
  va_list arg;
  int n;

  AVER(stream != NULL);
  AVER(format != NULL);

  file = (FILE *)stream;
  va_start(arg, format);
  n = vfprintf(file, format, arg);
  va_end(arg);
  if(n < 0)
    return(ErrIO);

  return(ErrSUCCESS);
}

extern Error LibVFormat(LibStream stream, char *format, va_list arg)
{
  FILE *file;
  int n;

  AVER(stream != NULL);
  AVER(format != NULL);

  file = (FILE *)stream;
  n = vfprintf(file, format, arg);
  if(n < 0)
    return(ErrIO);

  return(ErrSUCCESS);
}


extern Error LibPutChar(LibStream stream, unsigned char c)
{
  FILE *file;

  AVER(stream != NULL);

  file = (FILE *)stream;
  if(putc(c, file) == EOF)
    return(ErrIO);

  return(ErrSUCCESS);
}


extern Error LibFileOpen(LibStream *streamReturn, char *filename,
                         char *mode)
{
  FILE *file;

  AVER(streamReturn != NULL);
  AVER(filename != NULL);
  AVER(mode != NULL);
  AVER(mode[0] == 'a' || mode[0] == 'w' || mode[0] == 'r');
       
  file = fopen(filename, mode);
  if(file == NULL)
    return(ErrIO);

  *streamReturn = (LibStream)file;
  return(ErrSUCCESS);
}

extern void LibMemSet(void *s, unsigned char c, size_t n)
{
  AVER(s != NULL);

  (void)memset(s, c, n);
}


extern void LibMemCopy(void *destination, void *source, size_t n)
{
  AVER(destination != NULL);
  AVER(source != NULL);

  (void)memcpy(destination, source, n);
}

