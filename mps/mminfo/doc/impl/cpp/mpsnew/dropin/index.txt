                    MPS-BASED NEW/DELETE REPLACEMENT
                         impl.cpp.mpsnew.dropin
                             incomplete doc
                           gavinm 1997-10-14

     1 /* impl.cpp.mpsnew: MPS-based new/delete replacement
     2  *
     3  * $HopeName: MMsrc!mpsnew.cpp(MMdevel_dropin.4) $
     4  * Copyright (C) 1997 Harlequin Group, all rights reserved.
     5  * 
     6  * .readership: shipped as a part of the product
     7  * .sources: design.product.soft.drop.manual
     8  */
     9 
    10 #include <cstdlib>
    11 #include <new>
    12 
    13 
    14 /* set_new_handler -- set error handler for operator new */
    15 
    16 static new_handler newHandler = NULL;
    17 
    18 new_handler (set_new_handler)(new_handler new_p)
    19 {
    20   new_handler oldFn;
    21 
    22   oldFn = newHandler;
    23   newHandler = new_p;
    24   return oldFn;
    25 }
    26 
    27 
    28 /* operator new(size_t) -- allocate space for an object, or throw 
exception
    29  *
    30  * Overloaded to use the redefined malloc from mpsmal.c.
    31  */
    32 
    33 void *operator new(size_t size)
    34 {
    35   void *ptr;
    36 
    37   // new(0) must return a pointer to an object, but malloc(0) doesn't.
    38   if(size == 0) size = 1;
    39 
    40   ptr = (malloc)(size);
    41   while(ptr == NULL) {
    42     if(newHandler == NULL) throw std::bad_alloc();
    43     (*newHandler)();
    44     ptr = (malloc)(size);
    45   }
    46   return ptr;
    47 }
    48 
    49 
    50 /* operator new(size_t, const nothrow_t &) -- allocate space for an 
object
    51  *
    52  * Overloaded to use the redefined malloc from mpsmal.c.
    53  */
    54 
    55 void *operator new(size_t size, const std::nothrow_t &nt)
    56 {
    57   void *ptr;
    58   (void)nt; /* not used */
    59 
    60   // new(0) must return a pointer to an object, but malloc(0) doesn't.
    61   if(size == 0) size = 1;
    62 
    63   ptr = (malloc)(size);
    64   while(ptr == NULL) {
    65     if(newHandler == NULL) return 0;
    66     (*newHandler)();
    67     ptr = (malloc)(size);
    68   }
    69   return ptr;
    70 }
    71 
    72 
    73 /* operator delete(void *) -- free the space of an object
    74  *
    75  * Overloaded to use the redefined free from mpsmal.c
    76  */
    77 
    78 void operator delete(void *ptr)
    79 {
    80   (free)(ptr);
    81 }
    82 
    83 
    84 /* operator delete(void *, const nothrow_t &) -- free the space of an 
object
    85  *
    86  * Overloaded to use the redefined free from mpsmal.c.
    87  * This is supposed to be exactly the same as operator delete(void *).
    88  */
    89 
    90 void operator delete(void *ptr, const std::nothrow_t &nt)
    91 {
    92   (void)nt; /* not used */
    93 
    94   (free)(ptr);
    95 }
    96 
    97 
    98 /* new[](size_t) -- allocate space for an array, or throw exception
    99  *
   100  * Overloaded to use the redefined malloc from mpsmal.c, like operator 
new.
   101  */
   102 
   103 void *operator new[](size_t size)
   104 {
   105   return operator new(size);
   106 }
   107 
   108 
   109 /* new[](size_t, const nothrow_t &) -- allocate space for an array
   110  *
   111  * Overloaded to use the redefined malloc from mpsmal.c, like operator 
new.
   112  */
   113 
   114 void *operator new[](size_t size, const std::nothrow_t &nt)
   115 {
   116   return operator new(size, nt);
   117 }
   118 
   119 
   120 /* operator delete[](size_t) -- free the space of an array, or throw 
exception
   121  *
   122  * Overloaded to use the redefined free from mpsmal.c.
   123  */
   124 
   125 void operator delete[](void *ptr)
   126 {
   127   (free)(ptr);
   128 }
   129 
   130 
   131 /* operator delete[](size_t, const nothrow_t &) -- free the space of an 
array
   132  *
   133  * Overloaded to use the redefined free from mpsmal.c.
   134  * This is supposed to be exactly the same as operator delete(void *).
   135  */
   136 
   137 void operator delete[](void *ptr, const std::nothrow_t &nt)
   138 {
   139   (void)nt; /* not used */
   140 
   141   (free)(ptr);
   142 }

