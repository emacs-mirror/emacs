                        GUIDE TO GLOBAL TAGGING
                               guide.tag
                            incomplete guide
                           gavinm 1996-07-05

INTRODUCTION

.history: The Memory Management group have been using a form of tagging for 
some time.  The basic form has been defined (guide.text.tag) and also some 
basic rules for use (rule.universal.tag, rule.universal.once, rule.rule.tag, 
and rule.rule.new).

.purpose: This document gathers together existing rules for tags, together with 
conventions that have developed and speculations for future conventions.  It 
also covers some of the justifications for and uses of tagging.


Document History

.hist.0: 1996-07-05  GavinM  First written
.hist.2: 1997-04-30  GavinM  Removed .tag from all tags that had it.
.hist.3: pekka 1999-03-05 Allowed program names in tags.


GENERAL TAG GUIDELINES

.definition: A tag is a textual label for a document or section of a document 
which can be used to refer to it later concisely but unambiguously (see 
.reason).

.hierarchy: The elements in the document tag are hierarchical.  Each element 
(separated by periods) should relate to a hierarchical level, the first element 
being the highest.  Words forming the same element should be combined with 
hyphens.  In practice, many tags seem to end up being "noun.verb.noun".

.form: The form of a tag is described in .document.form and .internal.form.


DOCUMENT TAGS

.document.unique: Each document has a unique tag.  

.document.form: The document tag is formed from a list of elements composed of 
letters from the lower case, decimal digits, and hyphens.  These are 
concatenated together with periods.  

.document.form.exc: In special circumstances this format may be relaxed.  
Particularly, tags containing program symbols should use the same spelling as 
in the program.

.document.filename: The document tag is reflected in the filename or record 
name as closely as possible.

.document.contained: The document tag is also contained within the document in 
the header.

.document.first-element: In particular, the first element tends to group 
together documents of similar purpose (e.g. proc for procedures, guide for 
guidelines, rule for rules).  Note that it should be a "noun phrase", not a 
category, e.g. "book" or "paper" for a bibliography entry, not "bib".

.document.ref: Documents can be referred to simply by their document tag. This 
refers to the entire document.  See .internal.ref.external to refer to parts of 
a document.

.document.mnemonic: Document tags should be mnemonic, i.e., they provide a 
short-hand of the document's purpose and are memorable.  Note that is is not 
necessary for document tags to be entirely systematic and predictable.  In 
general this is not possible and it is more important that documents be tagged.

.document.version: Where the same document is published several times, each 
version should be given a version number, starting at 0, which should be 
appended to the tag in parentheses (e.g. "guide.tagging(0)"). 


INTERNAL TAGS

.internal: Within a document it is usually appropriate to provide internal 
tags.  See .reason below to determine.

.internal.form: Internal tags are formed as document tags (see .document.form), 
but have a leading period.

.internal.unique: Each internal tag within a document is unique, but there is 
no requirement for it to be globally unique (see .internal.ref.external).

.internal.first-element: The first element of an internal tag usually indicates 
the purpose of the concept within the document, e.g. .goal for a goal, .req for 
a requirement, .attr for an attribute requirement.

.internal.mnemonic: Internal tags should be mnemonic, i.e., they should form a 
shorthand of the concept described and be memorable.  Note that it is not  
necessary for internal tags to be entirely systematic and predictable; it is 
more important that they exist.

.internal.scope: Normally each individual concept, goal, requirement, etc. 
should be individually tagged.  This may make documents seem fragmented, but it 
is necessary to provide the full advantages of tagging (see .reason).

.internal.numeric: Traditional numeric section headings are a form of tagging, 
but don't have the mnemonic advantage (see .internal.mnenomic).

.internal.definition: A tagged paragraph will commence with the tag, at the 
start of a line (although it may be indented; see .internal.group), after a 
blank line, succeeded by a colon and a space.  The paragraph will then follow 
on the same line.  We prefer to set tag definitions in bold face in Notes, but 
this isn't semantically crucial.

.internal.group: Sometimes several concepts form a group which require a short 
collective explanation.  This is usually tagged with the common tag elements of 
the group (e.g. .internal).  Sometimes we indent the grouped, tagged paragraphs 
for clarity.

.internal.conditional: Sometimes a tagged item presents a question, selection, 
or other disjunction which is itemized by later tagged items.  Normally we 
choose tags which are grouped by the initial tag (see .internal.group).

.internal.ref.internal: To refer to an internal tag in the same document, 
simply quote the tag, commencing with a period.  This is also known as a 
"relative tag".

.internal.ref.external: To refer to an internal tag from another document, 
concatenate the document tag with the internal tag.  This is also known as an 
"absolute tag".  Note that it will not be readily determinable where the 
document tag stops and the internal tags begins without reference to the 
document tags available.  This has not been found to be a problem in practice.  
Absolute internal tags are versioned like documents (see .document.version) by 
appending the parenthesised version to the entire tag.  Note that this is the 
version of the document.

.internal.ref.group: Sometimes it is expedient to refer to a group of internal 
tags with common prefix by that prefix, regardless of whether they have a 
collective paragraph tagged by that prefix (see .internal.group).

.internal.non-semantic: Whilst internal tags attempt to be mnemonic, it is bad 
practice to rely on the content of the tag to clarify the meaning of the 
document.  In this sense, tags are an enhancement as in guide.text.enhanced.


GLOBAL TAGS

.global.background: Whilst tagging is used heavily within the Memory Management 
group, it isn't widely used elsewhere.  As this may change in future, it is 
expedient to have a system for referring to tags in other information systems.  
This is also useful in e-mail which could end up in any or several infosys 
archives.

.global.form: A global tag is formed by prefixing the tag (document or absolute 
internal) with the abbreviation for the group and a colon.  For example, tags 
within the memory management information system might be referred to by 
prefixing them with "mm:".  


REASONS FOR USING TAGS

.reason: Tagging gives various benefits directly and prevents certain 
undesirable things.  See also .client.

.reason.ref: Tags give you the ability to refer to concepts, requirements, etc. 
readily and precisely.

.reason.avoid-repetition: Tags avoid referring to concepts by explaining the 
content repeatedly, potentially differently (see .reason.consistency).

.reason.consistency: Concepts can be described consistently, i.e., the reader 
is sure that the same concept is being referred to.

.reason.avoid-misleading: Untagged concepts are often given names which can be 
misleading if the definition cannot be readily obtained.

.reason.encourage-recording: Tagging encourages the recording of ideas.  
Without tagging there is little point in recording a wealth of small, 
poorly-organised concepts as they can never be referred to or found.  See 
book.gilb88.tag-principle.

.reason.avoid-debate: Because related concepts are no longer effectively 
unassociated, issues can be documented more completely and one can avoid 
reopening old debates.

.reason.assist-memorability: The uninitiated might suppose that a tagging 
system would fail because tag definitions could never be readily located for 
reference.  Our experience is that tagging actually assists us to remember 
where concepts are defined.

.reason.clarity: Tagging addds to the clarity of a document.

.reason.rigour: Tagging makes it generally easier to be rigourous in dealing 
with a set of concepts.


CLIENTS OF TAGGING

.client: Tagging is also necessary for more complex purposes.

.client.justification-network: It is possible to track project requirements all 
the way from goals, through functional and attribute requirements, to 
solutions, designs, and implementations.  This is useful to understand why 
certain things are done before attempting to change them.

.client.inspection: An inspection process is facilitated by tagging (see 
proc.review).

.client.testing: Coverage testing is facilitated by tagging.

.client.logic: The logical connection of concepts can be concisely expressed or 
discussing using tags.

.client.configuration-management: If solutions are required to meet differing 
requirement sets for different clients or at different times, the relationship 
between requirements and optional parts of the solution can be tracked 
effectively.


SPECULATIONS

.speculation: There are various things we have not yet found it appropriate to 
attempt.

.speculation.automation: It would be possible to automate aspects of our 
tagging system, such as indexing of tag definitions and references (see also 
.speculation.hyperlinks).

.speculation.code: Whilst we use tags to refer to requirements or design 
concept within our source code, we have made little use of tag definitions in 
source code.  We have typically used line numbers and have made source code for 
review available under "impl".  

.speculation.hyperlink: To avoid implementation-dependance, our tag references 
are simply textual.  It would be possible to provide hyperlinks (in Notes or 
HTML).  This would probably be best done automatically (see 
.speculation.automation).


REFERENCES

.ref: See also guide.text.tag, rule.universal.tag, rule.universal.once, 
rule.universal.element, rule.rule.tag, rule.rule.new, obj.tagging-schema.

