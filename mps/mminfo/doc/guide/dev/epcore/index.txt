           NOTES FOR MM DEVELOPERS WORKING ON PROJECT.EPCORE
                            guide.dev.epcore
                              draft guide
                          richardk 1998-03-30

.intro: Collection of miscellaneous useful notes about ScriptWorks, etc., to 
help MM developers vis-a-vis project.epcore.

.other: We have a paper copy of the Red Book, book.psrm2, and the level 3 
supplement book.psrm3 (PDF is available as well).  For other info, it's worth 
looking in the SW Information db if you can't find what you need.


IMPLEMENTATION

.impl.over: The project is implemented by a collection of features in MPS plus 
some glue code in the SW sources.

.impl.glue: A functional spec and reference for the glue code is in 
SWmm_common_export!mm.doc or SWmm_common!export:mm.doc.  .conv: Glue code uses 
SW coding conventions (naturally), see .

.impl.mps: The MPS side of things is delivered as a library and some headers.  
See a recent release doc for the exact configuration.  There is no design doc 
that would list all the features implemented for this project, at the moment.


RELEASES

.releases: The active releases are:

  MPS release      MPS branch          SW version  SW branch
  trapping.beta.6  MMdevel_sw_eq       SW 4.5      SW_B1
  trapping.beta.6  MMdevel_sw_eq       SW 4.6      SW_C
  anchovy.3        MM_epcore_anchovy   SW 5.0      SW_D
  brisling.3       MM_epcore_brisling  SW 5.1      SW_E
  brisling.5       MM_epcore_brisling  SW 5.1r1    SW_E
  brisling.5       MM_epcore_brisling  ?           SW_F
  brisling.6       MM_epcore_brisling  SW 5.3      SW_G
  brisling.6       MM_epcore_brisling  -           trunk

The SW version given is the first SW release to contain the code.  The SW 
branch is where the code was placed.  Only the latest trunk release is recorded.


TESTING

Controlling ScriptWorks' MM Behaviour

.sw: General instructions for building ScriptWorks are in proc.build.sw.

.client-arena: To force SW to use a client arena (on platforms where it would 
normally use a VM arena) define MUST_ALLOC_RIPMEMORY (e.g., on command-line, by 
#define, etc.) and recompile various things (possibly only the coreskin 
compound?).  See mail.richardk.1998-03-31.18-03.

.logs: There's a logging system in the glue code, for details, see 
meeting.epcore.1998-05-07.1.  .leaks: Some information on how to use the logs 
to find leaks are in SW Information Core RIP/MM Debugging Tips.


EP-QA Resources

.ep-qa: EP-QA is a group of people.  Among other things, they maintain a 
library of test jobs (job == postscript document).

.ep-qa.suites: EP-QA keeps a copy of its suites of tests in 
"DC1-HALL:qa:Suites:".

.ep-qa.qatests: EP-QA has a suite of tests from about 1993 (+/- 2y) called 
"QATESTS", in "DC1-HALL:qa:Suites:Qatests".

.ep-qa.info: There are various notes of relevance to EP-QA in the ScriptWorks 
Information database.  In particular, look in QA\qatests for information 
relevant to running tests in the QATESTS suite.


Configuring ScriptWorks

.test-devices: You'll want to use the test devices: testhqn and testchqn ('c' 
for 'colour').  The test devices are all in the 'newplug\testdev' directory.  
See proc.build.sw for instructions on building and installing plugins.

.optionals: From the Configure Rip\Extras dialog you can select many optional 
components.  Most of these need a password: see SW Info, QA\Miscellaneous\
ScriptWorks Passwords.  .optionals.trapping: To use trapping, you need to put 
the trapping plugin in "SW\Extensions\Trapping".  .optionals.color: To use the 
Harlequin color systems, you need all the crd* plugins as well (currently 
seven, even though there are more crd* directories); put them in your 
"SW\Crdgen" directory.

