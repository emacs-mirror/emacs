                   GUIDELINES FOR TEXT DOCUMENTATION
                               guide.text
                              draft guide
                           richard 1995-08-04

INTRODUCTION

.intro: This document contains guidelines for formatting plain text 
documentation for the Memory Management Project, and for the project 
Information System in particular.  It can also be used to guide the formatting 
of other plain text documents, such as long mail messages.


RATIONALE

.rat: A consistent format for documentation makes reading and processing more 
effective -- we're more likely to spot defects in documents if they're  
consistent with one another.  It is also important to avoid ambiguity in 
technical documentation.  A consistent style reduces the possibility of 
ambiguity be defining conventions.  Consistency will also be invaluable if the 
text documentation ever needs to be converted to something more fancy, such as 
a FrameMaker document or Web page.

.buy-in: If you disagree with the guidelines, raise the point as an issue.  It 
is better to have a style guide with buy-in than one which is inconsistently 
applied.


GENERAL

.ascii: A text document consists of monospaced 7-bit ASCII characters.

.notab: Documents should not contain tab characters.  These are interpreted and 
displayed differently by different systems, and sometimes translated back and 
forth.  Documentation which relies on them is likely to be corrupted.

.wrap: The text should be wrapped to fit in _fewer_ than 80 columns (exactly 80 
screws up some editors).

.para: Paragraphs are in "block" style: the first line is not indented, and 
paragraphs are preceded by a single blank line.

.punc.space: Put one space after comma, colon, or semicolon, and two spaces 
after sentence end (period, query, pling, etc.).

.dash.em: Em-dashes -- used parenthetically -- should be represented as two 
hyphens, with spaces before and after.

.dash.en: Use a single hyphen for en-dashes, used to indicate ranges, e.g. 
"pp34-35".

.def: Use double-quotes when you define a word, or introduce a new term.

.punc.nest: Use "logical punctuation" near quotes (punctuation goes inside the 
quotes only if it is part of the quoted material).  This is the usual system in 
the UK, but in any event, it is essential in technical material.  This should 
come naturally to programmers -- just make the punctuation nest!  Apply similar 
conventions to bracketed material.

.emphasis: To emphasize words in a sentence (where one would typeset italics), 
use underscores on either side of the words and between them.  For example, 
"The cat _sat_ on the mat.", or, "The cat sat _on_the_mat_!"

.action: Action, or emotion, may be indicated with words surrounded by 
asterisks.  For example, "*blush*".

.comment: Comments, which do not form part of the document, should be placed in 
square brackets ("[" and "]").  They should only be used for meta-information, 
such as "[This isn't finished -- richard]".


PORTABILITY

.plain: Documents stored in systems which support more than plain text should 
be formatted as much like plain text files as possible.  One should resist the 
temptation to use the fancy features of the implementation.  This maintains the 
portability of the information system and its contents.  The implementation of 
the storage system may need to be changed, and the disruption to the project 
that this would cause must be kept to a minimum.  It should be possible to 
perform a simple transformation from, say, the Lotus Notes implementation to a 
set of files on a FAT file system.

.enhanced: Having said that, it is OK to enhance the document with 
implementation specific formatting, but only if the document doesn't lose 
meaning or usefulness when stripped of that formatting.  For example, a heading 
could be in bold, provided it would be reasonably visible anyway.


HEADINGS

.levels: There are four levels of headings: document, section, subsection, and 
paragraph.  In addition, there is a special "heading" called a tag, which is 
used as part of the Information System to control and reference information.

.head.deep: If you need more levels, you're probably nesting to deep or writing 
too much in one place.


Document Heading

.head.doc: There is only one document heading, and it comes at the start of the 
document.  It should be centred, and in upper case for visibility.  It is often 
accompanied by author and date information.


Section Headings

.head.sec: Section headings separate logical parts of the document.  They 
should be left aligned, and all upper case.  The section heading should be 
preceded by two blank lines.


Subsection Headings

.head.subsec: A subsection heading separates logical parts within a section.  
It should be left aligned, and in "proper" case (significant words 
capitalized).  The heading should be preceded by two blank lines.


Paragraph Headings

.head.para: A paragraph heading can be used to display the topic of a single 
paragraph.  The heading is part of the paragraph, and is therefore preceded by 
the usual blank line.  It is left aligned, and may be capitalized as 
appropriate.  It is followed by a colon, a space, and then the paragraph text.


Tag Headings

.tag: Each elementary statement in a document should be tagged so that it can 
be referred to.  Inside a document, a special convention is used to show where 
a tag is defined.  A sentence or paragraph may begin with a tag heading.  The 
heading starts with a dot, followed by the tag to be defined, then a colon, 
space, then the paragraph or sentence.  The tag is defined relative to the tag 
of the document as a whole.  For example, _this_ statement's full tag is 
"guide.text.tag".


LISTS

.list.short: Lists crop up a lot in technical documentation.  If the list is 
short, and its elements are short, just write it in line with the text with 
commas, and don't forget the final one to avoid this sort of thing:

  "I would like to dedicate this book to my parents, Ayn Rand and God."

There are three types of displayed list: unordered, ordered, and definitive.  
The elements of a displayed list are always on separate lines.  The list itself 
is preceded by a blank line.  It is usually best to indent the entire list by 
two spaces.

.list.space: The elements of the list should be separated by blank lines if 
they are long, and span multiple lines themselves.

.list.wrap: If the text of a list element is long, wrap it so that the text is 
indented by the same amount; the start of the continuation lines should be 
aligned with the first character of the element text.


Unordered Lists

.list.unord: An unordered list is a set of elements whose order is not 
particularly significant.  Use bullets to mark out the list elements.  This 
gives a visual cue that there is a list, and marks each element clearly.  The 
best bullet character for plain text is a hyphen -- it has about the right 
amount of visibility.

  - Here is an example list element, which is quite short.
  - A second element, just to make the point.
  - The third element is somewhat longer, and will need to be wrapped around
    on to a second line, or "continuation" line.  Indenting the continuation
    line prevents the element from swamping the bullets.


Ordered Lists

.list.ord: Ordered lists should be used when the order of list elements is 
important, and must be stated unambiguously (e.g. the steps in a procedure).  
An ordered list is formatted just like an unordered one, except that the 
elements are "bulleted" with numbers.  Use the normal Arabic numbers at the 
first level, and always follow them with a period to prevent the bullet from 
merging with the element text.  At the second level of list, switch to 
lower-case letters of the alphabet.  At the third level, use lower-case roman 
numerals.  Don't go deeper!

  1. Here is an example of an ordered list.
  2. And here is a second element of that list.
     a. The second element has a sub-list.
     b. The second element's sub-list has two elements.
  3. This is the final element.


Definitive Lists

.list.def: A definitive list is a list of definitions, or descriptions of 
terms.  Each term is like a heading for a paragraph which explains or defines 
the term.  Definitive lists are formatted in the same way as ordered lists, 
except that the number is replaced by the term being defined.  Write the term, 
followed by a colon to separate it from the element text.

  tether: n. rope or chain by which an animal is secured.
  text: n. 1. main section of written or printed words of a book as
        distinguished from illustrations, index, etc.  2. passage from the
        Bible.
  textile: n. woven fabric or cloth.


DISPLAY

Displayed text is usually an illustrative example or a quotation.  Displayed 
items might be ASCII-art diagrams, program text, extracts from articles or mail 
messages, or formulae.

.display.space: Leave a blank line before the displayed item.  .display.indent: 
Indent it by two spaces.  (It is also nice if you can indent it on the right by 
about the same amount, too.)  There's no need for quotation marks around 
displayed quotations.

.display.wide: If the displayed item is itself 80 columns wide (and must remain 
so), then separate it from the main text at the start and end with three 
hyphens at the start of a line.  Reformat it to a narrower measure if this can 
be done without losing meaning.

.display.quote: If quoting a mail message or USENET article, attribute the 
author, and follow that with the quoted text with each line prefixed by "> " 
(chevron space).

