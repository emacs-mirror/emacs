            GUIDELINES FOR IMPLEMENTATION IN C -- INCLUSION
                          guide.impl.c.include
                            incomplete guide
                           richard 1998-11-05

INTRODUCTION

.intro: This is the guidelines for including headers in MPM modules.


READERSHIP

.readership: Intended to be read by any MM developer.  Probably readable by any 
C programmer.


GUIDELINES

.position: In general, include directives should precede all declarations in a 
source file.

.all: All modules in the MPM should include "mpm.h", it declares most of the 
functions that are exported by some MPM module and associated types, 
structures, and macros (via the inclusion of "mpmtypes.h" and "mpmst.h").  It 
also incorporate the MPS library interface (which is a kind of shadow of the 
ISO C Library).

.iso: No modules in the core MPM should include any ISO standard header files.  
If you want to use services from the ISO C Library then you should add function 
to the library interface (mpslib.h, see design.mps.lib(1)) and call those 
instead.

.iso.freestanding: Functionality provided by the the ISO freestanding headers 
(see ISO C clause 4) (except float.h) is available to MPM modules without 
needing to include any extra header files and may be used.  
.iso.freestanding.what: These headers are <limits.h>, <stdarg.h>, and 
<stddef.h> (which provide support for type domain introspection, functions with 
variable parameters, and standard types).  .iso.freestanding.why: This is 
because these headers files are generally useful and used and it's convenient 
and simple to not have to worry about including them; the additional burden on 
the compiler caused by including them all the time is negligible.  
.iso.freestanding.how: This is arranged by including the header files 
<stdarg.h> <limits.h> <stddef.h> in "mpslib.h" which is included by "mpm.h".  
See also design.mps.lib(1).

.implementation-specific: Implementation specific modules (specific to OS, 
architecture, compiler, or some combination) can include any header files 
provided by that implementation (including ISO C hosted library header files if 
the implementation supports them).  .implementation-specific.example: So 
impl.c.vmw3 (Virtual Memory Module on Win32) can include <windows.h> (in fact 
it does this indirectly via our "mpswin.h") and call VirtualAlloc; these form 
part of the platform.  Similarly, arenaan.c can include <stdlib.h> and call 
malloc, since this is part of the "an" (hosted ANSI environment) platform.

.implementation-specific.unixy: If you want to use POSIX and XPG/4 header files 
then make sure you know what you're doing.  It's not as simple as just 
including the header files.  In the absence of any better documentation (though 
often the standards(5) man page is useful, especially on DIGITAL UNIX) try 
asking drj.  You can see examples of typical sorts of Open Sesame magic in 
impl.c.proto1 (Protection Module on DIGITAL UNIX).

.w3.windows: In a Win32 specific module you'll probably need to include 
<windows.h>.  Don't.  include "mpswin.h" instead.  This file includes 
<windows.h> but also plays with some pragmas to suppress warnings that 
<windows.h> produces when used with the compiler's high warning setting.


