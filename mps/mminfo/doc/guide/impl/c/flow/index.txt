                   FLOW CONTROL CONVENTIONS IN MPS C
                           guide.impl.c.flow
                             incomplete doc
                             drj 1999-02-04

INTRODUCTION

.intro: This document is part of the MPS C implementation guidelines.  It 
concerns itself with flow control including iteration statements (while, for), 
selection statements (if, switch), jump statements (goto, continue, break, 
return), and more generally with errors and error paths.

.readership: Intended to be read by any MM developer, though should be 
digestible by others.


[scope of this document is now larger -- drj 1999-02-15]

OVERVIEW

.overview: There are two broad areas:  How should functions report errors; how 
should functions handle errors.


REPORTING ERRORS

.error.report: Functions which could fail should return a result code (type 
Res, see design.mps.type(0).res).  Any values which are required to be passed 
back to the caller should be stored in a return parameter (ie the address of a 
storage location should be passed to the function).

.error.report.example: So the prototype for VMCreate for example looks like 
this:

extern Res VMCreate(VM *VMReturn, Size size);

Any error code is reported via the returned value; the VM object is stored in 
*VMReturn.


DISJOINT TYPES

.disjoint: This style should also be used for situations where you want to 
communicate one of a small number of options and optionally a value.  Such 
things are typical in accessing or mapping functions:

e.g. SegOfAddr, PoolOfAddr.

[but this bit shouldn't be under an .error tag]


HANDLING ERRORS

Problem was initially raised in mail by richard:
mail.richard.1995-09-18.11-31(0)

Our error path convention is pretty much documented in a posting richard
made to usenet on the matter: mail.richard.1996-11-06.09-05(0)

The same convention and example is recommend in a document describing
the MPS interface conventions: doc.mps.ref-man.if-conv(0)




