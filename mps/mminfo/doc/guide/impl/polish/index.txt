                   GUIDE TO POLISHING IMPLEMENTATIONS
                           guide.impl.polish
                             incomplete doc
                           gavinm 1997-01-31

INTRODUCTION

.purpose: This guide is for polishing implementation files, and should be used 
before entry to eliminate common major defects, and during the entry's brief 
check.  [ A little C-specific. ]


CHECKS

.arg-check: Check each parameter to each function.  Is it checked as much as 
possible?  If not, is the justification documented?

.copy: Has any code been copied from elsewhere during the development?  Could 
it have been shared?  Have all necessary changes been made?

.comprehensible: Is the implementation entirely comprehensible?  

.macro.fn: Are any function-style macros truly function-style in:
  - Naming style;
  - Argument evaluation precisely once;
  - Being one statement?
[C-specific]

.change: Have all major design changes been discussed and analysed?

.user: Has all user impact of this code been documented.

.error: Have all error cases been tested?

.header: Does the implementation document:
  - Sources;
  - Design;
  - Requirements;
  - Purpose;
  - Readership?

.dep: Are any dependencies on:
  - Other files;
  - Language implementation
documented and justified?

.thread: How would the code cope with threads or re-entrancy?

.compile: Does it compile?  Without warnings?

.pun: Have we punned any pointers? [C-specific]

.switch: Do any switch statements or similar deal with all cases?

