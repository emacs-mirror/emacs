             BEHAVIOUR OF DATABASE SEARCHING IN LOTUS-NOTES
                        guide.lotus-notes.search
                               draft doc
                          richardk 1998-10-26

.intro: This essay was originally sent in mail.richardk.1998-10-23.21-13(0).
.hist.0: It has been corrected for mail.meta.1998-10-23.22-31(0), 
mail.richardk.1998-10-26.13-15(0), mail.richardk.1998-10-28.15-10(0) 
(word-stemming) ff, mail.richardk.1998-10-28.15-32(0) (sentence-breaks) ff.
.hist.1: More on indexing model.
.bait: Here's some search bait: notes search notes database search how to 
search.


INTRODUCTION

The actual behaviour of Notes searching is baroquely complicated.  
Here I'm only trying to describe a useful simple subset.  Sometimes I'm 
economical with the truth.

For starters, there are (at least) five contexts in which Notes searches 
text:
  - when indexing a document (ie. creating a "Full Text Index");
  - when searching a database (when you type a query);
  - when displaying search-match highlights in a document;
  - when searching within a document (using Edit/Find);
  - when searching the presentation of a view (using Edit/Find).

This document only describes the first two: indexing, and searching a 
database using its index (by typing a query into the Search Bar displayed 
above a view).  Some databases are not indexed: they may also show a 
Search Bar but I don't know how it behaves.

The behaviour, syntax, etc, is (or may be) different in all five 
contexts (!).  Behaviour in each may also vary:
  - by Notes-version of database (R3 or R4);
  - by type of View (public, private-on-server, private-local);
  - by various settings panels;
  - and possibly by version (including operating-system) of Notes 
    server, or client, or both.

Determining what behaviour is currently in effect is usually hard or 
very hard -- Notes doesn't indicate to you (as you type your query) what 
sort of search you're doing.

I experimented with a private server-resident view (white magnifying 
glass with no dot) of the MMInfoSys (":Projects:MEMMAN:MMINFO2.nsf", an 
R4 database) on notescam/Harlequin.  The database index settings panel 
(File/Database/Properties..., Full Text pane) has Case Sensitivity OFF, 
Index Breaks at Words Only (ie. it does not parse for sentences or 
paragraphs), and no Stop Word File.


INDEXING MODEL

Each document is just a set of fields.  Indexing reduces each field to a 
sequence of words and sentence-breaks.  Characters that are not part of 
words are ignored (except in so far as they act as a word-break, and may 
also act as a sentence-break), and are not indexed.

(Yes, it does seem that Notes always indexes sentence-breaks, even when 
the database index settings panel says "Index Breaks" at "Words Only"!)

So it is meaningless for a subsequent search to try to match any 
non-word characters.  Searches can only 'see' the word-characters in a 
document, and can only see them as words (albeit with interleaved 
sentence-breaks).

Word Characters:
  plain:            a-z A-Z 0-9
  contingent:       period "." colon ":"
   -- a contingent word-character is only a word-character if 
      it is preceded _and_ followed by a normal word-character.

Punctuation (non-word) characters:
  sentence-breaks:  period "." exclamation-mark "!" question-mark "?"
  plain:            everything else

So [a-zA-Z0-9] are always word-characters.  Underscore "_", hash "#", 
minus "-", and most other punctuation marks, are never word-characters, 
and never get indexed.  As an example of indexing:
  "#ARRAY_SIZE is tri-state" ---->  "array" "size" "is" "tri" "state"

A colon flanked by word-characters is a word-character, and enters the 
index as a character in the word.  For example:
  "fix :export:mps.h"        ---->  "fix" "export:mps.h"

An exclamation-mark or question-mark causes a sentence break, but does 
not get indexed in its own right.  For instance:
  "Why?  Fix MMsrc!mps.h"    ---->  "why" SB "fix" "mmsrc" SB "mps.h"

If a period is flanked by word-characters, it behaves like a colon; if 
not, it behaves like an exclamation-mark:
  "req.foo or .sol.bar?"     ---->  "req.foo" "or" SB "sol.bar" SB

(When indexing, multiple contingent word-characters always get treated 
as punctuation, but beware that query-parsing rules are different/buggy, 
at least for multiple periods).  Some Notes documentation also lists 
ampersand "&" and backslash "\" as 'special'.  I don't know how these 
behave, and there may be others.

If the index has Case Sensitivity OFF (default), there is no way to search 
according to case.  (There is an "exactcase" operator but it does not 
work for full text indexes).  If Case Sensitivity is ON there is no way 
to search ignoring case.  (The best you can do is use the wildcard 
character "?").


QUERY PARSING

Lexical

Word Characters:
  a-zA-Z   alphabetic
  0-9      numerals
  *?       wildcards
  (possibly more, eg. diacritics and characters > 127)

Plain Punctuation:
  ~#$%^_+;'/
  <space>
  <tab>
  <newline>
  (possibly more)

Special Characters in Queries:
  "        inhibits word-variants; escapes text keywords
  ()       operator grouping
  !&|      boolean operators
  ,        accrue (ie. | but with different scoring)
  []       field specifiers (eg. [CreatedBy])
  =<>      comparators
  -        optional word-break (ie. also matches as all one word)
  @.\:{}   unknown
  (possibly more)


Operators

Special Characters:
  (as listed above)

Keywords:
  not and or
  near accrue
  exactcase    (NB: does not work)
  sentence     (NB: does _not_ work as documented, but rather acts 
                like "and" and seems to mean 'in the same sentence, an 
                adjoining sentence, or (sometimes) a nearby sentence').
  (and many more)

The Implicit Operator:
  Whenever two searchwords are not separated by an explicit operator, they 
  are implicitly combined using the implicit operator "-FIB-" (my 
  notation, short for "followed-immediately-by").
  
  Remember that each field is treated simply as a sequence of words and 
  sentence-breaks.  The query "x y", which means x -FIB- y, matches 
  documents with a field whose sequence of words contains the word "x" 
  immediately followed by the word "y".  (Note that an intervening 
  sentence-break is _not_ permitted).  For example:
     "x y"       matches     "x y", "x__#__y", "x y z", etc.
     "x y"   does not match  "xy", "x foo y", "x. y", "x!y", "y x", etc.


Parse phases

 1) convert plain punctuation to whitespace;
 2) parse into a string of terminals,
      <terminal>  ::=  <searchword> | <keyword> | <special-character>
    using whitespace and special characters to delineate word characters 
    into searchwords and keywords;
 3) construct parse tree as dictated by operators (keywords, special 
    characters, and the implicit operator), but note that their precedence 
    and associativity are undefined!


QUERY SEMANTICS: WORD VARIANTS

For a searchword to match a word in a document, it doesn't have to be a 
perfect match: if word-variant matching is enabled then only the "stems" 
of the words need match.  This is controlled by "Include Word Variants" 
(on by default) in the popup-menu on the Search Bar, and can also be 
turned off for specific searchwords by using quoting etc.

The stem of the word is what is left after stripping any grammatically 
regular ending (or at least those that Notes's word-variant code knows 
about).  For instance:
      "cray"  matches  "crays"
   "looking"  matches  "looked"

Notes's word-variant code fails to spot some 'obvious' matches, for 
example:
  "apple" doesn't match "apples"
    "bed" doesn't match "beds"
    "cay" doesn't match "cays"

These may be intentional, or bugs in Notes, or some error in the 
MMInfoSys database or index.  Whatever the cause, Notes's word-variant 
code doesn't do any active harm, as long as you never rely upon it.


QUERY SEMANTICS: KEY TO EXAMPLES

To describe what a query matches, I use the following symbols.  
Searchwords are always written in double-quotes.
(This is just my ad hoc notation for this document).

Unary operators:
  WV       matches word-variants   (see Word Variants above)
  CI       case-insensitive        (see Indexing Model above)

Within-field binary operators:
  -FIB-    followed-immediately-by (the implicit operator)

Between-documents binary operators:
  =not=    ie. inversion
  =or=     ie. union
  =and=    ie. intersection


QUERY SEMANTICS: EXAMPLES

The first three points are least intuitive and most worth remembering.

All plain punctuation in your query is treated alike: 
it becomes whitespace and then gets thrown away.

  marrow                    -->       "marrow" WV CI
  $_marrow_#
  ~#$%marrow^_+;'/

A list of words matches as a _contiguous sequence_ of words.
(ie. there must not be any intervening words _or_ sentence-breaks;
 -FIB- = followed-immediately-by).
Any plain punctuation in your query separates words.

  marrow negus              -->       "marrow" WV CI -FIB- "negus" WV CI
  marrow_negus
  marrow#negus
  'marrow negus'
  marrow~#$%^_+;'/negus
  /';+_^marrow%$negus##~

Quoting inhibits word-variants; it _never_ protects punctuation.
(Quoting a list of words inhibits word-variants in the whole list).
Using wildcards also inhibits word-variants for that word.

  "marrow"                  -->       "marrow" CI
  "$_marrow_#"
  "~#$%marrow^_+;'/"

  "marrow negus"            -->       "marrow" CI -FIB- "negus" CI
  "$_marrow#_negus_#"
  "marrow" "negus"

  mar*row ne?us             -->       "mar*row" CI -FIB- "ne?us" CI

Boolean operations work as you expect.
For most queries you'll want to separate searchwords with "&".
Special characters act as separators; you don't need whitespace.
Spelt-out operators must be marked off with whitespace.

  marrow&negus              -->       "marrow" WV CI =and= "negus" WV CI
  marrow & negus
  marrow and negus
  marrow AND negus
  $_marrow_&_negus_#
  marrow_and_negus

  !negus                    -->       =not= "negus" WV CI
  not negus

Quoting prevents words being parsed as keywords (ie. spelt-out 
operators), so you can search on them as normal searchwords.  However, 
it also forces word-variants to be inhibited.  Quoting also prevents 
wildcards being recognised: they are converted to whitespace and then 
discarded.

  "not negus"               -->       "not" CI -FIB- "negus" CI
  "not*negus"

A hyphen (minus sign) "-" means an optional wordbreak, so "x-y" matches 
one word ("xy") or two words ("x y", "x-y", "x_#_y", etc).
In the query there must be _no intervening whitespace_.
Word-variants are still included.  More than two words can be hyphenated.

  marrow-negus              -->       "marrow" WV CI -FIB- "negus" WV CI
                                        =or=
                                      "marrownegus" WV CI

Asterisk (*) and question-mark (?) are wildcards.  They work as you'd 
expect, but only _within_ a word.  They never match things outside words.  
(Remember that the index sees only the words in a document, and is blind 
to punctuation that separates them).  An asterisk on its own therefore 
matches exactly one word.  Quoting a wildcard makes it drop out as 
plain punctuation.  Using a wildcard inhibits word-variants for that 
word.

Never use special characters except in the intended way.  Using them in 
any other way gives bizarre results, and isn't useful anyway because 
special characters in documents don't get indexed.  Quoting special 
characters often gives weird results.

  marrow - negus            -->       Broken: no matches.
  marrow "&" negus
  "no"t

  "! negus"                 -->       "negus" CI
  "!" negus

  "MMsrc!mps.h"             -->       "MMsrc" WV CI -FIB- "mps.h" WV CI
         (this is _not_ what you wanted!  It will _not_ match 
          "MMsrc!mps.h" because "!" is a sentence-break)


GENERAL TIPS

Searches only find documents that would be displayed in your current view.
If you see no search bar, try View/Search Bar on the menus.
Some databases are not indexed: they may still show a Search Bar but I 
 don't know how it behaves.
Beware that if you modify a query such that it finds no documents, the 
 documents found by the _preceding_ query are left displayed.  There is 
 a message that "No matching documents were found", but it is often 
 immediately overwritten by another (eg. "Some highlights are not 
 visible with this form").  This can be very confusing.  To avoid 
 confusion, always click the Reset button on the Search Bar once (to 
 return to the normal view) before modifying a query.
You can cycle through the highlights (red boxes) shown in found documents:
 - use the left and right triangles that appear on the Search Bar, or
 - use Command-Plus and Command-Minus (on a Mac), or
 - use Control-Plus and Control-Minus (on a PC).
 (To get Plus and Minus to work in the Preview Pane, you must first 
  click in the Preview Pane).
The found documents are always sorted by relevance or date (use the 
 popup-menu on the Search Bar to choose which).
To use the view's normal sorting and/or categorising, but still see only 
 the found documents, do this:
  click the list-of-documents pane
  Edit/Select All
  View/Show/Search Results Only  (turning it off)
  View/Show/Selected Only        (turning it on)
  use View/Expand All and View/Collapse All as you wish
Notes indexing is sometimes buggy.  If it seems wrong, ask 
 spring-support, who may need to rebuild the index.
Database indexes are updated asynchronously.  Use the "Full Text" pane 
 of "File/Database/Properties..." to check when the index was last 
 updated, or to request an update.


EPILOGUE

I hope this is helpful.  It's quite new: I hope it's mostly correct!  
Please tell me (richardk, x3876) of any inaccuracies, especially if you 
have a perfectly reasonable query that doesn't behave as the above 
description leads you to expect.

What-happened-to...

Capitalisation?    See the "Indexing Model" section.
Funny characters?  See the "Indexing Model" section.
Numbers?           Numerals are word-characters (see "Indexing Model").
                   For numerical comparatives, use =<> and read Notes 
                   help.
Fields?            Use eg. "[CreatedBy] = Bob".  See Notes help.
                   Or use the Add Condition button on the Search Bar.
Local views?       (Red dot in magnifying glass)  I've not investigated.
Dates?             I've not investigated.


