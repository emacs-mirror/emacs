                          C RING ITERATOR PART
                         part.impl.c.ring.iter
                             temporary doc
                           richard 1997-03-20

GOAL

.goal: To apply a body of code to each element on a ring.


PARAMETERS

.param.ring: an expression which yields the master node of the ring to be 
traversed, e.g. "SpacePoolRing(space)".

.param.type: the type of an element on the ring, e.g. "Pool".

.param.var: the variable which will hold the element while executing the body, 
e.g. "pool".

.param.field: the name of the ring field in the element structure by which it 
is attached to the ring, e.g. "spaceRing".

.param.body: the code to be applied to the elements of the ring.


TEMPLATE

  Ring ring, node;                      /* part.impl.c.ring.iter(0) */

  ...

  ring = `ring`;                        /* part.impl.c.ring.iter(0) */
  node = RingFirst(node);
  while(node != ring) {
    Node next = RingNext(node);
    `type` `var` = RING_ELT(`type`, `field`, node);
  
    `body`
  
    node = next;
  }


RULES

.rule.remove: The body may remove the element from the ring using an expression 
of the form "RingRemove(&`.param.var`->`.param.field`)".

.rule.append: The body may append elements to the ring using an statement of 
the form "RingAppend(ring, ...)", in which case it will later be applied to 
them.

.rule.prepend: The body may prepend elements to the ring using an expression of 
the form [what?], in which case it will later not be applied to them.

.rule.alter: The body should not otherwise alter the ring.


RATIONALE


HISTORY

