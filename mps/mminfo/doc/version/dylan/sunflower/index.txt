            VERSION "SUNFLOWER" OF THE DYLAN MEMORY MANAGER
                        version.dylan.sunflower
                               draft doc
                           richard 1997-06-11

INTRODUCTION

.intro: This document described the "sunflower" version of the Dylan Memory 
Manager.


Document History

.hist.0: Richard Brooksby <richard> created the first draft from notes 
originally written in release.dylan.sunflower.


OVERVIEW

.over: This release will increase the performance of the MPS when running the 
Dylan compiler.  This release will meet Dylan's requirements for implementing 
weak tables, as discussed in meeting.dylan.1997-02-04 and 
meeting.dylan.1997-02-27.


SPECIFICATION

.spec: This specification is based on req.dylan(5).

req.dylan(5).fun.obj.alloc                yes
req.dylan(5).fun.obj.recycle              partial -- wrappers aren't recycled
req.dylan(5).fun.obj.still                yes
req.dylan(5).fun.obj.pin                  yes
req.dylan(5).fun.misc.alloc               yes
req.dylan(5).fun.root                     yes
req.dylan(5).fun.root.table               yes
req.dylan(5).fun.root.thread              yes
req.dylan(5).fun.measure.tools            no
req.dylan(5).fun.valid.if                 yes
req.dylan(5).fun.valid.obj                yes
req.dylan(5).fun.weak                     yes
req.dylan(5).fun.weak.tables              yes
req.dylan(5).fun.weak.index               no -- roots cannot be weak currently
req.dylan(5).fun.weak.slot                no
req.dylan(5).fun.final                    no
req.dylan(5).fun.final-weak               not applicable
req.dylan(5).attr.test-suite              not applicable -- no test suite
req.dylan(5).attr.control                 undefined
req.dylan(5).attr.tune.effort             undefined
req.dylan(5).attr.capacity                no
req.dylan(5).attr.obj.max                 no
req.dylan(5).attr.debug                   undefined
req.dylan(5).attr.debug.find              undefined (but no, not really)
req.dylan(5).attr.rel.mtbf                undefined
req.dylan(5).attr.adapt                   undefined
req.dylan(5).attr.time.boot              *unknown
req.dylan(5).attr.time.pause.max         *unknown (probably not)
req.dylan(5).attr.time.pause.80          *unknown
req.dylan(5).attr.time.pause.med          undefined
req.dylan(5).attr.time.over.mean          undefined
req.dylan(5).attr.time.over.max          *unknown
req.dylan(5).attr.time.alloc              undefined
req.dylan(5).attr.time.hash.define        undefined
req.dylan(5).attr.time.hash.apply         undefined
req.dylan(5).attr.time.thread.reg        *unknown
req.dylan(5).attr.time.thread.dereg      *unknown
req.dylan(5).attr.time.ffi.in            *unknown
req.dylan(5).attr.time.ffi.out           *unknown
req.dylan(5).attr.time.weak.slot          undefined
req.dylan(5).attr.time.misc.approx       *unknown
req.dylan(5).attr.space.boot             *unknown
req.dylan(5).attr.space.struct           *unknown
req.dylan(5).attr.space.accuracy          undefined
req.dylan(5).attr.flex                    undefined
req.dylan(5).dc.env.thread                yes
req.dylan(5).dc.env.multi                 yes
req.dylan(5).dc.env.ambig                 yes
req.dylan(5).dc.env.gc                   *unknown, probably no
req.dylan(5).dc.env.self                 *unknown, probably yes
req.dylan(5).dc.env.malloc               *unknown, probably yes
req.dylan(5).dc.env.hog                   yes
req.dylan(5).dc.env.odi                  *unknown, probably no
req.dylan(5).dc.env.coop                  no
req.dylan(5).dc.env.load                 *unknown, probably yes
req.dylan(5).dc.link.object               yes
req.dylan(5).dc.link.single               yes
req.dylan(5).dc.link.c.header             yes
req.dylan(5).dc.link.c.macro              yes
req.dylan(5).dc.link.no-crt               no
req.dylan(5).dc.plat.nti4mv               yes
req.dylan(5).dc.var.ro                    yes
req.dylan(5).dc.var.dp                    yes
req.dylan(5).dc.var.i4-opt                no
req.dylan(5).dc.var.i5-opt                no
req.dylan(5).dc.var.i5-pro                no
req.dylan(5).prot.obj                     yes
req.dylan(5).prot.obj.read                yes
req.dylan(5).prot.obj.write               yes
req.dylan(5).prot.rehash                  yes
req.dylan(5).prot.debug                   no
req.dylan(5).prot.ffi                    *unknown
req.dylan(5).prot.ffi.exc                *unknown
req.dylan(5).prot.ffi.access             *unknown
req.dylan(5).prot.abort                   no
req.dylan(5).prot.stack-overflow          no
req.dylan(5).prot.error                  *unknown
req.dylan(5).prot.exc.dylan               undefined
req.dylan(5).prot.fail-alloc              no
req.dylan(5).prot.consult                 no
req.dylan(5).plan.deliv                   undefined
req.dylan(5).plan.int.effort              yes (already done)
req.dylan(5).plan.int.mm                  undefined
req.dylan(5).plan.int.dylan               undefined
req.dylan(5).plan.supp.use.init           not applicable
req.dylan(5).plan.support                 undefined
req.dylan(5).plan.avail.1                 yes
req.dylan(5).plan.avail.2                 yes
req.dylan(5).plan.avail.3                 yes
req.dylan(5).plan.avail.4                 yes
req.dylan(5).plan.avail.categorize        yes
req.dylan(5).plan.port.fun               *unknown
req.dylan(5).plan.port.full              *unknown
req.dylan(5).counter.feedback             no
req.dylan(5).counter.test.suite           no
req.dylan(5).prot.thread.reg              yes
req.dylan(5).prot.thread.dereg            yes
req.dylan(5).prot.obj.access              no
req.dylan(5).prot.tls                    *unknown, probably yes
req.dylan(5).prot.atomic                 *unknown, probably yes
req.dylan(5).anti.i3                      no
req.dylan(5).anti.real-time               yes
req.dylan(5).open.fourth                  undefined


SPECIAL REQUIREMENTS

See meeting.dylan.1997-06-11.


MANIFEST

.manifest: This section describes the form and content of the version.

.manifest.overview: The manifest divides into three top-level directories: 
"mps" for the memory manager, "doc" for documentation, and "tools" for 
development tools.  This manifest is intended to be similar to 
version.product.plough.manifest.

.manifest.files: This version will simply consist of a set of files.

readme.txt                         release notes
manifest.txt                       product manifest

mps/                               the MPS
mps/include/                       headers for interfaces
mps/include/mps.h                  flexible interface header
mps/include/mpstd.h                target detection header
mps/include/mpsio.h                plinth "I/O" interface header
mps/include/mpslib.h               plinth "lib" interface header
mps/include/mpscamc.h              pool class AMC interface header
mps/include/mpsclo.h               pool class LO interface header
mps/include/mpscawl.h              pool class AWL interface header
mps/include/mpscmv.h               pool class MV interface header
mps/src/                           sources for interfaces
mps/src/mpsioan.c                  source for ANSI-based plinth "I/O"
mps/src/mpsliban.c                 source for ANSI-based plinth "lib"
mps/lib/                           linkable libraries for the MPS
mps/lib/w3i3/                      libraries for Win32 on Intel
mps/lib/w3i3/ro/                   "release optimized" variety
mps/lib/w3i3/ro/mmdw.lib           Dylan Memory Manager (without plinth)
mps/lib/w3i3/ro/mpsplan.lib        ANSI-based plinth "I/O" and "lib" interfaces
mps/lib/w3i3/ds/                   "debug sig" variety (contents as for "ro")


INTERFACE CHANGES

The function mps_ld_merge is now defined in mmdw.lib, so you don't need your 
definition any more (the two definitions are identical, so if you keep yours 
the only problem will be a linker warning -- or error unless you tell the 
linker to /FORCE).  mail.nickb.1997-06-11.13-38(?)

There is a new function for registering tables of roots, 
mps_root_create_table_masked.  This will allow you to register roots of things 
which are either pointers or tagged integers.  The last argument is a mask 
which is applied to all the words in the table.  A word is only treated as a 
reference if it is zero when ANDed with this mask.  For Dylan, specify a mask 
of 3.

This version of the Dylan Memory Manager is "free-standing" and doesn't depend 
directly on the C library.  Instead, it calls out through two interfaces: 
mpslib.h and mpsio.h.  You can implement these interfaces, or use or adapt the 
source code provided in mpsliban.c and mpsioan.c which maps them, by default, 
to the C library.

