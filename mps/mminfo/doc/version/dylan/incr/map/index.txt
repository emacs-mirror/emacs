                 THE DYLAN INCREMENTAL VERSION IN HOPE
                         version.dylan.incr.map
                               draft doc
                             drj 1997-01-14

The DylanWorks Incremental Release (version.dylan.incr) is constructed from 
sources in HOPE.

The releases and all subsequent patches are made from the branch 
MM_dylan_incremental of the compound MMsrc.


Changes made to hope branch MMsrc!(MM_dylan_incremental)

Overview

There are 10 checkpoints on this branch (MM_dylan_incremental_0 to
MM_dylan_incremental_9).

Unfortunately it is not always possible to accurately determine the date
that a checkpoint corresponds to.  Some of the checkpoint times are not
strictly accurate but they will do as the source hadn't changed.

0 1996-03-04 11:46:08
1 1996-11-26 15:00:00
2 1996-11-27 16:00:00
3 1996-11-28 12:00:00
4 1996-12-17 15:10:43
5 1996-12-18 18:29:43
6 1996-12-19 13:50:27
7 1997-01-09 14:43:07
8 1997-01-10 18:30:28
9 1997-01-14 10:51:01

Changes


between 0 and 1

DylanWorks couldn't use the new interface as they needed class files for
the MV and AMC Pool Classes.

Changed dw.bat so that mpscmv.h and mpscamc.h are included in the
distribution.


between 1 and 2

DylanWorks couldn't use the collector as their compiler wasn't "dumping"
objects (wrappers as it happens) in the correct format.  Some of the checks 
that were being performed were causing the collector to fall over.

The checks were not strictly necessary (as long as DylanWorks did not
allocate wrappers dynamically).  Some checks were removed from fmtdy.c


between 2 and 3

DylanWorks still couldn't use the collector as there were still too many
checks.

A whole load more checks were removed from fmtdy.c (like, all but the
most trivial wrapper and wrapper-wrapper checks).


version 3 ushered in a small period of stability.


between 3 and 4

DylanWorks discovered a bug (AVER on line 56 of
shield.c(MM_dylan_incremental.1) is firing).  This was caused by two
threads entering the MM at nearly the same time; the 1st thread would
clear the protection on the page that caused the 2nd thread to fault.
The 2nd thread would fall over when it discovered that the page wasn't
protected.

A fix was made to SpaceAccess whereby the page being faulted on was
checked to see if it was protected before performing the PoolAccess.
This was essentially incorporating a fix that had been made on the trunk
after this dylan branch had been made, between space.c(trunk.19) and
space.c(trunk.20).
 
The Dylan Object Format was changed and fmtdy.c was changed so as to
accommodate these changes (version 1 of the Dylan Object Format).


between 4 and 5

DylanWorks decided that the silly messages that AMC printed out Reclaim
should be removed (I don't think they discovered that it actually caused
the IDVM listener to fall over, as they were using the pentium
backend).  The silly messages were removed.

DylanWorks discovered a bug which caused a thread to go into an endless
loop, repeatedly executing MM's exception filter.  This was caused by a
write fault being generated on a page which was protected from reading
but not from writing.

Another bug that had been fixed on the trunk after this branch was
made.  This time between protnt.c(trunk.6) and protnt.c(trunk.7), the
fix was for protnt to "know" that read protecting a page also involved
write protecting it.


between 5 and 6

DylanWorks reported a bug (AVER on line 373 of
amc.c(MM_dylan_incremental.3) was firing).  This was caused by a
collection being started in between the reserve and commit of another
thread's alloc sequence.  AMC was incorrectly flushing the buffer
attached to a group when it scanned the group (and this caused a problem
because it attempted to flush a busy buffer).

Changed amc.c so that it only flushes the buffer attached to the group
if it is the forwarding buffer.  This fix has not been made on the
trunk (I don't think).


version 6 ushered in a small period of stability.


between 6 and 7

DylanWorks discovered a bug (AVER on line 73 of
locknt.c(MM_dylan_incremental.1) was firing).  This ultimately turned
out to be because LDReset had a bug whereby access was made to a pool's
memory without an Expose and Cover round it.

Added a new module exch.c (and exch.h, exchnt.h) and made changes to
space.c and mpsi.c to try and trap likely points of recursive entry.
Made changes to space.c and space.h to add some simple logging.


between 7 and 8

Fixed LDReset in ld.c so that it put an Expose/Cover round the accesses
it made.  Turned out there was a bug in this.


between 8 and 9

Fixed LDReset properly.  This fix has not been made on the trunk.

