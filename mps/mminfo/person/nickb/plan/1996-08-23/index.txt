             WORK PLAN FOR NICK B FOR AUGUST--DECEMBER 1996
                      person.nickb.plan.1996-08-23
                              obsolete doc
                            nickb 1996-08-23

SCOPE

.scope: This document addresses the problems I've had with planning
my work. It includes a work plan for the rest of 1996 (Aug-Dec).

.readership: mm, mm-ml, mm-epcore, and anyone else who knows me.


INTRODUCTION

.intro.plans: In the past I have constructed monthly plans to organise
my work time. I stopped doing this.

.intro.restart: I have spent some time writing this document in
an attempt to get my monthly plans restarted. 

.hist.0: I started to jot things down and they jelled into this.

.future.revise: Feedback from clients may lead me to revise these plans.

.future.next: When I get towards the end of this plan I shall repeat the
exercise for the subsequent months.


REACTIONS

.react: This section describes reactions to this plan.

.react.nickb.relief: My first reaction is one of relief at finally getting
something concrete down. The existence of the plan is more important to me
than my strict adherence to it.

.react.nickb.pressure: My second reaction is awareness of pressure.
There's a lot to do this year!

.react.nickb.pressure.ep: MM/EP-core has slipped in the past, but that
has not effectively mattered until now. Now EP have deadlines for
products which include MM/EP-core deliverables ("ScriptWorks 4.2" and
beyond), and this plan makes me realize how tight the timetable is for
producing those deliverables.

.react.nickb.pressure.ml: MM/ML discussions (see meeting.ml.1996-04-23
and meeting.ml.1996-07-10) have included loads of good-sounding stuff,
but the plan shows that little of it is going to get done this year.


ABOUT MONTHLY PLANS

.plans.what: A monthly plan consists of a breakdown of time according to
project, task, sub-task (&c), together with a one-line-per-day calendar of
the month showing work planned and achieved on each day.

.plans.why: Making plans helped to focus me on the work to be
done. I could then use a plan as a reminder of work to be done and as
an indicator of my work performance (and of my forecasting skills).

.plans.use: I updated monthly plans every day with a one-line
record of work done. Each month I examined the last month's plan and
created the next month's plan.

.plans.overhead: Daily overheads like reading mail get absorbed into
each job's allocation (so a "day" is probably 5-8 hours of dedicated work,
say 6.5 hours on average).

.plans.stop: I stopped doing plans in the early months of this
year because "I didn't have enough time". This was a false economy.

.plans.restart: I decided I needed to restart monthly plans, even at
considerable cost, because I had become completely unfocussed: I had
great difficulty dividing my time between different tasks.

.plans.restart.fail: I tried to restart monthly plans in both July and
August but found that I was too unfocussed to do it on a monthly
basis: deadlines were too far ahead and the necessary work was
insufficiently clear.

.plans.restart.long: This document starts by taking a longer view,
then analyses and subdivides to produce some draft monthly plans from now
until the end of 1996.

.plans.form.break: Work breakdowns are hierarchical tables. This example
shows how 13 days of effort on the QX project are divided and subdivided.
For instance, 5 days will be spent doing "foo" for the "frob" part of the
project:

  QX 13
        8       frob
          5       foo
          3       bar
        5       wibble
          3       wobble
          2       woo

.plans.form.cal: Calendars are one-line per day. This example shows that
on February 10th, I planned to do documentation for the QX project, but
ended up fixing a bug instead:

        Feb 10  QX doc          fix wibble bug.


PERIOD OVERVIEW

.over.total: August 27th-December 31st 1996 includes 89 working days.
I have 13 days holiday left, and want to carry 3 over to next year, so
I'm intending to work 79 of those days.

.over.cat: I categorize my work 3 ways:
.over.cat.ep: MM/EP-core (including review)
.over.cat.ml: MM/ML (including review)
.over.cat.mm: Everything else

.over.divide: I find I have a mental notion of how to divide my time.
This is roughly 75% EP, 50% ML, 30% MM. Scaling to fit into 100%, I
get roughly 50% EP, 30% ML, 20% MM.

.over.divide.mm: 20% MM translates to "Wednesdays". [Wednesday
afternoon has become the MM group's weekly review session, and it is
most efficient for me to spend the whole of each Wednesday at the
House]. When we review EP-core or ML work (on Wednesdays) I could take
account of that.

.over.divide.result: 
                        EP      37
                        ML      26
                        MM      16


IDEAS

.idea: Here are my ideas for stuff to do in each category:

.idea.ep: For MM/EP-core, basically to meet req.epcore.

.idea.ep.equiv: Finish equiv deliverable
.idea.ep.trap: Do trapping deliverable
.idea.ep.full: Do full deliverable

.idea.ml: For MM/ML:

.idea.ml.doc: Write more documentation
.idea.ml.debug: Fix some bugs
.idea.ml.debug.assist: Assist MLWorkers in debugging
.idea.ml.debug.auto: Write some code to automate some debugging work.
.idea.ml.gc: Finish the new GC
.idea.ml.profile: Enhance the space profiler (see under .future in the
space profiler document that I wrote last week).
.idea.ml.image: Make images smaller.
.idea.ml.image.tool: Write a tool to assist users in making images smaller.
.idea.ml.misc: Misc minor improvements (see meeting.ml.1996-07-10).

.idea.mm: For the rest of the memory management project:

.idea.mm.design: Take part in design brainstorms.
.idea.mm.process: Contribute to process refinement.
.idea.mm.plan: Make, refine, and update plans.
.idea.mm.meeting: Take part in other MM meetings (e.g. performance review).
.idea.mm.review: Take part in review.
.idea.mm.edit: Be the editor for some reviewed documents.


BREAKDOWN

.break.overall: Here is an overall breakdown for this period, picking
items from the above list of ideas to fit the effort available:

  EP  37
        7       equiv (this is mostly done now)
        2       trap (this should take almost no effort)
        28      full:
           5      MPSify some of the glue code (e.g. PS pools)
          13      write GC stuff for the PS pools
          10      test & debug the GC
                
  ML  26
        5       doc
          2       doc more of the debugging process
          1       mark MM code in the runtime
          2       doc MM/ML in the same way as I have done the space profiler
        11      debug
          6       fix MM-related bugs (solo and guide)
          5       work on automated debugging tools
        10      new gc
          5       tie up algorithmic loose ends in the new GC
          5       testing

  MM  16
        8       review/process
        3       meetings
        5       planning

.break.month: The following sections divide the above breakdown up according to
month:

.break.aug: The rest of August has 4 working days, of which I shall
work 3:

  EP     1
           1 equiv
             1    arena code
  ML     1
           1    debug
             1    fix MM-related bugs
  MM     1

.break.sep: September has 21 working days, of which I shall probably
work 20:

  EP     8
           6    equiv
           2    trap
  ML     8
           5    doc
             2    doc more of the debugging process
             1    mark MM code in the runtime
             2    doc rest of MM/ML as I already have the space profiler
           3    debug
             1    fix MM-related bugs
             2    work on automated debugging tools
  MM     4

.break.oct: October has 23 working days, of which I shall probably work
23:

  EP    13
          13    full
             5    MPSify the PS pools (and some of the rest of the glue)
             8    start writing the GC for the PS pools
  ML     5
           5    debug
             2    fix MM-related bugs
             3    work on automated debugging tools
  MM     5

.break.nov: November has 21 working days, of which I shall probably
work 18:

  EP     8
           8    full
             5    finish writing the PS GC
             3    test/debug the PS GC
  ML     7
           1    debug
             1    fix MM-related bugs
           6    new GC
             5    finish coding on new GC
             1    test/debug/tweak new GC
  MM     3

.break.dec: December has 20 working days, of which I shall probably
work 15:

  EP     7
           7    full
             7    test/debug the PS/GC
  ML     5
           1    debug
             1    fix MM-related bugs
           4    new GC
             4    test/debug/tweak new GC
  MM     3


CALENDAR

.cal: This is a day-by-day calendar of planned work.

.cal.debug: ML debugging work is somewhat on-demand (see
meeting.ml.1996-04-23.level.1 and meeting.ml.1996-04-23.level.2). So
ML debugging days are subject to motion, and other days will shuffle
to fit.

.cal.aug:

.cal.aug.notes: A bit of everything.

Aug 26 ** bank holiday **
Aug 27 EP.equiv
Aug 28 MM
Aug 29 ML.debug
Aug 30 ** day off **

.cal.sep:

.cal.sep.notes: Finish equiv and trapping first, then spend the rest
of the month on ML stuff.

Sep 02 EP.equiv
Sep 03 EP.equiv
Sep 04 MM
Sep 05 EP.equiv
Sep 06 EP.equiv

Sep 09 EP.equiv
Sep 10 EP.equiv
Sep 11 MM
Sep 12 EP.trap
Sep 13 EP.trap

Sep 16 ML.doc
Sep 17 ML.debug
Sep 18 MM
Sep 19 ML.doc
Sep 20 ML.debug

Sep 23 ** day off **
Sep 24 ML.doc
Sep 25 MM
Sep 26 ML.debug
Sep 27 ML.doc

Sep 30 ML.doc

.cal.oct:

.cal.oct.notes: Again, EP stuff at the start of the month. Some ML
work every couple of weeks to ensure the ML work doesn't get
bogged down.

Oct 01 EP.full
Oct 02 MM
Oct 03 EP.full
Oct 04 EP.full

Oct 07 EP.full
Oct 08 EP.full
Oct 09 MM
Oct 10 EP.full
Oct 11 EP.full

Oct 14 ML.debug
Oct 15 ML.debug
Oct 16 MM
Oct 17 EP.full
Oct 18 EP.full

Oct 21 EP.full
Oct 22 EP.full
Oct 23 MM
Oct 24 EP.full
Oct 25 EP.full

Oct 28 ML.debug
Oct 29 ML.debug
Oct 30 MM
Oct 31 ML.debug

.cal.nov

.cal.nov.notes: November is too far away to plan precisely; I don't
even know which week I'll be taking my holiday.

Nov 01

Nov 04
Nov 05
Nov 06 MM
Nov 07
Nov 08

Nov 11
Nov 12
Nov 13 MM
Nov 14
Nov 15

Nov 18 potential ** day off **
Nov 19 potential ** day off **
Nov 20 potential ** day off **
Nov 21
Nov 22

Nov 25
Nov 26
Nov 27 MM
Nov 28
Nov 29

.cal.dec:

.cal.dec.notes: As for November, so for December, in spades.

Dec 02
Dec 03
Dec 04 MM
Dec 05
Dec 06

Dec 09
Dec 10
Dec 11 MM
Dec 12
Dec 13

Dec 16
Dec 17
Dec 18 MM
Dec 19
Dec 20

Dec 23 ** day off **
Dec 24 ** day off **
Dec 25 ** bank holiday **
Dec 26 ** bank holiday **
Dec 27 ** day off **

Dec 30 ** day off **
Dec 31 ** day off **


