                   REFERENCE PAGE FOR REVIEW PROCESS
                           process.review.ref
                              obsolete doc
                           gavinm 1996-07-23

.purpose: The purpose of this document is to be a one-page reference useful for 
reviewers and review leaders.  See proc.review or process.review for fuller 
details.


CHECKING

.log.total: At the start of the logging meeting, the review leader will ask for 
totals from each checker as classified under .class below.  Precision is not 
paramount.

.class: The classification of defects is as below.  Note that it is more 
important for a checker to note a defect than to classify it correctly.  
Correct classification, however, will speed logging.  The abbreviation is noted.

.class.major: (M)  A major issue is a defect in a product document whose cost 
to fix will increase with time.  Any defect which would result in a customer 
bug report is major.  

.class.minor: (m)  A minor issue is a defect in a product document whose cost 
to fix will not increase with time.

.class.question: (q)  Any point on which a checker wants clarification is a 
question to the author.  Note that, if the point should have been clear from 
the product document and wasn't, this is a defect.

.class.comment: (C)  Not a defect, but something to communicate about the 
product document.

.class.improvement: (I)  Any issue which cannot (or shouldn't) be resolved in 
the product document, typically a defect in a source document or process, is an 
improvement suggestion.

.class.new: (N)  Any issue which is identified for the first time during 
logging is new. This classification is orthogonal to the preceding.  It is 
important that new issues are so-classified.

.role: Some checking roles (mostly for implementations) are:

  .role.dep: Are all change-dependencies marked and cross-referenced?

  .role.design: Are all decisions which reflect requirements documented in 
design documents?

  .role.guide: Does the implementation comply with all relevant style guides?

  .role.justify: Is the purpose of every code statement clear?

  .role.limits: Are all limitations exposed to the clients of the 
implementation?

  .role.min: Does the implementation provide no more functionality that is 
required?

  .role.mod: Do implementations make no unwarraneted assumptions about other 
implementations?

  .role.platform: Are all platform-specific features used only when appropriate?

  .role.quality: Are any rule trasngfressions clearly justified?

  .role.req: Does the implementation meet all relevent requirements?

  .role.simple: Is the code as simple as possible to meet requirements?

  .role.trick: Does the implementation use no unnecessary tricks?

  .role.cons: Is the document consistent with itself, other documents, and its 
purpose?


BRAINSTORM

.root: The following root-cause classifications may be useful during the 
process brainstorm:

  .root.comm: Communications failure: Information not received; incorrect 
information received.

  .root.over: Oversight: Didn't include something; not enought time to do the 
job thoroughly; simply forgot something.

  .root.trans: Transcription error: Knew and understood what to do, but a "slip 
of the finger" resulted in an unintended outcome.

  .root.edu: Education: Didn't realise that something else or something 
different should have been done; didn't understand the problem, the solution, 
the context, the job.

