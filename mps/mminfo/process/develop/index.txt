                        THE DEVELOPMENT PROCESS
                            process.develop
                             incomplete doc
                           richard 1995-08-27

Requirements Analysis

Document the client's perceived needs.  Describe both the _system_ and the 
_environment_ in which it operates.  Describe both the _functional_ 
requirements (systematic relationships between inputs and outputs) and the 
_attribute_ requirements (qualities of and constraints on the functionality).  
Describe Describe metrics and tests for requirements.  Describe impossible 
desires as well as possible ones.  Categorize the requirements into critical 
essential, optional, and nice (see guide.req).  The result is one or more 
requirements documents, tagged "req.<client>(.name)*".

System Specification

Document what the system will do (and not how it will do it).  The 
specification will be the "contract" between the development team and the 
client.  The specification should be structured by requirement, and linked to 
requirements.  The structure need not reflect the design.

Architectural Design

Document how to implement the specification, including all requirements.  The 
architectural design is at a level just low enough that it shows that the 
requirements can be satisfied.  It does not necessarily contain enough detail 
to go directly to code.  The transformation from specification to architectural 
design is not necessarily structure-preserving.  Includes module structure, and 
estimation of resource usage.  Architectural design breaks down the system 
requirements into requirements on individual parts.  The architectural design 
should be linked to the system specification.

Detailed Design

Refine the parts of the architectural design into a detailed document which 
explains in detail _how_ the implementation will satisfy the requirements for 
the part.  The detailed design should be linked to the architectural design.

Implementation

The implementation should be linked to the detailed design.


EXAMPLE

goal.general.provide: Provide users with trivial tools they ask for.

client.smith: I need a "hello world" program.

goal.smith: Provide Smith with the program he wants.

req.jones.fun.soft.print: Print "Hello, world!"
req.jones.fun.env.os.sun: On a SunOS 4.1 machine.
req.jones.attr.qual.work.throughput: In less than 0.1 seconds.

spec.jones: The program shall consist of an executable which, when invoked, 
writes the characters "Hello, world!" to the standard output stream, followed 
by a newline character.  All the characters shall be written and the program 
shall return to the operating system within within 0.1 seconds of entry to the 
excutable.

arch.jones: The program consists of a single module with a "main" interface.  
It will require a pre-existing binding for the standard output stream, as 
provided by SunOS, and also the C library routine "puts" as described in 
standard.ansic.wurble.wibble.

design.jones.main: ...

impl.jones.c.main: puts("Hello, world!")

testing?

maintenance?


REQUIREMENTS

Form
- functional
  - allocation, etc.
- attribute
  - latency
- environment
  - OS, architecture
- management
  - support
- constraints
  - no use of C run-time library
  - form of deliverable?
  - size of  library?
- legal
  - no infringement of existing patented technology

Rules
- Unambiguous
- Complete
- Consistent
- Verifiable (high-level testability)
- Validatable (client can check)
- Modifiable
- Understandable
- Testable (implementation testability)
- Traceable (tagged and referencing)

Ideas
- logical statements using predicate calculus
- acceptance tests
- process?


ARCHITECTURE

Form
- modules
- module function
- module interface
- dependencies
- data
- resources
- processes

