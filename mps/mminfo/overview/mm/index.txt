         AN OVERVIEW OF THE MEMORY MANAGMENT GROUP AND PROJECTS
                              overview.mm
                              obsolete doc
                           richard 1996-10-11

INTRODUCTION

.intro: This document gives an overview of the Memory Management Group and its 
activities.

.readership: This document is intended to be read by any Harlequin employee 
interested in what the Memory Management Group does.


GOALS

.goals: The Memory Management Group has five goals:

  - to make products for sale by Harlequin,
  - to provide solutions for other groups within Harlequin,
  - to reduce duplicated effort within Harlequin,
  - to improve the quality of solutions within Harlequin, and
  - to broaden and improve the image of Harlequin.

These goals are documented in the document goal.general.


PROJECTS

.projects: There are seven projects underway in the Memory Management Group:

  MM/EPCore: Providing a maintainable memory manager with garbage collector to 
the ScriptWorks Core RIP Group of EP (see project.epcore);

  MM/Dylan: Providing a memory manager for the Dylan development environment 
and software components developed with it (see project.dylan);

  MM/Product: Creating a shrink-wrapped memory management software component 
with associated development tools for sale by Harlequin (see project.product);

  MM/ML: Maintaining the MLWorks memory manager, which was co-written by 
Richard Brooksby and Nick Barnes (see project.ml).

  MM/Book: Writing a book about using memory managers effectively (see 
project.book).

  MM/Web: Writing and maintaining the Memory Management Reference web pages, a 
public resource about memory management (see project.web).

  MM/Process: Document and improve the processes of the Memory Management Group 
(see project.process).

The MM/EPCore, MM/Dylan, and MM/Product projects share the same software 
system, called the "Memory Pool System" (MPS).  The MM/ML project maintains the 
existing MLWorks memory manager, which may be replaced by the MPS in future if 
the benefit is large enough to merit it.


THE MEMORY POOL SYSTEM

.mps: The Memory Pool System is designed in the knowledge that no one memory 
management policy solves all problems.  The MPS is a memory management 
_framework_ which can support a number of different policies and allow them to 
co-operate and operate concurrently.

The core of the MPS is the "Memory Pool Manager" (MPM), which co-ordinates the 
activities of a number of "Memory Pool Classes" which implement memory 
management policies.  The "client" application communicates with the MPM 
through a "generic function interface", which means that the bulk of the client 
code does not need to know which particular policy it is dealing with.  (This 
is an application of "late binding".)  This gives a great deal of flexibility 
in selecting policies.  In particular, it allows the client application 
developer to defer the choice of policy until his requirements are clear.  This 
is a key feature of the MPS.

The model of use of the MPS is that the memory manager emits data which is 
interpreted by some analysis tools.  These tools display information 
graphically and allow the developer to understand the behaviour of the system.  
He is then able to compare the system to his needs and make modifications to 
the client code to bring the system in line with its requirements.

These modifications may initially take the form of selecting suitable memory 
management policies.  Later, the adjustments are likely to become more subtle, 
and involve fine-tuning parameters or adjusting the way that the client makes 
use of memory.


HISTORY

.history: The original Memory Management Group consisted of Richard Brooksby 
and Tucker Withington.  Richard had previously worked in the ML Group and 
implemented the MLWorks memory manager and garbage collector.  After that he 
worked on the ESPRIT COMPARE collaborative research project.  Tucker Withington 
joined from the ailing Symbolics Inc, where he developed the Lisp Machine's 
memory systems.  The MM Group was formed by Jerri Pries shortly after Harlequin 
abandoned COMPARE [date?].

Initially, the group was a semi-autonomous entity within the Dylan Group.  
Later [date?], Jerri Pries made MM into a seperate group within the Symbolic 
Processing division and appointed Richard to be group manager.

The initial brief of the group was to provide a memory manager for Dylan, but 
it was understood that Harlequin would be interested in "memory management 
products", though the form of those products was not clear at the time.  
Initial prototyping and design work concentrated on a flexible memory 
management framework which would meet Dylan's requirements but also be 
adaptable to other projects, and form part of a stand-alone product.

Richard's worries about the subtlety of a generic memory management interface, 
coupled with the complexity of the Dylan implementation, led him to push for a 
fairly formal requirements specification.  This set the tone for the group's 
operations, and has led to extensive use of formal software engineering 
techniques such as inspections.

