            WORK OUT HOW TO REMOVE THE DEPENDENCIES ON POOLS
                           obj.pools-dep-elim
                         obsolete complete obj
                             dsm 1995-09-05

Responsible: dsm
Due: 06/09/95
Products: .report
Procedures: proc.universal


Think about how to remove dependencies on Pool Class S
- from Pool Class MFS
- from anywhere else

Write up how to do it.


REPORT:

I have outlined very roughly what needs doing.  This could be made more 
specific once the new Arena interface is implemented.


Changes Concerning Segs In the Arena

When design.mps.arena(0) is implemented:
Seg will no longer be a structure.
There will be no segDeque listing all segs in that pool.
SegExtent
- there will be no extent.
PoolSegCreate, SegExtend
- These will be replaced by one call?
PoolSegDestroy
- SegFinish used instead?
PoolSegDestroyAll
- There will no longer be a mechanism for listing the segments attached to a 
pool.  Pool classes will have to have a way of enumerating all their segs 
already and will have to destroy all segments explicitly.


Resulting Changes

These are not full or complete.  Just the most major ones.

Pool Class MFS
Either
1. This can use the mapping mechanism provided by the new arena 
(design.mps.arena.req.fun.trans) to store a link to the previous segment.  The 
finish method will just have to finish all the segments on this list.
)-: There will be no where to put per segment data.  This may make it more 
difficult to work out if a segment is empty so that it can be freed.  See 
issue.general.impl.seg.shrink.
(-: Good locality.
(-: There will not be the overhead of having a per segment data structure.
2. Store some per segment data including a link, as a header in each segment.
)-: This is annoying if for example Size(seg) % Size(unit) == 0.  But not very.

Pool Class MV
This does not use the PoolSeg functions.  PoolMVStruct inlines SegStruct and 
uses it's poolDeque explicitly.  This could simply be replaced by fields
  Seg seg;
  DequeNodeStruct spanDeque;

Pool AMC
Haven't looked at this

General
PoolOfSeg
- uses of this will be improvable as there will be an efficient PoolOfAddr
Extents
- limits can be used instead as segments are (at the mostly) only ever extended 
just after Init.





