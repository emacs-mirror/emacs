                 ANALYSE CONSISTENCY CHECKING OVERHEAD
                         obj.checking-analysis
                         obsolete complete obj
                           richard 1995-08-01

Responsible: drj
Due: 02/08/95
Products: issue.debug-speed


Find out why the checking overhead is so high.  Where is the time going?  Is 
this due to poor structure?  Why did this problem arise, and what can we do to 
avoid it happening in future?


REPORT:

From: David Jones <drj>
Date: Tue, 25 Jul 95 17:36:40 BST
To: mm
Subject: Debugging overhead

This is the program:

  SpaceInit(space);

  SpaceFinish(space);

resulted in 52469 calls to validation methods.  Of which the top two
are:

10858 Validating: File: "../../src/sig.c" Line: 61 Addr:    99592
14766 Validating: File: "../../src/sig.c" Line: 61 Addr:    99584

Which turn out to be the signatures belong to Deque and DequeNode.

--drj--

---

From: David Jones <drj>
Date: Tue, 8 Aug 95 10:41:51 GMT
To: mm
Subject: Debugging overhead and optimisation

On SunOS using gcc compiling the debugging version of the code with
optimisations results in a doubling of the speed.

--drj--

---

From: David Jones <drj>
Date: Wed, 9 Aug 95 13:22:35 GMT
To: mm
Subject: Re:  Simple analysis of the debugging overhead.

Addition of the "no validation methods" version.  This version has no
validation methods (like PoolIsValid, and so on), but does have all
other checking.

      125.3 real       115.7 user         0.0 sys  full checking
      123.5 real       121.7 user         0.1 sys  10 deep
      103.4 real       102.2 user         0.0 sys  3 deep
       73.5 real        71.9 user         0.0 sys  2 deep
       32.8 real        32.1 user         0.0 sys  1 deep
       10.6 real         9.8 user         0.0 sys  0 deep
        9.0 real         8.7 user         0.0 sys  nested calls macroized out
        4.3 real         4.1 user         0.0 sys  no validation methods
        1.7 real         1.2 user         0.0 sys  no checking (optimised)



