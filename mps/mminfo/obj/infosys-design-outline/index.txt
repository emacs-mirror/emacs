    PRODUCE DRAFT DESIGN DOCUMENT OUTLINE FOR THE INFORMATION SYSTEM
                       obj.infosys-design-outline
                          obsolete started obj
                           richard 1995-08-24

Responsible: richard
Due: 01/09/95
Products: .report;design.infosys.*
Procedures: proc.universal


REPORT:

- Measurement for CQI: diagrams from ClarisWorks pasted in
- Areas: build, infosys, general, dylan, etc.
- Requirement levels: critical, ...
- Roles: manager, leader, etc.
- What things need to be consistent?
- What relationships exist on changes? (with procs)
- Deliveries satisfying functional requirements
- Risks
- Outline doc type?
- Document owners
- proc.build, build system information:
 - what system dependent parts are: gnumake on sun, etc.
 - what resources do we depend on?
- proc.test.*: test/*/notes.txt, make covered.txt
- proc.impl.os-specific?
- Changing code procedure: Don't check in after 4pm
- proc.create.*: about status, etc.
- Project dependencies: we rely on Win32, etc.
- Suggestions?
- Ideas (in general)
- Mail messages or discussions
- Review log format?
- Revisions
- Issues should spawn objectives, rather than have resolution fields
- Release notes
- Levels of detail

[Network of relationships indicating derivation of one document from another.]

A design document is just one part of the process of production.  The model
I am applying in MM starts with goals, from which are derived requirements.
Solution ideas are generated, which are analysed against the requirements.
The selected solutions are developed into designs, which are implemented
and tested against requirement acceptance tests.  A process of review is
applied at all stages to make ensure quality, make sure that everything is
contributing properly toward the goals, and to improve the whole process.

(I ought to draw a diagram of this.)


[Policy: Use InfoSys for CQI.  Break rules to meet requirements (then improve 
rules).  Use review to give measurable quality.  ML is a vehicle for nice 
abstractions, unlike the code.  ML as part of design process.  ML can improve 
code practice.  Proof of model's properties gives confidence about the code's 
properties.]

Procedures
- edit: changing sources, test, review, checking in
- freeze: stopping development, checkpoint?
- test: coverage and stress construction
- release: final build and test, checkpoint, make disks and release notes
- build
- change, by thing changed: what else to change?
- Naming of review records?
- Namign of implementation.
- tagging

Test plans
- Description of thing
- What it's meant to do
- Test cases
- Expected outcome

Roles
- Consistency, consistency checking
 - Assertion checklists
 - Data structure checklists
- Requirements
 - Requiements specification for module
- Documentation, clarity
- Dependencies, integration, compatibility
- Language lawyer
 - ANSI Standard
- Style
 - Style guide

Procedures
Checking in:
- build on SUN etc as well as local platform

Building:
- Windows - need environment?
- Unix?
- Mac?
- Justification or requirements for the build system?
- Or for anything else, for that matter?

See request.process.170409


