                       BSD4.4 MAIL NEEDS "FIXING"
                             obj.hack-mail
                          obsolete started obj
                             drj 1995-11-17

Responsible: drj
Products: .report
Procedures: proc.universal


convergence to SUN ucb-mail would be nice.  Except without the bugs.
bsd-mail lacks:
pipe command (fixed)
inc command
Save command (Nb, Save not save).
MAIL feature (ability to point it at different mail spool file)
followup and Followup
~< (should be trivial, see collect) (fixed, was trivial)
generation of in-reply-to fields.

:d doesn't work because deleted messages are not marked by default.  See 
markall.
don't like they way it puts quotes round the subject in from displays either 
(fixed)
Assumes Date in the envelope of mbox messages is valid to local date.  Not true 
if user sets TZ differently from system TZ or if reading mbox files created in 
different TZ.  Basically the envelope Date information is useless and should 
not be used. (mostly fixed).

printhead should show length of body of message (ie not including headers).
bug in vi command.  If (using vi) you remove blank line at end of message, then 
mail elides next message into it (when you next use the folder).  Should ensure 
after returning from editor that the mesage has a blank line at end (or strip 
it on entry and add it on exit).

Should implement a forwarding feature and use rfc934 encapsulation.

editheaders functionality would be nice.


REPORT:

I believe the structure is there to support Save (reply uses it for example).  
Could make adding the network extension to the name of the folder an option 
(wow!) (so mail from spqr1@sdqr.com could get saved in either spqr1 or 
spqr1@sdqr.com depending)
inc is harder, it's not just a matter of closing and reopening (because message 
numbers are correctly preserved).  There is code in edstop and quitcmd (in 
quit.c) to do detect and copy extra stuff on the end of files.
In-Reply-To and others will entail storing messages in preparation in 
completely different format (ie, store as plain text).

now reads /usr/lib/Mail.rc (pathnames.h)
hacked printhead to change way it prints out header info (no quotes, short 
column for address, #lines only, more room for subject).
hacked printhead some more to change the way it prints out the date, reserving 
yet more space for the subject.
hacked pipe command on, by duplicating code from save1.  Intend to convert 
save1 and pipe to use common code via common function.
Now uses drj's date parsing module (date.c date.h) and the Date: field.  Prints 
out times assuming GMT (should localtime them or whatever).
The functions infix and puthead in the file send.c are the functions 
responsible for tacking headers onto the front of messages.  hack here to add 
things like X-Mailer and In-Reply-To.
wrt extra headers are the address headers the only ones with structured 
information in?  can all other headers simply be stored as plain-text and 
spewed out unintelligently when required. (no, what about X-ISO-Date: ?)
Added X-Mailer header.  version.c contains the product name which is used.
Now emits its own Date: header of form "dd Mmm yyyy hh:mm:ss +0000" (4 digits 
for year, no day name, always +0 offset).
Have added a sort command (implemented by sortdate and friends in cmd1.c).  
Abstracted message dates a bit.

