               WRITE RELEASE NOTES FOR DEBUGGING RELEASE
                           obj.debug-relnotes
                         obsolete complete obj
                           richard 1995-08-07

Responsible: richard
Due: 17/08/95


Write release notes for the Debugging Release.  These should be put in the IS 
somewhere.  Actually, the releases themselves could be stored, along with 
details.

Also, document how these are produced, and what from.  What rules do they 
follow?


REPORT:

(These were mailed to drj for inclusion.)

               DYLANWORKS MEMORY MANAGER RELEASE NOTES

These are the release notes for the DylanWorks Memory Manager.  This document 
contains information you really ought to know before you start using it.

This release of the DylanWorks Memory Manager is the "Debug Release".  It 
contains a simple garbage collector for DylanWorks objects.

The allocation API for this release has changes significantly since the last 
release (the "Zoned Collector").  Allocation of Dylan objects and wrappers is 
now done in two phases.  The header "mm.h" contains the details of the use of 
the interface.  The reason for this change is to allow future releases of the 
Memory Manager to provide a  fast in-line allocation method which doesn't 
require thread synchronization for most allocations.  This interface also 
provides limited checking of the validity of Dylan objects immediately after 
allocation.

The interface hides the details of memory pool creation, and instead provides 
three allocation primitives: one for objects, one for wrappers, and one for 
miscellaneous data.  Eventually the detailed interface will be exposed again, 
but for now we want something simple that we can debug together.  We have not 
had time to write such extensive documentation this time.  The API is 
documented reasonably well by the header "mm.h".

The library comes in four varieties, all called "mmdw.lib".  The libraries in 
"libc" directories are compiled for linking with the static Microsoft C 
library, LIBC.LIB.  The libraries in "msvcrt" directories are compiled for use 
with the dynamic C library, MSVCRT.DLL.  In addition, libraries in ".deb" 
(debug) directories are compiled with consistency checking and debugging 
information, and libraries in ".rel" (release) directories are compiled without 
either, for speed.  (See manifest.txt for details.)

This release increases the speed of the "debug" varieties of the Memory 
Management library.  This library should now only be around four times slower 
than the optimised "release" varieties.  We hope that you will be able to use 
the debugging variety all the time during development, as this will help both 
you and us to find problems early.

                                  richard 1995-08-22

