                  MUNGE THIS DOCUMENT INTO OBJECTIVES
                              obj.process
                          obsolete unknown obj
                             drj 1995-11-01

Responsible: drj
Products: .report
Procedures: proc.universal


From richard Mon Oct 23 12:49:07 1995
Received: from [192.88.238.249] (dynamic-mac5.cam.harlequin.co.uk) by 
rocannon.cam.harlequin.co.uk; Mon, 23 Oct 1995 13:49:05 +0100
X-Sender: richard@mailhost.cam.harlequin.co.uk
Message-Id: <v02130514acb13faa0fe9@[192.88.238.249]>
Mime-Version: 1.0
Content-Type: text/plain; charset="us-ascii"
Date: Mon, 23 Oct 1995 12:49:07 +0000
To: drj
From: richard (Richard Brooksby)
Subject: The "Process" section of my to-do list
Status: RO

PROCESS

* Describe Development Process

I want to write a brief description of the MM development process along the
lines of the Multics process described by Tom Van Vleck
(http://www.best.com/~thvv/mspp.html).  This document would both describe
what we do now, and describe what I'd like us to do, drawing on the Multics
experience.  In particular, I'd like to introduce "change requests" as a
way of recording and managing change, and preserving conceptual integrity
without the need to complete generation of design documents.

See request.process.170372

* Policies
  Internal interface policy
   Version information
   Limitations: requirements asserted in clients

* External interface policy
   Declaration sorts
    Structure definitions
    Abstract type definitions
    Init/Finish methods
    Create/Destroy methods
    Accessor methods
    Functions which actually do things
    IsValid methods
    Describe methods
    Definition of constants
    Macro definitions of inlined functions
    Miscellaneous

* Change severity levels

David Moore suggested these levels of change severity:

  1. We supply a dynamic library.  The client can simply use the replacement.

  2. We supply a static library.  The client has to relink to use our code.

  3. A change involves adding functionality, but only involves a
rebuild/relink if this functionality is used.

  4. A change involves differences in the header files that require a rebuild.

  5. A change involves redefinition of some part of the interface that
requires rework in the clients code.

 How-to documentation

* Coding conventions

  - Is it feasible to enforce a convention of using only one sequence point
per line?  Does this really help with debugging?

  - Define error path convention

  - Don't rely on cons(cons(x),y) even if y is declared (sequence points).

* Procedures

  - Change reporting procedures
  - Testing procedures
  - Release procedures
  - Bug experience reporting
  - Debugging procedures
    - Describe the debugging strategy
    - Spy in MM
    - Deliberately fail the two-phase allocation
    - Deliberately move objects for EP
  - Development
    - Creating new modules
    - Creating new pools

* Problem-solving method: Five-steps presented in a six-lecture course.





