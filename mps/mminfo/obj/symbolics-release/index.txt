         DISTILL THE WISDOM OF THE SYMBOLICS RELEASE PORCEDURE
                         obj.symbolics-release
                          obsolete unknown obj
                             drj 1995-10-30

Responsible: drj
Products: .report
Procedures: proc.universal


Need to examine the Symbolics release procedure, and work out how to 
incorporate the juicy bits.


REPORT:

From richard Mon Oct 23 12:10:21 1995
Received: from [192.88.238.249] (dynamic-mac5.cam.harlequin.co.uk) by 
rocannon.cam.harlequin.co.uk; Mon, 23 Oct 1995 13:10:19 +0100
X-Sender: richard@mailhost.cam.harlequin.co.uk
Message-Id: <v0213050dacb1365fe0c3@[192.88.238.249]>
Mime-Version: 1.0
Content-Type: text/plain; charset="us-ascii"
Date: Mon, 23 Oct 1995 12:10:21 +0000
To: drj
From: richard (Richard Brooksby)
Subject: Re: Issues from yesterday's meeting
Status: RO

This needs to be evaluated and included in some procedure and process
documentation somewhere.

> From: Doug Dodds <dodds>
> Date: Wed, 18 Oct 95 12:16:04 EDT
> To: jrd
> Cc: ptw, richard, mm, jrd
> Subject: Re: Issues from yesterday's meeting
> Status:
>
>    From: John R. Dunning <jrd>
>    Date: Wed, 18 Oct 95 10:39:04 EDT
>    References: <v02120d00acaaa6ce5dad@[192.124.144.135]>
>
>        From: ptw (P. Tucker Withington)
>        Date: Wed, 18 Oct 1995 08:57:55 -0400
>
>          From: Richard Brooksby
>          Date: 10/18/95 7:24 AM
>
>          6. As part of the release procedure, we should branch at
>_freeze_ rather
>          than release.  This would enable short-term patches to come out
>of testing,
>          while mainstream development can continue.
>
>        There is a lot of Symbolics wisdom/experience that would be
>relevant here.
>        Perhaps Doug and/or JRD could write something up about how
>Symbolics did
>        this.
>
>    Sure, if you like.
>
>               In fact, as I recall, source splits did occur at freeze
>points, then
>        QA took over the frozen (pre-) release.  During the QA phase, bugs were
>        fixed in the frozen stream and migrated forward to the development
>stream.
>        Development could continue in the devo stream, independent of how
>long the
>        QA/release phase took.  Note that _only_ QA-discovered bugs could
>be fixed
>        in the frozen stream, under the theory that the frozen stream should be
>        minimally perturbed (a bug found in the devo stream could be
>migrated back
>        to the frozen stream only under very extenuating circumstances,
>essentially
>        if you could prove that QA _should_ have discovered the bug).  Once
>        released, only customer-reported bugs could be fixed in the
>release stream.
>        At this point, bugs were often first fixed in the devo stream and
>migrated
>        back to the release stream; but probably only because most
>developers were
>        not running the release stream.
>
>    Actually not, see below.
>                                         Any non-developers were strongly
>        encouraged to be using the release stream to enhance use testing.
>
>    That's mostly right.  In fact, there were times when we did it either
>    way (split at freeze time vs split later) for assorted reasons.  A
>    reason to split early is to not impede development while QA does its
>    thing.  A reason to hold off splitting (presumably with some kind of
>    patch freeze in place) is to make it easier to fix the things that
>    *do* come up, as if you've split, things are starting to diverge, and
>    that makes it hard to migrate fixes in either direction.
>
>    A very common thing to do was for somebody to come up with a bug fix
>    and say it wanted to get fixed in the released stream as well as devo.
>    A common response was "don't install in the released stream until it's
>    run in the devo stream for a while".  That, IMHO, is one of the major
>    reasons for *having* a devo stream.  Only after it had proven itself
>    in the devo stream, and was judged sufficiently important to fix in
>    the release stream, did it get back-migrated.
>
> Tucker, your recollection of this is good, and the additions from JRD
> are quite right.  The one thing I would add is that the process should
> be considered in the context of the two-level freeze that we used at
> Smbx: declaring a feature freeze, and later a code freeze.
>
> We never split the source stream earlier than the code freeze, but the
> feature freeze made patch-review-before-installation mandatory, and
> tended to slow down changes and stabilize the devo stream prior to
> splitting.  Since developers tended to want to free up the devo stream
> ASAP, there was some pressure to do the split as early as possible,
> i.e., right after the code freeze.
>
> The principle of making a change first in the devo stream, checking it
> out and letting it mature, then porting it to the new release stream
> iff it was deemed justified, was an important one.  Sometimes it
> couldn't be done this way because divergence had produced
> incompatibility in that area, but it was valuable to do it that way
> whenever possible.
>





