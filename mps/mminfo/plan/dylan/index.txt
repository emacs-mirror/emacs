                         PLAN FOR DYLAN CLIENT
                               plan.dylan
                             incomplete doc
                             drj 1996-10-02

INTRODUCTION


Scope

.scope: This plan document describes how the MM group intends to achieve the 
goals described in goal.dylan

.readership:  MM group members.  [Dylan group managers may want to read section 
Releases, subsections Overview and Schedule although we should probably supply 
this information to them in a different document.]


Background

.ref: This document is derived from goal.dylan, req.dylan, and the mythical 
dylan schedule.


History

.hist.0:  1996-09-07 drj.  The outline of this document was created.
.hist.1:  1996-10-02 drj.  The current ideas on the schedule (ie .calendar.*) 
were added.


DEFINITIONS

.def.dw.a-b-c-d: Four (4) key Dylan releases are defined in 
meeting.dylan.1996-07-31.rp ('A' to 'D').  The current schedule for the dylan 
releases is: 'A' in 1996 October, 'B' in 1996 December, 'C' in 1997 March 
(source: meeting.product.1996-08-12).  In this document these releases will be 
referred to as DW 'A', DW 'B' and so on.


CURRENT STATUS
  (a requirements satisfaction chart)

Of the requirements that we are to meet by DW 'A', those that we do not meet 
now are:

req.dylan.attr.test-suite: We do not have a test suite.  We cannot expect to 
pass it.

req.dylan.attr.obj.max: Current we will not be able to allocate an object 
larger than 64Mb.  There is a mechanism in place for DW to specify this maximum 
on boot-up.  There is a sketch design for removing this limitation altogether.

req.dylan.env.thread: The mechanism exists, but it is inadequately tested and 
inadequately documented.

req.dylan.dc.var.dp: We do deliver a library with compiler debug info, but 
there is some doubt as to whether the debug information can be understood by 
whatever debuggers the Dylan Group are using (which is believed to be WinDBG).  
Needs investigation to at least remove the doubt.

req.dylan.prot.rehash: The mechanism for supporting this exists, but it is 
inadequately documented and an example of a good protocol sequence to use is 
missing (in particular, DW has a bug in this area).

req.dylan.prot.debug: We don't support this, nor do we know what the protocols 
are.  We know what sort of things the protocols are likely to be and envisage 
no significant design problems.

req.dylan.prot.{ffi, ffi.exc, ffi.access}: The mechanism is there, but 
inadequately tested and documented.

req.dylan.prot.stack-overflow: Currently we make no attempt to address this.


RELEASES


Overview


.over.buffalo: The "Buffalo" Release will meet all requirements in support of 
the DW 'A' release.  Briefly this covers all functional requirements except 
those for weakness and finalization, and will include FFI support, and will 
support the use of multiple threads (althought not necessarily multiple 
processors).  The Buffalo is the official animal of the state of Kansas 
(<URL:http://lark.cc.ukans.edu/~kulawlib/ksanimal.html>).

.over.sunflower: The "Sunflower" Release.  The Sunflower is the official flower 
of the state of Kansas 
(<URL:http://lark.cc.ukans.edu/~kulawlib/sunflower.html>).


Schedule

.sched.buffalo: Buffalo will be released ???.
.sched.sunflower: Sunflower will be released ??? [some time later].


.release.buffalo:  The Buffalo Release [Should be version -- GavinM 1997-04-09]

The buffalo release mumble mumble.  It's quite big I think and may get split up 
into 2 or more releases.

 - when
 - what requirements
 - how (what components)
 - risks and contingencies


Bar release


Baz release


WORK SCHEDULE


Task List

.task.test-suite: Liase with Dylan Group to find out status of the test-suite.
  Release: Buffalo
  Requirements: req.dylan.anti.test-suite
  Effort: negligible.

.task.arena.extensible.design: Design changes to arena to support allocation of 
very large objects.
  Release: Buffalo
  Requirements: req.dylan.attr.obj.max
  Effort: 1 man-days

.task.arena.extensible.implement: Implement design implied by 
.task.arena.extensible.design.
  Release: Buffalo
  Requirements: req.dylan.attr.obj.max
  Effort: 3 man-days

.task.thread: Document protocols needed in order to support multiple threads 
(thread registration sequence etc).
  Release: Buffalo
  Requirements: req.dylan.env.thread
  Effort: 3 man-days

.task.rmo.barrier.investigate:  Relaxed Memory Order (RMO) architectures (such 
as the DEC Alpha [and the Sparc UltraSparc?]) require barrier instructions to 
guarantee ordering of memory operations on multi-processor machines.  
Investigate what requirements this imposes on the MPS.  (see also req.epcore
.dc.plat.* and req.epcore.dc.plat.multproc.*).
  Release: Sunflower
  Requirements: req.dylan.env.multi
  Effort: 2 man-days??

.task.rmo.barrier.design: Design an abstract interface to "memory barriers" 
drawing on requirements defined by .task.rmo.barrier.investigate.
  Release: Sunflower
  Requirements: req.dylan.env.multi
  Effort: 1 man-day??

.task.rmo.barrier.implement: Implement the design in .task.rmo.barrier.design 
for the DEC Alpha platform at least and (presumably trivially) for the Intel 
platform.
  Release: Sunflower
  Requirements: req.dylan.env.multi
  Effort: 2 man-days??

.task.debug.liase: Arrange a meeting with appropriate members of Dylan Group to 
sort out exact requirements for supporting the debug protocols.  Expect this to 
be with at least tony, phoward, and drj.
  Release: Buffalo
  Requirements: req.dylan.prot.debug
  Effort: 0.5 days elapsed

.task.debug.design: Design support for the protocols as per the meeting implied 
by .task.debug.liase.
  Release: Buffalo
  Requirements: req.dylan.prot.debug
  Effort: 2 man-days?

.task.debug.design.review: Review design for support of debug protocols with 
appropriate members of the Dylan Group.
  Release: Buffalo
  Requirements: req.dylan.prot.debug
  Effort: 0.5 days elapsed

.task.debug.implement: Implement design for support of debug protocols.
  Release: Buffalo
  Requirements: req.dylan.prot.debug
  Effort: 2 man-days??

.task.ffi.liase: Liase with Dylan Group to determine exact requirements for 
supporting DW FFI protocol.  This may not need a meeting.
  Release: Buffalo
  Requirements: req.dylan.prot.ffi
  Effort: negligible

.task.ffi.document: Document the mechanism with which we intend to support the 
DW FFI (ambiguous roots, PoolClass LO etc).
  Release: Buffalo
  Requirements: req.dylan.prot.ffi
  Effort: 4 man-days

.task.format.proposals: Write up and reach consensus on all current proposals 
to change the dylan format (version field, size-bias for NUL terminated 
strings, element size multiplier).
  Release:
  Requirements: unknown (see mail.tony.1996-11-08.16-31)
  Effort: 1 man-day, 5 days elapsed.

.task.rehash: Document the mechanism with which we intend to support the DW 
rehashing mechanism (Location Dependencies).  In particularly document clearly 
what should happen on an initial hash-miss.
  Release: Buffalo
  Requirements: req.dylan.prot.rehash
  Effort: 3 man-days

.task.link.debug: Investigate to what extent we usefully meet 
req.dylan.dc.var.dp, in particular in do we supply compiler debug info in a 
form that the Dylan Group are able to use in whatever debugger they use?
  Release: Buffalo
  Requirements: req.dylan.dc.var.dp
  Effort: .5 man-days

.task.stack-overflow.investigate: Investigate to what extent we can do 
something sensible when the stack overflows for all platforms that we currently 
target (but in particular Win32).
  Release: Buffalo
  Requirements: req.dylan.prot.stack-overflow
  Effort: 2 man-days

.task.stack-overflow.design: Design a mecahnism that allows the MPS to detect a 
stack-overflow event and process it "gracefully".  It should be possible at 
least to give an indication of stack-overflow to the client in almost all 
circumstances.
  Release: Buffalo
  Requirements: req.dylan.prot.stack-overflow
  Effort: 2 man-days

.task.stack-overflow.implement: Implement the stack-overflow mechanism.  This 
should do something useful on at least Win32 platforms (and preferably all).
  Release: Buffalo
  Requirements: req.dylan.prot.stack-overflow
  Effort: 2 man-days

.task.weak.doc: Document the mechanisms with which we intend to support 
weakness.
  Release:
  Requirements: req.dylan.fun.weak.tables, req.dylan.fun.weak.index
  Effort: 


Calendar

The meatiest tasks should get done first.  I suggest starting on .task.debug.* 
immediately and filling in the gaps with .task.rmo.barrier.*, .task.thread, 
.task.rehash.

.calendar:

The following tabulates "week ending" against the tasks ("complete" without a 
corresponding "begin" implies task to be started and finished that week).

.calendar.1996-09-13: none
.calendar.1996-09-20: complete .task.debug.liase, complete .task.debug.design, 
complete .task.test-suite, begin .task.review, begin 
.task.rmo.barrier.investigate, begin .task.thread.

Calendar above obsoleted

Calendar below created 1996-10-02

.calendar.1996-09-27: start .task.debug.*
.calendar.1996-10-04: complete .task.debug.*, start .task.ffi.*
.calendar.1996-10-11: complete .task.ffi.*, complete .task.rehash
.calendar.1996-10-18: complete .task.arena.extensible.*, start .task.rmo.*
.calendar.1996-10-25: complete .task.rmo.*, start .task.stack-overflow.*
.calendar.1996-11-01: complete .task.stack-overflow.*


