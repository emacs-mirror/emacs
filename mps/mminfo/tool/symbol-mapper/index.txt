                DOCUMENTATION FOR THE SYMBOL-MAPPER TOOL
                           tool.symbol-mapper
                             incomplete doc
                            tony 1999-06-16

PURPOSE

.purpose: The purpose of the symbol-mapper tool is provide symbolic information 
for addresses observed during training runs for lifetime tracking purposes. 
This symbolic information is more appropriate for encoding into decision 
trees.  See mail.tony.1999-04-21.17-07(0) and related discussion.


IMPLEMENTATION

.impl: symbol-mapper uses debugger-like techniques for mapping from addresses 
to dll+symbol+offset form. It starts the application which was provided the 
training data, so that it can perform this mapping.  .impl.dylan: symbol-mapper 
is implemented in Dylan, and makes use of the Harlequin Dylan debugger 
substrate library "access-path".


LOCATION

.loc: The sources for symbol-mapper are in the HOPE compound MMtools_symmap. 
This compound is a subcompound of MMtools.


BUILD

.build: Build the symbol-mapper tool via the following steps:
Install Harlequin Dylan. The installation must include databases for the 
access-path library, which currently means that an "internal" release of 
Harlequin Dylan must be used.
Check out compound MMtools_symmap.
Use Harlequin Dylan to open the file symbol-mapper.lid checked out in step 2. 
[Use the File/Open menu command from the podium window. Select files of type 
"Dylan Library Interchange Descriptions"]. This creates a Harlequin Dylan 
project called "symbol-mapper".
From the symbol-mapper project window, use the Project/Build Release menu 
command to compile and link the tool. The executable and all necesary DLLs will 
be installed in the "release" subdirectory of the source directory.


USAGE

.usage: Start symbol-mapper by giving it the name of the application you want 
it to map symbols for, as a command line argument. The tool will actually start 
the application, so your PATH (and possibly other environment variables) must 
be appropriately set such that all DLLs needed by the exe file can be found. 
You can supply the application name as either a full or relative pathname. For 
example:

    dos-prompt>  \release\symbol-mapper.exe dylan-compile.exe

The tool will read in hex addresses from standard input, and attempt to map 
them to symbols. The addresses should be supplied one per line. It will carry 
on reading addresses until it encounters an EOF or a line consisting of "quit".

If an address can't be mapped, you'll get a comment written to standard output 
as follows:-

  # Unable to find a symbol for 43

If the address can be mapped, you'll get a 5 word mapping written to standard 
output as follows:

  66F5FB14 HQN-DYLAN BFB14 KLpairGYdylanVdylanW 8

The fields correspond to 
  address, library, library-offset, symbol, symbol-offset

address is the absolute address as reported in the training run.

library is the name of the library (DLL or EXE) which maps the address.

library-offset is the address relative to the start of the library.

symbol is the name of the nearest preceeding symbol in the library.

symbol-offset gives the address relative to that symbol.



PROBLEMS

.problems: If you have any problems, the person to contact is person.tony(0)



