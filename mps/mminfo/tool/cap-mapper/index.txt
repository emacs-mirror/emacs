                 DOCUMENTATION FOR THE CAP-MAPPER TOOL
               (FOR CORRECTING CAP PROFILE RESULT FILES)
                            tool.cap-mapper
                             incomplete doc
                            tony 1999-06-16

PURPOSE

.purpose: The purpose of the cap-mapper tool is to improve the results of the 
Microsoft Call Attributed Profiler by post-processing CAP output files. 
Original CAP files don't provide symbolic information for static functions, and 
a nearby external symbol name is used for the function instead. cap-mapper 
rewrites the CAP output file, deriving the static names in the process. The 
makes the CAP output much more useful.


IMPLEMENTATION

.impl: cap-mapper uses debugger-like techniques for mapping from addresses to 
symbol+offset form (and vice versa). It starts the application which was 
originally profiled as a debuggee, so that it can perform this mapping. It has 
access to the addresses of static symbols, provided that they are present in 
the DLL or EXE (which will normally be the case provided that COFF-style 
debugging information was included at link time). The application is only 
permitted to run up to the point when all DLLs have been mapped. .impl.dylan: 
cap-mapper is implemented in Dylan, and makes use of the Harlequin Dylan 
debugger substrate library "access-path".


LOCATION

.loc: The sources for cap-mapper are in the HOPE compound MMtools_capmap. This 
compound is a subcompound of MMtools.


BUILD

.build: Build the cap-mapper tool via the following steps:
Install Harlequin Dylan. The installation must include databases for the 
access-path library, which currently means that an "internal" release of 
Harlequin Dylan must be used.
Check out compound MMtools_capmap.
Use Harlequin Dylan to open the file cap-mapper.lid checked out in step 2. [Use 
the File/Open menu command from the podium window. Select files of type "Dylan 
Library Interchange Descriptions"]. This creates a Harlequin Dylan project 
called "cap-mapper".
From the cap-mapper project window, use the Project/Build Release menu command 
to compile and link the tool. The executable and all necesary DLLs will be 
installed in the "release" subdirectory of the source directory.


USAGE

.usage: Use the tool as follows:

cap-mapper.exe cap-file app-name

where
   cap-file is the filename of the CAP output (e.g. foo.end)
   app-name is the name of the exe file which generated the output

The PATH environment must be such that all DLLs needed by the exe file can be 
found.

The tool generates a new CAP file which is named by appending ".scap" to
cap-file. This file must not already exist.


PROBLEMS

.problems: If you have any problems, the person to contact is person.tony(0)


