
.. index::
   pair: fix function; design

.. _design-fix:


The generic fix function
========================

.. mps:prefix:: design.mps.fix


Introduction
-------------

:mps:tag:`intro` Fix is the interface through which the existence of
references are communicated from the MPS client to the MPS. The
interface also allows the value of such references to be changed (this
is necessary in order to implement a moving memory manager).


Architecture
-------------

:mps:tag:`protocol.was-marked` The :c:type:`ScanState` has a :c:type:`Bool`
``wasMarked`` field. This is used for finalization.

:mps:tag:`protocol.was-marked.set` All pool-specific fix methods must set
the ``wasMarked`` field in the :c:type:`ScanState` that they are passed.

:mps:tag:`protocol.was-marked.meaning` If the pool-specific fix method sets
the ``wasMarked`` field to :c:macro:`FALSE` it is indicating the object
referred to by the ref (the one that it is supposed to be fixing) has
not previously been marked (ie, this is the first reference to this
object that has been fixed), and that the object was white (in
condemned space).

:mps:tag:`protocol.was-marked.conservative` It is always okay to set the
``wasMarked`` field to :c:macro:`TRUE`.

:mps:tag:`protocol.was-marked.finalizable` The MRG pool (design.mps.poolmrg)
uses the value of the ``wasMarked`` field to determine whether an
object is finalizable.


Implementation
---------------

:mps:tag:`fix.nailed` In a copying collection, a non-ambiguous fix to a
broken heart should be snapped out *even if* there is a ``RankAMBIG``
ref to same object (that is, if the broken heart is nailed); the
``RankAMBIG`` reference must either be stale (no longer in existence)
or bogus.


