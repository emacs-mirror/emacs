.. _design-boot:


The MPS Bootstrap
=================

.. mps:prefix:: design.mps.boot


Introduction
------------
The `Memory Pool System`_ starts with no memory, but must somehow
allocate its own control structures in order to provide memory to the
client program.  The MPS is freestanding [ref?] and so it can't get its
memory from the C library's ``malloc``.  So how does it get off the
ground? It pulls itself up by its own bootstraps.  This document
describes how.

.. note::

    This document was written as a prelude to reforming the bootstrap,
    so it shouldn't be taken as advocating it as an amazing piece of
    design.


Pretty much the first call to the MPS is to ``ArenaCreate``, which calls the
arena class specific ``init`` method.  That must create an initialized arena,
except for the "control pool", from which many MPS data structures will be
allocated.

In the case of the VM arena, ``VMArenaInit`` creates a VM large enough to hold
a :c:type:`VMArenaStruct` (which contains the generic :c:type:`ArenaStruct`) and maps
pages into it.  It then calls ``ArenaInit`` to initialise the generic part,
before filling in the VM-specific part.  Having done that, it adds the initial
``VMChunk`` -- a large area of address space -- that will be used to supply
memory via ``ArenaAlloc``.

