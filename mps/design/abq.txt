.. mode:: -*- rst -*-

Queue
=====

:Tag: design.mps.abq
:Author: Gareth Rees
:Date: 2013-05-20
:Status: complete design
:Revision: $Id$
:Copyright: See section `C. Copyright and License`_.


Introduction
------------

_`.intro`: This is the design of the ABQ module, which implements a
fixed-length queue of small objects.

_`readership`: This document is intended for any MM developer.

_`name`: The name ABQ originally stood for "Available Block Queue" as
the module is used by the MVT pool.


Requirements
------------

_`.req.push` Clients can efficiently push new elements onto the queue.

_`.req.pop` Clients can efficiently pop elements from the queue.

_`.req.empty` Clients can efficiently test whether the queue is empty.

_`.req.abstract` The ABQ module does not know anything about the
elements in the queue other than their size.

_`.req.delete` Clients can delete elements from the queue. (Note: not necessarily efficiently.)

_`.req.iterate` Clients can iterate over elements in the queue.


Interface
---------

.. c:type:: ABQ

``ABQ`` is the type of a queue. It is an alias for ``ABQStruct *``.
``ABQStruct`` is defined in the header so that it can be inlined in
client structures: clients must not depend on its implementation
details.

.. c:function:: ABQInit(Arena arena, ABQ abq, void *owner, Count elements, Size elementSize)

Initialize the queue ``abq``. The parameter ``arena`` is the arena
whose control pool should be used to allocate the memory for the
queue; ``owner`` is passed to :c:func:`MeterInit` for the statistics; ``elements`` is the maximum number of elements that can be stored in the queue; and ``elementSize`` is the size of each element.

.. c:function:: void ABQFinish(Arena arena, ABQ abq)

Finish ``abq`` and free all resources associated with it.

.. c:function:: Res ABQPush(ABQ abq, Addr element)

If the queue is not full, push ``element`` on to the queue and return
``ResOK``. If the queue is full, leave it unchanged and return
``ResFAIL``.

.. c:function:: Res ABQPop(ABQ abq, Addr elementReturn)

If the queue is not empty, copy the first element on the queue into
the memory pointed to by ``elementReturn``, remove the element from
the queue, and return ``ResOK``. If the queue is empty, return
``ResFAIL``.

.. c:function:: Res ABQPeek(ABQ abq, Addr elementReturn)

If the queue is not empty, copy the first element on the queue into
the memory pointed to by ``elementReturn`` and return ``ResOK``. If
the queue is empty, return ``ResFAIL``. (This is the same as
:c:func:`ABQPop` except that the queue is unchanged.)

.. c:function:: Res ABQDelete(ABQ abq, Addr element)

If any elements in the queue compare equal to the element pointed to
by ``element``, delete them from the queue and return ``ResOK``.
Otherwise, return ``ResFAIL``.

.. c:function:: Bool ABQIsEmpty(ABQ abq)

If the queue is empty, return ``TRUE``, otherwise return ``FALSE``.

.. c:function:: Bool ABQIsFull(ABQ abq)

If the queue is full, return ``TRUE``, otherwise return ``FALSE``.

.. c:function:: Count ABQDepth(ABQ abq)

Return the number of elements in the queue.

.. c:type:: Res (*ABQDescribeElement)(Addr element, mps_lib_FILE *stream)

A function that can describe an element that has been pushed onto a queue.

.. c:type:: typedef unsigned ABQDisposition

An enumerated value returned by a function of
:c:type:`ABQIterateMethod` describing what should happen to an element
of a queue during the iteration. The value ``ABQDispositionKEEP``
means that the element must be kept in the queue;
``ABQDispositionDELETE`` means that the element must be deleted from
the queue.

.. c:type:: Res (*ABQIterateMethod)(ABQDisposition *dispositionReturn, Addr element, void *closureP)

A callback function for :c:func:`ABQIterate`. The parameter
``element`` is an element in the queue, and ``closureP`` is the value
that was originally passed to ``ABQIterate``. This function must set
``*dispositionReturn`` to ``ABQDispositionKEEP`` if ``element`` must
be kept in the queue, or ``ABQDispositionDELETE`` if ``element`` must
be deleted from the queue. If it returns ``ResOK`` then iteration will
continue. If it returns any other result code, iteration will stop.

.. c:function:: void ABQIterate(ABQ abq, ABQIterateMethod iterate, void *closureP)

Call ``iterate`` for each elements in the queue, passing the element
and ``closureP``. See :c:type:`ABQIterateMethod` for details.


B. Document history
-------------------

- 2013-05-20 GDR_ Created.

.. _GDR: http://www.ravenbrook.com/consultants/gdr/


C. Copyright and License
------------------------

Copyright (C) 2013 Ravenbrook Limited. All rights reserved. 
<http://www.ravenbrook.com/>. This is an open source license. Contact
Ravenbrook for commercial licensing options.

Redistribution and use in source and binary forms, with or without
modification, are permitted provided that the following conditions are
met:

1. Redistributions of source code must retain the above copyright
   notice, this list of conditions and the following disclaimer.

2. Redistributions in binary form must reproduce the above copyright
   notice, this list of conditions and the following disclaimer in the
   documentation and/or other materials provided with the distribution.

3. Redistributions in any form must be accompanied by information on how
   to obtain complete source code for this software and any
   accompanying software that uses this software.  The source code must
   either be included in the distribution or be available for no more than
   the cost of distribution plus a nominal fee, and must be freely
   redistributable under reasonable conditions.  For an executable file,
   complete source code means the source code for all modules it contains.
   It does not include source code for modules or files that typically
   accompany the major components of the operating system on which the
   executable file runs.

**This software is provided by the copyright holders and contributors
"as is" and any express or implied warranties, including, but not
limited to, the implied warranties of merchantability, fitness for a
particular purpose, or non-infringement, are disclaimed.  In no event
shall the copyright holders and contributors be liable for any direct,
indirect, incidental, special, exemplary, or consequential damages
(including, but not limited to, procurement of substitute goods or
services; loss of use, data, or profits; or business interruption)
however caused and on any theory of liability, whether in contract,
strict liability, or tort (including negligence or otherwise) arising in
any way out of the use of this software, even if advised of the
possibility of such damage.**
