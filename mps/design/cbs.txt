.. mode: -*- rst -*-

Coalescing block structure
==========================

:Tag: design.mps.cbs
:Author: Gavin Matthews
:Date: 1998-05-01
:Status: complete design
:Revision: $Id$
:Copyright: See section `Copyright and License`_.


Introduction
------------

_`.intro`: This is the design for impl.c.cbs, which implements a data
structure for the management of non-intersecting memory ranges, with
eager coalescence.

_`.readership`: This document is intended for any MM developer.

_`.source`: design.mps.poolmvt_, design.mps.poolmvff_.

.. _design.mps.poolmvt: poolmvt
.. _design.mps.poolmvff: poolmvff

_`.overview`: The "coalescing block structure" is a set of addresses
(or a subset of address space), with provision for efficient
management of contiguous ranges, including insertion and deletion,
high level communication with the client about the size of contiguous
ranges, and detection of protocol violations.


Requirements
------------

In addition to the generic land requirements (see
design.mps.land_), the CBS must satisfy:

.. _design.mps.land: land

_`.req.fast`: Common operations must have a low amortized cost.

_`.req.small`: Must have a small space overhead for the storage of
typical subsets of address space and not have abysmal overhead for the
storage of any subset of address space.


Interface
---------

_`.land`: CBS is an implementation of the *land* abstract data type,
so the interface consists of the generic functions for lands. See
design.mps.land_.


External types
..............

``typedef struct CBSStruct *CBS``

_`.type.cbs`: The type of coalescing block structures. A ``CBSStruct``
may be embedded in another structure, or you can create it using
``LandCreate()``.


External functions
..................

``LandClass CBSLandClassGet(void)``

_`.function.class`: The function ``CBSLandClassGet()`` returns the CBS
class, a subclass of ``LandClass`` suitable for passing to
``LandCreate()`` or ``LandInit()``.


Keyword arguments
.................

When initializing a CBS, ``LandCreate()`` and ``LandInit()`` take the
following optional keyword arguments:

* ``CBSBlockPool`` (type ``Pool``) is the pool from which the CBS
  block descriptors will be allocated. If omitted, a new MFS pool is
  created for this purpose.

* ``MPS_KEY_CBS_EXTEND_BY`` (type ``Size``; default 4096) is passed as
  the ``MPS_KEY_EXTEND_BY`` keyword argument to ``PoolCreate()`` if a
  block descriptor pool is created. It specifies the size of segment
  that the block descriptor pool will request from the arena.

* ``MFSExtendSelf`` (type ``Bool``; default ``TRUE``) is passed to
  ``PoolCreate()`` if a block descriptor pool is created. If ``TRUE``,
  the block descriptor pool automatically extends itself when out of
  space; if ``FALSE``, the pool returns ``ResLIMIT`` in this case.
  (This feature is used by the arena to bootstrap its own CBS of free
  memory.)

* ``CBSFastFind`` (type ``Bool``; default ``FALSE``). If ``TRUE``,
  causes the CBS to maintain, for each subtree, the size of the
  largest block in that subtree. This enables the ``LandFindFirst()``,
  ``LandFindLast()``, and ``LandFindLargest()`` generic functions.

* ``CBSZoned`` (type ``Bool``; default ``FALSE``). If ``TRUE``, caused
  the CBS to maintain, for each subtree, the union of the zone sets of
  all ranges in that subtree. This enables the ``LandFindInZones()``
  generic function.


Limitations
...........

_`.limit.find`: CBS does not support the ``LandFindFirst()``,
``LandFindLast()``, and ``LandFindLargest()`` generic functions unless
the ``CBSFastFind`` keyword argument was set to ``TRUE``.

_`.limit.zones`: CBS does not support the ``LandFindInZones()``
generic function unless the ``CBSFastFind`` and ``CBSZoned`` keyword
arguments were both set to ``TRUE``.

_`.limit.iterate`: CBS does not support visitors setting
``deleteReturn`` to ``TRUE`` when iterating over ranges with
``LandIterate()``.

_`.limit.flush`: CBS cannot be used as the source in a call to
``LandFlush()``. (Because of `.limit.iterate`_.)


Implementation
--------------

Splay tree
..........

_`.impl.splay`: The CBS is implemented using a splay tree (see
design.mps.splay_). Each splay tree node is embedded in a ``CBSBlock``
that represents a semi-open address range. The key passed for
comparison is the base of another range.

.. _design.mps.splay: splay

_`.impl.splay.fast-find`: ``cbsFindFirst()`` and ``cbsFindLast()`` use
the update/refresh facility of splay trees to store, in each
``CBSBlock``, an accurate summary of the maximum block size in the
tree rooted at the corresponding splay node. This allows rapid
location of the first or last suitable block, and very rapid failure
if there is no suitable block.

_`.impl.find-largest`: ``cbsFindLargest()`` simply finds out the size
of the largest block in the CBS from the root of the tree, using
``SplayRoot()``, and does ``SplayFindFirst()`` for a block of that
size. This takes time proportional to the logarithm of the size of the
free list, so it's about the best you can do without maintaining a
separate priority queue, just to do ``cbsFindLargest()``.

_`.impl.splay.zones`: ``cbsFindInZones()`` uses the update/refresh
facility of splay trees to store, in each ``CBSBlock()``, the union of
the zones of the ranges in the tree rooted at the corresponding splay
node. This allows rapid location of a block in a set of zones.


Low memory behaviour
....................

_`.impl.low-mem`: When the CBS tries to allocate a new ``CBSBlock``
structure for a new isolated range as a result of either
``LandInsert()`` or ``LandDelete()``, and there is insufficient memory
to allocation the ``CBSBlock`` structure, then the range is not added
to the CBS or deleted from it, and the call to ``LandInsert()`` or
``LandDelete()`` returns ``ResMEMORY``.


The CBS block
.............

_`.impl.cbs.block`: The block contains a base-limit pair and a splay
tree node.

_`.impl.cbs.block.special`: The base and limit may be equal if the
block is halfway through being deleted.

_`.impl.cbs.block.special.just`: This conflates values and status, but
is justified because block size is very important.


Testing
-------

_`.test`: The following testing will be performed on this module:

_`.test.land`: A generic test for land implementations. See
design.mps.land.test.

_`.test.pool`: The arena and two pools (MVT_ and MVFF_) are
implemented on top of a CBS. These are subject to testing in
development, QA, and are heavily exercised by customers.

.. _MVT: poolmvt
.. _MVFF: poolmvff


Notes for future development
----------------------------

_`.future.not-splay`: The implementation of CBSs is based on splay
trees. It could be revised to use other data structures that meet the
requirements (especially `.req.fast`_).

_`.future.hybrid`: It would be possible to attenuate the problem of
`.risk.overhead`_ (below) by using a single word bit set to represent
the membership in a (possibly aligned) word-width of grains. This
might be used for block sizes less than a word-width of grains,
converting them when they reach all free in the bit set. Note that
this would make coalescence slightly less eager, by up to
``(word-width - 1)``.


Risks
-----

_`.risk.overhead`: Clients should note that the current implementation
of CBSs has a space overhead proportional to the number of isolated
contiguous ranges. [Four words per range.] If the CBS contains every
other grain in an area, then the overhead will be large compared to
the size of that area. [Four words per two grains.] The CBS structure
is thus suitable only for managing large enough ranges.



Document History
----------------

- 1998-05-01 Gavin Matthews. This document was derived from the
  outline in design.mps.poolmv2(2).

- 1998-07-22 Gavin Matthews. Updated in response to approval comments
  in change.epcore.anchovy.160040. There is too much fragmentation in
  trapping memory.

- Gavin Matthews. Updated (as part of change.epcore.brisling.160158:
  MVFF cannot be instantiated with 4-byte alignment) to document new
  alignment restrictions.

- 2002-06-07 RB_ Converted from MMInfo database design document.

- 2013-04-14 GDR_ Converted to reStructuredText.

- 2013-05-19 GDR_ Removed the "emergency" free list allocator, the
  design notes on an unimplemented "future hybrid" scheme, the
  callbacks, block interface, and minimum size interface. Updated the
  arguments for ``CBSIterateMethod``, ``CBSInit()``, ``CBSInsert()``,
  and ``CBSDelete()``.

- 2013-05-23 RB_ Removed references to "contingency methods" that were
  talking about the deleted "emergency" free list allocator.
  Documented ``fastFind`` argument to ``CBSInit()``.

- 2014-04-01 GDR_ Moved generic material to design.mps.land_.
  Documented new keyword arguments.

.. _RB: http://www.ravenbrook.com/consultants/rb/
.. _GDR: http://www.ravenbrook.com/consultants/gdr/


Copyright and License
---------------------

Copyright Â© 1998-2014 Ravenbrook Limited. All rights reserved. 
<http://www.ravenbrook.com/>. This is an open source license. Contact
Ravenbrook for commercial licensing options.

Redistribution and use in source and binary forms, with or without
modification, are permitted provided that the following conditions are
met:

#. Redistributions of source code must retain the above copyright
   notice, this list of conditions and the following disclaimer.

#. Redistributions in binary form must reproduce the above copyright
   notice, this list of conditions and the following disclaimer in the
   documentation and/or other materials provided with the distribution.

#. Redistributions in any form must be accompanied by information on how
   to obtain complete source code for this software and any
   accompanying software that uses this software.  The source code must
   either be included in the distribution or be available for no more than
   the cost of distribution plus a nominal fee, and must be freely
   redistributable under reasonable conditions.  For an executable file,
   complete source code means the source code for all modules it contains.
   It does not include source code for modules or files that typically
   accompany the major components of the operating system on which the
   executable file runs.

**This software is provided by the copyright holders and contributors
"as is" and any express or implied warranties, including, but not
limited to, the implied warranties of merchantability, fitness for a
particular purpose, or non-infringement, are disclaimed.  In no event
shall the copyright holders and contributors be liable for any direct,
indirect, incidental, special, exemplary, or consequential damages
(including, but not limited to, procurement of substitute goods or
services; loss of use, data, or profits; or business interruption)
however caused and on any theory of liability, whether in contract,
strict liability, or tort (including negligence or otherwise) arising in
any way out of the use of this software, even if advised of the
possibility of such damage.**
