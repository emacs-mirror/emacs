.. mode: -*- rst -*-

Thread safety in the MPS
========================

:Tag: design.mps.thread-safety
:Author: David Moore
:Date: 1995-10-03
:Status: complete design
:Revision: $Id$
:Copyright: See `Copyright and License`_.
:Index terms:    pair: thread safety; design


Introduction
------------

_`.intro`: This describes how thread safety is achieved in the MPS.

_`.overview`: The MPS is expected to run in an environment with
multiple threads calling into the MPS. The initial approach is very
simple. Some of the code is known to operate with exclusive access to
the data it manipulates, so this code is safe. For the rest of the
code, shared data structures are locked by the use of a single binary
lock (design.mps.lock_) per arena. This lock is claimed on entry to
the MPS and released on exit from it. So there is at most a single
thread (per arena) running "inside" the MPS at a time.

.. _design.mps.lock: lock


Requirements
------------

_`.req.threads`: Code must work correctly in presence of multiple
threads all calling into the MPS.

_`.req.arena`: The MPS must safely manage per-arena non-shared data.

_`.req.global.mutable`: The MPS must safely manage global data that
may be updated many times (that is, the arena ring).

_`.req.global.once`: The MPS must safely manage global data that is
updated at most once (that is, the protocol classes).

_`.req.deadlock`: The MPS must not deadlock.

_`.req.perf`: Performance should not be unreasonably hindered.


Analysis
--------

_`.anal.simple`: To have the code functioning correctly it should be
easy to change correctly. So a simple approach is desirable. We have
to also ensure that performance is not unreasonably downgraded.


Performance cost of locking
...........................

_`.lock-cost`: The cost of locking in performance terms are:

- _`.lock-cost.overhead`: the overhead of claiming and releasing locks;

- _`.lock-cost.pause`: the pauses caused by one thread being blocked
  on another thread.

- _`.lock-cost.wait`: the time wasted by one thread being blocked on
  another thread.

_`.anal.perf.signif`: `.lock-cost.pause`_ is significant if there are
MPS functions that take a long time. Using more locks, e.g. having a
lock per pool as well as a lock per arena, is a way of decreasing the
locking conflict between threads (.lock-cost.pause and
`.lock-cost.wait`_). However this could increase
`.lock-cost.overhead`_ significantly.

_`.anal.perf.work`: But all MPS functions imply a small work-load
unless a collection is taking place. In the case of a collection, in
practice and certainly in the near future, all threads will most
likely be suspended while the collection work is going on. (The pages
being scanned will need to be unprotected which implies the mutator
will have to be stopped.) We also have to remember that unless we are
running on genuine multiprocessor `.lock-cost.wait`_ is irrelevant.

_`.anal.perf.alloc`: During typical use we expect that it is
allocation that is the most frequent activity. Allocation buffers
(design.mps.buffer_) are designed to allow allocation in concurrent
threads without needing a lock. So the most significant time a thread
spends in the MPS will be on a buffer-fill or during a collection. The
next most significant use is likely to be buffer create and deletion,
as a separate buffer will be required for each thread.

.. _design.mps.buffer: buffer

_`.anal.perf.lock`: So overall the performance cost of locking is, I
estimate, most significantly the overhead of calling the locking
functions. Hence it would be undesirable from a performance point of
view to have more than one lock.


Recursive vs binary locks
.........................

_`.anal.reentrance`: The simplest way to lock the code safely is to
define which code runs inside or outside the lock. Calling from the
outside to the inside implies a lock has to be claimed. Returning
means the lock has to be released. Control flow from outside to
outside and from inside to inside needs no locking action. To
implement this a function defined on the external interface needs to
claim the lock on entry and release it on exit. Our code currently
uses some external functions with the lock already held. There are two
ways to implement this:

#. _`.recursive`: Each external function claims a recursive lock.

   - simple;
   - have to worry about locking depth;
   - extra locking overhead on internal calls of external functions;

#. _`.binary`: Each external function claims a binary lock. Replace
   each internal call of an external function with a call to a newly
   defined internal one.

   - more code
   - slightly easier to reason about

_`.anal.strategy`: It seems that the `.recursive`_ strategy is the
easiest to implement first, but could be evolved into a `.binary`_
strategy. (That evolution has now happened. tony 1999-08-31).


Design
------

_`.sol.locks`: Use MPS locks (design.mps.lock_) to implement the
locking.

.. _design.mps.lock: lock

_`.sol.arena`: Each arena has a binary lock that protects the
non-shared data for that arena. Functions in the public interface fall
into the following categories:

- _`.sol.arena.entry`: Must be called with the arena lock not held
  (thus, these functions are not callable from format methods and
  other callbacks). Claims arena binary lock on entry, releases it on
  exit. The usual case. For example, ``mps_arena_park()``.

- _`.sol.arena.recursive`: May be called with the arena lock held (for
  example, from format methods and other callbacks). Claim arena lock
  recursively on entry, release it on exit. For example,
  ``mps_addr_fmt()``.

- _`.sol.arena.lock-free`: May be called at any time and does not
  claim or release any locks, because it is documented as being up to
  the client program to ensure thread safety (for example,
  ``mps_ld_add()``).

- _`.sol.arena.maybe-entry`: Must be called with the arena lock not
  held. In the common case, does not claim or release any locks
  (because it is documented as being up to the client program to
  ensure thread safety, as for `.sol.arena.lock-free`_), but may need
  to claim and release the arena binary lock (as for
  `.sol.arena.entry`_). For example, ``mps_reserve()``,
  ``mps_commit()``, ``mps_ap_frame_push()``, and
  ``mps_ap_frame_pop()``.

_`.sol.global.mutable`: There is a global binary lock (see
design.mps.lock.req.global.binary_) that protects mutable data shared
between all arenas (that is, the arena ring lock: see
design.mps.arena.static.ring.lock_).

.. _design.mps.lock.req.global.binary: lock#req.global.binary
.. _design.mps.arena.static.ring.lock: arena#static.ring.lock

_`.sol.global.once`: There is a global recursive lock (see
design.mps.lock.req.global.recursive_) that protects static data which
must be initialized at most once (that is, the protocol classes). Each
static data structure is accessed only via an "ensure" function that
claims the global recursive lock, checks to see if the data structure
has been initialized yet, and does so if necessary (see
design.mps.protocol.impl.define-class.lock_).

.. _design.mps.lock.req.global.recursive: lock#req.global.recursive
.. _design.mps.protocol.impl.define-class.lock: protocol#impl.define-class.lock

_`.sol.deadlock`: A strict ordering is required between the global and
arena locks to prevent deadlock. The binary global lock may not be
claimed while either the arena or recursive global lock is held; the
arena lock may not be claimed while the recursive global lock is held.
Each arena lock is independent of all other arena locks; that is, a
thread may not attempt to claim more than one arena lock at a time.
See design.mps.arena.lock.avoid_.

.. _design.mps.arena.lock.avoid: arena#lock.avoid

_`.sol.check`: The MPS interface design requires that a function must
check the signatures on the data structures pointed to by its
parameters (see design.mps.sig.check.arg_). In particular, for
functions in the class `.sol.arena.entry`_ it is necessary to check
some data structure signatures before taking the arena lock. The
checking interface provides a ``TESTT()`` macro that checks the
signature in a thread-safe way (see
design.mps.sig.check.arg.unlocked_).

.. _design.mps.sig.check.arg: sig#check.arg
.. _design.mps.sig.check.arg.unlocked: sig#check.arg.unlocked


Document History
----------------

- 1995-10-03 David Moore. Incomplete design.

- 2002-06-21 RB_ Converted from MMInfo database design document.

- 2013-05-22 GDR_ Converted to reStructuredText.

.. _RB: http://www.ravenbrook.com/consultants/rb/
.. _GDR: http://www.ravenbrook.com/consultants/gdr/


Copyright and License
---------------------

Copyright Â© 2013-2016 Ravenbrook Limited <http://www.ravenbrook.com/>.
All rights reserved. This is an open source license. Contact
Ravenbrook for commercial licensing options.

Redistribution and use in source and binary forms, with or without
modification, are permitted provided that the following conditions are
met:

#. Redistributions of source code must retain the above copyright
   notice, this list of conditions and the following disclaimer.

#. Redistributions in binary form must reproduce the above copyright
   notice, this list of conditions and the following disclaimer in the
   documentation and/or other materials provided with the distribution.

#. Redistributions in any form must be accompanied by information on how
   to obtain complete source code for this software and any
   accompanying software that uses this software.  The source code must
   either be included in the distribution or be available for no more than
   the cost of distribution plus a nominal fee, and must be freely
   redistributable under reasonable conditions.  For an executable file,
   complete source code means the source code for all modules it contains.
   It does not include source code for modules or files that typically
   accompany the major components of the operating system on which the
   executable file runs.

**This software is provided by the copyright holders and contributors
"as is" and any express or implied warranties, including, but not
limited to, the implied warranties of merchantability, fitness for a
particular purpose, or non-infringement, are disclaimed.  In no event
shall the copyright holders and contributors be liable for any direct,
indirect, incidental, special, exemplary, or consequential damages
(including, but not limited to, procurement of substitute goods or
services; loss of use, data, or profits; or business interruption)
however caused and on any theory of liability, whether in contract,
strict liability, or tort (including negligence or otherwise) arising in
any way out of the use of this software, even if advised of the
possibility of such damage.**
