.. mode: -*- rst -*-

Stack scanner for Digital Unix on Alpha
=======================================

:Tag: design.mps.sso1al
:Author: David Jones
:Date: 1997-03-27
:Status: draft document
:Revision: $Id$
:Copyright: See `Copyright and License`_.

.. warning::

    As of 2013-05-26, the MPS is no longer supported on Digital Unix,
    so this document is only of historical interest.


Introduction
------------

_`.readership`: Any MPS developer.

_`.intro`: This is the design for Stack Scanner module that runs on
Digital UNIX / Alpha systems (See os.o1 and arch.al). The design
adheres to the general design and interface described (probably not
described actually) in design.mps.ss.

_`.source.alpha`: book.digital96 (Alpha Architecture Handbook)
describes the Alpha Architecture independently of any particular
implementation. The instruction mnemonics and the semantics for each
instruction are specified in that document.

`[DEC Assembler]`_ describes the assembler syntax and assembler
directives. It also summarises the calling conventions used. Chapters
1 and 6 were especially useful, especially chapter 6.

`[DEC Alpha Calling Standard]`_ describes the calling conventions used
for Digital Alpha systems. Chapter 2 was useful. But the whole
document was not used as much as the previous 2 documents.


Definitions
-----------

_`.def.saved`: Saved Register.  A saved register is one whose value is defined to 
be preserved across a procedure call according to the Calling Standard.  They 
are ``$9``--``$15``, ``$26``, and ``$30``.  ``$30`` is the stack pointer.

_`.def.non-saved`: Non-Saved Register. A non-save register is a
register that is assumed to be modified across a procedure call
according to the Calling Standard.

_`.def.tos`: Top of Stack. The top of stack is the youngest portion of
the stack.

_`.def.bos`: Bottom of Stack. The bottom of stack is the oldest
portion of the stack.

_`.def.base`: Base. Of a range of addresses, the base is the lowest
address in the range.

_`.def.limit`: Limit. Of a range of addresses, the limit is "one past"
the highest address in the range.


Overview
--------

_`.overview`: The registers and the stack need to be scanned. This is
achieved by storing the contents of the registers into a frame at the
top of the stack and then passing the base and limit of the stack
region, including the newly created frame, to the function
``TraceScanAreaTagged()``. ``TraceScanAreaTagged()`` performs the
actual scanning and fixing.


Detail Design
-------------

Functions
.........

_`.fun.stackscan`: ``StackScan()``

_`.fun.stackscan.asm`: The function is written in assembler.
_`.fun.stackscan.asm.justify`: This is because the machine registers
need to be examined, and it is only possible to access the machine
registers using assembler.

_`.fun.stackscan.entry`: On entry to this procedure all the non-saved
(temporary) registers that contain live pointers must have been saved
in some root (usually the stack) by the mutator (otherwise it would
lose the values). Therefore only the saved registers need to be stored
by this procedure.

_`.fun.stackscan.assume.saved`: We assume that all the saved registers
are roots. This is conservative since some of the saved registers
might not be used.

_`.fun.stackscan.frame`: A frame is be created on the top of the
stack. _`.fun.stackscan.frame.justify`: This frame is used to store
the saved registers into so that they can be scanned.

_`.fun.stackscan.save`: All the saved registers, apart from $30 the
stack pointer, are to be stored in the frame.
_`.fun.stackscan.save.justify`: This is so that they can be scanned.
The stack pointer itself is not scanned as the stack is assumed to be
a root (and therefore a priori alive).

_`.fun.stackscan.call`: ``TraceScanAreaTagged()`` is called with the
current stack pointer as the base and the (passed in) ``StackBot`` as
the limit of the region to be scanned. _`.fun.stackscan.call.justify`:
This function does the actual scanning. The Stack on Alpha systems
grows down so the stack pointer (which points to the top of the stack)
is lower in memory than the bottom of the stack.

_`.fun.stackscan.return`: The return value from
``TraceScanAreaTagged()`` is used as the return value for
``StackScan()``.


References
----------

.. _[DEC Assembler]:

   Digital Equipment Corporation. 1996. "`Assembly Language Programmer's Guide <http://h30097.www3.hp.com/docs/base_doc/DOCUMENTATION/V40F_HTML/APS31DTE/TITLE.HTM>`_".

.. _[DEC Alpha Calling Standard]:

   Digital Equipment Corporation. 1996. "`Calling Standard for Alpha Systems <http://h30097.www3.hp.com/docs/base_doc/DOCUMENTATION/V40F_HTML/APY8ACTE/TITLE.HTM>`_".


Document History
----------------

- 1997-03-27 David Jones. Draft document.

- 2002-06-07 RB_ Converted from MMInfo database design document.

- 2013-05-23 GDR_ Converted to reStructuredText.

.. _RB: http://www.ravenbrook.com/consultants/rb/
.. _GDR: http://www.ravenbrook.com/consultants/gdr/


Copyright and License
---------------------

Copyright Â© 2013 Ravenbrook Limited. All rights reserved. 
<http://www.ravenbrook.com/>. This is an open source license. Contact
Ravenbrook for commercial licensing options.

Redistribution and use in source and binary forms, with or without
modification, are permitted provided that the following conditions are
met:

1. Redistributions of source code must retain the above copyright
   notice, this list of conditions and the following disclaimer.

2. Redistributions in binary form must reproduce the above copyright
   notice, this list of conditions and the following disclaimer in the
   documentation and/or other materials provided with the distribution.

3. Redistributions in any form must be accompanied by information on how
   to obtain complete source code for this software and any
   accompanying software that uses this software.  The source code must
   either be included in the distribution or be available for no more than
   the cost of distribution plus a nominal fee, and must be freely
   redistributable under reasonable conditions.  For an executable file,
   complete source code means the source code for all modules it contains.
   It does not include source code for modules or files that typically
   accompany the major components of the operating system on which the
   executable file runs.

**This software is provided by the copyright holders and contributors
"as is" and any express or implied warranties, including, but not
limited to, the implied warranties of merchantability, fitness for a
particular purpose, or non-infringement, are disclaimed.  In no event
shall the copyright holders and contributors be liable for any direct,
indirect, incidental, special, exemplary, or consequential damages
(including, but not limited to, procurement of substitute goods or
services; loss of use, data, or profits; or business interruption)
however caused and on any theory of liability, whether in contract,
strict liability, or tort (including negligence or otherwise) arising in
any way out of the use of this software, even if advised of the
possibility of such damage.**
