#!/usr/local/bin/bash
#
# Build and test MM/EP-core at tip of branch MM_epcore_minnow
# 
# $HopeName$
#

script="`basename $0`"
platform=$1

msg () {
  echo "$script $platform: $*" 1>&2
}

die () {
  msg "$@"
  exit 1
}

test -d $HOME/Builds || mkdir $HOME/Builds ||
  die "Unable to create Builds directory"

cd $HOME/Builds &&
rm -rf MM_epcore_minnow &&
mkdir MM_epcore_minnow &&
cd MM_epcore_minnow ||
  die "Unable to get to Builds/MM_epcore_minnow directory"

hope co -compound MMsrc -branch MM_epcore_minnow -recursive \
  -writable-files quit -missing-dir create -extra-files skip ||
  die "Unable to check out MMsrc(MM_epcore_minnow) from HOPE"


## Build a library
function build-lib {
  for variety in ci he
  do
    date
    gnumake -r -f ${platform}.gmk VARIETY=$variety $1 ||
      die "Unable to build library $1 of MM_epcore_minnow"
  done
}

## Build and run a test
function do-test {
  for variety in ci he
  do
    date
    gnumake -r -f ${platform}.gmk VARIETY=$variety $1 ||
      die "Unable to build test $variety/$1 of MM_epcore_minnow"
    ./$platform/$variety/$1 ||
      die "Failed test $variety/$1 of MM_epcore_minnow"
    rm mpsio.log
  done
}


cd src

### SW builds have different compilation options, so they ought to be
### done separately.  Do them first.

build-lib mmsw.a

do-test epvmss

### Then clean up and do the others.

gnumake -r -f $platform.gmk clean ||
  die "Unable to clean up MM_epcore_minnow"

for test in lockcov locv mpmss mpsicv poolncv \
            qs finalcv arenacv amsss
            ## Don't run amcss, because we don't need it on this branch
            ## Don't run awlut, because we don't need it on this branch
do
  do-test $test
done

# If the tests succeeded, delete the junk
cd $HOME/Builds &&
rm -rf MM_epcore_minnow
