# ==== FIRST COMMON FRAGMENT FOR PLATFORMS USING MV AND NMAKE
#
# $HopeName: MMsrc!commpre.nmk(trunk.13) $
# Copyright (C) 1995, 1997, 1998 Harlequin Group, all rights reserved
#
# DESCRIPTION
#
# This makefile fragment is included in more specific
# makefiles for platforms which use the "mv" builder.  This is
# the first of two common makefile fragements (the other is commpost.nmk).
# Alas due to shortcomings in nmake it is not possible to use only one
# common fragment.
#
# %%PART: Add a new parameter for the files included in the part
# Parameters:
#   PFM      platform code, e.g. "nti3mv"
#   PFMDEFS  /D options to define platforms preprocessor symbols
#            to the compiler.  Eg "/DOS_NT /DARCH_386 /DBUILD_MVC"
#   MPM      list of sources which make up the "mpm" part for this
#            platform.  Each source is stripped of its .c extension
#            and surrounded in angle brackets (<>)
#   PLINTH   as above for the "plinth" part
#   AMC      as above for the "amc" part
#   AMS      as above for the "ams" part
#   LO       as above for the "lo" part
#   MRG      as above for the "mrg" part
#   SW       as above for the "sw" part
#   TESTLIB  as above for the "testlib" part
#   NOISY    if defined, causes command to be emitted
#
#
# EDITING
#
# To add new targets. varieties, and parts:
# Search for the string "%%TARGET", "%%VARIETY", or "%%PART" in this makefile
# and follow the instructions.  If you're adding a part, you'll have to change
# the makefile for all the platforms which use this makefile to define the
# source list for that part.
#

# CHECK PARAMETERS
#
#
# %%PART: Add checks for the parameter with the sources for the new part.

!IFNDEF PFM
!ERROR commpre.nmk: PFM not defined
!ENDIF
!IFNDEF PFMDEFS
!ERROR commpre.nmk: PFMDEFS not defined
!ENDIF
!IFNDEF MPM
!ERROR commpre.nmk: MPM not defined
!ENDIF
!IFNDEF PLINTH
!ERROR commpre.nmk: PLINTH not defined
!ENDIF
!IFNDEF LO
!ERROR commpre.nmk: LO not defined
!ENDIF
!IFNDEF AMC
!ERROR commpre.nmk: AMC not defined
!ENDIF
!IFNDEF AMS
!ERROR commpre.nmk: AMS not defined
!ENDIF
!IFNDEF SW
!ERROR commpre.nmk: SW not defined
!ENDIF
!IFNDEF TESTLIB
!ERROR commpre.nmk: TESTLIB not defined
!ENDIF


# DECLARATIONS


!IFDEF NOISY
ECHO = rem
!ELSE
.SILENT:
ECHO = echo
!ENDIF


# C FLAGS
# %%VARIETY: Define a macro containing the set of flags for the new variety.

# All compilations
# /MT means compile for multi-threaded environment.
# /ML means compile for single-threaded environment.
# some C flags depend on the target we are building.

!ifdef TARGET
!if "$(TARGET)" == "mmsw.lib"
CFLAGSTARGETPRE = /ML /DCONFIG_PROD_EPCORE
CFLAGSTARGETPOST = 
!elseif "$(TARGET)" == "epvmss.exe"
CFLAGSTARGETPRE = /ML /DCONFIG_PROD_EPCORE
CFLAGSTARGETPOST = 
!elseif "$(TARGET)" == "mmdw.lib"
# /Oy- is actually 86-specific, but Dylan is only built for that platform
CFLAGSTARGETPRE = /MT /DCONFIG_PROD_DYLAN 
CFLAGSTARGETPOST = /Oy-

!else
CFLAGSTARGETPRE = /MT /DCONFIG_PROD_MPS
CFLAGSTARGETPOST = 
!endif
!endif

CFLAGSCOMMONPRE = /nologo /W4 /WX $(PFMDEFS) $(CFLAGSTARGETPRE)
CFLAGSCOMMONPOST = $(CFLAGSTARGETPOST)

# Flags for use in the variety combinations
CFLAGSHOT = /O2 /DNDEBUG
CFLAGSCOOL = 
CFLAGSINTERNAL = /Z7
CFLAGSEXTERNAL = 

# The combinations of variety
# @@@@ TI is a temporary telemetry variety
CFHE = /DCONFIG_VAR_HE $(CFLAGSHOT)  $(CFLAGSEXTERNAL)
CFCE = /DCONFIG_VAR_CE $(CFLAGSCOOL) $(CFLAGSEXTERNAL)
CFHI = /DCONFIG_VAR_HI $(CFLAGSHOT)  $(CFLAGSINTERNAL)
CFCI = /DCONFIG_VAR_CI $(CFLAGSCOOL) $(CFLAGSINTERNAL)
CFTI = /DCONFIG_VAR_TI $(CFLAGSCOOL) $(CFLAGSINTERNAL)
CFWI = /DCONFIG_VAR_WI $(CFLAGSHOT)  $(CFLAGSINTERNAL)

# Microsoft documentation is not very clear on the point of using both
# optimization and debug information

# LINKER FLAGS
# %%VARIETY: define a macro containing the flags for the new variety
LINKER = link
LINKFLAGSCOMMON = /nologo /PDB:NONE /DEBUGTYPE:cv
LINKFLAGSINTERNAL = /DEBUG:full
LINKFLAGSEXTERNAL = /RELEASE
LINKFLAGSHOT = 
LINKFLAGSCOOL =

LFHE = $(LINKFLAGSHOT)  $(LINKFLAGSEXTERNAL)
LFCE = $(LINKFLAGSCOOL) $(LINKFLAGSEXTERNAL)
LFHI = $(LINKFLAGSHOT)  $(LINKFLAGSINTERNAL)
LFCI = $(LINKFLAGSCOOL) $(LINKFLAGSINTERNAL)
LFTI = $(LINKFLAGSCOOL) $(LINKFLAGSINTERNAL)
LFWI = $(LINKFLAGSHOT)  $(LINKFLAGSINTERNAL)

#LFCV = /PROFILE /DEBUG:full /DEBUGTYPE:cv

# Library manager
# %%VARIETY: define a macro containing the flags for the new variety
LIBMAN = lib                  # can't call this LIB - it screws the environment
LIBFLAGSCOMMON = /nologo
LIBFLAGSHE = 
LIBFLAGSCE = 
LIBFLAGSHI = 
LIBFLAGSCI = 
LIBFLAGSTI =
LIBFLAGSWI =
#LIBFLAGSCV =

# Browser database manager [not used at present]
#BSC = bscmake
#BSCFLAGS = /nologo /n


# == Common definitions ==
# %%PART: Add your part here, unless it's platform-specific
# [It is not possible use a macro, like $(PFM), in a substitution,
# hence all parts end up being platform-specific.]
