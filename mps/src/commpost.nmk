# ==== SECOND COMMON FRAGMENT FOR PLATFORMS USING MV AND NMAKE
#
# $HopeName: MMsrc!commpost.nmk(trunk.29) $
# Copyright(C) 1997 Harlequin Group, all rights reserved
#
# DESCRIPTION
#
# Second common makefile fragment for w3*mv.nmk.  See commpre.nmk


# == Pseudo-targets

# "all" builds all the varieties of all targets
# %%TARGET: Add the target to the all dependencies

all: mpmss.exe amcss.exe amsss.exe awlut.exe mpsicv.exe \
     lockutw3.exe lockcov.exe poolncv.exe locv.exe qs.exe \
     finalcv.exe arenacv.exe bttest.exe teletest.exe mpm.lib \
     abqtest.exe cbstest.exe btcv.exe mv2eptst.exe mv2test.exe

# Convenience targets
# %%TARGET: Add a pseudo-target for the new part

mpmss.exe amcss.exe amsss.exe awlut.exe dwstress.exe mpsicv.exe \
     lockutw3.exe lockcov.exe poolncv.exe locv.exe qs.exe \
     finalcv.exe arenacv.exe bttest.exe teletest.exe protcv.exe \
     thw3susp.exe abqtest.exe cbstest.exe btcv.exe mv2eptst.exe \
     mv2test.exe epvmss.exe \
     mpm.lib mmdw.lib mmsw.lib poolawl.lib mpsplan.lib:
!IFDEF VARIETY
	$(MAKE) /nologo /f $(PFM).nmk TARGET=$@ variety
!ELSE
	$(MAKE) /nologo /f $(PFM).nmk TARGET=$@ target
!ENDIF

mpsicv.cov:
	$(MAKE) /nologo /f $(PFM).nmk TARGET=$@ VARIETY=cv variety

# "clean" removes the directory containing the build results.
# Depends on there being no file called "clean".

clean:
	$(ECHO) $(PFM): $@
	-echo y | rmdir/s $(PFM)
	-deltree /Y $(PFM)

# target target
# %%VARIETY: Optionally, add a recursive make call for the new variety, 
#  if it should be built by default.
# Only the varieties needed for development and internal customers are made.
# Depends on there being no file called "target".

!IFDEF TARGET
!IFNDEF VARIETY
target:
	$(MAKE) /nologo /f $(PFM).nmk VARIETY=hi variety
	$(MAKE) /nologo /f $(PFM).nmk VARIETY=ci variety
	$(MAKE) /nologo /f $(PFM).nmk VARIETY=ti variety
!ENDIF
!ENDIF

# variety
# Depends on there being no file called "variety".

!IFDEF VARIETY
!IFDEF TARGET
variety: $(PFM)\$(VARIETY)\$(TARGET)
!ENDIF
!ENDIF

# FORCE
# Used to force a target to be built.
# Depends on there being no file called "FORCE".
FORCE:


# GENUINE TARGETS
#
# Each line defines an executable or library target to be built and the object
# files it is build from.  For an executable these lines add dependencies to
# the generic rules below, and should not include commands to execute.
# For a library this is not possible and the target should include commands
# to build it.
# %%TARGET: Add your new target here

!IFDEF VARIETY

# .special.version: version.o has a special rule so that it is always
# built. This rule has no commands, meaning that the commands from
# other rules (the implicit .c -> .obj rule in particular) will be used
$(PFM)\$(VARIETY)\version.obj: FORCE

$(PFM)\$(VARIETY)\finalcv.exe: $(PFM)\$(VARIETY)\finalcv.obj \
	$(MPMOBJ) $(PLINTHOBJ) $(AMCOBJ) $(DWOBJ) $(DWTESTOBJ) \
	$(MRGOBJ) $(TESTLIBOBJ)

$(PFM)\$(VARIETY)\mpmss.exe: $(PFM)\$(VARIETY)\mpmss.obj \
	$(MPMOBJ) $(PLINTHOBJ) $(TESTLIBOBJ)

$(PFM)\$(VARIETY)\bttest.exe: $(PFM)\$(VARIETY)\bttest.obj \
	$(MPMOBJ) $(PLINTHOBJ) $(ARENAANOBJ)

$(PFM)\$(VARIETY)\teletest.exe: $(PFM)\$(VARIETY)\teletest.obj \
	$(MPMOBJ) $(PLINTHOBJ) $(ARENAANOBJ)

$(PFM)\$(VARIETY)\lockcov.exe: $(PFM)\$(VARIETY)\lockcov.obj \
	$(MPMOBJ) $(PLINTHOBJ) 

$(PFM)\$(VARIETY)\lockutw3.exe: $(PFM)\$(VARIETY)\lockutw3.obj \
	$(MPMOBJ) $(PLINTHOBJ) 

$(PFM)\$(VARIETY)\thw3susp.exe: $(PFM)\$(VARIETY)\thw3susp.obj

$(PFM)\$(VARIETY)\qs.exe: $(PFM)\$(VARIETY)\qs.obj \
	$(AMCOBJ) $(MPMOBJ) $(PLINTHOBJ) $(TESTLIBOBJ)

$(PFM)\$(VARIETY)\amcss.exe: $(PFM)\$(VARIETY)\amcss.obj \
	$(MPMOBJ) $(AMCOBJ) $(PLINTHOBJ) $(DWOBJ) $(DWTESTOBJ) \
	$(TESTLIBOBJ)

$(PFM)\$(VARIETY)\amsss.exe: $(PFM)\$(VARIETY)\amsss.obj \
	$(MPMOBJ) $(AMSOBJ) $(PLINTHOBJ) $(DWOBJ) $(DWTESTOBJ) \
	$(TESTLIBOBJ)

$(PFM)\$(VARIETY)\mpsicv.exe: $(PFM)\$(VARIETY)\mpsicv.obj \
	$(MPMOBJ) $(AMCOBJ) $(PLINTHOBJ) $(DWOBJ) $(DWTESTOBJ) \
	$(TESTLIBOBJ)

$(PFM)\$(VARIETY)\dwstress.exe:  $(PFM)\$(VARIETY)\dwstress.obj \
	$(DWOBJ) $(MPMOBJ) $(PLINTHOBJ) $(AMCOBJ)

$(PFM)\$(VARIETY)\protcv.exe:  $(PFM)\$(VARIETY)\protcv.obj \
	$(MPMOBJ) $(PLINTHOBJ) 

$(PFM)\$(VARIETY)\poolncv.exe:  $(PFM)\$(VARIETY)\poolncv.obj \
	$(MPMOBJ) $(PLINTHOBJ) $(TESTLIBOBJ) $(ARENAANOBJ) $(POOLNOBJ)

$(PFM)\$(VARIETY)\locv.exe:  $(PFM)\$(VARIETY)\locv.obj \
	$(MPMOBJ) $(PLINTHOBJ) $(TESTLIBOBJ) $(LOOBJ)

$(PFM)\$(VARIETY)\awlut.exe:  $(PFM)\$(VARIETY)\awlut.obj \
	$(PFM)\$(VARIETY)\fmtdy.obj \
	$(MPMOBJ) $(PLINTHOBJ) $(TESTLIBOBJ) $(LOOBJ) $(AWLOBJ)

$(PFM)\$(VARIETY)\arenacv.exe:  $(PFM)\$(VARIETY)\arenacv.obj \
	$(MPMOBJ) $(PLINTHOBJ) $(TESTLIBOBJ) $(ARENAANOBJ)

$(PFM)\$(VARIETY)\abqtest.exe: $(PFM)\$(VARIETY)\abqtest.obj \
	$(MPMOBJ) $(PLINTHOBJ) $(ARENAANOBJ) $(TESTLIBOBJ)

$(PFM)\$(VARIETY)\cbstest.exe: $(PFM)\$(VARIETY)\cbstest.obj \
	$(MPMOBJ) $(PLINTHOBJ) $(ARENAANOBJ) $(TESTLIBOBJ)

$(PFM)\$(VARIETY)\btcv.exe: $(PFM)\$(VARIETY)\btcv.obj \
	$(MPMOBJ) $(PLINTHOBJ) $(ARENAANOBJ) $(TESTLIBOBJ)

$(PFM)\$(VARIETY)\mv2eptst.exe: $(PFM)\$(VARIETY)\mv2eptst.obj \
	$(MPMOBJ) $(PLINTHOBJ) $(ARENAANOBJ) $(TESTLIBOBJ)

$(PFM)\$(VARIETY)\mv2test.exe: $(PFM)\$(VARIETY)\mv2test.obj \
	$(MPMOBJ) $(PLINTHOBJ) $(ARENAANOBJ) $(TESTLIBOBJ)

$(PFM)\$(VARIETY)\epvmss.exe: $(PFM)\$(VARIETY)\epvmss.obj \
	$(PFM)\$(VARIETY)\fmtpstst.obj \
	$(SWOBJ) $(TESTLIBOBJ) $(PLINTHOBJ) $(EVENTOBJ)

$(PFM)\$(VARIETY)\mpm.lib: $(MPMOBJ)
	$(ECHO) $@
	$(LIBMAN) $(LIBFLAGS) /OUT:$@ $**

$(PFM)\$(VARIETY)\amc.lib: $(MPMOBJ) $(AMCOBJ)
	$(ECHO) $@
	$(LIBMAN) $(LIBFLAGS) /OUT:$@ $**

$(PFM)\$(VARIETY)\ams.lib: $(MPMOBJ) $(AMSOBJ)
	$(ECHO) $@
	$(LIBMAN) $(LIBFLAGS) /OUT:$@ $**

$(PFM)\$(VARIETY)\mmsw.lib: $(SWOBJ)
	$(ECHO) $@
	$(LIBMAN) $(LIBFLAGS) /OUT:$@ $**

$(PFM)\$(VARIETY)\mmdw.lib: $(MPMOBJ) $(AMCOBJ) $(DWOBJ) \
        $(AWLOBJ) $(LOOBJ) $(SNCOBJ)
	$(ECHO) $@
	$(LIBMAN) $(LIBFLAGS) /OUT:$@ $**

$(PFM)\$(VARIETY)\mpsplan.lib: $(PLINTHOBJ)
	$(ECHO) $@
	$(LIBMAN) $(LIBFLAGS) /OUT:$@ $**

$(PFM)\$(VARIETY)\poolawl.lib: $(AWLOBJ)
	$(ECHO) $@
	$(LIBMAN) $(LIBFLAGS) /OUT:$@ $**

!ENDIF

# GENERIC RULES

# Object files
# [builds objects for static linking with libc]

{}.c{$(PFM)\$(VARIETY)}.obj:
	$(ECHO) $@
	@if not exist $(PFM) mkdir $(PFM)
	@if not exist $(PFM)\$(VARIETY) mkdir $(PFM)\$(VARIETY)
	cl /c $(CFLAGS) /Fd$(PFM)\$(VARIETY)\$(<:.obj=.pdb) /Fo$@ $<

{}.asm{$(PFM)\$(VARIETY)}.obj:
	$(ECHO) $@
	@if not exist $(PFM) mkdir $(PFM)
	@if not exist $(PFM)\$(VARIETY) mkdir $(PFM)\$(VARIETY)
	ml /nologo /c /coff /Fo$@ $<

# Coverage files
#{$(PFM)\$(VARIETY)}.exe{$(PFM)\$(VARIETY)}.cov:
#	$(ECHO) $@
#	cd $(PFM)\$(VARIETY)
#	prep /nologo /lv  $(<F)
#	profile /nologo $(<B)
#	prep /nologo /m $(<B)
#	plist /nologo /D ..\.. $(<B) > $(@F)


# Dependencies
# [we can't build these at the moment]

# Executables
# libcmt.lib is the library needed for multi-threaded programs.

{$(PFM)\$(VARIETY)}.obj{$(PFM)\$(VARIETY)}.exe:
	$(ECHO) $@
	$(LINKER) $(LINKFLAGS) /OUT:$@ $(**)
#!INCLUDE depend.mak
