#
#              GENERIC BUILD.GC MAKEFILE FRAGMENT
#
# $HopeName: MMsrc!gc.gmk(trunk.15) $
#
# Copyright (C) 1995 Harlequin Group, all rights reserved
#
# DESCRIPTION
#
# This makefile fragment is included in more specific makefiles for
# platforms which use the "gc" builder, which includes GNU make (see
# build.gc).
#
# %%PART: Add a new parameter for the files included in the part.
# Parameters:
#   PFM		platform code, e.g. "suspgc"
#   STD		list of sources which make up the "std" part for this
#               platform
#   MPM		as above for the "mpm" part
#   MPMS	assembler sources for the "mpm" part
#   AMC		as above for the "amc" part
#   LO          as above for the "lo" part
#   DW		as above for the "dw" part
#   TESTLIB	as above for the "testlib" part
#   LIBS	extra libraries to include in tests (usually "-lm")
#   NOISY	if defined and non-empty, causes commands to be emitted
#
#
# EDITING
#
# To add new targets, varieties, and parts:
# Search for the string "%%TARGET", "%%VARIETY", or "%%PART" in this
# makefile and follow the instructions.  If you're adding a part, you'll
# have to change the makefiles for all the platforms which use this
# makefile to define the source list for that part, and the GNUmakefile
# to include a recursive call to the name of that part.
# 
# CHECK PARAMETERS
#
# GNU make doesn't really have an "error" directive, but these lines
# will cause it to exit with an error.
#
# [These only test to see whether the symbol is defined.  We could be
#  more thorough and test the syntax and content. -- richard 1995-09-07]
#
# %%PART: Add checks for the parameter with the sources for the new
#         part.

ifndef PFM
error "gc.gmk: PFM not defined"
endif
ifndef STD
error "gc.gmk: STD not defined"
endif
ifndef MPM
error "gc.gmk: MPM not defined"
endif
ifndef AMC
error "gc.gmk: AMC not defined"
endif
ifndef LO
error "gc.gmk: LO not defined"
endif
ifndef DW
error "gc.gmk: DW not defined"
endif
ifndef TESTLIB
error "gc.gmk: TESTLIB not defined"
endif


# DECLARATIONS

ifdef NOISY
ECHO = :
else
.SILENT:
ECHO = echo
endif

.PHONY: phony

# C FLAGS
# %%VARIETY: Define a macro containing the set of flags for the new
#            variety.

# These flags are included in all compilations.
CFLAGSCOMMON = \
	-ansi -pedantic -Wall -Werror -Wpointer-arith \
	-Wstrict-prototypes -Wmissing-prototypes \
	-Winline -Waggregate-return -Wnested-externs \
	-Wcast-qual -Wshadow

# These flags are added to compilations for the "debug" variety.
CFDEBUG = \
	-DDEBUG -DVALID_NONESTED \
	-g -ggdb3

# These flags are added to compilations for the "release" variety.
CFRELEASE = \
	-DVALID_NONE \
	-O

# These flags are added to compilations for the "devel" variety.
CFDEVEL = \
	-DDEBUG -DVALID_ALL \
	-g -ggdb3

# These map the source file lists onto object files and dependency files
# in the platform/variety directory.
# 
# %%PART: Add a new macro which expands to the files included in the
#         part.

ifdef VARIETY
STDOBJ = $(STD:%.c=$(PFM)/$(VARIETY)/%.o)
STDDEP = $(STD:%.c=$(PFM)/$(VARIETY)/%.d)
MPMOBJ = $(MPM:%.c=$(PFM)/$(VARIETY)/%.o) $(MPMS:%.s=$(PFM)/$(VARIETY)/%.o)
MPMDEP = $(MPM:%.c=$(PFM)/$(VARIETY)/%.d)
AMCOBJ = $(AMC:%.c=$(PFM)/$(VARIETY)/%.o)
AMCDEP = $(AMC:%.c=$(PFM)/$(VARIETY)/%.d)
LOOBJ = $(LO:%.c=$(PFM)/$(VARIETY)/%.o)
LODEP = $(LO:%.c=$(PFM)/$(VARIETY)/%.d)
DWOBJ = $(DW:%.c=$(PFM)/$(VARIETY)/%.o)
DWDEP = $(DW:%.c=$(PFM)/$(VARIETY)/%.d)
TESTLIBOBJ = $(TESTLIB:%.c=$(PFM)/$(VARIETY)/%.o)
TESTLIBDEP = $(TESTLIB:%.c=$(PFM)/$(VARIETY)/%.d)
endif

# Bind CFLAGS to the appropriate set of flags for the variety.
ifeq ($(VARIETY),debug)
CFLAGS=$(CFLAGSCOMMON) $(CFDEBUG)
else
ifeq ($(VARIETY),release)
CFLAGS=$(CFLAGSCOMMON) $(CFRELEASE)
else
ifeq ($(VARIETY),devel)
CFLAGS=$(CFLAGSCOMMON) $(CFDEVEL)
endif
endif
endif


# == Pseudo-targets ==

# "all" builds all varieties of all targets
# %%TARGET: Add the target to the all dependencies.

all: mpmss amcss dwstress mpsicv lockcov stdcover std.a poolncv lo.a locv qs

# These convenience targets allow one to type "make foo" to build target
# foo in all varieties.
#
# %%TARGET: Add a pseudo-target for the new target here.

mpmss amcss dwstress mpsicv lockcov stdcover std.a poolncv lo.a locv qs: phony
	$(MAKE) -f $(PFM).gmk TARGET=$@ target

# "clean" removes the directory containing the build results for the
# platform.

clean: phony
	$(ECHO) "$(PFM): $@"
	rm -rf "$(PFM)"

# "target" builds all varieties of the target named in the TARGET macro.
# %%VARIETY: Add a recursive make call for the new variety.

ifdef TARGET
ifndef VARIETY
target: phony
	$(MAKE) -f $(PFM).gmk VARIETY=devel variety
	$(MAKE) -f $(PFM).gmk VARIETY=debug variety
	$(MAKE) -f $(PFM).gmk VARIETY=release variety
endif
endif

# "variety" builds the target named in the TARGET macro using the
# variety named in the VARIETY macro.

ifdef VARIETY
ifdef TARGET
variety: $(PFM)/$(VARIETY)/$(TARGET)
endif
endif


# GENUINE TARGETS
#
# Each line defines an executable or library target to be built and the
# object files it is built from.  These lines add dependencies to the
# generic rules below, and should not include commands to execute.
#
# %%TARGET: Add the dependencies for the new target here.

ifdef VARIETY

$(PFM)/$(VARIETY)/locv: $(PFM)/$(VARIETY)/locv.o \
	$(STDOBJ) $(MPMOBJ) $(LOOBJ) $(TESTLIBOBJ)

$(PFM)/$(VARIETY)/stdcover: $(PFM)/$(VARIETY)/stdcover.o \
	$(STDOBJ)

$(PFM)/$(VARIETY)/mpmss: $(PFM)/$(VARIETY)/mpmss.o \
	$(MPMOBJ) $(STDOBJ)

$(PFM)/$(VARIETY)/lockcov: $(PFM)/$(VARIETY)/lockcov.o \
	$(MPMOBJ) $(STDOBJ)

$(PFM)/$(VARIETY)/mpsicv: $(PFM)/$(VARIETY)/mpsicv.o \
	$(PFM)/$(VARIETY)/fmtdy.o \
	$(MPMOBJ) $(STDOBJ) $(AMCOBJ) $(TESTLIBOBJ)

$(PFM)/$(VARIETY)/amcss: $(PFM)/$(VARIETY)/amcss.o \
	$(PFM)/$(VARIETY)/fmtdy.o \
	$(MPMOBJ) $(STDOBJ) $(AMCOBJ) $(TESTLIBOBJ)

$(PFM)/$(VARIETY)/dwstress: $(PFM)/$(VARIETY)/dwstress.o \
	$(MPMOBJ) $(STDOBJ) $(AMCOBJ) $(DWOBJ) $(TESTLIBOBJ)

$(PFM)/$(VARIETY)/poolncv: $(PFM)/$(VARIETY)/poolncv.o \
	$(PFM)/$(VARIETY)/pooln.o \
	$(MPMOBJ) $(STDOBJ) $(TESTLIBOBJ)

$(PFM)/$(VARIETY)/qs: $(PFM)/$(VARIETY)/qs.o \
	$(AMCOBJ) $(MPMOBJ) $(STDOBJ) $(TESTLIBOBJ)

$(PFM)/$(VARIETY)/std.a: $(STDOBJ)

$(PFM)/$(VARIETY)/mpm.a: $(MPMOBJ)

$(PFM)/$(VARIETY)/lo.a: $(PFM)/$(VARIETY)/lo.o

endif


# GENERIC RULES
#
# These generate build output in the <pfm>/<variety> directory.
# Note that we can't used "mkdir -p" to create this directory because
# it's broken (w.r.t. the man page) under OSF/1.

# Object files

$(PFM)/$(VARIETY)/%.o: %.c
	$(ECHO) "$(PFM): $@"
	test -d $(PFM) || mkdir $(PFM)
	test -d $(PFM)/$(VARIETY) || mkdir $(PFM)/$(VARIETY)
	gcc $(CFLAGS) -c -o $@ $<

$(PFM)/$(VARIETY)/%.o: %.s
	$(ECHO) "$(PFM): $@"
	test -d $(PFM) || mkdir $(PFM)
	test -d $(PFM)/$(VARIETY) || mkdir $(PFM)/$(VARIETY)
	gcc $(CFLAGS) -c -o $@ $<

# Dependencies
#
# These are included into _this_ makefile (see below).  GNU make does the
# right thing as long as it knows how to make the dependency files before
# including them.
#
# gcc -MM generates a dependency line of the form:
#   thing.o : thing.c ...
# The sed line converts this into:
#   <pfm>/<variety>/thing.o <pfm>/<variety>/thing.d : thing.c ...

$(PFM)/$(VARIETY)/%.d: %.c
	$(ECHO) "$(PFM): $@"
	test -d $(PFM) || mkdir $(PFM)
	test -d $(PFM)/$(VARIETY) || mkdir $(PFM)/$(VARIETY)
	$(SHELL) -ec "gcc -c $(CFLAGS) -MM $< | \
		sed '/:/s!$*.o!$(@D)/& $(@D)/$*.d!' > $@"

ifdef VARIETY
ifdef TARGET
# %%PART: Add the depency file macro for the new part here.
include $(STDDEP) $(MPMDEP) $(AMCDEP) $(LODEP)
endif
endif

# Library

$(PFM)/$(VARIETY)/%.a:
	$(ECHO) "$(PFM): $@"
	rm -f $@
	ar rc $@ $^
	ranlib $@

# Executable

$(PFM)/$(VARIETY)/%:
	$(ECHO) "$(PFM): $@"
	gcc -o $@ $^ $(LIBS)

# End of makefile.
