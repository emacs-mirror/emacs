/* impl.h.eventgen -- Automatic event header
 *
 * $HopeName$
 *
 * DO NOT EDIT THIS FILE!
 * This file was generated by MMsrc!eventgen.pl(trunk.9) $
 */

#ifdef EVENT

typedef struct {
  Word code;
  Word clock;
} Event0Struct;

#define EVENT_0_FIELD_PTR(event, i) \
  (NULL)

typedef struct {
  Word code;
  Word clock;
  Addr a0;
} EventAStruct;

#define EVENT_A_FIELD_PTR(event, i) \
  (((i) == 0) ? (void *)&((event)->a.a0) \
   : NULL)

typedef struct {
  Word code;
  Word clock;
  Addr a0;
  Word w1;
} EventAWStruct;

#define EVENT_AW_FIELD_PTR(event, i) \
  (((i) == 0) ? (void *)&((event)->aw.a0) \
   : ((i) == 1) ? (void *)&((event)->aw.w1) \
   : NULL)

typedef struct {
  Word code;
  Word clock;
  void * p0;
} EventPStruct;

#define EVENT_P_FIELD_PTR(event, i) \
  (((i) == 0) ? (void *)&((event)->p.p0) \
   : NULL)

typedef struct {
  Word code;
  Word clock;
  void * p0;
  Addr a1;
  Addr a2;
} EventPAAStruct;

#define EVENT_PAA_FIELD_PTR(event, i) \
  (((i) == 0) ? (void *)&((event)->paa.p0) \
   : ((i) == 1) ? (void *)&((event)->paa.a1) \
   : ((i) == 2) ? (void *)&((event)->paa.a2) \
   : NULL)

typedef struct {
  Word code;
  Word clock;
  void * p0;
  Addr a1;
  Word w2;
} EventPAWStruct;

#define EVENT_PAW_FIELD_PTR(event, i) \
  (((i) == 0) ? (void *)&((event)->paw.p0) \
   : ((i) == 1) ? (void *)&((event)->paw.a1) \
   : ((i) == 2) ? (void *)&((event)->paw.w2) \
   : NULL)

typedef struct {
  Word code;
  Word clock;
  void * p0;
  Addr a1;
  Word w2;
  Addr a3;
} EventPAWAStruct;

#define EVENT_PAWA_FIELD_PTR(event, i) \
  (((i) == 0) ? (void *)&((event)->pawa.p0) \
   : ((i) == 1) ? (void *)&((event)->pawa.a1) \
   : ((i) == 2) ? (void *)&((event)->pawa.w2) \
   : ((i) == 3) ? (void *)&((event)->pawa.a3) \
   : NULL)

typedef struct {
  Word code;
  Word clock;
  void * p0;
  double d1;
  double d2;
  Word w3;
  Word w4;
  Word w5;
} EventPDDWWWStruct;

#define EVENT_PDDWWW_FIELD_PTR(event, i) \
  (((i) == 0) ? (void *)&((event)->pddwww.p0) \
   : ((i) == 1) ? (void *)&((event)->pddwww.d1) \
   : ((i) == 2) ? (void *)&((event)->pddwww.d2) \
   : ((i) == 3) ? (void *)&((event)->pddwww.w3) \
   : ((i) == 4) ? (void *)&((event)->pddwww.w4) \
   : ((i) == 5) ? (void *)&((event)->pddwww.w5) \
   : NULL)

typedef struct {
  Word code;
  Word clock;
  void * p0;
  void * p1;
} EventPPStruct;

#define EVENT_PP_FIELD_PTR(event, i) \
  (((i) == 0) ? (void *)&((event)->pp.p0) \
   : ((i) == 1) ? (void *)&((event)->pp.p1) \
   : NULL)

typedef struct {
  Word code;
  Word clock;
  void * p0;
  void * p1;
  Addr a2;
  unsigned u3;
} EventPPAUStruct;

#define EVENT_PPAU_FIELD_PTR(event, i) \
  (((i) == 0) ? (void *)&((event)->ppau.p0) \
   : ((i) == 1) ? (void *)&((event)->ppau.p1) \
   : ((i) == 2) ? (void *)&((event)->ppau.a2) \
   : ((i) == 3) ? (void *)&((event)->ppau.u3) \
   : NULL)

typedef struct {
  Word code;
  Word clock;
  void * p0;
  void * p1;
  Addr a2;
  Word w3;
  void * p4;
} EventPPAWPStruct;

#define EVENT_PPAWP_FIELD_PTR(event, i) \
  (((i) == 0) ? (void *)&((event)->ppawp.p0) \
   : ((i) == 1) ? (void *)&((event)->ppawp.p1) \
   : ((i) == 2) ? (void *)&((event)->ppawp.a2) \
   : ((i) == 3) ? (void *)&((event)->ppawp.w3) \
   : ((i) == 4) ? (void *)&((event)->ppawp.p4) \
   : NULL)

typedef struct {
  Word code;
  Word clock;
  void * p0;
  void * p1;
  void * p2;
} EventPPPStruct;

#define EVENT_PPP_FIELD_PTR(event, i) \
  (((i) == 0) ? (void *)&((event)->ppp.p0) \
   : ((i) == 1) ? (void *)&((event)->ppp.p1) \
   : ((i) == 2) ? (void *)&((event)->ppp.p2) \
   : NULL)

typedef struct {
  Word code;
  Word clock;
  void * p0;
  void * p1;
  void * p2;
  unsigned u3;
} EventPPPUStruct;

#define EVENT_PPPU_FIELD_PTR(event, i) \
  (((i) == 0) ? (void *)&((event)->pppu.p0) \
   : ((i) == 1) ? (void *)&((event)->pppu.p1) \
   : ((i) == 2) ? (void *)&((event)->pppu.p2) \
   : ((i) == 3) ? (void *)&((event)->pppu.u3) \
   : NULL)

typedef struct {
  Word code;
  Word clock;
  void * p0;
  void * p1;
  unsigned u2;
} EventPPUStruct;

#define EVENT_PPU_FIELD_PTR(event, i) \
  (((i) == 0) ? (void *)&((event)->ppu.p0) \
   : ((i) == 1) ? (void *)&((event)->ppu.p1) \
   : ((i) == 2) ? (void *)&((event)->ppu.u2) \
   : NULL)

typedef struct {
  Word code;
  Word clock;
  void * p0;
  void * p1;
  Word w2;
  Addr a3;
  Word w4;
} EventPPWAWStruct;

#define EVENT_PPWAW_FIELD_PTR(event, i) \
  (((i) == 0) ? (void *)&((event)->ppwaw.p0) \
   : ((i) == 1) ? (void *)&((event)->ppwaw.p1) \
   : ((i) == 2) ? (void *)&((event)->ppwaw.w2) \
   : ((i) == 3) ? (void *)&((event)->ppwaw.a3) \
   : ((i) == 4) ? (void *)&((event)->ppwaw.w4) \
   : NULL)

typedef struct {
  Word code;
  Word clock;
  void * p0;
  Word w1;
} EventPWStruct;

#define EVENT_PW_FIELD_PTR(event, i) \
  (((i) == 0) ? (void *)&((event)->pw.p0) \
   : ((i) == 1) ? (void *)&((event)->pw.w1) \
   : NULL)

typedef struct {
  Word code;
  Word clock;
  void * p0;
  Word w1;
  Addr a2;
  Word w3;
} EventPWAWStruct;

#define EVENT_PWAW_FIELD_PTR(event, i) \
  (((i) == 0) ? (void *)&((event)->pwaw.p0) \
   : ((i) == 1) ? (void *)&((event)->pwaw.w1) \
   : ((i) == 2) ? (void *)&((event)->pwaw.a2) \
   : ((i) == 3) ? (void *)&((event)->pwaw.w3) \
   : NULL)

typedef struct {
  Word code;
  Word clock;
  void * p0;
  Word w1;
  void * p2;
} EventPWPStruct;

#define EVENT_PWP_FIELD_PTR(event, i) \
  (((i) == 0) ? (void *)&((event)->pwp.p0) \
   : ((i) == 1) ? (void *)&((event)->pwp.w1) \
   : ((i) == 2) ? (void *)&((event)->pwp.p2) \
   : NULL)

typedef struct {
  Word code;
  Word clock;
  void * p0;
  Word w1;
  Word w2;
} EventPWWStruct;

#define EVENT_PWW_FIELD_PTR(event, i) \
  (((i) == 0) ? (void *)&((event)->pww.p0) \
   : ((i) == 1) ? (void *)&((event)->pww.w1) \
   : ((i) == 2) ? (void *)&((event)->pww.w2) \
   : NULL)

typedef struct {
  Word code;
  Word clock;
  void * p0;
  Word w1;
  Word w2;
  Word w3;
  Word w4;
  double d5;
  double d6;
} EventPWWWWDDStruct;

#define EVENT_PWWWWDD_FIELD_PTR(event, i) \
  (((i) == 0) ? (void *)&((event)->pwwwwdd.p0) \
   : ((i) == 1) ? (void *)&((event)->pwwwwdd.w1) \
   : ((i) == 2) ? (void *)&((event)->pwwwwdd.w2) \
   : ((i) == 3) ? (void *)&((event)->pwwwwdd.w3) \
   : ((i) == 4) ? (void *)&((event)->pwwwwdd.w4) \
   : ((i) == 5) ? (void *)&((event)->pwwwwdd.d5) \
   : ((i) == 6) ? (void *)&((event)->pwwwwdd.d6) \
   : NULL)

typedef struct {
  Word code;
  Word clock;
  void * p0;
  Word w1;
  Word w2;
  Word w3;
  Word w4;
  Word w5;
  Word w6;
  Word w7;
  Word w8;
  Word w9;
} EventPWWWWWWWWWStruct;

#define EVENT_PWWWWWWWWW_FIELD_PTR(event, i) \
  (((i) == 0) ? (void *)&((event)->pwwwwwwwww.p0) \
   : ((i) == 1) ? (void *)&((event)->pwwwwwwwww.w1) \
   : ((i) == 2) ? (void *)&((event)->pwwwwwwwww.w2) \
   : ((i) == 3) ? (void *)&((event)->pwwwwwwwww.w3) \
   : ((i) == 4) ? (void *)&((event)->pwwwwwwwww.w4) \
   : ((i) == 5) ? (void *)&((event)->pwwwwwwwww.w5) \
   : ((i) == 6) ? (void *)&((event)->pwwwwwwwww.w6) \
   : ((i) == 7) ? (void *)&((event)->pwwwwwwwww.w7) \
   : ((i) == 8) ? (void *)&((event)->pwwwwwwwww.w8) \
   : ((i) == 9) ? (void *)&((event)->pwwwwwwwww.w9) \
   : NULL)

typedef struct {
  Word code;
  Word clock;
  void * p0;
  Word w1;
  Word w2;
  Word w3;
  Word w4;
  Word w5;
  Word w6;
  Word w7;
  Word w8;
  Word w9;
  Word w10;
  Word w11;
  Word w12;
} EventPWWWWWWWWWWWWStruct;

#define EVENT_PWWWWWWWWWWWW_FIELD_PTR(event, i) \
  (((i) == 0) ? (void *)&((event)->pwwwwwwwwwwww.p0) \
   : ((i) == 1) ? (void *)&((event)->pwwwwwwwwwwww.w1) \
   : ((i) == 2) ? (void *)&((event)->pwwwwwwwwwwww.w2) \
   : ((i) == 3) ? (void *)&((event)->pwwwwwwwwwwww.w3) \
   : ((i) == 4) ? (void *)&((event)->pwwwwwwwwwwww.w4) \
   : ((i) == 5) ? (void *)&((event)->pwwwwwwwwwwww.w5) \
   : ((i) == 6) ? (void *)&((event)->pwwwwwwwwwwww.w6) \
   : ((i) == 7) ? (void *)&((event)->pwwwwwwwwwwww.w7) \
   : ((i) == 8) ? (void *)&((event)->pwwwwwwwwwwww.w8) \
   : ((i) == 9) ? (void *)&((event)->pwwwwwwwwwwww.w9) \
   : ((i) == 10) ? (void *)&((event)->pwwwwwwwwwwww.w10) \
   : ((i) == 11) ? (void *)&((event)->pwwwwwwwwwwww.w11) \
   : ((i) == 12) ? (void *)&((event)->pwwwwwwwwwwww.w12) \
   : NULL)

typedef struct {
  Word code;
  Word clock;
  unsigned u0;
  unsigned u1;
  void * p2;
  Addr a3;
} EventUUPAStruct;

#define EVENT_UUPA_FIELD_PTR(event, i) \
  (((i) == 0) ? (void *)&((event)->uupa.u0) \
   : ((i) == 1) ? (void *)&((event)->uupa.u1) \
   : ((i) == 2) ? (void *)&((event)->uupa.p2) \
   : ((i) == 3) ? (void *)&((event)->uupa.a3) \
   : NULL)

typedef struct {
  Word code;
  Word clock;
  unsigned u0;
  unsigned u1;
  void * p2;
  void * p3;
} EventUUPPStruct;

#define EVENT_UUPP_FIELD_PTR(event, i) \
  (((i) == 0) ? (void *)&((event)->uupp.u0) \
   : ((i) == 1) ? (void *)&((event)->uupp.u1) \
   : ((i) == 2) ? (void *)&((event)->uupp.p2) \
   : ((i) == 3) ? (void *)&((event)->uupp.p3) \
   : NULL)

typedef struct {
  Word code;
  Word clock;
  unsigned u0;
  unsigned u1;
  void * p2;
  void * p3;
  void * p4;
} EventUUPPPStruct;

#define EVENT_UUPPP_FIELD_PTR(event, i) \
  (((i) == 0) ? (void *)&((event)->uuppp.u0) \
   : ((i) == 1) ? (void *)&((event)->uuppp.u1) \
   : ((i) == 2) ? (void *)&((event)->uuppp.p2) \
   : ((i) == 3) ? (void *)&((event)->uuppp.p3) \
   : ((i) == 4) ? (void *)&((event)->uuppp.p4) \
   : NULL)

typedef struct {
  Word code;
  Word clock;
  Word w0;
  EventStringStruct s1;
} EventWSStruct;

#define EVENT_WS_FIELD_PTR(event, i) \
  (((i) == 0) ? (void *)&((event)->ws.w0) \
   : ((i) == 1) ? (void *)&((event)->ws.s1) \
   : NULL)


typedef union {
  Event0Struct any;
  EventAStruct a;
  EventAWStruct aw;
  EventPStruct p;
  EventPAAStruct paa;
  EventPAWStruct paw;
  EventPAWAStruct pawa;
  EventPDDWWWStruct pddwww;
  EventPPStruct pp;
  EventPPAUStruct ppau;
  EventPPAWPStruct ppawp;
  EventPPPStruct ppp;
  EventPPPUStruct pppu;
  EventPPUStruct ppu;
  EventPPWAWStruct ppwaw;
  EventPWStruct pw;
  EventPWAWStruct pwaw;
  EventPWPStruct pwp;
  EventPWWStruct pww;
  EventPWWWWDDStruct pwwwwdd;
  EventPWWWWWWWWWStruct pwwwwwwwww;
  EventPWWWWWWWWWWWWStruct pwwwwwwwwwwww;
  EventUUPAStruct uupa;
  EventUUPPStruct uupp;
  EventUUPPPStruct uuppp;
  EventWSStruct ws;
} EventUnion;


#define EVENT_0(type) \
  EVENT_BEGIN(type) \
  EVENT_END(type, 0, sizeof(Event0Struct))

#define EVENT_A(type, _a0) \
  EVENT_BEGIN(type) \
    EventMould.a.a0 = (_a0); \
  EVENT_END(type, A, sizeof(EventAStruct))

#define EVENT_AW(type, _a0, _w1) \
  EVENT_BEGIN(type) \
    EventMould.aw.a0 = (_a0); \
    EventMould.aw.w1 = (_w1); \
  EVENT_END(type, AW, sizeof(EventAWStruct))

#define EVENT_P(type, _p0) \
  EVENT_BEGIN(type) \
    EventMould.p.p0 = (_p0); \
  EVENT_END(type, P, sizeof(EventPStruct))

#define EVENT_PAA(type, _p0, _a1, _a2) \
  EVENT_BEGIN(type) \
    EventMould.paa.p0 = (_p0); \
    EventMould.paa.a1 = (_a1); \
    EventMould.paa.a2 = (_a2); \
  EVENT_END(type, PAA, sizeof(EventPAAStruct))

#define EVENT_PAW(type, _p0, _a1, _w2) \
  EVENT_BEGIN(type) \
    EventMould.paw.p0 = (_p0); \
    EventMould.paw.a1 = (_a1); \
    EventMould.paw.w2 = (_w2); \
  EVENT_END(type, PAW, sizeof(EventPAWStruct))

#define EVENT_PAWA(type, _p0, _a1, _w2, _a3) \
  EVENT_BEGIN(type) \
    EventMould.pawa.p0 = (_p0); \
    EventMould.pawa.a1 = (_a1); \
    EventMould.pawa.w2 = (_w2); \
    EventMould.pawa.a3 = (_a3); \
  EVENT_END(type, PAWA, sizeof(EventPAWAStruct))

#define EVENT_PDDWWW(type, _p0, _d1, _d2, _w3, _w4, _w5) \
  EVENT_BEGIN(type) \
    EventMould.pddwww.p0 = (_p0); \
    EventMould.pddwww.d1 = (_d1); \
    EventMould.pddwww.d2 = (_d2); \
    EventMould.pddwww.w3 = (_w3); \
    EventMould.pddwww.w4 = (_w4); \
    EventMould.pddwww.w5 = (_w5); \
  EVENT_END(type, PDDWWW, sizeof(EventPDDWWWStruct))

#define EVENT_PP(type, _p0, _p1) \
  EVENT_BEGIN(type) \
    EventMould.pp.p0 = (_p0); \
    EventMould.pp.p1 = (_p1); \
  EVENT_END(type, PP, sizeof(EventPPStruct))

#define EVENT_PPAU(type, _p0, _p1, _a2, _u3) \
  EVENT_BEGIN(type) \
    EventMould.ppau.p0 = (_p0); \
    EventMould.ppau.p1 = (_p1); \
    EventMould.ppau.a2 = (_a2); \
    EventMould.ppau.u3 = (_u3); \
  EVENT_END(type, PPAU, sizeof(EventPPAUStruct))

#define EVENT_PPAWP(type, _p0, _p1, _a2, _w3, _p4) \
  EVENT_BEGIN(type) \
    EventMould.ppawp.p0 = (_p0); \
    EventMould.ppawp.p1 = (_p1); \
    EventMould.ppawp.a2 = (_a2); \
    EventMould.ppawp.w3 = (_w3); \
    EventMould.ppawp.p4 = (_p4); \
  EVENT_END(type, PPAWP, sizeof(EventPPAWPStruct))

#define EVENT_PPP(type, _p0, _p1, _p2) \
  EVENT_BEGIN(type) \
    EventMould.ppp.p0 = (_p0); \
    EventMould.ppp.p1 = (_p1); \
    EventMould.ppp.p2 = (_p2); \
  EVENT_END(type, PPP, sizeof(EventPPPStruct))

#define EVENT_PPPU(type, _p0, _p1, _p2, _u3) \
  EVENT_BEGIN(type) \
    EventMould.pppu.p0 = (_p0); \
    EventMould.pppu.p1 = (_p1); \
    EventMould.pppu.p2 = (_p2); \
    EventMould.pppu.u3 = (_u3); \
  EVENT_END(type, PPPU, sizeof(EventPPPUStruct))

#define EVENT_PPU(type, _p0, _p1, _u2) \
  EVENT_BEGIN(type) \
    EventMould.ppu.p0 = (_p0); \
    EventMould.ppu.p1 = (_p1); \
    EventMould.ppu.u2 = (_u2); \
  EVENT_END(type, PPU, sizeof(EventPPUStruct))

#define EVENT_PPWAW(type, _p0, _p1, _w2, _a3, _w4) \
  EVENT_BEGIN(type) \
    EventMould.ppwaw.p0 = (_p0); \
    EventMould.ppwaw.p1 = (_p1); \
    EventMould.ppwaw.w2 = (_w2); \
    EventMould.ppwaw.a3 = (_a3); \
    EventMould.ppwaw.w4 = (_w4); \
  EVENT_END(type, PPWAW, sizeof(EventPPWAWStruct))

#define EVENT_PW(type, _p0, _w1) \
  EVENT_BEGIN(type) \
    EventMould.pw.p0 = (_p0); \
    EventMould.pw.w1 = (_w1); \
  EVENT_END(type, PW, sizeof(EventPWStruct))

#define EVENT_PWAW(type, _p0, _w1, _a2, _w3) \
  EVENT_BEGIN(type) \
    EventMould.pwaw.p0 = (_p0); \
    EventMould.pwaw.w1 = (_w1); \
    EventMould.pwaw.a2 = (_a2); \
    EventMould.pwaw.w3 = (_w3); \
  EVENT_END(type, PWAW, sizeof(EventPWAWStruct))

#define EVENT_PWP(type, _p0, _w1, _p2) \
  EVENT_BEGIN(type) \
    EventMould.pwp.p0 = (_p0); \
    EventMould.pwp.w1 = (_w1); \
    EventMould.pwp.p2 = (_p2); \
  EVENT_END(type, PWP, sizeof(EventPWPStruct))

#define EVENT_PWW(type, _p0, _w1, _w2) \
  EVENT_BEGIN(type) \
    EventMould.pww.p0 = (_p0); \
    EventMould.pww.w1 = (_w1); \
    EventMould.pww.w2 = (_w2); \
  EVENT_END(type, PWW, sizeof(EventPWWStruct))

#define EVENT_PWWWWDD(type, _p0, _w1, _w2, _w3, _w4, _d5, _d6) \
  EVENT_BEGIN(type) \
    EventMould.pwwwwdd.p0 = (_p0); \
    EventMould.pwwwwdd.w1 = (_w1); \
    EventMould.pwwwwdd.w2 = (_w2); \
    EventMould.pwwwwdd.w3 = (_w3); \
    EventMould.pwwwwdd.w4 = (_w4); \
    EventMould.pwwwwdd.d5 = (_d5); \
    EventMould.pwwwwdd.d6 = (_d6); \
  EVENT_END(type, PWWWWDD, sizeof(EventPWWWWDDStruct))

#define EVENT_PWWWWWWWWW(type, _p0, _w1, _w2, _w3, _w4, _w5, _w6, _w7, _w8, _w9) \
  EVENT_BEGIN(type) \
    EventMould.pwwwwwwwww.p0 = (_p0); \
    EventMould.pwwwwwwwww.w1 = (_w1); \
    EventMould.pwwwwwwwww.w2 = (_w2); \
    EventMould.pwwwwwwwww.w3 = (_w3); \
    EventMould.pwwwwwwwww.w4 = (_w4); \
    EventMould.pwwwwwwwww.w5 = (_w5); \
    EventMould.pwwwwwwwww.w6 = (_w6); \
    EventMould.pwwwwwwwww.w7 = (_w7); \
    EventMould.pwwwwwwwww.w8 = (_w8); \
    EventMould.pwwwwwwwww.w9 = (_w9); \
  EVENT_END(type, PWWWWWWWWW, sizeof(EventPWWWWWWWWWStruct))

#define EVENT_PWWWWWWWWWWWW(type, _p0, _w1, _w2, _w3, _w4, _w5, _w6, _w7, _w8, _w9, _w10, _w11, _w12) \
  EVENT_BEGIN(type) \
    EventMould.pwwwwwwwwwwww.p0 = (_p0); \
    EventMould.pwwwwwwwwwwww.w1 = (_w1); \
    EventMould.pwwwwwwwwwwww.w2 = (_w2); \
    EventMould.pwwwwwwwwwwww.w3 = (_w3); \
    EventMould.pwwwwwwwwwwww.w4 = (_w4); \
    EventMould.pwwwwwwwwwwww.w5 = (_w5); \
    EventMould.pwwwwwwwwwwww.w6 = (_w6); \
    EventMould.pwwwwwwwwwwww.w7 = (_w7); \
    EventMould.pwwwwwwwwwwww.w8 = (_w8); \
    EventMould.pwwwwwwwwwwww.w9 = (_w9); \
    EventMould.pwwwwwwwwwwww.w10 = (_w10); \
    EventMould.pwwwwwwwwwwww.w11 = (_w11); \
    EventMould.pwwwwwwwwwwww.w12 = (_w12); \
  EVENT_END(type, PWWWWWWWWWWWW, sizeof(EventPWWWWWWWWWWWWStruct))

#define EVENT_UUPA(type, _u0, _u1, _p2, _a3) \
  EVENT_BEGIN(type) \
    EventMould.uupa.u0 = (_u0); \
    EventMould.uupa.u1 = (_u1); \
    EventMould.uupa.p2 = (_p2); \
    EventMould.uupa.a3 = (_a3); \
  EVENT_END(type, UUPA, sizeof(EventUUPAStruct))

#define EVENT_UUPP(type, _u0, _u1, _p2, _p3) \
  EVENT_BEGIN(type) \
    EventMould.uupp.u0 = (_u0); \
    EventMould.uupp.u1 = (_u1); \
    EventMould.uupp.p2 = (_p2); \
    EventMould.uupp.p3 = (_p3); \
  EVENT_END(type, UUPP, sizeof(EventUUPPStruct))

#define EVENT_UUPPP(type, _u0, _u1, _p2, _p3, _p4) \
  EVENT_BEGIN(type) \
    EventMould.uuppp.u0 = (_u0); \
    EventMould.uuppp.u1 = (_u1); \
    EventMould.uuppp.p2 = (_p2); \
    EventMould.uuppp.p3 = (_p3); \
    EventMould.uuppp.p4 = (_p4); \
  EVENT_END(type, UUPPP, sizeof(EventUUPPPStruct))

#define EVENT_WS(type, _w0, _s1) \
  EVENT_BEGIN(type) \
    const char *_s; \
    size_t _string_length; \
    EventMould.ws.w0 = (_w0); \
    _s = (_s1); \
    _string_length = StringLength(_s); \
    AVER(_string_length < EventStringLengthMAX); \
    EventMould.ws.s1.len = _string_length; \
    mps_lib_memcpy(EventMould.ws.s1.str, _s, _string_length); \
  EVENT_END(type, WS, \
            offsetof(EventWSStruct, s1.str) + _string_length)

#define EventFormat0 0
#define EventFormatA 1
#define EventFormatAW 2
#define EventFormatP 3
#define EventFormatPAA 4
#define EventFormatPAW 5
#define EventFormatPAWA 6
#define EventFormatPDDWWW 7
#define EventFormatPP 8
#define EventFormatPPAU 9
#define EventFormatPPAWP 10
#define EventFormatPPP 11
#define EventFormatPPPU 12
#define EventFormatPPU 13
#define EventFormatPPWAW 14
#define EventFormatPW 15
#define EventFormatPWAW 16
#define EventFormatPWP 17
#define EventFormatPWW 18
#define EventFormatPWWWWDD 19
#define EventFormatPWWWWWWWWW 20
#define EventFormatPWWWWWWWWWWWW 21
#define EventFormatUUPA 22
#define EventFormatUUPP 23
#define EventFormatUUPPP 24
#define EventFormatWS 25

#else /* EVENT not */

#define EVENT_0(type) NOOP
#define EVENT_A(type, p0) NOOP
#define EVENT_AW(type, p0, p1) NOOP
#define EVENT_P(type, p0) NOOP
#define EVENT_PAA(type, p0, p1, p2) NOOP
#define EVENT_PAW(type, p0, p1, p2) NOOP
#define EVENT_PAWA(type, p0, p1, p2, p3) NOOP
#define EVENT_PDDWWW(type, p0, p1, p2, p3, p4, p5) NOOP
#define EVENT_PP(type, p0, p1) NOOP
#define EVENT_PPAU(type, p0, p1, p2, p3) NOOP
#define EVENT_PPAWP(type, p0, p1, p2, p3, p4) NOOP
#define EVENT_PPP(type, p0, p1, p2) NOOP
#define EVENT_PPPU(type, p0, p1, p2, p3) NOOP
#define EVENT_PPU(type, p0, p1, p2) NOOP
#define EVENT_PPWAW(type, p0, p1, p2, p3, p4) NOOP
#define EVENT_PW(type, p0, p1) NOOP
#define EVENT_PWAW(type, p0, p1, p2, p3) NOOP
#define EVENT_PWP(type, p0, p1, p2) NOOP
#define EVENT_PWW(type, p0, p1, p2) NOOP
#define EVENT_PWWWWDD(type, p0, p1, p2, p3, p4, p5, p6) NOOP
#define EVENT_PWWWWWWWWW(type, p0, p1, p2, p3, p4, p5, p6, p7, p8, p9) NOOP
#define EVENT_PWWWWWWWWWWWW(type, p0, p1, p2, p3, p4, p5, p6, p7, p8, p9, p10, p11, p12) NOOP
#define EVENT_UUPA(type, p0, p1, p2, p3) NOOP
#define EVENT_UUPP(type, p0, p1, p2, p3) NOOP
#define EVENT_UUPPP(type, p0, p1, p2, p3, p4) NOOP
#define EVENT_WS(type, p0, p1) NOOP

#endif /* EVENT */
