/* impl.h.eventgen -- Automatic event header
 *
 * Copyright (C) 1997 Harlequin Group, all rights reserved.
 * $HopeName: MMsrc!eventgen.h(MMdevel_event_format.1) $
 *
 * !!! DO NOT EDIT THIS FILE !!!
 * This file was generated by eventgen.pl
 */

#ifdef EVENT

typedef struct {
  Word code;
  Word length;
  Word clock;
} EventStruct;

typedef struct {
  Word code;
  Word length;
  Word clock;
  Addr a0;
} EventAStruct;

typedef struct {
  Word code;
  Word length;
  Word clock;
  void *p0;
} EventPStruct;

typedef struct {
  Word code;
  Word length;
  Word clock;
  void *p0;
  Addr a1;
  Addr a2;
} EventPAAStruct;

typedef struct {
  Word code;
  Word length;
  Word clock;
  void *p0;
  Addr a1;
  unsigned u2;
} EventPAUStruct;

typedef struct {
  Word code;
  Word length;
  Word clock;
  void *p0;
  void *p1;
} EventPPStruct;

typedef struct {
  Word code;
  Word length;
  Word clock;
  void *p0;
  void *p1;
  Addr a2;
  Addr a3;
} EventPPAAStruct;

typedef struct {
  Word code;
  Word length;
  Word clock;
  void *p0;
  void *p1;
  Addr a2;
  unsigned u3;
} EventPPAUStruct;

typedef struct {
  Word code;
  Word length;
  Word clock;
  void *p0;
  void *p1;
  Addr a2;
  unsigned u3;
  void *p4;
} EventPPAUPStruct;

typedef struct {
  Word code;
  Word length;
  Word clock;
  void *p0;
  void *p1;
  void *p2;
} EventPPPStruct;

typedef struct {
  Word code;
  Word length;
  Word clock;
  void *p0;
  void *p1;
  void *p2;
  void *p3;
} EventPPPPStruct;

typedef struct {
  Word code;
  Word length;
  Word clock;
  void *p0;
  void *p1;
  void *p2;
  unsigned u3;
} EventPPPUStruct;

typedef struct {
  Word code;
  Word length;
  Word clock;
  void *p0;
  void *p1;
  unsigned u2;
} EventPPUStruct;

typedef struct {
  Word code;
  Word length;
  Word clock;
  void *p0;
  void *p1;
  unsigned u2;
  Addr a3;
  unsigned u4;
} EventPPUAUStruct;

typedef struct {
  Word code;
  Word length;
  Word clock;
  unsigned u0;
  unsigned u1;
  void *p2;
  void *p3;
  void *p4;
} EventUUPPPStruct;


typedef union {
  EventStruct any;
  EventAStruct a;
  EventPStruct p;
  EventPAAStruct paa;
  EventPAUStruct pau;
  EventPPStruct pp;
  EventPPAAStruct ppaa;
  EventPPAUStruct ppau;
  EventPPAUPStruct ppaup;
  EventPPPStruct ppp;
  EventPPPPStruct pppp;
  EventPPPUStruct pppu;
  EventPPUStruct ppu;
  EventPPUAUStruct ppuau;
  EventUUPPPStruct uuppp;
} EventUnion;


#define EVENT_0(type) \
  EVENT_BEGIN(type, sizeof(EventStruct)) \
  EVENT_END(type, sizeof(EventStruct))

#define EVENT_A(type, _a0) \
  EVENT_BEGIN(type, sizeof(EventAStruct)) \
    Event.a.a0 = (_a0); \
  EVENT_END(type, sizeof(EventAStruct))

#define EVENT_P(type, _p0) \
  EVENT_BEGIN(type, sizeof(EventPStruct)) \
    Event.p.p0 = (_p0); \
  EVENT_END(type, sizeof(EventPStruct))

#define EVENT_PAA(type, _p0, _a1, _a2) \
  EVENT_BEGIN(type, sizeof(EventPAAStruct)) \
    Event.paa.p0 = (_p0); \
    Event.paa.a1 = (_a1); \
    Event.paa.a2 = (_a2); \
  EVENT_END(type, sizeof(EventPAAStruct))

#define EVENT_PAU(type, _p0, _a1, _u2) \
  EVENT_BEGIN(type, sizeof(EventPAUStruct)) \
    Event.pau.p0 = (_p0); \
    Event.pau.a1 = (_a1); \
    Event.pau.u2 = (_u2); \
  EVENT_END(type, sizeof(EventPAUStruct))

#define EVENT_PP(type, _p0, _p1) \
  EVENT_BEGIN(type, sizeof(EventPPStruct)) \
    Event.pp.p0 = (_p0); \
    Event.pp.p1 = (_p1); \
  EVENT_END(type, sizeof(EventPPStruct))

#define EVENT_PPAA(type, _p0, _p1, _a2, _a3) \
  EVENT_BEGIN(type, sizeof(EventPPAAStruct)) \
    Event.ppaa.p0 = (_p0); \
    Event.ppaa.p1 = (_p1); \
    Event.ppaa.a2 = (_a2); \
    Event.ppaa.a3 = (_a3); \
  EVENT_END(type, sizeof(EventPPAAStruct))

#define EVENT_PPAU(type, _p0, _p1, _a2, _u3) \
  EVENT_BEGIN(type, sizeof(EventPPAUStruct)) \
    Event.ppau.p0 = (_p0); \
    Event.ppau.p1 = (_p1); \
    Event.ppau.a2 = (_a2); \
    Event.ppau.u3 = (_u3); \
  EVENT_END(type, sizeof(EventPPAUStruct))

#define EVENT_PPAUP(type, _p0, _p1, _a2, _u3, _p4) \
  EVENT_BEGIN(type, sizeof(EventPPAUPStruct)) \
    Event.ppaup.p0 = (_p0); \
    Event.ppaup.p1 = (_p1); \
    Event.ppaup.a2 = (_a2); \
    Event.ppaup.u3 = (_u3); \
    Event.ppaup.p4 = (_p4); \
  EVENT_END(type, sizeof(EventPPAUPStruct))

#define EVENT_PPP(type, _p0, _p1, _p2) \
  EVENT_BEGIN(type, sizeof(EventPPPStruct)) \
    Event.ppp.p0 = (_p0); \
    Event.ppp.p1 = (_p1); \
    Event.ppp.p2 = (_p2); \
  EVENT_END(type, sizeof(EventPPPStruct))

#define EVENT_PPPP(type, _p0, _p1, _p2, _p3) \
  EVENT_BEGIN(type, sizeof(EventPPPPStruct)) \
    Event.pppp.p0 = (_p0); \
    Event.pppp.p1 = (_p1); \
    Event.pppp.p2 = (_p2); \
    Event.pppp.p3 = (_p3); \
  EVENT_END(type, sizeof(EventPPPPStruct))

#define EVENT_PPPU(type, _p0, _p1, _p2, _u3) \
  EVENT_BEGIN(type, sizeof(EventPPPUStruct)) \
    Event.pppu.p0 = (_p0); \
    Event.pppu.p1 = (_p1); \
    Event.pppu.p2 = (_p2); \
    Event.pppu.u3 = (_u3); \
  EVENT_END(type, sizeof(EventPPPUStruct))

#define EVENT_PPU(type, _p0, _p1, _u2) \
  EVENT_BEGIN(type, sizeof(EventPPUStruct)) \
    Event.ppu.p0 = (_p0); \
    Event.ppu.p1 = (_p1); \
    Event.ppu.u2 = (_u2); \
  EVENT_END(type, sizeof(EventPPUStruct))

#define EVENT_PPUAU(type, _p0, _p1, _u2, _a3, _u4) \
  EVENT_BEGIN(type, sizeof(EventPPUAUStruct)) \
    Event.ppuau.p0 = (_p0); \
    Event.ppuau.p1 = (_p1); \
    Event.ppuau.u2 = (_u2); \
    Event.ppuau.a3 = (_a3); \
    Event.ppuau.u4 = (_u4); \
  EVENT_END(type, sizeof(EventPPUAUStruct))

#define EVENT_UUPPP(type, _u0, _u1, _p2, _p3, _p4) \
  EVENT_BEGIN(type, sizeof(EventUUPPPStruct)) \
    Event.uuppp.u0 = (_u0); \
    Event.uuppp.u1 = (_u1); \
    Event.uuppp.p2 = (_p2); \
    Event.uuppp.p3 = (_p3); \
    Event.uuppp.p4 = (_p4); \
  EVENT_END(type, sizeof(EventUUPPPStruct))


#else /* EVENT not */

#define EVENT_0(type)    NOOP
#define EVENT_A(type, p0)    NOOP
#define EVENT_P(type, p0)    NOOP
#define EVENT_PAA(type, p0, p1, p2)    NOOP
#define EVENT_PAU(type, p0, p1, p2)    NOOP
#define EVENT_PP(type, p0, p1)    NOOP
#define EVENT_PPAA(type, p0, p1, p2, p3)    NOOP
#define EVENT_PPAU(type, p0, p1, p2, p3)    NOOP
#define EVENT_PPAUP(type, p0, p1, p2, p3, p4)    NOOP
#define EVENT_PPP(type, p0, p1, p2)    NOOP
#define EVENT_PPPP(type, p0, p1, p2, p3)    NOOP
#define EVENT_PPPU(type, p0, p1, p2, p3)    NOOP
#define EVENT_PPU(type, p0, p1, p2)    NOOP
#define EVENT_PPUAU(type, p0, p1, p2, p3, p4)    NOOP
#define EVENT_UUPPP(type, p0, p1, p2, p3, p4)    NOOP

#endif /* EVENT */
