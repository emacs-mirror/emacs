@c -*-texinfo-*-
@c This is part of the GNU Emacs Lisp Reference Manual.
@c Copyright (C) 1999, 2002--2023 Free Software Foundation, Inc.
@c See the file elisp.texi for copying conditions.

@c This node must have no pointers.

@node Antinews
@appendix Emacs 28 Antinews
@c Update the elisp.texi Antinews menu entry with the above version number.

For those users who live backwards in time, here is information about
downgrading to Emacs version 28.2.  We hope you will enjoy the greater
simplicity that results from the absence of many @w{Emacs
@value{EMACSVER}} features.

@itemize @bullet
@item
The implementation of overlays is back to its simple, time-proven
storage in a pair of linear linked lists centered around some buffer
position.  No more fancy interval trees and suchlikes.  Lisp programs
that use overlays once again need to recenter overlays around the
buffer position of interest, and display-related features should again
make sure they don't use too many overlays in a buffer, lest redisplay
will be too slow.

@item
Several functions stopped the annoying conversion of quotes and key
sequences by no longer calling @code{substitute-command-keys}.  One
prominent example is @code{format-prompt} and all its many callers.
This makes the strings they produce much more predictable, returning
to you, the Lisp programmer, control on which punctuation characters
will appear in the text presented to the users.  For similar reasons,
the @code{substitute-quotes} function was deleted.

@item
The venerable @code{buffer-modified-p} function again reliably returns
either @code{nil} or @code{t}, not any other confusing values.

@item
The support for @samp{medium} weight of fonts was dropped.  Emacs now
considers @samp{medium} and @samp{regular} weights to be the same.  We
believe this will simplify your font setup, since there's no longer a
need to worry about fonts that support @samp{regular} weight, but not
the @samp{medium} one, or vice versa: either one will do!

@item
To reduce the amount of code in Emacs related to unimportant features,
we've removed the function @code{compiled-function-p}.  Lisp programs
are expected to test explicitly for the relevant types of function
objects: built-in, byte-compiled, and natively-compiled.  For the same
reasons we deleted the functions @code{pos-bol}, @code{pos-eol},
@code{file-attribute-file-identifier}, and quite a few others.  We
don't expect anyone to miss those fancy functions.

@item
The timeout used by @code{x-show-tip} can no longer be specified by
Lisp programs; it is hard-coded in the function.  This will lead to a
simpler, easier maintained code, and no one should want to control the
timeout after which the tip pops down.

@item
The macro @code{setopt} was deleted; use @code{customize-variable}
instead, or invoke the @code{:set} function from Lisp.

@item
We removed the @code{lisp-directory} variable, as the value can be
easily deduced from other similar variables, like
@code{installation-directory} and @code{source-directory}, each one
when it's relevant.

@item
To simplify code and reduce complexity, we deleted the functions
@code{get-display-property} and @code{add-display-text-property}; use
the generic @code{get-text-property} and @code{put-text-property}
instead.

@item
Support for pinch input events and for modern drag-and-drop
functionality on X was dropped.  As you move back in time, these
facilities will become less and less important, and will soon enough
disappear, so there's no reason to keep them in Emacs.

@item
To keep Emacs clean and elegant, we've removed the @file{textsec.el}
library, with its facilities for checking whether some text is
``suspicious''.  We consider our users smart enough to detect
maliciously modified text by just looking at it or by moving the
cursor across it, and the whole idea that someone would wish to
deliberately deceive Emacs users ridiculous and unworthy of
complicating our elegant text-processing and display capabilities.

@item
The functions @code{keymap-set}, @code{keymap-global-set},
@code{keymap-local-set}, @code{keymap-substitute},
@code{keymap-lookup}, and some others were deleted.  We have found the
traditional @code{define-key}, @code{global-set-key},
@code{local-set-key}, @code{substitute-key-definition}, and
@code{key-binding} more than enough, and their minor inconsistencies
in the syntax of keys they accept a source of endless fun in Emacs
Lisp programming.  Why make Emacs programming a dull place?  For the
same reasons we deleted @code{key-valid-p}, since we consider the
permissive nature of @code{kbd} more in the spirit of Emacs Lisp.

@item
Yanking of anything but plain text from other applications becomes
more and more an unnecessary feature as you move back in time, so we
dropped support for pasting media like HTML and images via the
clipboard.  If you @i{really} need to yank those into an Emacs buffer,
you can go via a disk file.

@item
We removed unnecessary functions @code{string-pixel-width} and
@code{string-glyph-split}, as we consider it inappropriate for Lisp
programs to do display layout calculations, where these functions come
in handy.  Display is for the display engine, written in C, and should
stay there!

@item
Various new Xwidget functions, such as
@code{xwidget-perform-lispy-event}, @code{xwidget-webkit-load-html},
and @code{xwidget-webkit-back-forward-list}, were deleted as part of
our continuing effort to gradually delete the entire Xwidget
functionality in some previous release of Emacs.

@item
Setting the @code{:stderr} property of a process in a
@code{make-process} call once again forces the process's connection to
use pipes, not ptys, for all the standard streams --- a considerable
simplification of this complex interface.

@item
To keep the amount of Lisp functions from growing out of control, we
deleted @code{string-equal-ignore-case}.  Use @code{compare-strings}
instead.

Several features that complicated the byte compiler have been removed:

@itemize @minus
@item
The warnings about quoting mistakes in documentation strings.  You are
expected to find such mistakes yourself, by eyeballing the resulting
@file{*Help*} buffer display.

@item
The warnings about malformed @code{defcustom} types, like
double-quoting symbols in @code{choice} lists.
@end itemize

@item
The macro @code{with-buffer-unmodified-if-unchanged} was deleted.
Lisp programs that need to leave the buffer unmodified in these cases
can always compare the text before and after the modifications.

@item
The functions @code{string-edit} and @code{read-string-from-buffer}
were removed, as we consider the fun of programming them anew every
time an important part of the education of each Emacs Lisp developer.

@item
We deleted the function @code{readablep} and the related variable
@code{print-unreadable-function}, since no one is supposed to want to
print unreadable Lisp objects.

@item
The facility for storing multisession variables was deleted as an
unnecessary complication.  With it are gone @code{multisession-value},
@code{define-multisession-variable}, and
@code{list-multisession-values}.

@item
The support for the @code{cursor-face} text property was dropped.  We
consider the rest of the faces adequate for supporting this
functionality.

@item
The function @code{tooltip-show} dropped support for optional face
arguments @code{text-face} and @code{default-face} that allow fancy
control of the face of the tip text and top frame colors.  We decided
that tooltips should all look the same, to prevent user confusion.

@item
As part of the ongoing quest for simplicity, many other functions and
variables have been eliminated.  Other functions and variables, that
were declared obsolete since Emacs 24, have been added back, in
preparation for releasing Emacs 24 in some distant past.
@end itemize
