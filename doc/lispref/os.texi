@c -*-texinfo-*-
@c This is part of the GNU Emacs Lisp Reference Manual.
@c Copyright (C) 1990--1995, 1998--1999, 2001--2020 Free Software
@c Foundation, Inc.
@c See the file elisp.texi for copying conditions.
@node System Interface
@chapter Operating System Interface

  This chapter is about starting and getting out of Emacs, access to
values in the operating system environment, and terminal input, output.

  @xref{Building Emacs}, for related information.  @xref{Display}, for
additional operating system status information pertaining to the
terminal and the screen.

@menu
* Starting Up::         Customizing Emacs startup processing.
* Getting Out::         How exiting works (permanent or temporary).
* System Environment::  Distinguish the name and kind of system.
* User Identification:: Finding the name and user id of the user.
* Time of Day::         Getting the current time.
* Time Zone Rules::     Rules for time zones and daylight saving time.
* Time Conversion::     Converting among timestamp forms.
* Time Parsing::        Converting timestamps to text and vice versa.
* Processor Run Time::  Getting the run time used by Emacs.
* Time Calculations::   Adding, subtracting, comparing times, etc.
* Timers::              Setting a timer to call a function at a certain time.
* Idle Timers::         Setting a timer to call a function when Emacs has
                          been idle for a certain length of time.
* Terminal Input::      Accessing and recording terminal input.
* Terminal Output::     Controlling and recording terminal output.
* Sound Output::        Playing sounds on the computer's speaker.
* X11 Keysyms::         Operating on key symbols for X Windows.
* Batch Mode::          Running Emacs without terminal interaction.
* Session Management::  Saving and restoring state with X Session Management.
* Desktop Notifications:: Desktop notifications.
* File Notifications::  File notifications.
* Dynamic Libraries::   On-demand loading of support libraries.
* Security Considerations:: Running Emacs in an unfriendly environment.
@end menu

@node Starting Up
@section Starting Up Emacs

  This section describes what Emacs does when it is started, and how you
can customize these actions.

@menu
* Startup Summary::         Sequence of actions Emacs performs at startup.
* Init File::               Details on reading the init file.
* Terminal-Specific::       How the terminal-specific Lisp file is read.
* Command-Line Arguments::  How command-line arguments are processed,
                              and how you can customize them.
@end menu

@node Startup Summary
@subsection Summary: Sequence of Actions at Startup
@cindex initialization of Emacs
@cindex startup of Emacs
@cindex @file{startup.el}

  When Emacs is started up, it performs the following operations
(see @code{normal-top-level} in @file{startup.el}):

@enumerate
@item
It adds subdirectories to @code{load-path}, by running the file named
@file{subdirs.el} in each directory in the list.  Normally, this file
adds the directory's subdirectories to the list, and those are scanned
in their turn.  The files @file{subdirs.el} are normally generated
automatically when Emacs is installed.

@item
It loads any @file{leim-list.el} that it finds in the @code{load-path}
directories.  This file is intended for registering input methods.
The search is only for any personal @file{leim-list.el} files that you
may have created; it skips the directories containing the standard Emacs
libraries (these should contain only a single @file{leim-list.el} file,
which is compiled into the Emacs executable).

@vindex before-init-time
@item
It sets the variable @code{before-init-time} to the value of
@code{current-time} (@pxref{Time of Day}).  It also sets
@code{after-init-time} to @code{nil}, which signals to Lisp programs
that Emacs is being initialized.

@c set-locale-environment
@item
It sets the language environment and the terminal coding system,
if requested by environment variables such as @env{LANG}.

@item
It does some basic parsing of the command-line arguments.

@item
It loads your early init file (@pxref{Early Init File,,, emacs, The
GNU Emacs Manual}).  This is not done if the options @samp{-q},
@samp{-Q}, or @samp{--batch} were specified.  If the @samp{-u} option
was specified, Emacs looks for the init file in that user's home
directory instead.

@item
It calls the function @code{package-activate-all} to activate any
optional Emacs Lisp package that has been installed.  @xref{Packaging
Basics}.  However, Emacs doesn't activate the packages when
@code{package-enable-at-startup} is @code{nil} or when it's started
with one of the options @samp{-q}, @samp{-Q}, or @samp{--batch}.  To
activate the packages in the latter case, @code{package-activate-all}
should be called explicitly (e.g., via the @samp{--funcall} option).

@vindex initial-window-system@r{, and startup}
@findex window-system-initialization
@item
If not running in batch mode, it initializes the window system that
the variable @code{initial-window-system} specifies (@pxref{Window
Systems, initial-window-system}).  The initialization function,
@code{window-system-initialization}, is a @dfn{generic function}
(@pxref{Generic Functions}) whose actual implementation is different
for each supported window system.  If the value of
@code{initial-window-system} is @var{windowsystem}, then the
appropriate implementation of the initialization function is defined
in the file @file{term/@var{windowsystem}-win.el}.  This file should
have been compiled into the Emacs executable when it was built.

@item
It runs the normal hook @code{before-init-hook}.

@item
If appropriate, it creates a graphical frame.  As part of creating the
graphical frame, it initializes the window system specified by
@code{initial-frame-alist} and @code{default-frame-alist}
(@pxref{Initial Parameters}) for the graphical frame, by calling the
@code{window-system-initialization} function for that window system.
This is not done in batch (noninteractive) or daemon mode.

@item
It initializes the initial frame's faces, and sets up the menu bar
and tool bar if needed.  If graphical frames are supported, it sets up
the tool bar even if the current frame is not a graphical one, since a
graphical frame may be created later on.

@item
It use @code{custom-reevaluate-setting} to re-initialize the members
of the list @code{custom-delayed-init-variables}.  These are any
pre-loaded user options whose default value depends on the run-time,
rather than build-time, context.
@xref{Building Emacs, custom-initialize-delay}.

@c @item
@c It registers the colors available for tty frames.

@item
It loads the library @file{site-start}, if it exists.  This is not
done if the options @samp{-Q} or @samp{--no-site-file} were specified.
@cindex @file{site-start.el}

@item
It loads your init file (@pxref{Init File}).  This is not done if the
options @samp{-q}, @samp{-Q}, or @samp{--batch} were specified.  If
the @samp{-u} option was specified, Emacs looks for the init file in
that user's home directory instead.

@item
It loads the library @file{default}, if it exists.  This is not done
if @code{inhibit-default-init} is non-@code{nil}, nor if the options
@samp{-q}, @samp{-Q}, or @samp{--batch} were specified.
@cindex @file{default.el}

@item
It loads your abbrevs from the file specified by
@code{abbrev-file-name}, if that file exists and can be read
(@pxref{Abbrev Files, abbrev-file-name}).  This is not done if the
option @samp{--batch} was specified.

@vindex after-init-time
@item
It sets the variable @code{after-init-time} to the value of
@code{current-time}.  This variable was set to @code{nil} earlier;
setting it to the current time signals that the initialization phase
is over, and, together with @code{before-init-time}, provides the
measurement of how long it took.

@item
It runs the normal hook @code{after-init-hook}.

@item
If the buffer @file{*scratch*} exists and is still in Fundamental mode
(as it should be by default), it sets its major mode according to
@code{initial-major-mode}.

@item
If started on a text terminal, it loads the terminal-specific
Lisp library (@pxref{Terminal-Specific}), and runs the hook
@code{tty-setup-hook}.  This is not done
in @code{--batch} mode, nor if @code{term-file-prefix} is @code{nil}.

@c Now command-line calls command-line-1.

@item
It displays the initial echo area message, unless you have suppressed
that with @code{inhibit-startup-echo-area-message}.

@item
It processes any command-line options that were not handled earlier.

@c This next one is back in command-line, but the remaining bits of
@c command-line-1 are not done if noninteractive.
@item
It now exits if the option @code{--batch} was specified.

@item
If the @file{*scratch*} buffer exists and is empty, it inserts
@code{(substitute-command-keys initial-scratch-message)} into that buffer.

@item
If @code{initial-buffer-choice} is a string, it visits the file (or
directory) with that name.  If it is a function, it calls the function
with no arguments and selects the buffer that it returns.  If one file
is given as a command line argument, that file is visited and its
buffer displayed alongside @code{initial-buffer-choice}.  If more than
one file is given, all of the files are visited and the @file{*Buffer
List*} buffer is displayed alongside @code{initial-buffer-choice}.

@ignore
@c I do not think this should be mentioned.  AFAICS it is just a dodge
@c around inhibit-startup-screen not being settable on a site-wide basis.
If it is @code{t}, it selects the @file{*scratch*} buffer.
@end ignore

@c To make things nice and confusing, the next three items can be
@c called from two places.  If displaying a startup screen, they are
@c called in command-line-1 before the startup screen is shown.
@c inhibit-startup-hooks is then set and window-setup-hook set to nil.
@c If not displaying a startup screen, they are called in
@c normal-top-level.
@c FIXME?  So it seems they can be called before or after the
@c daemon/session restore step?

@item
It runs @code{emacs-startup-hook}.

@item
It calls @code{frame-notice-user-settings}, which modifies the
parameters of the selected frame according to whatever the init files
specify.

@item
It runs @code{window-setup-hook}.  The only difference between this
hook and @code{emacs-startup-hook} is that this one runs after the
previously mentioned modifications to the frame parameters.

@item
@cindex startup screen
It displays the @dfn{startup screen}, which is a special buffer that
contains information about copyleft and basic Emacs usage.  This is
not done if @code{inhibit-startup-screen} or @code{initial-buffer-choice}
are non-@code{nil}, or if the @samp{--no-splash} or @samp{-Q} command-line
options were specified.

@c End of command-line-1.

@c Back to command-line from command-line-1.

@c This is the point at which we actually exit in batch mode, but the
@c last few bits of command-line-1 are not done in batch mode.

@item
If a daemon was requested, it calls @code{server-start}.
(On POSIX systems, if a background daemon was requested, it then
detaches from the controlling terminal.)  @xref{Emacs
Server,,, emacs, The GNU Emacs Manual}.

@item
If started by the X session manager, it calls
@code{emacs-session-restore} passing it as argument the ID of the
previous session.  @xref{Session Management}.

@c End of command-line.

@c Back to normal-top-level from command-line.

@end enumerate

@noindent
The following options affect some aspects of the startup sequence.

@defopt inhibit-startup-screen
This variable, if non-@code{nil}, inhibits the startup screen.  In
that case, Emacs typically displays the @file{*scratch*} buffer; but
see @code{initial-buffer-choice}, below.

Do not set this variable in the init file of a new user, or in a way
that affects more than one user, as that would prevent new users from
receiving information about copyleft and basic Emacs usage.

@vindex inhibit-startup-message
@vindex inhibit-splash-screen
@code{inhibit-startup-message} and @code{inhibit-splash-screen} are
aliases for this variable.
@end defopt

@defopt initial-buffer-choice
If non-@code{nil}, this variable is a string that specifies a file or
directory for Emacs to display after starting up, instead of the
startup screen.
If its value is a function, Emacs calls that function which must
return a buffer which is then displayed.
If its value is @code{t}, Emacs displays the @file{*scratch*} buffer.
@end defopt

@defopt inhibit-startup-echo-area-message
This variable controls the display of the startup echo area message.
You can suppress the startup echo area message by adding text with this
form to your init file:

@example
(setq inhibit-startup-echo-area-message
      "@var{your-login-name}")
@end example

Emacs explicitly checks for an expression as shown above in your init
file; your login name must appear in the expression as a Lisp string
constant.  You can also use the Customize interface.  Other methods of
setting @code{inhibit-startup-echo-area-message} to the same value do
not inhibit the startup message.  This way, you can easily inhibit the
message for yourself if you wish, but thoughtless copying of your init
file will not inhibit the message for someone else.
@end defopt

@defopt initial-scratch-message
This variable, if non-@code{nil}, should be a string, which is
treated as documentation to be
inserted into the @file{*scratch*} buffer when Emacs starts up.  If it
is @code{nil}, the @file{*scratch*} buffer is empty.
@end defopt

@noindent
The following command-line options affect some aspects of the startup
sequence.  @xref{Initial Options,,, emacs, The GNU Emacs Manual}.

@table @code
@item --no-splash
Do not display a splash screen.

@item --batch
Run without an interactive terminal.  @xref{Batch Mode}.

@item --daemon
@itemx --bg-daemon
@itemx --fg-daemon
Do not initialize any display; just start a server.
(A ``background'' daemon automatically runs in the background.)

@item --no-init-file
@itemx -q
Do not load either the init file, or the @file{default} library.

@item --no-site-file
Do not load the @file{site-start} library.

@item --quick
@itemx -Q
Equivalent to @samp{-q --no-site-file --no-splash}.
@c and --no-site-lisp, but let's not mention that here.
@end table


@node Init File
@subsection The Init File
@cindex init file
@cindex @file{.emacs}
@cindex @file{init.el}
@cindex @file{early-init.el}

  When you start Emacs, it normally attempts to load your @dfn{init
file}.  This is either a file named @file{.emacs} or @file{.emacs.el}
in your home directory, or a file named @file{init.el} in a
subdirectory named @file{.emacs.d} in your home directory.
@ignore
Whichever place you use, you can also compile the file (@pxref{Byte
Compilation}); then the actual file loaded will be @file{.emacs.elc}
or @file{init.elc}.
@end ignore

  The command-line switches @samp{-q}, @samp{-Q}, and @samp{-u}
control whether and where to find the init file; @samp{-q} (and the
stronger @samp{-Q}) says not to load an init file, while @samp{-u
@var{user}} says to load @var{user}'s init file instead of yours.
@xref{Entering Emacs,,, emacs, The GNU Emacs Manual}.  If neither
option is specified, Emacs uses the @env{LOGNAME} environment
variable, or the @env{USER} (most systems) or @env{USERNAME} (MS
systems) variable, to find your home directory and thus your init
file; this way, even if you have su'd, Emacs still loads your own init
file.  If those environment variables are absent, though, Emacs uses
your user-id to find your home directory.

@cindex early init file
  Emacs also attempts to load a second init file, called the
@dfn{early init file}, if it exists.  This is a file named
@file{early-init.el} in your @file{~/.emacs.d} directory.  The
difference between the early init file and the regular init file is
that the early init file is loaded much earlier during the startup
process, so you can use it to customize some things that are
initialized before loading the regular init file.  For example, you
can customize the process of initializing the package system, by
setting variables such as @var{package-load-list} or
@var{package-enable-at-startup}.  @xref{Package Installation,,,
emacs,The GNU Emacs Manual}.

@cindex default init file
  An Emacs installation may have a @dfn{default init file}, which is a
Lisp library named @file{default.el}.  Emacs finds this file through
the standard search path for libraries (@pxref{How Programs Do
Loading}).  The Emacs distribution does not come with this file; it is
intended for local customizations.  If the default init file exists,
it is loaded whenever you start Emacs.  But your own personal init
file, if any, is loaded first; if it sets @code{inhibit-default-init}
to a non-@code{nil} value, then Emacs does not subsequently load the
@file{default.el} file.  In batch mode, or if you specify @samp{-q}
(or @samp{-Q}), Emacs loads neither your personal init file nor
the default init file.

  Another file for site-customization is @file{site-start.el}.  Emacs
loads this @emph{before} the user's init file.  You can inhibit the
loading of this file with the option @samp{--no-site-file}.

@defopt site-run-file
This variable specifies the site-customization file to load before the
user's init file.  Its normal value is @code{"site-start"}.  The only
way you can change it with real effect is to do so before dumping
Emacs.
@c So why even mention it here.  I imagine it is almost never changed.
@end defopt

  @xref{Init Examples,, Init File Examples, emacs, The GNU Emacs Manual}, for
examples of how to make various commonly desired customizations in your
@file{.emacs} file.

@defopt inhibit-default-init
If this variable is non-@code{nil}, it prevents Emacs from loading the
default initialization library file.  The default value is @code{nil}.
@end defopt

@defvar before-init-hook
This normal hook is run, once, just before loading all the init files
(@file{site-start.el}, your init file, and @file{default.el}).
(The only way to change it with real effect is before dumping Emacs.)
@end defvar

@defvar after-init-hook
This normal hook is run, once, just after loading all the init files
(@file{site-start.el}, your init file, and @file{default.el}),
before loading the terminal-specific library (if started on a text
terminal) and processing the command-line action arguments.
@end defvar

@defvar emacs-startup-hook
This normal hook is run, once, just after handling the command line
arguments.  In batch mode, Emacs does not run this hook.
@end defvar

@defvar window-setup-hook
This normal hook is very similar to @code{emacs-startup-hook}.
The only difference is that it runs slightly later, after setting
of the frame parameters.  @xref{Startup Summary, window-setup-hook}.
@end defvar

@defvar user-init-file
This variable holds the absolute file name of the user's init file.  If the
actual init file loaded is a compiled file, such as @file{.emacs.elc},
the value refers to the corresponding source file.
@end defvar

@defvar user-emacs-directory
This variable holds the name of the Emacs default directory.
It defaults to @file{$@{XDG_CONFIG_HOME-'~/.config'@}/emacs/}
if that directory exists and @file{~/.emacs.d/} and @file{~/.emacs} do
not exist,
otherwise to @file{~/.emacs.d/} on all platforms but MS-DOS@.
Here, @file{$@{XDG_CONFIG_HOME-'~/.config'@}}
stands for the value of the environment variable @env{XDG_CONFIG_HOME}
if that variable is set, and for @file{~/.config} otherwise.
@xref{Find Init,,How Emacs Finds Your Init File, emacs, The GNU Emacs Manual}.
@end defvar

@node Terminal-Specific
@subsection Terminal-Specific Initialization
@cindex terminal-specific initialization

  Each terminal type can have its own Lisp library that Emacs loads when
run on that type of terminal.  The library's name is constructed by
concatenating the value of the variable @code{term-file-prefix} and the
terminal type (specified by the environment variable @env{TERM}).
Normally, @code{term-file-prefix} has the value @code{"term/"};
changing this is not recommended.  If there is an entry matching
@env{TERM} in the @code{term-file-aliases} association list,
Emacs uses the associated value in place of @env{TERM}.
Emacs finds the file in the normal manner, by searching the
@code{load-path} directories, and trying the @samp{.elc} and
@samp{.el} suffixes.

@cindex Termcap
  The usual role of a terminal-specific library is to enable special
keys to send sequences that Emacs can recognize.  It may also need to
set or add to @code{input-decode-map} if the Termcap or Terminfo entry
does not specify all the terminal's function keys.  @xref{Terminal Input}.

  When the name of the terminal type contains a hyphen or underscore,
and no library is found whose name is identical to the terminal's
name, Emacs strips from the terminal's name the last hyphen or
underscore and everything that follows
it, and tries again.  This process is repeated until Emacs finds a
matching library, or until there are no more hyphens or underscores in the name
(i.e., there is no terminal-specific library).  For example, if the
terminal name is @samp{xterm-256color} and there is no
@file{term/xterm-256color.el} library, Emacs tries to load
@file{term/xterm.el}.  If necessary, the terminal library can evaluate
@code{(getenv "TERM")} to find the full name of the terminal type.

  Your init file can prevent the loading of the terminal-specific
library by setting the variable @code{term-file-prefix} to @code{nil}.

  You can also arrange to override some of the actions of the
terminal-specific library by using @code{tty-setup-hook}.  This is
a normal hook that Emacs runs after initializing a new text terminal.
You could use this hook to define initializations for terminals that do not
have their own libraries.  @xref{Hooks}.

@defopt term-file-prefix
@cindex @env{TERM} environment variable
If the value of this variable is non-@code{nil}, Emacs loads a
terminal-specific initialization file as follows:

@example
(load (concat term-file-prefix (getenv "TERM")))
@end example

@noindent
You may set the @code{term-file-prefix} variable to @code{nil} in your
init file if you do not wish to load the
terminal-initialization file.

On MS-DOS, Emacs sets the @env{TERM} environment variable to @samp{internal}.
@end defopt

@defopt term-file-aliases
This variable is an association list mapping terminal types to
their aliases.  For example, an element of the form @code{("vt102"
. "vt100")} means to treat a terminal of type @samp{vt102} like one of
type @samp{vt100}.
@end defopt

@defvar tty-setup-hook
This variable is a normal hook that Emacs runs after initializing a
new text terminal.  (This applies when Emacs starts up in non-windowed
mode, and when making a tty @command{emacsclient} connection.)  The
hook runs after loading your init file (if applicable) and the
terminal-specific Lisp file, so you can use it to adjust the
definitions made by that file.

For a related feature, @pxref{Init File, window-setup-hook}.
@end defvar

@node Command-Line Arguments
@subsection Command-Line Arguments
@cindex command-line arguments

  You can use command-line arguments to request various actions when
you start Emacs.  Note that the recommended way of using Emacs is to
start it just once, after logging in, and then do all editing in the same
Emacs session (@pxref{Entering Emacs,,, emacs, The GNU Emacs Manual}).
For this reason, you might not use command-line arguments very often;
nonetheless, they can be useful when invoking Emacs from session
scripts or debugging Emacs.  This section describes how Emacs
processes command-line arguments.

@defun command-line
This function parses the command line that Emacs was called with,
processes it, and (amongst other things) loads the user's init file and
displays the startup messages.
@end defun

@defvar command-line-processed
The value of this variable is @code{t} once the command line has been
processed.

If you redump Emacs by calling @code{dump-emacs} (@pxref{Building
Emacs}), you may wish to set this variable to @code{nil} first in
order to cause the new dumped Emacs to process its new command-line
arguments.
@end defvar

@defvar command-switch-alist
@cindex switches on command line
@cindex options on command line
@cindex command-line options
This variable is an alist of user-defined command-line options and
associated handler functions.  By default it is empty, but you can
add elements if you wish.

A @dfn{command-line option} is an argument on the command line, which
has the form:

@example
-@var{option}
@end example

The elements of the @code{command-switch-alist} look like this:

@example
(@var{option} . @var{handler-function})
@end example

The @sc{car}, @var{option}, is a string, the name of a command-line
option (including the initial hyphen).  The @var{handler-function}
is called to handle @var{option}, and receives the option name as its
sole argument.

In some cases, the option is followed in the command line by an
argument.  In these cases, the @var{handler-function} can find all the
remaining command-line arguments in the variable
@code{command-line-args-left} (see below).  (The entire list of
command-line arguments is in @code{command-line-args}.)

Note that the handling of @code{command-switch-alist} doesn't treat
equals signs in @var{option} specially.  That is, if there's an option
like @code{--name=value} on the command line, then only a
@code{command-switch-alist} member whose @code{car} is literally
@code{--name=value} will match this option.  If you want to parse such
options, you need to use @code{command-line-functions} instead (see
below).

The command-line arguments are parsed by the @code{command-line-1}
function in the @file{startup.el} file.  See also @ref{Emacs
Invocation, , Command Line Arguments for Emacs Invocation, emacs, The
GNU Emacs Manual}.
@end defvar

@defvar command-line-args
The value of this variable is the list of command-line arguments passed
to Emacs.
@end defvar

@defvar command-line-args-left
@vindex argv
The value of this variable is the list of command-line arguments that
have not yet been processed.
@c Don't mention this, since it is a "bad name for a dynamically bound variable"
@c @code{argv} is an alias for this.
@end defvar

@defvar command-line-functions
This variable's value is a list of functions for handling an
unrecognized command-line argument.  Each time the next argument to be
processed has no special meaning, the functions in this list are called,
in order of appearance, until one of them returns a non-@code{nil}
value.

These functions are called with no arguments.  They can access the
command-line argument under consideration through the variable
@code{argi}, which is bound temporarily at this point.  The remaining
arguments (not including the current one) are in the variable
@code{command-line-args-left}.

When a function recognizes and processes the argument in @code{argi}, it
should return a non-@code{nil} value to say it has dealt with that
argument.  If it has also dealt with some of the following arguments, it
can indicate that by deleting them from @code{command-line-args-left}.

If all of these functions return @code{nil}, then the argument is treated
as a file name to visit.
@end defvar

@node Getting Out
@section Getting Out of Emacs
@cindex exiting Emacs

  There are two ways to get out of Emacs: you can kill the Emacs job,
which exits permanently, or you can suspend it, which permits you to
reenter the Emacs process later.  (In a graphical environment, you can
of course simply switch to another application without doing anything
special to Emacs, then switch back to Emacs when you want.)

@menu
* Killing Emacs::        Exiting Emacs irreversibly.
* Suspending Emacs::     Exiting Emacs reversibly.
@end menu

@node Killing Emacs
@subsection Killing Emacs
@cindex killing Emacs

  Killing Emacs means ending the execution of the Emacs process.
If you started Emacs from a terminal, the parent process normally
resumes control.  The low-level primitive for killing Emacs is
@code{kill-emacs}.

@deffn Command kill-emacs &optional exit-data
This command calls the hook @code{kill-emacs-hook}, then exits the
Emacs process and kills it.

If @var{exit-data} is an integer, that is used as the exit status of
the Emacs process.  (This is useful primarily in batch operation; see
@ref{Batch Mode}.)

If @var{exit-data} is a string, its contents are stuffed into the
terminal input buffer so that the shell (or whatever program next reads
input) can read them.

If @var{exit-data} is neither an integer nor a string, or is omitted,
that means to use the (system-specific) exit status which indicates
successful program termination.
@end deffn

@cindex SIGTERM
@cindex SIGHUP
@cindex SIGINT
@cindex operating system signal
  The @code{kill-emacs} function is normally called via the
higher-level command @kbd{C-x C-c}
(@code{save-buffers-kill-terminal}).  @xref{Exiting,,, emacs, The GNU
Emacs Manual}.  It is also called automatically if Emacs receives a
@code{SIGTERM} or @code{SIGHUP} operating system signal (e.g., when the
controlling terminal is disconnected), or if it receives a
@code{SIGINT} signal while running in batch mode (@pxref{Batch Mode}).

@defvar kill-emacs-hook
This normal hook is run by @code{kill-emacs}, before it kills Emacs.

Because @code{kill-emacs} can be called in situations where user
interaction is impossible (e.g., when the terminal is disconnected),
functions on this hook should not attempt to interact with the user.
If you want to interact with the user when Emacs is shutting down, use
@code{kill-emacs-query-functions}, described below.
@end defvar

  When Emacs is killed, all the information in the Emacs process,
aside from files that have been saved, is lost.  Because killing Emacs
inadvertently can lose a lot of work, the
@code{save-buffers-kill-terminal} command queries for confirmation if
you have buffers that need saving or subprocesses that are running.
It also runs the abnormal hook @code{kill-emacs-query-functions}:

@defopt kill-emacs-query-functions
When @code{save-buffers-kill-terminal} is killing Emacs, it calls the
functions in this hook, after asking the standard questions and before
calling @code{kill-emacs}.  The functions are called in order of
appearance, with no arguments.  Each function can ask for additional
confirmation from the user.  If any of them returns @code{nil},
@code{save-buffers-kill-emacs} does not kill Emacs, and does not run
the remaining functions in this hook.  Calling @code{kill-emacs}
directly does not run this hook.
@end defopt

@node Suspending Emacs
@subsection Suspending Emacs
@cindex suspending Emacs

  On text terminals, it is possible to @dfn{suspend Emacs}, which
means stopping Emacs temporarily and returning control to its superior
process, which is usually the shell.  This allows you to resume
editing later in the same Emacs process, with the same buffers, the
same kill ring, the same undo history, and so on.  To resume Emacs,
use the appropriate command in the parent shell---most likely
@code{fg}.

@cindex controlling terminal
  Suspending works only on a terminal device from which the Emacs
session was started.  We call that device the @dfn{controlling
terminal} of the session.  Suspending is not allowed if the
controlling terminal is a graphical terminal.  Suspending is usually
not relevant in graphical environments, since you can simply switch to
another application without doing anything special to Emacs.

@c FIXME?  Are there any systems Emacs still supports that do not
@c have SIGTSTP?
@cindex SIGTSTP
  Some operating systems (those without @code{SIGTSTP}, or MS-DOS) do
not support suspension of jobs; on these systems, suspension
actually creates a new shell temporarily as a subprocess of Emacs.
Then you would exit the shell to return to Emacs.

@deffn Command suspend-emacs &optional string
This function stops Emacs and returns control to the superior process.
If and when the superior process resumes Emacs, @code{suspend-emacs}
returns @code{nil} to its caller in Lisp.

This function works only on the controlling terminal of the Emacs
session; to relinquish control of other tty devices, use
@code{suspend-tty} (see below).  If the Emacs session uses more than
one terminal, you must delete the frames on all the other terminals
before suspending Emacs, or this function signals an error.
@xref{Multiple Terminals}.

If @var{string} is non-@code{nil}, its characters are sent to Emacs's
superior shell, to be read as terminal input.
@c FIXME?  It seems to me that shell does echo STRING.
The characters in @var{string} are not echoed by the superior shell;
only the results appear.

Before suspending, @code{suspend-emacs} runs the normal hook
@code{suspend-hook}.  After the user resumes Emacs,
@code{suspend-emacs} runs the normal hook @code{suspend-resume-hook}.
@xref{Hooks}.

The next redisplay after resumption will redraw the entire screen,
unless the variable @code{no-redraw-on-reenter} is non-@code{nil}.
@xref{Refresh Screen}.

Here is an example of how you could use these hooks:

@smallexample
@group
(add-hook 'suspend-hook
          (lambda () (or (y-or-n-p "Really suspend? ")
                         (error "Suspend canceled"))))
@end group
(add-hook 'suspend-resume-hook (lambda () (message "Resumed!")
                                 (sit-for 2)))
@end smallexample
@c The sit-for prevents the @code{nil} that suspend-emacs returns
@c hiding the message.

Here is what you would see upon evaluating @code{(suspend-emacs "pwd")}:

@smallexample
@group
---------- Buffer: Minibuffer ----------
Really suspend? @kbd{y}
---------- Buffer: Minibuffer ----------
@end group

@group
---------- Parent Shell ----------
bash$ /home/username
bash$ fg
@end group

@group
---------- Echo Area ----------
Resumed!
@end group
@end smallexample

@c FIXME?  AFAICS, it is echoed.
Note that @samp{pwd} is not echoed after Emacs is suspended.  But it
is read and executed by the shell.
@end deffn

@defvar suspend-hook
This variable is a normal hook that Emacs runs before suspending.
@end defvar

@defvar suspend-resume-hook
This variable is a normal hook that Emacs runs on resuming
after a suspension.
@end defvar

@defun suspend-tty &optional tty
If @var{tty} specifies a terminal device used by Emacs, this function
relinquishes the device and restores it to its prior state.  Frames
that used the device continue to exist, but are not updated and Emacs
doesn't read input from them.  @var{tty} can be a terminal object, a
frame (meaning the terminal for that frame), or @code{nil} (meaning
the terminal for the selected frame).  @xref{Multiple Terminals}.

If @var{tty} is already suspended, this function does nothing.

@vindex suspend-tty-functions
This function runs the hook @code{suspend-tty-functions}, passing the
terminal object as an argument to each function.
@end defun

@defun resume-tty &optional tty
This function resumes the previously suspended terminal device
@var{tty}; where @var{tty} has the same possible values as it does
for @code{suspend-tty}.

@vindex resume-tty-functions
This function reopens the terminal device, re-initializes it, and
redraws it with that terminal's selected frame.  It then runs the
hook @code{resume-tty-functions}, passing the terminal object as an
argument to each function.

If the same device is already used by another Emacs terminal, this
function signals an error.  If @var{tty} is not suspended, this
function does nothing.
@end defun

@defun controlling-tty-p &optional tty
This function returns non-@code{nil} if @var{tty} is the
controlling terminal of the Emacs session; @var{tty} can be a
terminal object, a frame (meaning the terminal for that frame), or
@code{nil} (meaning the terminal for the selected frame).
@end defun

@deffn Command suspend-frame
This command @dfn{suspends} a frame.  For GUI frames, it calls
@code{iconify-frame} (@pxref{Visibility of Frames}); for frames on
text terminals, it calls either @code{suspend-emacs} or
@code{suspend-tty}, depending on whether the frame is displayed on the
controlling terminal device or not.
@end deffn

@node System Environment
@section Operating System Environment
@cindex operating system environment

  Emacs provides access to variables in the operating system environment
through various functions.  These variables include the name of the
system, the user's @acronym{UID}, and so on.

@defvar system-configuration
This variable holds the standard GNU configuration name for the
hardware/software configuration of your system, as a string.  For
example, a typical value for a 64-bit GNU/Linux system is
@samp{"x86_64-unknown-linux-gnu"}.
@end defvar

@cindex system type and name
@defvar system-type
The value of this variable is a symbol indicating the type of operating
system Emacs is running on.  The possible values are:

@table @code
@item aix
IBM's AIX.

@item berkeley-unix
Berkeley BSD and its variants.

@item cygwin
Cygwin, a POSIX layer on top of MS-Windows.

@item darwin
Darwin (macOS).

@item gnu
The GNU system (using the GNU kernel, which consists of the HURD and Mach).

@item gnu/linux
A GNU/Linux system---that is, a variant GNU system, using the Linux
kernel.  (These systems are the ones people often call ``Linux'', but
actually Linux is just the kernel, not the whole system.)

@item gnu/kfreebsd
A GNU (glibc-based) system with a FreeBSD kernel.

@item hpux
Hewlett-Packard HPUX operating system.

@item nacl
Google Native Client (@acronym{NaCl}) sandboxing system.

@item ms-dos
Microsoft's DOS@.  Emacs compiled with DJGPP for MS-DOS binds
@code{system-type} to @code{ms-dos} even when you run it on MS-Windows.

@item usg-unix-v
AT&T Unix System V.

@item windows-nt
Microsoft Windows NT, 9X and later.  The value of @code{system-type}
is always @code{windows-nt}, e.g., even on Windows 10.

@end table

We do not wish to add new symbols to make finer distinctions unless it
is absolutely necessary!  In fact, we hope to eliminate some of these
alternatives in the future.  If you need to make a finer distinction
than @code{system-type} allows for, you can test
@code{system-configuration}, e.g., against a regexp.
@end defvar

@defun system-name
This function returns the name of the machine you are running on, as a
string.
@end defun

@c FIXME seems like this section is not the best place for this option?
@defopt mail-host-address
If this variable is non-@code{nil}, it is used instead of
@code{system-name} for purposes of generating email addresses.  For
example, it is used when constructing the default value of
@code{user-mail-address}.  @xref{User Identification}.
@end defopt

@deffn Command getenv var &optional frame
@cindex environment variable access
This function returns the value of the environment variable @var{var},
as a string.  @var{var} should be a string.  If @var{var} is undefined
in the environment, @code{getenv} returns @code{nil}.  It returns
@samp{""} if @var{var} is set but null.  Within Emacs, a list of environment
variables and their values is kept in the variable @code{process-environment}.

@example
@group
(getenv "USER")
     @result{} "lewis"
@end group
@end example

The shell command @code{printenv} prints all or part of the environment:

@example
@group
bash$ printenv
PATH=/usr/local/bin:/usr/bin:/bin
USER=lewis
@end group
@group
TERM=xterm
SHELL=/bin/bash
HOME=/home/lewis
@end group
@dots{}
@end example
@end deffn

@deffn Command setenv variable &optional value substitute
This command sets the value of the environment variable named
@var{variable} to @var{value}.  @var{variable} should be a string.
Internally, Emacs Lisp can handle any string.  However, normally
@var{variable} should be a valid shell identifier, that is, a sequence
of letters, digits and underscores, starting with a letter or
underscore.  Otherwise, errors may occur if subprocesses of Emacs try
to access the value of @var{variable}.  If @var{value} is omitted or
@code{nil} (or, interactively, with a prefix argument), @code{setenv}
removes @var{variable} from the environment.  Otherwise, @var{value}
should be a string.

@c FIXME: Document 'substitute-env-vars'?  --xfq
If the optional argument @var{substitute} is non-@code{nil}, Emacs
calls the function @code{substitute-env-vars} to expand any
environment variables in @var{value}.

@code{setenv} works by modifying @code{process-environment}; binding
that variable with @code{let} is also reasonable practice.

@code{setenv} returns the new value of @var{variable}, or @code{nil}
if it removed @var{variable} from the environment.
@end deffn

@defvar process-environment
This variable is a list of strings, each describing one environment
variable.  The functions @code{getenv} and @code{setenv} work by means
of this variable.

@smallexample
@group
process-environment
@result{} ("PATH=/usr/local/bin:/usr/bin:/bin"
    "USER=lewis"
@end group
@group
    "TERM=xterm"
    "SHELL=/bin/bash"
    "HOME=/home/lewis"
    @dots{})
@end group
@end smallexample

If @code{process-environment} contains multiple elements that
specify the same environment variable, the first of these elements
specifies the variable, and the others are ignored.
@end defvar

@defvar initial-environment
This variable holds the list of environment variables Emacs inherited
from its parent process when Emacs started.
@end defvar

@defvar path-separator
This variable holds a string that says which character separates
directories in a search path (as found in an environment variable).  Its
value is @code{":"} for Unix and GNU systems, and @code{";"} for MS systems.
@end defvar

@defun parse-colon-path path
This function takes a search path string such as the value of
the @env{PATH} environment variable, and splits it at the separators,
returning a list of directories.  @code{nil} in this list means
the current directory.  Although the function's name says
``colon'', it actually uses the value of @code{path-separator}.

@example
(parse-colon-path ":/foo:/bar")
     @result{} (nil "/foo/" "/bar/")
@end example
@end defun

@defvar invocation-name
This variable holds the program name under which Emacs was invoked.  The
value is a string, and does not include a directory name.
@end defvar

@defvar invocation-directory
This variable holds the directory in which the Emacs executable was
located when it was run, or @code{nil} if that directory cannot be
determined.
@end defvar

@defvar installation-directory
If non-@code{nil}, this is a directory within which to look for the
@file{lib-src} and @file{etc} subdirectories.  In an installed Emacs,
it is normally @code{nil}.  It is non-@code{nil}
when Emacs can't find those directories in their standard installed
locations, but can find them in a directory related somehow to the one
containing the Emacs executable (i.e., @code{invocation-directory}).
@end defvar

@defun load-average &optional use-float
This function returns the current 1-minute, 5-minute, and 15-minute
system load averages, in a list.  The load average indicates the
number of processes trying to run on the system.

By default, the values are integers that are 100 times the system load
averages, but if @var{use-float} is non-@code{nil}, then they are
returned as floating-point numbers without multiplying by 100.

If it is impossible to obtain the load average, this function signals
an error.  On some platforms, access to load averages requires
installing Emacs as setuid or setgid so that it can read kernel
information, and that usually isn't advisable.
@c FIXME which platforms are these?  Are they still relevant?

If the 1-minute load average is available, but the 5- or 15-minute
averages are not, this function returns a shortened list containing
the available averages.

@example
@group
(load-average)
     @result{} (169 48 36)
@end group
@group
(load-average t)
     @result{} (1.69 0.48 0.36)
@end group
@end example

The shell command @code{uptime} returns similar information.
@end defun

@defun emacs-pid
This function returns the process @acronym{ID} of the Emacs process,
as an integer.
@end defun

@defvar tty-erase-char
This variable holds the erase character that was selected
in the system's terminal driver, before Emacs was started.
@c FIXME?  Seems untrue since 23.1.  For me, it is 0.
@c The value is @code{nil} if Emacs is running under a window system.
@end defvar

@node User Identification
@section User Identification
@cindex user identification

@defvar init-file-user
This variable says which user's init files should be used by
Emacs---or @code{nil} if none.  @code{""} stands for the user who
originally logged in.  The value reflects command-line options such as
@samp{-q} or @samp{-u @var{user}}.

Lisp packages that load files of customizations, or any other sort of
user profile, should obey this variable in deciding where to find it.
They should load the profile of the user name found in this variable.
If @code{init-file-user} is @code{nil}, meaning that the @samp{-q},
@samp{-Q}, or @samp{-batch} option was used, then Lisp packages should
not load any customization files or user profile.
@end defvar

@defopt user-mail-address
This holds the email address of the user who is using Emacs.
@end defopt

@defun user-login-name &optional uid
This function returns the name under which the user is logged in.
It uses the environment variables @env{LOGNAME} or @env{USER} if
either is set.  Otherwise, the value is based on the effective
@acronym{UID}, not the real @acronym{UID}.

If you specify @var{uid} (a number), the result is the user name that
corresponds to @var{uid}, or @code{nil} if there is no such user.
@end defun

@defun user-real-login-name
This function returns the user name corresponding to Emacs's real
@acronym{UID}.  This ignores the effective @acronym{UID}, and the
environment variables @env{LOGNAME} and @env{USER}.
@end defun

@defun user-full-name &optional uid
This function returns the full name of the logged-in user---or the value
of the environment variable @env{NAME}, if that is set.

If the Emacs process's user-id does not correspond to any known user (and
provided @env{NAME} is not set), the result is @code{"unknown"}.

If @var{uid} is non-@code{nil}, then it should be a number (a user-id)
or a string (a login name).  Then @code{user-full-name} returns the full
name corresponding to that user-id or login name.  If you specify a
user-id or login name that isn't defined, it returns @code{nil}.
@end defun

@vindex user-full-name
@vindex user-real-login-name
@vindex user-login-name
  The symbols @code{user-login-name}, @code{user-real-login-name} and
@code{user-full-name} are variables as well as functions.  The functions
return the same values that the variables hold.  These variables allow
you to fake out Emacs by telling the functions what to return.  The
variables are also useful for constructing frame titles (@pxref{Frame
Titles}).

@cindex UID
@defun user-real-uid
This function returns the real @acronym{UID} of the user.
@end defun

@defun user-uid
This function returns the effective @acronym{UID} of the user.
@end defun

@cindex GID
@defun group-gid
This function returns the effective @acronym{GID} of the Emacs process.
@end defun

@defun group-real-gid
This function returns the real @acronym{GID} of the Emacs process.
@end defun

@defun system-users
This function returns a list of strings, listing the user names on the
system.  If Emacs cannot retrieve this information, the return value
is a list containing just the value of @code{user-real-login-name}.
@end defun

@cindex user groups
@defun system-groups
This function returns a list of strings, listing the names of user
groups on the system.  If Emacs cannot retrieve this information, the
return value is @code{nil}.
@end defun

@defun group-name gid
This function returns the group name that corresponds to the numeric
group ID @var{gid}, or @code{nil} if there is no such group.
@end defun


@node Time of Day
@section Time of Day
@cindex time of day

  This section explains how to determine the current time and time
zone.

@cindex Lisp timestamp
@cindex timestamp, Lisp
  Many functions like @code{current-time} and @code{file-attributes}
return @dfn{Lisp timestamp} values that count seconds, and that can
represent absolute time by counting seconds since the @dfn{epoch} of
1970-01-01 00:00:00 UTC.

  Although traditionally Lisp timestamps were integer pairs, their
form has evolved and programs ordinarily should not depend on the
current default form.  If your program needs a particular timestamp
form, you can use the @code{time-convert} function to convert it to the
needed form.  @xref{Time Conversion}.

@cindex epoch
  There are currently three forms of Lisp timestamps, each of
which represents a number of seconds:

@itemize @bullet
@item
An integer.  Although this is the simplest form, it cannot represent
subsecond timestamps.

@item
A pair of integers @code{(@var{ticks} . @var{hz})}, where @var{hz} is
positive.  This represents @var{ticks}/@var{hz} seconds, which is the
same time as plain @var{ticks} if @var{hz} is 1.  A common value for
@var{hz} is 1000000000, for a nanosecond-resolution
clock.@footnote{Currently @var{hz} should be at least 65536 to avoid
compatibility warnings when the timestamp is passed to standard
functions, as previous versions of Emacs would interpret such a
timestamps differently due to backward-compatibility concerns.  These
warnings are intended to be removed in a future Emacs version.}

@item
A list of four integers @code{(@var{high} @var{low} @var{micro}
@var{pico})}, where 0@leq{}@var{low}<65536,
0@leq{}@var{micro}<1000000, and 0@leq{}@var{pico}<1000000.
This represents the number of seconds using the formula:
@ifnottex
@var{high} * 2**16 + @var{low} + @var{micro} * 10**@minus{}6 +
@var{pico} * 10**@minus{}12.
@end ifnottex
@tex
$high \times 2^{16} + low + micro \times 10^{-6} + pico \times 10^{-12}$.
@end tex
In some cases, functions may default to returning two- or
three-element lists, with omitted @var{micro} and @var{pico}
components defaulting to zero.
On all current machines @var{pico} is a multiple of 1000, but this
may change as higher-resolution clocks become available.
@end itemize

@cindex time value
  Function arguments, e.g., the @var{time} argument to
@code{current-time-string}, accept a more-general @dfn{time value}
format, which can be a Lisp timestamp, @code{nil} for the current
time, a single floating-point number for seconds, or a list
@code{(@var{high} @var{low} @var{micro})} or @code{(@var{high}
@var{low})} that is a truncated list timestamp with missing elements
taken to be zero.

@cindex Specified time is not representable
Time values can be converted to and from calendrical and other forms.
Some of these conversions rely on operating system functions that
limit the range of possible time values, and signal an error such as
@samp{"Specified time is not representable"} if the
limits are exceeded.  For instance, a system may not support years
before 1970, or years before 1901, or years far in the future.
You can convert a time value into
a human-readable string using @code{format-time-string}, into a Lisp
timestamp using @code{time-convert}, and into other forms using
@code{decode-time} and @code{float-time}.  These functions are
described in the following sections.

@defun current-time-string &optional time zone
This function returns the current time and date as a human-readable
string.  The format does not vary for the initial part of the string,
which contains the day of week, month, day of month, and time of day
in that order: the number of characters used for these fields is
always the same, although (unless you require English weekday or
month abbreviations regardless of locale) it is typically more
convenient to use @code{format-time-string} than to extract
fields from the output of @code{current-time-string},
as the year might not have exactly four digits, and additional
information may some day be added at the end.

The argument @var{time}, if given, specifies a time to format,
instead of the current time.  The optional argument @var{zone}
defaults to the current time zone rule.  @xref{Time Zone Rules}.
The operating system limits the range of time and zone values.

@example
@group
(current-time-string)
     @result{} "Fri Nov @ 1 15:59:49 2019"
@end group
@end example
@end defun

@defun current-time
This function returns the current time as a Lisp timestamp.
Although the timestamp takes the form @code{(@var{high} @var{low}
@var{micro} @var{pico})} in the current Emacs release, this is
planned to change in a future Emacs version.  You can use the
@code{time-convert} function to convert a timestamp to some other
form.  @xref{Time Conversion}.
@end defun

@defun float-time &optional time
This function returns the current time as a floating-point number of
seconds since the epoch.  The optional argument @var{time}, if
given, specifies a time to convert instead of the current time.

@emph{Warning}: Since the result is floating point, it may not be
exact.  Do not use this function if precise time stamps are required.
For example, on typical systems @code{(float-time '(1 . 10))} displays
as @samp{0.1} but is slightly greater than 1/10.

@code{time-to-seconds} is an alias for this function.
@end defun

@node Time Zone Rules
@section Time Zone Rules
@cindex time zone rules

@vindex TZ@r{, environment variable}
The default time zone is determined by the @env{TZ} environment
variable.  @xref{System Environment}.  For example, you can tell Emacs
to default to Universal Time with @code{(setenv "TZ" "UTC0")}.  If
@env{TZ} is not in the environment, Emacs uses system wall clock time,
which is a platform-dependent default time zone.

The set of supported @env{TZ} strings is system-dependent.  GNU and
many other systems support the tzdata database, e.g.,
@samp{"America/New_York"} specifies the time zone and daylight saving
time history for locations near New York City.  GNU and most other
systems support POSIX-style @env{TZ} strings, e.g.,
@samp{"EST+5EDT,M4.1.0/2,M10.5.0/2"} specifies the rules used in New
York from 1987 through 2006.  All systems support the string
@samp{"UTC0"} meaning Universal Time.

@cindex time zone rule
Functions that convert to and from local time accept an optional
@dfn{time zone rule} argument, which specifies the conversion's time
zone and daylight saving time history.  If the time zone rule is
omitted or @code{nil}, the conversion uses Emacs's default time zone.
If it is @code{t}, the conversion uses Universal Time.  If it is
@code{wall}, the conversion uses the system wall clock time.  If it is
a string, the conversion uses the time zone rule equivalent to setting
@env{TZ} to that string.  If it is a list (@var{offset} @var{abbr}), where
@var{offset} is an integer number of seconds east of Universal Time
and @var{abbr} is a string, the conversion uses a fixed time zone with
the given offset and abbreviation.  An integer @var{offset} is treated
as if it were (@var{offset} @var{abbr}), where @var{abbr} is a numeric
abbreviation on POSIX-compatible platforms and is unspecified on
MS-Windows.

@defun current-time-zone &optional time zone
@cindex time zone, current
This function returns a list describing the time zone that the user is
in.

The value has the form @code{(@var{offset} @var{abbr})}.  Here
@var{offset} is an integer giving the number of seconds ahead of Universal Time
(east of Greenwich).  A negative value means west of Greenwich.  The
second element, @var{abbr}, is a string giving an abbreviation for the
time zone, e.g., @samp{"CST"} for China Standard Time or for
U.S. Central Standard Time.  Both elements can change when daylight
saving time begins or ends; if the user has specified a time zone that
does not use a seasonal time adjustment, then the value is constant
through time.

If the operating system doesn't supply all the information necessary to
compute the value, the unknown elements of the list are @code{nil}.

The argument @var{time}, if given, specifies a time value to
analyze instead of the current time.  The optional argument @var{zone}
defaults to the current time zone rule.
The operating system limits the range of time and zone values.
@end defun

@node Time Conversion
@section Time Conversion
@cindex calendrical information
@cindex time conversion

  These functions convert time values (@pxref{Time of Day}) to Lisp
timestamps, or into calendrical information and vice versa.

  Many 32-bit operating systems are limited to system times containing
32 bits of information in their seconds component; these systems
typically handle only the times from 1901-12-13 20:45:52 through
2038-01-19 03:14:07 Universal Time.  However, 64-bit and some 32-bit operating
systems have larger seconds components, and can represent times far in
the past or future.

  Calendrical conversion functions always use the Gregorian calendar, even
for dates before the Gregorian calendar was introduced.  Year numbers
count the number of years since the year 1 BC, and do not skip zero
as traditional Gregorian years do; for example, the year number
@minus{}37 represents the Gregorian year 38 BC@.

@defun time-convert time &optional form
This function converts a time value into a Lisp timestamp.

The optional @var{form} argument specifies the timestamp form to be
returned.  If @var{form} is the symbol @code{integer}, this function
returns an integer count of seconds.  If @var{form} is a positive
integer, it specifies a clock frequency and this function returns an
integer-pair timestamp @code{(@var{ticks}
. @var{form})}.@footnote{Currently a positive integer @var{form}
should be at least 65536 if the returned value is intended to be given
to standard functions expecting Lisp timestamps.}  If @var{form} is
@code{t}, this function treats it as a positive integer suitable for
representing the timestamp; for example, it is treated as 1000000000
if @var{time} is nil and the platform timestamp has nanosecond
resolution.  If @var{form} is @code{list}, this function returns an
integer list @code{(@var{high} @var{low} @var{micro} @var{pico})}.
Although an omitted or @code{nil} @var{form} currently acts like
@code{list}, this is planned to change in a future Emacs version, so
callers requiring list timestamps should pass @code{list} explicitly.

If @var{time} is infinite or a NaN, this function signals an error.
Otherwise, if @var{time} cannot be represented exactly, conversion
truncates it toward minus infinity.  When @var{form} is @code{t},
conversion is always exact so no truncation occurs, and the returned
clock resolution is no less than that of @var{time}.  By way of
contrast, @code{float-time} can convert any Lisp time value without
signaling an error, although the result might not be exact.
@xref{Time of Day}.

For efficiency this function might return a value that is @code{eq} to
@var{time}, or that otherwise shares structure with @var{time}.

Although @code{(time-convert nil nil)} is equivalent to
@code{(current-time)}, the latter may be a bit faster.

@example
@group
(setq a (time-convert nil t))
@result{} (1564826753904873156 . 1000000000)
@end group
@group
(time-convert a 100000)
@result{} (156482675390487 . 100000)
@end group
@group
(time-convert a 'integer)
@result{} 1564826753
@end group
@group
(time-convert a 'list)
@result{} (23877 23681 904873 156000)
@end group
@end example
@end defun

@defun decode-time &optional time zone form
This function converts a time value into calendrical information.  If
you don't specify @var{time}, it decodes the current time, and similarly
@var{zone} defaults to the current time zone rule.  @xref{Time Zone Rules}.
The operating system limits the range of time and zone values.

The @var{form} argument controls the form of the returned
@var{seconds} element, as described below.
The return value is a list of nine elements, as follows:

@example
(@var{seconds} @var{minutes} @var{hour} @var{day} @var{month} @var{year} @var{dow} @var{dst} @var{utcoff})
@end example

Here is what the elements mean:

@table @var
@item seconds
The number of seconds past the minute, with form described below.
@item minutes
The number of minutes past the hour, as an integer between 0 and 59.
@item hour
The hour of the day, as an integer between 0 and 23.
@item day
The day of the month, as an integer between 1 and 31.
@item month
The month of the year, as an integer between 1 and 12.
@item year
The year, an integer typically greater than 1900.
@item dow
The day of week, as an integer between 0 and 6, where 0 stands for
Sunday.
@item dst
@code{t} if daylight saving time is effect, @code{nil} if it is not
in effect, and @minus{}1 if this information is not available.
@item utcoff
An integer indicating the Universal Time offset in seconds, i.e., the number of
seconds east of Greenwich.
@end table

The @var{seconds} element is a Lisp timestamp that is nonnegative and
less than 61; it is less than 60 except during positive leap seconds
(assuming the operating system supports leap seconds).  If the
optional @var{form} argument is @code{t}, @var{seconds} uses the same
precision as @var{time}; if @var{form} is @code{integer},
@var{seconds} is truncated to an integer.  For example, if @var{time}
is the timestamp @code{(1566009571321 . 1000)}, which represents
2019-08-17 02:39:31.321 UTC on typical systems that lack leap seconds,
then @code{(decode-time @var{time} t t)} returns @code{((31321 . 1000)
39 2 17 8 2019 6 nil 0)}, whereas @code{(decode-time @var{time} t
'integer)} returns @code{(31 39 2 17 8 2019 6 nil 0)}.  If @var{form}
is omitted or @code{nil}, it currently defaults to @code{integer} but
this default may change in future Emacs releases, so callers requiring
a particular form should specify @var{form}.

@strong{Common Lisp Note:} Common Lisp has different meanings for
@var{dow} and @var{utcoff}, and its @var{second} is an integer between
0 and 59 inclusive.

To access (or alter) the elements in the time value, the
@code{decoded-time-second}, @code{decoded-time-minute},
@code{decoded-time-hour}, @code{decoded-time-day},
@code{decoded-time-month}, @code{decoded-time-year},
@code{decoded-time-weekday}, @code{decoded-time-dst} and
@code{decoded-time-zone} accessors can be used.

For instance, to increase the year in a decoded time, you could say:

@lisp
(setf (decoded-time-year decoded-time)
      (+ (decoded-time-year decoded-time) 4))
@end lisp

Also see the following function.

@end defun

@defun decoded-time-add time delta
This function takes a decoded time structure and adds @var{delta}
(also a decoded time structure) to it.  Elements in @var{delta} that
are @code{nil} are ignored.

For instance, if you want ``same time next month'', you
could say:

@lisp
(let ((time (decode-time nil nil t))
      (delta (make-decoded-time :month 2)))
   (encode-time (decoded-time-add time delta)))
@end lisp

If this date doesn't exist (if you're running this on January 31st,
for instance), then the date will be shifted back until you get a
valid date (which will be February 28th or 29th, depending).

Fields are added in a most to least significant order, so if the
adjustment described above happens, it happens before adding days,
hours, minutes or seconds.

The values in @var{delta} can be negative to subtract values instead.

The return value is a decoded time structure.
@end defun

@defun make-decoded-time &key second minute hour day month year dst zone
Return a decoded time structure with only the given keywords filled
out, leaving the rest @code{nil}.  For instance, to get a structure
that represents ``two months'', you could say:

@lisp
(make-decoded-time :month 2)
@end lisp
@end defun

@defun encode-time time &rest obsolescent-arguments
This function converts @var{time} to a Lisp timestamp.
It can act as the inverse of @code{decode-time}.

Ordinarily the first argument is a list
@code{(@var{second} @var{minute} @var{hour} @var{day} @var{month}
@var{year} @var{ignored} @var{dst} @var{zone})} that specifies a
decoded time in the style of @code{decode-time}, so that
@code{(encode-time (decode-time ...))}  works.  For the meanings of
these list members, see the table under @code{decode-time}.

As an obsolescent calling convention, this function can be given six
or more arguments.  The first six arguments @var{second},
@var{minute}, @var{hour}, @var{day}, @var{month}, and @var{year}
specify most of the components of a decoded time.  If there are more
than six arguments the @emph{last} argument is used as @var{zone} and
any other extra arguments are ignored, so that @code{(apply
#'encode-time (decode-time ...))} works.  In this obsolescent
convention, @var{zone} defaults to the current time zone rule
(@pxref{Time Zone Rules}), and @var{dst} is treated as if it was
@minus{}1.

Year numbers less than 100 are not treated specially.  If you want them
to stand for years above 1900, or years above 2000, you must alter them
yourself before you call @code{encode-time}.
The operating system limits the range of time and zone values.

The @code{encode-time} function acts as a rough inverse to
@code{decode-time}.  For example, you can pass the output of
the latter to the former as follows:

@example
(encode-time (decode-time @dots{}))
@end example

You can perform simple date arithmetic by using out-of-range values for
@var{seconds}, @var{minutes}, @var{hour}, @var{day}, and @var{month};
for example, day 0 means the day preceding the given month.
@end defun

@node Time Parsing
@section Parsing and Formatting Times
@cindex time parsing
@cindex time formatting
@cindex formatting time values

  These functions convert time values to text in a string, and vice versa.
Time values include @code{nil}, numbers, and Lisp timestamps
(@pxref{Time of Day}).

@defun date-to-time string
This function parses the time-string @var{string} and returns the
corresponding Lisp timestamp.  The argument @var{string} should represent
a date-time, and should be in one of the forms recognized by
@code{parse-time-string} (see below).  This function assumes Universal
Time if @var{string} lacks explicit time zone information.
The operating system limits the range of time and zone values.
@end defun

@defun parse-time-string string
This function parses the time-string @var{string} into a list of the
following form:

@example
(@var{sec} @var{min} @var{hour} @var{day} @var{mon} @var{year} @var{dow} @var{dst} @var{tz})
@end example

@noindent
The format of this list is the same as what @code{decode-time} accepts
(@pxref{Time Conversion}), and is described in more detail there.  Any
@code{dst} element that cannot be determined from the input is set to
@minus{}1, and any other unknown element is set to
@code{nil}.  The argument @var{string} should resemble an RFC 822 (or later) or
ISO 8601 string, like ``Fri, 25 Mar 2016 16:24:56 +0100'' or
``1998-09-12T12:21:54-0200'', but this function will attempt to parse
less well-formed time strings as well.
@end defun

@vindex ISO 8601 date/time strings
@defun iso8601-parse string
For a more strict function (that will error out upon invalid input),
this function can be used instead.  It can parse all variants of
the ISO 8601 standard, so in addition to the formats mentioned above,
it also parses things like ``1998W45-3'' (week number) and
``1998-245'' (ordinal day number).  To parse durations, there's
@code{iso8601-parse-duration}, and to parse intervals, there's
@code{iso8601-parse-interval}.  All these functions return decoded
time structures, except the final one, which returns three of them
(the start, the end, and the duration).
@end defun

@defun format-time-string format-string &optional time zone

This function converts @var{time} (or the current time, if
@var{time} is omitted or @code{nil}) to a string according to
@var{format-string}.  The conversion uses the time zone rule @var{zone}, which
defaults to the current time zone rule.  @xref{Time Zone Rules}.  The argument
@var{format-string} may contain @samp{%}-sequences which say to
substitute parts of the time.  Here is a table of what the
@samp{%}-sequences mean:

@table @samp
@item %a
This stands for the abbreviated name of the day of week.
@item %A
This stands for the full name of the day of week.
@item %b
This stands for the abbreviated name of the month.
@item %B
This stands for the full name of the month.
@item %c
This is a synonym for @samp{%x %X}.
@item %C
This stands for the century, that is, the year divided by 100,
truncated toward zero.
The default field width is 2.
@item %d
This stands for the day of month, zero-padded.
@item %D
This is a synonym for @samp{%m/%d/%y}.
@item %e
This stands for the day of month, blank-padded.
@item %F
This stands for the ISO 8601 date format, which is like
@samp{%+4Y-%m-%d} except that any flags or field width override the
@samp{+} and (after subtracting 6) the @samp{4}.
@item %g
This stands for the year corresponding to the ISO week within the century.
@item %G
This stands for the year corresponding to the ISO week.
@item %h
This is a synonym for @samp{%b}.
@item %H
This stands for the hour (00--23).
@item %I
This stands for the hour (01--12).
@item %j
This stands for the day of the year (001--366).
@item %k
This stands for the hour (0--23), blank padded.
@item %l
This stands for the hour (1--12), blank padded.
@item %m
This stands for the month (01--12).
@item %M
This stands for the minute (00--59).
@item %n
This stands for a newline.
@item %N
This stands for the nanoseconds (000000000--999999999).  To ask for
fewer digits, use @samp{%3N} for milliseconds, @samp{%6N} for
microseconds, etc.  Any excess digits are discarded, without rounding.
@item %p
This stands for @samp{AM} or @samp{PM}, as appropriate.
@item %q
This stands for the calendar quarter (1--4).
@item %r
This is a synonym for @samp{%I:%M:%S %p}.
@item %R
This is a synonym for @samp{%H:%M}.
@item %s
This stands for the integer number of seconds since the epoch.
@item %S
This stands for the second (00--59, or 00--60 on platforms
that support leap seconds).
@item %t
This stands for a tab character.
@item %T
This is a synonym for @samp{%H:%M:%S}.
@item %u
This stands for the numeric day of week (1--7).  Monday is day 1.
@item %U
This stands for the week of the year (01--52), assuming that weeks
start on Sunday.
@item %V
This stands for the week of the year according to ISO 8601.
@item %w
This stands for the numeric day of week (0--6).  Sunday is day 0.
@item %W
This stands for the week of the year (01--52), assuming that weeks
start on Monday.
@item %x
This has a locale-specific meaning.  In the default locale (named
@samp{C}), it is equivalent to @samp{%D}.
@item %X
This has a locale-specific meaning.  In the default locale (named
@samp{C}), it is equivalent to @samp{%T}.
@item %y
This stands for the year without century (00--99).
@item %Y
This stands for the year with century.
@item %Z
This stands for the time zone abbreviation (e.g., @samp{EST}).
@item %z
This stands for the time zone numerical offset.  The @samp{z} can be
preceded by one, two, or three colons; if plain @samp{%z} stands for
@samp{-0500}, then @samp{%:z} stands for @samp{-05:00}, @samp{%::z}
stands for @samp{-05:00:00}, and @samp{%:::z} is like @samp{%::z}
except it suppresses trailing instances of @samp{:00} so it stands for
@samp{-05} in the same example.
@item %%
This stands for a single @samp{%}.
@end table

One or more flag characters can appear immediately after the @samp{%}.
@samp{0} pads with zeros, @samp{+} pads with zeros and also puts
@samp{+} before nonnegative year numbers with more than four digits,
@samp{_} pads with blanks, @samp{-}
suppresses padding, @samp{^} upper-cases letters, and @samp{#}
reverses the case of letters.

You can also specify the field width and type of padding for any of
these @samp{%}-sequences.  This works as in @code{printf}: you write
the field width as digits in a @samp{%}-sequence, after any flags.
For example, @samp{%S} specifies the number of seconds since the minute;
@samp{%03S} means to pad this with zeros to 3 positions, @samp{%_3S} to
pad with spaces to 3 positions.  Plain @samp{%3S} pads with zeros,
because that is how @samp{%S} normally pads to two positions.

The characters @samp{E} and @samp{O} act as modifiers when used after
any flags and field widths in a @samp{%}-sequence.  @samp{E} specifies
using the current locale's alternative version of the date and time.
In a Japanese locale, for example, @code{%Ex} might yield a date format
based on the Japanese Emperors' reigns.  @samp{E} is allowed in
@samp{%Ec}, @samp{%EC}, @samp{%Ex}, @samp{%EX}, @samp{%Ey}, and
@samp{%EY}.

@samp{O} means to use the current locale's alternative
representation of numbers, instead of the ordinary decimal digits.  This
is allowed with most letters, all the ones that output numbers.

To help debug programs, unrecognized @samp{%}-sequences stand for
themselves and are output as-is.  Programs should not rely on this
behavior, as future versions of Emacs may recognize new
@samp{%}-sequences as extensions.

This function uses the C library function @code{strftime}
(@pxref{Formatting Calendar Time,,, libc, The GNU C Library Reference
Manual}) to do most of the work.  In order to communicate with that
function, it first converts @var{time} and @var{zone} to internal form;
the operating system limits the range of time and zone values.
This function also encodes @var{format-string} using the coding system
specified by @code{locale-coding-system} (@pxref{Locales}); after
@code{strftime} returns the resulting string,
this function decodes the string using that same coding
system.
@end defun

@defun format-seconds format-string seconds
This function converts its argument @var{seconds} into a string of
years, days, hours, etc., according to @var{format-string}.  The
argument @var{format-string} may contain @samp{%}-sequences which
control the conversion.  Here is a table of what the
@samp{%}-sequences mean:

@table @samp
@item %y
@itemx %Y
The integer number of 365-day years.
@item %d
@itemx %D
The integer number of days.
@item %h
@itemx %H
The integer number of hours.
@item %m
@itemx %M
The integer number of minutes.
@item %s
@itemx %S
The integer number of seconds.
@item %z
Non-printing control flag.  When it is used, other specifiers must be
given in the order of decreasing size, i.e., years before days, hours
before minutes, etc.  Nothing will be produced in the result string to
the left of @samp{%z} until the first non-zero conversion is
encountered.  For example, the default format used by
@code{emacs-uptime} (@pxref{Processor Run Time, emacs-uptime})
@w{@code{"%Y, %D, %H, %M, %z%S"}} means that the number of seconds
will always be produced, but years, days, hours, and minutes will only
be shown if they are non-zero.
@item %%
Produces a literal @samp{%}.
@end table

Upper-case format sequences produce the units in addition to the
numbers, lower-case formats produce only the numbers.

You can also specify the field width by following the @samp{%} with a
number; shorter numbers will be padded with blanks.  An optional
period before the width requests zero-padding instead.  For example,
@code{"%.3Y"} might produce @code{"004 years"}.
@end defun

@node Processor Run Time
@section Processor Run time
@cindex processor run time
@cindex Emacs process run time

  Emacs provides several functions and primitives that return time,
both elapsed and processor time, used by the Emacs process.

@deffn Command emacs-uptime &optional format
@cindex uptime of Emacs
This function returns a string representing the Emacs
@dfn{uptime}---the elapsed wall-clock time this instance of Emacs is
running.  The string is formatted by @code{format-seconds} according
to the optional argument @var{format}.  For the available format
descriptors, see @ref{Time Parsing, format-seconds}.  If @var{format}
is @code{nil} or omitted, it defaults to @code{"%Y, %D, %H, %M,
%z%S"}.

When called interactively, it prints the uptime in the echo area.
@end deffn

@defun get-internal-run-time
This function returns the processor run time used by Emacs, as a Lisp
timestamp (@pxref{Time of Day}).

Note that the time returned by this function excludes the time Emacs
was not using the processor, and if the Emacs process has several
threads, the returned value is the sum of the processor times used up
by all Emacs threads.

If the system doesn't provide a way to determine the processor run
time, @code{get-internal-run-time} returns the same time as
@code{current-time}.
@end defun

@deffn Command emacs-init-time
This function returns the duration of the Emacs initialization
(@pxref{Startup Summary}) in seconds, as a string.  When called
interactively, it prints the duration in the echo area.
@end deffn

@node Time Calculations
@section Time Calculations
@cindex time calculations
@cindex comparing time values
@cindex calendrical computations

  These functions perform calendrical computations using time values
(@pxref{Time of Day}).  As with any time value, a value of
@code{nil} for any of their
time-value arguments stands for the current system time, and a single
number stands for the number of seconds since the epoch.

@defun time-less-p t1 t2
This returns @code{t} if time value @var{t1} is less than time value
@var{t2}.
The result is @code{nil} if either argument is a NaN.
@end defun

@defun time-equal-p t1 t2
This returns @code{t} if @var{t1} and @var{t2} are equal time values.
The result is @code{nil} if either argument is a NaN.
@end defun

@defun time-subtract t1 t2
This returns the time difference @var{t1} @minus{} @var{t2} between
two time values, as a Lisp time value.  The result is exact and its clock
resolution is no worse than the worse of its two arguments' resolutions.
The result is floating-point only if it is infinite or a NaN@.
If you need the difference in units
of elapsed seconds, you can convert it with @code{time-convert} or
@code{float-time}.  @xref{Time Conversion}.
@end defun

@defun time-add t1 t2
This returns the sum of two time values,
using the same conversion rules as @code{time-subtract}.
One argument should represent a time difference rather than a point in time,
as a time value that is often just a single number of elapsed seconds.
Here is how to add a number of seconds to a time value:

@example
(time-add @var{time} @var{seconds})
@end example
@end defun

@defun time-to-days time-value
This function returns the number of days between the beginning of year
1 and @var{time-value}, assuming the default time zone.
The operating system limits the range of time and zone values.
@end defun

@defun time-to-day-in-year time-value
This returns the day number within the year corresponding to @var{time-value},
assuming the default time zone.
The operating system limits the range of time and zone values.
@end defun

@defun date-leap-year-p year
This function returns @code{t} if @var{year} is a leap year.
@end defun

@defun date-days-in-month year month
Return the number of days in @var{month} in @var{year}.  For instance,
February 2020 has 29 days.
@end defun

@defun date-ordinal-to-time year ordinal
Return the date of @var{ordinal} in @var{year} as a decoded time
structure.  For instance, the 120th day in 2004 is April 29th.
@end defun

@node Timers
@section Timers for Delayed Execution
@cindex timers

  You can set up a @dfn{timer} to call a function at a specified
future time or after a certain length of idleness.  A timer is a
special object that stores the information about the next invocation
times and the function to invoke.

@defun timerp object
This predicate function returns non-@code{nil} if @code{object} is a
timer.
@end defun

  Emacs cannot run timers at any arbitrary point in a Lisp program; it
can run them only when Emacs could accept output from a subprocess:
namely, while waiting or inside certain primitive functions such as
@code{sit-for} or @code{read-event} which @emph{can} wait.  Therefore, a
timer's execution may be delayed if Emacs is busy.  However, the time of
execution is very precise if Emacs is idle.

  Emacs binds @code{inhibit-quit} to @code{t} before calling the timer
function, because quitting out of many timer functions can leave
things in an inconsistent state.  This is normally unproblematical
because most timer functions don't do a lot of work.  Indeed, for a
timer to call a function that takes substantial time to run is likely
to be annoying.  If a timer function needs to allow quitting, it
should use @code{with-local-quit} (@pxref{Quitting}).  For example, if
a timer function calls @code{accept-process-output} to receive output
from an external process, that call should be wrapped inside
@code{with-local-quit}, to ensure that @kbd{C-g} works if the external
process hangs.

  It is usually a bad idea for timer functions to alter buffer
contents.  When they do, they usually should call @code{undo-boundary}
both before and after changing the buffer, to separate the timer's
changes from user commands' changes and prevent a single undo entry
from growing to be quite large.

  Timer functions should also avoid calling functions that cause Emacs
to wait, such as @code{sit-for} (@pxref{Waiting}).  This can lead to
unpredictable effects, since other timers (or even the same timer) can
run while waiting.  If a timer function needs to perform an action
after a certain time has elapsed, it can do this by scheduling a new
timer.

  If a timer function calls functions that can change the match data,
it should save and restore the match data.  @xref{Saving Match Data}.

@deffn Command run-at-time time repeat function &rest args
This sets up a timer that calls the function @var{function} with
arguments @var{args} at time @var{time}.  If @var{repeat} is a number
(integer or floating point), the timer is scheduled to run again every
@var{repeat} seconds after @var{time}.  If @var{repeat} is @code{nil},
the timer runs only once.

@var{time} may specify an absolute or a relative time.

Absolute times may be specified using a string with a limited variety
of formats, and are taken to be times @emph{today}, even if already in
the past.  The recognized forms are @samp{@var{xxxx}},
@samp{@var{x}:@var{xx}}, or @samp{@var{xx}:@var{xx}} (military time),
and @samp{@var{xx}am}, @samp{@var{xx}AM}, @samp{@var{xx}pm},
@samp{@var{xx}PM}, @samp{@var{xx}:@var{xx}am},
@samp{@var{xx}:@var{xx}AM}, @samp{@var{xx}:@var{xx}pm}, or
@samp{@var{xx}:@var{xx}PM}.  A period can be used instead of a colon
to separate the hour and minute parts.

To specify a relative time as a string, use numbers followed by units.
For example:

@table @samp
@item 1 min
denotes 1 minute from now.
@item 1 min 5 sec
denotes 65 seconds from now.
@item 1 min 2 sec 3 hour 4 day 5 week 6 fortnight 7 month 8 year
denotes exactly 103 months, 123 days, and 10862 seconds from now.
@end table

For relative time values, Emacs considers a month to be exactly thirty
days, and a year to be exactly 365.25 days.

Not all convenient formats are strings.  If @var{time} is a number
(integer or floating point), that specifies a relative time measured in
seconds.  The result of @code{encode-time} can also be used to specify
an absolute value for @var{time}.

In most cases, @var{repeat} has no effect on when @emph{first} call
takes place---@var{time} alone specifies that.  There is one exception:
if @var{time} is @code{t}, then the timer runs whenever the time is a
multiple of @var{repeat} seconds after the epoch.  This is useful for
functions like @code{display-time}.

The function @code{run-at-time} returns a timer value that identifies
the particular scheduled future action.  You can use this value to call
@code{cancel-timer} (see below).
@end deffn

@deffn Command run-with-timer secs repeat function &rest args
This is exactly the same as @code{run-at-time} (so see that definition
for an explanation of the parameters; @var{secs} is passed as
@var{time} to that function), but is meant to be used when the delay
is specified in seconds.
@end deffn

  A repeating timer nominally ought to run every @var{repeat} seconds,
but remember that any invocation of a timer can be late.  Lateness of
one repetition has no effect on the scheduled time of the next
repetition.  For instance, if Emacs is busy computing for long enough
to cover three scheduled repetitions of the timer, and then starts to
wait, it will immediately call the timer function three times in
immediate succession (presuming no other timers trigger before or
between them).  If you want a timer to run again no less than @var{n}
seconds after the last invocation, don't use the @var{repeat} argument.
Instead, the timer function should explicitly reschedule the timer.

@defopt timer-max-repeats
This variable's value specifies the maximum number of times to repeat
calling a timer function in a row, when many previously scheduled
calls were unavoidably delayed.
@end defopt

@defmac with-timeout (seconds timeout-forms@dots{}) body@dots{}
Execute @var{body}, but give up after @var{seconds} seconds.  If
@var{body} finishes before the time is up, @code{with-timeout} returns
the value of the last form in @var{body}.  If, however, the execution of
@var{body} is cut short by the timeout, then @code{with-timeout}
executes all the @var{timeout-forms} and returns the value of the last
of them.

This macro works by setting a timer to run after @var{seconds} seconds.  If
@var{body} finishes before that time, it cancels the timer.  If the
timer actually runs, it terminates execution of @var{body}, then
executes @var{timeout-forms}.

Since timers can run within a Lisp program only when the program calls a
primitive that can wait, @code{with-timeout} cannot stop executing
@var{body} while it is in the midst of a computation---only when it
calls one of those primitives.  So use @code{with-timeout} only with a
@var{body} that waits for input, not one that does a long computation.
@end defmac

  The function @code{y-or-n-p-with-timeout} provides a simple way to use
a timer to avoid waiting too long for an answer.  @xref{Yes-or-No
Queries}.

@defun cancel-timer timer
This cancels the requested action for @var{timer}, which should be a
timer---usually, one previously returned by @code{run-at-time} or
@code{run-with-idle-timer}.  This cancels the effect of that call to
one of these functions; the arrival of the specified time will not
cause anything special to happen.
@end defun

@findex list-timers
The @code{list-timers} command lists all the currently active timers.
The command @kbd{c} (@code{timer-list-cancel}) will cancel the timer
on the line under point.  You can sort the list by column using the
command @kbd{S} (@code{tabulated-list-sort}).

@node Idle Timers
@section Idle Timers
@cindex idle timers

  Here is how to set up a timer that runs when Emacs is idle for a
certain length of time.  Aside from how to set them up, idle timers
work just like ordinary timers.

@deffn Command run-with-idle-timer secs repeat function &rest args
Set up a timer which runs the next time Emacs is idle for @var{secs}
seconds.  The value of @var{secs} may be a number or a value of the type
returned by @code{current-idle-time}.

If @var{repeat} is @code{nil}, the timer runs just once, the first time
Emacs remains idle for a long enough time.  More often @var{repeat} is
non-@code{nil}, which means to run the timer @emph{each time} Emacs
remains idle for @var{secs} seconds.

The function @code{run-with-idle-timer} returns a timer value which you
can use in calling @code{cancel-timer} (@pxref{Timers}).
@end deffn

@cindex idleness
  Emacs becomes @dfn{idle} when it starts waiting for user input, and
it remains idle until the user provides some input.  If a timer is set
for five seconds of idleness, it runs approximately five seconds after
Emacs first becomes idle.  Even if @var{repeat} is non-@code{nil},
this timer will not run again as long as Emacs remains idle, because
the duration of idleness will continue to increase and will not go
down to five seconds again.

  Emacs can do various things while idle: garbage collect, autosave or
handle data from a subprocess.  But these interludes during idleness do
not interfere with idle timers, because they do not reset the clock of
idleness to zero.  An idle timer set for 600 seconds will run when ten
minutes have elapsed since the last user command was finished, even if
subprocess output has been accepted thousands of times within those ten
minutes, and even if there have been garbage collections and autosaves.

  When the user supplies input, Emacs becomes non-idle while executing the
input.  Then it becomes idle again, and all the idle timers that are
set up to repeat will subsequently run another time, one by one.

  Do not write an idle timer function containing a loop which does a
certain amount of processing each time around, and exits when
@code{(input-pending-p)} is non-@code{nil}.  This approach seems very
natural but has two problems:

@itemize
@item
It blocks out all process output (since Emacs accepts process output
only while waiting).

@item
It blocks out any idle timers that ought to run during that time.
@end itemize

@noindent
Similarly, do not write an idle timer function that sets up another
idle timer (including the same idle timer) with @var{secs} argument
less than or equal to the current idleness time.  Such a timer will
run almost immediately, and continue running again and again, instead
of waiting for the next time Emacs becomes idle.  The correct approach
is to reschedule with an appropriate increment of the current value of
the idleness time, as described below.

@defun current-idle-time
If Emacs is idle, this function returns the length of time Emacs has
been idle, using the same format as
@code{current-time} (@pxref{Time of Day}).

When Emacs is not idle, @code{current-idle-time} returns @code{nil}.
This is a convenient way to test whether Emacs is idle.
@end defun

  The main use of @code{current-idle-time} is when an idle timer
function wants to ``take a break'' for a while.  It can set up another
idle timer to call the same function again, after a few seconds more
idleness.  Here's an example:

@example
(defvar my-resume-timer nil
  "Timer for `my-timer-function' to reschedule itself, or nil.")

(defun my-timer-function ()
  ;; @r{If the user types a command while @code{my-resume-timer}}
  ;; @r{is active, the next time this function is called from}
  ;; @r{its main idle timer, deactivate @code{my-resume-timer}.}
  (when my-resume-timer
    (cancel-timer my-resume-timer))
  ...@var{do the work for a while}...
  (when @var{taking-a-break}
    (setq my-resume-timer
          (run-with-idle-timer
            ;; Compute an idle time @var{break-length}
            ;; more than the current value.
            (time-add (current-idle-time) @var{break-length})
            nil
            'my-timer-function))))
@end example

@node Terminal Input
@section Terminal Input
@cindex terminal input

  This section describes functions and variables for recording or
manipulating terminal input.  See @ref{Display}, for related
functions.

@menu
* Input Modes::         Options for how input is processed.
* Recording Input::     Saving histories of recent or all input events.
@end menu

@node Input Modes
@subsection Input Modes
@cindex input modes
@cindex terminal input modes

@defun set-input-mode interrupt flow meta &optional quit-char
This function sets the mode for reading keyboard input.  If
@var{interrupt} is non-@code{nil}, then Emacs uses input interrupts.
If it is @code{nil}, then it uses @sc{cbreak} mode.  The default
setting is system-dependent.  Some systems always use @sc{cbreak} mode
regardless of what is specified.

When Emacs communicates directly with X, it ignores this argument and
uses interrupts if that is the way it knows how to communicate.

If @var{flow} is non-@code{nil}, then Emacs uses @sc{xon/xoff}
(@kbd{C-q}, @kbd{C-s}) flow control for output to the terminal.  This
has no effect except in @sc{cbreak} mode.

The argument @var{meta} controls support for input character codes
above 127.  If @var{meta} is @code{t}, Emacs converts characters with
the 8th bit set into Meta characters.  If @var{meta} is @code{nil},
Emacs disregards the 8th bit; this is necessary when the terminal uses
it as a parity bit.  If @var{meta} is neither @code{t} nor @code{nil},
Emacs uses all 8 bits of input unchanged.  This is good for terminals
that use 8-bit character sets.

If @var{quit-char} is non-@code{nil}, it specifies the character to
use for quitting.  Normally this character is @kbd{C-g}.
@xref{Quitting}.
@end defun

The @code{current-input-mode} function returns the input mode settings
Emacs is currently using.

@defun current-input-mode
This function returns the current mode for reading keyboard input.  It
returns a list, corresponding to the arguments of @code{set-input-mode},
of the form @code{(@var{interrupt} @var{flow} @var{meta} @var{quit})} in
which:
@table @var
@item interrupt
is non-@code{nil} when Emacs is using interrupt-driven input.  If
@code{nil}, Emacs is using @sc{cbreak} mode.
@item flow
is non-@code{nil} if Emacs uses @sc{xon/xoff} (@kbd{C-q}, @kbd{C-s})
flow control for output to the terminal.  This value is meaningful only
when @var{interrupt} is @code{nil}.
@item meta
is @code{t} if Emacs treats the eighth bit of input characters as
the meta bit; @code{nil} means Emacs clears the eighth bit of every
input character; any other value means Emacs uses all eight bits as the
basic character code.
@item quit
is the character Emacs currently uses for quitting, usually @kbd{C-g}.
@end table
@end defun

@node Recording Input
@subsection Recording Input
@cindex recording input

@defun recent-keys &optional include-cmds
This function returns a vector containing the last 300 input events from
the keyboard or mouse.  All input events are included, whether or not
they were used as parts of key sequences.  Thus, you always get the last
300 input events, not counting events generated by keyboard macros.
(These are excluded because they are less interesting for debugging; it
should be enough to see the events that invoked the macros.)

If @var{include-cmds} is non-@code{nil}, complete key sequences in the
result vector are interleaved with pseudo-events of the form
@code{(nil . @var{COMMAND})}, where @var{COMMAND} is the binding of
the key sequence (@pxref{Command Overview}).

A call to @code{clear-this-command-keys} (@pxref{Command Loop Info})
causes this function to return an empty vector immediately afterward.
@end defun

@deffn Command open-dribble-file filename
@cindex dribble file
This function opens a @dfn{dribble file} named @var{filename}.  When a
dribble file is open, each input event from the keyboard or mouse (but
not those from keyboard macros) is written in that file.  A
non-character event is expressed using its printed representation
surrounded by @samp{<@dots{}>}.  Be aware that sensitive information
(such as passwords) may end up recorded in the dribble file.

You close the dribble file by calling this function with an argument
of @code{nil}.
@end deffn

  See also the @code{open-termscript} function (@pxref{Terminal Output}).

@node Terminal Output
@section Terminal Output
@cindex terminal output

  The terminal output functions send output to a text terminal, or keep
track of output sent to the terminal.  The variable @code{baud-rate}
tells you what Emacs thinks is the output speed of the terminal.

@defopt baud-rate
This variable's value is the output speed of the terminal, as far as
Emacs knows.  Setting this variable does not change the speed of actual
data transmission, but the value is used for calculations such as
padding.

  It also affects decisions about whether to scroll part of the
screen or repaint on text terminals.  @xref{Forcing Redisplay},
for the corresponding functionality on graphical terminals.

The value is measured in baud.
@end defopt

  If you are running across a network, and different parts of the
network work at different baud rates, the value returned by Emacs may be
different from the value used by your local terminal.  Some network
protocols communicate the local terminal speed to the remote machine, so
that Emacs and other programs can get the proper value, but others do
not.  If Emacs has the wrong value, it makes decisions that are less
than optimal.  To fix the problem, set @code{baud-rate}.

@defun send-string-to-terminal string &optional terminal
This function sends @var{string} to @var{terminal} without alteration.
Control characters in @var{string} have terminal-dependent effects.
(If you need to display non-ASCII text on the terminal, encode it
using one of the functions described in @ref{Explicit Encoding}.)
This function operates only on text terminals.  @var{terminal} may be
a terminal object, a frame, or @code{nil} for the selected frame's
terminal.  In batch mode, @var{string} is sent to @code{stdout} when
@var{terminal} is @code{nil}.

One use of this function is to define function keys on terminals that
have downloadable function key definitions.  For example, this is how (on
certain terminals) to define function key 4 to move forward four
characters (by transmitting the characters @kbd{C-u C-f} to the
computer):

@example
@group
(send-string-to-terminal "\eF4\^U\^F")
     @result{} nil
@end group
@end example
@end defun

@deffn Command open-termscript filename
@cindex termscript file
This function is used to open a @dfn{termscript file} that will record
all the characters sent by Emacs to the terminal.  It returns
@code{nil}.  Termscript files are useful for investigating problems
where Emacs garbles the screen, problems that are due to incorrect
Termcap entries or to undesirable settings of terminal options more
often than to actual Emacs bugs.  Once you are certain which characters
were actually output, you can determine reliably whether they correspond
to the Termcap specifications in use.

@example
@group
(open-termscript "../junk/termscript")
     @result{} nil
@end group
@end example

You close the termscript file by calling this function with an
argument of @code{nil}.

See also @code{open-dribble-file} in @ref{Recording Input}.
@end deffn

@node Sound Output
@section Sound Output
@cindex sound

  To play sound using Emacs, use the function @code{play-sound}.  Only
certain systems are supported; if you call @code{play-sound} on a
system which cannot really do the job, it gives an error.

@c FIXME: Add indexes for Au and WAV?  --xfq
  The sound must be stored as a file in RIFF-WAVE format (@samp{.wav})
or Sun Audio format (@samp{.au}).

@defun play-sound sound
This function plays a specified sound.  The argument, @var{sound}, has
the form @code{(sound @var{properties}...)}, where the @var{properties}
consist of alternating keywords (particular symbols recognized
specially) and values corresponding to them.

Here is a table of the keywords that are currently meaningful in
@var{sound}, and their meanings:

@table @code
@item :file @var{file}
This specifies the file containing the sound to play.
If the file name is not absolute, it is expanded against
the directory @code{data-directory}.

@item :data @var{data}
This specifies the sound to play without need to refer to a file.  The
value, @var{data}, should be a string containing the same bytes as a
sound file.  We recommend using a unibyte string.

@item :volume @var{volume}
This specifies how loud to play the sound.  It should be a number in the
range of 0 to 1.  The default is to use whatever volume has been
specified before.

@item :device @var{device}
This specifies the system device on which to play the sound, as a
string.  The default device is system-dependent.
@end table

Before actually playing the sound, @code{play-sound}
calls the functions in the list @code{play-sound-functions}.
Each function is called with one argument, @var{sound}.
@end defun

@deffn Command play-sound-file file &optional volume device
This function is an alternative interface to playing a sound @var{file}
specifying an optional @var{volume} and @var{device}.
@end deffn

@defvar play-sound-functions
A list of functions to be called before playing a sound.  Each function
is called with one argument, a property list that describes the sound.
@end defvar

@node X11 Keysyms
@section Operating on X11 Keysyms
@cindex X11 keysyms

To define system-specific X11 keysyms, set the variable
@code{system-key-alist}.

@defvar system-key-alist
This variable's value should be an alist with one element for each
system-specific keysym.  Each element has the form @code{(@var{code}
. @var{symbol})}, where @var{code} is the numeric keysym code (not
including the vendor-specific bit,
@ifnottex
@minus{}2**28),
@end ifnottex
@tex
$-2^{28}$),
@end tex
and @var{symbol} is the name for the function key.

For example @code{(168 . mute-acute)} defines a system-specific key (used
by HP X servers) whose numeric code is
@ifnottex
@minus{}2**28
@end ifnottex
@tex
$-2^{28}$
@end tex
+ 168.

It is not crucial to exclude from the alist the keysyms of other X
servers; those do no harm, as long as they don't conflict with the ones
used by the X server actually in use.

The variable is always local to the current terminal, and cannot be
buffer-local.  @xref{Multiple Terminals}.
@end defvar

You can specify which keysyms Emacs should use for the Control, Meta,
Alt, Hyper, and Super modifiers by setting these variables:

@defvar x-ctrl-keysym
@defvarx x-alt-keysym
@defvarx x-meta-keysym
@defvarx x-hyper-keysym
@defvarx x-super-keysym
The name of the keysym that should stand for the Control modifier
(respectively, for Alt, Meta, Hyper, and Super).  For example, here is
how to swap the Meta and Alt modifiers within Emacs:
@lisp
(setq x-alt-keysym 'meta)
(setq x-meta-keysym 'alt)
@end lisp
@end defvar

@node Batch Mode
@section Batch Mode
@cindex batch mode

  The command-line option @samp{-batch} causes Emacs to run
noninteractively.  In this mode, Emacs does not read commands from the
terminal, it does not alter the terminal modes, and it does not expect
to be outputting to an erasable screen.  The idea is that you specify
Lisp programs to run; when they are finished, Emacs should exit.  The
way to specify the programs to run is with @samp{-l @var{file}}, which
loads the library named @var{file}, or @samp{-f @var{function}}, which
calls @var{function} with no arguments, or @samp{--eval=@var{form}}.

  Any Lisp program output that would normally go to the echo area,
either using @code{message}, or using @code{prin1}, etc., with
@code{t} as the stream, goes instead to Emacs's standard descriptors
when in batch mode: @code{message} writes to the standard error
descriptor, while @code{prin1} and other print functions write to the
standard output.  Similarly, input that would normally come from the
minibuffer is read from the standard input descriptor.  Thus, Emacs
behaves much like a noninteractive application program.  (The echo
area output that Emacs itself normally generates, such as command
echoing, is suppressed entirely.)

Non-ASCII text written to the standard output or error descriptors is
by default encoded using @code{locale-coding-system} (@pxref{Locales})
if it is non-@code{nil}; this can be overridden by binding
@code{coding-system-for-write} to a coding system of you choice
(@pxref{Explicit Encoding}).

@defvar noninteractive
This variable is non-@code{nil} when Emacs is running in batch mode.
@end defvar

If Emacs exits due to signaling an error in batch mode, the exit
status of the Emacs command is non-zero:

@example
$ emacs -Q --batch --eval '(error "foo")'; echo $?
foo
255
@end example

@node Session Management
@section Session Management
@cindex session manager

Emacs supports the X Session Management Protocol, which is used to
suspend and restart applications.  In the X Window System, a program
called the @dfn{session manager} is responsible for keeping track of
the applications that are running.  When the X server shuts down, the
session manager asks applications to save their state, and delays the
actual shutdown until they respond.  An application can also cancel
the shutdown.

When the session manager restarts a suspended session, it directs
these applications to individually reload their saved state.  It does
this by specifying a special command-line argument that says what
saved session to restore.  For Emacs, this argument is @samp{--smid
@var{session}}.

@defvar emacs-save-session-functions
@cindex session file
Emacs supports saving state via a hook called
@code{emacs-save-session-functions}.  Emacs runs this hook when the
session manager tells it that the window system is shutting down.  The
functions are called with no arguments, and with the current buffer
set to a temporary buffer.  Each function can use @code{insert} to add
Lisp code to this buffer.  At the end, Emacs saves the buffer in a
file, called the @dfn{session file}.

@findex emacs-session-restore
Subsequently, when the session manager restarts Emacs, it loads the
session file automatically (@pxref{Loading}).  This is performed by a
function named @code{emacs-session-restore}, which is called during
startup.  @xref{Startup Summary}.

If a function in @code{emacs-save-session-functions} returns
non-@code{nil}, Emacs tells the session manager to cancel the
shutdown.
@end defvar

Here is an example that just inserts some text into @file{*scratch*} when
Emacs is restarted by the session manager.

@example
@group
(add-hook 'emacs-save-session-functions 'save-yourself-test)
@end group

@group
(defun save-yourself-test ()
  (insert
   (format "%S" '(with-current-buffer "*scratch*"
                   (insert "I am restored"))))
  nil)
@end group
@end example

@node Desktop Notifications
@section Desktop Notifications
@cindex desktop notifications
@cindex notifications, on desktop

Emacs is able to send @dfn{notifications} on systems that support the
freedesktop.org Desktop Notifications Specification and on MS-Windows.
In order to use this functionality on POSIX hosts, Emacs must have
been compiled with D-Bus support, and the @code{notifications} library
must be loaded.  @xref{Top, , D-Bus,dbus,D-Bus integration in Emacs}.
The following function is supported when D-Bus support is available:

@defun notifications-notify &rest params
This function sends a notification to the desktop via D-Bus,
consisting of the parameters specified by the @var{params} arguments.
These arguments should consist of alternating keyword and value pairs.
The supported keywords and values are as follows:

@table @code
@item :bus @var{bus}
The D-Bus bus.  This argument is needed only if a bus other than
@code{:session} shall be used.

@item :title @var{title}
The notification title.

@item :body @var{text}
The notification body text.  Depending on the implementation of the
notification server, the text could contain HTML markups, like
@samp{"<b>bold text</b>"}, hyperlinks, or images.  Special HTML
characters must be encoded, as @samp{"Contact
&lt;postmaster@@localhost&gt;!"}.

@item :app-name @var{name}
The name of the application sending the notification.  The default is
@code{notifications-application-name}.

@item :replaces-id @var{id}
The notification @var{id} that this notification replaces.  @var{id}
must be the result of a previous @code{notifications-notify} call.

@item :app-icon @var{icon-file}
The file name of the notification icon.  If set to @code{nil}, no icon
is displayed.  The default is @code{notifications-application-icon}.

@item :actions (@var{key} @var{title} @var{key} @var{title} ...)
A list of actions to be applied.  @var{key} and @var{title} are both
strings.  The default action (usually invoked by clicking the
notification) should have a key named @samp{"default"}.  The title can
be anything, though implementations are free not to display it.

@item :timeout @var{timeout}
The timeout time in milliseconds since the display of the notification
at which the notification should automatically close.  If @minus{}1, the
notification's expiration time is dependent on the notification
server's settings, and may vary for the type of notification.  If 0,
the notification never expires.  Default value is @minus{}1.

@item :urgency @var{urgency}
The urgency level.  It can be @code{low}, @code{normal}, or @code{critical}.

@item :action-items
When this keyword is given, the @var{title} string of the actions is
interpreted as icon name.

@item :category @var{category}
The type of notification this is, a string.  See the
@uref{https://developer.gnome.org/notification-spec/#categories,
Desktop Notifications Specification} for a list of standard
categories.

@item :desktop-entry @var{filename}
This specifies the name of the desktop filename representing the
calling program, like @samp{"emacs"}.

@item :image-data (@var{width} @var{height} @var{rowstride} @var{has-alpha} @var{bits} @var{channels} @var{data})
This is a raw data image format that describes the width, height,
rowstride, whether there is an alpha channel, bits per sample,
channels and image data, respectively.

@item :image-path @var{path}
This is represented either as a URI (@samp{file://} is the only URI
schema supported right now) or a name in a freedesktop.org-compliant
icon theme from @samp{$XDG_DATA_DIRS/icons}.

@item :sound-file @var{filename}
The path to a sound file to play when the notification pops up.

@item :sound-name @var{name}
A themable named sound from the freedesktop.org sound naming
specification from @samp{$XDG_DATA_DIRS/sounds}, to play when the
notification pops up.  Similar to the icon name, only for sounds.  An
example would be @samp{"message-new-instant"}.

@item :suppress-sound
Causes the server to suppress playing any sounds, if it has that
ability.

@item :resident
When set the server will not automatically remove the notification
when an action has been invoked.  The notification will remain resident
in the server until it is explicitly removed by the user or by the
sender.  This hint is likely only useful when the server has the
@code{:persistence} capability.

@item :transient
When set the server will treat the notification as transient and
by-pass the server's persistence capability, if it should exist.

@item :x @var{position}
@itemx :y @var{position}
Specifies the X, Y location on the screen that the
notification should point to.  Both arguments must be used together.

@item :on-action @var{function}
Function to call when an action is invoked.  The notification @var{id}
and the @var{key} of the action are passed as arguments to the
function.

@item :on-close @var{function}
Function to call when the notification has been closed by timeout or
by the user.  The function receive the notification @var{id} and the closing
@var{reason} as arguments:

@itemize
@item @code{expired} if the notification has expired
@item @code{dismissed} if the notification was dismissed by the user
@item @code{close-notification} if the notification was closed by a call to
@code{notifications-close-notification}
@item @code{undefined} if the notification server hasn't provided a reason
@end itemize
@end table

Which parameters are accepted by the notification server can be
checked via @code{notifications-get-capabilities}.

This function returns a notification id, an integer, which can be used
to manipulate the notification item with
@code{notifications-close-notification} or the @code{:replaces-id}
argument of another @code{notifications-notify} call.  For example:

@example
@group
(defun my-on-action-function (id key)
  (message "Message %d, key \"%s\" pressed" id key))
     @result{} my-on-action-function
@end group

@group
(defun my-on-close-function (id reason)
  (message "Message %d, closed due to \"%s\"" id reason))
     @result{} my-on-close-function
@end group

@group
(notifications-notify
 :title "Title"
 :body "This is <b>important</b>."
 :actions '("Confirm" "I agree" "Refuse" "I disagree")
 :on-action 'my-on-action-function
 :on-close 'my-on-close-function)
     @result{} 22
@end group

@group
A message window opens on the desktop.  Press ``I agree''.
     @result{} Message 22, key "Confirm" pressed
        Message 22, closed due to "dismissed"
@end group
@end example
@end defun

@defun notifications-close-notification id &optional bus
This function closes a notification with identifier @var{id}.
@var{bus} can be a string denoting a D-Bus connection, the default is
@code{:session}.
@end defun

@defun notifications-get-capabilities &optional bus
Returns the capabilities of the notification server, a list of
symbols.  @var{bus} can be a string denoting a D-Bus connection, the
default is @code{:session}.  The following capabilities can be
expected:

@table @code
@item :actions
The server will provide the specified actions to the user.

@item :body
Supports body text.

@item :body-hyperlinks
The server supports hyperlinks in the notifications.

@item :body-images
The server supports images in the notifications.

@item :body-markup
Supports markup in the body text.

@item :icon-multi
The server will render an animation of all the frames in a given image
array.

@item :icon-static
Supports display of exactly 1 frame of any given image array.  This
value is mutually exclusive with @code{:icon-multi}.

@item :persistence
The server supports persistence of notifications.

@item :sound
The server supports sounds on notifications.
@end table

Further vendor-specific caps start with @code{:x-vendor}, like
@code{:x-gnome-foo-cap}.
@end defun

@defun notifications-get-server-information &optional bus
Return information on the notification server, a list of strings.
@var{bus} can be a string denoting a D-Bus connection, the default is
@code{:session}.  The returned list is @code{(@var{name} @var{vendor}
@var{version} @var{spec-version})}.

@table @var
@item name
The product name of the server.

@item vendor
The vendor name.  For example, @samp{"KDE"}, @samp{"GNOME"}.

@item version
The server's version number.

@item spec-version
The specification version the server is compliant with.
@end table

If @var{spec_version} is @code{nil}, the server supports a
specification prior to @samp{"1.0"}.
@end defun

@cindex tray notifications, MS-Windows
When Emacs runs on MS-Windows as a GUI session, it supports a small
subset of the D-Bus notifications functionality via a native
primitive:

@defun w32-notification-notify &rest params
This function displays an MS-Windows tray notification as specified by
@var{params}.  MS-Windows tray notifications are displayed in a
balloon from an icon in the notification area of the taskbar.

Value is the integer unique ID of the notification that can be used to
remove the notification using @code{w32-notification-close}, described
below.  If the function fails, the return value is @code{nil}.

The arguments @var{params} are specified as keyword/value pairs.  All the
parameters are optional, but if no parameters are specified, the
function will do nothing and return @code{nil}.

The following parameters are supported:

@table @code
@item :icon @var{icon}
Display @var{icon} in the system tray.  If @var{icon} is a string, it
should specify a file name from which to load the icon; the specified
file should be a @file{.ico} Windows icon file.  If @var{icon} is not
a string, or if this parameter is not specified, the standard Emacs
icon will be used.

@item :tip @var{tip}
Use @var{tip} as the tooltip for the notification.  If @var{tip} is a
string, this is the text of a tooltip that will be shown when the
mouse pointer hovers over the tray icon added by the notification.  If
@var{tip} is not a string, or if this parameter is not specified, the
default tooltip text is @samp{Emacs notification}.  The tooltip text can
be up to 127 characters long (63 on Windows versions before W2K).
Longer strings will be truncated.

@item :level @var{level}
Notification severity level, one of @code{info}, @code{warning}, or
@code{error}.  If given, the value determines the icon displayed to the
left of the notification title, but only if the @code{:title} parameter
(see below) is also specified and is a string.

@item :title @var{title}
The title of the notification.  If @var{title} is a string, it is
displayed in a larger font immediately above the body text.  The title
text can be up to 63 characters long; longer text will be truncated.

@item :body @var{body}
The body of the notification.  If @var{body} is a string, it specifies
the text of the notification message.  Use embedded newlines to
control how the text is broken into lines.  The body text can be up to
255 characters long, and will be truncated if it's longer.  Unlike
with D-Bus, the body text should be plain text, with no markup.
@end table

Note that versions of Windows before W2K support only @code{:icon} and
@code{:tip}.  The other parameters can be passed, but they will be
ignored on those old systems.

There can be at most one active notification at any given time.  An
active notification must be removed by calling
@code{w32-notification-close} before a new one can be shown.
@end defun

To remove the notification and its icon from the taskbar, use the
following function:

@defun w32-notification-close id
This function removes the tray notification given by its unique
@var{id}.
@end defun

@node File Notifications
@section Notifications on File Changes
@cindex file notifications
@cindex watch, for filesystem events

Several operating systems support watching of filesystems for changes
of files.  If configured properly, Emacs links a respective library
like @file{inotify}, @file{kqueue}, @file{gfilenotify}, or
@file{w32notify} statically.  These libraries enable watching of
filesystems on the local machine.

It is also possible to watch filesystems on remote machines,
@pxref{Remote Files,, Remote Files, emacs, The GNU Emacs Manual}
This does not depend on one of the libraries linked to Emacs.

Since all these libraries emit different events on notified file
changes, there is the Emacs library @code{filenotify} which provides a
unified interface.  Lisp programs that want to receive file
notifications should always use this library in preference to the
native ones.


@defun file-notify-add-watch file flags callback
Add a watch for filesystem events pertaining to @var{file}.  This
arranges for filesystem events pertaining to @var{file} to be reported
to Emacs.

The returned value is a descriptor for the added watch.  Its type
depends on the underlying library, it cannot be assumed to be an
integer as in the example below.  It should be used for comparison by
@code{equal} only.

If the @var{file} cannot be watched for some reason, this function
signals a @code{file-notify-error} error.

Sometimes, mounted filesystems cannot be watched for file changes.
This is not detected by this function, a non-@code{nil} return value
does not guarantee that changes on @var{file} will be notified.

@var{flags} is a list of conditions to set what will be watched for.
It can include the following symbols:

@table @code
@item change
watch for file changes
@item attribute-change
watch for file attribute changes, like permissions or modification
time
@end table

If @var{file} is a directory, changes for all files in that directory
will be notified.  This does not work recursively.

When any event happens, Emacs will call the @var{callback} function
passing it a single argument @var{event}, which is of the form

@lisp
(@var{descriptor} @var{action} @var{file} [@var{file1}])
@end lisp

@var{descriptor} is the same object as the one returned by this
function.  @var{action} is the description of the event.  It could be
any one of the following symbols:

@table @code
@item created
@var{file} was created
@item deleted
@var{file} was deleted
@item changed
@var{file}'s contents has changed; with @file{w32notify} library,
reports attribute changes as well
@item renamed
@var{file} has been renamed to @var{file1}
@item attribute-changed
a @var{file} attribute was changed
@item stopped
watching @var{file} has been stopped
@end table

Note that the @file{w32notify} library does not report
@code{attribute-changed} events.  When some file's attribute, like
permissions or modification time, has changed, this library reports a
@code{changed} event.  Likewise, the @file{kqueue} library does not
report reliably file attribute changes when watching a directory.

The @code{stopped} event reports, that watching the file has been
stopped.  This could be because @code{file-notify-rm-watch} was called
(see below), or because the file being watched was deleted, or due to
another error reported from the underlying library.

@var{file} and @var{file1} are the name of the file(s) whose event is
being reported.  For example:

@example
@group
(require 'filenotify)
     @result{} filenotify
@end group

@group
(defun my-notify-callback (event)
  (message "Event %S" event))
     @result{} my-notify-callback
@end group

@group
(file-notify-add-watch
  "/tmp" '(change attribute-change) 'my-notify-callback)
     @result{} 35025468
@end group

@group
(write-region "foo" nil "/tmp/foo")
     @result{} Event (35025468 created "/tmp/.#foo")
        Event (35025468 created "/tmp/foo")
        Event (35025468 changed "/tmp/foo")
        Event (35025468 deleted "/tmp/.#foo")
@end group

@group
(write-region "bla" nil "/tmp/foo")
     @result{} Event (35025468 created "/tmp/.#foo")
        Event (35025468 changed "/tmp/foo")
        Event (35025468 deleted "/tmp/.#foo")
@end group

@group
(set-file-modes "/tmp/foo" (default-file-modes) 'nofollow)
     @result{} Event (35025468 attribute-changed "/tmp/foo")
@end group
@end example

Whether the action @code{renamed} is returned, depends on the used
watch library.  Otherwise, the actions @code{deleted} and
@code{created} could be returned in a random order.

@example
@group
(rename-file "/tmp/foo" "/tmp/bla")
     @result{} Event (35025468 renamed "/tmp/foo" "/tmp/bla")
@end group

@group
(delete-file "/tmp/bla")
     @result{} Event (35025468 deleted "/tmp/bla")
@end group
@end example
@end defun

@defun file-notify-rm-watch descriptor
Removes an existing file watch specified by its @var{descriptor}.
@var{descriptor} should be an object returned by
@code{file-notify-add-watch}.
@end defun

@defun file-notify-valid-p descriptor
Checks a watch specified by its @var{descriptor} for validity.
@var{descriptor} should be an object returned by
@code{file-notify-add-watch}.

A watch can become invalid if the file or directory it watches is
deleted, or if the watcher thread exits abnormally for any other
reason.  Removing the watch by calling @code{file-notify-rm-watch}
also makes it invalid.

@example
@group
(make-directory "/tmp/foo")
     @result{} Event (35025468 created "/tmp/foo")
@end group

@group
(setq desc
      (file-notify-add-watch
        "/tmp/foo" '(change) 'my-notify-callback))
     @result{} 11359632
@end group

@group
(file-notify-valid-p desc)
     @result{} t
@end group

@group
(write-region "bla" nil "/tmp/foo/bla")
     @result{} Event (11359632 created "/tmp/foo/.#bla")
        Event (11359632 created "/tmp/foo/bla")
        Event (11359632 changed "/tmp/foo/bla")
        Event (11359632 deleted "/tmp/foo/.#bla")
@end group

@group
;; Deleting a file in the directory doesn't invalidate the watch.
(delete-file "/tmp/foo/bla")
     @result{} Event (11359632 deleted "/tmp/foo/bla")
@end group

@group
(write-region "bla" nil "/tmp/foo/bla")
     @result{} Event (11359632 created "/tmp/foo/.#bla")
        Event (11359632 created "/tmp/foo/bla")
        Event (11359632 changed "/tmp/foo/bla")
        Event (11359632 deleted "/tmp/foo/.#bla")
@end group

@group
;; Deleting the directory invalidates the watch.
;; Events arrive for different watch descriptors.
(delete-directory "/tmp/foo" 'recursive)
     @result{} Event (35025468 deleted "/tmp/foo")
        Event (11359632 deleted "/tmp/foo/bla")
        Event (11359632 deleted "/tmp/foo")
        Event (11359632 stopped "/tmp/foo")
@end group

@group
(file-notify-valid-p desc)
     @result{} nil
@end group
@end example
@end defun

@node Dynamic Libraries
@section Dynamically Loaded Libraries
@cindex dynamic libraries

  A @dfn{dynamically loaded library} is a library that is loaded on
demand, when its facilities are first needed.  Emacs supports such
on-demand loading of support libraries for some of its features.

@defvar dynamic-library-alist
This is an alist of dynamic libraries and external library files
implementing them.

Each element is a list of the form
@w{@code{(@var{library} @var{files}@dots{})}}, where the @code{car} is
a symbol representing a supported external library, and the rest are
strings giving alternate filenames for that library.

Emacs tries to load the library from the files in the order they
appear in the list; if none is found, the Emacs session won't have
access to that library, and the features it provides will be
unavailable.

Image support on some platforms uses this facility.  Here's an example
of setting this variable for supporting images on MS-Windows:

@example
(setq dynamic-library-alist
      '((xpm "libxpm.dll" "xpm4.dll" "libXpm-nox4.dll")
        (png "libpng12d.dll" "libpng12.dll" "libpng.dll"
             "libpng13d.dll" "libpng13.dll")
        (jpeg "jpeg62.dll" "libjpeg.dll" "jpeg-62.dll"
              "jpeg.dll")
        (tiff "libtiff3.dll" "libtiff.dll")
        (gif "giflib4.dll" "libungif4.dll" "libungif.dll")
        (svg "librsvg-2-2.dll")
        (gdk-pixbuf "libgdk_pixbuf-2.0-0.dll")
        (glib "libglib-2.0-0.dll")
        (gobject "libgobject-2.0-0.dll")))
@end example

Note that image types @code{pbm} and @code{xbm} do not need entries in
this variable because they do not depend on external libraries and are
always available in Emacs.

Also note that this variable is not meant to be a generic facility for
accessing external libraries; only those already known by Emacs can
be loaded through it.

This variable is ignored if the given @var{library} is statically
linked into Emacs.
@end defvar

@node Security Considerations
@section Security Considerations
@cindex security
@cindex hardening

Like any application, Emacs can be run in a secure environment, where
the operating system enforces rules about access and the like.  With
some care, Emacs-based applications can also be part of a security
perimeter that checks such rules.  Although the default settings for
Emacs work well for a typical software development environment, they
may require adjustment in environments containing untrusted users that
may include attackers.  Here is a compendium of security issues that
may be helpful if you are developing such applications.  It is by no
means complete; it is intended to give you an idea of the security
issues involved, rather than to be a security checklist.

@table @asis
@item File local variables
@cindex file local variables
A file that Emacs visits can contain variable settings that affect
the buffer visiting that file; @xref{File Local Variables}.
Similarly, a directory can specify local variable values common to all
files in that directory; see @ref{Directory Local Variables}.  Although
Emacs takes some effort to protect against misuse of these variables,
a security hole can be created merely by a package setting
@code{safe-local-variable} too optimistically, a problem that is all
too common.  To disable this feature for both files and directories,
set @code{enable-local-variables} to @code{nil}.

@item Access control
Although Emacs normally respects access permissions of the underlying
operating system, in some cases it handles accesses specially.  For
example, file names can have handlers that treat the files specially,
with their own access checking.  @xref{Magic File Names}.  Also, a
buffer can be read-only even if the corresponding file is writable,
and vice versa, which can result in messages such as @samp{File passwd
is write-protected; try to save anyway? (yes or no)}.  @xref{Read Only
Buffers}.

@item Authentication
Emacs has several functions that deal with passwords, e.g.,
@code{read-passwd}.  @xref{Reading a Password}.
Although these functions do not attempt to
broadcast passwords to the world, their implementations are not proof
against determined attackers with access to Emacs internals.  For
example, even if Elisp code uses @code{clear-string} to scrub a password from
its memory after using it, remnants of the password may still reside
in the garbage-collected free list.  @xref{Modifying Strings}.

@item Code injection
Emacs can send commands to many other applications, and applications
should take care that strings sent as operands of these commands are
not misinterpreted as directives.  For example, when using a shell
command to rename a file @var{a} to @var{b}, do not simply use the
string @code{mv @var{a} @var{b}}, because either file name might start
with @samp{-}, or might contain shell metacharacters like @samp{;}.
Although functions like @code{shell-quote-argument} can help avoid
this sort of problem, they are not panaceas; for example, on a POSIX
platform @code{shell-quote-argument} quotes shell metacharacters but
not leading @samp{-}.  On MS-Windows, quoting for @samp{%} assumes
none of the environment variables have @samp{^} in their name.
@xref{Shell Arguments}.  Typically it is safer
to use @code{call-process} than a subshell.  @xref{Synchronous
Processes}.  And it is safer yet to use builtin Emacs functions; for
example, use @code{(rename-file "@var{a}" "@var{b}" t)} instead of
invoking @command{mv}.  @xref{Changing Files}.

@item Coding systems
Emacs attempts to infer the coding systems of the files and network
connections it accesses.  @xref{Coding Systems}.
If Emacs infers incorrectly, or if the other
parties to the network connection disagree with Emacs's inferences,
the resulting system could be unreliable.  Also, even when it infers
correctly, Emacs often can use bytes that other programs cannot.  For
example, although to Emacs the null byte is just a
character like any other, many other applications treat it as a string
terminator and mishandle strings or files containing null bytes.

@item Environment and configuration variables
POSIX specifies several environment variables that can affect how
Emacs behaves.  Any environment variable whose name consists entirely
of uppercase ASCII letters, digits, and the underscore may affect the
internal behavior of Emacs.  Emacs uses several such variables, e.g.,
@env{EMACSLOADPATH}.  @xref{Library Search}.  On some platforms some
environment variables (e.g., @env{PATH}, @env{POSIXLY_CORRECT},
@env{SHELL}, @env{TMPDIR}) need to have properly-configured values in
order to get standard behavior for any utility Emacs might invoke.
Even seemingly-benign variables like @env{TZ} may have security
implications.  @xref{System Environment}.

Emacs has customization and other variables with similar
considerations.  For example, if the variable @code{shell-file-name}
specifies a shell with nonstandard behavior, an Emacs-based
application may misbehave.

@item Installation
When Emacs is installed, if the installation directory hierarchy can
be modified by untrusted users, the application cannot be trusted.
This applies also to the directory hierarchies of the programs that
Emacs uses, and of the files that Emacs reads and writes.

@item Network access
Emacs often accesses the network, and you may want to configure it to
avoid network accesses that it would normally do.  For example, unless
you set @code{tramp-mode} to @code{nil}, file names using a certain
syntax are interpreted as being network files, and are retrieved
across the network.  @xref{Top, The Tramp Manual,, tramp, The Tramp
Manual}.

@item Race conditions
Emacs applications have the same sort of race-condition issues that
other applications do.  For example, even when
@code{(file-readable-p "foo.txt")} returns @code{t}, it could be that
@file{foo.txt} is unreadable because some other program changed the
file's permissions between the call to @code{file-readable-p} and now.
@xref{Testing Accessibility}.

@item Resource limits
When Emacs exhausts memory or other operating system resources, its
behavior can be less reliable, in that computations that ordinarily
run to completion may abort back to the top level.  This may cause
Emacs to neglect operations that it normally would have done.
@end table
