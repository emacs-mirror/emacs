\input texinfo   @c -*- mode: texinfo; coding: utf-8; -*-
@c %**start of header
@setfilename ../../info/ses.info
@settitle @acronym{SES}: Simple Emacs Spreadsheet
@include docstyle.texi
@setchapternewpage off
@syncodeindex fn cp
@syncodeindex vr cp
@syncodeindex ky cp
@c %**end of header

@copying
This file documents @acronym{SES}: the Simple Emacs Spreadsheet.

Copyright @copyright{} 2002--2018 Free Software Foundation, Inc.

@quotation
Permission is granted to copy, distribute and/or modify this document
under the terms of the GNU Free Documentation License, Version 1.3 or
any later version published by the Free Software Foundation; with no
Invariant Sections, with the Front-Cover Texts being ``A GNU Manual,''
and with the Back-Cover Texts as in (a) below.  A copy of the license
is included in the section entitled ``GNU Free Documentation License.''

(a) The FSF's Back-Cover Text is: ``You have the freedom to copy and
modify this GNU manual.''
@end quotation
@end copying

@dircategory Emacs misc features
@direntry
* @acronym{SES}: (ses).                   Simple Emacs Spreadsheet.
@end direntry

@finalout

@titlepage
@title @acronym{SES}
@subtitle Simple Emacs Spreadsheet
@author Jonathan A. Yavner
@author @email{jyavner@@member.fsf.org}

@page
@vskip 0pt plus 1filll
@insertcopying
@end titlepage

@contents

@c ===================================================================

@ifnottex
@node Top
@comment  node-name,  next,  previous,  up
@top @acronym{SES}: Simple Emacs Spreadsheet

@display
@acronym{SES} is a major mode for GNU Emacs to edit spreadsheet files, which
contain a rectangular grid of cells.  The cells' values are specified
by formulas that can refer to the values of other cells.
@end display
@end ifnottex

To report bugs, use @kbd{M-x report-emacs-bug}.

@insertcopying

@menu
* Sales Pitch::                 Why use @acronym{SES}?
* Quick Tutorial::              A quick introduction
* The Basics::                  Basic spreadsheet commands
* Advanced Features::           Want to know more?
* For Gurus::                   Want to know @emph{even more}?
* Index::                       Concept, Function and Variable Index
* Acknowledgments::             Acknowledgments
* GNU Free Documentation License:: The license for this documentation.
@end menu

@c ===================================================================

@node Sales Pitch
@comment  node-name,  next,  previous,  up
@chapter Sales Pitch
@cindex features

@itemize @bullet
@item Create and edit simple spreadsheets with a minimum of fuss.
@item Full undo/redo/autosave.
@item Immune to viruses in spreadsheet files.
@item Cell formulas are straight Emacs Lisp.
@item Printer functions for control of cell appearance.
@item Intuitive keystroke commands: C-o = insert row, M-o = insert column, etc.
@item ``Spillover'' of lengthy cell values into following blank cells.
@item Header line shows column letters or a selected row.
@item Completing-read for entering symbols as cell values.
@item Cut, copy, and paste can transfer formulas and printer functions.
@item Import and export of tab-separated values or tab-separated formulas.
@item Plaintext, easily-hacked file format.
@end itemize

@c ===================================================================

@node Quick Tutorial
@chapter Quick Tutorial
@cindex introduction
@cindex tutorial

If you want to get started quickly and think that you know what to
expect from a simple spreadsheet, this chapter may be all that you
need.

First, visit a new file with the @file{.ses} extension.
Emacs presents you with an empty spreadsheet containing a single cell.

Begin by inserting a headline: @kbd{"Income"@key{RET}}.  The double
quotes indicate that this is a text cell.  (Notice that Emacs
automatically inserts the closing quotation mark.)

To insert your first income value, you must first resize the
spreadsheet.  Press @key{TAB} to add a new cell and navigate back up
to it.  Enter a number, such as @samp{2.23}.  Then proceed to add a
few more income entries, e.g.:

@example
@group
A
 Income
   2.23
   0.02
  15.76
  -4.00
@end group
@end example

To add up the values, enter a Lisp expression:

@example
(+ A2 A3 A4 A5)
@end example

Perhaps you want to add a cell to the right of cell A4 to explain
why you have a negative entry.  Pressing @kbd{TAB} in that cell
adds an entire new column @samp{B}, where you can add such a note.

The column is fairly narrow by default, but pressing @kbd{w} allows
you to resize it as needed.  Make it 20 characters wide.  You can
now add descriptive legends for all the entries, e.g.:

@example
@group
A       B
 Income
   2.23       Consulting fee
   0.02     Informed opinion
  15.76       Lemonade stand
     -4          Loan to Joe
  14.01                Total
@end group
@end example

By default, the labels in column B are right-justified.  To change
that, you can enter a printer function for the whole column, using
e.g., @kbd{M-p ("%s")}.  You can override a column's printer function
in any individual cell using @kbd{p}.

If Joe pays back his loan, you might blank that entry; e.g., by
positioning the cursor in cell A5 and pressing @kbd{C-d} twice.
If you do that, the total cell will display @samp{######}.  That is
because the regular @code{+} operator does not handle a range that
contains some empty cells.  Instead of emptying the cell, you could
enter a literal @samp{0}, or delete the entire row using @kbd{C-k}.
An alternative is to use the special function @code{ses+} instead of
the regular @code{+}:

@example
(ses+ A2 A3 A4 A5)
@end example

To make a formula robust against changes in the spreadsheet geometry,
you can use the @code{ses-range} macro to refer to a range of cells by
the end-points, e.g.:

@example
(apply 'ses+ (ses-range A2 A5))
@end example

(The @code{apply} is necessary because @code{ses-range} produces a
@emph{list} of values.  This allows for more complex possibilities.)

Alternatively you can use the @code{!} modifier of @code{ses-range} to
remove blank cells from the returned list, which allows to use
@code{+} instead of @code{ses+}:

@lisp
(apply '+ (ses-range A2 A5 !))
@end lisp

@c ===================================================================

@node The Basics
@comment  node-name,  next,  previous,  up
@chapter The Basics
@cindex basic commands
@findex ses-jump
@findex ses-mark-row
@findex ses-mark-column
@findex ses-mark-whole-buffer
@findex set-mark-command
@findex keyboard-quit

To create a new spreadsheet, visit a nonexistent file whose name ends
with ".ses".  For example, @kbd{C-x C-f test.ses @key{RET}}.


A @dfn{cell identifier} is a symbol with a column letter and a row
number.  Cell B7 is the 2nd column of the 7th row.  For very wide
spreadsheets, there are two column letters: cell AB7 is the 28th
column of the 7th row. Super wide spreadsheets get AAA1, etc.
You move around with the regular Emacs movement commands.

@table @kbd
@item j
Moves point to cell, specified by identifier (@code{ses-jump}).
@end table

Point is always at the left edge of a cell, or at the empty endline.
When mark is inactive, the current cell is underlined.  When mark is
active, the range is the highlighted rectangle of cells (@acronym{SES} always
uses transient mark mode).  Drag the mouse from A1 to A3 to create the
range A1-A2.  Many @acronym{SES} commands operate only on single cells, not
ranges.

@table @kbd
@item C-@key{SPC}
@itemx C-@@
Set mark at point (@code{set-mark-command}).

@item C-g
Turn off the mark (@code{keyboard-quit}).

@item M-h
Highlight current row (@code{ses-mark-row}).

@item S-M-h
Highlight current column (@code{ses-mark-column}).

@item C-x h
Highlight all cells (@code{mark-whole-buffer}).
@end table

@menu
* Formulas::
* Resizing::
* Printer functions::
* Clearing cells::
* Copy/cut/paste::
* Customizing @acronym{SES}::
@end menu

@node Formulas
@section Cell formulas
@cindex formulas
@cindex formulas, entering
@cindex values
@cindex cell values
@cindex editing cells
@findex ses-read-cell
@findex ses-read-symbol
@findex ses-edit-cell
@findex ses-recalculate-cell
@findex ses-recalculate-all

To insert a value into a cell, simply type a numeric expression,
@samp{"double-quoted text"}, or a Lisp expression.

@table @kbd
@item 0..9
Self-insert a digit (@code{ses-read-cell}).

@item -
Self-insert a negative number (@code{ses-read-cell}).

@item .
Self-insert a fractional number (@code{ses-read-cell}).

@item "
Self-insert a quoted string.  The ending double-quote
is inserted for you (@code{ses-read-cell}).

@item (
Self-insert an expression.  The right-parenthesis is inserted for you
(@code{ses-read-cell}).  To access another cell's value, just use its
identifier in your expression.  Whenever the other cell is changed,
this cell's formula will be reevaluated.  While typing in the
expression, you can use the following keys:
@table @kbd
@item M-@key{TAB}
to complete symbol names, and
@item  C-h C-n
to list the named cells symbols in a help buffer.
@end table

@item ' @r{(apostrophe)}
Enter a symbol (ses-read-symbol).  @acronym{SES} remembers all symbols that have
been used as formulas, so you can type just the beginning of a symbol
and use @kbd{@key{SPC}}, @kbd{@key{TAB}}, and @kbd{?} to complete it.
@end table

To enter something else (e.g., a vector), begin with a digit, then
erase the digit and type whatever you want.

@table @kbd
@item @key{RET}
Edit the existing formula in the current cell (@code{ses-edit-cell}).

@item C-c C-c
Force recalculation of the current cell or range (@code{ses-recalculate-cell}).

@item C-c C-l
Recalculate the entire spreadsheet (@code{ses-recalculate-all}).
@end table

@node Resizing
@section Resizing the spreadsheet
@cindex resizing spreadsheets
@cindex dimensions
@cindex row, adding or removing
@cindex column, adding or removing
@cindex adding rows or columns
@cindex inserting rows or columns
@cindex removing rows or columns
@cindex deleting rows or columns
@findex ses-insert-row
@findex ses-insert-column
@findex ses-delete-row
@findex ses-delete-column
@findex ses-set-column-width
@findex ses-forward-or-insert
@findex ses-append-row-jump-first-column


Basic commands:

@table @kbd
@item C-o
(@code{ses-insert-row})

@item M-o
(@code{ses-insert-column})

@item C-k
(@code{ses-delete-row})

@item M-k
(@code{ses-delete-column})

@item w
(@code{ses-set-column-width})

@item @key{TAB}
Moves point to the next rightward cell, or inserts a new column if
already at last cell on line, or inserts a new row if at endline
(@code{ses-forward-or-insert}).

@item C-j
Linefeed inserts below the current row and moves to column A
(@code{ses-append-row-jump-first-column}).
@end table

Resizing the spreadsheet (unless you're just changing a column width)
relocates all the cell-references in formulas so they still refer to
the same cells.  If a formula mentioned B1 and you insert a new first
row, the formula will now mention B2.

If you delete a cell that a formula refers to, the cell-symbol is
deleted from the formula, so @code{(+ A1 B1 C1)} after deleting the third
column becomes @code{(+ A1 B1)}.  In case this is not what you wanted:

@table @kbd
@item C-_
@itemx C-x u
Undo previous action (@code{(undo)}).
@end table


@node Printer functions
@section Printer functions
@cindex printer functions
@cindex cell formatting
@cindex formatting cells

Printer functions convert binary cell values into the print forms that
Emacs will display on the screen.

@menu
* Various kinds of printer functions::
* Configuring what printer function applies::
* Standard printer functions::
* Local printer functions::
* Writing a lambda printer function::
@end menu

@node Various kinds of printer functions
@subsection Various kinds of printer functions

When configuring what printer function applies (@pxref{Configuring
what printer function applies}), you can enter a printer function as
one of the following:

@itemize
@item
A format string, like @samp{"$%.2f"}.  The result
string is right-aligned within the print cell.  To get left-alignment,
use parentheses: @samp{("$%.2f")}.
@item
A printer can also be a one-argument function, the result of which is
a string (right-aligned) or list of one string (left-aligned). Such a
function can be in turn configured as:
@itemize
@item
A lambda expression, for instance:

@lisp
(lambda (x)
  (cond
     ((null x) "")
     ((numberp x) (format "%.2f" x))
     (t (ses-center-span x ?# 'ses-prin1))))
@end lisp

While typing in a lambda, you can use @kbd{M-@key{TAB}} to complete
the names of symbols.
@item
A symbol referring to a standard printer function (@pxref{Standard
printer functions}).
@item
A symbol referring to a local printer function (@pxref{Local printer
functions}).
@end itemize


@end itemize


@node Configuring what printer function applies
@subsection Configuring what printer function applies

Each cell has a printer.  If @code{nil}, the column-printer for the cell's
column is used.  If that is also @code{nil}, the default-printer for the
spreadsheet is used.

@table @kbd
@item p
@findex ses-read-cell-printer
Enter a printer for current cell or range (@code{ses-read-cell-printer}).

@item M-p
@findex ses-read-column-printer
Enter a printer for the current column (@code{ses-read-column-printer}).

@item C-c C-p
@findex ses-read-default-printer
Enter the default printer for the spreadsheet
(@code{ses-read-default-printer}).
@end table

The @code{ses-read-@var{xxx}-printer} allows the following commands during editing:

@table @kbd
@item @key{arrow-up}
@itemx @key{arrow-down}
To browse history: the @code{ses-read-@var{xxx}-printer} commands have
their own minibuffer history, which is preloaded with the set of all
printers used in this spreadsheet, plus the standard printers
(@pxref{Standard printer functions}) and the local printers
(@pxref{Local printer functions}).
@item @key{TAB}
To complete the local printer symbols, and
@item C-h C-p
To list the local printers in a help buffer.
@end table


@node Standard printer functions
@subsection Standard printer functions


Except for @code{ses-prin1}, the other standard printers are suitable
only for cells, not columns or default, because they format the value
using the column-printer (or default-printer if @code{nil}) and then
center the result:

@ftable @code
@item ses-center
Just centering.

@item ses-center-span
Centering with spill-over to following blank cells.

@item ses-dashfill
Centering using dashes (-) instead of spaces.

@item ses-dashfill-span
Centering with dashes and spill-over.

@item ses-tildefill-span
Centering with tildes (~) and spill-over.

@item ses-prin1
This is the fallback printer, used when calling the configured printer
throws some error.
@end ftable

@node Local printer functions
@subsection Local printer functions

@findex ses-define-local-printer
You can define printer function local to a sheet with the command
@code{ses-define-local-printer}.  For instance, define a printer
@samp{foo} to @code{"%.2f"}, and then use symbol @samp{foo} as a
printer function.  Then, if you call again
@code{ses-define-local-printer} on @samp{foo} to redefine it as
@code{"%.3f"}, all the cells using printer @samp{foo} will be
reprinted accordingly.

Sometimes there are local printers that you want to define or
re-define automatically every time you open a sheet. For instance
imagine that you want to define/re-define automatically a local
printer @code{euro} to display a number like an amount of euros, that
is to say number @code{3.1} would be displayed as
@code{3.10@dmn{}@euro{}}. To do so in any non read-only SES buffer,
you can add some code like this to your @file{.emacs} init file:

@lisp
(defun my-ses-mode-hook ()
  (unless buffer-read-only
    (ses-define-local-printer
     'euro
     (lambda (x)
       (cond
	((null x) "")
	((numberp x) (format "%.2f€" x))
	(t (ses-center-span x ?# 'ses-prin1)))))))
(add-hook 'ses-mode-hook 'my-ses-mode-hook)
@end lisp

If you replace command @code{ses-define-local-printer} by function
@code{ses-define-if-new-local-printer}
@findex ses-define-if-new-local-printer
the definition will occur only if a local printer with the same name
in not already defined.


@node Writing a lambda printer function
@subsection Writing a lambda printer function

You can write a printer function with a lambda expression taking one
argument in two cases:

@itemize
@item
when you configure the printer function applying to a cell or column, or
@item
when you define a local printer function with command
@code{ses-define-local-printer}.
@end itemize

When doing so, please take care that the returned value is a string,
or a list containing a string, even when the input argument has an
unexpected value. Here is an example:

@example
(lambda (val)
   (cond
      ((null val) "")
      ((and (numberp val) (>= val 0)) (format "%.1f" val))
      (t (ses-center-span val ?# 'ses-prin1))))
@end example

This example will:

@itemize
@item
When the cell is empty (ie.@: when @code{val} is @code{nil}), print an
empty string @code{""}
@item
When the cell value is a non negative number, format the value in
fixed-point notation with one decimal after point
@item
Otherwise, handle the value as erroneous by printing it as an
s-expression (using @code{ses-prin1}), centered and surrounded by
@code{#} filling.
@end itemize

Another precaution to take is to avoid stack overflow due to a
printer function calling itself indefinitely.  This mistake can
happen when you use a local printer as a column printer,
and this local printer implicitly calls the current column printer, so it
will call itself recursively.  Imagine for instance that you want to
create some local printer @code{=fill} that would center the content
of a cell and surround it by equal signs @code{=}, and you do it this
way:

@lisp
(lambda (x)
  (cond
   ((null x) "")
   (t (ses-center x 0 ?=))))
@end lisp

Because @code{=fill} uses the standard printer @code{ses-center} without
explicitly passing any printer to it, @code{ses-center} will call the
current column printer if any, or the spreadsheet default printer
otherwise.  So using @code{=fill} as a column printer will result in a
stack overflow in this column.  SES does not check for that;
you just have to be careful.  For instance, re-write @code{=fill} like
this:

@lisp
(lambda (x)
  (cond
   ((null x) "")
   ((stringp x) (ses-center x 0 ?= " %s "))
   (t (ses-center-span x ?# 'ses-prin1))))
@end lisp

The code above applies the @code{=} filling only to strings; it also
surrounds the string by one space on each side before filling with
@code{=} signs.  So the string @samp{Foo} will be displayed like @samp{@w{===
Foo ===}} in an 11 character wide column.  Anything other than an empty cell
or a non-string is displayed as an error by using @code{#} filling.

@node Clearing cells
@section Clearing cells
@cindex clearing commands
@findex ses-clear-cell-backward
@findex ses-clear-cell-forward

These commands set both formula and printer to @code{nil}:

@table @kbd
@item @key{DEL}
Clear cell and move left (@code{ses-clear-cell-backward}).

@item C-d
Clear cell and move right (@code{ses-clear-cell-forward}).
@end table


@node Copy/cut/paste
@section Copy, cut, and paste
@cindex copy
@cindex cut
@cindex paste
@findex kill-ring-save
@findex mouse-set-region
@findex mouse-set-secondary
@findex ses-kill-override
@findex yank
@findex clipboard-yank
@findex mouse-yank-at-click
@findex mouse-yank-at-secondary
@findex ses-yank-pop

The copy functions work on rectangular regions of cells.  You can paste the
copies into non-@acronym{SES} buffers to export the print text.

@table @kbd
@item M-w
@itemx [copy]
@itemx [C-insert]
Copy the highlighted cells to kill ring and primary clipboard
(@code{kill-ring-save}).

@item [drag-mouse-1]
Mark a region and copy it to kill ring and primary clipboard
(@code{mouse-set-region}).

@item [M-drag-mouse-1]
Mark a region and copy it to kill ring and secondary clipboard
(@code{mouse-set-secondary}).

@item C-w
@itemx [cut]
@itemx [S-delete]
The cut functions do not actually delete rows or columns---they copy
and then clear (@code{ses-kill-override}).

@item C-y
@itemx [S-insert]
Paste from kill ring (@code{yank}).  The paste functions behave
differently depending on the format of the text being inserted:
@itemize @bullet
@item
When pasting cells that were cut from a @acronym{SES} buffer, the print text is
ignored and only the attached formula and printer are inserted; cell
references in the formula are relocated unless you use @kbd{C-u}.
@item
The pasted text overwrites a rectangle of cells whose top left corner
is the current cell.  If part of the rectangle is beyond the edges of
the spreadsheet, you must confirm the increase in spreadsheet size.
@item
Non-@acronym{SES} text is usually inserted as a replacement formula for the
current cell.  If the formula would be a symbol, it's treated as a
string unless you use @kbd{C-u}.  Pasted formulas with syntax errors
are always treated as strings.
@end itemize

@item [paste]
Paste from primary clipboard or kill ring (@code{clipboard-yank}).

@item [mouse-2]
Set point and paste from primary clipboard (@code{mouse-yank-at-click}).

@item [M-mouse-2]
Set point and paste from secondary clipboard (@code{mouse-yank-secondary}).

@item M-y
Immediately after a paste, you can replace the text with a preceding
element from the kill ring (@code{ses-yank-pop}).  Unlike the standard
Emacs yank-pop, the @acronym{SES} version uses @code{undo} to delete the old
yank.  This doesn't make any difference?
@end table

@node Customizing @acronym{SES}
@section Customizing @acronym{SES}
@cindex customizing
@vindex enable-local-eval
@vindex ses-mode-hook
@vindex safe-functions
@vindex enable-local-eval


By default, a newly-created spreadsheet has 1 row and 1 column.  The
column width is 7 and the default printer is @samp{"%.7g"}.  Each of these
can be customized.  Look in group ``ses''.

After entering a cell value, point normally moves right to the next
cell.  You can customize @code{ses-after-entry-functions} to move left or
up or down.  For diagonal movement, select two functions from the
list.

@code{ses-mode-hook} is a normal mode hook (list of functions to
execute when starting @acronym{SES} mode for a buffer).

The variable @code{safe-functions} is a list of possibly-unsafe
functions to be treated as safe when analyzing formulas and printers.
@xref{Virus protection}.  Before customizing @code{safe-functions},
think about how much you trust the person who's suggesting this
change.  The value @code{t} turns off all anti-virus protection.  A
list-of-functions value might enable a ``gee whiz'' spreadsheet, but it
also creates trapdoors in your anti-virus armor.  In order for virus
protection to work, you must always press @kbd{n} when presented with
a virus warning, unless you understand what the questionable code is
trying to do.  Do not listen to those who tell you to customize
@code{enable-local-eval}---this variable is for people who don't wear
safety belts!


@c ===================================================================

@node Advanced Features
@chapter Advanced Features
@cindex advanced features
@findex ses-read-header-row


@table @kbd
@item C-c M-C-h
(@code{ses-set-header-row}).
@findex ses-set-header-row
@kindex C-c M-C-h
The header line at the top of the @acronym{SES}
window normally shows the column letter for each column.  You can set
it to show a copy of some row, such as a row of column titles, so that
row will always be visible.  Default is to set the current row as the
header; use C-u to prompt for header row.  Set the header to row 0 to
show column letters again.
@item [header-line mouse-3]
Pops up a menu to set the current row as the header, or revert to
column letters.
@item M-x ses-rename-cell
@findex ses-rename-cell
Rename a cell from a standard A1-like name to any string that can be a
valid local variable name (See also @ref{Nonrelocatable references}).
@item M-x ses-repair-cell-reference-all
@findex ses-repair-cell-reference-all
When you interrupt a cell formula update by clicking @kbd{C-g}, then
the cell reference link may be broken, which will jeopardize automatic
cell update when any other cell on which it depends is changed. To
repair that use function @code{ses-repair-cell-reference-all}
@end table

@menu
* The print area::
* Ranges in formulas::
* Sorting by column::
* Standard formula functions::
* More on cell printing::
* Import and export::
* Virus protection::
* Spreadsheets with details and summary::
@end menu

@node The print area
@section The print area
@cindex print area
@findex widen
@findex ses-renarrow-buffer
@findex ses-reprint-all

A @acronym{SES} file consists of a print area and a data area.  Normally the
buffer is narrowed to show only the print area.  The print area is
read-only except for special @acronym{SES} commands; it contains cell values
formatted by printer functions.  The data area records the formula and
printer functions, etc.

@table @kbd
@item C-x n w
Show print and data areas (@code{widen}).

@item C-c C-n
Show only print area (@code{ses-renarrow-buffer}).

@item S-C-l
@itemx M-C-l
Recreate print area by reevaluating printer functions for all cells
(@code{ses-reprint-all}).
@end table

@node Ranges in formulas
@section Ranges in formulas
@cindex ranges
@findex ses-insert-range-click
@findex ses-insert-range
@findex ses-insert-ses-range-click
@findex ses-insert-ses-range
@vindex from
@vindex to

A formula like
@lisp
(+ A1 A2 A3)
@end lisp
is the sum of three specific cells.  If you insert a new second row,
the formula becomes
@lisp
(+ A1 A3 A4)
@end lisp
and the new row is not included in the sum.

The macro @code{(ses-range @var{from} @var{to})} evaluates to a list of
the values in a rectangle of cells.  If your formula is
@lisp
(apply '+ (ses-range A1 A3))
@end lisp
and you insert a new second row, it becomes
@lisp
(apply '+ (ses-range A1 A4))
@end lisp
and the new row is included in the sum.

While entering or editing a formula in the minibuffer, you can select
a range in the spreadsheet (using mouse or keyboard), then paste a
representation of that range into your formula.  Suppose you select
A1-C1:

@table @kbd
@item [S-mouse-3]
Inserts "A1 B1 C1" @code{(ses-insert-range-click})

@item C-c C-r
Keyboard version (@code{ses-insert-range}).

@item [C-S-mouse-3]
Inserts "(ses-range A1 C1)" (@code{ses-insert-ses-range-click}).

@item C-c C-s
Keyboard version (@code{ses-insert-ses-range}).
@end table

If you delete the @var{from} or @var{to} cell for a range, the nearest
still-existing cell is used instead.  If you delete the entire range,
the formula relocator will delete the ses-range from the formula.

If you insert a new row just beyond the end of a one-column range, or
a new column just beyond a one-row range, the new cell is included in
the range.  New cells inserted just before a range are not included.

Flags can be added to @code{ses-range} immediately after the @var{to}
cell.
@table @code
@item !
Empty cells in range can be removed by adding the @code{!} flag. An
empty cell is a cell the value of which is one of symbols @code{nil}
or @code{*skip*}. For instance @code{(ses-range A1 A4 !)} will do the
same as @code{(list A1 A3)} when cells @code{A2} and @code{A4} are
empty.
@item _
Empty cell values are replaced by the argument following flag
@code{_}, or @code{0} when flag @code{_} is last in argument list. For
instance @code{(ses-range A1 A4 _ "empty")} will do the same as
@code{(list A1 "empty" A3 "empty")} when cells @code{A2} and @code{A4}
are empty. Similarly, @code{(ses-range A1 A4 _ )} will do the same as
@code{(list A1 0 A3 0)}.
@item >v
When order matters, list cells by reading cells row-wise from top left
to bottom right. This flag is provided for completeness only as it is
the default reading order.
@item <v
List cells by reading cells row-wise from top right to bottom left.
@item v>
List cells by reading cells column-wise from top left to bottom right.
@item v<
List cells by reading cells column-wise from top right to bottom left.
@item v
A short hand for @code{v>}.
@item ^
A short hand for @code{^>}.
@item >
A short hand for @code{>v}.
@item <
A short hand for @code{>^}.
@item *
Instead of listing cells, it makes a Calc vector or matrix of it
(@pxref{Top,,,calc,GNU Emacs Calc Manual}). If the range contains only
one row or one column a vector is made, otherwise a matrix is made.
@item *2
Same as @code{*} except that a matrix is always made even when there
is only one row or column in the range.
@item *1
Same as @code{*} except that a vector is always made even when there
is only one row or column in the range, that is to say the
corresponding matrix is flattened.
@end table

@node Sorting by column
@section Sorting by column
@cindex sorting
@findex ses-sort-column
@findex ses-sort-column-click

@table @kbd
@item C-c M-C-s
Sort the cells of a range using one of the columns
(@code{ses-sort-column}).  The rows (or partial rows if the range
doesn't include all columns) are rearranged so the chosen column will
be in order.

@item [header-line mouse-2]
The easiest way to sort is to click mouse-2 on the chosen column's header row
(@code{ses-sort-column-click}).
@end table

The sort comparison uses @code{string<}, which works well for
right-justified numbers and left-justified strings.

With prefix arg, sort is in descending order.

Rows are moved one at a time, with relocation of formulas.  This works
well if formulas refer to other cells in their row, not so well for
formulas that refer to other rows in the range or to cells outside the
range.


@node Standard formula functions
@section Standard formula functions
@cindex standard formula functions
@cindex *skip*
@cindex *error*
@findex ses-delete-blanks
@findex ses-average
@findex ses+

Oftentimes you want a calculation to exclude the blank cells.  Here
are some useful functions to call from your formulas:

@table @code
@item (ses-delete-blanks &rest @var{args})
Returns a list from which all blank cells (value is either @code{nil}
or '*skip*) have been deleted. Order of args is reverted. Please note
that @code{ses-range} has a @code{!} modifier that allows to remove
blanks, so it is possible to write:
@lisp
(ses-range A1 A5 !)
@end lisp
instead of
@lisp
(apply 'ses-delete-blanks (ses-range A1 A5 <))
@end lisp

@item (ses+ &rest @var{args})
Sum of non-blank arguments.

@item (ses-average @var{list})
Average of non-blank elements in @var{list}.  Here the list is passed
as a single argument, since you'll probably use it with @code{ses-range}.
@end table

@node More on cell printing
@section More on cell printing
@cindex cell printing, more
@findex ses-truncate-cell
@findex ses-recalculate-cell

Special cell values:
@itemize
@item nil prints the same as "", but allows previous cell to spill over.
@item '*skip* replaces nil when the previous cell actually does spill over;
nothing is printed for it.
@item '*error* indicates that the formula signaled an error instead of
producing a value: the print cell is filled with hash marks (#).
@end itemize

If the result from the printer function is too wide for the cell and
the following cell is @code{nil}, the result will spill over into the
following cell.  Very wide results can spill over several cells.  If
the result is too wide for the available space (up to the end of the
row or the next non-@code{nil} cell), the result is truncated if the cell's
value is a string, or replaced with hash marks otherwise.

@acronym{SES} could get confused by printer results that contain newlines or
tabs, so these are replaced with question marks.

@table @kbd
@item t
Confine a cell to its own column (@code{ses-truncate-cell}).  This
allows you to move point to a rightward cell that would otherwise be
covered by a spill-over.  If you don't change the rightward cell, the
confined cell will spill over again the next time it is reprinted.

@item c
When applied to a single cell, this command displays in the echo area
any formula error or printer error that occurred during
recalculation/reprinting (@code{ses-recalculate-cell}).  You can use
this to undo the effect of @kbd{t}.
@end table

When a printer function signals an error, the fallback printer
@findex ses-prin1
@code{ses-prin1} is substituted.  This is useful when your column printer
is numeric-only and you use a string as a cell value.  Note that the
standard default printer is @samp{"%.7g"} which is numeric-only, so cells
that are empty of contain strings will use the fallback printer.
@kbd{c} on such cells will display ``Format specifier doesn't match
argument type''.


@node Import and export
@section Import and export
@cindex import and export
@cindex export, and import
@findex ses-export-tsv
@findex ses-export-tsf

@table @kbd
@item x t
Export a range of cells as tab-separated values (@code{ses-export-tsv}).
@item x T
Export a range of cells as tab-separated formulas (@code{ses-export-tsf}).
@end table

The exported text goes to the kill ring; you can paste it into
another buffer.  Columns are separated by tabs, rows by newlines.

To import text, use any of the yank commands where the text to paste
contains tabs and/or newlines.  Imported formulas are not relocated.

@node Virus protection
@section Virus protection
@cindex virus protection

Whenever a formula or printer is read from a file or is pasted into
the spreadsheet, it receives a ``needs safety check'' marking.  Later,
when the formula or printer is evaluated for the first time, it is
checked for safety using the @code{unsafep} predicate; if found to be
``possibly unsafe'', the questionable formula or printer is displayed
and you must press Y to approve it or N to use a substitute.  The
substitute always signals an error.

Formulas or printers that you type in are checked immediately for
safety.  If found to be possibly unsafe and you press N to disapprove,
the action is canceled and the old formula or printer will remain.

Besides viruses (which try to copy themselves to other files),
@code{unsafep} can also detect all other kinds of Trojan horses, such as
spreadsheets that delete files, send email, flood Web sites, alter
your Emacs settings, etc.

Generally, spreadsheet formulas and printers are simple things that
don't need to do any fancy computing, so all potentially-dangerous
parts of the Emacs Lisp environment can be excluded without cramping
your style as a formula-writer.  See the documentation in @file{unsafep.el}
for more info on how Lisp forms are classified as safe or unsafe.

@node Spreadsheets with details and summary
@section Spreadsheets with details and summary
@cindex details and summary
@cindex summary, and details

A common organization for spreadsheets is to have a bunch of ``detail''
rows, each perhaps describing a transaction, and then a set of
``summary'' rows that each show reduced data for some subset of the
details.  @acronym{SES} supports this organization via the @code{ses-select}
function.

@table @code
@item (ses-select @var{fromrange} @var{test} @var{torange})
Returns a subset of @var{torange}.  For each member in @var{fromrange}
that is equal to @var{test}, the corresponding member of @var{torange}
is included in the result.
@end table

Example of use:
@lisp
(ses-average (ses-select (ses-range A1 A5) 'Smith (ses-range B1 B5)))
@end lisp
This computes the average of the B column values for those rows whose
A column value is the symbol 'Smith.

Arguably one could specify only @var{fromrange} plus
@var{to-row-offset} and @var{to-column-offset}.  The @var{torange} is
stated explicitly to ensure that the formula will be recalculated if
any cell in either range is changed.

File @file{etc/ses-example.el} in the Emacs distribution is an example of a
details-and-summary spreadsheet.


@c ===================================================================

@node For Gurus
@chapter For Gurus
@cindex advanced features

@menu
* Deferred updates::
* Nonrelocatable references::
* The data area::
* Buffer-local variables in spreadsheets::
* Uses of defadvice in @acronym{SES}::
@end menu

@node Deferred updates
@section Deferred updates
@cindex deferred updates
@cindex updates, deferred
@vindex run-with-idle-timer

To save time by avoiding redundant computations, cells that need
recalculation due to changes in other cells are added to a set.  At
the end of the command, each cell in the set is recalculated once.
This can create a new set of cells that need recalculation.  The
process is repeated until either the set is empty or it stops changing
(due to circular references among the cells).  In extreme cases, you
might see progress messages of the form ``Recalculating... (@var{nnn}
cells left)''.  If you interrupt the calculation using @kbd{C-g}, the
spreadsheet will be left in an inconsistent state, so use @kbd{C-_} or
@kbd{C-c C-l} to fix it.

To save even more time by avoiding redundant writes, cells that have
changes are added to a set instead of being written immediately to the
data area.  Each cell in the set is written once, at the end of the
command.  If you change vast quantities of cells, you might see a
progress message of the form ``Writing... (@var{nnn} cells left)''.
These deferred cell-writes cannot be interrupted by @kbd{C-g}, so
you'll just have to wait.

@acronym{SES} uses @code{run-with-idle-timer} to move the cell underline when
Emacs will be scrolling the buffer after the end of a command, and
also to narrow and underline after @kbd{C-x C-v}.  This is visible as
a momentary glitch after C-x C-v and certain scrolling commands.  You
can type ahead without worrying about the glitch.


@node Nonrelocatable references
@section Nonrelocatable references
@cindex nonrelocatable references
@cindex references, nonrelocatable

@kbd{C-y} relocates all cell-references in a pasted formula, while
@kbd{C-u C-y} relocates none of the cell-references.  What about mixed
cases?

The best way is to rename cells that you do not want to be relocatable
by using @code{ses-rename-cell}.
@findex ses-rename-cell
Cells that do not have an A1-like name style are not relocated on
yank. Using this method, the concerned cells won't be relocated
whatever formula they appear in. Please note however that when a
formula contains some range @code{(ses-range @var{cell1} @var{cell2})}
then in the yanked formula each range bound @var{cell1} and
@var{cell2} are relocated, or not, independently, depending on whether
they are A1-like or renamed.

An alternative method is to use
@lisp
(symbol-value 'B3)
@end lisp
to make an @dfn{absolute reference}.  The formula relocator skips over
quoted things, so this will not be relocated when pasted or when
rows/columns are inserted/deleted.  However, B3 will not be recorded
as a dependency of this cell, so this cell will not be updated
automatically when B3 is changed, this is why using
@code{ses-rename-cell} is most of the time preferable.

The variables @code{row} and @code{col} are dynamically bound while a
cell formula is being evaluated.  You can use
@lisp
(ses-cell-value row 0)
@end lisp
to get the value from the leftmost column in the current row.  This
kind of dependency is also not recorded.


@node The data area
@section The data area
@cindex data area
@findex ses-reconstruct-all

Begins with an 014 character, followed by sets of cell-definition
macros for each row, followed by the set of local printer
definitions, followed by column-widths, column-printers,
default-printer, and header-row.  Then there's the global parameters
(file-format ID, row count, column count, local printer count) and the
local variables (specifying @acronym{SES} mode for the buffer, etc.).

When a @acronym{SES} file is loaded, first the global parameters are
loaded, then the entire data area is @code{eval}ed, and finally the local
variables are processed.

You can edit the data area, but don't insert or delete any newlines
except in the local-variables part, since @acronym{SES} locates things by
counting newlines.  Use @kbd{C-x C-e} at the end of a line to install
your edits into the spreadsheet data structures (this does not update
the print area, use, e.g., @kbd{C-c C-l} for that).

The data area is maintained as an image of spreadsheet data
structures that area stored in buffer-local variables.  If the data
area gets messed up, you can try reconstructing the data area from the
data structures:

@table @kbd
@item C-c M-C-l
(@code{ses-reconstruct-all}).
@end table


@node Buffer-local variables in spreadsheets
@section Buffer-local variables in spreadsheets
@cindex buffer-local variables
@cindex variables, buffer-local

You can add additional local variables to the list at the bottom of
the data area, such as hidden constants you want to refer to in your
formulas.

You can override the variable @code{ses--symbolic-formulas} to be a list of
symbols (as parenthesized strings) to show as completions for the @kbd{'}
command.  This initial completions list is used instead of the actual
set of symbols-as-formulas in the spreadsheet.

For an example of this, see file @file{etc/ses-example.ses}.

If (for some reason) you want your formulas or printers to save data
into variables, you must declare these variables as buffer-locals in
order to avoid a virus warning.

You can define functions by making them values for the fake local
variable @code{eval}.  Such functions can then be used in your
formulas and printers, but usually each @code{eval} is presented to
the user during file loading as a potential virus.  This can get
annoying.

You can define functions in your @file{.emacs} file.  Other people can
still read the print area of your spreadsheet, but they won't be able
to recalculate or reprint anything that depends on your functions.  To
avoid virus warnings, each function used in a formula needs
@lisp
(put 'your-function-name 'safe-function t)
@end lisp

@node Uses of defadvice in @acronym{SES}
@section Uses of defadvice in @acronym{SES}
@findex defadvice
@findex undo-more
@findex copy-region-as-kill
@findex yank

@table @code
@item undo-more
Defines a new undo element format (@var{fun} . @var{args}), which
means ``undo by applying @var{fun} to @var{args}''.  For spreadsheet
buffers, it allows undos in the data area even though that's outside
the narrowing.

@item copy-region-as-kill
When copying from the print area of a spreadsheet, treat the region as
a rectangle and attach each cell's formula and printer as 'ses
properties.

@item yank
When yanking into the print area of a spreadsheet, first try to yank
as cells (if the yank text has 'ses properties), then as tab-separated
formulas, then (if all else fails) as a single formula for the current
cell.
@end table

@c ===================================================================
@node Index
@unnumbered Index

@printindex cp

@c ===================================================================

@node Acknowledgments
@unnumbered Acknowledgments

Coding by:
@quotation
@c jyavner@@member.fsf.org
Jonathan Yavner,
@c monnier@@gnu.org
Stefan Monnier,
@c shigeru.fukaya@@gmail.com
Shigeru Fukaya
@end quotation

@noindent
Texinfo manual by:
@quotation
@c jyavner@@member.fsf.org
Jonathan Yavner,
@c brad@@chenla.org
Brad Collins
@end quotation

@noindent
Ideas from:
@quotation
@c christoph.conrad@@gmx.de
Christoph Conrad,
@c cyberbob@@redneck.gacracker.org
CyberBob,
@c syver-en@@online.no
Syver Enstad,
@c fischman@@zion.bpnetworks.com
Ami Fischman,
@c Thomas.Gehrlein@@t-online.de
Thomas Gehrlein,
@c c.f.a.johnson@@rogers.com
Chris F.A. Johnson,
@c lyusong@@hotmail.com
Yusong Li,
@c juri@@jurta.org
Juri Linkov,
@c maierh@@myself.com
Harald Maier,
@c anash@@san.rr.com
Alan Nash,
@c pinard@@iro.umontreal.ca
François Pinard,
@c ppinto@@cs.cmu.edu
Pedro Pinto,
@c xsteve@@riic.at
Stefan Reichör,
@c epameinondas@@gmx.de
Oliver Scholz,
@c rms@@gnu.org
Richard M. Stallman,
@c teirllm@@dms.auburn.edu
Luc Teirlinck,
@c jotto@@pobox.com
J. Otto Tennant,
@c jphil@@acs.pagesjaunes.fr
Jean-Philippe Theberge
@end quotation

@c ===================================================================

@node GNU Free Documentation License
@appendix GNU Free Documentation License
@include doclicense.texi

@bye
