\input texinfo  @c -*- coding: utf-8 -*-
@c %**start of header
@setfilename ../../info/org.info
@settitle The Org Manual
@include docstyle.texi

@set VERSION 9.1.9
@set DATE 2018-03-22

@c Version and Contact Info
@set MAINTAINERSITE @uref{https://orgmode.org,maintainers web page}
@set AUTHOR Carsten Dominik
@set MAINTAINER Carsten Dominik
@set MAINTAINEREMAIL @email{carsten at orgmode dot org}
@set MAINTAINERCONTACT @uref{mailto:carsten at orgmode dot org,contact the maintainer}
@c %**end of header
@finalout


@c -----------------------------------------------------------------------------

@c Macro definitions for commands and keys
@c =======================================

@c The behavior of the key/command macros will depend on the flag cmdnames
@c When set, commands names are shown.  When clear, they are not shown.

@set cmdnames

@c Below we define the following macros for Org key tables:

@c orgkey{key}                        A key item
@c orgcmd{key,cmd}                    Key with command name
@c xorgcmd{key,cmd}                   Key with command name as @itemx
@c orgcmdnki{key,cmd}                 Like orgcmd, but do not index the key
@c orgcmdtkc{text,key,cmd}            Like orgcmd,special text instead of key
@c orgcmdkkc{key1,key2,cmd}           Two keys with one command name, use "or"
@c orgcmdkxkc{key1,key2,cmd}          Two keys with one command name, but
@c                                    different functions, so format as @itemx
@c orgcmdkskc{key1,key2,cmd}          Same as orgcmdkkc, but use "or short"
@c xorgcmdkskc{key1,key2,cmd}         Same as previous, but use @itemx
@c orgcmdkkcc{key1,key2,cmd1,cmd2}    Two keys and two commands

@c a key but no command
@c    Inserts:    @item key
@macro orgkey{key}
@kindex \key\
@item @kbd{\key\}
@end macro

@macro xorgkey{key}
@kindex \key\
@itemx @kbd{\key\}
@end macro

@c one key with a command
@c   Inserts:    @item KEY               COMMAND
@macro orgcmd{key,command}
@ifset cmdnames
@kindex \key\
@findex \command\
@iftex
@item @kbd{\key\} @hskip 0pt plus 1filll @code{\command\}
@end iftex
@ifnottex
@item @kbd{\key\} @tie{}@tie{}@tie{}@tie{}(@code{\command\})
@end ifnottex
@end ifset
@ifclear cmdnames
@kindex \key\
@item @kbd{\key\}
@end ifclear
@end macro

@c One key with one command, formatted using @itemx
@c   Inserts:    @itemx KEY               COMMAND
@macro xorgcmd{key,command}
@ifset cmdnames
@kindex \key\
@findex \command\
@iftex
@itemx @kbd{\key\} @hskip 0pt plus 1filll @code{\command\}
@end iftex
@ifnottex
@itemx @kbd{\key\} @tie{}@tie{}@tie{}@tie{}(@code{\command\})
@end ifnottex
@end ifset
@ifclear cmdnames
@kindex \key\
@itemx @kbd{\key\}
@end ifclear
@end macro

@c one key with a command, bit do not index the key
@c   Inserts:    @item KEY               COMMAND
@macro orgcmdnki{key,command}
@ifset cmdnames
@findex \command\
@iftex
@item @kbd{\key\} @hskip 0pt plus 1filll @code{\command\}
@end iftex
@ifnottex
@item @kbd{\key\} @tie{}@tie{}@tie{}@tie{}(@code{\command\})
@end ifnottex
@end ifset
@ifclear cmdnames
@item @kbd{\key\}
@end ifclear
@end macro

@c one key with a command, and special text to replace key in item
@c   Inserts:    @item TEXT                    COMMAND
@macro orgcmdtkc{text,key,command}
@ifset cmdnames
@kindex \key\
@findex \command\
@iftex
@item @kbd{\text\} @hskip 0pt plus 1filll @code{\command\}
@end iftex
@ifnottex
@item @kbd{\text\} @tie{}@tie{}@tie{}@tie{}(@code{\command\})
@end ifnottex
@end ifset
@ifclear cmdnames
@kindex \key\
@item @kbd{\text\}
@end ifclear
@end macro

@c two keys with one command
@c   Inserts:    @item KEY1 or KEY2            COMMAND
@macro orgcmdkkc{key1,key2,command}
@ifset cmdnames
@kindex \key1\
@kindex \key2\
@findex \command\
@iftex
@item @kbd{\key1\} @ @r{or} @ @kbd{\key2\} @hskip 0pt plus 1filll @code{\command\}
@end iftex
@ifnottex
@item @kbd{\key1\} @ @r{or} @ @kbd{\key2\} @tie{}@tie{}@tie{}@tie{}(@code{\command\})
@end ifnottex
@end ifset
@ifclear cmdnames
@kindex \key1\
@kindex \key2\
@item @kbd{\key1\} @ @r{or} @ @kbd{\key2\}
@end ifclear
@end macro

@c Two keys with one command name, but different functions, so format as
@c @itemx
@c   Inserts:    @item KEY1
@c               @itemx KEY2                COMMAND
@macro orgcmdkxkc{key1,key2,command}
@ifset cmdnames
@kindex \key1\
@kindex \key2\
@findex \command\
@iftex
@item @kbd{\key1\}
@itemx @kbd{\key2\} @hskip 0pt plus 1filll @code{\command\}
@end iftex
@ifnottex
@item @kbd{\key1\}
@itemx @kbd{\key2\} @tie{}@tie{}@tie{}@tie{}(@code{\command\})
@end ifnottex
@end ifset
@ifclear cmdnames
@kindex \key1\
@kindex \key2\
@item @kbd{\key1\}
@itemx @kbd{\key2\}
@end ifclear
@end macro

@c Same as previous, but use "or short"
@c   Inserts:    @item KEY1 or short KEY2            COMMAND
@macro orgcmdkskc{key1,key2,command}
@ifset cmdnames
@kindex \key1\
@kindex \key2\
@findex \command\
@iftex
@item @kbd{\key1\} @ @r{or short} @ @kbd{\key2\} @hskip 0pt plus 1filll @code{\command\}
@end iftex
@ifnottex
@item @kbd{\key1\} @ @r{or short} @ @kbd{\key2\} @tie{}@tie{}@tie{}@tie{}(@code{\command\})
@end ifnottex
@end ifset
@ifclear cmdnames
@kindex \key1\
@kindex \key2\
@item @kbd{\key1\} @ @r{or short} @ @kbd{\key2\}
@end ifclear
@end macro

@c Same as previous, but use @itemx
@c   Inserts:    @itemx KEY1 or short KEY2            COMMAND
@macro xorgcmdkskc{key1,key2,command}
@ifset cmdnames
@kindex \key1\
@kindex \key2\
@findex \command\
@iftex
@itemx @kbd{\key1\} @ @r{or short} @ @kbd{\key2\} @hskip 0pt plus 1filll @code{\command\}
@end iftex
@ifnottex
@itemx @kbd{\key1\} @ @r{or short} @ @kbd{\key2\} @tie{}@tie{}@tie{}@tie{}(@code{\command\})
@end ifnottex
@end ifset
@ifclear cmdnames
@kindex \key1\
@kindex \key2\
@itemx @kbd{\key1\} @ @r{or short} @ @kbd{\key2\}
@end ifclear
@end macro

@c two keys with two commands
@c   Inserts:    @item KEY1                        COMMAND1
@c               @itemx KEY2                       COMMAND2
@macro orgcmdkkcc{key1,key2,command1,command2}
@ifset cmdnames
@kindex \key1\
@kindex \key2\
@findex \command1\
@findex \command2\
@iftex
@item @kbd{\key1\} @hskip 0pt plus 1filll @code{\command1\}
@itemx @kbd{\key2\} @hskip 0pt plus 1filll @code{\command2\}
@end iftex
@ifnottex
@item @kbd{\key1\} @tie{}@tie{}@tie{}@tie{}(@code{\command1\})
@itemx @kbd{\key2\} @tie{}@tie{}@tie{}@tie{}(@code{\command2\})
@end ifnottex
@end ifset
@ifclear cmdnames
@kindex \key1\
@kindex \key2\
@item @kbd{\key1\}
@itemx @kbd{\key2\}
@end ifclear
@end macro
@c -----------------------------------------------------------------------------

@iftex
@c @hyphenation{time-stamp time-stamps time-stamp-ing time-stamp-ed}
@end iftex

@c Subheadings inside a table.
@macro tsubheading{text}
@ifinfo
@subsubheading \text\
@end ifinfo
@ifnotinfo
@item @b{\text\}
@end ifnotinfo
@end macro

@copying
This manual is for Org version @value{VERSION}.

Copyright @copyright{} 2004--2018 Free Software Foundation, Inc.

@quotation
Permission is granted to copy, distribute and/or modify this document
under the terms of the GNU Free Documentation License, Version 1.3 or
any later version published by the Free Software Foundation; with no
Invariant Sections, with the Front-Cover Texts being ``A GNU Manual,''
and with the Back-Cover Texts as in (a) below.  A copy of the license
is included in the section entitled ``GNU Free Documentation License.''

(a) The FSF's Back-Cover Text is: ``You have the freedom to copy and
modify this GNU manual.''
@end quotation
@end copying

@dircategory Emacs editing modes
@direntry
* Org Mode: (org).      Outline-based notes management and organizer
@end direntry

@titlepage
@title The Org Manual

@subtitle Release @value{VERSION}
@author by Carsten Dominik
with contributions by Bastien Guerry, Nicolas Goaziou, Eric Schulte,
Jambunathan K, Dan Davison, Thomas Dye, David O'Toole, and Philip Rooke.

@c The following two commands start the copyright page.
@page
@vskip 0pt plus 1filll
@insertcopying
@end titlepage

@c Output the short table of contents at the beginning.
@shortcontents

@c Output the table of contents at the beginning.
@contents

@ifnottex

@node Top, Introduction, (dir), (dir)
@top Org Mode Manual

@insertcopying
@end ifnottex

@menu
* Introduction::                Getting started
* Document structure::          A tree works like your brain
* Tables::                      Pure magic for quick formatting
* Hyperlinks::                  Notes in context
* TODO items::                  Every tree branch can be a TODO item
* Tags::                        Tagging headlines and matching sets of tags
* Properties and columns::      Storing information about an entry
* Dates and times::             Making items useful for planning
* Capture - Refile - Archive::  The ins and outs for projects
* Agenda views::                Collecting information into views
* Markup::                      Prepare text for rich export
* Exporting::                   Sharing and publishing notes
* Publishing::                  Create a web site of linked Org files
* Working with source code::    Export, evaluate, and tangle code blocks
* Miscellaneous::               All the rest which did not fit elsewhere
* Hacking::                     How to hack your way around
* MobileOrg::                   Viewing and capture on a mobile device
* History and acknowledgments::  How Org came into being
* GNU Free Documentation License::  The license for this documentation.
* Main Index::                  An index of Org's concepts and features
* Key Index::                   Key bindings and where they are described
* Command and Function Index::  Command names and some internal functions
* Variable Index::              Variables mentioned in the manual

@detailmenu
 --- The Detailed Node Listing ---

Introduction

* Summary::                     Brief summary of what Org does
* Installation::                Installing Org
* Activation::                  How to activate Org for certain buffers
* Feedback::                    Bug reports, ideas, patches etc.
* Conventions::                 Typesetting conventions in the manual

Document structure

* Outlines::                    Org is based on Outline mode
* Headlines::                   How to typeset Org tree headlines
* Visibility cycling::          Show and hide, much simplified
* Motion::                      Jumping to other headlines
* Structure editing::           Changing sequence and level of headlines
* Sparse trees::                Matches embedded in context
* Plain lists::                 Additional structure within an entry
* Drawers::                     Tucking stuff away
* Blocks::                      Folding blocks
* Footnotes::                   How footnotes are defined in Org's syntax
* Orgstruct mode::              Structure editing outside Org
* Org syntax::                  Formal description of Org's syntax

Visibility cycling

* Global and local cycling::    Cycling through various visibility states
* Initial visibility::          Setting the initial visibility state
* Catching invisible edits::    Preventing mistakes when editing invisible parts

Tables

* Built-in table editor::       Simple tables
* Column width and alignment::  Overrule the automatic settings
* Column groups::               Grouping to trigger vertical lines
* Orgtbl mode::                 The table editor as minor mode
* The spreadsheet::             The table editor has spreadsheet capabilities
* Org-Plot::                    Plotting from org tables

The spreadsheet

* References::                  How to refer to another field or range
* Formula syntax for Calc::     Using Calc to compute stuff
* Formula syntax for Lisp::     Writing formulas in Emacs Lisp
* Durations and time values::   How to compute durations and time values
* Field and range formulas::    Formula for specific (ranges of) fields
* Column formulas::             Formulas valid for an entire column
* Lookup functions::            Lookup functions for searching tables
* Editing and debugging formulas::  Fixing formulas
* Updating the table::          Recomputing all dependent fields
* Advanced features::           Field and column names, parameters and automatic recalc

Hyperlinks

* Link format::                 How links in Org are formatted
* Internal links::              Links to other places in the current file
* External links::              URL-like links to the world
* Handling links::              Creating, inserting and following
* Using links outside Org::     Linking from my C source code?
* Link abbreviations::          Shortcuts for writing complex links
* Search options::              Linking to a specific location
* Custom searches::             When the default search is not enough

Internal links

* Radio targets::               Make targets trigger links in plain text

TODO items

* TODO basics::                 Marking and displaying TODO entries
* TODO extensions::             Workflow and assignments
* Progress logging::            Dates and notes for progress
* Priorities::                  Some things are more important than others
* Breaking down tasks::         Splitting a task into manageable pieces
* Checkboxes::                  Tick-off lists

Extended use of TODO keywords

* Workflow states::             From TODO to DONE in steps
* TODO types::                  I do this, Fred does the rest
* Multiple sets in one file::   Mixing it all, and still finding your way
* Fast access to TODO states::  Single letter selection of a state
* Per-file keywords::           Different files, different requirements
* Faces for TODO keywords::     Highlighting states
* TODO dependencies::           When one task needs to wait for others

Progress logging

* Closing items::               When was this entry marked DONE?
* Tracking TODO state changes::  When did the status change?
* Tracking your habits::        How consistent have you been?

Tags

* Tag inheritance::             Tags use the tree structure of the outline
* Setting tags::                How to assign tags to a headline
* Tag hierarchy::               Create a hierarchy of tags
* Tag searches::                Searching for combinations of tags

Properties and columns

* Property syntax::             How properties are spelled out
* Special properties::          Access to other Org mode features
* Property searches::           Matching property values
* Property inheritance::        Passing values down the tree
* Column view::                 Tabular viewing and editing
* Property API::                Properties for Lisp programmers

Column view

* Defining columns::            The COLUMNS format property
* Using column view::           How to create and use column view
* Capturing column view::       A dynamic block for column view

Defining columns

* Scope of column definitions::  Where defined, where valid?
* Column attributes::           Appearance and content of a column

Dates and times

* Timestamps::                  Assigning a time to a tree entry
* Creating timestamps::         Commands which insert timestamps
* Deadlines and scheduling::    Planning your work
* Clocking work time::          Tracking how long you spend on a task
* Effort estimates::            Planning work effort in advance
* Timers::                      Notes with a running timer

Creating timestamps

* The date/time prompt::        How Org mode helps you entering date and time
* Custom time format::          Making dates look different

Deadlines and scheduling

* Inserting deadline/schedule::  Planning items
* Repeated tasks::              Items that show up again and again

Clocking work time

* Clocking commands::           Starting and stopping a clock
* The clock table::             Detailed reports
* Resolving idle time::         Resolving time when you've been idle

Capture - Refile - Archive

* Capture::                     Capturing new stuff
* Attachments::                 Add files to tasks
* RSS feeds::                   Getting input from RSS feeds
* Protocols::                   External (e.g., Browser) access to Emacs and Org
* Refile and copy::             Moving/copying a tree from one place to another
* Archiving::                   What to do with finished projects

Capture

* Setting up capture::          Where notes will be stored
* Using capture::               Commands to invoke and terminate capture
* Capture templates::           Define the outline of different note types

Capture templates

* Template elements::           What is needed for a complete template entry
* Template expansion::          Filling in information about time and context
* Templates in contexts::       Only show a template in a specific context

Protocols for external access

* @code{store-link} protocol::  Store a link, push URL to kill-ring.
* @code{capture} protocol::     Fill a buffer with external information.
* @code{open-source} protocol::  Edit published contents.

Archiving

* Moving subtrees::             Moving a tree to an archive file
* Internal archiving::          Switch off a tree but keep it in the file

Agenda views

* Agenda files::                Files being searched for agenda information
* Agenda dispatcher::           Keyboard access to agenda views
* Built-in agenda views::       What is available out of the box?
* Presentation and sorting::    How agenda items are prepared for display
* Agenda commands::             Remote editing of Org trees
* Custom agenda views::         Defining special searches and views
* Exporting agenda views::      Writing a view to a file
* Agenda column view::          Using column view for collected entries

The built-in agenda views

* Weekly/daily agenda::         The calendar page with current tasks
* Global TODO list::            All unfinished action items
* Matching tags and properties::  Structured information with fine-tuned search
* Search view::                 Find entries by searching for text
* Stuck projects::              Find projects you need to review

Presentation and sorting

* Categories::                  Not all tasks are equal
* Time-of-day specifications::  How the agenda knows the time
* Sorting agenda items::        The order of things
* Filtering/limiting agenda items::  Dynamically narrow the agenda

Custom agenda views

* Storing searches::            Type once, use often
* Block agenda::                All the stuff you need in a single buffer
* Setting options::             Changing the rules

Markup for rich export

* Paragraphs::                  The basic unit of text
* Emphasis and monospace::      Bold, italic, etc.
* Horizontal rules::            Make a line
* Images and tables::           Images, tables and caption mechanism
* Literal examples::            Source code examples with special formatting
* Special symbols::             Greek letters and other symbols
* Subscripts and superscripts::  Simple syntax for raising/lowering text
* Embedded @LaTeX{}::           LaTeX can be freely used inside Org documents

Embedded @LaTeX{}

* @LaTeX{} fragments::          Complex formulas made easy
* Previewing @LaTeX{} fragments::  What will this snippet look like?
* CDLaTeX mode::                Speed up entering of formulas

Exporting

* The export dispatcher::       The main interface
* Export settings::             Common export settings
* Table of contents::           The if and where of the table of contents
* Include files::               Include additional files into a document
* Macro replacement::           Use macros to create templates
* Comment lines::               What will not be exported
* ASCII/Latin-1/UTF-8 export::  Exporting to flat files with encoding
* Beamer export::               Exporting as a Beamer presentation
* HTML export::                 Exporting to HTML
* @LaTeX{} export::             Exporting to @LaTeX{}, and processing to PDF
* Markdown export::             Exporting to Markdown
* OpenDocument Text export::    Exporting to OpenDocument Text
* Org export::                  Exporting to Org
* Texinfo export::              Exporting to Texinfo
* iCalendar export::            Exporting to iCalendar
* Other built-in back-ends::    Exporting to a man page
* Advanced configuration::      Fine-tuning the export output
* Export in foreign buffers::   Author tables and lists in Org syntax

Beamer export

* Beamer export commands::      For creating Beamer documents.
* Beamer specific export settings::  For customizing Beamer export.
* Sectioning Frames and Blocks in Beamer::  For composing Beamer slides.
* Beamer specific syntax::      For using in Org documents.
* Editing support::             For using helper functions.
* A Beamer example::            A complete presentation.

HTML export

* HTML Export commands::        Invoking HTML export
* HTML Specific export settings::  Settings for HTML export
* HTML doctypes::               Exporting various (X)HTML flavors
* HTML preamble and postamble::  Inserting preamble and postamble
* Quoting HTML tags::           Using direct HTML in Org files
* Links in HTML export::        Interpreting and formatting links
* Tables in HTML export::       Formatting and modifying tables
* Images in HTML export::       Inserting figures with HTML output
* Math formatting in HTML export::  Handling math equations
* Text areas in HTML export::   Showing an alternate approach, an example
* CSS support::                 Styling HTML output
* JavaScript support::          Folding scripting in the web browser

@LaTeX{} export

* @LaTeX{} export commands::    For producing @LaTeX{} and PDF documents.
* @LaTeX{} specific export settings::  Unique to this @LaTeX{} back-end.
* @LaTeX{} header and sectioning::  For file structure.
* Quoting @LaTeX{} code::       Directly in the Org document.
* Tables in @LaTeX{} export::   Attributes specific to tables.
* Images in @LaTeX{} export::   Attributes specific to images.
* Plain lists in @LaTeX{} export::  Attributes specific to lists.
* Source blocks in @LaTeX{} export::  Attributes specific to source code blocks.
* Example blocks in @LaTeX{} export::  Attributes specific to example blocks.
* Special blocks in @LaTeX{} export::  Attributes specific to special blocks.
* Horizontal rules in @LaTeX{} export::  Attributes specific to horizontal rules.

OpenDocument Text export

* Pre-requisites for ODT export::  Required packages.
* ODT export commands::         Invoking export.
* ODT specific export settings::  Configuration options.
* Extending ODT export::        Producing @file{.doc}, @file{.pdf} files.
* Applying custom styles::      Styling the output.
* Links in ODT export::         Handling and formatting links.
* Tables in ODT export::        Org table conversions.
* Images in ODT export::        Inserting images.
* Math formatting in ODT export::  Formatting @LaTeX{} fragments.
* Labels and captions in ODT export::  Rendering objects.
* Literal examples in ODT export::  For source code and example blocks.
* Advanced topics in ODT export::  For power users.

Math formatting in ODT export

* Working with @LaTeX{} math snippets::  Embedding in @LaTeX{} format.
* Working with MathML or OpenDocument formula files::  Embedding in native format.

Advanced topics in ODT export

* Configuring a document converter::  Registering a document converter.
* Working with OpenDocument style files::  Exploring internals.
* Creating one-off styles::     Customizing styles, highlighting.
* Customizing tables in ODT export::  Defining table templates.
* Validating OpenDocument XML::  Debugging corrupted OpenDocument files.

Texinfo export

* Texinfo export commands::     Invoking commands.
* Texinfo specific export settings::  Setting the environment.
* Texinfo file header::         Generating the header.
* Texinfo title and copyright page::  Creating preamble pages.
* Info directory file::     Installing a manual in Info file hierarchy.
* Headings and sectioning structure::  Building document structure.
* Indices::                     Creating indices.
* Quoting Texinfo code::        Incorporating literal Texinfo code.
* Plain lists in Texinfo export::  List attributes.
* Tables in Texinfo export::    Table attributes.
* Images in Texinfo export::    Image attributes.
* Special blocks in Texinfo export::  Special block attributes.
* A Texinfo example::           Processing Org to Texinfo.

Publishing

* Configuration::               Defining projects
* Uploading files::             How to get files up on the server
* Sample configuration::        Example projects
* Triggering publication::      Publication commands

Configuration

* Project alist::               The central configuration variable
* Sources and destinations::    From here to there
* Selecting files::             What files are part of the project?
* Publishing action::           Setting the function doing the publishing
* Publishing options::          Tweaking HTML/@LaTeX{} export
* Publishing links::            Which links keep working after publishing?
* Sitemap::                     Generating a list of all pages
* Generating an index::         An index that reaches across pages

Sample configuration

* Simple example::              One-component publishing
* Complex example::             A multi-component publishing example

Working with source code

* Structure of code blocks::    Code block syntax described
* Editing source code::         Language major-mode editing
* Exporting code blocks::       Export contents and/or results
* Extracting source code::      Create pure source code files
* Evaluating code blocks::      Place results of evaluation in the Org mode buffer
* Library of Babel::            Use and contribute to a library of useful code blocks
* Languages::                   List of supported code block languages
* Header arguments::            Configure code block functionality
* Results of evaluation::       How evaluation results are handled
* Noweb reference syntax::      Literate programming in Org mode
* Key bindings and useful functions::  Work quickly with code blocks
* Batch execution::             Call functions from the command line

Header arguments

* Using header arguments::      Different ways to set header arguments
* Specific header arguments::   List of header arguments

Using header arguments

* System-wide header arguments::  Set globally, language-specific
* Language-specific header arguments::  Set in the Org file's headers
* Header arguments in Org mode properties::  Set in the Org file
* Language-specific mode properties::
* Code block specific header arguments::  The most commonly used method
* Arguments in function calls::  The most specific level, takes highest priority

Specific header arguments

* var::                         Pass arguments to @samp{src} code blocks
* results::                     Specify results type; how to collect
* file::                        Specify a path for output file
* file-desc::                   Specify a description for file results
* file-ext::                    Specify an extension for file output
* output-dir::                  Specify a directory for output file
* dir::                         Specify the default directory for code block execution
* exports::                     Specify exporting code, results, both, none
* tangle::                      Toggle tangling; or specify file name
* mkdirp::                      Toggle for parent directory creation for target files during tangling
* comments::                    Toggle insertion of comments in tangled code files
* padline::                     Control insertion of padding lines in tangled code files
* no-expand::                   Turn off variable assignment and noweb expansion during tangling
* session::                     Preserve the state of code evaluation
* noweb::                       Toggle expansion of noweb references
* noweb-ref::                   Specify block's noweb reference resolution target
* noweb-sep::                   String to separate noweb references
* cache::                       Avoid re-evaluating unchanged code blocks
* sep::                         Delimiter for writing tabular results outside Org
* hlines::                      Handle horizontal lines in tables
* colnames::                    Handle column names in tables
* rownames::                    Handle row names in tables
* shebang::                     Make tangled files executable
* tangle-mode::                 Set permission of tangled files
* eval::                        Limit evaluation of specific code blocks
* wrap::                        Mark source block evaluation results
* post::                        Post processing of results of code block evaluation
* prologue::                    Text to prepend to body of code block
* epilogue::                    Text to append to body of code block

Miscellaneous

* Completion::                  M-@key{TAB} guesses completions
* Easy templates::              Quick insertion of structural elements
* Speed keys::                  Electric commands at the beginning of a headline
* Code evaluation security::    Org mode files evaluate inline code
* Customization::               Adapting Org to changing tastes
* In-buffer settings::          Overview of the #+KEYWORDS
* The very busy C-c C-c key::   When in doubt, press C-c C-c
* Clean view::                  Getting rid of leading stars in the outline
* TTY keys::                    Using Org on a tty
* Interaction::                 With other Emacs packages
* org-crypt::                   Encrypting Org files

Interaction with other packages

* Cooperation::                 Packages Org cooperates with
* Conflicts::                   Packages that lead to conflicts

Hacking

* Hooks::                       How to reach into Org's internals
* Add-on packages::             Available extensions
* Adding hyperlink types::      New custom link types
* Adding export back-ends::     How to write new export back-ends
* Context-sensitive commands::  How to add functionality to such commands
* Tables in arbitrary syntax::  Orgtbl for @LaTeX{} and other programs
* Dynamic blocks::              Automatically filled blocks
* Special agenda views::        Customized views
* Speeding up your agendas::    Tips on how to speed up your agendas
* Extracting agenda information::  Post-processing of agenda information
* Using the property API::      Writing programs that use entry properties
* Using the mapping API::       Mapping over all or selected entries

Tables and lists in arbitrary syntax

* Radio tables::                Sending and receiving radio tables
* A @LaTeX{} example::          Step by step, almost a tutorial
* Translator functions::        Copy and modify
* Radio lists::                 Sending and receiving lists

MobileOrg

* Setting up the staging area::  For the mobile device
* Pushing to MobileOrg::        Uploading Org files and agendas
* Pulling from MobileOrg::      Integrating captured and flagged items

@end detailmenu
@end menu

@node Introduction
@chapter Introduction
@cindex introduction

@menu
* Summary::                     Brief summary of what Org does
* Installation::                Installing Org
* Activation::                  How to activate Org for certain buffers
* Feedback::                    Bug reports, ideas, patches etc.
* Conventions::                 Typesetting conventions in the manual
@end menu

@node Summary
@section Summary
@cindex summary

Org is a mode for keeping notes, maintaining TODO lists, and project planning
with a fast and effective plain-text system.  It also is an authoring system
with unique support for literate programming and reproducible research.

Org is implemented on top of Outline mode, which makes it possible to keep
the content of large files well structured.  Visibility cycling and structure
editing help to work with the tree.  Tables are easily created with a
built-in table editor.  Plain text URL-like links connect to websites,
emails, Usenet messages, BBDB entries, and any files related to the projects.

Org develops organizational tasks around notes files that contain lists or
information about projects as plain text.  Project planning and task
management makes use of metadata which is part of an outline node.  Based on
this data, specific entries can be extracted in queries and create dynamic
@i{agenda views} that also integrate the Emacs calendar and diary.  Org can
be used to implement many different project planning schemes, such as David
Allen's GTD system.

Org files can serve as a single source authoring system with export to many
different formats such as HTML, @LaTeX{}, Open Document, and Markdown.  New
export backends can be derived from existing ones, or defined from scratch.

Org files can include source code blocks, which makes Org uniquely suited for
authoring technical documents with code examples.  Org source code blocks are
fully functional; they can be evaluated in place and their results can be
captured in the file.  This makes it possible to create a single file
reproducible research compendium.

Org keeps simple things simple.  When first fired up, it should feel like a
straightforward, easy to use outliner.  Complexity is not imposed, but a
large amount of functionality is available when needed.  Org is a toolbox.
Many users actually run only a (very personal) fraction of Org's capabilities, and
know that there is more whenever they need it.

All of this is achieved with strictly plain text files, the most portable and
future-proof file format.  Org runs in Emacs.  Emacs is one of the most
widely ported programs, so that Org mode is available on every major
platform.

@cindex FAQ
There is a website for Org which provides links to the newest
version of Org, as well as additional information, frequently asked
questions (FAQ), links to tutorials, etc.  This page is located at
@uref{https://orgmode.org}.
@cindex print edition

An earlier version (7.3) of this manual is available as a
@uref{http://www.network-theory.co.uk/org/manual/, paperback book from
Network Theory Ltd.}

@page

@node Installation
@section Installation
@cindex installation

Org is part of recent distributions of GNU Emacs, so you normally don't need
to install it.  If, for one reason or another, you want to install Org on top
of this pre-packaged version, there are three ways to do it:

@itemize @bullet
@item By using Emacs package system.
@item By downloading Org as an archive.
@item By using Org's git repository.
@end itemize

We @b{strongly recommend} to stick to a single installation method.

@subsubheading Using Emacs packaging system

Recent Emacs distributions include a packaging system which lets you install
Elisp libraries.  You can install Org with @kbd{M-x package-install @key{RET}
org}.

@noindent @b{Important}: you need to do this in a session where no @code{.org} file has
been visited, i.e., where no Org built-in function have been loaded.
Otherwise autoload Org functions will mess up the installation.

If you want to use Org's package repository,
check out the @uref{https://orgmode.org/elpa.html, Org ELPA page}.

@subsubheading Downloading Org as an archive

You can download Org latest release from @uref{https://orgmode.org/, Org's
website}.  In this case, make sure you set the load-path correctly in your
Emacs init file:

@lisp
(add-to-list 'load-path "~/path/to/orgdir/lisp")
@end lisp

The downloaded archive contains contributed libraries that are not included
in Emacs.  If you want to use them, add the @file{contrib} directory to your
load-path:

@lisp
(add-to-list 'load-path "~/path/to/orgdir/contrib/lisp" t)
@end lisp

Optionally, you can compile the files and/or install them in your system.
Run @code{make help} to list compilation and installation options.

@subsubheading Using Org's git repository

You can clone Org's repository and install Org like this:

@example
$ cd ~/src/
$ git clone https://code.orgmode.org/bzg/org-mode.git
$ cd org-mode/
$ make autoloads
@end example

Note that in this case, @code{make autoloads} is mandatory: it defines Org's
version in @file{org-version.el} and Org's autoloads in
@file{org-loaddefs.el}.

Remember to add the correct load-path as described in the method above.

You can also compile with @code{make}, generate the documentation with
@code{make doc}, create a local configuration with @code{make config} and
install Org with @code{make install}.  Please run @code{make help} to get
the list of compilation/installation options.

For more detailed explanations on Org's build system, please check the Org
Build System page on @uref{https://orgmode.org/worg/dev/org-build-system.html,
Worg}.

@node Activation
@section Activation
@cindex activation
@cindex autoload
@cindex ELPA
@cindex global key bindings
@cindex key bindings, global
@findex org-agenda
@findex org-capture
@findex org-store-link
@findex org-switchb

Org mode buffers need font-lock to be turned on: this is the default in
Emacs@footnote{If you don't use font-lock globally, turn it on in Org buffer
with @code{(add-hook 'org-mode-hook 'turn-on-font-lock)}}.

There are compatibility issues between Org mode and some other Elisp
packages, please take the time to check the list (@pxref{Conflicts}).

The four Org commands @command{org-store-link}, @command{org-capture},
@command{org-agenda}, and @command{org-switchb} should be accessible through
global keys (i.e., anywhere in Emacs, not just in Org buffers).  Here are
suggested bindings for these keys, please modify the keys to your own
liking.
@lisp
(global-set-key "\C-cl" 'org-store-link)
(global-set-key "\C-ca" 'org-agenda)
(global-set-key "\C-cc" 'org-capture)
(global-set-key "\C-cb" 'org-switchb)
@end lisp

@cindex Org mode, turning on
Files with the @file{.org} extension use Org mode by default.  To turn on Org
mode in a file that does not have the extension @file{.org}, make the first
line of a file look like this:

@example
MY PROJECTS    -*- mode: org; -*-
@end example

@vindex org-insert-mode-line-in-empty-file
@noindent which will select Org mode for this buffer no matter what
the file's name is.  See also the variable
@code{org-insert-mode-line-in-empty-file}.

Many commands in Org work on the region if the region is @i{active}.  To make
use of this, you need to have @code{transient-mark-mode} turned on, which is
the default.  If you do not like @code{transient-mark-mode}, you can create
an active region by using the mouse to select a region, or pressing
@kbd{C-@key{SPC}} twice before moving the cursor.

@node Feedback
@section Feedback
@cindex feedback
@cindex bug reports
@cindex maintainer
@cindex author

If you find problems with Org, or if you have questions, remarks, or ideas
about it, please mail to the Org mailing list @email{emacs-orgmode@@gnu.org}.
You can subscribe to the list
@uref{https://lists.gnu.org/mailman/listinfo/emacs-orgmode, on this web page}.
If you are not a member of the mailing list, your mail will be passed to the
list after a moderator has approved it@footnote{Please consider subscribing
to the mailing list, in order to minimize the work the mailing list
moderators have to do.}.

For bug reports, please first try to reproduce the bug with the latest
version of Org available---if you are running an outdated version, it is
quite possible that the bug has been fixed already.  If the bug persists,
prepare a report and provide as much information as possible, including the
version information of Emacs (@kbd{M-x emacs-version @key{RET}}) and Org
(@kbd{M-x org-version @key{RET}}), as well as the Org related setup in the
Emacs init file.  The easiest way to do this is to use the command
@example
@kbd{M-x org-submit-bug-report @key{RET}}
@end example
@noindent which will put all this information into an Emacs mail buffer so
that you only need to add your description.  If you are not sending the Email
from within Emacs, please copy and paste the content into your Email program.

Sometimes you might face a problem due to an error in your Emacs or Org mode
setup.  Before reporting a bug, it is very helpful to start Emacs with minimal
customizations and reproduce the problem.  Doing so often helps you determine
if the problem is with your customization or with Org mode itself.  You can
start a typical minimal session with a command like the example below.

@example
$ emacs -Q -l /path/to/minimal-org.el
@end example

However if you are using Org mode as distributed with Emacs, a minimal setup
is not necessary.  In that case it is sufficient to start Emacs as
@code{emacs -Q}.  The @code{minimal-org.el} setup file can have contents as
shown below.

@lisp
;;; Minimal setup to load latest 'org-mode'

;; activate debugging
(setq debug-on-error t
      debug-on-signal nil
      debug-on-quit nil)

;; add latest org-mode to load path
(add-to-list 'load-path "/path/to/org-mode/lisp")
(add-to-list 'load-path "/path/to/org-mode/contrib/lisp" t)
@end lisp

If an error occurs, a backtrace can be very useful (see below on how to
create one).  Often a small example file helps, along with clear information
about:

@enumerate
@item What exactly did you do?
@item What did you expect to happen?
@item What happened instead?
@end enumerate
@noindent Thank you for helping to improve this program.

@subsubheading How to create a useful backtrace

@cindex backtrace of an error
If working with Org produces an error with a message you don't
understand, you may have hit a bug.  The best way to report this is by
providing, in addition to what was mentioned above, a @emph{backtrace}.
This is information from the built-in debugger about where and how the
error occurred.  Here is how to produce a useful backtrace:

@enumerate
@item
Reload uncompiled versions of all Org mode Lisp files.  The backtrace
contains much more information if it is produced with uncompiled code.
To do this, use
@example
@kbd{C-u M-x org-reload @key{RET}}
@end example
@noindent
or select @code{Org -> Refresh/Reload -> Reload Org uncompiled} from the
menu.
@item
Go to the @code{Options} menu and select @code{Enter Debugger on Error}.
@item
Do whatever you have to do to hit the error.  Don't forget to
document the steps you take.
@item
When you hit the error, a @file{*Backtrace*} buffer will appear on the
screen.  Save this buffer to a file (for example using @kbd{C-x C-w}) and
attach it to your bug report.
@end enumerate

@node Conventions
@section Typesetting conventions used in this manual

@subsubheading TODO keywords, tags, properties, etc.

Org mainly uses three types of keywords: TODO keywords, tags and property
names.  In this manual we use the following conventions:

@table @code
@item TODO
@itemx WAITING
TODO keywords are written with all capitals, even if they are
user-defined.
@item boss
@itemx ARCHIVE
User-defined tags are written in lowercase; built-in tags with special
meaning are written with all capitals.
@item Release
@itemx PRIORITY
User-defined properties are capitalized; built-in properties with
special meaning are written with all capitals.
@end table

Moreover, Org uses @i{option keywords} (like @code{#+TITLE} to set the title)
and @i{environment keywords} (like @code{#+BEGIN_EXPORT html} to start
a @code{HTML} environment).  They are written in uppercase in the manual to
enhance its readability, but you can use lowercase in your Org file.

@subsubheading Key bindings and commands
@kindex C-c a
@findex org-agenda
@kindex C-c c
@findex org-capture

The manual suggests a few global key bindings, in particular @kbd{C-c a} for
@code{org-agenda} and @kbd{C-c c} for @code{org-capture}.  These are only
suggestions, but the rest of the manual assumes that these key bindings are in
place in order to list commands by key access.

Also, the manual lists both the keys and the corresponding commands for
accessing a functionality.  Org mode often uses the same key for different
functions, depending on context.  The command that is bound to such keys has
a generic name, like @code{org-metaright}.  In the manual we will, wherever
possible, give the function that is internally called by the generic command.
For example, in the chapter on document structure, @kbd{M-@key{RIGHT}} will
be listed to call @code{org-do-demote}, while in the chapter on tables, it
will be listed to call @code{org-table-move-column-right}.  If you prefer,
you can compile the manual without the command names by unsetting the flag
@code{cmdnames} in @file{org.texi}.

@node Document structure
@chapter Document structure
@cindex document structure
@cindex structure of document

Org is based on Outline mode and provides flexible commands to
edit the structure of the document.

@menu
* Outlines::                    Org is based on Outline mode
* Headlines::                   How to typeset Org tree headlines
* Visibility cycling::          Show and hide, much simplified
* Motion::                      Jumping to other headlines
* Structure editing::           Changing sequence and level of headlines
* Sparse trees::                Matches embedded in context
* Plain lists::                 Additional structure within an entry
* Drawers::                     Tucking stuff away
* Blocks::                      Folding blocks
* Footnotes::                   How footnotes are defined in Org's syntax
* Orgstruct mode::              Structure editing outside Org
* Org syntax::                  Formal description of Org's syntax
@end menu

@node Outlines
@section Outlines
@cindex outlines
@cindex Outline mode

Org is implemented on top of Outline mode.  Outlines allow a
document to be organized in a hierarchical structure, which (at least
for me) is the best representation of notes and thoughts.  An overview
of this structure is achieved by folding (hiding) large parts of the
document to show only the general document structure and the parts
currently being worked on.  Org greatly simplifies the use of
outlines by compressing the entire show/hide functionality into a single
command, @command{org-cycle}, which is bound to the @key{TAB} key.

@node Headlines
@section Headlines
@cindex headlines
@cindex outline tree
@vindex org-special-ctrl-a/e
@vindex org-special-ctrl-k
@vindex org-ctrl-k-protect-subtree

Headlines define the structure of an outline tree.  The headlines in Org
start with one or more stars, on the left margin@footnote{See the variables
@code{org-special-ctrl-a/e}, @code{org-special-ctrl-k}, and
@code{org-ctrl-k-protect-subtree} to configure special behavior of @kbd{C-a},
@kbd{C-e}, and @kbd{C-k} in headlines.} @footnote{Clocking only works with
headings indented less than 30 stars.}.  For example:

@example
* Top level headline
** Second level
*** 3rd level
    some text
*** 3rd level
    more text

* Another top level headline
@end example

@vindex org-footnote-section
@noindent Note that a headline named after @code{org-footnote-section},
which defaults to @samp{Footnotes}, is considered as special.  A subtree with
this headline will be silently ignored by exporting functions.

Some people find the many stars too noisy and would prefer an
outline that has whitespace followed by a single star as headline
starters.  @ref{Clean view}, describes a setup to realize this.

@vindex org-cycle-separator-lines
An empty line after the end of a subtree is considered part of it and
will be hidden when the subtree is folded.  However, if you leave at
least two empty lines, one empty line will remain visible after folding
the subtree, in order to structure the collapsed view.  See the
variable @code{org-cycle-separator-lines} to modify this behavior.

@node Visibility cycling
@section Visibility cycling
@cindex cycling, visibility
@cindex visibility cycling
@cindex trees, visibility
@cindex show hidden text
@cindex hide text

@menu
* Global and local cycling::    Cycling through various visibility states
* Initial visibility::          Setting the initial visibility state
* Catching invisible edits::    Preventing mistakes when editing invisible parts
@end menu

@node Global and local cycling
@subsection Global and local cycling

Outlines make it possible to hide parts of the text in the buffer.
Org uses just two commands, bound to @key{TAB} and
@kbd{S-@key{TAB}} to change the visibility in the buffer.

@cindex subtree visibility states
@cindex subtree cycling
@cindex folded, subtree visibility state
@cindex children, subtree visibility state
@cindex subtree, subtree visibility state
@table @asis
@orgcmd{@key{TAB},org-cycle}
@emph{Subtree cycling}: Rotate current subtree among the states

@example
,-> FOLDED -> CHILDREN -> SUBTREE --.
'-----------------------------------'
@end example

@vindex org-cycle-emulate-tab
The cursor must be on a headline for this to work@footnote{see, however,
the option @code{org-cycle-emulate-tab}.}.

@cindex global visibility states
@cindex global cycling
@cindex overview, global visibility state
@cindex contents, global visibility state
@cindex show all, global visibility state
@orgcmd{S-@key{TAB},org-global-cycle}
@itemx C-u @key{TAB}
@emph{Global cycling}: Rotate the entire buffer among the states

@example
,-> OVERVIEW -> CONTENTS -> SHOW ALL --.
'--------------------------------------'
@end example

When @kbd{S-@key{TAB}} is called with a numeric prefix argument N, the
CONTENTS view up to headlines of level N will be shown.  Note that inside
tables, @kbd{S-@key{TAB}} jumps to the previous field.

@vindex org-cycle-global-at-bob
You can run global cycling using @key{TAB} only if point is at the very
beginning of the buffer, but not on a headline, and
@code{org-cycle-global-at-bob} is set to a non-@code{nil} value.

@cindex set startup visibility, command
@orgcmd{C-u C-u @key{TAB},org-set-startup-visibility}
Switch back to the startup visibility of the buffer (@pxref{Initial visibility}).
@cindex show all, command
@orgcmd{C-u C-u C-u @key{TAB},outline-show-all}
Show all, including drawers.
@cindex revealing context
@orgcmd{C-c C-r,org-reveal}
Reveal context around point, showing the current entry, the following heading
and the hierarchy above.  Useful for working near a location that has been
exposed by a sparse tree command (@pxref{Sparse trees}) or an agenda command
(@pxref{Agenda commands}).  With a prefix argument show, on each
level, all sibling headings.  With a double prefix argument, also show the
entire subtree of the parent.
@cindex show branches, command
@orgcmd{C-c C-k,outline-show-branches}
Expose all the headings of the subtree, CONTENTS view for just one subtree.
@cindex show children, command
@orgcmd{C-c @key{TAB},outline-show-children}
Expose all direct children of the subtree.  With a numeric prefix argument N,
expose all children down to level N@.
@orgcmd{C-c C-x b,org-tree-to-indirect-buffer}
Show the current subtree in an indirect buffer@footnote{The indirect buffer
(@pxref{Indirect Buffers,,,emacs,GNU Emacs Manual}) will contain the entire
buffer, but will be narrowed to the current tree.  Editing the indirect
buffer will also change the original buffer, but without affecting visibility
in that buffer.}.  With a numeric prefix argument N, go up to level N and
then take that tree.  If N is negative then go up that many levels.  With
a @kbd{C-u} prefix, do not remove the previously used indirect buffer.
@orgcmd{C-c C-x v,org-copy-visible}
Copy the @i{visible} text in the region into the kill ring.
@end table

@node Initial visibility
@subsection Initial visibility

@cindex visibility, initialize
@vindex org-startup-folded
@vindex org-agenda-inhibit-startup
@cindex @code{overview}, STARTUP keyword
@cindex @code{content}, STARTUP keyword
@cindex @code{showall}, STARTUP keyword
@cindex @code{showeverything}, STARTUP keyword

When Emacs first visits an Org file, the global state is set to OVERVIEW,
i.e., only the top level headlines are visible@footnote{When
@code{org-agenda-inhibit-startup} is non-@code{nil}, Org will not honor the default
visibility state when first opening a file for the agenda (@pxref{Speeding up
your agendas}).}.  This can be configured through the variable
@code{org-startup-folded}, or on a per-file basis by adding one of the
following lines anywhere in the buffer:

@example
#+STARTUP: overview
#+STARTUP: content
#+STARTUP: showall
#+STARTUP: showeverything
@end example

@cindex property, @code{VISIBILITY}
@noindent
Furthermore, any entries with a @code{VISIBILITY} property (@pxref{Properties
and columns}) will get their visibility adapted accordingly.  Allowed values
for this property are @code{folded}, @code{children}, @code{content}, and
@code{all}.

@table @asis
@orgcmd{C-u C-u @key{TAB},org-set-startup-visibility}
Switch back to the startup visibility of the buffer, i.e., whatever is
requested by startup options and @code{VISIBILITY} properties in individual
entries.
@end table

@node Catching invisible edits
@subsection Catching invisible edits

@vindex org-catch-invisible-edits
@cindex edits, catching invisible
Sometimes you may inadvertently edit an invisible part of the buffer and be
confused on what has been edited and how to undo the mistake.  Setting
@code{org-catch-invisible-edits} to non-@code{nil} will help prevent this.  See the
docstring of this option on how Org should catch invisible edits and process
them.

@node Motion
@section Motion
@cindex motion, between headlines
@cindex jumping, to headlines
@cindex headline navigation
The following commands jump to other headlines in the buffer.

@table @asis
@orgcmd{C-c C-n,org-next-visible-heading}
Next heading.
@orgcmd{C-c C-p,org-previous-visible-heading}
Previous heading.
@orgcmd{C-c C-f,org-forward-same-level}
Next heading same level.
@orgcmd{C-c C-b,org-backward-same-level}
Previous heading same level.
@orgcmd{C-c C-u,outline-up-heading}
Backward to higher level heading.
@orgcmd{C-c C-j,org-goto}
Jump to a different place without changing the current outline
visibility.  Shows the document structure in a temporary buffer, where
you can use the following keys to find your destination:
@vindex org-goto-auto-isearch
@example
@key{TAB}         @r{Cycle visibility.}
@key{DOWN} / @key{UP}   @r{Next/previous visible headline.}
@key{RET}         @r{Select this location.}
@kbd{/}           @r{Do a Sparse-tree search}
@r{The following keys work if you turn off @code{org-goto-auto-isearch}}
n / p        @r{Next/previous visible headline.}
f / b        @r{Next/previous headline same level.}
u            @r{One level up.}
0-9          @r{Digit argument.}
q            @r{Quit}
@end example
@vindex org-goto-interface
@noindent
See also the option @code{org-goto-interface}.
@end table

@node Structure editing
@section Structure editing
@cindex structure editing
@cindex headline, promotion and demotion
@cindex promotion, of subtrees
@cindex demotion, of subtrees
@cindex subtree, cut and paste
@cindex pasting, of subtrees
@cindex cutting, of subtrees
@cindex copying, of subtrees
@cindex sorting, of subtrees
@cindex subtrees, cut and paste

@table @asis
@orgcmd{M-@key{RET},org-meta-return}
@vindex org-M-RET-may-split-line
Insert a new heading, item or row.

If the command is used at the @emph{beginning} of a line, and if there is
a heading or a plain list item (@pxref{Plain lists}) at point, the new
heading/item is created @emph{before} the current line.  When used at the
beginning of a regular line of text, turn that line into a heading.

When this command is used in the middle of a line, the line is split and the
rest of the line becomes the new item or headline.  If you do not want the
line to be split, customize @code{org-M-RET-may-split-line}.

Calling the command with a @kbd{C-u} prefix unconditionally inserts a new
heading at the end of the current subtree, thus preserving its contents.
With a double @kbd{C-u C-u} prefix, the new heading is created at the end of
the parent subtree instead.
@orgcmd{C-@key{RET},org-insert-heading-respect-content}
Insert a new heading at the end of the current subtree.
@orgcmd{M-S-@key{RET},org-insert-todo-heading}
@vindex org-treat-insert-todo-heading-as-state-change
Insert new TODO entry with same level as current heading.  See also the
variable @code{org-treat-insert-todo-heading-as-state-change}.
@orgcmd{C-S-@key{RET},org-insert-todo-heading-respect-content}
Insert new TODO entry with same level as current heading.  Like
@kbd{C-@key{RET}}, the new headline will be inserted after the current
subtree.
@orgcmd{@key{TAB},org-cycle}
In a new entry with no text yet, the first @key{TAB} demotes the entry to
become a child of the previous one.  The next @key{TAB} makes it a parent,
and so on, all the way to top level.  Yet another @key{TAB}, and you are back
to the initial level.
@orgcmd{M-@key{LEFT},org-do-promote}
Promote current heading by one level.
@orgcmd{M-@key{RIGHT},org-do-demote}
Demote current heading by one level.
@orgcmd{M-S-@key{LEFT},org-promote-subtree}
Promote the current subtree by one level.
@orgcmd{M-S-@key{RIGHT},org-demote-subtree}
Demote the current subtree by one level.
@orgcmd{M-@key{UP},org-move-subtree-up}
Move subtree up (swap with previous subtree of same
level).
@orgcmd{M-@key{DOWN},org-move-subtree-down}
Move subtree down (swap with next subtree of same level).
@orgcmd{M-h,org-mark-element}
Mark the element at point.  Hitting repeatedly will mark subsequent elements
of the one just marked.  E.g., hitting @kbd{M-h} on a paragraph will mark it,
hitting @kbd{M-h} immediately again will mark the next one.
@orgcmd{C-c @@,org-mark-subtree}
Mark the subtree at point.  Hitting repeatedly will mark subsequent subtrees
of the same level than the marked subtree.
@orgcmd{C-c C-x C-w,org-cut-subtree}
Kill subtree, i.e., remove it from buffer but save in kill ring.
With a numeric prefix argument N, kill N sequential subtrees.
@orgcmd{C-c C-x M-w,org-copy-subtree}
Copy subtree to kill ring.  With a numeric prefix argument N, copy the N
sequential subtrees.
@orgcmd{C-c C-x C-y,org-paste-subtree}
Yank subtree from kill ring.  This does modify the level of the subtree to
make sure the tree fits in nicely at the yank position.  The yank level can
also be specified with a numeric prefix argument, or by yanking after a
headline marker like @samp{****}.
@orgcmd{C-y,org-yank}
@vindex org-yank-adjusted-subtrees
@vindex org-yank-folded-subtrees
Depending on the options @code{org-yank-adjusted-subtrees} and
@code{org-yank-folded-subtrees}, Org's internal @code{yank} command will
paste subtrees folded and in a clever way, using the same command as @kbd{C-c
C-x C-y}.  With the default settings, no level adjustment will take place,
but the yanked tree will be folded unless doing so would swallow text
previously visible.  Any prefix argument to this command will force a normal
@code{yank} to be executed, with the prefix passed along.  A good way to
force a normal yank is @kbd{C-u C-y}.  If you use @code{yank-pop} after a
yank, it will yank previous kill items plainly, without adjustment and
folding.
@orgcmd{C-c C-x c,org-clone-subtree-with-time-shift}
Clone a subtree by making a number of sibling copies of it.  You will be
prompted for the number of copies to make, and you can also specify if any
timestamps in the entry should be shifted.  This can be useful, for example,
to create a number of tasks related to a series of lectures to prepare.  For
more details, see the docstring of the command
@code{org-clone-subtree-with-time-shift}.
@orgcmd{C-c C-w,org-refile}
Refile entry or region to a different location.  @xref{Refile and copy}.
@orgcmd{C-c ^,org-sort}
Sort same-level entries.  When there is an active region, all entries in the
region will be sorted.  Otherwise the children of the current headline are
sorted.  The command prompts for the sorting method, which can be
alphabetically, numerically, by time (first timestamp with active preferred,
creation time, scheduled time, deadline time), by priority, by TODO keyword
(in the sequence the keywords have been defined in the setup) or by the value
of a property.  Reverse sorting is possible as well.  You can also supply
your own function to extract the sorting key.  With a @kbd{C-u} prefix,
sorting will be case-sensitive.
@orgcmd{C-x n s,org-narrow-to-subtree}
Narrow buffer to current subtree.
@orgcmd{C-x n b,org-narrow-to-block}
Narrow buffer to current block.
@orgcmd{C-x n w,widen}
Widen buffer to remove narrowing.
@orgcmd{C-c *,org-toggle-heading}
Turn a normal line or plain list item into a headline (so that it becomes a
subheading at its location).  Also turn a headline into a normal line by
removing the stars.  If there is an active region, turn all lines in the
region into headlines.  If the first line in the region was an item, turn
only the item lines into headlines.  Finally, if the first line is a
headline, remove the stars from all headlines in the region.
@end table

@cindex region, active
@cindex active region
@cindex transient mark mode
When there is an active region (Transient Mark mode), promotion and
demotion work on all headlines in the region.  To select a region of
headlines, it is best to place both point and mark at the beginning of a
line, mark at the beginning of the first headline, and point at the line
just after the last headline to change.  Note that when the cursor is
inside a table (@pxref{Tables}), the Meta-Cursor keys have different
functionality.


@node Sparse trees
@section Sparse trees
@cindex sparse trees
@cindex trees, sparse
@cindex folding, sparse trees
@cindex occur, command

@vindex org-show-context-detail
An important feature of Org mode is the ability to construct @emph{sparse
trees} for selected information in an outline tree, so that the entire
document is folded as much as possible, but the selected information is made
visible along with the headline structure above it@footnote{See also the
variable @code{org-show-context-detail} to decide how much context is shown
around each match.}.  Just try it out and you will see immediately how it
works.

Org mode contains several commands for creating such trees, all these
commands can be accessed through a dispatcher:

@table @asis
@orgcmd{C-c /,org-sparse-tree}
This prompts for an extra key to select a sparse-tree creating command.
@orgcmdkkc{C-c / r,C-c / /,org-occur}
@vindex org-remove-highlights-with-change
Prompts for a regexp and shows a sparse tree with all matches.  If
the match is in a headline, the headline is made visible.  If the match is in
the body of an entry, headline and body are made visible.  In order to
provide minimal context, also the full hierarchy of headlines above the match
is shown, as well as the headline following the match.  Each match is also
highlighted; the highlights disappear when the buffer is changed by an
editing command@footnote{This depends on the option
@code{org-remove-highlights-with-change}}, or by pressing @kbd{C-c C-c}.
When called with a @kbd{C-u} prefix argument, previous highlights are kept,
so several calls to this command can be stacked.
@orgcmdkkc{M-g n,M-g M-n,next-error}
Jump to the next sparse tree match in this buffer.
@orgcmdkkc{M-g p,M-g M-p,previous-error}
Jump to the previous sparse tree match in this buffer.
@end table

@noindent
@vindex org-agenda-custom-commands
For frequently used sparse trees of specific search strings, you can
use the option @code{org-agenda-custom-commands} to define fast
keyboard access to specific sparse trees.  These commands will then be
accessible through the agenda dispatcher (@pxref{Agenda dispatcher}).
For example:

@lisp
(setq org-agenda-custom-commands
      '(("f" occur-tree "FIXME")))
@end lisp

@noindent will define the key @kbd{C-c a f} as a shortcut for creating
a sparse tree matching the string @samp{FIXME}.

The other sparse tree commands select headings based on TODO keywords,
tags, or properties and will be discussed later in this manual.

@kindex C-c C-e C-v
@cindex printing sparse trees
@cindex visible text, printing
To print a sparse tree, you can use the Emacs command
@code{ps-print-buffer-with-faces} which does not print invisible parts of the
document.  Or you can use @kbd{C-c C-e C-v} to export only the visible part
of the document and print the resulting file.

@node Plain lists
@section Plain lists
@cindex plain lists
@cindex lists, plain
@cindex lists, ordered
@cindex ordered lists

Within an entry of the outline tree, hand-formatted lists can provide
additional structure.  They also provide a way to create lists of checkboxes
(@pxref{Checkboxes}).  Org supports editing such lists, and every exporter
(@pxref{Exporting}) can parse and format them.

Org knows ordered lists, unordered lists, and description lists.
@itemize @bullet
@item
@emph{Unordered} list items start with @samp{-}, @samp{+}, or
@samp{*}@footnote{When using @samp{*} as a bullet, lines must be indented or
they will be seen as top-level headlines.  Also, when you are hiding leading
stars to get a clean outline view, plain list items starting with a star may
be hard to distinguish from true headlines.  In short: even though @samp{*}
is supported, it may be better to not use it for plain list items.}  as
bullets.
@item
@vindex org-plain-list-ordered-item-terminator
@vindex org-list-allow-alphabetical
@emph{Ordered} list items start with a numeral followed by either a period or
a right parenthesis@footnote{You can filter out any of them by configuring
@code{org-plain-list-ordered-item-terminator}.}, such as @samp{1.} or
@samp{1)}@footnote{You can also get @samp{a.}, @samp{A.}, @samp{a)} and
@samp{A)} by configuring @code{org-list-allow-alphabetical}.  To minimize
confusion with normal text, those are limited to one character only.  Beyond
that limit, bullets will automatically fallback to numbers.}.  If you want a
list to start with a different value (e.g., 20), start the text of the item
with @code{[@@20]}@footnote{If there's a checkbox in the item, the cookie
must be put @emph{before} the checkbox.  If you have activated alphabetical
lists, you can also use counters like @code{[@@b]}.}.  Those constructs can
be used in any item of the list in order to enforce a particular numbering.
@item
@emph{Description} list items are unordered list items, and contain the
separator @samp{ :: } to distinguish the description @emph{term} from the
description.
@end itemize

Items belonging to the same list must have the same indentation on the first
line.  In particular, if an ordered list reaches number @samp{10.}, then the
2--digit numbers must be written left-aligned with the other numbers in the
list.  An item ends before the next line that is less or equally indented
than its bullet/number.

A list ends whenever every item has ended, which means before any line less
or equally indented than items at top level.  It also ends before two blank
lines.  In that case, all items are closed.  Here is an example:

@example
@group
** Lord of the Rings
   My favorite scenes are (in this order)
   1. The attack of the Rohirrim
   2. Eowyn's fight with the witch king
      + this was already my favorite scene in the book
      + I really like Miranda Otto.
   3. Peter Jackson being shot by Legolas
      - on DVD only
      He makes a really funny face when it happens.
   But in the end, no individual scenes matter but the film as a whole.
   Important actors in this film are:
   - @b{Elijah Wood} :: He plays Frodo
   - @b{Sean Astin} :: He plays Sam, Frodo's friend.  I still remember
     him very well from his role as Mikey Walsh in @i{The Goonies}.
@end group
@end example

Org supports these lists by tuning filling and wrapping commands to deal with
them correctly, and by exporting them properly (@pxref{Exporting}).  Since
indentation is what governs the structure of these lists, many structural
constructs like @code{#+BEGIN_...} blocks can be indented to signal that they
belong to a particular item.

@vindex org-list-demote-modify-bullet
@vindex org-list-indent-offset
If you find that using a different bullet for a sub-list (than that used for
the current list-level) improves readability, customize the variable
@code{org-list-demote-modify-bullet}.  To get a greater difference of
indentation between items and their sub-items, customize
@code{org-list-indent-offset}.

@vindex org-list-automatic-rules
The following commands act on items when the cursor is in the first line of
an item (the line with the bullet or number).  Some of them imply the
application of automatic rules to keep list structure intact.  If some of
these actions get in your way, configure @code{org-list-automatic-rules}
to disable them individually.

@table @asis
@orgcmd{@key{TAB},org-cycle}
@cindex cycling, in plain lists
@vindex org-cycle-include-plain-lists
Items can be folded just like headline levels.  Normally this works only if
the cursor is on a plain list item.  For more details, see the variable
@code{org-cycle-include-plain-lists}.  If this variable is set to
@code{integrate}, plain list items will be treated like low-level
headlines.  The level of an item is then given by the indentation of the
bullet/number.  Items are always subordinate to real headlines, however; the
hierarchies remain completely separated.  In a new item with no text yet, the
first @key{TAB} demotes the item to become a child of the previous
one.  Subsequent @key{TAB}s move the item to meaningful levels in the list
and eventually get it back to its initial position.
@orgcmd{M-@key{RET},org-insert-heading}
@vindex org-M-RET-may-split-line
@vindex org-list-automatic-rules
Insert new item at current level.  With a prefix argument, force a new
heading (@pxref{Structure editing}).  If this command is used in the middle
of an item, that item is @emph{split} in two, and the second part becomes the
new item@footnote{If you do not want the item to be split, customize the
variable @code{org-M-RET-may-split-line}.}.  If this command is executed
@emph{before item's body}, the new item is created @emph{before} the current
one.
@end table

@table @kbd
@kindex M-S-RET
@item M-S-@key{RET}
Insert a new item with a checkbox (@pxref{Checkboxes}).
@kindex S-DOWN
@item S-up
@itemx S-down
@cindex shift-selection-mode
@vindex org-support-shift-select
@vindex org-list-use-circular-motion
Jump to the previous/next item in the current list@footnote{If you want to
cycle around items that way, you may customize
@code{org-list-use-circular-motion}.}, but only if
@code{org-support-shift-select} is off.  If not, you can still use paragraph
jumping commands like @kbd{C-@key{UP}} and @kbd{C-@key{DOWN}} to quite
similar effect.
@kindex M-UP
@kindex M-DOWN
@item M-up
@itemx M-down
Move the item including subitems up/down@footnote{See
@code{org-list-use-circular-motion} for a cyclic behavior.} (swap with
previous/next item of same indentation).  If the list is ordered, renumbering
is automatic.
@kindex M-LEFT
@kindex M-RIGHT
@item M-left
@itemx M-right
Decrease/increase the indentation of an item, leaving children alone.
@kindex M-S-LEFT
@kindex M-S-RIGHT
@item M-S-@key{LEFT}
@itemx M-S-@key{RIGHT}
Decrease/increase the indentation of the item, including subitems.
Initially, the item tree is selected based on current indentation.  When
these commands are executed several times in direct succession, the initially
selected region is used, even if the new indentation would imply a different
hierarchy.  To use the new hierarchy, break the command chain with a cursor
motion or so.

As a special case, using this command on the very first item of a list will
move the whole list.  This behavior can be disabled by configuring
@code{org-list-automatic-rules}.  The global indentation of a list has no
influence on the text @emph{after} the list.
@kindex C-c C-c
@item C-c C-c
If there is a checkbox (@pxref{Checkboxes}) in the item line, toggle the
state of the checkbox.  In any case, verify bullets and indentation
consistency in the whole list.
@kindex C-c -
@vindex org-plain-list-ordered-item-terminator
@item C-c -
Cycle the entire list level through the different itemize/enumerate bullets
(@samp{-}, @samp{+}, @samp{*}, @samp{1.}, @samp{1)}) or a subset of them,
depending on @code{org-plain-list-ordered-item-terminator}, the type of list,
and its indentation.  With a numeric prefix argument N, select the Nth bullet
from this list.  If there is an active region when calling this, all selected
lines are converted to list items.  With a prefix argument, selected text is
changed into a single item.  If the first line already was a list item, any
item marker will be removed from the list.  Finally, even without an active
region, a normal line will be converted into a list item.
@kindex C-c *
@item C-c *
Turn a plain list item into a headline (so that it becomes a subheading at
its location).  @xref{Structure editing}, for a detailed explanation.
@kindex C-c C-*
@item C-c C-*
Turn the whole plain list into a subtree of the current heading.  Checkboxes
(@pxref{Checkboxes}) will become TODO (resp. DONE) keywords when unchecked
(resp. checked).
@kindex S-LEFT
@kindex S-RIGHT
@item S-@key{LEFT}/@key{RIGHT}
@vindex org-support-shift-select
This command also cycles bullet styles when the cursor in on the bullet or
anywhere in an item line, details depending on
@code{org-support-shift-select}.
@kindex C-c ^
@cindex sorting, of plain list
@item C-c ^
Sort the plain list.  You will be prompted for the sorting method:
numerically, alphabetically, by time, by checked status for check lists,
or by a custom function.
@end table

@node Drawers
@section Drawers
@cindex drawers
@cindex visibility cycling, drawers

@cindex @code{org-insert-drawer}
@kindex C-c C-x d
Sometimes you want to keep information associated with an entry, but you
normally don't want to see it.  For this, Org mode has @emph{drawers}.  They
can contain anything but a headline and another drawer.  Drawers look like
this:

@example
** This is a headline
   Still outside the drawer
   :DRAWERNAME:
   This is inside the drawer.
   :END:
   After the drawer.
@end example

You can interactively insert drawers at point by calling
@code{org-insert-drawer}, which is bound to @kbd{C-c C-x d}.  With an active
region, this command will put the region inside the drawer.  With a prefix
argument, this command calls @code{org-insert-property-drawer} and add
a property drawer right below the current headline.  Completion over drawer
keywords is also possible using @kbd{M-@key{TAB}}@footnote{Many desktops
intercept @kbd{M-@key{TAB}} to switch windows.  Use @kbd{C-M-i} or
@kbd{@key{ESC} @key{TAB}} instead for completion (@pxref{Completion}).}.

Visibility cycling (@pxref{Visibility cycling}) on the headline will hide and
show the entry, but keep the drawer collapsed to a single line.  In order to
look inside the drawer, you need to move the cursor to the drawer line and
press @key{TAB} there.  Org mode uses the @code{PROPERTIES} drawer for
storing properties (@pxref{Properties and columns}), and you can also arrange
for state change notes (@pxref{Tracking TODO state changes}) and clock times
(@pxref{Clocking work time}) to be stored in a drawer @code{LOGBOOK}.  If you
want to store a quick note in the LOGBOOK drawer, in a similar way to state
changes, use

@table @kbd
@kindex C-c C-z
@item C-c C-z
Add a time-stamped note to the LOGBOOK drawer.
@end table

@vindex org-export-with-drawers
@vindex org-export-with-properties
You can select the name of the drawers which should be exported with
@code{org-export-with-drawers}.  In that case, drawer contents will appear in
export output.  Property drawers are not affected by this variable: configure
@code{org-export-with-properties} instead.

@node Blocks
@section Blocks

@vindex org-hide-block-startup
@cindex blocks, folding
Org mode uses begin...end blocks for various purposes from including source
code examples (@pxref{Literal examples}) to capturing time logging
information (@pxref{Clocking work time}).  These blocks can be folded and
unfolded by pressing @key{TAB} in the begin line.  You can also get all blocks
folded at startup by configuring the option @code{org-hide-block-startup}
or on a per-file basis by using

@cindex @code{hideblocks}, STARTUP keyword
@cindex @code{nohideblocks}, STARTUP keyword
@example
#+STARTUP: hideblocks
#+STARTUP: nohideblocks
@end example

@node Footnotes
@section Footnotes
@cindex footnotes

Org mode supports the creation of footnotes.

A footnote is started by a footnote marker in square brackets in column 0, no
indentation allowed.  It ends at the next footnote definition, headline, or
after two consecutive empty lines.  The footnote reference is simply the
marker in square brackets, inside text.  Markers always start with
@code{fn:}.  For example:

@example
The Org homepage[fn:1] now looks a lot better than it used to.
...
[fn:1] The link is: https://orgmode.org
@end example

Org mode extends the number-based syntax to @emph{named} footnotes and
optional inline definition.  Here are the valid references:

@table @code
@item [fn:name]
A named footnote reference, where @code{name} is a unique label word, or, for
simplicity of automatic creation, a number.
@item [fn::This is the inline definition of this footnote]
A @LaTeX{}-like anonymous footnote where the definition is given directly at the
reference point.
@item [fn:name:a definition]
An inline definition of a footnote, which also specifies a name for the note.
Since Org allows multiple references to the same note, you can then use
@code{[fn:name]} to create additional references.
@end table

@vindex org-footnote-auto-label
Footnote labels can be created automatically, or you can create names yourself.
This is handled by the variable @code{org-footnote-auto-label} and its
corresponding @code{#+STARTUP} keywords.  See the docstring of that variable
for details.

@noindent The following command handles footnotes:

@table @kbd
@kindex C-c C-x f
@item C-c C-x f
The footnote action command.

When the cursor is on a footnote reference, jump to the definition.  When it
is at a definition, jump to the (first) reference.

@vindex org-footnote-define-inline
@vindex org-footnote-section
@vindex org-footnote-auto-adjust
Otherwise, create a new footnote.  Depending on the option
@code{org-footnote-define-inline}@footnote{The corresponding in-buffer
setting is: @code{#+STARTUP: fninline} or @code{#+STARTUP: nofninline}}, the
definition will be placed right into the text as part of the reference, or
separately into the location determined by the option
@code{org-footnote-section}.

When this command is called with a prefix argument, a menu of additional
options is offered:
@example
s   @r{Sort the footnote definitions by reference sequence.  During editing,}
    @r{Org makes no effort to sort footnote definitions into a particular}
    @r{sequence.  If you want them sorted, use this command, which will}
    @r{also move entries according to @code{org-footnote-section}.  Automatic}
    @r{sorting after each insertion/deletion can be configured using the}
    @r{option @code{org-footnote-auto-adjust}.}
r   @r{Renumber the simple @code{fn:N} footnotes.  Automatic renumbering}
    @r{after each insertion/deletion can be configured using the option}
    @r{@code{org-footnote-auto-adjust}.}
S   @r{Short for first @code{r}, then @code{s} action.}
n   @r{Normalize the footnotes by collecting all definitions (including}
    @r{inline definitions) into a special section, and then numbering them}
    @r{in sequence.  The references will then also be numbers.}
d   @r{Delete the footnote at point, and all definitions of and references}
    @r{to it.}
@end example
Depending on the variable @code{org-footnote-auto-adjust}@footnote{the
corresponding in-buffer options are @code{fnadjust} and @code{nofnadjust}.},
renumbering and sorting footnotes can be automatic after each insertion or
deletion.

@kindex C-c C-c
@item C-c C-c
If the cursor is on a footnote reference, jump to the definition.  If it is a
the definition, jump back to the reference.  When called at a footnote
location with a prefix argument, offer the same menu as @kbd{C-c C-x f}.
@kindex C-c C-o
@kindex mouse-1
@kindex mouse-2
@item C-c C-o  @r{or} mouse-1/2
Footnote labels are also links to the corresponding definition/reference, and
you can use the usual commands to follow these links.

@vindex org-edit-footnote-reference
@kindex C-c '
@item C-c '
@item C-c '
Edit the footnote definition corresponding to the reference at point in
a separate window.  The window can be closed by pressing @kbd{C-c '}.

@end table

@node Orgstruct mode
@section The Orgstruct minor mode
@cindex Orgstruct mode
@cindex minor mode for structure editing

If you like the intuitive way the Org mode structure editing and list
formatting works, you might want to use these commands in other modes like
Text mode or Mail mode as well.  The minor mode @code{orgstruct-mode} makes
this possible.   Toggle the mode with @kbd{M-x orgstruct-mode @key{RET}}, or
turn it on by default, for example in Message mode, with one of:

@lisp
(add-hook 'message-mode-hook 'turn-on-orgstruct)
(add-hook 'message-mode-hook 'turn-on-orgstruct++)
@end lisp

When this mode is active and the cursor is on a line that looks to Org like a
headline or the first line of a list item, most structure editing commands
will work, even if the same keys normally have different functionality in the
major mode you are using.  If the cursor is not in one of those special
lines, Orgstruct mode lurks silently in the shadows.

When you use @code{orgstruct++-mode}, Org will also export indentation and
autofill settings into that mode, and detect item context after the first
line of an item.

@vindex orgstruct-heading-prefix-regexp
You can also use Org structure editing to fold and unfold headlines in
@emph{any} file, provided you defined @code{orgstruct-heading-prefix-regexp}:
the regular expression must match the local prefix to use before Org's
headlines.  For example, if you set this variable to @code{";; "} in Emacs
Lisp files, you will be able to fold and unfold headlines in Emacs Lisp
commented lines.  Some commands like @code{org-demote} are disabled when the
prefix is set, but folding/unfolding will work correctly.

@node Org syntax
@section Org syntax
@cindex Org syntax

A reference document providing a formal description of Org's syntax is
available as @uref{https://orgmode.org/worg/dev/org-syntax.html, a draft on
Worg}, written and maintained by Nicolas Goaziou.  It defines Org's core
internal concepts such as @code{headlines}, @code{sections}, @code{affiliated
keywords}, @code{(greater) elements} and @code{objects}.  Each part of an Org
file falls into one of the categories above.

To explore the abstract structure of an Org buffer, run this in a buffer:

@lisp
M-: (org-element-parse-buffer) @key{RET}
@end lisp

It will output a list containing the buffer's content represented as an
abstract structure.  The export engine relies on the information stored in
this list.  Most interactive commands (e.g., for structure editing) also
rely on the syntactic meaning of the surrounding context.

@cindex syntax checker
@cindex linter
You can check syntax in your documents using @code{org-lint} command.

@node Tables
@chapter Tables
@cindex tables
@cindex editing tables

Org comes with a fast and intuitive table editor.  Spreadsheet-like
calculations are supported using the Emacs @file{calc} package
(@pxref{Top, Calc, , calc, GNU Emacs Calculator Manual}).

@menu
* Built-in table editor::       Simple tables
* Column width and alignment::  Overrule the automatic settings
* Column groups::               Grouping to trigger vertical lines
* Orgtbl mode::                 The table editor as minor mode
* The spreadsheet::             The table editor has spreadsheet capabilities
* Org-Plot::                    Plotting from org tables
@end menu

@node Built-in table editor
@section The built-in table editor
@cindex table editor, built-in

Org makes it easy to format tables in plain ASCII@.  Any line with @samp{|} as
the first non-whitespace character is considered part of a table.  @samp{|}
is also the column separator@footnote{To insert a vertical bar into a table
field, use @code{\vert} or, inside a word @code{abc\vert@{@}def}.}.  A table
might look like this:

@example
| Name  | Phone | Age |
|-------+-------+-----|
| Peter |  1234 |  17 |
| Anna  |  4321 |  25 |
@end example

A table is re-aligned automatically each time you press @key{TAB} or
@key{RET} or @kbd{C-c C-c} inside the table.  @key{TAB} also moves to
the next field (@key{RET} to the next row) and creates new table rows
at the end of the table or before horizontal lines.  The indentation
of the table is set by the first line.  Any line starting with
@samp{|-} is considered as a horizontal separator line and will be
expanded on the next re-align to span the whole table width.  So, to
create the above table, you would only type

@example
|Name|Phone|Age|
|-
@end example

@noindent and then press @key{TAB} to align the table and start filling in
fields.  Even faster would be to type @code{|Name|Phone|Age} followed by
@kbd{C-c @key{RET}}.

@vindex org-table-auto-blank-field
When typing text into a field, Org treats @key{DEL}, @key{Backspace}, and all
character keys in a special way, so that inserting and deleting avoids
shifting other fields.  Also, when typing @emph{immediately after the cursor
was moved into a new field with @kbd{@key{TAB}}, @kbd{S-@key{TAB}} or
@kbd{@key{RET}}}, the field is automatically made blank.  If this behavior is
too unpredictable for you, configure the option
@code{org-table-auto-blank-field}.

@table @kbd
@tsubheading{Creation and conversion}
@orgcmd{C-c |,org-table-create-or-convert-from-region}
Convert the active region to a table.  If every line contains at least one
TAB character, the function assumes that the material is tab separated.
If every line contains a comma, comma-separated values (CSV) are assumed.
If not, lines are split at whitespace into fields.  You can use a prefix
argument to force a specific separator: @kbd{C-u} forces CSV, @kbd{C-u
C-u} forces TAB, @kbd{C-u C-u C-u} will prompt for a regular expression to
match the separator, and a numeric argument N indicates that at least N
consecutive spaces, or alternatively a TAB will be the separator.
@*
If there is no active region, this command creates an empty Org
table.  But it is easier just to start typing, like
@kbd{|Name|Phone|Age @key{RET} |- @key{TAB}}.

@tsubheading{Re-aligning and field motion}
@orgcmd{C-c C-c,org-table-align}
Re-align the table and don't move to another field.
@c
@orgcmd{C-c @key{SPC},org-table-blank-field}
Blank the field at point.
@c
@orgcmd{@key{TAB},org-table-next-field}
Re-align the table, move to the next field.  Creates a new row if
necessary.
@c
@orgcmd{S-@key{TAB},org-table-previous-field}
Re-align, move to previous field.
@c
@orgcmd{@key{RET},org-table-next-row}
Re-align the table and move down to next row.  Creates a new row if
necessary.  At the beginning or end of a line, @key{RET} still does
NEWLINE, so it can be used to split a table.
@c
@orgcmd{M-a,org-table-beginning-of-field}
Move to beginning of the current table field, or on to the previous field.
@orgcmd{M-e,org-table-end-of-field}
Move to end of the current table field, or on to the next field.

@tsubheading{Column and row editing}
@orgcmdkkcc{M-@key{LEFT},M-@key{RIGHT},org-table-move-column-left,org-table-move-column-right}
Move the current column left/right.
@c
@orgcmd{M-S-@key{LEFT},org-table-delete-column}
Kill the current column.
@c
@orgcmd{M-S-@key{RIGHT},org-table-insert-column}
Insert a new column to the left of the cursor position.
@c
@orgcmdkkcc{M-@key{UP},M-@key{DOWN},org-table-move-row-up,org-table-move-row-down}
Move the current row up/down.
@c
@orgcmd{M-S-@key{UP},org-table-kill-row}
Kill the current row or horizontal line.
@c
@orgcmd{M-S-@key{DOWN},org-table-insert-row}
Insert a new row above the current row.  With a prefix argument, the line is
created below the current one.
@c
@orgcmd{C-c -,org-table-insert-hline}
Insert a horizontal line below current row.  With a prefix argument, the line
is created above the current line.
@c
@orgcmd{C-c @key{RET},org-table-hline-and-move}
Insert a horizontal line below current row, and move the cursor into the row
below that line.
@c
@orgcmd{C-c ^,org-table-sort-lines}
Sort the table lines in the region.  The position of point indicates the
column to be used for sorting, and the range of lines is the range
between the nearest horizontal separator lines, or the entire table.  If
point is before the first column, you will be prompted for the sorting
column.  If there is an active region, the mark specifies the first line
and the sorting column, while point should be in the last line to be
included into the sorting.  The command prompts for the sorting type
(alphabetically, numerically, or by time).  You can sort in normal or
reverse order.  You can also supply your own key extraction and comparison
functions.  When called with a prefix argument, alphabetic sorting will be
case-sensitive.

@tsubheading{Regions}
@orgcmd{C-c C-x M-w,org-table-copy-region}
Copy a rectangular region from a table to a special clipboard.  Point and
mark determine edge fields of the rectangle.  If there is no active region,
copy just the current field.  The process ignores horizontal separator lines.
@c
@orgcmd{C-c C-x C-w,org-table-cut-region}
Copy a rectangular region from a table to a special clipboard, and
blank all fields in the rectangle.  So this is the ``cut'' operation.
@c
@orgcmd{C-c C-x C-y,org-table-paste-rectangle}
Paste a rectangular region into a table.
The upper left corner ends up in the current field.  All involved fields
will be overwritten.  If the rectangle does not fit into the present table,
the table is enlarged as needed.  The process ignores horizontal separator
lines.
@c
@orgcmd{M-@key{RET},org-table-wrap-region}
Split the current field at the cursor position and move the rest to the line
below.  If there is an active region, and both point and mark are in the same
column, the text in the column is wrapped to minimum width for the given
number of lines.  A numeric prefix argument may be used to change the number
of desired lines.  If there is no region, but you specify a prefix argument,
the current field is made blank, and the content is appended to the field
above.

@tsubheading{Calculations}
@cindex formula, in tables
@cindex calculations, in tables
@cindex region, active
@cindex active region
@cindex transient mark mode
@orgcmd{C-c +,org-table-sum}
Sum the numbers in the current column, or in the rectangle defined by
the active region.  The result is shown in the echo area and can
be inserted with @kbd{C-y}.
@c
@orgcmd{S-@key{RET},org-table-copy-down}
@vindex org-table-copy-increment
When current field is empty, copy from first non-empty field above.  When not
empty, copy current field down to next row and move cursor along with it.
Depending on the option @code{org-table-copy-increment}, integer field
values will be incremented during copy.  Integers that are too large will not
be incremented.  Also, a @code{0} prefix argument temporarily disables the
increment.  This key is also used by shift-selection and related modes
(@pxref{Conflicts}).

@tsubheading{Miscellaneous}
@orgcmd{C-c `,org-table-edit-field}
Edit the current field in a separate window.  This is useful for fields that
are not fully visible (@pxref{Column width and alignment}).  When called with
a @kbd{C-u} prefix, just make the full field visible, so that it can be
edited in place.  When called with two @kbd{C-u} prefixes, make the editor
window follow the cursor through the table and always show the current
field.  The follow mode exits automatically when the cursor leaves the table,
or when you repeat this command with @kbd{C-u C-u C-c `}.
@c
@item M-x org-table-import @key{RET}
Import a file as a table.  The table should be TAB or whitespace
separated.  Use, for example, to import a spreadsheet table or data
from a database, because these programs generally can write
TAB-separated text files.  This command works by inserting the file into
the buffer and then converting the region to a table.  Any prefix
argument is passed on to the converter, which uses it to determine the
separator.
@orgcmd{C-c |,org-table-create-or-convert-from-region}
Tables can also be imported by pasting tabular text into the Org
buffer, selecting the pasted text with @kbd{C-x C-x} and then using the
@kbd{C-c |} command (see above under @i{Creation and conversion}).
@c
@item M-x org-table-export @key{RET}
@findex org-table-export
@vindex org-table-export-default-format
Export the table, by default as a TAB-separated file.  Use for data
exchange with, for example, spreadsheet or database programs.  The format
used to export the file can be configured in the option
@code{org-table-export-default-format}.  You may also use properties
@code{TABLE_EXPORT_FILE} and @code{TABLE_EXPORT_FORMAT} to specify the file
name and the format for table export in a subtree.  Org supports quite
general formats for exported tables.  The exporter format is the same as the
format used by Orgtbl radio tables, see @ref{Translator functions}, for a
detailed description.
@end table

@node Column width and alignment
@section Column width and alignment
@cindex narrow columns in tables
@cindex alignment in tables

The width of columns is automatically determined by the table editor.  And
also the alignment of a column is determined automatically from the fraction
of number-like versus non-number fields in the column.

Sometimes a single field or a few fields need to carry more text, leading to
inconveniently wide columns.  Or maybe you want to make a table with several
columns having a fixed width, regardless of content.  To set the width of
a column, one field anywhere in the column may contain just the string
@samp{<N>} where @samp{N} is an integer specifying the width of the column in
characters.  The next re-align will then set the width of this column to this
value.

@example
@group
|---+------------------------------|               |---+--------|
|   |                              |               |   | <6>    |
| 1 | one                          |               | 1 | one    |
| 2 | two                          |     ----\     | 2 | two    |
| 3 | This is a long chunk of text |     ----/     | 3 | This=> |
| 4 | four                         |               | 4 | four   |
|---+------------------------------|               |---+--------|
@end group
@end example

@noindent
Fields that are wider become clipped and end in the string @samp{=>}.
Note that the full text is still in the buffer but is hidden.
To see the full text, hold the mouse over the field---a tool-tip window
will show the full content.  To edit such a field, use the command
@kbd{C-c `} (that is @kbd{C-c} followed by the grave accent).  This will
open a new window with the full field.  Edit it and finish with @kbd{C-c
C-c}.

@vindex org-startup-align-all-tables
When visiting a file containing a table with narrowed columns, the
necessary character hiding has not yet happened, and the table needs to
be aligned before it looks nice.  Setting the option
@code{org-startup-align-all-tables} will realign all tables in a file
upon visiting, but also slow down startup.  You can also set this option
on a per-file basis with:

@example
#+STARTUP: align
#+STARTUP: noalign
@end example

If you would like to overrule the automatic alignment of number-rich columns
to the right and of string-rich columns to the left, you can use @samp{<r>},
@samp{<c>}@footnote{Centering does not work inside Emacs, but it does have an
effect when exporting to HTML.} or @samp{<l>} in a similar fashion.  You may
also combine alignment and field width like this: @samp{<r10>}.

Lines which only contain these formatting cookies will be removed
automatically when exporting the document.

@node Column groups
@section Column groups
@cindex grouping columns in tables

When Org exports tables, it does so by default without vertical lines because
that is visually more satisfying in general.  Occasionally however, vertical
lines can be useful to structure a table into groups of columns, much like
horizontal lines can do for groups of rows.  In order to specify column
groups, you can use a special row where the first field contains only
@samp{/}.  The further fields can either contain @samp{<} to indicate that
this column should start a group, @samp{>} to indicate the end of a group, or
@samp{<>} (no space between @samp{<} and @samp{>}) to make a column a group
of its own.  Boundaries between column groups will upon export be marked with
vertical lines.  Here is an example:

@example
| N | N^2 | N^3 | N^4 | ~sqrt(n)~ | ~sqrt[4](N)~ |
|---+-----+-----+-----+-----------+--------------|
| / |   < |     |   > |         < |            > |
| 1 |   1 |   1 |   1 |         1 |            1 |
| 2 |   4 |   8 |  16 |    1.4142 |       1.1892 |
| 3 |   9 |  27 |  81 |    1.7321 |       1.3161 |
|---+-----+-----+-----+-----------+--------------|
#+TBLFM: $2=$1^2::$3=$1^3::$4=$1^4::$5=sqrt($1)::$6=sqrt(sqrt(($1)))
@end example

It is also sufficient to just insert the column group starters after
every vertical line you would like to have:

@example
|  N | N^2 | N^3 | N^4 | sqrt(n) | sqrt[4](N) |
|----+-----+-----+-----+---------+------------|
| /  | <   |     |     | <       |            |
@end example

@node Orgtbl mode
@section The Orgtbl minor mode
@cindex Orgtbl mode
@cindex minor mode for tables

If you like the intuitive way the Org table editor works, you might also want
to use it in other modes like Text mode or Mail mode.  The minor mode Orgtbl
mode makes this possible.  You can always toggle the mode with @kbd{M-x
orgtbl-mode @key{RET}}.  To turn it on by default, for example in Message
mode, use

@lisp
(add-hook 'message-mode-hook 'turn-on-orgtbl)
@end lisp

Furthermore, with some special setup, it is possible to maintain tables
in arbitrary syntax with Orgtbl mode.  For example, it is possible to
construct @LaTeX{} tables with the underlying ease and power of
Orgtbl mode, including spreadsheet capabilities.  For details, see
@ref{Tables in arbitrary syntax}.

@node The spreadsheet
@section The spreadsheet
@cindex calculations, in tables
@cindex spreadsheet capabilities
@cindex @file{calc} package

The table editor makes use of the Emacs @file{calc} package to implement
spreadsheet-like capabilities.  It can also evaluate Emacs Lisp forms to
derive fields from other fields.  While fully featured, Org's implementation
is not identical to other spreadsheets.  For example, Org knows the concept
of a @emph{column formula} that will be applied to all non-header fields in a
column without having to copy the formula to each relevant field.  There is
also a formula debugger, and a formula editor with features for highlighting
fields in the table corresponding to the references at the point in the
formula, moving these references by arrow keys

@menu
* References::                  How to refer to another field or range
* Formula syntax for Calc::     Using Calc to compute stuff
* Formula syntax for Lisp::     Writing formulas in Emacs Lisp
* Durations and time values::   How to compute durations and time values
* Field and range formulas::    Formula for specific (ranges of) fields
* Column formulas::             Formulas valid for an entire column
* Lookup functions::            Lookup functions for searching tables
* Editing and debugging formulas::  Fixing formulas
* Updating the table::          Recomputing all dependent fields
* Advanced features::           Field and column names, parameters and automatic recalc
@end menu

@node References
@subsection References
@cindex references

To compute fields in the table from other fields, formulas must
reference other fields or ranges.  In Org, fields can be referenced
by name, by absolute coordinates, and by relative coordinates.  To find
out what the coordinates of a field are, press @kbd{C-c ?} in that
field, or press @kbd{C-c @}} to toggle the display of a grid.

@subsubheading Field references
@cindex field references
@cindex references, to fields

Formulas can reference the value of another field in two ways.  Like in
any other spreadsheet, you may reference fields with a letter/number
combination like @code{B3}, meaning the 2nd field in the 3rd row.
@vindex org-table-use-standard-references
However, Org prefers@footnote{Org will understand references typed by the
user as @samp{B4}, but it will not use this syntax when offering a formula
for editing.  You can customize this behavior using the option
@code{org-table-use-standard-references}.} to use another, more general
representation that looks like this:
@example
@@@var{row}$@var{column}
@end example

Column specifications can be absolute like @code{$1},
@code{$2},...@code{$@var{N}}, or relative to the current column (i.e., the
column of the field which is being computed) like @code{$+1} or @code{$-2}.
@code{$<} and @code{$>} are immutable references to the first and last
column, respectively, and you can use @code{$>>>} to indicate the third
column from the right.

The row specification only counts data lines and ignores horizontal separator
lines (hlines).  Like with columns, you can use absolute row numbers
@code{@@1}, @code{@@2},...@code{@@@var{N}}, and row numbers relative to the
current row like @code{@@+3} or @code{@@-1}.  @code{@@<} and @code{@@>} are
immutable references the first and last@footnote{For backward compatibility
you can also use special names like @code{$LR5} and @code{$LR12} to refer in
a stable way to the 5th and 12th field in the last row of the table.
However, this syntax is deprecated, it should not be used for new documents.
Use @code{@@>$} instead.} row in the table, respectively.  You may also
specify the row relative to one of the hlines: @code{@@I} refers to the first
hline, @code{@@II} to the second, etc.  @code{@@-I} refers to the first such
line above the current line, @code{@@+I} to the first such line below the
current line.  You can also write @code{@@III+2} which is the second data line
after the third hline in the table.

@code{@@0} and @code{$0} refer to the current row and column, respectively,
i.e., to the row/column for the field being computed.  Also, if you omit
either the column or the row part of the reference, the current row/column is
implied.

Org's references with @emph{unsigned} numbers are fixed references
in the sense that if you use the same reference in the formula for two
different fields, the same field will be referenced each time.
Org's references with @emph{signed} numbers are floating
references because the same reference operator can reference different
fields depending on the field being calculated by the formula.

Here are a few examples:

@example
@@2$3      @r{2nd row, 3rd column (same as @code{C2})}
$5        @r{column 5 in the current row (same as @code{E&})}
@@2        @r{current column, row 2}
@@-1$-3    @r{the field one row up, three columns to the left}
@@-I$2     @r{field just under hline above current row, column 2}
@@>$5      @r{field in the last row, in column 5}
@end example

@subsubheading Range references
@cindex range references
@cindex references, to ranges

You may reference a rectangular range of fields by specifying two field
references connected by two dots @samp{..}.  If both fields are in the
current row, you may simply use @samp{$2..$7}, but if at least one field
is in a different row, you need to use the general @code{@@row$column}
format at least for the first field (i.e the reference must start with
@samp{@@} in order to be interpreted correctly).  Examples:

@example
$1..$3        @r{first three fields in the current row}
$P..$Q        @r{range, using column names (see under Advanced)}
$<<<..$>>     @r{start in third column, continue to the last but one}
@@2$1..@@4$3    @r{6 fields between these two fields (same as @code{A2..C4})}
@@-1$-2..@@-1   @r{3 fields in the row above, starting from 2 columns on the left}
@@I..II        @r{between first and second hline, short for @code{@@I..@@II}}
@end example

@noindent Range references return a vector of values that can be fed
into Calc vector functions.  Empty fields in ranges are normally suppressed,
so that the vector contains only the non-empty fields.  For other options
with the mode switches @samp{E}, @samp{N} and examples @pxref{Formula syntax
for Calc}.

@subsubheading Field coordinates in formulas
@cindex field coordinates
@cindex coordinates, of field
@cindex row, of field coordinates
@cindex column, of field coordinates

One of the very first actions during evaluation of Calc formulas and Lisp
formulas is to substitute @code{@@#} and @code{$#} in the formula with the
row or column number of the field where the current result will go to.  The
traditional Lisp formula equivalents are @code{org-table-current-dline} and
@code{org-table-current-column}.  Examples:

@table @code
@item if(@@# % 2, $#, string(""))
Insert column number on odd rows, set field to empty on even rows.
@item $2 = '(identity remote(FOO, @@@@#$1))
Copy text or values of each row of column 1 of the table named @code{FOO}
into column 2 of the current table.
@item @@3 = 2 * remote(FOO, @@1$$#)
Insert the doubled value of each column of row 1 of the table named
@code{FOO} into row 3 of the current table.
@end table

@noindent For the second/third example, the table named @code{FOO} must have
at least as many rows/columns as the current table.  Note that this is
inefficient@footnote{The computation time scales as O(N^2) because the table
named @code{FOO} is parsed for each field to be read.} for large number of
rows/columns.

@subsubheading Named references
@cindex named references
@cindex references, named
@cindex name, of column or field
@cindex constants, in calculations
@cindex @code{#+CONSTANTS}

@vindex org-table-formula-constants
@samp{$name} is interpreted as the name of a column, parameter or
constant.  Constants are defined globally through the option
@code{org-table-formula-constants}, and locally (for the file) through a
line like

@example
#+CONSTANTS: c=299792458. pi=3.14 eps=2.4e-6
@end example

@noindent
@vindex constants-unit-system
@pindex constants.el
Also properties (@pxref{Properties and columns}) can be used as
constants in table formulas: for a property @samp{:Xyz:} use the name
@samp{$PROP_Xyz}, and the property will be searched in the current
outline entry and in the hierarchy above it.  If you have the
@file{constants.el} package, it will also be used to resolve constants,
including natural constants like @samp{$h} for Planck's constant, and
units like @samp{$km} for kilometers@footnote{@file{constants.el} can
supply the values of constants in two different unit systems, @code{SI}
and @code{cgs}.  Which one is used depends on the value of the variable
@code{constants-unit-system}.  You can use the @code{#+STARTUP} options
@code{constSI} and @code{constcgs} to set this value for the current
buffer.}.  Column names and parameters can be specified in special table
lines.  These are described below, see @ref{Advanced features}.  All
names must start with a letter, and further consist of letters and
numbers.

@subsubheading Remote references
@cindex remote references
@cindex references, remote
@cindex references, to a different table
@cindex name, of column or field
@cindex constants, in calculations
@cindex @code{#+NAME}, for table

You may also reference constants, fields and ranges from a different table,
either in the current file or even in a different file.  The syntax is

@example
remote(NAME-OR-ID,REF)
@end example

@noindent
where NAME can be the name of a table in the current file as set by a
@code{#+NAME: Name} line before the table.  It can also be the ID of an
entry, even in a different file, and the reference then refers to the first
table in that entry.  REF is an absolute field or range reference as
described above for example @code{@@3$3} or @code{$somename}, valid in the
referenced table.

Indirection of NAME-OR-ID: When NAME-OR-ID has the format @code{@@ROW$COLUMN}
it will be substituted with the name or ID found in this field of the current
table.  For example @code{remote($1, @@>$2)} => @code{remote(year_2013,
@@>$1)}.  The format @code{B3} is not supported because it can not be
distinguished from a plain table name or ID.

@node Formula syntax for Calc
@subsection Formula syntax for Calc
@cindex formula syntax, Calc
@cindex syntax, of formulas

A formula can be any algebraic expression understood by the Emacs @file{Calc}
package.  Note that @file{calc} has the non-standard convention that @samp{/}
has lower precedence than @samp{*}, so that @samp{a/b*c} is interpreted as
@samp{a/(b*c)}.  Before evaluation by @code{calc-eval} (@pxref{Calling Calc
from Your Programs, calc-eval, Calling Calc from Your Lisp Programs, calc,
GNU Emacs Calc Manual}), variable substitution takes place according to the
rules described above.
@cindex vectors, in table calculations
The range vectors can be directly fed into the Calc vector functions
like @samp{vmean} and @samp{vsum}.

@cindex format specifier
@cindex mode, for @file{calc}
@vindex org-calc-default-modes
A formula can contain an optional mode string after a semicolon.  This
string consists of flags to influence Calc and other modes during
execution.  By default, Org uses the standard Calc modes (precision
12, angular units degrees, fraction and symbolic modes off).  The display
format, however, has been changed to @code{(float 8)} to keep tables
compact.  The default settings can be configured using the option
@code{org-calc-default-modes}.

@noindent List of modes:

@table @asis
@item @code{p20}
Set the internal Calc calculation precision to 20 digits.
@item @code{n3}, @code{s3}, @code{e2}, @code{f4}
Normal, scientific, engineering or fixed format of the result of Calc passed
back to Org.  Calc formatting is unlimited in precision as long as the Calc
calculation precision is greater.
@item @code{D}, @code{R}
Degree and radian angle modes of Calc.
@item @code{F}, @code{S}
Fraction and symbolic modes of Calc.
@item @code{T}, @code{t}, @code{U}
Duration computations in Calc or Lisp, @pxref{Durations and time values}.
@item @code{E}
If and how to consider empty fields.  Without @samp{E} empty fields in range
references are suppressed so that the Calc vector or Lisp list contains only
the non-empty fields.  With @samp{E} the empty fields are kept.  For empty
fields in ranges or empty field references the value @samp{nan} (not a
number) is used in Calc formulas and the empty string is used for Lisp
formulas.  Add @samp{N} to use 0 instead for both formula types.  For the
value of a field the mode @samp{N} has higher precedence than @samp{E}.
@item @code{N}
Interpret all fields as numbers, use 0 for non-numbers.  See the next section
to see how this is essential for computations with Lisp formulas.  In Calc
formulas it is used only occasionally because there number strings are
already interpreted as numbers without @samp{N}.
@item @code{L}
Literal, for Lisp formulas only.  See the next section.
@end table

@noindent
Unless you use large integer numbers or high-precision-calculation and
-display for floating point numbers you may alternatively provide a
@samp{printf} format specifier to reformat the Calc result after it has been
passed back to Org instead of letting Calc already do the
formatting@footnote{The @samp{printf} reformatting is limited in precision
because the value passed to it is converted into an @samp{integer} or
@samp{double}.  The @samp{integer} is limited in size by truncating the
signed value to 32 bits.  The @samp{double} is limited in precision to 64
bits overall which leaves approximately 16 significant decimal digits.}.  A
few examples:

@example
$1+$2                @r{Sum of first and second field}
$1+$2;%.2f           @r{Same, format result to two decimals}
exp($2)+exp($1)      @r{Math functions can be used}
$0;%.1f              @r{Reformat current cell to 1 decimal}
($3-32)*5/9          @r{Degrees F -> C conversion}
$c/$1/$cm            @r{Hz -> cm conversion, using @file{constants.el}}
tan($1);Dp3s1        @r{Compute in degrees, precision 3, display SCI 1}
sin($1);Dp3%.1e      @r{Same, but use printf specifier for display}
taylor($3,x=7,2)     @r{Taylor series of $3, at x=7, second degree}
@end example

Calc also contains a complete set of logical operations, (@pxref{Logical
Operations, , Logical Operations, calc, GNU Emacs Calc Manual}).  For example

@table @code
@item if($1 < 20, teen, string(""))
"teen" if age $1 is less than 20, else the Org table result field is set to
empty with the empty string.
@item if("$1" == "nan" || "$2" == "nan", string(""), $1 + $2); E f-1
Sum of the first two columns.  When at least one of the input fields is empty
the Org table result field is set to empty.  @samp{E} is required to not
convert empty fields to 0.  @samp{f-1} is an optional Calc format string
similar to @samp{%.1f} but leaves empty results empty.
@item if(typeof(vmean($1..$7)) == 12, string(""), vmean($1..$7); E
Mean value of a range unless there is any empty field.  Every field in the
range that is empty is replaced by @samp{nan} which lets @samp{vmean} result
in @samp{nan}.  Then @samp{typeof == 12} detects the @samp{nan} from
@samp{vmean} and the Org table result field is set to empty.  Use this when
the sample set is expected to never have missing values.
@item if("$1..$7" == "[]", string(""), vmean($1..$7))
Mean value of a range with empty fields skipped.  Every field in the range
that is empty is skipped.  When all fields in the range are empty the mean
value is not defined and the Org table result field is set to empty.  Use
this when the sample set can have a variable size.
@item vmean($1..$7); EN
To complete the example before: Mean value of a range with empty fields
counting as samples with value 0.  Use this only when incomplete sample sets
should be padded with 0 to the full size.
@end table

You can add your own Calc functions defined in Emacs Lisp with @code{defmath}
and use them in formula syntax for Calc.

@node Formula syntax for Lisp
@subsection Emacs Lisp forms as formulas
@cindex Lisp forms, as table formulas

It is also possible to write a formula in Emacs Lisp.  This can be useful
for string manipulation and control structures, if Calc's functionality is
not enough.

If a formula starts with an apostrophe followed by an opening parenthesis,
then it is evaluated as a Lisp form.  The evaluation should return either a
string or a number.  Just as with @file{calc} formulas, you can specify modes
and a printf format after a semicolon.

With Emacs Lisp forms, you need to be conscious about the way field
references are interpolated into the form.  By default, a reference will be
interpolated as a Lisp string (in double-quotes) containing the field.  If
you provide the @samp{N} mode switch, all referenced elements will be numbers
(non-number fields will be zero) and interpolated as Lisp numbers, without
quotes.  If you provide the @samp{L} flag, all fields will be interpolated
literally, without quotes.  I.e., if you want a reference to be interpreted
as a string by the Lisp form, enclose the reference operator itself in
double-quotes, like @code{"$3"}.  Ranges are inserted as space-separated
fields, so you can embed them in list or vector syntax.

Here are a few examples---note how the @samp{N} mode is used when we do
computations in Lisp:

@table @code
@item '(concat (substring $1 1 2) (substring $1 0 1) (substring $1 2))
Swap the first two characters of the content of column 1.
@item '(+ $1 $2);N
Add columns 1 and 2, equivalent to Calc's @code{$1+$2}.
@item '(apply '+ '($1..$4));N
Compute the sum of columns 1 to 4, like Calc's @code{vsum($1..$4)}.
@end table

@node Durations and time values
@subsection Durations and time values
@cindex Duration, computing
@cindex Time, computing
@vindex org-table-duration-custom-format

If you want to compute time values use the @code{T}, @code{t}, or @code{U}
flag, either in Calc formulas or Elisp formulas:

@example
@group
  |  Task 1 |   Task 2 |    Total |
  |---------+----------+----------|
  |    2:12 |     1:47 | 03:59:00 |
  |    2:12 |     1:47 |    03:59 |
  | 3:02:20 | -2:07:00 |     0.92 |
  #+TBLFM: @@2$3=$1+$2;T::@@3$3=$1+$2;U::@@4$3=$1+$2;t
@end group
@end example

Input duration values must be of the form @code{HH:MM[:SS]}, where seconds
are optional.  With the @code{T} flag, computed durations will be displayed
as @code{HH:MM:SS} (see the first formula above).  With the @code{U} flag,
seconds will be omitted so that the result will be only @code{HH:MM} (see
second formula above).  Zero-padding of the hours field will depend upon the
value of the variable @code{org-table-duration-hour-zero-padding}.

With the @code{t} flag, computed durations will be displayed according to the
value of the option @code{org-table-duration-custom-format}, which defaults
to @code{'hours} and will display the result as a fraction of hours (see the
third formula in the example above).

Negative duration values can be manipulated as well, and integers will be
considered as seconds in addition and subtraction.

@node Field and range formulas
@subsection Field and range formulas
@cindex field formula
@cindex range formula
@cindex formula, for individual table field
@cindex formula, for range of fields

To assign a formula to a particular field, type it directly into the field,
preceded by @samp{:=}, for example @samp{:=vsum(@@II..III)}.  When you press
@key{TAB} or @key{RET} or @kbd{C-c C-c} with the cursor still in the field,
the formula will be stored as the formula for this field, evaluated, and the
current field will be replaced with the result.

@cindex @code{#+TBLFM}
Formulas are stored in a special line starting with @code{#+TBLFM:} directly
below the table.  If you type the equation in the 4th field of the 3rd data
line in the table, the formula will look like @samp{@@3$4=$1+$2}.  When
inserting/deleting/swapping columns and rows with the appropriate commands,
@i{absolute references} (but not relative ones) in stored formulas are
modified in order to still reference the same field.  To avoid this, in
particular in range references, anchor ranges at the table borders (using
@code{@@<}, @code{@@>}, @code{$<}, @code{$>}), or at hlines using the
@code{@@I} notation.  Automatic adaptation of field references does of course
not happen if you edit the table structure with normal editing
commands---then you must fix the equations yourself.

Instead of typing an equation into the field, you may also use the following
command

@table @kbd
@orgcmd{C-u C-c =,org-table-eval-formula}
Install a new formula for the current field.  The command prompts for a
formula with default taken from the @code{#+TBLFM:} line, applies
it to the current field, and stores it.
@end table

The left-hand side of a formula can also be a special expression in order to
assign the formula to a number of different fields.  There is no keyboard
shortcut to enter such range formulas.  To add them, use the formula editor
(@pxref{Editing and debugging formulas}) or edit the @code{#+TBLFM:} line
directly.

@table @code
@item $2=
Column formula, valid for the entire column.  This is so common that Org
treats these formulas in a special way, see @ref{Column formulas}.
@item @@3=
Row formula, applies to all fields in the specified row.  @code{@@>=} means
the last row.
@item @@1$2..@@4$3=
Range formula, applies to all fields in the given rectangular range.  This
can also be used to assign a formula to some but not all fields in a row.
@item $name=
Named field, see @ref{Advanced features}.
@end table

@node Column formulas
@subsection Column formulas
@cindex column formula
@cindex formula, for table column

When you assign a formula to a simple column reference like @code{$3=}, the
same formula will be used in all fields of that column, with the following
very convenient exceptions: (i) If the table contains horizontal separator
hlines with rows above and below, everything before the first such hline is
considered part of the table @emph{header} and will not be modified by column
formulas.  Therefore a header is mandatory when you use column formulas and
want to add hlines to group rows, like for example to separate a total row at
the bottom from the summand rows above.  (ii) Fields that already get a value
from a field/range formula will be left alone by column formulas.  These
conditions make column formulas very easy to use.

To assign a formula to a column, type it directly into any field in the
column, preceded by an equal sign, like @samp{=$1+$2}.  When you press
@key{TAB} or @key{RET} or @kbd{C-c C-c} with the cursor still in the field,
the formula will be stored as the formula for the current column, evaluated
and the current field replaced with the result.  If the field contains only
@samp{=}, the previously stored formula for this column is used.  For each
column, Org will only remember the most recently used formula.  In the
@code{#+TBLFM:} line, column formulas will look like @samp{$4=$1+$2}.  The
left-hand side of a column formula cannot be the name of column, it must be
the numeric column reference or @code{$>}.

Instead of typing an equation into the field, you may also use the
following command:

@table @kbd
@orgcmd{C-c =,org-table-eval-formula}
Install a new formula for the current column and replace current field with
the result of the formula.  The command prompts for a formula, with default
taken from the @code{#+TBLFM} line, applies it to the current field and
stores it.  With a numeric prefix argument(e.g., @kbd{C-5 C-c =}) the command
will apply it to that many consecutive fields in the current column.
@end table

@node Lookup functions
@subsection Lookup functions
@cindex lookup functions in tables
@cindex table lookup functions

Org has three predefined Emacs Lisp functions for lookups in tables.
@table @code
@item (org-lookup-first VAL S-LIST R-LIST &optional PREDICATE)
@findex org-lookup-first
Searches for the first element @code{S} in list @code{S-LIST} for which
@lisp
(PREDICATE VAL S)
@end lisp
is @code{t}; returns the value from the corresponding position in list
@code{R-LIST}.  The default @code{PREDICATE} is @code{equal}.  Note that the
parameters @code{VAL} and @code{S} are passed to @code{PREDICATE} in the same
order as the corresponding parameters are in the call to
@code{org-lookup-first}, where @code{VAL} precedes @code{S-LIST}.  If
@code{R-LIST} is @code{nil}, the matching element @code{S} of @code{S-LIST}
is returned.
@item (org-lookup-last VAL S-LIST R-LIST &optional PREDICATE)
@findex org-lookup-last
Similar to @code{org-lookup-first} above, but searches for the @i{last}
element for which @code{PREDICATE} is @code{t}.
@item (org-lookup-all VAL S-LIST R-LIST &optional PREDICATE)
@findex org-lookup-all
Similar to @code{org-lookup-first}, but searches for @i{all} elements for
which @code{PREDICATE} is @code{t}, and returns @i{all} corresponding
values.  This function can not be used by itself in a formula, because it
returns a list of values.  However, powerful lookups can be built when this
function is combined with other Emacs Lisp functions.
@end table

If the ranges used in these functions contain empty fields, the @code{E} mode
for the formula should usually be specified: otherwise empty fields will not be
included in @code{S-LIST} and/or @code{R-LIST} which can, for example, result
in an incorrect mapping from an element of @code{S-LIST} to the corresponding
element of @code{R-LIST}.

These three functions can be used to implement associative arrays, count
matching cells, rank results, group data etc.  For practical examples
see @uref{https://orgmode.org/worg/org-tutorials/org-lookups.html, this
tutorial on Worg}.

@node Editing and debugging formulas
@subsection Editing and debugging formulas
@cindex formula editing
@cindex editing, of table formulas

@vindex org-table-use-standard-references
You can edit individual formulas in the minibuffer or directly in the field.
Org can also prepare a special buffer with all active formulas of a table.
When offering a formula for editing, Org converts references to the standard
format (like @code{B3} or @code{D&}) if possible.  If you prefer to only work
with the internal format (like @code{@@3$2} or @code{$4}), configure the
option @code{org-table-use-standard-references}.

@table @kbd
@orgcmdkkc{C-c =,C-u C-c =,org-table-eval-formula}
Edit the formula associated with the current column/field in the
minibuffer.  See @ref{Column formulas}, and @ref{Field and range formulas}.
@orgcmd{C-u C-u C-c =,org-table-eval-formula}
Re-insert the active formula (either a
field formula, or a column formula) into the current field, so that you
can edit it directly in the field.  The advantage over editing in the
minibuffer is that you can use the command @kbd{C-c ?}.
@orgcmd{C-c ?,org-table-field-info}
While editing a formula in a table field, highlight the field(s)
referenced by the reference at the cursor position in the formula.
@kindex C-c @}
@findex org-table-toggle-coordinate-overlays
@item C-c @}
Toggle the display of row and column numbers for a table, using overlays
(@command{org-table-toggle-coordinate-overlays}).  These are updated each
time the table is aligned; you can force it with @kbd{C-c C-c}.
@kindex C-c @{
@findex org-table-toggle-formula-debugger
@item C-c @{
Toggle the formula debugger on and off
(@command{org-table-toggle-formula-debugger}).  See below.
@orgcmd{C-c ',org-table-edit-formulas}
Edit all formulas for the current table in a special buffer, where the
formulas will be displayed one per line.  If the current field has an
active formula, the cursor in the formula editor will mark it.
While inside the special buffer, Org will automatically highlight
any field or range reference at the cursor position.  You may edit,
remove and add formulas, and use the following commands:

@table @kbd
@orgcmdkkc{C-c C-c,C-x C-s,org-table-fedit-finish}
Exit the formula editor and store the modified formulas.  With @kbd{C-u}
prefix, also apply the new formulas to the entire table.
@orgcmd{C-c C-q,org-table-fedit-abort}
Exit the formula editor without installing changes.
@orgcmd{C-c C-r,org-table-fedit-toggle-ref-type}
Toggle all references in the formula editor between standard (like
@code{B3}) and internal (like @code{@@3$2}).
@orgcmd{@key{TAB},org-table-fedit-lisp-indent}
Pretty-print or indent Lisp formula at point.  When in a line containing
a Lisp formula, format the formula according to Emacs Lisp rules.
Another @key{TAB} collapses the formula back again.  In the open
formula, @key{TAB} re-indents just like in Emacs Lisp mode.
@orgcmd{M-@key{TAB},lisp-complete-symbol}
Complete Lisp symbols, just like in Emacs Lisp mode.@footnote{Many desktops
intercept @kbd{M-@key{TAB}} to switch windows.  Use @kbd{C-M-i} or
@kbd{@key{ESC} @key{TAB}} instead for completion (@pxref{Completion}).}
@kindex S-UP
@kindex S-DOWN
@kindex S-LEFT
@kindex S-RIGHT
@findex org-table-fedit-ref-up
@findex org-table-fedit-ref-down
@findex org-table-fedit-ref-left
@findex org-table-fedit-ref-right
@item S-@key{UP}/@key{DOWN}/@key{LEFT}/@key{RIGHT}
Shift the reference at point.  For example, if the reference is
@code{B3} and you press @kbd{S-@key{RIGHT}}, it will become @code{C3}.
This also works for relative references and for hline references.
@orgcmdkkcc{M-S-@key{UP},M-S-@key{DOWN},org-table-fedit-line-up,org-table-fedit-line-down}
Move the test line for column formulas in the Org buffer up and
down.
@orgcmdkkcc{M-@key{UP},M-@key{DOWN},org-table-fedit-scroll-down,org-table-fedit-scroll-up}
Scroll the window displaying the table.
@kindex C-c @}
@findex org-table-toggle-coordinate-overlays
@item C-c @}
Turn the coordinate grid in the table on and off.
@end table
@end table

Making a table field blank does not remove the formula associated with
the field, because that is stored in a different line (the @code{#+TBLFM}
line)---during the next recalculation the field will be filled again.
To remove a formula from a field, you have to give an empty reply when
prompted for the formula, or to edit the @code{#+TBLFM} line.

@kindex C-c C-c
You may edit the @code{#+TBLFM} directly and re-apply the changed
equations with @kbd{C-c C-c} in that line or with the normal
recalculation commands in the table.

@anchor{Using multiple #+TBLFM lines}
@subsubheading Using multiple @code{#+TBLFM} lines
@cindex @code{#+TBLFM} line, multiple
@cindex @code{#+TBLFM}
@cindex @code{#+TBLFM}, switching
@kindex C-c C-c

You may apply the formula temporarily.  This is useful when you
switch the formula.  Place multiple @code{#+TBLFM} lines right
after the table, and then press @kbd{C-c C-c} on the formula to
apply.  Here is an example:

@example
| x | y |
|---+---|
| 1 |   |
| 2 |   |
#+TBLFM: $2=$1*1
#+TBLFM: $2=$1*2
@end example

@noindent
Pressing @kbd{C-c C-c} in the line of @samp{#+TBLFM: $2=$1*2} yields:

@example
| x | y |
|---+---|
| 1 | 2 |
| 2 | 4 |
#+TBLFM: $2=$1*1
#+TBLFM: $2=$1*2
@end example

@noindent
Note: If you recalculate this table (with @kbd{C-u C-c *}, for example), you
will get the following result of applying only the first @code{#+TBLFM} line.

@example
| x | y |
|---+---|
| 1 | 1 |
| 2 | 2 |
#+TBLFM: $2=$1*1
#+TBLFM: $2=$1*2
@end example

@subsubheading Debugging formulas
@cindex formula debugging
@cindex debugging, of table formulas
When the evaluation of a formula leads to an error, the field content
becomes the string @samp{#ERROR}.  If you would like see what is going
on during variable substitution and calculation in order to find a bug,
turn on formula debugging in the @code{Tbl} menu and repeat the
calculation, for example by pressing @kbd{C-u C-u C-c = @key{RET}} in a
field.  Detailed information will be displayed.

@node Updating the table
@subsection Updating the table
@cindex recomputing table fields
@cindex updating, table

Recalculation of a table is normally not automatic, but needs to be
triggered by a command.  See @ref{Advanced features}, for a way to make
recalculation at least semi-automatic.

In order to recalculate a line of a table or the entire table, use the
following commands:

@table @kbd
@orgcmd{C-c *,org-table-recalculate}
Recalculate the current row by first applying the stored column formulas
from left to right, and all field/range formulas in the current row.
@c
@kindex C-u C-c *
@item C-u C-c *
@kindex C-u C-c C-c
@itemx C-u C-c C-c
Recompute the entire table, line by line.  Any lines before the first
hline are left alone, assuming that these are part of the table header.
@c
@orgcmdkkc{C-u C-u C-c *,C-u C-u C-c C-c,org-table-iterate}
Iterate the table by recomputing it until no further changes occur.
This may be necessary if some computed fields use the value of other
fields that are computed @i{later} in the calculation sequence.
@item M-x org-table-recalculate-buffer-tables @key{RET}
@findex org-table-recalculate-buffer-tables
Recompute all tables in the current buffer.
@item M-x org-table-iterate-buffer-tables @key{RET}
@findex org-table-iterate-buffer-tables
Iterate all tables in the current buffer, in order to converge table-to-table
dependencies.
@end table

@node Advanced features
@subsection Advanced features

If you want the recalculation of fields to happen automatically, or if you
want to be able to assign @i{names}@footnote{Such names must start by an
alphabetic character and use only alphanumeric/underscore characters.} to
fields and columns, you need to reserve the first column of the table for
special marking characters.

@table @kbd
@orgcmd{C-#,org-table-rotate-recalc-marks}
Rotate the calculation mark in first column through the states @samp{ },
@samp{#}, @samp{*}, @samp{!}, @samp{$}.  When there is an active region,
change all marks in the region.
@end table

Here is an example of a table that collects exam results of students and
makes use of these features:

@example
@group
|---+---------+--------+--------+--------+-------+------|
|   | Student | Prob 1 | Prob 2 | Prob 3 | Total | Note |
|---+---------+--------+--------+--------+-------+------|
| ! |         |     P1 |     P2 |     P3 |   Tot |      |
| # | Maximum |     10 |     15 |     25 |    50 | 10.0 |
| ^ |         |     m1 |     m2 |     m3 |    mt |      |
|---+---------+--------+--------+--------+-------+------|
| # | Peter   |     10 |      8 |     23 |    41 |  8.2 |
| # | Sam     |      2 |      4 |      3 |     9 |  1.8 |
|---+---------+--------+--------+--------+-------+------|
|   | Average |        |        |        |  25.0 |      |
| ^ |         |        |        |        |    at |      |
| $ | max=50  |        |        |        |       |      |
|---+---------+--------+--------+--------+-------+------|
#+TBLFM: $6=vsum($P1..$P3)::$7=10*$Tot/$max;%.1f::$at=vmean(@@-II..@@-I);%.1f
@end group
@end example

@noindent @b{Important}: please note that for these special tables,
recalculating the table with @kbd{C-u C-c *} will only affect rows that
are marked @samp{#} or @samp{*}, and fields that have a formula assigned
to the field itself.  The column formulas are not applied in rows with
empty first field.

@cindex marking characters, tables
The marking characters have the following meaning:

@table @samp
@item !
The fields in this line define names for the columns, so that you may
refer to a column as @samp{$Tot} instead of @samp{$6}.
@item ^
This row defines names for the fields @emph{above} the row.  With such
a definition, any formula in the table may use @samp{$m1} to refer to
the value @samp{10}.  Also, if you assign a formula to a names field, it
will be stored as @samp{$name=...}.
@item _
Similar to @samp{^}, but defines names for the fields in the row
@emph{below}.
@item $
Fields in this row can define @emph{parameters} for formulas.  For
example, if a field in a @samp{$} row contains @samp{max=50}, then
formulas in this table can refer to the value 50 using @samp{$max}.
Parameters work exactly like constants, only that they can be defined on
a per-table basis.
@item #
Fields in this row are automatically recalculated when pressing
@key{TAB} or @key{RET} or @kbd{S-@key{TAB}} in this row.  Also, this row
is selected for a global recalculation with @kbd{C-u C-c *}.  Unmarked
lines will be left alone by this command.
@item *
Selects this line for global recalculation with @kbd{C-u C-c *}, but
not for automatic recalculation.  Use this when automatic
recalculation slows down editing too much.
@item @w{ }
Unmarked lines are exempt from recalculation with @kbd{C-u C-c *}.
All lines that should be recalculated should be marked with @samp{#}
or @samp{*}.
@item /
Do not export this line.  Useful for lines that contain the narrowing
@samp{<N>} markers or column group markers.
@end table

Finally, just to whet your appetite for what can be done with the
fantastic @file{calc.el} package, here is a table that computes the Taylor
series of degree @code{n} at location @code{x} for a couple of
functions.

@example
@group
|---+-------------+---+-----+--------------------------------------|
|   | Func        | n | x   | Result                               |
|---+-------------+---+-----+--------------------------------------|
| # | exp(x)      | 1 | x   | 1 + x                                |
| # | exp(x)      | 2 | x   | 1 + x + x^2 / 2                      |
| # | exp(x)      | 3 | x   | 1 + x + x^2 / 2 + x^3 / 6            |
| # | x^2+sqrt(x) | 2 | x=0 | x*(0.5 / 0) + x^2 (2 - 0.25 / 0) / 2 |
| # | x^2+sqrt(x) | 2 | x=1 | 2 + 2.5 x - 2.5 + 0.875 (x - 1)^2    |
| * | tan(x)      | 3 | x   | 0.0175 x + 1.77e-6 x^3               |
|---+-------------+---+-----+--------------------------------------|
#+TBLFM: $5=taylor($2,$4,$3);n3
@end group
@end example

@node Org-Plot
@section Org-Plot
@cindex graph, in tables
@cindex plot tables using Gnuplot
@cindex @code{#+PLOT}

Org-Plot can produce graphs of information stored in org tables, either
graphically or in ASCII-art.

@subheading Graphical plots using @file{Gnuplot}

Org-Plot produces 2D and 3D graphs using @file{Gnuplot}
@uref{http://www.gnuplot.info/} and @file{gnuplot-mode}
@uref{http://xafs.org/BruceRavel/GnuplotMode}.  To see this in action, ensure
that you have both Gnuplot and Gnuplot mode installed on your system, then
call @kbd{C-c " g} or @kbd{M-x org-plot/gnuplot @key{RET}} on the following
table.

@example
@group
#+PLOT: title:"Citas" ind:1 deps:(3) type:2d with:histograms set:"yrange [0:]"
| Sede      | Max cites | H-index |
|-----------+-----------+---------|
| Chile     |    257.72 |   21.39 |
| Leeds     |    165.77 |   19.68 |
| Sao Paolo |     71.00 |   11.50 |
| Stockholm |    134.19 |   14.33 |
| Morelia   |    257.56 |   17.67 |
@end group
@end example

Notice that Org Plot is smart enough to apply the table's headers as labels.
Further control over the labels, type, content, and appearance of plots can
be exercised through the @code{#+PLOT:} lines preceding a table.  See below
for a complete list of Org-plot options.  The @code{#+PLOT:} lines are
optional.  For more information and examples see the Org-plot tutorial at
@uref{https://orgmode.org/worg/org-tutorials/org-plot.html}.

@subsubheading Plot Options

@table @code
@item set
Specify any @command{gnuplot} option to be set when graphing.

@item title
Specify the title of the plot.

@item ind
Specify which column of the table to use as the @code{x} axis.

@item deps
Specify the columns to graph as a Lisp style list, surrounded by parentheses
and separated by spaces for example @code{dep:(3 4)} to graph the third and
fourth columns (defaults to graphing all other columns aside from the @code{ind}
column).

@item type
Specify whether the plot will be @code{2d}, @code{3d}, or @code{grid}.

@item with
Specify a @code{with} option to be inserted for every col being plotted
(e.g., @code{lines}, @code{points}, @code{boxes}, @code{impulses}, etc...).
Defaults to @code{lines}.

@item file
If you want to plot to a file, specify @code{"@var{path/to/desired/output-file}"}.

@item labels
List of labels to be used for the @code{deps} (defaults to the column headers
if they exist).

@item line
Specify an entire line to be inserted in the Gnuplot script.

@item map
When plotting @code{3d} or @code{grid} types, set this to @code{t} to graph a
flat mapping rather than a @code{3d} slope.

@item timefmt
Specify format of Org mode timestamps as they will be parsed by Gnuplot.
Defaults to @samp{%Y-%m-%d-%H:%M:%S}.

@item script
If you want total control, you can specify a script file (place the file name
between double-quotes) which will be used to plot.  Before plotting, every
instance of @code{$datafile} in the specified script will be replaced with
the path to the generated data file.  Note: even if you set this option, you
may still want to specify the plot type, as that can impact the content of
the data file.
@end table

@subheading ASCII bar plots

While the cursor is on a column, typing @kbd{C-c " a} or
@kbd{M-x orgtbl-ascii-plot @key{RET}} create a new column containing an
ASCII-art bars plot.  The plot is implemented through a regular column
formula.  When the source column changes, the bar plot may be updated by
refreshing the table, for example typing @kbd{C-u C-c *}.

@example
@group
| Sede          | Max cites |              |
|---------------+-----------+--------------|
| Chile         |    257.72 | WWWWWWWWWWWW |
| Leeds         |    165.77 | WWWWWWWh     |
| Sao Paolo     |     71.00 | WWW;         |
| Stockholm     |    134.19 | WWWWWW:      |
| Morelia       |    257.56 | WWWWWWWWWWWH |
| Rochefourchat |      0.00 |              |
#+TBLFM: $3='(orgtbl-ascii-draw $2 0.0 257.72 12)
@end group
@end example

The formula is an elisp call:
@lisp
(orgtbl-ascii-draw COLUMN MIN MAX WIDTH)
@end lisp

@table @code
@item COLUMN
  is a reference to the source column.

@item MIN MAX
  are the minimal and maximal values displayed.  Sources values
  outside this range are displayed as @samp{too small}
  or @samp{too large}.

@item WIDTH
  is the width in characters of the bar-plot.  It defaults to @samp{12}.

@end table

@node Hyperlinks
@chapter Hyperlinks
@cindex hyperlinks

Like HTML, Org provides links inside a file, external links to
other files, Usenet articles, emails, and much more.

@menu
* Link format::                 How links in Org are formatted
* Internal links::              Links to other places in the current file
* External links::              URL-like links to the world
* Handling links::              Creating, inserting and following
* Using links outside Org::     Linking from my C source code?
* Link abbreviations::          Shortcuts for writing complex links
* Search options::              Linking to a specific location
* Custom searches::             When the default search is not enough
@end menu

@node Link format
@section Link format
@cindex link format
@cindex format, of links

Org will recognize plain URL-like links and activate them as
clickable links.  The general link format, however, looks like this:

@example
[[link][description]]       @r{or alternatively}           [[link]]
@end example

@noindent
Once a link in the buffer is complete (all brackets present), Org
will change the display so that @samp{description} is displayed instead
of @samp{[[link][description]]} and @samp{link} is displayed instead of
@samp{[[link]]}.  Links will be highlighted in the face @code{org-link},
which by default is an underlined face.  You can directly edit the
visible part of a link.  Note that this can be either the @samp{link}
part (if there is no description) or the @samp{description} part.  To
edit also the invisible @samp{link} part, use @kbd{C-c C-l} with the
cursor on the link.

If you place the cursor at the beginning or just behind the end of the
displayed text and press @key{BACKSPACE}, you will remove the
(invisible) bracket at that location.  This makes the link incomplete
and the internals are again displayed as plain text.  Inserting the
missing bracket hides the link internals again.  To show the
internal structure of all links, use the menu entry
@code{Org->Hyperlinks->Literal links}.

@node Internal links
@section Internal links
@cindex internal links
@cindex links, internal
@cindex targets, for links

@cindex property, @code{CUSTOM_ID}
If the link does not look like a URL, it is considered to be internal in the
current file.  The most important case is a link like
@samp{[[#my-custom-id]]} which will link to the entry with the
@code{CUSTOM_ID} property @samp{my-custom-id}.  You are responsible yourself
to make sure these custom IDs are unique in a file.

Links such as @samp{[[My Target]]} or @samp{[[My Target][Find my target]]}
lead to a text search in the current file.

The link can be followed with @kbd{C-c C-o} when the cursor is on the link,
or with a mouse click (@pxref{Handling links}).  Links to custom IDs will
point to the corresponding headline.  The preferred match for a text link is
a @i{dedicated target}: the same string in double angular brackets, like
@samp{<<My Target>>}.

@cindex @code{#+NAME}
If no dedicated target exists, the link will then try to match the exact name
of an element within the buffer.  Naming is done with the @code{#+NAME}
keyword, which has to be put in the line before the element it refers to, as
in the following example

@example
#+NAME: My Target
| a  | table      |
|----+------------|
| of | four cells |
@end example

If none of the above succeeds, Org will search for a headline that is exactly
the link text but may also include a TODO keyword and tags@footnote{To insert
a link targeting a headline, in-buffer completion can be used.  Just type
a star followed by a few optional letters into the buffer and press
@kbd{M-@key{TAB}}.  All headlines in the current buffer will be offered as
completions.}.

During export, internal links will be used to mark objects and assign them
a number.  Marked objects will then be referenced by links pointing to them.
In particular, links without a description will appear as the number assigned
to the marked object@footnote{When targeting a @code{#+NAME} keyword,
@code{#+CAPTION} keyword is mandatory in order to get proper numbering
(@pxref{Images and tables}).}.  In the following excerpt from an Org buffer

@example
- one item
- <<target>>another item
Here we refer to item [[target]].
@end example

@noindent
The last sentence will appear as @samp{Here we refer to item 2} when
exported.

In non-Org files, the search will look for the words in the link text.  In
the above example the search would be for @samp{my target}.

Following a link pushes a mark onto Org's own mark ring.  You can
return to the previous position with @kbd{C-c &}.  Using this command
several times in direct succession goes back to positions recorded
earlier.

@menu
* Radio targets::               Make targets trigger links in plain text
@end menu

@node Radio targets
@subsection Radio targets
@cindex radio targets
@cindex targets, radio
@cindex links, radio targets

Org can automatically turn any occurrences of certain target names
in normal text into a link.  So without explicitly creating a link, the
text connects to the target radioing its position.  Radio targets are
enclosed by triple angular brackets.  For example, a target @samp{<<<My
Target>>>} causes each occurrence of @samp{my target} in normal text to
become activated as a link.  The Org file is scanned automatically
for radio targets only when the file is first loaded into Emacs.  To
update the target list during editing, press @kbd{C-c C-c} with the
cursor on or at a target.

@node External links
@section External links
@cindex links, external
@cindex external links
@cindex Gnus links
@cindex BBDB links
@cindex IRC links
@cindex URL links
@cindex file links
@cindex RMAIL links
@cindex MH-E links
@cindex USENET links
@cindex SHELL links
@cindex Info links
@cindex Elisp links

Org supports links to files, websites, Usenet and email messages, BBDB
database entries and links to both IRC conversations and their logs.
External links are URL-like locators.  They start with a short identifying
string followed by a colon.  There can be no space after the colon.  The
following list shows examples for each link type.

@example
http://www.astro.uva.nl/~dominik             @r{on the web}
doi:10.1000/182                              @r{DOI for an electronic resource}
file:/home/dominik/images/jupiter.jpg        @r{file, absolute path}
/home/dominik/images/jupiter.jpg             @r{same as above}
file:papers/last.pdf                         @r{file, relative path}
./papers/last.pdf                            @r{same as above}
file:/ssh:myself@@some.where:papers/last.pdf  @r{file, path on remote machine}
/ssh:myself@@some.where:papers/last.pdf       @r{same as above}
file:sometextfile::NNN                       @r{file, jump to line number}
file:projects.org                            @r{another Org file}
file:projects.org::some words                @r{text search in Org file}@footnote{
The actual behavior of the search will depend on the value of
the option @code{org-link-search-must-match-exact-headline}.  If its value
is @code{nil}, then a fuzzy text search will be done.  If it is @code{t}, then only
the exact headline will be matched, ignoring spaces and cookies.  If the
value is @code{query-to-create}, then an exact headline will be searched; if
it is not found, then the user will be queried to create it.}
file:projects.org::*task title               @r{heading search in Org file}@footnote{
Headline searches always match the exact headline, ignoring
spaces and cookies.  If the headline is not found and the value of the option
@code{org-link-search-must-match-exact-headline} is @code{query-to-create},
then the user will be queried to create it.}
docview:papers/last.pdf::NNN                 @r{open in doc-view mode at page}
id:B7423F4D-2E8A-471B-8810-C40F074717E9      @r{Link to heading by ID}
news:comp.emacs                              @r{Usenet link}
mailto:adent@@galaxy.net                      @r{Mail link}
mhe:folder                                   @r{MH-E folder link}
mhe:folder#id                                @r{MH-E message link}
rmail:folder                                 @r{RMAIL folder link}
rmail:folder#id                              @r{RMAIL message link}
gnus:group                                   @r{Gnus group link}
gnus:group#id                                @r{Gnus article link}
bbdb:R.*Stallman                             @r{BBDB link (with regexp)}
irc:/irc.com/#emacs/bob                      @r{IRC link}
info:org#External links                      @r{Info node or index link}
shell:ls *.org                               @r{A shell command}
elisp:org-agenda                             @r{Interactive Elisp command}
elisp:(find-file-other-frame "Elisp.org")    @r{Elisp form to evaluate}
@end example

@cindex VM links
@cindex WANDERLUST links
On top of these built-in link types, some are available through the
@code{contrib/} directory (@pxref{Installation}).  For example, these links
to VM or Wanderlust messages are available when you load the corresponding
libraries from the @code{contrib/} directory:

@example
vm:folder                                    @r{VM folder link}
vm:folder#id                                 @r{VM message link}
vm://myself@@some.where.org/folder#id         @r{VM on remote machine}
vm-imap:account:folder                       @r{VM IMAP folder link}
vm-imap:account:folder#id                    @r{VM IMAP message link}
wl:folder                                    @r{WANDERLUST folder link}
wl:folder#id                                 @r{WANDERLUST message link}
@end example

For customizing Org to add new link types @ref{Adding hyperlink types}.

A link should be enclosed in double brackets and may contain a descriptive
text to be displayed instead of the URL (@pxref{Link format}), for example:

@example
[[https://www.gnu.org/software/emacs/][GNU Emacs]]
@end example

@noindent
If the description is a file name or URL that points to an image, HTML
export (@pxref{HTML export}) will inline the image as a clickable
button.  If there is no description at all and the link points to an
image,
that image will be inlined into the exported HTML file.

@cindex square brackets, around links
@cindex plain text external links
Org also finds external links in the normal text and activates them
as links.  If spaces must be part of the link (for example in
@samp{bbdb:Richard Stallman}), or if you need to remove ambiguities
about the end of the link, enclose them in square brackets.

@node Handling links
@section Handling links
@cindex links, handling

Org provides methods to create a link in the correct syntax, to
insert it into an Org file, and to follow the link.

@table @kbd
@orgcmd{C-c l,org-store-link}
@cindex storing links
Store a link to the current location.  This is a @emph{global} command (you
must create the key binding yourself) which can be used in any buffer to
create a link.  The link will be stored for later insertion into an Org
buffer (see below).  What kind of link will be created depends on the current
buffer:

@b{Org mode buffers}@*
For Org files, if there is a @samp{<<target>>} at the cursor, the link points
to the target.  Otherwise it points to the current headline, which will also
be the description@footnote{If the headline contains a timestamp, it will be
removed from the link and result in a wrong link---you should avoid putting
timestamp in the headline.}.

@vindex org-id-link-to-org-use-id
@cindex property, @code{CUSTOM_ID}
@cindex property, @code{ID}
If the headline has a @code{CUSTOM_ID} property, a link to this custom ID
will be stored.  In addition or alternatively (depending on the value of
@code{org-id-link-to-org-use-id}), a globally unique @code{ID} property will
be created and/or used to construct a link@footnote{The library
@file{org-id.el} must first be loaded, either through @code{org-customize} by
enabling @code{org-id} in @code{org-modules}, or by adding @code{(require
'org-id)} in your Emacs init file.}.  So using this command in Org buffers
will potentially create two links: a human-readable from the custom ID, and
one that is globally unique and works even if the entry is moved from file to
file.  Later, when inserting the link, you need to decide which one to use.

@b{Email/News clients: VM, Rmail, Wanderlust, MH-E, Gnus}@*
Pretty much all Emacs mail clients are supported.  The link will point to the
current article, or, in some GNUS buffers, to the group.  The description is
constructed from the author and the subject.

@b{Web browsers: Eww, W3 and W3M}@*
Here the link will be the current URL, with the page title as description.

@b{Contacts: BBDB}@*
Links created in a BBDB buffer will point to the current entry.

@b{Chat: IRC}@*
@vindex org-irc-link-to-logs
For IRC links, if you set the option @code{org-irc-link-to-logs} to @code{t},
a @samp{file:/} style link to the relevant point in the logs for the current
conversation is created.  Otherwise an @samp{irc:/} style link to the
user/channel/server under the point will be stored.

@b{Other files}@*
For any other files, the link will point to the file, with a search string
(@pxref{Search options}) pointing to the contents of the current line.  If
there is an active region, the selected words will form the basis of the
search string.  If the automatically created link is not working correctly or
accurately enough, you can write custom functions to select the search string
and to do the search for particular file types---see @ref{Custom searches}.
The key binding @kbd{C-c l} is only a suggestion---see @ref{Installation}.

@b{Agenda view}@*
When the cursor is in an agenda view, the created link points to the
entry referenced by the current line.

@c
@orgcmd{C-c C-l,org-insert-link}
@cindex link completion
@cindex completion, of links
@cindex inserting links
@vindex org-keep-stored-link-after-insertion
@vindex org-link-parameters
Insert a link@footnote{Note that you don't have to use this command to
insert a link.  Links in Org are plain text, and you can type or paste them
straight into the buffer.  By using this command, the links are automatically
enclosed in double brackets, and you will be asked for the optional
descriptive text.}.  This prompts for a link to be inserted into the buffer.
You can just type a link, using text for an internal link, or one of the link
type prefixes mentioned in the examples above.  The link will be inserted
into the buffer@footnote{After insertion of a stored link, the link will be
removed from the list of stored links.  To keep it in the list later use, use
a triple @kbd{C-u} prefix argument to @kbd{C-c C-l}, or configure the option
@code{org-keep-stored-link-after-insertion}.}, along with a descriptive text.
If some text was selected when this command is called, the selected text
becomes the default description.

@b{Inserting stored links}@*
All links stored during the
current session are part of the history for this prompt, so you can access
them with @key{UP} and @key{DOWN} (or @kbd{M-p/n}).

@b{Completion support}@* Completion with @key{TAB} will help you to insert
valid link prefixes like @samp{https:}, including the prefixes
defined through link abbreviations (@pxref{Link abbreviations}).  If you
press @key{RET} after inserting only the @var{prefix}, Org will offer
specific completion support for some link types@footnote{This works if
a completion function is defined in the @samp{:complete} property of a link
in @code{org-link-parameters}.}  For example, if you type @kbd{file
@key{RET}}, file name completion (alternative access: @kbd{C-u C-c C-l}, see
below) will be offered, and after @kbd{bbdb @key{RET}} you can complete
contact names.
@orgkey C-u C-c C-l
@cindex file name completion
@cindex completion, of file names
When @kbd{C-c C-l} is called with a @kbd{C-u} prefix argument, a link to
a file will be inserted and you may use file name completion to select
the name of the file.  The path to the file is inserted relative to the
directory of the current Org file, if the linked file is in the current
directory or in a sub-directory of it, or if the path is written relative
to the current directory using @samp{../}.  Otherwise an absolute path
is used, if possible with @samp{~/} for your home directory.  You can
force an absolute path with two @kbd{C-u} prefixes.
@c
@item C-c C-l @ @r{(with cursor on existing link)}
When the cursor is on an existing link, @kbd{C-c C-l} allows you to edit the
link and description parts of the link.
@c
@cindex following links
@orgcmd{C-c C-o,org-open-at-point}
@vindex org-file-apps
@vindex org-link-frame-setup
Open link at point.  This will launch a web browser for URLs (using
@command{browse-url-at-point}), run VM/MH-E/Wanderlust/Rmail/Gnus/BBDB for
the corresponding links, and execute the command in a shell link.  When the
cursor is on an internal link, this command runs the corresponding search.
When the cursor is on a TAG list in a headline, it creates the corresponding
TAGS view.  If the cursor is on a timestamp, it compiles the agenda for that
date.  Furthermore, it will visit text and remote files in @samp{file:} links
with Emacs and select a suitable application for local non-text files.
Classification of files is based on file extension only.  See option
@code{org-file-apps}.  If you want to override the default application and
visit the file with Emacs, use a @kbd{C-u} prefix.  If you want to avoid
opening in Emacs, use a @kbd{C-u C-u} prefix.@*
If the cursor is on a headline, but not on a link, offer all links in the
headline and entry text.  If you want to setup the frame configuration for
following links, customize @code{org-link-frame-setup}.

@orgkey @key{RET}
@vindex org-return-follows-link
When @code{org-return-follows-link} is set, @kbd{@key{RET}} will also follow
the link at point.
@c
@kindex mouse-2
@kindex mouse-1
@item mouse-2
@itemx mouse-1
On links, @kbd{mouse-1} and @kbd{mouse-2} will open the link just as @kbd{C-c
C-o} would.
@c
@kindex mouse-3
@item mouse-3
@vindex org-display-internal-link-with-indirect-buffer
Like @kbd{mouse-2}, but force file links to be opened with Emacs, and
internal links to be displayed in another window@footnote{See the
option @code{org-display-internal-link-with-indirect-buffer}}.
@c
@orgcmd{C-c C-x C-v,org-toggle-inline-images}
@cindex inlining images
@cindex images, inlining
@vindex org-startup-with-inline-images
@cindex @code{inlineimages}, STARTUP keyword
@cindex @code{noinlineimages}, STARTUP keyword
Toggle the inline display of linked images.  Normally this will only inline
images that have no description part in the link, i.e., images that will also
be inlined during export.  When called with a prefix argument, also display
images that do have a link description.  You can ask for inline images to be
displayed at startup by configuring the variable
@code{org-startup-with-inline-images}@footnote{with corresponding
@code{#+STARTUP} keywords @code{inlineimages} and @code{noinlineimages}}.
@orgcmd{C-c %,org-mark-ring-push}
@cindex mark ring
Push the current position onto the mark ring, to be able to return
easily.  Commands following an internal link do this automatically.
@c
@orgcmd{C-c &,org-mark-ring-goto}
@cindex links, returning to
Jump back to a recorded position.  A position is recorded by the
commands following internal links, and by @kbd{C-c %}.  Using this
command several times in direct succession moves through a ring of
previously recorded positions.
@c
@orgcmdkkcc{C-c C-x C-n,C-c C-x C-p,org-next-link,org-previous-link}
@cindex links, finding next/previous
Move forward/backward to the next link in the buffer.  At the limit of
the buffer, the search fails once, and then wraps around.  The key
bindings for this are really too long; you might want to bind this also
to @kbd{C-n} and @kbd{C-p}
@lisp
(add-hook 'org-load-hook
  (lambda ()
    (define-key org-mode-map "\C-n" 'org-next-link)
    (define-key org-mode-map "\C-p" 'org-previous-link)))
@end lisp
@end table

@node Using links outside Org
@section Using links outside Org

You can insert and follow links that have Org syntax not only in
Org, but in any Emacs buffer.  For this, you should create two
global commands, like this (please select suitable global keys
yourself):

@lisp
(global-set-key "\C-c L" 'org-insert-link-global)
(global-set-key "\C-c o" 'org-open-at-point-global)
@end lisp

@node Link abbreviations
@section Link abbreviations
@cindex link abbreviations
@cindex abbreviation, links

Long URLs can be cumbersome to type, and often many similar links are
needed in a document.  For this you can use link abbreviations.  An
abbreviated link looks like this

@example
[[linkword:tag][description]]
@end example

@noindent
@vindex org-link-abbrev-alist
where the tag is optional.
The @i{linkword} must be a word, starting with a letter, followed by
letters, numbers, @samp{-}, and @samp{_}.  Abbreviations are resolved
according to the information in the variable @code{org-link-abbrev-alist}
that relates the linkwords to replacement text.  Here is an example:

@smalllisp
@group
(setq org-link-abbrev-alist
  '(("bugzilla"  . "http://10.1.2.9/bugzilla/show_bug.cgi?id=")
    ("url-to-ja" . "http://translate.google.fr/translate?sl=en&tl=ja&u=%h")
    ("google"    . "http://www.google.com/search?q=")
    ("gmap"      . "http://maps.google.com/maps?q=%s")
    ("omap"      . "http://nominatim.openstreetmap.org/search?q=%s&polygon=1")
    ("ads"       . "http://adsabs.harvard.edu/cgi-bin/nph-abs_connect?author=%s&db_key=AST")))
@end group
@end smalllisp

If the replacement text contains the string @samp{%s}, it will be
replaced with the tag.  Using @samp{%h} instead of @samp{%s} will
url-encode the tag (see the example above, where we need to encode
the URL parameter.)  Using @samp{%(my-function)} will pass the tag
to a custom function, and replace it by the resulting string.

If the replacement text doesn't contain any specifier, the tag will simply be
appended in order to create the link.

Instead of a string, you may also specify a function that will be
called with the tag as the only argument to create the link.

With the above setting, you could link to a specific bug with
@code{[[bugzilla:129]]}, search the web for @samp{OrgMode} with
@code{[[google:OrgMode]]}, show the map location of the Free Software
Foundation @code{[[gmap:51 Franklin Street, Boston]]} or of Carsten office
@code{[[omap:Science Park 904, Amsterdam, The Netherlands]]} and find out
what the Org author is doing besides Emacs hacking with
@code{[[ads:Dominik,C]]}.

If you need special abbreviations just for a single Org buffer, you
can define them in the file with

@cindex @code{#+LINK}
@example
#+LINK: bugzilla  http://10.1.2.9/bugzilla/show_bug.cgi?id=
#+LINK: google    http://www.google.com/search?q=%s
@end example

@noindent
In-buffer completion (@pxref{Completion}) can be used after @samp{[} to
complete link abbreviations.  You may also define a function that implements
special (e.g., completion) support for inserting such a link with @kbd{C-c
C-l}.  Such a function should not accept any arguments, and return the full
link with prefix.  You can add a completion function to a link like this:

@lisp
(org-link-set-parameters ``type'' :complete #'some-function)
@end lisp


@node Search options
@section Search options in file links
@cindex search option in file links
@cindex file links, searching

File links can contain additional information to make Emacs jump to a
particular location in the file when following a link.  This can be a
line number or a search option after a double@footnote{For backward
compatibility, line numbers can also follow a single colon.} colon.  For
example, when the command @kbd{C-c l} creates a link (@pxref{Handling
links}) to a file, it encodes the words in the current line as a search
string that can be used to find this line back later when following the
link with @kbd{C-c C-o}.

Here is the syntax of the different ways to attach a search to a file
link, together with an explanation:

@example
[[file:~/code/main.c::255]]
[[file:~/xx.org::My Target]]
[[file:~/xx.org::*My Target]]
[[file:~/xx.org::#my-custom-id]]
[[file:~/xx.org::/regexp/]]
@end example

@table @code
@item 255
Jump to line 255.
@item My Target
Search for a link target @samp{<<My Target>>}, or do a text search for
@samp{my target}, similar to the search in internal links, see
@ref{Internal links}.  In HTML export (@pxref{HTML export}), such a file
link will become an HTML reference to the corresponding named anchor in
the linked file.
@item *My Target
In an Org file, restrict search to headlines.
@item #my-custom-id
Link to a heading with a @code{CUSTOM_ID} property
@item /regexp/
Do a regular expression search for @code{regexp}.  This uses the Emacs
command @code{occur} to list all matches in a separate window.  If the
target file is in Org mode, @code{org-occur} is used to create a
sparse tree with the matches.
@c If the target file is a directory,
@c @code{grep} will be used to search all files in the directory.
@end table

As a degenerate case, a file link with an empty file name can be used
to search the current file.  For example, @code{[[file:::find me]]} does
a search for @samp{find me} in the current file, just as
@samp{[[find me]]} would.

@node Custom searches
@section Custom Searches
@cindex custom search strings
@cindex search strings, custom

The default mechanism for creating search strings and for doing the
actual search related to a file link may not work correctly in all
cases.  For example, Bib@TeX{} database files have many entries like
@samp{year="1993"} which would not result in good search strings,
because the only unique identification for a Bib@TeX{} entry is the
citation key.

@vindex org-create-file-search-functions
@vindex org-execute-file-search-functions
If you come across such a problem, you can write custom functions to set
the right search string for a particular file type, and to do the search
for the string in the file.  Using @code{add-hook}, these functions need
to be added to the hook variables
@code{org-create-file-search-functions} and
@code{org-execute-file-search-functions}.  See the docstring for these
variables for more information.  Org actually uses this mechanism
for Bib@TeX{} database files, and you can use the corresponding code as
an implementation example.  See the file @file{org-bibtex.el}.

@node TODO items
@chapter TODO items
@cindex TODO items

Org mode does not maintain TODO lists as separate documents@footnote{Of
course, you can make a document that contains only long lists of TODO items,
but this is not required.}.  Instead, TODO items are an integral part of the
notes file, because TODO items usually come up while taking notes!  With Org
mode, simply mark any entry in a tree as being a TODO item.  In this way,
information is not duplicated, and the entire context from which the TODO
item emerged is always present.

Of course, this technique for managing TODO items scatters them
throughout your notes file.  Org mode compensates for this by providing
methods to give you an overview of all the things that you have to do.

@menu
* TODO basics::                 Marking and displaying TODO entries
* TODO extensions::             Workflow and assignments
* Progress logging::            Dates and notes for progress
* Priorities::                  Some things are more important than others
* Breaking down tasks::         Splitting a task into manageable pieces
* Checkboxes::                  Tick-off lists
@end menu

@node TODO basics
@section Basic TODO functionality

Any headline becomes a TODO item when it starts with the word
@samp{TODO}, for example:

@example
*** TODO Write letter to Sam Fortune
@end example

@noindent
The most important commands to work with TODO entries are:

@table @kbd
@orgcmd{C-c C-t,org-todo}
@cindex cycling, of TODO states
@vindex org-use-fast-todo-selection

Rotate the TODO state of the current item among

@example
,-> (unmarked) -> TODO -> DONE --.
'--------------------------------'
@end example

If TODO keywords have fast access keys (see @ref{Fast access to TODO
states}), you will be prompted for a TODO keyword through the fast selection
interface; this is the default behavior when
@code{org-use-fast-todo-selection} is non-@code{nil}.

The same rotation can also be done ``remotely'' from agenda buffers with the
@kbd{t} command key (@pxref{Agenda commands}).

@orgkey{C-u C-c C-t}
When TODO keywords have no selection keys, select a specific keyword using
completion; otherwise force cycling through TODO states with no prompt.  When
@code{org-use-fast-todo-selection} is set to @code{prefix}, use the fast
selection interface.

@kindex S-RIGHT
@kindex S-LEFT
@item S-@key{RIGHT} @ @r{/} @ S-@key{LEFT}
@vindex org-treat-S-cursor-todo-selection-as-state-change
Select the following/preceding TODO state, similar to cycling.  Useful
mostly if more than two TODO states are possible (@pxref{TODO
extensions}).  See also @ref{Conflicts}, for a discussion of the interaction
with @code{shift-selection-mode}.  See also the variable
@code{org-treat-S-cursor-todo-selection-as-state-change}.
@orgcmd{C-c / t,org-show-todo-tree}
@cindex sparse tree, for TODO
@vindex org-todo-keywords
View TODO items in a @emph{sparse tree} (@pxref{Sparse trees}).  Folds the
entire buffer, but shows all TODO items (with not-DONE state) and the
headings hierarchy above them.  With a prefix argument (or by using @kbd{C-c
/ T}), search for a specific TODO@.  You will be prompted for the keyword,
and you can also give a list of keywords like @code{KWD1|KWD2|...} to list
entries that match any one of these keywords.  With a numeric prefix argument
N, show the tree for the Nth keyword in the option @code{org-todo-keywords}.
With two prefix arguments, find all TODO states, both un-done and done.
@orgcmd{C-c a t,org-todo-list}
Show the global TODO list.  Collects the TODO items (with not-DONE states)
from all agenda files (@pxref{Agenda views}) into a single buffer.  The new
buffer will be in @code{agenda-mode}, which provides commands to examine and
manipulate the TODO entries from the new buffer (@pxref{Agenda commands}).
@xref{Global TODO list}, for more information.
@orgcmd{S-M-@key{RET},org-insert-todo-heading}
Insert a new TODO entry below the current one.
@end table

@noindent
@vindex org-todo-state-tags-triggers
Changing a TODO state can also trigger tag changes.  See the docstring of the
option @code{org-todo-state-tags-triggers} for details.

@node TODO extensions
@section Extended use of TODO keywords
@cindex extended TODO keywords

@vindex org-todo-keywords
By default, marked TODO entries have one of only two states: TODO and
DONE@.  Org mode allows you to classify TODO items in more complex ways
with @emph{TODO keywords} (stored in @code{org-todo-keywords}).  With
special setup, the TODO keyword system can work differently in different
files.

Note that @i{tags} are another way to classify headlines in general and
TODO items in particular (@pxref{Tags}).

@menu
* Workflow states::             From TODO to DONE in steps
* TODO types::                  I do this, Fred does the rest
* Multiple sets in one file::   Mixing it all, and still finding your way
* Fast access to TODO states::  Single letter selection of a state
* Per-file keywords::           Different files, different requirements
* Faces for TODO keywords::     Highlighting states
* TODO dependencies::           When one task needs to wait for others
@end menu

@node Workflow states
@subsection TODO keywords as workflow states
@cindex TODO workflow
@cindex workflow states as TODO keywords

You can use TODO keywords to indicate different @emph{sequential} states
in the process of working on an item, for example@footnote{Changing
this variable only becomes effective after restarting Org mode in a
buffer.}:

@lisp
(setq org-todo-keywords
  '((sequence "TODO" "FEEDBACK" "VERIFY" "|" "DONE" "DELEGATED")))
@end lisp

The vertical bar separates the TODO keywords (states that @emph{need
action}) from the DONE states (which need @emph{no further action}).  If
you don't provide the separator bar, the last state is used as the DONE
state.
@cindex completion, of TODO keywords
With this setup, the command @kbd{C-c C-t} will cycle an entry from TODO
to FEEDBACK, then to VERIFY, and finally to DONE and DELEGATED@.  You may
also use a numeric prefix argument to quickly select a specific state.  For
example @kbd{C-3 C-c C-t} will change the state immediately to VERIFY@.
Or you can use @kbd{S-@key{LEFT}} to go backward through the sequence.  If you
define many keywords, you can use in-buffer completion
(@pxref{Completion}) or even a special one-key selection scheme
(@pxref{Fast access to TODO states}) to insert these words into the
buffer.  Changing a TODO state can be logged with a timestamp, see
@ref{Tracking TODO state changes}, for more information.

@node TODO types
@subsection TODO keywords as types
@cindex TODO types
@cindex names as TODO keywords
@cindex types as TODO keywords

The second possibility is to use TODO keywords to indicate different
@emph{types} of action items.  For example, you might want to indicate
that items are for ``work'' or ``home''.  Or, when you work with several
people on a single project, you might want to assign action items
directly to persons, by using their names as TODO keywords.  This would
be set up like this:

@lisp
(setq org-todo-keywords '((type "Fred" "Sara" "Lucy" "|" "DONE")))
@end lisp

In this case, different keywords do not indicate a sequence, but rather
different types.  So the normal work flow would be to assign a task to
a person, and later to mark it DONE@.  Org mode supports this style by
adapting the workings of the command @kbd{C-c C-t}@footnote{This is also true
for the @kbd{t} command in the agenda buffers.}.  When used several times in
succession, it will still cycle through all names, in order to first select
the right type for a task.  But when you return to the item after some time
and execute @kbd{C-c C-t} again, it will switch from any name directly to
DONE@.  Use prefix arguments or completion to quickly select a specific name.
You can also review the items of a specific TODO type in a sparse tree by
using a numeric prefix to @kbd{C-c / t}.  For example, to see all things Lucy
has to do, you would use @kbd{C-3 C-c / t}.  To collect Lucy's items from all
agenda files into a single buffer, you would use the numeric prefix argument
as well when creating the global TODO list: @kbd{C-3 C-c a t}.

@node Multiple sets in one file
@subsection Multiple keyword sets in one file
@cindex TODO keyword sets

Sometimes you may want to use different sets of TODO keywords in
parallel.  For example, you may want to have the basic
@code{TODO}/@code{DONE}, but also a workflow for bug fixing, and a
separate state indicating that an item has been canceled (so it is not
DONE, but also does not require action).  Your setup would then look
like this:

@lisp
(setq org-todo-keywords
      '((sequence "TODO" "|" "DONE")
        (sequence "REPORT" "BUG" "KNOWNCAUSE" "|" "FIXED")
        (sequence "|" "CANCELED")))
@end lisp

The keywords should all be different, this helps Org mode to keep track
of which subsequence should be used for a given entry.  In this setup,
@kbd{C-c C-t} only operates within a subsequence, so it switches from
@code{DONE} to (nothing) to @code{TODO}, and from @code{FIXED} to
(nothing) to @code{REPORT}.  Therefore you need a mechanism to initially
select the correct sequence.  Besides the obvious ways like typing a
keyword or using completion, you may also apply the following commands:

@table @kbd
@kindex C-S-RIGHT
@kindex C-S-LEFT
@kindex C-u C-u C-c C-t
@item C-u C-u C-c C-t
@itemx C-S-@key{RIGHT}
@itemx C-S-@key{LEFT}
These keys jump from one TODO subset to the next.  In the above example,
@kbd{C-u C-u C-c C-t} or @kbd{C-S-@key{RIGHT}} would jump from @code{TODO} or
@code{DONE} to @code{REPORT}, and any of the words in the second row to
@code{CANCELED}.  Note that the @kbd{C-S-} key binding conflict with
@code{shift-selection-mode} (@pxref{Conflicts}).
@kindex S-RIGHT
@kindex S-LEFT
@item S-@key{RIGHT}
@itemx S-@key{LEFT}
@kbd{S-@key{LEFT}} and @kbd{S-@key{RIGHT}} and walk through @emph{all}
keywords from all sets, so for example @kbd{S-@key{RIGHT}} would switch
from @code{DONE} to @code{REPORT} in the example above.  See also
@ref{Conflicts}, for a discussion of the interaction with
@code{shift-selection-mode}.
@end table

@node Fast access to TODO states
@subsection Fast access to TODO states

If you would like to quickly change an entry to an arbitrary TODO state
instead of cycling through the states, you can set up keys for single-letter
access to the states.  This is done by adding the selection character after
each keyword, in parentheses@footnote{All characters are allowed except
@code{@@^!}, which have a special meaning here.}.  For example:

@lisp
(setq org-todo-keywords
      '((sequence "TODO(t)" "|" "DONE(d)")
        (sequence "REPORT(r)" "BUG(b)" "KNOWNCAUSE(k)" "|" "FIXED(f)")
        (sequence "|" "CANCELED(c)")))
@end lisp

@vindex org-fast-tag-selection-include-todo
If you then press @kbd{C-c C-t} followed by the selection key, the entry will
be switched to this state.  @kbd{@key{SPC}} can be used to remove any TODO
keyword from an entry.@footnote{Check also the option
@code{org-fast-tag-selection-include-todo}, it allows you to change the TODO
state through the tags interface (@pxref{Setting tags}), in case you like to
mingle the two concepts.  Note that this means you need to come up with
unique keys across both sets of keywords.}

@node Per-file keywords
@subsection Setting up keywords for individual files
@cindex keyword options
@cindex per-file keywords
@cindex @code{#+TODO}
@cindex @code{#+TYP_TODO}
@cindex @code{#+SEQ_TODO}

It can be very useful to use different aspects of the TODO mechanism in
different files.  For file-local settings, you need to add special lines to
the file which set the keywords and interpretation for that file only.  For
example, to set one of the two examples discussed above, you need one of the
following lines anywhere in the file:

@example
#+TODO: TODO FEEDBACK VERIFY | DONE CANCELED
@end example
@noindent (you may also write @code{#+SEQ_TODO} to be explicit about the
interpretation, but it means the same as @code{#+TODO}), or
@example
#+TYP_TODO: Fred Sara Lucy Mike | DONE
@end example

A setup for using several sets in parallel would be:

@example
#+TODO: TODO | DONE
#+TODO: REPORT BUG KNOWNCAUSE | FIXED
#+TODO: | CANCELED
@end example

@cindex completion, of option keywords
@kindex M-TAB
@noindent To make sure you are using the correct keyword, type
@samp{#+} into the buffer and then use @kbd{M-@key{TAB}} completion.

@cindex DONE, final TODO keyword
Remember that the keywords after the vertical bar (or the last keyword
if no bar is there) must always mean that the item is DONE (although you
may use a different word).  After changing one of these lines, use
@kbd{C-c C-c} with the cursor still in the line to make the changes
known to Org mode@footnote{Org mode parses these lines only when
Org mode is activated after visiting a file.  @kbd{C-c C-c} with the
cursor in a line starting with @samp{#+} is simply restarting Org mode
for the current buffer.}.

@node Faces for TODO keywords
@subsection Faces for TODO keywords
@cindex faces, for TODO keywords

@vindex org-todo @r{(face)}
@vindex org-done @r{(face)}
@vindex org-todo-keyword-faces
Org mode highlights TODO keywords with special faces: @code{org-todo}
for keywords indicating that an item still has to be acted upon, and
@code{org-done} for keywords indicating that an item is finished.  If
you are using more than 2 different states, you might want to use
special faces for some of them.  This can be done using the option
@code{org-todo-keyword-faces}.  For example:

@lisp
@group
(setq org-todo-keyword-faces
      '(("TODO" . org-warning) ("STARTED" . "yellow")
        ("CANCELED" . (:foreground "blue" :weight bold))))
@end group
@end lisp

While using a list with face properties as shown for CANCELED @emph{should}
work, this does not always seem to be the case.  If necessary, define a
special face and use that.  A string is interpreted as a color.  The option
@code{org-faces-easy-properties} determines if that color is interpreted as a
foreground or a background color.

@node TODO dependencies
@subsection TODO dependencies
@cindex TODO dependencies
@cindex dependencies, of TODO states
@cindex TODO dependencies, NOBLOCKING

@vindex org-enforce-todo-dependencies
@cindex property, @code{ORDERED}
The structure of Org files (hierarchy and lists) makes it easy to define TODO
dependencies.  Usually, a parent TODO task should not be marked DONE until
all subtasks (defined as children tasks) are marked as DONE@.  And sometimes
there is a logical sequence to a number of (sub)tasks, so that one task
cannot be acted upon before all siblings above it are done.  If you customize
the option @code{org-enforce-todo-dependencies}, Org will block entries
from changing state to DONE while they have children that are not DONE@.
Furthermore, if an entry has a property @code{ORDERED}, each of its children
will be blocked until all earlier siblings are marked DONE@.  Here is an
example:

@example
* TODO Blocked until (two) is done
** DONE one
** TODO two

* Parent
  :PROPERTIES:
  :ORDERED: t
  :END:
** TODO a
** TODO b, needs to wait for (a)
** TODO c, needs to wait for (a) and (b)
@end example

You can ensure an entry is never blocked by using the @code{NOBLOCKING}
property:

@example
* This entry is never blocked
  :PROPERTIES:
  :NOBLOCKING: t
  :END:
@end example

@table @kbd
@orgcmd{C-c C-x o,org-toggle-ordered-property}
@vindex org-track-ordered-property-with-tag
@cindex property, @code{ORDERED}
Toggle the @code{ORDERED} property of the current entry.  A property is used
for this behavior because this should be local to the current entry, not
inherited like a tag.  However, if you would like to @i{track} the value of
this property with a tag for better visibility, customize the option
@code{org-track-ordered-property-with-tag}.
@orgkey{C-u C-u C-u C-c C-t}
Change TODO state, circumventing any state blocking.
@end table

@vindex org-agenda-dim-blocked-tasks
If you set the option @code{org-agenda-dim-blocked-tasks}, TODO entries
that cannot be closed because of such dependencies will be shown in a dimmed
font or even made invisible in agenda views (@pxref{Agenda views}).

@cindex checkboxes and TODO dependencies
@vindex org-enforce-todo-dependencies
You can also block changes of TODO states by looking at checkboxes
(@pxref{Checkboxes}).  If you set the option
@code{org-enforce-todo-checkbox-dependencies}, an entry that has unchecked
checkboxes will be blocked from switching to DONE.

If you need more complex dependency structures, for example dependencies
between entries in different trees or files, check out the contributed
module @file{org-depend.el}.

@page
@node Progress logging
@section Progress logging
@cindex progress logging
@cindex logging, of progress

Org mode can automatically record a timestamp and possibly a note when
you mark a TODO item as DONE, or even each time you change the state of
a TODO item.  This system is highly configurable; settings can be on a
per-keyword basis and can be localized to a file or even a subtree.  For
information on how to clock working time for a task, see @ref{Clocking
work time}.

@menu
* Closing items::               When was this entry marked DONE?
* Tracking TODO state changes::  When did the status change?
* Tracking your habits::        How consistent have you been?
@end menu

@node Closing items
@subsection Closing items

The most basic logging is to keep track of @emph{when} a certain TODO
item was finished.  This is achieved with@footnote{The corresponding
in-buffer setting is: @code{#+STARTUP: logdone}}

@lisp
(setq org-log-done 'time)
@end lisp

@vindex org-closed-keep-when-no-todo
@noindent
Then each time you turn an entry from a TODO (not-done) state into any of the
DONE states, a line @samp{CLOSED: [timestamp]} will be inserted just after
the headline.  If you turn the entry back into a TODO item through further
state cycling, that line will be removed again.  If you turn the entry back
to a non-TODO state (by pressing @kbd{C-c C-t @key{SPC}} for example), that line
will also be removed, unless you set @code{org-closed-keep-when-no-todo} to
non-@code{nil}.  If you want to record a note along with the timestamp,
use@footnote{The corresponding in-buffer setting is: @code{#+STARTUP:
lognotedone}.}

@lisp
(setq org-log-done 'note)
@end lisp

@noindent
You will then be prompted for a note, and that note will be stored below
the entry with a @samp{Closing Note} heading.

@node Tracking TODO state changes
@subsection Tracking TODO state changes
@cindex drawer, for state change recording

@vindex org-log-states-order-reversed
@vindex org-log-into-drawer
@cindex property, @code{LOG_INTO_DRAWER}
When TODO keywords are used as workflow states (@pxref{Workflow states}), you
might want to keep track of when a state change occurred and maybe take a
note about this change.  You can either record just a timestamp, or a
time-stamped note for a change.  These records will be inserted after the
headline as an itemized list, newest first@footnote{See the option
@code{org-log-states-order-reversed}}.  When taking a lot of notes, you might
want to get the notes out of the way into a drawer (@pxref{Drawers}).
Customize @code{org-log-into-drawer} to get this behavior---the recommended
drawer for this is called @code{LOGBOOK}@footnote{Note that the
@code{LOGBOOK} drawer is unfolded when pressing @kbd{@key{SPC}} in the agenda to
show an entry---use @kbd{C-u @key{SPC}} to keep it folded here}.  You can also
overrule the setting of this variable for a subtree by setting a
@code{LOG_INTO_DRAWER} property.

Since it is normally too much to record a note for every state, Org mode
expects configuration on a per-keyword basis for this.  This is achieved by
adding special markers @samp{!} (for a timestamp) or @samp{@@} (for a note
with timestamp) in parentheses after each keyword.  For example, with the
setting

@lisp
(setq org-todo-keywords
  '((sequence "TODO(t)" "WAIT(w@@/!)" "|" "DONE(d!)" "CANCELED(c@@)")))
@end lisp

To record a timestamp without a note for TODO keywords configured with
@samp{@@}, just type @kbd{C-c C-c} to enter a blank note when prompted.

@noindent
@vindex org-log-done
You not only define global TODO keywords and fast access keys, but also
request that a time is recorded when the entry is set to
DONE@footnote{It is possible that Org mode will record two timestamps
when you are using both @code{org-log-done} and state change logging.
However, it will never prompt for two notes---if you have configured
both, the state change recording note will take precedence and cancel
the @samp{Closing Note}.}, and that a note is recorded when switching to
WAIT or CANCELED@.  The setting for WAIT is even more special: the
@samp{!} after the slash means that in addition to the note taken when
entering the state, a timestamp should be recorded when @i{leaving} the
WAIT state, if and only if the @i{target} state does not configure
logging for entering it.  So it has no effect when switching from WAIT
to DONE, because DONE is configured to record a timestamp only.  But
when switching from WAIT back to TODO, the @samp{/!} in the WAIT
setting now triggers a timestamp even though TODO has no logging
configured.

You can use the exact same syntax for setting logging preferences local
to a buffer:
@example
#+TODO: TODO(t) WAIT(w@@/!) | DONE(d!) CANCELED(c@@)
@end example

@cindex property, @code{LOGGING}
In order to define logging settings that are local to a subtree or a single
item, define a @code{LOGGING} property in this entry.  Any non-empty
@code{LOGGING} property resets all logging settings to @code{nil}.  You may
then turn on logging for this specific tree using @code{#+STARTUP} keywords
like @code{lognotedone} or @code{logrepeat}, as well as adding state specific
settings like @code{TODO(!)}.  For example

@example
* TODO Log each state with only a time
  :PROPERTIES:
  :LOGGING: TODO(!) WAIT(!) DONE(!) CANCELED(!)
  :END:
* TODO Only log when switching to WAIT, and when repeating
  :PROPERTIES:
  :LOGGING: WAIT(@@) logrepeat
  :END:
* TODO No logging at all
  :PROPERTIES:
  :LOGGING: nil
  :END:
@end example

@node Tracking your habits
@subsection Tracking your habits
@cindex habits

Org has the ability to track the consistency of a special category of TODOs,
called ``habits''.  A habit has the following properties:

@enumerate
@item
You have enabled the @code{habits} module by customizing @code{org-modules}.
@item
The habit is a TODO item, with a TODO keyword representing an open state.
@item
The property @code{STYLE} is set to the value @code{habit}.
@item
The TODO has a scheduled date, usually with a @code{.+} style repeat
interval.  A @code{++} style may be appropriate for habits with time
constraints, e.g., must be done on weekends, or a @code{+} style for an
unusual habit that can have a backlog, e.g., weekly reports.
@item
The TODO may also have minimum and maximum ranges specified by using the
syntax @samp{.+2d/3d}, which says that you want to do the task at least every
three days, but at most every two days.
@item
You must also have state logging for the @code{DONE} state enabled
(@pxref{Tracking TODO state changes}), in order for historical data to be
represented in the consistency graph.  If it is not enabled it is not an
error, but the consistency graphs will be largely meaningless.
@end enumerate

To give you an idea of what the above rules look like in action, here's an
actual habit with some history:

@example
** TODO Shave
   SCHEDULED: <2009-10-17 Sat .+2d/4d>
   :PROPERTIES:
   :STYLE:    habit
   :LAST_REPEAT: [2009-10-19 Mon 00:36]
   :END:
   - State "DONE"       from "TODO"       [2009-10-15 Thu]
   - State "DONE"       from "TODO"       [2009-10-12 Mon]
   - State "DONE"       from "TODO"       [2009-10-10 Sat]
   - State "DONE"       from "TODO"       [2009-10-04 Sun]
   - State "DONE"       from "TODO"       [2009-10-02 Fri]
   - State "DONE"       from "TODO"       [2009-09-29 Tue]
   - State "DONE"       from "TODO"       [2009-09-25 Fri]
   - State "DONE"       from "TODO"       [2009-09-19 Sat]
   - State "DONE"       from "TODO"       [2009-09-16 Wed]
   - State "DONE"       from "TODO"       [2009-09-12 Sat]
@end example

What this habit says is: I want to shave at most every 2 days (given by the
@code{SCHEDULED} date and repeat interval) and at least every 4 days.  If
today is the 15th, then the habit first appears in the agenda on Oct 17,
after the minimum of 2 days has elapsed, and will appear overdue on Oct 19,
after four days have elapsed.

What's really useful about habits is that they are displayed along with a
consistency graph, to show how consistent you've been at getting that task
done in the past.  This graph shows every day that the task was done over the
past three weeks, with colors for each day.  The colors used are:

@table @code
@item Blue
If the task wasn't to be done yet on that day.
@item Green
If the task could have been done on that day.
@item Yellow
If the task was going to be overdue the next day.
@item Red
If the task was overdue on that day.
@end table

In addition to coloring each day, the day is also marked with an asterisk if
the task was actually done that day, and an exclamation mark to show where
the current day falls in the graph.

There are several configuration variables that can be used to change the way
habits are displayed in the agenda.

@table @code
@item org-habit-graph-column
The buffer column at which the consistency graph should be drawn.  This will
overwrite any text in that column, so it is a good idea to keep your habits'
titles brief and to the point.
@item org-habit-preceding-days
The amount of history, in days before today, to appear in consistency graphs.
@item org-habit-following-days
The number of days after today that will appear in consistency graphs.
@item org-habit-show-habits-only-for-today
If non-@code{nil}, only show habits in today's agenda view.  This is set to true by
default.
@end table

Lastly, pressing @kbd{K} in the agenda buffer will cause habits to
temporarily be disabled and they won't appear at all.  Press @kbd{K} again to
bring them back.  They are also subject to tag filtering, if you have habits
which should only be done in certain contexts, for example.

@node Priorities
@section Priorities
@cindex priorities

If you use Org mode extensively, you may end up with enough TODO items that
it starts to make sense to prioritize them.  Prioritizing can be done by
placing a @emph{priority cookie} into the headline of a TODO item, like this

@example
*** TODO [#A] Write letter to Sam Fortune
@end example

@noindent
@vindex org-priority-faces
By default, Org mode supports three priorities: @samp{A}, @samp{B}, and
@samp{C}.  @samp{A} is the highest priority.  An entry without a cookie is
treated just like priority @samp{B}.  Priorities make a difference only for
sorting in the agenda (@pxref{Weekly/daily agenda}); outside the agenda, they
have no inherent meaning to Org mode.  The cookies can be highlighted with
special faces by customizing @code{org-priority-faces}.

Priorities can be attached to any outline node; they do not need to be TODO
items.

@table @kbd
@item @kbd{C-c ,}
@kindex C-c ,
@findex org-priority
Set the priority of the current headline (@command{org-priority}).  The
command prompts for a priority character @samp{A}, @samp{B} or @samp{C}.
When you press @key{SPC} instead, the priority cookie is removed from the
headline.  The priorities can also be changed ``remotely'' from the agenda
buffer with the @kbd{,} command (@pxref{Agenda commands}).
@c
@orgcmdkkcc{S-@key{UP},S-@key{DOWN},org-priority-up,org-priority-down}
@vindex org-priority-start-cycle-with-default
Increase/decrease priority of current headline@footnote{See also the option
@code{org-priority-start-cycle-with-default}.}.  Note that these keys are
also used to modify timestamps (@pxref{Creating timestamps}).  See also
@ref{Conflicts}, for a discussion of the interaction with
@code{shift-selection-mode}.
@end table

@vindex org-highest-priority
@vindex org-lowest-priority
@vindex org-default-priority
You can change the range of allowed priorities by setting the options
@code{org-highest-priority}, @code{org-lowest-priority}, and
@code{org-default-priority}.  For an individual buffer, you may set
these values (highest, lowest, default) like this (please make sure that
the highest priority is earlier in the alphabet than the lowest
priority):

@cindex @code{#+PRIORITIES}
@example
#+PRIORITIES: A C B
@end example

@node Breaking down tasks
@section Breaking tasks down into subtasks
@cindex tasks, breaking down
@cindex statistics, for TODO items

@vindex org-agenda-todo-list-sublevels
It is often advisable to break down large tasks into smaller, manageable
subtasks.  You can do this by creating an outline tree below a TODO item,
with detailed subtasks on the tree@footnote{To keep subtasks out of the
global TODO list, see the @code{org-agenda-todo-list-sublevels}.}.  To keep
the overview over the fraction of subtasks that are already completed, insert
either @samp{[/]} or @samp{[%]} anywhere in the headline.  These cookies will
be updated each time the TODO status of a child changes, or when pressing
@kbd{C-c C-c} on the cookie.  For example:

@example
* Organize Party [33%]
** TODO Call people [1/2]
*** TODO Peter
*** DONE Sarah
** TODO Buy food
** DONE Talk to neighbor
@end example

@cindex property, @code{COOKIE_DATA}
If a heading has both checkboxes and TODO children below it, the meaning of
the statistics cookie become ambiguous.  Set the property
@code{COOKIE_DATA} to either @samp{checkbox} or @samp{todo} to resolve
this issue.

@vindex org-hierarchical-todo-statistics
If you would like to have the statistics cookie count any TODO entries in the
subtree (not just direct children), configure
@code{org-hierarchical-todo-statistics}.  To do this for a single subtree,
include the word @samp{recursive} into the value of the @code{COOKIE_DATA}
property.

@example
* Parent capturing statistics [2/20]
  :PROPERTIES:
  :COOKIE_DATA: todo recursive
  :END:
@end example

If you would like a TODO entry to automatically change to DONE
when all children are done, you can use the following setup:

@example
(defun org-summary-todo (n-done n-not-done)
  "Switch entry to DONE when all subentries are done, to TODO otherwise."
  (let (org-log-done org-log-states)   ; turn off logging
    (org-todo (if (= n-not-done 0) "DONE" "TODO"))))

(add-hook 'org-after-todo-statistics-hook 'org-summary-todo)
@end example


Another possibility is the use of checkboxes to identify (a hierarchy of) a
large number of subtasks (@pxref{Checkboxes}).


@node Checkboxes
@section Checkboxes
@cindex checkboxes

@vindex org-list-automatic-rules
Every item in a plain list@footnote{With the exception of description
lists.  But you can allow it by modifying @code{org-list-automatic-rules}
accordingly.} (@pxref{Plain lists}) can be made into a checkbox by starting
it with the string @samp{[ ]}.  This feature is similar to TODO items
(@pxref{TODO items}), but is more lightweight.  Checkboxes are not included
in the global TODO list, so they are often great to split a task into a
number of simple steps.  Or you can use them in a shopping list.  To toggle a
checkbox, use @kbd{C-c C-c}, or use the mouse (thanks to Piotr Zielinski's
@file{org-mouse.el}).

Here is an example of a checkbox list.

@example
* TODO Organize party [2/4]
  - [-] call people [1/3]
    - [ ] Peter
    - [X] Sarah
    - [ ] Sam
  - [X] order food
  - [ ] think about what music to play
  - [X] talk to the neighbors
@end example

Checkboxes work hierarchically, so if a checkbox item has children that
are checkboxes, toggling one of the children checkboxes will make the
parent checkbox reflect if none, some, or all of the children are
checked.

@cindex statistics, for checkboxes
@cindex checkbox statistics
@cindex property, @code{COOKIE_DATA}
@vindex org-checkbox-hierarchical-statistics
The @samp{[2/4]} and @samp{[1/3]} in the first and second line are cookies
indicating how many checkboxes present in this entry have been checked off,
and the total number of checkboxes present.  This can give you an idea on how
many checkboxes remain, even without opening a folded entry.  The cookies can
be placed into a headline or into (the first line of) a plain list item.
Each cookie covers checkboxes of direct children structurally below the
headline/item on which the cookie appears@footnote{Set the option
@code{org-checkbox-hierarchical-statistics} if you want such cookies to
count all checkboxes below the cookie, not just those belonging to direct
children.}.  You have to insert the cookie yourself by typing either
@samp{[/]} or @samp{[%]}.  With @samp{[/]} you get an @samp{n out of m}
result, as in the examples above.  With @samp{[%]} you get information about
the percentage of checkboxes checked (in the above example, this would be
@samp{[50%]} and @samp{[33%]}, respectively).  In a headline, a cookie can
count either checkboxes below the heading or TODO states of children, and it
will display whatever was changed last.  Set the property @code{COOKIE_DATA}
to either @samp{checkbox} or @samp{todo} to resolve this issue.

@cindex blocking, of checkboxes
@cindex checkbox blocking
@cindex property, @code{ORDERED}
If the current outline node has an @code{ORDERED} property, checkboxes must
be checked off in sequence, and an error will be thrown if you try to check
off a box while there are unchecked boxes above it.

@noindent The following commands work with checkboxes:

@table @kbd
@orgcmd{C-c C-c,org-toggle-checkbox}
Toggle checkbox status or (with prefix arg) checkbox presence at point.  With
a single prefix argument, add an empty checkbox or remove the current
one@footnote{@kbd{C-u C-c C-c} before the @emph{first} bullet in a list with
no checkbox will add checkboxes to the rest of the list.}.  With a double
prefix argument, set it to @samp{[-]}, which is considered to be an
intermediate state.
@orgcmd{C-c C-x C-b,org-toggle-checkbox}
Toggle checkbox status or (with prefix arg) checkbox presence at point.  With
double prefix argument, set it to @samp{[-]}, which is considered to be an
intermediate state.
@itemize @minus
@item
If there is an active region, toggle the first checkbox in the region
and set all remaining boxes to the same status as the first.  With a prefix
arg, add or remove the checkbox for all items in the region.
@item
If the cursor is in a headline, toggle the state of the first checkbox in the
region between this headline and the next---so @emph{not} the entire
subtree---and propagate this new state to all other checkboxes in the same
area.
@item
If there is no active region, just toggle the checkbox at point.
@end itemize
@orgcmd{M-S-@key{RET},org-insert-todo-heading}
Insert a new item with a checkbox.  This works only if the cursor is already
in a plain list item (@pxref{Plain lists}).
@orgcmd{C-c C-x o,org-toggle-ordered-property}
@vindex org-track-ordered-property-with-tag
@cindex property, @code{ORDERED}
Toggle the @code{ORDERED} property of the entry, to toggle if checkboxes must
be checked off in sequence.  A property is used for this behavior because
this should be local to the current entry, not inherited like a tag.
However, if you would like to @i{track} the value of this property with a tag
for better visibility, customize @code{org-track-ordered-property-with-tag}.
@orgcmd{C-c #,org-update-statistics-cookies}
Update the statistics cookie in the current outline entry.  When called with
a @kbd{C-u} prefix, update the entire file.  Checkbox statistic cookies are
updated automatically if you toggle checkboxes with @kbd{C-c C-c} and make
new ones with @kbd{M-S-@key{RET}}.  TODO statistics cookies update when
changing TODO states.  If you delete boxes/entries or add/change them by
hand, use this command to get things back into sync.
@end table

@node Tags
@chapter Tags
@cindex tags
@cindex headline tagging
@cindex matching, tags
@cindex sparse tree, tag based

An excellent way to implement labels and contexts for cross-correlating
information is to assign @i{tags} to headlines.  Org mode has extensive
support for tags.

@vindex org-tag-faces
Every headline can contain a list of tags; they occur at the end of the
headline.  Tags are normal words containing letters, numbers, @samp{_}, and
@samp{@@}.  Tags must be preceded and followed by a single colon, e.g.,
@samp{:work:}.  Several tags can be specified, as in @samp{:work:urgent:}.
Tags will by default be in bold face with the same color as the headline.
You may specify special faces for specific tags using the option
@code{org-tag-faces}, in much the same way as you can for TODO keywords
(@pxref{Faces for TODO keywords}).

@menu
* Tag inheritance::             Tags use the tree structure of the outline
* Setting tags::                How to assign tags to a headline
* Tag hierarchy::               Create a hierarchy of tags
* Tag searches::                Searching for combinations of tags
@end menu

@node Tag inheritance
@section Tag inheritance
@cindex tag inheritance
@cindex inheritance, of tags
@cindex sublevels, inclusion into tags match

@i{Tags} make use of the hierarchical structure of outline trees.  If a
heading has a certain tag, all subheadings will inherit the tag as
well.  For example, in the list

@example
* Meeting with the French group      :work:
** Summary by Frank                  :boss:notes:
*** TODO Prepare slides for him      :action:
@end example

@noindent
the final heading will have the tags @samp{:work:}, @samp{:boss:},
@samp{:notes:}, and @samp{:action:} even though the final heading is not
explicitly marked with all those tags.  You can also set tags that all
entries in a file should inherit just as if these tags were defined in
a hypothetical level zero that surrounds the entire file.  Use a line like
this@footnote{As with all these in-buffer settings, pressing @kbd{C-c C-c}
activates any changes in the line.}:

@cindex @code{#+FILETAGS}
@example
#+FILETAGS: :Peter:Boss:Secret:
@end example

@noindent
@vindex org-use-tag-inheritance
@vindex org-tags-exclude-from-inheritance
To limit tag inheritance to specific tags, use @code{org-tags-exclude-from-inheritance}.
To turn it off entirely, use @code{org-use-tag-inheritance}.

@vindex org-tags-match-list-sublevels
When a headline matches during a tags search while tag inheritance is turned
on, all the sublevels in the same tree will (for a simple match form) match
as well@footnote{This is only true if the search does not involve more
complex tests including properties (@pxref{Property searches}).}.  The list
of matches may then become very long.  If you only want to see the first tags
match in a subtree, configure @code{org-tags-match-list-sublevels} (not
recommended).

@vindex org-agenda-use-tag-inheritance
Tag inheritance is relevant when the agenda search tries to match a tag,
either in the @code{tags} or @code{tags-todo} agenda types.  In other agenda
types, @code{org-use-tag-inheritance} has no effect.  Still, you may want to
have your tags correctly set in the agenda, so that tag filtering works fine,
with inherited tags.  Set @code{org-agenda-use-tag-inheritance} to control
this: the default value includes all agenda types, but setting this to @code{nil}
can really speed up agenda generation.

@node Setting tags
@section Setting tags
@cindex setting tags
@cindex tags, setting

@kindex M-TAB
Tags can simply be typed into the buffer at the end of a headline.
After a colon, @kbd{M-@key{TAB}} offers completion on tags.  There is
also a special command for inserting tags:

@table @kbd
@orgcmd{C-c C-q,org-set-tags-command}
@cindex completion, of tags
@vindex org-tags-column
Enter new tags for the current headline.  Org mode will either offer
completion or a special single-key interface for setting tags, see
below.  After pressing @key{RET}, the tags will be inserted and aligned
to @code{org-tags-column}.  When called with a @kbd{C-u} prefix, all
tags in the current buffer will be aligned to that column, just to make
things look nice.  TAGS are automatically realigned after promotion,
demotion, and TODO state changes (@pxref{TODO basics}).

@orgcmd{C-c C-c,org-set-tags-command}
When the cursor is in a headline, this does the same as @kbd{C-c C-q}.
@end table

@vindex org-tag-alist
Org supports tag insertion based on a @emph{list of tags}.  By
default this list is constructed dynamically, containing all tags
currently used in the buffer.  You may also globally specify a hard list
of tags with the variable @code{org-tag-alist}.  Finally you can set
the default tags for a given file with lines like

@cindex @code{#+TAGS}
@example
#+TAGS: @@work @@home @@tennisclub
#+TAGS: laptop car pc sailboat
@end example

If you have globally defined your preferred set of tags using the
variable @code{org-tag-alist}, but would like to use a dynamic tag list
in a specific file, add an empty TAGS option line to that file:

@example
#+TAGS:
@end example

@vindex org-tag-persistent-alist
If you have a preferred set of tags that you would like to use in every file,
in addition to those defined on a per-file basis by TAGS option lines, then
you may specify a list of tags with the variable
@code{org-tag-persistent-alist}.  You may turn this off on a per-file basis
by adding a @code{#+STARTUP} option line to that file:

@example
#+STARTUP: noptag
@end example

By default Org mode uses the standard minibuffer completion facilities for
entering tags.  However, it also implements another, quicker, tag selection
method called @emph{fast tag selection}.  This allows you to select and
deselect tags with just a single key press.  For this to work well you should
assign unique, case-sensitive, letters to most of your commonly used tags.
You can do this globally by configuring the variable @code{org-tag-alist} in
your Emacs init file.  For example, you may find the need to tag many items
in different files with @samp{:@@home:}.  In this case you can set something
like:

@lisp
(setq org-tag-alist '(("@@work" . ?w) ("@@home" . ?h) ("laptop" . ?l)))
@end lisp

@noindent If the tag is only relevant to the file you are working on, then you
can instead set the TAGS option line as:

@example
#+TAGS: @@work(w)  @@home(h)  @@tennisclub(t)  laptop(l)  pc(p)
@end example

@noindent The tags interface will show the available tags in a splash
window.  If you want to start a new line after a specific tag, insert
@samp{\n} into the tag list

@example
#+TAGS: @@work(w)  @@home(h)  @@tennisclub(t) \n laptop(l)  pc(p)
@end example

@noindent or write them in two lines:

@example
#+TAGS: @@work(w)  @@home(h)  @@tennisclub(t)
#+TAGS: laptop(l)  pc(p)
@end example

@noindent
You can also group together tags that are mutually exclusive by using
braces, as in:

@example
#+TAGS: @{ @@work(w)  @@home(h)  @@tennisclub(t) @}  laptop(l)  pc(p)
@end example

@noindent you indicate that at most one of @samp{@@work}, @samp{@@home},
and @samp{@@tennisclub} should be selected.  Multiple such groups are allowed.

@noindent Don't forget to press @kbd{C-c C-c} with the cursor in one of
these lines to activate any changes.

@noindent
To set these mutually exclusive groups in the variable @code{org-tag-alist},
you must use the dummy tags @code{:startgroup} and @code{:endgroup} instead
of the braces.  Similarly, you can use @code{:newline} to indicate a line
break.  The previous example would be set globally by the following
configuration:

@lisp
(setq org-tag-alist '((:startgroup . nil)
                      ("@@work" . ?w) ("@@home" . ?h)
                      ("@@tennisclub" . ?t)
                      (:endgroup . nil)
                      ("laptop" . ?l) ("pc" . ?p)))
@end lisp

If at least one tag has a selection key then pressing @kbd{C-c C-c} will
automatically present you with a special interface, listing inherited tags,
the tags of the current headline, and a list of all valid tags with
corresponding keys@footnote{Keys will automatically be assigned to tags which
have no configured keys.}.

Pressing keys assigned to tags will add or remove them from the list of tags
in the current line.  Selecting a tag in a group of mutually exclusive tags
will turn off any other tags from that group.

In this interface, you can also use the following special keys:

@table @kbd
@kindex TAB
@item @key{TAB}
Enter a tag in the minibuffer, even if the tag is not in the predefined
list.  You will be able to complete on all tags present in the buffer.
You can also add several tags: just separate them with a comma.

@kindex SPC
@item @key{SPC}
Clear all tags for this line.

@kindex RET
@item @key{RET}
Accept the modified set.

@item C-g
Abort without installing changes.

@item q
If @kbd{q} is not assigned to a tag, it aborts like @kbd{C-g}.

@item !
Turn off groups of mutually exclusive tags.  Use this to (as an
exception) assign several tags from such a group.

@item C-c
Toggle auto-exit after the next change (see below).
If you are using expert mode, the first @kbd{C-c} will display the
selection window.
@end table

@noindent
This method lets you assign tags to a headline with very few keys.  With
the above setup, you could clear the current tags and set @samp{@@home},
@samp{laptop} and @samp{pc} tags with just the following keys: @kbd{C-c
C-c @key{SPC} h l p @key{RET}}.  Switching from @samp{@@home} to
@samp{@@work} would be done with @kbd{C-c C-c w @key{RET}} or
alternatively with @kbd{C-c C-c C-c w}.  Adding the non-predefined tag
@samp{Sarah} could be done with @kbd{C-c C-c @key{TAB} S a r a h
@key{RET} @key{RET}}.

@vindex org-fast-tag-selection-single-key
If you find that most of the time you need only a single key press to
modify your list of tags, set @code{org-fast-tag-selection-single-key}.
Then you no longer have to press @key{RET} to exit fast tag selection---it
will immediately exit after the first change.  If you then occasionally
need more keys, press @kbd{C-c} to turn off auto-exit for the current tag
selection process (in effect: start selection with @kbd{C-c C-c C-c}
instead of @kbd{C-c C-c}).  If you set the variable to the value
@code{expert}, the special window is not even shown for single-key tag
selection, it comes up only when you press an extra @kbd{C-c}.

@node Tag hierarchy
@section Tag hierarchy

@cindex group tags
@cindex tags, groups
@cindex tag hierarchy
Tags can be defined in hierarchies.  A tag can be defined as a @emph{group
tag} for a set of other tags.  The group tag can be seen as the ``broader
term'' for its set of tags.  Defining multiple @emph{group tags} and nesting
them creates a tag hierarchy.

One use-case is to create a taxonomy of terms (tags) that can be used to
classify nodes in a document or set of documents.

When you search for a group tag, it will return matches for all members in
the group and its subgroups.  In an agenda view, filtering by a group tag
will display or hide headlines tagged with at least one of the members of the
group or any of its subgroups.  This makes tag searches and filters even more
flexible.

You can set group tags by using brackets and inserting a colon between the
group tag and its related tags---beware that all whitespaces are mandatory so
that Org can parse this line correctly:

@example
#+TAGS: [ GTD : Control Persp ]
@end example

In this example, @samp{GTD} is the @emph{group tag} and it is related to two
other tags: @samp{Control}, @samp{Persp}.  Defining @samp{Control} and
@samp{Persp} as group tags creates an hierarchy of tags:

@example
#+TAGS: [ Control : Context Task ]
#+TAGS: [ Persp : Vision Goal AOF Project ]
@end example

That can conceptually be seen as a hierarchy of tags:

@example
- GTD
  - Persp
    - Vision
    - Goal
    - AOF
    - Project
  - Control
    - Context
    - Task
@end example

You can use the @code{:startgrouptag}, @code{:grouptags} and
@code{:endgrouptag} keyword directly when setting @code{org-tag-alist}
directly:

@lisp
(setq org-tag-alist '((:startgrouptag)
                      ("GTD")
                      (:grouptags)
                      ("Control")
                      ("Persp")
                      (:endgrouptag)
                      (:startgrouptag)
                      ("Control")
                      (:grouptags)
                      ("Context")
                      ("Task")
                      (:endgrouptag)))
@end lisp

The tags in a group can be mutually exclusive if using the same group syntax
as is used for grouping mutually exclusive tags together; using curly
brackets.

@example
#+TAGS: @{ Context : @@Home @@Work @@Call @}
@end example

When setting @code{org-tag-alist} you can use @code{:startgroup} &
@code{:endgroup} instead of @code{:startgrouptag} & @code{:endgrouptag} to
make the tags mutually exclusive.

Furthermore, the members of a @emph{group tag} can also be regular
expressions, creating the possibility of a more dynamic and rule-based
tag structure.  The regular expressions in the group must be specified
within @{ @}.  Here is an expanded example:

@example
#+TAGS: [ Vision : @{V@@@.+@} ]
#+TAGS: [ Goal : @{G@@@.+@} ]
#+TAGS: [ AOF : @{AOF@@@.+@} ]
#+TAGS: [ Project : @{P@@@.+@} ]
@end example

Searching for the tag @samp{Project} will now list all tags also including
regular expression matches for @samp{P@@@.+}, and similarly for tag searches on
@samp{Vision}, @samp{Goal} and @samp{AOF}.  For example, this would work well
for a project tagged with a common project-identifier, e.g. @samp{P@@2014_OrgTags}.

@kindex C-c C-x q
@vindex org-group-tags
If you want to ignore group tags temporarily, toggle group tags support
with @command{org-toggle-tags-groups}, bound to @kbd{C-c C-x q}.  If you
want to disable tag groups completely, set @code{org-group-tags} to @code{nil}.

@node Tag searches
@section Tag searches
@cindex tag searches
@cindex searching for tags

Once a system of tags has been set up, it can be used to collect related
information into special lists.

@table @kbd
@orgcmdkkc{C-c / m,C-c \\,org-match-sparse-tree}
Create a sparse tree with all headlines matching a tags/property/TODO search.
With a @kbd{C-u} prefix argument, ignore headlines that are not a TODO line.
@xref{Matching tags and properties}.
@orgcmd{C-c a m,org-tags-view}
Create a global list of tag matches from all agenda files.  @xref{Matching
tags and properties}.
@orgcmd{C-c a M,org-tags-view}
@vindex org-tags-match-list-sublevels
Create a global list of tag matches from all agenda files, but check
only TODO items and force checking subitems (see the option
@code{org-tags-match-list-sublevels}).
@end table

These commands all prompt for a match string which allows basic Boolean logic
like @samp{+boss+urgent-project1}, to find entries with tags @samp{boss} and
@samp{urgent}, but not @samp{project1}, or @samp{Kathy|Sally} to find entries
tagged as @samp{Kathy} or @samp{Sally}.  The full syntax of the search string
is rich and allows also matching against TODO keywords, entry levels and
properties.  For a complete description with many examples, see @ref{Matching
tags and properties}.


@node Properties and columns
@chapter Properties and columns
@cindex properties

A property is a key-value pair associated with an entry.  Properties can be
set so they are associated with a single entry, with every entry in a tree,
or with every entry in an Org mode file.

There are two main applications for properties in Org mode.  First,
properties are like tags, but with a value.  Imagine maintaining a file where
you document bugs and plan releases for a piece of software.  Instead of
using tags like @code{:release_1:}, @code{:release_2:}, you can use a
property, say @code{:Release:}, that in different subtrees has different
values, such as @code{1.0} or @code{2.0}.  Second, you can use properties to
implement (very basic) database capabilities in an Org buffer.  Imagine
keeping track of your music CDs, where properties could be things such as the
album, artist, date of release, number of tracks, and so on.

Properties can be conveniently edited and viewed in column view
(@pxref{Column view}).

@menu
* Property syntax::             How properties are spelled out
* Special properties::          Access to other Org mode features
* Property searches::           Matching property values
* Property inheritance::        Passing values down the tree
* Column view::                 Tabular viewing and editing
* Property API::                Properties for Lisp programmers
@end menu

@node Property syntax
@section Property syntax
@cindex property syntax
@cindex drawer, for properties

Properties are key-value pairs.  When they are associated with a single entry
or with a tree they need to be inserted into a special drawer
(@pxref{Drawers}) with the name @code{PROPERTIES}, which has to be located
right below a headline, and its planning line (@pxref{Deadlines and
scheduling}) when applicable.  Each property is specified on a single line,
with the key (surrounded by colons) first, and the value after it.  Keys are
case-insensitive.  Here is an example:

@example
* CD collection
** Classic
*** Goldberg Variations
    :PROPERTIES:
    :Title:     Goldberg Variations
    :Composer:  J.S. Bach
    :Artist:    Glen Gould
    :Publisher: Deutsche Grammophon
    :NDisks:    1
    :END:
@end example

Depending on the value of @code{org-use-property-inheritance}, a property set
this way will either be associated with a single entry, or the subtree
defined by the entry, see @ref{Property inheritance}.

You may define the allowed values for a particular property @samp{:Xyz:}
by setting a property @samp{:Xyz_ALL:}.  This special property is
@emph{inherited}, so if you set it in a level 1 entry, it will apply to
the entire tree.  When allowed values are defined, setting the
corresponding property becomes easier and is less prone to typing
errors.  For the example with the CD collection, we can predefine
publishers and the number of disks in a box like this:

@example
* CD collection
  :PROPERTIES:
  :NDisks_ALL:  1 2 3 4
  :Publisher_ALL: "Deutsche Grammophon" Philips EMI
  :END:
@end example

If you want to set properties that can be inherited by any entry in a
file, use a line like
@cindex property, @code{_ALL}
@cindex @code{#+PROPERTY}
@example
#+PROPERTY: NDisks_ALL 1 2 3 4
@end example

Contrary to properties set from a special drawer, you have to refresh the
buffer with @kbd{C-c C-c} to activate this change.

If you want to add to the value of an existing property, append a @code{+} to
the property name.  The following results in the property @code{var} having
the value ``foo=1 bar=2''.
@cindex property, @code{+}
@example
#+PROPERTY: var  foo=1
#+PROPERTY: var+ bar=2
@end example

It is also possible to add to the values of inherited properties.  The
following results in the @code{genres} property having the value ``Classic
Baroque'' under the @code{Goldberg Variations} subtree.
@cindex property, @code{+}
@example
* CD collection
** Classic
    :PROPERTIES:
    :GENRES: Classic
    :END:
*** Goldberg Variations
    :PROPERTIES:
    :Title:     Goldberg Variations
    :Composer:  J.S. Bach
    :Artist:    Glen Gould
    :Publisher: Deutsche Grammophon
    :NDisks:    1
    :GENRES+:   Baroque
    :END:
@end example
Note that a property can only have one entry per Drawer.

@vindex org-global-properties
Property values set with the global variable
@code{org-global-properties} can be inherited by all entries in all
Org files.

@noindent
The following commands help to work with properties:

@table @kbd
@orgcmd{M-@key{TAB},pcomplete}
After an initial colon in a line, complete property keys.  All keys used
in the current file will be offered as possible completions.
@orgcmd{C-c C-x p,org-set-property}
Set a property.  This prompts for a property name and a value.  If
necessary, the property drawer is created as well.
@item C-u M-x org-insert-drawer @key{RET}
@cindex @code{org-insert-drawer}
Insert a property drawer into the current entry.  The drawer will be
inserted early in the entry, but after the lines with planning
information like deadlines.
@orgcmd{C-c C-c,org-property-action}
With the cursor in a property drawer, this executes property commands.
@orgcmd{C-c C-c s,org-set-property}
Set a property in the current entry.  Both the property and the value
can be inserted using completion.
@orgcmdkkcc{S-@key{RIGHT},S-@key{LEFT},org-property-next-allowed-value,org-property-previous-allowed-value}
Switch property at point to the next/previous allowed value.
@orgcmd{C-c C-c d,org-delete-property}
Remove a property from the current entry.
@orgcmd{C-c C-c D,org-delete-property-globally}
Globally remove a property, from all entries in the current file.
@orgcmd{C-c C-c c,org-compute-property-at-point}
Compute the property at point, using the operator and scope from the
nearest column format definition.
@end table

@node Special properties
@section Special properties
@cindex properties, special

Special properties provide an alternative access method to Org mode features,
like the TODO state or the priority of an entry, discussed in the previous
chapters.  This interface exists so that you can include these states in
a column view (@pxref{Column view}), or to use them in queries.  The
following property names are special and should not be used as keys in the
properties drawer:

@cindex property, special, @code{ALLTAGS}
@cindex property, special, @code{BLOCKED}
@cindex property, special, @code{CLOCKSUM}
@cindex property, special, @code{CLOCKSUM_T}
@cindex property, special, @code{CLOSED}
@cindex property, special, @code{DEADLINE}
@cindex property, special, @code{FILE}
@cindex property, special, @code{ITEM}
@cindex property, special, @code{PRIORITY}
@cindex property, special, @code{SCHEDULED}
@cindex property, special, @code{TAGS}
@cindex property, special, @code{TIMESTAMP}
@cindex property, special, @code{TIMESTAMP_IA}
@cindex property, special, @code{TODO}
@example
ALLTAGS      @r{All tags, including inherited ones.}
BLOCKED      @r{"t" if task is currently blocked by children or siblings.}
CLOCKSUM     @r{The sum of CLOCK intervals in the subtree.  @code{org-clock-sum}}
             @r{must be run first to compute the values in the current buffer.}
CLOCKSUM_T   @r{The sum of CLOCK intervals in the subtree for today.}
             @r{@code{org-clock-sum-today} must be run first to compute the}
             @r{values in the current buffer.}
CLOSED       @r{When was this entry closed?}
DEADLINE     @r{The deadline time string, without the angular brackets.}
FILE         @r{The filename the entry is located in.}
ITEM         @r{The headline of the entry.}
PRIORITY     @r{The priority of the entry, a string with a single letter.}
SCHEDULED    @r{The scheduling timestamp, without the angular brackets.}
TAGS         @r{The tags defined directly in the headline.}
TIMESTAMP    @r{The first keyword-less timestamp in the entry.}
TIMESTAMP_IA @r{The first inactive timestamp in the entry.}
TODO         @r{The TODO keyword of the entry.}
@end example

@node Property searches
@section Property searches
@cindex properties, searching
@cindex searching, of properties

To create sparse trees and special lists with selection based on properties,
the same commands are used as for tag searches (@pxref{Tag searches}).

@table @kbd
@orgcmdkkc{C-c / m,C-c \\,org-match-sparse-tree}
Create a sparse tree with all matching entries.  With a
@kbd{C-u} prefix argument, ignore headlines that are not a TODO line.
@orgcmd{C-c a m,org-tags-view}
Create a global list of tag/property  matches from all agenda files.
@xref{Matching tags and properties}.
@orgcmd{C-c a M,org-tags-view}
@vindex org-tags-match-list-sublevels
Create a global list of tag matches from all agenda files, but check
only TODO items and force checking of subitems (see the option
@code{org-tags-match-list-sublevels}).
@end table

The syntax for the search string is described in @ref{Matching tags and
properties}.

There is also a special command for creating sparse trees based on a
single property:

@table @kbd
@orgkey{C-c / p}
Create a sparse tree based on the value of a property.  This first
prompts for the name of a property, and then for a value.  A sparse tree
is created with all entries that define this property with the given
value.  If you enclose the value in curly braces, it is interpreted as
a regular expression and matched against the property values.
@end table

@node Property inheritance
@section Property Inheritance
@cindex properties, inheritance
@cindex inheritance, of properties

@vindex org-use-property-inheritance
The outline structure of Org mode documents lends itself to an
inheritance model of properties: if the parent in a tree has a certain
property, the children can inherit this property.  Org mode does not
turn this on by default, because it can slow down property searches
significantly and is often not needed.  However, if you find inheritance
useful, you can turn it on by setting the variable
@code{org-use-property-inheritance}.  It may be set to @code{t} to make
all properties inherited from the parent, to a list of properties
that should be inherited, or to a regular expression that matches
inherited properties.  If a property has the value @code{nil}, this is
interpreted as an explicit undefine of the property, so that inheritance
search will stop at this value and return @code{nil}.

Org mode has a few properties for which inheritance is hard-coded, at
least for the special applications for which they are used:

@cindex property, @code{COLUMNS}
@table @code
@item COLUMNS
The @code{:COLUMNS:} property defines the format of column view
(@pxref{Column view}).  It is inherited in the sense that the level
where a @code{:COLUMNS:} property is defined is used as the starting
point for a column view table, independently of the location in the
subtree from where columns view is turned on.
@item CATEGORY
@cindex property, @code{CATEGORY}
For agenda view, a category set through a @code{:CATEGORY:} property
applies to the entire subtree.
@item ARCHIVE
@cindex property, @code{ARCHIVE}
For archiving, the @code{:ARCHIVE:} property may define the archive
location for the entire subtree (@pxref{Moving subtrees}).
@item LOGGING
@cindex property, @code{LOGGING}
The @code{LOGGING} property may define logging settings for an entry or a
subtree (@pxref{Tracking TODO state changes}).
@end table

@node Column view
@section Column view

A great way to view and edit properties in an outline tree is
@emph{column view}.  In column view, each outline node is turned into a
table row.  Columns in this table provide access to properties of the
entries.  Org mode implements columns by overlaying a tabular structure
over the headline of each item.  While the headlines have been turned
into a table row, you can still change the visibility of the outline
tree.  For example, you get a compact table by switching to CONTENTS
view (@kbd{S-@key{TAB} S-@key{TAB}}, or simply @kbd{c} while column view
is active), but you can still open, read, and edit the entry below each
headline.  Or, you can switch to column view after executing a sparse
tree command and in this way get a table only for the selected items.
Column view also works in agenda buffers (@pxref{Agenda views}) where
queries have collected selected items, possibly from a number of files.

@menu
* Defining columns::            The COLUMNS format property
* Using column view::           How to create and use column view
* Capturing column view::       A dynamic block for column view
@end menu

@node Defining columns
@subsection Defining columns
@cindex column view, for properties
@cindex properties, column view

Setting up a column view first requires defining the columns.  This is
done by defining a column format line.

@menu
* Scope of column definitions::  Where defined, where valid?
* Column attributes::           Appearance and content of a column
@end menu

@node Scope of column definitions
@subsubsection Scope of column definitions

To define a column format for an entire file, use a line like

@cindex @code{#+COLUMNS}
@example
#+COLUMNS: %25ITEM %TAGS %PRIORITY %TODO
@end example

To specify a format that only applies to a specific tree, add a
@code{:COLUMNS:} property to the top node of that tree, for example:

@example
** Top node for columns view
   :PROPERTIES:
   :COLUMNS: %25ITEM %TAGS %PRIORITY %TODO
   :END:
@end example

If a @code{:COLUMNS:} property is present in an entry, it defines columns
for the entry itself, and for the entire subtree below it.  Since the
column definition is part of the hierarchical structure of the document,
you can define columns on level 1 that are general enough for all
sublevels, and more specific columns further down, when you edit a
deeper part of the tree.

@node Column attributes
@subsubsection Column attributes
A column definition sets the attributes of a column.  The general
definition looks like this:

@example
 %[@var{width}]@var{property}[(@var{title})][@{@var{summary-type}@}]
@end example

@noindent
Except for the percent sign and the property name, all items are
optional.  The individual parts have the following meaning:

@example
@var{width}           @r{An integer specifying the width of the column in characters.}
                @r{If omitted, the width will be determined automatically.}
@var{property}        @r{The property that should be edited in this column.}
                @r{Special properties representing meta data are allowed here}
                @r{as well (@pxref{Special properties})}
@var{title}           @r{The header text for the column.  If omitted, the property}
                @r{name is used.}
@{@var{summary-type}@}  @r{The summary type.  If specified, the column values for}
                @r{parent nodes are computed from the children@footnote{If
                more than one summary type apply to the property, the parent
                values are computed according to the first of them.}.}
                @r{Supported summary types are:}
                @{+@}       @r{Sum numbers in this column.}
                @{+;%.1f@}  @r{Like @samp{+}, but format result with @samp{%.1f}.}
                @{$@}       @r{Currency, short for @samp{+;%.2f}.}
                @{min@}     @r{Smallest number in column.}
                @{max@}     @r{Largest number.}
                @{mean@}    @r{Arithmetic mean of numbers.}
                @{X@}       @r{Checkbox status, @samp{[X]} if all children are @samp{[X]}.}
                @{X/@}      @r{Checkbox status, @samp{[n/m]}.}
                @{X%@}      @r{Checkbox status, @samp{[n%]}.}
                @{:@}       @r{Sum times, HH:MM, plain numbers are
                hours@footnote{A time can also be a duration, using effort
                modifiers defined in @code{org-effort-durations}, e.g.,
                @samp{3d 1h}.  If any value in the column is as such, the
                summary will also be an effort duration.}.}
                @{:min@}    @r{Smallest time value in column.}
                @{:max@}    @r{Largest time value.}
                @{:mean@}   @r{Arithmetic mean of time values.}
                @{@@min@}    @r{Minimum age@footnote{An age is defined as
                a duration since a given time-stamp (@pxref{Timestamps}).  It
                can  also be expressed as days, hours, minutes and seconds,
                identified by @samp{d}, @samp{h}, @samp{m} and @samp{s}
                suffixes, all mandatory, e.g., @samp{0d 13h 0m 10s}.} (in
                days/hours/mins/seconds).}
                @{@@max@}    @r{Maximum age (in days/hours/mins/seconds).}
                @{@@mean@}   @r{Arithmetic mean of ages (in days/hours/mins/seconds).}
                @{est+@}    @r{Add @samp{low-high} estimates.}
@end example

The @code{est+} summary type requires further explanation.  It is used for
combining estimates, expressed as @samp{low-high} ranges or plain numbers.
For example, instead of estimating a particular task will take 5 days, you
might estimate it as 5--6 days if you're fairly confident you know how much
work is required, or 1--10 days if you don't really know what needs to be
done.  Both ranges average at 5.5 days, but the first represents a more
predictable delivery.

When combining a set of such estimates, simply adding the lows and highs
produces an unrealistically wide result.  Instead, @code{est+} adds the
statistical mean and variance of the sub-tasks, generating a final estimate
from the sum.  For example, suppose you had ten tasks, each of which was
estimated at 0.5 to 2 days of work.  Straight addition produces an estimate
of 5 to 20 days, representing what to expect if everything goes either
extremely well or extremely poorly.  In contrast, @code{est+} estimates the
full job more realistically, at 10--15 days.

Numbers are right-aligned when a format specifier with an explicit width like
@code{%5d} or @code{%5.1f} is used.

@vindex org-columns-summary-types
You can also define custom summary types by setting
@code{org-columns-summary-types}, which see.

Here is an example for a complete columns definition, along with allowed
values.

@example
:COLUMNS:  %25ITEM %9Approved(Approved?)@{X@} %Owner %11Status \@footnote{Please note that the COLUMNS definition must be on a single line---it is wrapped here only because of formatting constraints.}
                   %10Time_Estimate@{:@} %CLOCKSUM %CLOCKSUM_T
:Owner_ALL:    Tammy Mark Karl Lisa Don
:Status_ALL:   "In progress" "Not started yet" "Finished" ""
:Approved_ALL: "[ ]" "[X]"
@end example

@noindent
The first column, @samp{%25ITEM}, means the first 25 characters of the
item itself, i.e., of the headline.  You probably always should start the
column definition with the @samp{ITEM} specifier.  The other specifiers
create columns @samp{Owner} with a list of names as allowed values, for
@samp{Status} with four different possible values, and for a checkbox
field @samp{Approved}.  When no width is given after the @samp{%}
character, the column will be exactly as wide as it needs to be in order
to fully display all values.  The @samp{Approved} column does have a
modified title (@samp{Approved?}, with a question mark).  Summaries will
be created for the @samp{Time_Estimate} column by adding time duration
expressions like HH:MM, and for the @samp{Approved} column, by providing
an @samp{[X]} status if all children have been checked.  The
@samp{CLOCKSUM} and @samp{CLOCKSUM_T} columns are special, they lists the
sums of CLOCK intervals in the subtree, either for all clocks or just for
today.

@node Using column view
@subsection Using column view

@table @kbd
@tsubheading{Turning column view on and off}
@orgcmd{C-c C-x C-c,org-columns}
@vindex org-columns-default-format
Turn on column view.  If the cursor is before the first headline in the file,
or the function called with the universal prefix argument, column view is
turned on for the entire file, using the @code{#+COLUMNS} definition.  If the
cursor is somewhere inside the outline, this command searches the hierarchy,
up from point, for a @code{:COLUMNS:} property that defines a format.  When
one is found, the column view table is established for the tree starting at
the entry that contains the @code{:COLUMNS:} property.  If no such property
is found, the format is taken from the @code{#+COLUMNS} line or from the
variable @code{org-columns-default-format}, and column view is established
for the current entry and its subtree.
@orgcmd{r,org-columns-redo}
Recreate the column view, to include recent changes made in the buffer.
@orgcmd{g,org-columns-redo}
Same as @kbd{r}.
@orgcmd{q,org-columns-quit}
Exit column view.
@tsubheading{Editing values}
@item @key{LEFT} @key{RIGHT} @key{UP} @key{DOWN}
Move through the column view from field to field.
@kindex S-LEFT
@kindex S-RIGHT
@item  S-@key{LEFT}/@key{RIGHT}
Switch to the next/previous allowed value of the field.  For this, you
have to have specified allowed values for a property.
@item 1..9,0
Directly select the Nth allowed value, @kbd{0} selects the 10th value.
@orgcmdkkcc{n,p,org-columns-next-allowed-value,org-columns-previous-allowed-value}
Same as @kbd{S-@key{LEFT}/@key{RIGHT}}
@orgcmd{e,org-columns-edit-value}
Edit the property at point.  For the special properties, this will
invoke the same interface that you normally use to change that
property.  For example, when editing a TAGS property, the tag completion
or fast selection interface will pop up.
@orgcmd{C-c C-c,org-columns-set-tags-or-toggle}
When there is a checkbox at point, toggle it.
@orgcmd{v,org-columns-show-value}
View the full value of this property.  This is useful if the width of
the column is smaller than that of the value.
@orgcmd{a,org-columns-edit-allowed}
Edit the list of allowed values for this property.  If the list is found
in the hierarchy, the modified value is stored there.  If no list is
found, the new value is stored in the first entry that is part of the
current column view.
@tsubheading{Modifying the table structure}
@orgcmdkkcc{<,>,org-columns-narrow,org-columns-widen}
Make the column narrower/wider by one character.
@orgcmd{S-M-@key{RIGHT},org-columns-new}
Insert a new column, to the left of the current column.
@orgcmd{S-M-@key{LEFT},org-columns-delete}
Delete the current column.
@end table

@node Capturing column view
@subsection Capturing column view

Since column view is just an overlay over a buffer, it cannot be
exported or printed directly.  If you want to capture a column view, use
a @code{columnview} dynamic block (@pxref{Dynamic blocks}).  The frame
of this block looks like this:

@cindex @code{#+BEGIN}, columnview
@example
* The column view
#+BEGIN: columnview :hlines 1 :id "label"

#+END:
@end example

@noindent This dynamic block has the following parameters:

@table @code
@item :id
This is the most important parameter.  Column view is a feature that is
often localized to a certain (sub)tree, and the capture block might be
at a different location in the file.  To identify the tree whose view to
capture, you can use 4 values:
@cindex property, @code{ID}
@example
local     @r{use the tree in which the capture block is located}
global    @r{make a global view, including all headings in the file}
"file:@var{path-to-file}"
          @r{run column view at the top of this file}
"@var{ID}"      @r{call column view in the tree that has an @code{:ID:}}
          @r{property with the value @i{label}.  You can use}
          @r{@kbd{M-x org-id-copy @key{RET}} to create a globally unique @code{ID} for}
          @r{the current entry and copy it to the kill-ring.}
@end example
@item :hlines
When @code{t}, insert an hline after every line.  When a number @var{N}, insert
an hline before each headline with level @code{<= @var{N}}.
@item :vlines
When set to @code{t}, force column groups to get vertical lines.
@item :maxlevel
When set to a number, don't capture entries below this level.
@item :skip-empty-rows
When set to @code{t}, skip rows where the only non-empty specifier of the
column view is @code{ITEM}.
@item :indent
When non-@code{nil}, indent each @code{ITEM} field according to its level.

@end table

@noindent
The following commands insert or update the dynamic block:

@table @kbd
@orgcmd{C-c C-x i,org-insert-columns-dblock}
Insert a dynamic block capturing a column view.  You will be prompted
for the scope or @code{ID} of the view.
@orgcmdkkc{C-c C-c,C-c C-x C-u,org-dblock-update}
Update dynamic block at point.
@orgcmd{C-u C-c C-x C-u,org-update-all-dblocks}
Update all dynamic blocks (@pxref{Dynamic blocks}).  This is useful if
you have several clock table blocks, column-capturing blocks or other dynamic
blocks in a buffer.
@end table

You can add formulas to the column view table and you may add plotting
instructions in front of the table---these will survive an update of the
block.  If there is a @code{#+TBLFM:} after the table, the table will
actually be recalculated automatically after an update.

An alternative way to capture and process property values into a table is
provided by Eric Schulte's @file{org-collector.el} which is a contributed
package@footnote{Contributed packages are not part of Emacs, but are
distributed with the main distribution of Org (visit
@uref{https://orgmode.org}).}.  It provides a general API to collect
properties from entries in a certain scope, and arbitrary Lisp expressions to
process these values before inserting them into a table or a dynamic block.

@node Property API
@section The Property API
@cindex properties, API
@cindex API, for properties

There is a full API for accessing and changing properties.  This API can
be used by Emacs Lisp programs to work with properties and to implement
features based on them.  For more information see @ref{Using the
property API}.

@node Dates and times
@chapter Dates and times
@cindex dates
@cindex times
@cindex timestamp
@cindex date stamp

To assist project planning, TODO items can be labeled with a date and/or
a time.  The specially formatted string carrying the date and time
information is called a @emph{timestamp} in Org mode.  This may be a
little confusing because timestamp is often used to indicate when
something was created or last changed.  However, in Org mode this term
is used in a much wider sense.

@menu
* Timestamps::                  Assigning a time to a tree entry
* Creating timestamps::         Commands which insert timestamps
* Deadlines and scheduling::    Planning your work
* Clocking work time::          Tracking how long you spend on a task
* Effort estimates::            Planning work effort in advance
* Timers::                      Notes with a running timer
@end menu


@node Timestamps
@section Timestamps, deadlines, and scheduling
@cindex timestamps
@cindex ranges, time
@cindex date stamps
@cindex deadlines
@cindex scheduling

A timestamp is a specification of a date (possibly with a time or a range of
times) in a special format, either @samp{<2003-09-16 Tue>}@footnote{In this
simplest form, the day name is optional when you type the date yourself.
However, any dates inserted or modified by Org will add that day name, for
reading convenience.} or @samp{<2003-09-16 Tue 09:39>} or @samp{<2003-09-16
Tue 12:00-12:30>}@footnote{This is inspired by the standard ISO 8601
date/time format.  To use an alternative format, see @ref{Custom time
format}.}.  A timestamp can appear anywhere in the headline or body of an Org
tree entry.  Its presence causes entries to be shown on specific dates in the
agenda (@pxref{Weekly/daily agenda}).  We distinguish:

@table @var
@item Plain timestamp; Event; Appointment
@cindex timestamp
@cindex appointment
A simple timestamp just assigns a date/time to an item.  This is just like
writing down an appointment or event in a paper agenda.  In the agenda
display, the headline of an entry associated with a plain timestamp will be
shown exactly on that date.

@example
* Meet Peter at the movies
  <2006-11-01 Wed 19:15>
* Discussion on climate change
  <2006-11-02 Thu 20:00-22:00>
@end example

@item Timestamp with repeater interval
@cindex timestamp, with repeater interval
A timestamp may contain a @emph{repeater interval}, indicating that it
applies not only on the given date, but again and again after a certain
interval of N days (d), weeks (w), months (m), or years (y).  The
following will show up in the agenda every Wednesday:

@example
* Pick up Sam at school
  <2007-05-16 Wed 12:30 +1w>
@end example

@item Diary-style sexp entries
For more complex date specifications, Org mode supports using the special
sexp diary entries implemented in the Emacs calendar/diary
package@footnote{When working with the standard diary sexp functions, you
need to be very careful with the order of the arguments.  That order depends
evilly on the variable @code{calendar-date-style} (or, for older Emacs
versions, @code{european-calendar-style}).  For example, to specify a date
December 1, 2005, the call might look like @code{(diary-date 12 1 2005)} or
@code{(diary-date 1 12 2005)} or @code{(diary-date 2005 12 1)}, depending on
the settings.  This has been the source of much confusion.  Org mode users
can resort to special versions of these functions like @code{org-date} or
@code{org-anniversary}.  These work just like the corresponding @code{diary-}
functions, but with stable ISO order of arguments (year, month, day) wherever
applicable, independent of the value of @code{calendar-date-style}.}.  For
example with optional time

@example
* 22:00-23:00 The nerd meeting on every 2nd Thursday of the month
  <%%(diary-float t 4 2)>
@end example

@item Time/Date range
@cindex timerange
@cindex date range
Two timestamps connected by @samp{--} denote a range.  The headline
will be shown on the first and last day of the range, and on any dates
that are displayed and fall in the range.  Here is an example:

@example
** Meeting in Amsterdam
   <2004-08-23 Mon>--<2004-08-26 Thu>
@end example

@item Inactive timestamp
@cindex timestamp, inactive
@cindex inactive timestamp
Just like a plain timestamp, but with square brackets instead of
angular ones.  These timestamps are inactive in the sense that they do
@emph{not} trigger an entry to show up in the agenda.

@example
* Gillian comes late for the fifth time
  [2006-11-01 Wed]
@end example

@end table

@node Creating timestamps
@section Creating timestamps
@cindex creating timestamps
@cindex timestamps, creating

For Org mode to recognize timestamps, they need to be in the specific
format.  All commands listed below produce timestamps in the correct
format.

@table @kbd
@orgcmd{C-c .,org-time-stamp}
Prompt for a date and insert a corresponding timestamp.  When the cursor is
at an existing timestamp in the buffer, the command is used to modify this
timestamp instead of inserting a new one.  When this command is used twice in
succession, a time range is inserted.
@c
@orgcmd{C-c !,org-time-stamp-inactive}
Like @kbd{C-c .}, but insert an inactive timestamp that will not cause
an agenda entry.
@c
@kindex C-u C-c .
@kindex C-u C-c !
@item C-u C-c .
@itemx C-u C-c !
@vindex org-time-stamp-rounding-minutes
Like @kbd{C-c .} and @kbd{C-c !}, but use the alternative format which
contains date and time.  The default time can be rounded to multiples of 5
minutes, see the option @code{org-time-stamp-rounding-minutes}.
@c
@orgkey{C-c C-c}
Normalize timestamp, insert/fix day name if missing or wrong.
@c
@orgcmd{C-c <,org-date-from-calendar}
Insert a timestamp corresponding to the cursor date in the Calendar.
@c
@orgcmd{C-c >,org-goto-calendar}
Access the Emacs calendar for the current date.  If there is a
timestamp in the current line, go to the corresponding date
instead.
@c
@orgcmd{C-c C-o,org-open-at-point}
Access the agenda for the date given by the timestamp or -range at
point (@pxref{Weekly/daily agenda}).
@c
@orgcmdkkcc{S-@key{LEFT},S-@key{RIGHT},org-timestamp-down-day,org-timestamp-up-day}
Change date at cursor by one day.  These key bindings conflict with
shift-selection and related modes (@pxref{Conflicts}).
@c
@orgcmdkkcc{S-@key{UP},S-@key{DOWN},org-timestamp-up,org-timestamp-down-down}
Change the item under the cursor in a timestamp.  The cursor can be on a
year, month, day, hour or minute.  When the timestamp contains a time range
like @samp{15:30-16:30}, modifying the first time will also shift the second,
shifting the time block with constant length.  To change the length, modify
the second time.  Note that if the cursor is in a headline and not at a
timestamp, these same keys modify the priority of an item.
(@pxref{Priorities}).  The key bindings also conflict with shift-selection and
related modes (@pxref{Conflicts}).
@c
@orgcmd{C-c C-y,org-evaluate-time-range}
@cindex evaluate time range
Evaluate a time range by computing the difference between start and end.
With a prefix argument, insert result after the time range (in a table: into
the following column).
@end table


@menu
* The date/time prompt::        How Org mode helps you entering date and time
* Custom time format::          Making dates look different
@end menu

@node The date/time prompt
@subsection The date/time prompt
@cindex date, reading in minibuffer
@cindex time, reading in minibuffer

@vindex org-read-date-prefer-future
When Org mode prompts for a date/time, the default is shown in default
date/time format, and the prompt therefore seems to ask for a specific
format.  But it will in fact accept date/time information in a variety of
formats.  Generally, the information should start at the beginning of the
string.  Org mode will find whatever information is in
there and derive anything you have not specified from the @emph{default date
and time}.  The default is usually the current date and time, but when
modifying an existing timestamp, or when entering the second stamp of a
range, it is taken from the stamp in the buffer.  When filling in
information, Org mode assumes that most of the time you will want to enter a
date in the future: if you omit the month/year and the given day/month is
@i{before} today, it will assume that you mean a future date@footnote{See the
variable @code{org-read-date-prefer-future}.  You may set that variable to
the symbol @code{time} to even make a time before now shift the date to
tomorrow.}.  If the date has been automatically shifted into the future, the
time prompt will show this with @samp{(=>F).}

For example, let's assume that today is @b{June 13, 2006}.  Here is how
various inputs will be interpreted, the items filled in by Org mode are
in @b{bold}.

@example
3-2-5         @result{} 2003-02-05
2/5/3         @result{} 2003-02-05
14            @result{} @b{2006}-@b{06}-14
12            @result{} @b{2006}-@b{07}-12
2/5           @result{} @b{2007}-02-05
Fri           @result{} nearest Friday after the default date
sep 15        @result{} @b{2006}-09-15
feb 15        @result{} @b{2007}-02-15
sep 12 9      @result{} 2009-09-12
12:45         @result{} @b{2006}-@b{06}-@b{13} 12:45
22 sept 0:34  @result{} @b{2006}-09-22 00:34
w4            @result{} ISO week four of the current year @b{2006}
2012 w4 fri   @result{} Friday of ISO week 4 in 2012
2012-w04-5    @result{} Same as above
@end example

Furthermore you can specify a relative date by giving, as the @emph{first}
thing in the input: a plus/minus sign, a number and a letter ([hdwmy]) to
indicate change in hours, days, weeks, months, or years.  With a single plus
or minus, the date is always relative to today.  With a double plus or minus,
it is relative to the default date.  If instead of a single letter, you use
the abbreviation of day name, the date will be the Nth such day, e.g.:

@example
+0            @result{} today
.             @result{} today
+4d           @result{} four days from today
+4            @result{} same as above
+2w           @result{} two weeks from today
++5           @result{} five days from default date
+2tue         @result{} second Tuesday from now
-wed          @result{} last Wednesday
@end example

@vindex parse-time-months
@vindex parse-time-weekdays
The function understands English month and weekday abbreviations.  If
you want to use unabbreviated names and/or other languages, configure
the variables @code{parse-time-months} and @code{parse-time-weekdays}.

@vindex org-read-date-force-compatible-dates
Not all dates can be represented in a given Emacs implementation.  By default
Org mode forces dates into the compatibility range 1970--2037 which works on
all Emacs implementations.  If you want to use dates outside of this range,
read the docstring of the variable
@code{org-read-date-force-compatible-dates}.

You can specify a time range by giving start and end times or by giving a
start time and a duration (in HH:MM format).  Use one or two dash(es) as the
separator in the former case and use '+' as the separator in the latter
case, e.g.:

@example
11am-1:15pm    @result{} 11:00-13:15
11am--1:15pm   @result{} same as above
11am+2:15      @result{} same as above
@end example

@cindex calendar, for selecting date
@vindex org-popup-calendar-for-date-prompt
Parallel to the minibuffer prompt, a calendar is popped up@footnote{If
you don't need/want the calendar, configure the variable
@code{org-popup-calendar-for-date-prompt}.}.  When you exit the date
prompt, either by clicking on a date in the calendar, or by pressing
@key{RET}, the date selected in the calendar will be combined with the
information entered at the prompt.  You can control the calendar fully
from the minibuffer:

@kindex <
@kindex >
@kindex M-v
@kindex C-v
@kindex mouse-1
@kindex S-RIGHT
@kindex S-LEFT
@kindex S-DOWN
@kindex S-UP
@kindex M-S-RIGHT
@kindex M-S-LEFT
@kindex RET
@kindex M-S-DOWN
@kindex M-S-UP

@example
@key{RET}              @r{Choose date at cursor in calendar.}
mouse-1            @r{Select date by clicking on it.}
S-@key{RIGHT}/@key{LEFT}   @r{One day forward/backward.}
S-@key{DOWN}/@key{UP}      @r{One week forward/backward.}
M-S-@key{RIGHT}/@key{LEFT} @r{One month forward/backward.}
> / <              @r{Scroll calendar forward/backward by one month.}
M-v / C-v          @r{Scroll calendar forward/backward by 3 months.}
M-S-@key{DOWN}/@key{UP}    @r{Scroll calendar forward/backward by one year.}
@end example

@vindex org-read-date-display-live
The actions of the date/time prompt may seem complex, but I assure you they
will grow on you, and you will start getting annoyed by pretty much any other
way of entering a date/time out there.  To help you understand what is going
on, the current interpretation of your input will be displayed live in the
minibuffer@footnote{If you find this distracting, turn the display off with
@code{org-read-date-display-live}.}.

@node Custom time format
@subsection Custom time format
@cindex custom date/time format
@cindex time format, custom
@cindex date format, custom

@vindex org-display-custom-times
@vindex org-time-stamp-custom-formats
Org mode uses the standard ISO notation for dates and times as it is
defined in ISO 8601.  If you cannot get used to this and require another
representation of date and time to keep you happy, you can get it by
customizing the options @code{org-display-custom-times} and
@code{org-time-stamp-custom-formats}.

@table @kbd
@orgcmd{C-c C-x C-t,org-toggle-time-stamp-overlays}
Toggle the display of custom formats for dates and times.
@end table

@noindent
Org mode needs the default format for scanning, so the custom date/time
format does not @emph{replace} the default format---instead it is put
@emph{over} the default format using text properties.  This has the
following consequences:
@itemize @bullet
@item
You cannot place the cursor onto a timestamp anymore, only before or
after.
@item
The @kbd{S-@key{UP}/@key{DOWN}} keys can no longer be used to adjust
each component of a timestamp.  If the cursor is at the beginning of
the stamp, @kbd{S-@key{UP}/@key{DOWN}} will change the stamp by one day,
just like @kbd{S-@key{LEFT}/@key{RIGHT}}.  At the end of the stamp, the
time will be changed by one minute.
@item
If the timestamp contains a range of clock times or a repeater, these
will not be overlaid, but remain in the buffer as they were.
@item
When you delete a timestamp character-by-character, it will only
disappear from the buffer after @emph{all} (invisible) characters
belonging to the ISO timestamp have been removed.
@item
If the custom timestamp format is longer than the default and you are
using dates in tables, table alignment will be messed up.  If the custom
format is shorter, things do work as expected.
@end itemize


@node Deadlines and scheduling
@section Deadlines and scheduling

A timestamp may be preceded by special keywords to facilitate planning.  Both
the timestamp and the keyword have to be positioned immediately after the task
they refer to.

@table @var
@item DEADLINE
@cindex @code{DEADLINE} keyword

Meaning: the task (most likely a TODO item, though not necessarily) is supposed
to be finished on that date.

@vindex org-deadline-warning-days
@vindex org-agenda-skip-deadline-prewarning-if-scheduled
On the deadline date, the task will be listed in the agenda.  In
addition, the agenda for @emph{today} will carry a warning about the
approaching or missed deadline, starting
@code{org-deadline-warning-days} before the due date, and continuing
until the entry is marked DONE@.  An example:

@example
*** TODO write article about the Earth for the Guide
    DEADLINE: <2004-02-29 Sun>
    The editor in charge is [[bbdb:Ford Prefect]]
@end example

You can specify a different lead time for warnings for a specific
deadline using the following syntax.  Here is an example with a warning
period of 5 days @code{DEADLINE: <2004-02-29 Sun -5d>}.  This warning is
deactivated if the task gets scheduled and you set
@code{org-agenda-skip-deadline-prewarning-if-scheduled} to @code{t}.

@item SCHEDULED
@cindex @code{SCHEDULED} keyword

Meaning: you are planning to start working on that task on the given
date.

@vindex org-agenda-skip-scheduled-if-done
The headline will be listed under the given date@footnote{It will still
be listed on that date after it has been marked DONE@.  If you don't like
this, set the variable @code{org-agenda-skip-scheduled-if-done}.}.  In
addition, a reminder that the scheduled date has passed will be present
in the compilation for @emph{today}, until the entry is marked DONE, i.e.,
the task will automatically be forwarded until completed.

@example
*** TODO Call Trillian for a date on New Years Eve.
    SCHEDULED: <2004-12-25 Sat>
@end example

@vindex org-scheduled-delay-days
@vindex org-agenda-skip-scheduled-delay-if-deadline
If you want to @emph{delay} the display of this task in the agenda, use
@code{SCHEDULED: <2004-12-25 Sat -2d>}: the task is still scheduled on the
25th but will appear two days later.  In case the task contains a repeater,
the delay is considered to affect all occurrences; if you want the delay to
only affect the first scheduled occurrence of the task, use @code{--2d}
instead.  See @code{org-scheduled-delay-days} and
@code{org-agenda-skip-scheduled-delay-if-deadline} for details on how to
control this globally or per agenda.

@noindent
@b{Important:} Scheduling an item in Org mode should @i{not} be
understood in the same way that we understand @i{scheduling a meeting}.
Setting a date for a meeting is just a simple appointment, you should
mark this entry with a simple plain timestamp, to get this item shown
on the date where it applies.  This is a frequent misunderstanding by
Org users.  In Org mode, @i{scheduling} means setting a date when you
want to start working on an action item.
@end table

You may use timestamps with repeaters in scheduling and deadline
entries.  Org mode will issue early and late warnings based on the
assumption that the timestamp represents the @i{nearest instance} of
the repeater.  However, the use of diary sexp entries like
@c
@code{<%%(diary-float t 42)>}
@c
in scheduling and deadline timestamps is limited.  Org mode does not
know enough about the internals of each sexp function to issue early and
late warnings.  However, it will show the item on each day where the
sexp entry matches.

@menu
* Inserting deadline/schedule::  Planning items
* Repeated tasks::              Items that show up again and again
@end menu

@node Inserting deadline/schedule
@subsection Inserting deadlines or schedules

The following commands allow you to quickly insert a deadline or to schedule
an item:

@table @kbd
@c
@orgcmd{C-c C-d,org-deadline}
Insert @code{DEADLINE} keyword along with a stamp.  Any CLOSED timestamp will
be removed.  When called with a prefix arg, an existing deadline will be
removed from the entry.  Depending on the variable
@code{org-log-redeadline}@footnote{with corresponding @code{#+STARTUP}
keywords @code{logredeadline}, @code{lognoteredeadline}, and
@code{nologredeadline}}, a note will be taken when changing an existing
deadline.

@orgcmd{C-c C-s,org-schedule}
Insert @code{SCHEDULED} keyword along with a stamp.  Any CLOSED timestamp
will be removed.  When called with a prefix argument, remove the scheduling
date from the entry.  Depending on the variable
@code{org-log-reschedule}@footnote{with corresponding @code{#+STARTUP}
keywords @code{logreschedule}, @code{lognotereschedule}, and
@code{nologreschedule}}, a note will be taken when changing an existing
scheduling time.
@c
@orgcmd{C-c / d,org-check-deadlines}
@cindex sparse tree, for deadlines
@vindex org-deadline-warning-days
Create a sparse tree with all deadlines that are either past-due, or
which will become due within @code{org-deadline-warning-days}.
With @kbd{C-u} prefix, show all deadlines in the file.  With a numeric
prefix, check that many days.  For example, @kbd{C-1 C-c / d} shows
all deadlines due tomorrow.
@c
@orgcmd{C-c / b,org-check-before-date}
Sparse tree for deadlines and scheduled items before a given date.
@c
@orgcmd{C-c / a,org-check-after-date}
Sparse tree for deadlines and scheduled items after a given date.
@end table

Note that @code{org-schedule} and @code{org-deadline} supports
setting the date by indicating a relative time: e.g., +1d will set
the date to the next day after today, and --1w will set the date
to the previous week before any current timestamp.

@node Repeated tasks
@subsection Repeated tasks
@cindex tasks, repeated
@cindex repeated tasks

Some tasks need to be repeated again and again.  Org mode helps to organize
such tasks using a so-called repeater in a @code{DEADLINE}, @code{SCHEDULED},
or plain timestamp.  In the following example
@example
** TODO Pay the rent
   DEADLINE: <2005-10-01 Sat +1m>
@end example
@noindent
the @code{+1m} is a repeater; the intended interpretation is that the task
has a deadline on <2005-10-01> and repeats itself every (one) month starting
from that time.  You can use yearly, monthly, weekly, daily and hourly repeat
cookies by using the @code{y/w/m/d/h} letters.  If you need both a repeater
and a special warning period in a deadline entry, the repeater should come
first and the warning period last: @code{DEADLINE: <2005-10-01 Sat +1m -3d>}.

@vindex org-todo-repeat-to-state
Deadlines and scheduled items produce entries in the agenda when they are
over-due, so it is important to be able to mark such an entry as completed
once you have done so.  When you mark a @code{DEADLINE} or a @code{SCHEDULED}
with the TODO keyword DONE, it will no longer produce entries in the agenda.
The problem with this is, however, that then also the @emph{next} instance of
the repeated entry will not be active.  Org mode deals with this in the
following way: When you try to mark such an entry DONE (using @kbd{C-c C-t}),
it will shift the base date of the repeating timestamp by the repeater
interval, and immediately set the entry state back to TODO@footnote{In fact,
the target state is taken from, in this sequence, the @code{REPEAT_TO_STATE}
property or the variable @code{org-todo-repeat-to-state}.  If neither of
these is specified, the target state defaults to the first state of the TODO
state sequence.}.  In the example above, setting the state to DONE would
actually switch the date like this:

@example
** TODO Pay the rent
   DEADLINE: <2005-11-01 Tue +1m>
@end example

To mark a task with a repeater as @code{DONE}, use @kbd{C-- 1 C-c C-t}
(i.e., @code{org-todo} with a numeric prefix argument of -1.)

@vindex org-log-repeat
A timestamp@footnote{You can change this using the option
@code{org-log-repeat}, or the @code{#+STARTUP} options @code{logrepeat},
@code{lognoterepeat}, and @code{nologrepeat}.  With @code{lognoterepeat}, you
will also be prompted for a note.} will be added under the deadline, to keep
a record that you actually acted on the previous instance of this deadline.

As a consequence of shifting the base date, this entry will no longer be
visible in the agenda when checking past dates, but all future instances
will be visible.

With the @samp{+1m} cookie, the date shift will always be exactly one
month.  So if you have not paid the rent for three months, marking this
entry DONE will still keep it as an overdue deadline.  Depending on the
task, this may not be the best way to handle it.  For example, if you
forgot to call your father for 3 weeks, it does not make sense to call
him 3 times in a single day to make up for it.  Finally, there are tasks
like changing batteries which should always repeat a certain time
@i{after} the last time you did it.  For these tasks, Org mode has
special repeaters  @samp{++} and @samp{.+}.  For example:

@example
** TODO Call Father
   DEADLINE: <2008-02-10 Sun ++1w>
   Marking this DONE will shift the date by at least one week,
   but also by as many weeks as it takes to get this date into
   the future.  However, it stays on a Sunday, even if you called
   and marked it done on Saturday.
** TODO Empty kitchen trash
   DEADLINE: <2008-02-08 Fri 20:00 ++1d>
   Marking this DONE will shift the date by at least one day, and
   also by as many days as it takes to get the timestamp into the
   future.  Since there is a time in the timestamp, the next
   deadline in the future will be on today's date if you
   complete the task before 20:00.
** TODO Check the batteries in the smoke detectors
   DEADLINE: <2005-11-01 Tue .+1m>
   Marking this DONE will shift the date to one month after
   today.
@end example

@vindex org-agenda-skip-scheduled-if-deadline-is-shown
You may have both scheduling and deadline information for a specific task.
If the repeater is set for the scheduling information only, you probably want
the repeater to be ignored after the deadline.  If so, set the variable
@code{org-agenda-skip-scheduled-if-deadline-is-shown} to
@code{repeated-after-deadline}.  However, any scheduling information without
a repeater is no longer relevant once the task is done, and thus, removed
upon repeating the task.  If you want both scheduling and deadline
information to repeat after the same interval, set the same repeater for both
timestamps.

An alternative to using a repeater is to create a number of copies of a task
subtree, with dates shifted in each copy.  The command @kbd{C-c C-x c} was
created for this purpose, it is described in @ref{Structure editing}.


@node Clocking work time
@section Clocking work time
@cindex clocking time
@cindex time clocking

Org mode allows you to clock the time you spend on specific tasks in a
project.  When you start working on an item, you can start the clock.  When
you stop working on that task, or when you mark the task done, the clock is
stopped and the corresponding time interval is recorded.  It also computes
the total time spent on each subtree@footnote{Clocking only works if all
headings are indented with less than 30 stars.  This is a hardcoded
limitation of @code{lmax} in @code{org-clock-sum}.} of a project.
And it remembers a history or tasks recently clocked, so that you can jump
quickly between a number of tasks absorbing your time.

To save the clock history across Emacs sessions, use
@lisp
(setq org-clock-persist 'history)
(org-clock-persistence-insinuate)
@end lisp
When you clock into a new task after resuming Emacs, the incomplete
clock@footnote{To resume the clock under the assumption that you have worked
on this task while outside Emacs, use @code{(setq org-clock-persist t)}.}
will be found (@pxref{Resolving idle time}) and you will be prompted about
what to do with it.

@menu
* Clocking commands::           Starting and stopping a clock
* The clock table::             Detailed reports
* Resolving idle time::         Resolving time when you've been idle
@end menu

@node Clocking commands
@subsection Clocking commands

@table @kbd
@orgcmd{C-c C-x C-i,org-clock-in}
@vindex org-clock-into-drawer
@vindex org-clock-continuously
@cindex property, @code{LOG_INTO_DRAWER}
!Start the clock on the current item (clock-in).  This inserts the
@code{CLOCK} keyword together with a timestamp.  If this is not the first
clocking of this item, the multiple @code{CLOCK} lines will be wrapped into a
@code{:LOGBOOK:} drawer (see also the variable @code{org-clock-into-drawer}).
You can also overrule the setting of this variable for a subtree by setting a
@code{CLOCK_INTO_DRAWER} or @code{LOG_INTO_DRAWER} property.  When called
with a @kbd{C-u} prefix argument, select the task from a list of recently
clocked tasks.  With two @kbd{C-u C-u} prefixes, clock into the task at point
and mark it as the default task; the default task will then always be
available with letter @kbd{d} when selecting a clocking task.  With three
@kbd{C-u C-u C-u} prefixes, force continuous clocking by starting the clock
when the last clock stopped.@*
@cindex property, @code{CLOCK_MODELINE_TOTAL}
@cindex property, @code{LAST_REPEAT}
@vindex org-clock-modeline-total
While the clock is running, the current clocking time is shown in the mode
line, along with the title of the task.  The clock time shown will be all
time ever clocked for this task and its children.  If the task has an effort
estimate (@pxref{Effort estimates}), the mode line displays the current
clocking time against it@footnote{To add an effort estimate ``on the fly'',
hook a function doing this to @code{org-clock-in-prepare-hook}.}  If the task
is a repeating one (@pxref{Repeated tasks}), only the time since the last
reset of the task @footnote{as recorded by the @code{LAST_REPEAT} property}
will be shown.  More control over what time is shown can be exercised with
the @code{CLOCK_MODELINE_TOTAL} property.  It may have the values
@code{current} to show only the current clocking instance, @code{today} to
show all time clocked on this task today (see also the variable
@code{org-extend-today-until}), @code{all} to include all time, or
@code{auto} which is the default@footnote{See also the variable
@code{org-clock-modeline-total}.}.@* Clicking with @kbd{mouse-1} onto the
mode line entry will pop up a menu with clocking options.
@c
@orgcmd{C-c C-x C-o,org-clock-out}
@vindex org-log-note-clock-out
Stop the clock (clock-out).  This inserts another timestamp at the same
location where the clock was last started.  It also directly computes
the resulting time and inserts it after the time range as @samp{=>
HH:MM}.  See the variable @code{org-log-note-clock-out} for the
possibility to record an additional note together with the clock-out
timestamp@footnote{The corresponding in-buffer setting is:
@code{#+STARTUP: lognoteclock-out}}.
@orgcmd{C-c C-x C-x,org-clock-in-last}
@vindex org-clock-continuously
Reclock the last clocked task.  With one @kbd{C-u} prefix argument,
select the task from the clock history.  With two @kbd{C-u} prefixes,
force continuous clocking by starting the clock when the last clock
stopped.
@orgcmd{C-c C-x C-e,org-clock-modify-effort-estimate}
Update the effort estimate for the current clock task.
@kindex C-c C-y
@kindex C-c C-c
@orgcmdkkc{C-c C-c,C-c C-y,org-evaluate-time-range}
Recompute the time interval after changing one of the timestamps.  This
is only necessary if you edit the timestamps directly.  If you change
them with @kbd{S-@key{cursor}} keys, the update is automatic.
@orgcmd{C-S-@key{up/down},org-clock-timestamps-up/down}
On @code{CLOCK} log lines, increase/decrease both timestamps so that the
clock duration keeps the same.
@orgcmd{S-M-@key{up/down},org-timestamp-up/down}
On @code{CLOCK} log lines, increase/decrease the timestamp at point and
the one of the previous (or the next clock) timestamp by the same duration.
For example, if you hit @kbd{S-M-@key{UP}} to increase a clocked-out timestamp
by five minutes, then the clocked-in timestamp of the next clock will be
increased by five minutes.
@orgcmd{C-c C-t,org-todo}
Changing the TODO state of an item to DONE automatically stops the clock
if it is running in this same item.
@orgcmd{C-c C-x C-q,org-clock-cancel}
Cancel the current clock.  This is useful if a clock was started by
mistake, or if you ended up working on something else.
@orgcmd{C-c C-x C-j,org-clock-goto}
Jump to the headline of the currently clocked in task.  With a @kbd{C-u}
prefix arg, select the target task from a list of recently clocked tasks.
@orgcmd{C-c C-x C-d,org-clock-display}
@vindex org-remove-highlights-with-change
Display time summaries for each subtree in the current buffer.  This puts
overlays at the end of each headline, showing the total time recorded under
that heading, including the time of any subheadings.  You can use visibility
cycling to study the tree, but the overlays disappear when you change the
buffer (see variable @code{org-remove-highlights-with-change}) or press
@kbd{C-c C-c}.
@end table

The @kbd{l} key may be used the agenda (@pxref{Weekly/daily agenda}) to show
which tasks have been worked on or closed during a day.

@strong{Important:} note that both @code{org-clock-out} and
@code{org-clock-in-last} can have a global key binding and will not
modify the window disposition.

@node The clock table
@subsection The clock table
@cindex clocktable, dynamic block
@cindex report, of clocked time

Org mode can produce quite complex reports based on the time clocking
information.  Such a report is called a @emph{clock table}, because it is
formatted as one or several Org tables.

@table @kbd
@orgcmd{C-c C-x C-r,org-clock-report}
Insert a dynamic block (@pxref{Dynamic blocks}) containing a clock
report as an Org mode table into the current file.  When the cursor is
at an existing clock table, just update it.  When called with a prefix
argument, jump to the first clock report in the current document and
update it.  The clock table always includes also trees with
@code{:ARCHIVE:} tag.
@orgcmdkkc{C-c C-c,C-c C-x C-u,org-dblock-update}
Update dynamic block at point.
@orgkey{C-u C-c C-x C-u}
Update all dynamic blocks (@pxref{Dynamic blocks}).  This is useful if
you have several clock table blocks in a buffer.
@orgcmdkxkc{S-@key{LEFT},S-@key{RIGHT},org-clocktable-try-shift}
Shift the current @code{:block} interval and update the table.  The cursor
needs to be in the @code{#+BEGIN: clocktable} line for this command.  If
@code{:block} is @code{today}, it will be shifted to @code{today-1} etc.
@end table


Here is an example of the frame for a clock table as it is inserted into the
buffer with the @kbd{C-c C-x C-r} command:

@cindex @code{#+BEGIN}, clocktable
@example
#+BEGIN: clocktable :maxlevel 2 :emphasize nil :scope file
#+END: clocktable
@end example
@noindent
@vindex org-clocktable-defaults
The @samp{BEGIN} line specifies a number of options to define the scope,
structure, and formatting of the report.  Defaults for all these options can
be configured in the variable @code{org-clocktable-defaults}.

@noindent First there are options that determine which clock entries are to
be selected:
@example
:maxlevel    @r{Maximum level depth to which times are listed in the table.}
             @r{Clocks at deeper levels will be summed into the upper level.}
:scope       @r{The scope to consider.  This can be any of the following:}
             nil        @r{the current buffer or narrowed region}
             file       @r{the full current buffer}
             subtree    @r{the subtree where the clocktable is located}
             tree@var{N}      @r{the surrounding level @var{N} tree, for example @code{tree3}}
             tree       @r{the surrounding level 1 tree}
             agenda     @r{all agenda files}
             ("file"..) @r{scan these files}
             function   @r{the list of files returned by a function of no argument}
             file-with-archives    @r{current file and its archives}
             agenda-with-archives  @r{all agenda files, including archives}
:block       @r{The time block to consider.  This block is specified either}
             @r{absolutely, or relative to the current time and may be any of}
             @r{these formats:}
             2007-12-31    @r{New year eve 2007}
             2007-12       @r{December 2007}
             2007-W50      @r{ISO-week 50 in 2007}
             2007-Q2       @r{2nd quarter in 2007}
             2007          @r{the year 2007}
             today, yesterday, today-@var{N}          @r{a relative day}
             thisweek, lastweek, thisweek-@var{N}     @r{a relative week}
             thismonth, lastmonth, thismonth-@var{N}  @r{a relative month}
             thisyear, lastyear, thisyear-@var{N}     @r{a relative year}
             untilnow
             @r{Use @kbd{S-@key{LEFT}/@key{RIGHT}} keys to shift the time interval.}
:tstart      @r{A time string specifying when to start considering times.}
             @r{Relative times like @code{"<-2w>"} can also be used.  See}
             @r{@ref{Matching tags and properties} for relative time syntax.}
:tend        @r{A time string specifying when to stop considering times.}
             @r{Relative times like @code{"<now>"} can also be used.  See}
             @r{@ref{Matching tags and properties} for relative time syntax.}
:wstart      @r{The starting day of the week.  The default is 1 for monday.}
:mstart      @r{The starting day of the month.  The default 1 is for the first}
             @r{day of the month.}
:step        @r{@code{week} or @code{day}, to split the table into chunks.}
             @r{To use this, @code{:block} or @code{:tstart}, @code{:tend} are needed.}
:stepskip0   @r{Do not show steps that have zero time.}
:fileskip0   @r{Do not show table sections from files which did not contribute.}
:tags        @r{A tags match to select entries that should contribute.  See}
             @r{@ref{Matching tags and properties} for the match syntax.}
@end example

Then there are options which determine the formatting of the table.  These
options are interpreted by the function @code{org-clocktable-write-default},
but you can specify your own function using the @code{:formatter} parameter.
@example
:emphasize   @r{When @code{t}, emphasize level one and level two items.}
:lang        @r{Language@footnote{Language terms can be set through the variable @code{org-clock-clocktable-language-setup}.} to use for descriptive cells like "Task".}
:link        @r{Link the item headlines in the table to their origins.}
:narrow      @r{An integer to limit the width of the headline column in}
             @r{the org table.  If you write it like @samp{50!}, then the}
             @r{headline will also be shortened in export.}
:indent      @r{Indent each headline field according to its level.}
:tcolumns    @r{Number of columns to be used for times.  If this is smaller}
             @r{than @code{:maxlevel}, lower levels will be lumped into one column.}
:level       @r{Should a level number column be included?}
:sort        @r{A cons cell like containing the column to sort and a sorting type.}
             @r{E.g., @code{:sort (1 . ?a)} sorts the first column alphabetically.}
:compact     @r{Abbreviation for @code{:level nil :indent t :narrow 40! :tcolumns 1}}
             @r{All are overwritten except if there is an explicit @code{:narrow}}
:timestamp   @r{A timestamp for the entry, when available.  Look for @code{SCHEDULED},}
             @r{@code{DEADLINE}, @code{TIMESTAMP} and @code{TIMESTAMP_IA}, in this order.}
:properties  @r{List of properties that should be shown in the table.  Each}
             @r{property will get its own column.}
:inherit-props @r{When this flag is @code{t}, the values for @code{:properties} will be inherited.}
:formula     @r{Content of a @code{#+TBLFM} line to be added and evaluated.}
             @r{As a special case, @samp{:formula %} adds a column with % time.}
             @r{If you do not specify a formula here, any existing formula}
             @r{below the clock table will survive updates and be evaluated.}
:formatter   @r{A function to format clock data and insert it into the buffer.}
@end example
To get a clock summary of the current level 1 tree, for the current
day, you could write
@example
#+BEGIN: clocktable :maxlevel 2 :block today :scope tree1 :link t
#+END: clocktable
@end example
@noindent
and to use a specific time range you could write@footnote{Note that all
parameters must be specified in a single line---the line is broken here
only to fit it into the manual.}
@example
#+BEGIN: clocktable :tstart "<2006-08-10 Thu 10:00>"
                    :tend "<2006-08-10 Thu 12:00>"
#+END: clocktable
@end example
A range starting a week ago and ending right now could be written as
@example
#+BEGIN: clocktable :tstart "<-1w>" :tend "<now>"
#+END: clocktable
@end example
A summary of the current subtree with % times would be
@example
#+BEGIN: clocktable :scope subtree :link t :formula %
#+END: clocktable
@end example
A horizontally compact representation of everything clocked during last week
would be
@example
#+BEGIN: clocktable :scope agenda :block lastweek :compact t
#+END: clocktable
@end example

@node Resolving idle time
@subsection Resolving idle time and continuous clocking

@subsubheading Resolving idle time
@cindex resolve idle time
@vindex org-clock-x11idle-program-name

@cindex idle, resolve, dangling
If you clock in on a work item, and then walk away from your
computer---perhaps to take a phone call---you often need to ``resolve'' the
time you were away by either subtracting it from the current clock, or
applying it to another one.

@vindex org-clock-idle-time
By customizing the variable @code{org-clock-idle-time} to some integer, such
as 10 or 15, Emacs can alert you when you get back to your computer after
being idle for that many minutes@footnote{On computers using macOS,
idleness is based on actual user idleness, not just Emacs' idle time.  For
X11, you can install a utility program @file{x11idle.c}, available in the
@code{contrib/scripts} directory of the Org git distribution, or install the
@file{xprintidle} package and set it to the variable
@code{org-clock-x11idle-program-name} if you are running Debian, to get the
same general treatment of idleness.  On other systems, idle time refers to
Emacs idle time only.}, and ask what you want to do with the idle time.
There will be a question waiting for you when you get back, indicating how
much idle time has passed (constantly updated with the current amount), as
well as a set of choices to correct the discrepancy:

@table @kbd
@item k
To keep some or all of the minutes and stay clocked in, press @kbd{k}.  Org
will ask how many of the minutes to keep.  Press @key{RET} to keep them all,
effectively changing nothing, or enter a number to keep that many minutes.
@item K
If you use the shift key and press @kbd{K}, it will keep however many minutes
you request and then immediately clock out of that task.  If you keep all of
the minutes, this is the same as just clocking out of the current task.
@item s
To keep none of the minutes, use @kbd{s} to subtract all the away time from
the clock, and then check back in from the moment you returned.
@item S
To keep none of the minutes and just clock out at the start of the away time,
use the shift key and press @kbd{S}.  Remember that using shift will always
leave you clocked out, no matter which option you choose.
@item C
To cancel the clock altogether, use @kbd{C}.  Note that if instead of
canceling you subtract the away time, and the resulting clock amount is less
than a minute, the clock will still be canceled rather than clutter up the
log with an empty entry.
@end table

What if you subtracted those away minutes from the current clock, and now
want to apply them to a new clock?  Simply clock in to any task immediately
after the subtraction.  Org will notice that you have subtracted time ``on
the books'', so to speak, and will ask if you want to apply those minutes to
the next task you clock in on.

There is one other instance when this clock resolution magic occurs.  Say you
were clocked in and hacking away, and suddenly your cat chased a mouse who
scared a hamster that crashed into your UPS's power button!  You suddenly
lose all your buffers, but thanks to auto-save you still have your recent Org
mode changes, including your last clock in.

If you restart Emacs and clock into any task, Org will notice that you have a
dangling clock which was never clocked out from your last session.  Using
that clock's starting time as the beginning of the unaccounted-for period,
Org will ask how you want to resolve that time.  The logic and behavior is
identical to dealing with away time due to idleness; it is just happening due
to a recovery event rather than a set amount of idle time.

You can also check all the files visited by your Org agenda for dangling
clocks at any time using @kbd{M-x org-resolve-clocks @key{RET}} (or @kbd{C-c
C-x C-z}).

@subsubheading Continuous clocking
@cindex continuous clocking
@vindex org-clock-continuously

You may want to start clocking from the time when you clocked out the
previous task.  To enable this systematically, set @code{org-clock-continuously}
to @code{t}.  Each time you clock in, Org retrieves the clock-out time of the
last clocked entry for this session, and start the new clock from there.

If you only want this from time to time, use three universal prefix arguments
with @code{org-clock-in} and two @kbd{C-u C-u} with @code{org-clock-in-last}.

@node Effort estimates
@section Effort estimates
@cindex effort estimates

@cindex property, @code{EFFORT}
If you want to plan your work in a very detailed way, or if you need to
produce offers with quotations of the estimated work effort, you may want to
assign effort estimates to entries.  If you are also clocking your work, you
may later want to compare the planned effort with the actual working time,
a great way to improve planning estimates.  Effort estimates are stored in
a special property @code{EFFORT}.  You can set the effort for an entry with
the following commands:

@table @kbd
@orgcmd{C-c C-x e,org-set-effort}
Set the effort estimate for the current entry.  With a numeric prefix
argument, set it to the Nth allowed value (see below).  This command is also
accessible from the agenda with the @kbd{e} key.
@orgcmd{C-c C-x C-e,org-clock-modify-effort-estimate}
Modify the effort estimate of the item currently being clocked.
@end table

Clearly the best way to work with effort estimates is through column view
(@pxref{Column view}).  You should start by setting up discrete values for
effort estimates, and a @code{COLUMNS} format that displays these values
together with clock sums (if you want to clock your time).  For a specific
buffer you can use

@example
#+PROPERTY: Effort_ALL 0 0:10 0:30 1:00 2:00 3:00 4:00 5:00 6:00 7:00
#+COLUMNS: %40ITEM(Task) %17Effort(Estimated Effort)@{:@} %CLOCKSUM
@end example

@noindent
@vindex org-global-properties
@vindex org-columns-default-format
or, even better, you can set up these values globally by customizing the
variables @code{org-global-properties} and @code{org-columns-default-format}.
In particular if you want to use this setup also in the agenda, a global
setup may be advised.

The way to assign estimates to individual items is then to switch to column
mode, and to use @kbd{S-@key{RIGHT}} and @kbd{S-@key{LEFT}} to change the
value.  The values you enter will immediately be summed up in the hierarchy.
In the column next to it, any clocked time will be displayed.

@vindex org-agenda-columns-add-appointments-to-effort-sum
If you switch to column view in the daily/weekly agenda, the effort column
will summarize the estimated work effort for each day@footnote{Please note
the pitfalls of summing hierarchical data in a flat list (@pxref{Agenda
column view}).}, and you can use this to find space in your schedule.  To get
an overview of the entire part of the day that is committed, you can set the
option @code{org-agenda-columns-add-appointments-to-effort-sum}.  The
appointments on a day that take place over a specified time interval will
then also be added to the load estimate of the day.

Effort estimates can be used in secondary agenda filtering that is triggered
with the @kbd{/} key in the agenda (@pxref{Agenda commands}).  If you have
these estimates defined consistently, two or three key presses will narrow
down the list to stuff that fits into an available time slot.

@node Timers
@section Taking notes with a timer
@cindex relative timer
@cindex countdown timer
@kindex ;

Org provides two types of timers.  There is a relative timer that counts up,
which can be useful when taking notes during, for example, a meeting or
a video viewing.  There is also a countdown timer.

The relative and countdown are started with separate commands.

@table @kbd
@orgcmd{C-c C-x 0,org-timer-start}
Start or reset the relative timer.  By default, the timer is set to 0.  When
called with a @kbd{C-u} prefix, prompt the user for a starting offset.  If
there is a timer string at point, this is taken as the default, providing a
convenient way to restart taking notes after a break in the process.  When
called with a double prefix argument @kbd{C-u C-u}, change all timer strings
in the active region by a certain amount.  This can be used to fix timer
strings if the timer was not started at exactly the right moment.
@orgcmd{C-c C-x ;,org-timer-set-timer}
Start a countdown timer.  The user is prompted for a duration.
@code{org-timer-default-timer} sets the default countdown value.  Giving
a numeric prefix argument overrides this default value.  This command is
available as @kbd{;} in agenda buffers.
@end table

Once started, relative and countdown timers are controlled with the same
commands.

@table @kbd
@orgcmd{C-c C-x .,org-timer}
Insert the value of the current relative or countdown timer into the buffer.
If no timer is running, the relative timer will be started.  When called with
a prefix argument, the relative timer is restarted.
@orgcmd{C-c C-x -,org-timer-item}
Insert a description list item with the value of the current relative or
countdown timer.  With a prefix argument, first reset the relative timer to
0.
@orgcmd{M-@key{RET},org-insert-heading}
Once the timer list is started, you can also use @kbd{M-@key{RET}} to insert
new timer items.
@orgcmd{C-c C-x @comma{},org-timer-pause-or-continue}
Pause the timer, or continue it if it is already paused.
@orgcmd{C-c C-x _,org-timer-stop}
Stop the timer.  After this, you can only start a new timer, not continue the
old one.  This command also removes the timer from the mode line.
@end table

@node Capture - Refile - Archive
@chapter Capture - Refile - Archive
@cindex capture

An important part of any organization system is the ability to quickly
capture new ideas and tasks, and to associate reference material with them.
Org does this using a process called @i{capture}.  It also can store files
related to a task (@i{attachments}) in a special directory.  Once in the
system, tasks and projects need to be moved around.  Moving completed project
trees to an archive file keeps the system compact and fast.

@menu
* Capture::                     Capturing new stuff
* Attachments::                 Add files to tasks
* RSS feeds::                   Getting input from RSS feeds
* Protocols::                   External (e.g., Browser) access to Emacs and Org
* Refile and copy::             Moving/copying a tree from one place to another
* Archiving::                   What to do with finished projects
@end menu

@node Capture
@section Capture
@cindex capture

Capture lets you quickly store notes with little interruption of your work
flow.  Org's method for capturing new items is heavily inspired by John
Wiegley excellent @file{remember.el} package.  Up to version 6.36, Org
used a special setup for @file{remember.el}, then replaced it with
@file{org-remember.el}.  As of version 8.0, @file{org-remember.el} has
been completely replaced by @file{org-capture.el}.

If your configuration depends on @file{org-remember.el}, you need to update
it and use the setup described below.  To convert your
@code{org-remember-templates}, run the command
@example
@kbd{M-x org-capture-import-remember-templates @key{RET}}
@end example
@noindent and then customize the new variable with @kbd{M-x
customize-variable org-capture-templates}, check the result, and save the
customization.

@menu
* Setting up capture::          Where notes will be stored
* Using capture::               Commands to invoke and terminate capture
* Capture templates::           Define the outline of different note types
@end menu

@node Setting up capture
@subsection Setting up capture

The following customization sets a default target file for notes, and defines
a global key@footnote{Please select your own key, @kbd{C-c c} is only a
suggestion.}  for capturing new material.

@vindex org-default-notes-file
@smalllisp
@group
(setq org-default-notes-file (concat org-directory "/notes.org"))
(define-key global-map "\C-cc" 'org-capture)
@end group
@end smalllisp

@node Using capture
@subsection Using capture

@table @kbd
@orgcmd{C-c c,org-capture}
Call the command @code{org-capture}.  Note that this key binding is global and
not active by default: you need to install it.  If you have templates
@cindex date tree
defined @pxref{Capture templates}, it will offer these templates for
selection or use a new Org outline node as the default template.  It will
insert the template into the target file and switch to an indirect buffer
narrowed to this new node.  You may then insert the information you want.

@orgcmd{C-c C-c,org-capture-finalize}
Once you have finished entering information into the capture buffer, @kbd{C-c
C-c} will return you to the window configuration before the capture process,
so that you can resume your work without further distraction.  When called
with a prefix arg, finalize and then jump to the captured item.

@orgcmd{C-c C-w,org-capture-refile}
Finalize the capture process by refiling (@pxref{Refile and copy}) the note to
a different place.  Please realize that this is a normal refiling command
that will be executed---so the cursor position at the moment you run this
command is important.  If you have inserted a tree with a parent and
children, first move the cursor back to the parent.  Any prefix argument
given to this command will be passed on to the @code{org-refile} command.

@orgcmd{C-c C-k,org-capture-kill}
Abort the capture process and return to the previous state.

@end table

You can also call @code{org-capture} in a special way from the agenda, using
the @kbd{k c} key combination.  With this access, any timestamps inserted by
the selected capture template will default to the cursor date in the agenda,
rather than to the current date.

To find the locations of the last stored capture, use @code{org-capture} with
prefix commands:

@table @kbd
@orgkey{C-u C-c c}
Visit the target location of a capture template.  You get to select the
template in the usual way.
@orgkey{C-u C-u C-c c}
Visit the last stored capture item in its buffer.
@end table

@vindex org-capture-bookmark
@cindex @code{org-capture-last-stored}
You can also jump to the bookmark @code{org-capture-last-stored}, which will
automatically be created unless you set @code{org-capture-bookmark} to
@code{nil}.

To insert the capture at point in an Org buffer, call @code{org-capture} with
a @code{C-0} prefix argument.

@node Capture templates
@subsection Capture templates
@cindex templates, for Capture

You can use templates for different types of capture items, and
for different target locations.  The easiest way to create such templates is
through the customize interface.

@table @kbd
@orgkey{C-c c C}
@vindex org-capture-templates
Customize the variable @code{org-capture-templates}.
@end table

Before we give the formal description of template definitions, let's look at
an example.  Say you would like to use one template to create general TODO
entries, and you want to put these entries under the heading @samp{Tasks} in
your file @file{~/org/gtd.org}.  Also, a date tree in the file
@file{journal.org} should capture journal entries.  A possible configuration
would look like:

@smalllisp
@group
(setq org-capture-templates
 '(("t" "Todo" entry (file+headline "~/org/gtd.org" "Tasks")
        "* TODO %?\n  %i\n  %a")
   ("j" "Journal" entry (file+olp+datetree "~/org/journal.org")
        "* %?\nEntered on %U\n  %i\n  %a")))
@end group
@end smalllisp

@noindent If you then press @kbd{C-c c t}, Org will prepare the template
for you like this:
@example
* TODO
  [[file:@var{link to where you initiated capture}]]
@end example

@noindent
During expansion of the template, @code{%a} has been replaced by a link to
the location from where you called the capture command.  This can be
extremely useful for deriving tasks from emails, for example.  You fill in
the task definition, press @kbd{C-c C-c} and Org returns you to the same
place where you started the capture process.

To define special keys to capture to a particular template without going
through the interactive template selection, you can create your key binding
like this:

@lisp
(define-key global-map "\C-cx"
   (lambda () (interactive) (org-capture nil "x")))
@end lisp

@menu
* Template elements::           What is needed for a complete template entry
* Template expansion::          Filling in information about time and context
* Templates in contexts::       Only show a template in a specific context
@end menu

@node Template elements
@subsubsection Template elements

Now lets look at the elements of a template definition.  Each entry in
@code{org-capture-templates} is a list with the following items:

@table @var
@item keys
The keys that will select the template, as a string, characters
only, for example @code{"a"} for a template to be selected with a
single key, or @code{"bt"} for selection with two keys.  When using
several keys, keys using the same prefix key must be sequential
in the list and preceded by a 2-element entry explaining the
prefix key, for example
@smalllisp
         ("b" "Templates for marking stuff to buy")
@end smalllisp
@noindent If you do not define a template for the @kbd{C} key, this key will
be used to open the customize buffer for this complex variable.

@item description
A short string describing the template, which will be shown during
selection.

@item type
The type of entry, a symbol.  Valid values are:

@table @code
@item entry
An Org mode node, with a headline.  Will be filed as the child of the target
entry or as a top-level entry.  The target file should be an Org mode file.
@item item
A plain list item, placed in the first plain  list at the target
location.  Again the target file should be an Org file.
@item checkitem
A checkbox item.  This only differs from the plain list item by the
default template.
@item table-line
a new line in the first table at the target location.  Where exactly the
line will be inserted depends on the properties @code{:prepend} and
@code{:table-line-pos} (see below).
@item plain
Text to be inserted as it is.
@end table

@item target
@vindex org-default-notes-file
Specification of where the captured item should be placed.  In Org mode
files, targets usually define a node.  Entries will become children of this
node.  Other types will be added to the table or list in the body of this
node.  Most target specifications contain a file name.  If that file name is
the empty string, it defaults to @code{org-default-notes-file}.  A file can
also be given as a variable or as a function called with no argument.  When
an absolute path is not specified for a target, it is taken as relative to
@code{org-directory}.

Valid values are:

@table @code
@item (file "path/to/file")
Text will be placed at the beginning or end of that file.

@item (id "id of existing org entry")
Filing as child of this entry, or in the body of the entry.

@item (file+headline "path/to/file" "node headline")
Fast configuration if the target heading is unique in the file.

@item (file+olp "path/to/file" "Level 1 heading" "Level 2" ...)
For non-unique headings, the full path is safer.

@item (file+regexp  "path/to/file" "regexp to find location")
Use a regular expression to position the cursor.

@item (file+olp+datetree "path/to/file" [ "Level 1 heading" ....])
This target@footnote{Org used to offer four different targets for date/week
tree capture.  Now, Org automatically translates these to use
@code{file+olp+datetree}, applying the @code{:time-prompt} and
@code{:tree-type} properties.  Please rewrite your date/week-tree targets
using @code{file+olp+datetree} since the older targets are now deprecated.}
will create a heading in a date tree@footnote{A date tree is an outline
structure with years on the highest level, months or ISO-weeks as sublevels
and then dates on the lowest level.  Tags are allowed in the tree structure.}
for today's date.  If the optional outline path is given, the tree will be
built under the node it is pointing to, instead of at top level.  Check out
the @code{:time-prompt} and @code{:tree-type} properties below for additional
options.

@item (file+function "path/to/file" function-finding-location)
A function to find the right location in the file.

@item (clock)
File to the entry that is currently being clocked.

@item (function function-finding-location)
Most general way: write your own function which both visits
the file and moves point to the right location.
@end table

@item template
The template for creating the capture item.  If you leave this empty, an
appropriate default template will be used.  Otherwise this is a string with
escape codes, which will be replaced depending on time and context of the
capture call.  The string with escapes may be loaded from a template file,
using the special syntax @code{(file "path/to/template")}.  See below for
more details.

@item properties
The rest of the entry is a property list of additional options.
Recognized properties are:

@table @code
@item :prepend
Normally new captured information will be appended at
the target location (last child, last table line, last list item...).
Setting this property will change that.

@item :immediate-finish
When set, do not offer to edit the information, just
file it away immediately.  This makes sense if the template only needs
information that can be added automatically.

@item :empty-lines
Set this to the number of lines to insert
before and after the new item.  Default 0, only common other value is 1.

@item :clock-in
Start the clock in this item.

@item :clock-keep
Keep the clock running when filing the captured entry.

@item :clock-resume
If starting the capture interrupted a clock, restart that clock when finished
with the capture.  Note that @code{:clock-keep} has precedence over
@code{:clock-resume}.  When setting both to @code{t}, the current clock will
run and the previous one will not be resumed.

@item :time-prompt
Prompt for a date/time to be used for date/week trees and when filling the
template.  Without this property, capture uses the current date and time.
Even if this property has not been set, you can force the same behavior by
calling @code{org-capture} with a @kbd{C-1} prefix argument.

@item :tree-type
When `week', make a week tree instead of the month tree, i.e. place the
headings for each day under a heading with the current iso week.

@item :unnarrowed
Do not narrow the target buffer, simply show the full buffer.  Default is to
narrow it so that you only see the new material.

@item :table-line-pos
Specification of the location in the table where the new line should be
inserted. It can be a string, a variable holding a string or a function
returning a string. The string should look like @code{"II-3"} meaning that
the new line should become the third line before the second horizontal
separator line.

@item :kill-buffer
If the target file was not yet visited when capture was invoked, kill the
buffer again after capture is completed.
@end table
@end table

@node Template expansion
@subsubsection Template expansion

In the template itself, special @kbd{%}-escapes@footnote{If you need one of
these sequences literally, escape the @kbd{%} with a backslash.} allow
dynamic insertion of content.  The templates are expanded in the order given here:

@smallexample
%[@var{file}]     @r{Insert the contents of the file given by @var{file}.}
%(@var{sexp})     @r{Evaluate Elisp @var{sexp} and replace with the result.}
                  @r{For convenience, %:keyword (see below) placeholders}
                  @r{within the expression will be expanded prior to this.}
                  @r{The sexp must return a string.}
%<...>      @r{The result of format-time-string on the ... format specification.}
%t          @r{Timestamp, date only.}
%T          @r{Timestamp, with date and time.}
%u, %U      @r{Like the above, but inactive timestamps.}
%i          @r{Initial content, the region when capture is called while the}
            @r{region is active.}
            @r{The entire text will be indented like @code{%i} itself.}
%a          @r{Annotation, normally the link created with @code{org-store-link}.}
%A          @r{Like @code{%a}, but prompt for the description part.}
%l          @r{Like %a, but only insert the literal link.}
%c          @r{Current kill ring head.}
%x          @r{Content of the X clipboard.}
%k          @r{Title of the currently clocked task.}
%K          @r{Link to the currently clocked task.}
%n          @r{User name (taken from @code{user-full-name}).}
%f          @r{File visited by current buffer when org-capture was called.}
%F          @r{Full path of the file or directory visited by current buffer.}
%:keyword   @r{Specific information for certain link types, see below.}
%^g         @r{Prompt for tags, with completion on tags in target file.}
%^G         @r{Prompt for tags, with completion all tags in all agenda files.}
%^t         @r{Like @code{%t}, but prompt for date.  Similarly @code{%^T}, @code{%^u}, @code{%^U}.}
            @r{You may define a prompt like @code{%^@{Birthday@}t}.}
%^C         @r{Interactive selection of which kill or clip to use.}
%^L         @r{Like @code{%^C}, but insert as link.}
%^@{@var{prop}@}p   @r{Prompt the user for a value for property @var{prop}.}
%^@{@var{prompt}@}  @r{prompt the user for a string and replace this sequence with it.}
            @r{You may specify a default value and a completion table with}
            @r{%^@{prompt|default|completion2|completion3...@}.}
            @r{The arrow keys access a prompt-specific history.}
%\1 @dots{} %\N @r{Insert the text entered at the Nth %^@{@var{prompt}@}, where @code{N} is}
            @r{a number, starting from 1.@footnote{As required in Emacs
               Lisp, it is necessary to escape any backslash character in
               a string with another backslash.  So, in order to use
               @samp{%\1} placeholder, you need to write @samp{%\\1} in
               the template.}}
%?          @r{After completing the template, position cursor here.}
@end smallexample

@noindent
For specific link types, the following keywords will be
defined@footnote{If you define your own link types (@pxref{Adding
hyperlink types}), any property you store with
@code{org-store-link-props} can be accessed in capture templates in a
similar way.}:

@vindex org-from-is-user-regexp
@smallexample
Link type                        |  Available keywords
---------------------------------+----------------------------------------------
bbdb                             |  %:name %:company
irc                              |  %:server %:port %:nick
vm, vm-imap, wl, mh, mew, rmail, |  %:type %:subject %:message-id
gnus, notmuch                    |  %:from %:fromname %:fromaddress
                                 |  %:to   %:toname   %:toaddress
                                 |  %:date @r{(message date header field)}
                                 |  %:date-timestamp @r{(date as active timestamp)}
                                 |  %:date-timestamp-inactive @r{(date as inactive timestamp)}
                                 |  %:fromto @r{(either "to NAME" or "from NAME")@footnote{This will always be the other, not the user.  See the variable @code{org-from-is-user-regexp}.}}
gnus                             |  %:group, @r{for messages also all email fields}
eww, w3, w3m                     |  %:url
info                             |  %:file %:node
calendar                         |  %:date
org-protocol                     |  %:link %:description %:annotation
@end smallexample

@noindent
To place the cursor after template expansion use:

@smallexample
%?          @r{After completing the template, position cursor here.}
@end smallexample

@node Templates in contexts
@subsubsection Templates in contexts

@vindex org-capture-templates-contexts
To control whether a capture template should be accessible from a specific
context, you can customize @code{org-capture-templates-contexts}.  Let's say
for example that you have a capture template @code{"p"} for storing Gnus
emails containing patches.  Then you would configure this option like this:

@smalllisp
(setq org-capture-templates-contexts
      '(("p" (in-mode . "message-mode"))))
@end smalllisp

You can also tell that the command key @code{"p"} should refer to another
template.  In that case, add this command key like this:

@smalllisp
(setq org-capture-templates-contexts
      '(("p" "q" (in-mode . "message-mode"))))
@end smalllisp

See the docstring of the variable for more information.

@node Attachments
@section Attachments
@cindex attachments

@vindex org-attach-directory
It is often useful to associate reference material with an outline node/task.
Small chunks of plain text can simply be stored in the subtree of a project.
Hyperlinks (@pxref{Hyperlinks}) can establish associations with
files that live elsewhere on your computer or in the cloud, like emails or
source code files belonging to a project.  Another method is @i{attachments},
which are files located in a directory belonging to an outline node.  Org
uses directories named by the unique ID of each entry.  These directories are
located in the @file{data} directory which lives in the same directory where
your Org file lives@footnote{If you move entries or Org files from one
directory to another, you may want to configure @code{org-attach-directory}
to contain an absolute path.}.  If you initialize this directory with
@code{git init}, Org will automatically commit changes when it sees them.
The attachment system has been contributed to Org by John Wiegley.

In cases where it seems better to do so, you can also attach a directory of your
choice to an entry.  You can also make children inherit the attachment
directory from a parent, so that an entire subtree uses the same attached
directory.

@noindent The following commands deal with attachments:

@table @kbd
@orgcmd{C-c C-a,org-attach}
The dispatcher for commands related to the attachment system.  After these
keys, a list of commands is displayed and you must press an additional key
to select a command:

@table @kbd
@orgcmdtkc{a,C-c C-a a,org-attach-attach}
@vindex org-attach-method
Select a file and move it into the task's attachment directory.  The file
will be copied, moved, or linked, depending on @code{org-attach-method}.
Note that hard links are not supported on all systems.

@kindex C-c C-a c
@kindex C-c C-a m
@kindex C-c C-a l
@item c/m/l
Attach a file using the copy/move/link method.
Note that hard links are not supported on all systems.

@orgcmdtkc{u,C-c C-a u,org-attach-url}
Attach a file from URL

@orgcmdtkc{n,C-c C-a n,org-attach-new}
Create a new attachment as an Emacs buffer.

@orgcmdtkc{z,C-c C-a z,org-attach-sync}
Synchronize the current task with its attachment directory, in case you added
attachments yourself.

@orgcmdtkc{o,C-c C-a o,org-attach-open}
@vindex org-file-apps
Open current task's attachment.  If there is more than one, prompt for a
file name first.  Opening will follow the rules set by @code{org-file-apps}.
For more details, see the information on following hyperlinks
(@pxref{Handling links}).

@orgcmdtkc{O,C-c C-a O,org-attach-open-in-emacs}
Also open the attachment, but force opening the file in Emacs.

@orgcmdtkc{f,C-c C-a f,org-attach-reveal}
Open the current task's attachment directory.

@orgcmdtkc{F,C-c C-a F,org-attach-reveal-in-emacs}
Also open the directory, but force using @command{dired} in Emacs.

@orgcmdtkc{d,C-c C-a d,org-attach-delete-one}
Select and delete a single attachment.

@orgcmdtkc{D,C-c C-a D,org-attach-delete-all}
Delete all of a task's attachments.  A safer way is to open the directory in
@command{dired} and delete from there.

@orgcmdtkc{s,C-c C-a s,org-attach-set-directory}
@cindex property, @code{ATTACH_DIR}
Set a specific directory as the entry's attachment directory.  This works by
putting the directory path into the @code{ATTACH_DIR} property.

@orgcmdtkc{i,C-c C-a i,org-attach-set-inherit}
@cindex property, @code{ATTACH_DIR_INHERIT}
Set the @code{ATTACH_DIR_INHERIT} property, so that children will use the
same directory for attachments as the parent does.
@end table
@end table

@node RSS feeds
@section RSS feeds
@cindex RSS feeds
@cindex Atom feeds

Org can add and change entries based on information found in RSS feeds and
Atom feeds.  You could use this to make a task out of each new podcast in a
podcast feed.  Or you could use a phone-based note-creating service on the
web to import tasks into Org.  To access feeds, configure the variable
@code{org-feed-alist}.  The docstring of this variable has detailed
information.  Here is just an example:

@smalllisp
@group
(setq org-feed-alist
     '(("Slashdot"
         "http://rss.slashdot.org/Slashdot/slashdot"
         "~/txt/org/feeds.org" "Slashdot Entries")))
@end group
@end smalllisp

@noindent
will configure that new items from the feed provided by
@code{rss.slashdot.org} will result in new entries in the file
@file{~/org/feeds.org} under the heading @samp{Slashdot Entries}, whenever
the following command is used:

@table @kbd
@orgcmd{C-c C-x g,org-feed-update-all}
@item C-c C-x g
Collect items from the feeds configured in @code{org-feed-alist} and act upon
them.
@orgcmd{C-c C-x G,org-feed-goto-inbox}
Prompt for a feed name and go to the inbox configured for this feed.
@end table

Under the same headline, Org will create a drawer @samp{FEEDSTATUS} in which
it will store information about the status of items in the feed, to avoid
adding the same item several times.

For more information, including how to read atom feeds, see
@file{org-feed.el} and the docstring of @code{org-feed-alist}.

@node Protocols
@section Protocols for external access
@cindex protocols, for external access

Org protocol is a mean to trigger custom actions in Emacs from external
applications.  Any application that supports calling external programs with
an URL as argument may be used with this functionality.  For example, you can
configure bookmarks in your web browser to send a link to the current page to
Org and create a note from it using capture (@pxref{Capture}).  You can also
create a bookmark that tells Emacs to open the local source file of a remote
website you are browsing.

@cindex Org protocol, set-up
@cindex Installing Org protocol
In order to use Org protocol from an application, you need to register
@samp{org-protocol://} as a valid scheme-handler.  External calls are passed
to Emacs through the @code{emacsclient} command, so you also need to ensure
an Emacs server is running.  More precisely, when the application calls

@example
emacsclient org-protocol://PROTOCOL?key1=val1&key2=val2
@end example

@noindent
Emacs calls the handler associated to @samp{PROTOCOL} with argument
@samp{(:key1 val1 :key2 val2)}.

@cindex protocol, new protocol
@cindex defining new protocols
Org protocol comes with three predefined protocols, detailed in the following
sections.  Configure @code{org-protocol-protocol-alist} to define your own.

@menu
* @code{store-link} protocol::  Store a link, push URL to kill-ring.
* @code{capture} protocol::     Fill a buffer with external information.
* @code{open-source} protocol::  Edit published contents.
@end menu

@node @code{store-link} protocol
@subsection @code{store-link} protocol
@cindex store-link protocol
@cindex protocol, store-link

Using @code{store-link} handler, you can copy links, insertable through
@kbd{M-x org-insert-link} or yanking thereafter.  More precisely, the command

@example
emacsclient org-protocol://store-link?url=URL&title=TITLE
@end example

@noindent
stores the following link:

@example
[[URL][TITLE]]
@end example

In addition, @samp{URL} is pushed on the kill-ring for yanking.  You need to
encode @samp{URL} and @samp{TITLE} if they contain slashes, and probably
quote those for the shell.

To use this feature from a browser, add a bookmark with an arbitrary name,
e.g., @samp{Org: store-link} and enter this as @emph{Location}:

@example
javascript:location.href='org-protocol://store-link?url='+
      encodeURIComponent(location.href);
@end example

@node @code{capture} protocol
@subsection @code{capture} protocol
@cindex capture protocol
@cindex protocol, capture

Activating @code{capture} handler pops up a @samp{Capture} buffer and fills
the capture template associated to the @samp{X} key with them.

@example
emacsclient org-protocol://capture?template=X?url=URL?title=TITLE?body=BODY
@end example

To use this feature, add a bookmark with an arbitrary name, e.g.  @samp{Org:
capture} and enter this as @samp{Location}:

@example
javascript:location.href='org-protocol://template=x'+
      '&url='+encodeURIComponent(window.location.href)+
      '&title='+encodeURIComponent(document.title)+
      '&body='+encodeURIComponent(window.getSelection());
@end example

@vindex org-protocol-default-template-key
The result depends on the capture template used, which is set in the bookmark
itself, as in the example above, or in
@code{org-protocol-default-template-key}.

@cindex capture, %:link placeholder
@cindex %:link template expansion in capture
@cindex capture, %:description placeholder
@cindex %:description template expansion in capture
@cindex capture, %:annotation placeholder
@cindex %:annotation template expansion in capture
The following template placeholders are available:

@example
%:link          The URL
%:description   The webpage title
%:annotation    Equivalent to [[%:link][%:description]]
%i              The selected text
@end example

@node @code{open-source} protocol
@subsection @code{open-source} protocol
@cindex open-source protocol
@cindex protocol, open-source

The @code{open-source} handler is designed to help with editing local sources
when reading a document.  To that effect, you can use a bookmark with the
following location:

@example
javascript:location.href='org-protocol://open-source?&url='+
      encodeURIComponent(location.href)
@end example

@cindex protocol, open-source, @code{:base-url} property
@cindex @code{:base-url} property in open-source protocol
@cindex protocol, open-source, @code{:working-directory} property
@cindex @code{:working-directory} property in open-source protocol
@cindex protocol, open-source, @code{:online-suffix} property
@cindex @code{:online-suffix} property in open-source protocol
@cindex protocol, open-source, @code{:working-suffix} property
@cindex @code{:working-suffix} property in open-source protocol
@vindex org-protocol-project-alist
The variable @code{org-protocol-project-alist} maps URLs to local file names,
by stripping URL parameters from the end and replacing the @code{:base-url}
with @code{:working-directory} and @code{:online-suffix} with
@code{:working-suffix}.  For example, assuming you own a local copy of
@url{https://orgmode.org/worg/} contents at @file{/home/user/worg}, you can
set @code{org-protocol-project-alist} to the following

@lisp
(setq org-protocol-project-alist
      '(("Worg"
	 :base-url "https://orgmode.org/worg/"
	 :working-directory "/home/user/worg/"
	 :online-suffix ".html"
	 :working-suffix ".org")))
@end lisp

@noindent
If you are now browsing
@url{https://orgmode.org/worg/org-contrib/org-protocol.html} and find a typo
or have an idea about how to enhance the documentation, simply click the
bookmark and start editing.

@cindex handle rewritten URL in open-source protocol
@cindex protocol, open-source rewritten URL
However, such mapping may not yield the desired results.  Suppose you
maintain an online store located at @url{http://example.com/}.  The local
sources reside in @file{/home/user/example/}.  It is common practice to serve
all products in such a store through one file and rewrite URLs that do not
match an existing file on the server.  That way, a request to
@url{http://example.com/print/posters.html} might be rewritten on the server
to something like
@url{http://example.com/shop/products.php/posters.html.php}.  The
@code{open-source} handler probably cannot find a file named
@file{/home/user/example/print/posters.html.php} and fails.

@cindex protocol, open-source, @code{:rewrites} property
@cindex @code{:rewrites property} in open-source protocol
Such an entry in @code{org-protocol-project-alist} may hold an additional
property @code{:rewrites}.  This property is a list of cons cells, each of
which maps a regular expression to a path relative to the
@code{:working-directory}.

Now map the URL to the path @file{/home/user/example/products.php} by adding
@code{:rewrites} rules like this:

@lisp
(setq org-protocol-project-alist
      '(("example.com"
         :base-url "http://example.com/"
         :working-directory "/home/user/example/"
         :online-suffix ".php"
         :working-suffix ".php"
         :rewrites (("example.com/print/" . "products.php")
                    ("example.com/$" . "index.php")))))
@end lisp

@noindent
Since @samp{example.com/$} is used as a regular expression, it maps
@url{http://example.com/}, @url{https://example.com},
@url{http://www.example.com/} and similar to
@file{/home/user/example/index.php}.

The @code{:rewrites} rules are searched as a last resort if and only if no
existing file name is matched.

@cindex protocol, open-source, set-up mapping
@cindex set-up mappings in open-source protocol
@findex org-protocol-create
@findex org-protocol-create-for-org
Two functions can help you filling @code{org-protocol-project-alist} with
valid contents: @code{org-protocol-create} and
@code{org-protocol-create-for-org}.  The latter is of use if you're editing
an Org file that is part of a publishing project.

@node Refile and copy
@section Refile and copy
@cindex refiling notes
@cindex copying notes

When reviewing the captured data, you may want to refile or to copy some of
the entries into a different list, for example into a project.  Cutting,
finding the right location, and then pasting the note is cumbersome.  To
simplify this process, you can use the following special command:

@table @kbd
@orgcmd{C-c M-w,org-copy}
@findex org-copy
Copying works like refiling, except that the original note is not deleted.
@orgcmd{C-c C-w,org-refile}
@findex org-refile
@vindex org-reverse-note-order
@vindex org-refile-targets
@vindex org-refile-use-outline-path
@vindex org-outline-path-complete-in-steps
@vindex org-refile-allow-creating-parent-nodes
@vindex org-log-refile
@vindex org-refile-use-cache
@vindex org-refile-keep
Refile the entry or region at point.  This command offers possible locations
for refiling the entry and lets you select one with completion.  The item (or
all items in the region) is filed below the target heading as a subitem.
Depending on @code{org-reverse-note-order}, it will be either the first or
last subitem.@*
By default, all level 1 headlines in the current buffer are considered to be
targets, but you can have more complex definitions across a number of files.
See the variable @code{org-refile-targets} for details.  If you would like to
select a location via a file-path-like completion along the outline path, see
the variables @code{org-refile-use-outline-path} and
@code{org-outline-path-complete-in-steps}.  If you would like to be able to
create new nodes as new parents for refiling on the fly, check the
variable @code{org-refile-allow-creating-parent-nodes}.
When the variable @code{org-log-refile}@footnote{with corresponding
@code{#+STARTUP} keywords @code{logrefile}, @code{lognoterefile},
and @code{nologrefile}} is set, a timestamp or a note will be
recorded when an entry has been refiled.
@orgkey{C-u C-c C-w}
Use the refile interface to jump to a heading.
@orgcmd{C-u C-u C-c C-w,org-refile-goto-last-stored}
Jump to the location where @code{org-refile} last moved a tree to.
@item C-2 C-c C-w
Refile as the child of the item currently being clocked.
@item C-3 C-c C-w
Refile and keep the entry in place.  Also see @code{org-refile-keep} to make
this the default behavior, and beware that this may result in duplicated
@code{ID} properties.
@orgcmdtkc{C-0 C-c C-w @ @r{or} @ C-u C-u C-u C-c C-w,C-0 C-c C-w,org-refile-cache-clear}
Clear the target cache.  Caching of refile targets can be turned on by
setting @code{org-refile-use-cache}.  To make the command see new possible
targets, you have to clear the cache with this command.
@end table

@node Archiving
@section Archiving
@cindex archiving

When a project represented by a (sub)tree is finished, you may want
to move the tree out of the way and to stop it from contributing to the
agenda.  Archiving is important to keep your working files compact and global
searches like the construction of agenda views fast.

@table @kbd
@orgcmd{C-c C-x C-a,org-archive-subtree-default}
@vindex org-archive-default-command
Archive the current entry using the command specified in the variable
@code{org-archive-default-command}.
@end table

@menu
* Moving subtrees::             Moving a tree to an archive file
* Internal archiving::          Switch off a tree but keep it in the file
@end menu

@node Moving subtrees
@subsection Moving a tree to the archive file
@cindex external archiving

The most common archiving action is to move a project tree to another file,
the archive file.

@table @kbd
@orgcmdkskc{C-c C-x C-s,C-c $,org-archive-subtree}
@vindex org-archive-location
Archive the subtree starting at the cursor position to the location
given by @code{org-archive-location}.
@orgkey{C-u C-c C-x C-s}
Check if any direct children of the current headline could be moved to
the archive.  To do this, each subtree is checked for open TODO entries.
If none are found, the command offers to move it to the archive
location.  If the cursor is @emph{not} on a headline when this command
is invoked, the level 1 trees will be checked.
@orgkey{C-u C-u C-c C-x C-s}
As above, but check subtree for timestamps instead of TODO entries.  The
command will offer to archive the subtree if it @emph{does} contain a
timestamp, and that timestamp is in the past.
@end table

@cindex archive locations
The default archive location is a file in the same directory as the
current file, with the name derived by appending @file{_archive} to the
current file name.  You can also choose what heading to file archived
items under, with the possibility to add them to a datetree in a file.
For information and examples on how to specify the file and the heading,
see the documentation string of the variable
@code{org-archive-location}.

There is also an in-buffer option for setting this variable, for example:

@cindex @code{#+ARCHIVE}
@example
#+ARCHIVE: %s_done::
@end example

@cindex property, @code{ARCHIVE}
@noindent
If you would like to have a special ARCHIVE location for a single entry
or a (sub)tree, give the entry an @code{:ARCHIVE:} property with the
location as the value (@pxref{Properties and columns}).

@vindex org-archive-save-context-info
When a subtree is moved, it receives a number of special properties that
record context information like the file from where the entry came, its
outline path the archiving time etc.  Configure the variable
@code{org-archive-save-context-info} to adjust the amount of information
added.


@node Internal archiving
@subsection Internal archiving

@cindex archive tag
If you want to just switch off---for agenda views---certain subtrees without
moving them to a different file, you can use the archive tag.

A headline that is marked with the @samp{:ARCHIVE:} tag (@pxref{Tags}) stays
at its location in the outline tree, but behaves in the following way:
@itemize @minus
@item
@vindex org-cycle-open-archived-trees
It does not open when you attempt to do so with a visibility cycling
command (@pxref{Visibility cycling}).  You can force cycling archived
subtrees with @kbd{C-@key{TAB}}, or by setting the option
@code{org-cycle-open-archived-trees}.  Also normal outline commands like
@code{show-all} will open archived subtrees.
@item
@vindex org-sparse-tree-open-archived-trees
During sparse tree construction (@pxref{Sparse trees}), matches in
archived subtrees are not exposed, unless you configure the option
@code{org-sparse-tree-open-archived-trees}.
@item
@vindex org-agenda-skip-archived-trees
During agenda view construction (@pxref{Agenda views}), the content of
archived trees is ignored unless you configure the option
@code{org-agenda-skip-archived-trees}, in which case these trees will always
be included.  In the agenda you can press @kbd{v a} to get archives
temporarily included.
@item
@vindex org-export-with-archived-trees
Archived trees are not exported (@pxref{Exporting}), only the headline
is.  Configure the details using the variable
@code{org-export-with-archived-trees}.
@item
@vindex org-columns-skip-archived-trees
Archived trees are excluded from column view unless the variable
@code{org-columns-skip-archived-trees} is configured to @code{nil}.
@end itemize

The following commands help manage the ARCHIVE tag:

@table @kbd
@orgcmd{C-c C-x a,org-toggle-archive-tag}
Toggle the ARCHIVE tag for the current headline.  When the tag is set,
the headline changes to a shadowed face, and the subtree below it is
hidden.
@orgkey{C-u C-c C-x a}
Check if any direct children of the current headline should be archived.
To do this, each subtree is checked for open TODO entries.  If none are
found, the command offers to set the ARCHIVE tag for the child.  If the
cursor is @emph{not} on a headline when this command is invoked, the
level 1 trees will be checked.
@orgcmd{C-@key{TAB},org-force-cycle-archived}
Cycle a tree even if it is tagged with ARCHIVE.
@orgcmd{C-c C-x A,org-archive-to-archive-sibling}
Move the current entry to the @emph{Archive Sibling}.  This is a sibling of
the entry with the heading @samp{Archive} and the tag @samp{ARCHIVE}.  The
entry becomes a child of that sibling and in this way retains a lot of its
original context, including inherited tags and approximate position in the
outline.
@end table


@node Agenda views
@chapter Agenda views
@cindex agenda views

Due to the way Org works, TODO items, time-stamped items, and
tagged headlines can be scattered throughout a file or even a number of
files.  To get an overview of open action items, or of events that are
important for a particular date, this information must be collected,
sorted and displayed in an organized way.

Org can select items based on various criteria and display them
in a separate buffer.  Six different view types are provided:

@itemize @bullet
@item
an @emph{agenda} that is like a calendar and shows information
for specific dates,
@item
a @emph{TODO list} that covers all unfinished
action items,
@item
a @emph{match view}, showings headlines based on the tags, properties, and
TODO state associated with them,
@item
a @emph{text search view} that shows all entries from multiple files
that contain specified keywords,
@item
a @emph{stuck projects view} showing projects that currently don't move
along, and
@item
@emph{custom views} that are special searches and combinations of different
views.
@end itemize

@noindent
The extracted information is displayed in a special @emph{agenda
buffer}.  This buffer is read-only, but provides commands to visit the
corresponding locations in the original Org files, and even to
edit these files remotely.

@vindex org-agenda-skip-comment-trees
@vindex org-agenda-skip-archived-trees
@cindex commented entries, in agenda views
@cindex archived entries, in agenda views
By default, the report ignores commented (@pxref{Comment lines}) and archived
(@pxref{Internal archiving}) entries.  You can override this by setting
@code{org-agenda-skip-comment-trees} and
@code{org-agenda-skip-archived-trees} to @code{nil}.

@vindex org-agenda-window-setup
@vindex org-agenda-restore-windows-after-quit
Two variables control how the agenda buffer is displayed and whether the
window configuration is restored when the agenda exits:
@code{org-agenda-window-setup} and
@code{org-agenda-restore-windows-after-quit}.

@menu
* Agenda files::                Files being searched for agenda information
* Agenda dispatcher::           Keyboard access to agenda views
* Built-in agenda views::       What is available out of the box?
* Presentation and sorting::    How agenda items are prepared for display
* Agenda commands::             Remote editing of Org trees
* Custom agenda views::         Defining special searches and views
* Exporting agenda views::      Writing a view to a file
* Agenda column view::          Using column view for collected entries
@end menu

@node Agenda files
@section Agenda files
@cindex agenda files
@cindex files for agenda

@vindex org-agenda-files
The information to be shown is normally collected from all @emph{agenda
files}, the files listed in the variable
@code{org-agenda-files}@footnote{If the value of that variable is not a
list, but a single file name, then the list of agenda files will be
maintained in that external file.}.  If a directory is part of this list,
all files with the extension @file{.org} in this directory will be part
of the list.

Thus, even if you only work with a single Org file, that file should
be put into the list@footnote{When using the dispatcher, pressing
@kbd{<} before selecting a command will actually limit the command to
the current file, and ignore @code{org-agenda-files} until the next
dispatcher command.}.  You can customize @code{org-agenda-files}, but
the easiest way to maintain it is through the following commands

@cindex files, adding to agenda list
@table @kbd
@orgcmd{C-c [,org-agenda-file-to-front}
Add current file to the list of agenda files.  The file is added to
the front of the list.  If it was already in the list, it is moved to
the front.  With a prefix argument, file is added/moved to the end.
@orgcmd{C-c ],org-remove-file}
Remove current file from the list of agenda files.
@kindex C-,
@cindex cycling, of agenda files
@orgcmd{C-',org-cycle-agenda-files}
@itemx C-,
Cycle through agenda file list, visiting one file after the other.
@item M-x org-switchb @key{RET}
Command to use an @code{iswitchb}-like interface to switch to and between Org
buffers.
@end table

@noindent
The Org menu contains the current list of files and can be used
to visit any of them.

If you would like to focus the agenda temporarily on a file not in
this list, or on just one file in the list, or even on only a subtree in a
file, then this can be done in different ways.  For a single agenda command,
you may press @kbd{<} once or several times in the dispatcher
(@pxref{Agenda dispatcher}).  To restrict the agenda scope for an
extended period, use the following commands:

@table @kbd
@orgcmd{C-c C-x <,org-agenda-set-restriction-lock}
Permanently restrict the agenda to the current subtree.  When with a
prefix argument, or with the cursor before the first headline in a file,
the agenda scope is set to the entire file.  This restriction remains in
effect until removed with @kbd{C-c C-x >}, or by typing either @kbd{<}
or @kbd{>} in the agenda dispatcher.  If there is a window displaying an
agenda view, the new restriction takes effect immediately.
@orgcmd{C-c C-x >,org-agenda-remove-restriction-lock}
Remove the permanent restriction created by @kbd{C-c C-x <}.
@end table

@noindent
When working with @file{speedbar.el}, you can use the following commands in
the Speedbar frame:

@table @kbd
@orgcmdtkc{< @r{in the speedbar frame},<,org-speedbar-set-agenda-restriction}
Permanently restrict the agenda to the item---either an Org file or a subtree
in such a file---at the cursor in the Speedbar frame.
If there is a window displaying an agenda view, the new restriction takes
effect immediately.
@orgcmdtkc{> @r{in the speedbar frame},>,org-agenda-remove-restriction-lock}
Lift the restriction.
@end table

@node Agenda dispatcher
@section The agenda dispatcher
@cindex agenda dispatcher
@cindex dispatching agenda commands
The views are created through a dispatcher, which should be bound to a
global key---for example @kbd{C-c a} (@pxref{Activation}).  In the
following we will assume that @kbd{C-c a} is indeed how the dispatcher
is accessed and list keyboard access to commands accordingly.  After
pressing @kbd{C-c a}, an additional letter is required to execute a
command.  The dispatcher offers the following default commands:

@table @kbd
@item a
Create the calendar-like agenda (@pxref{Weekly/daily agenda}).
@item t @r{/} T
Create a list of all TODO items (@pxref{Global TODO list}).
@item m @r{/} M
Create a list of headlines matching a TAGS expression (@pxref{Matching
tags and properties}).
@item s
Create a list of entries selected by a boolean expression of keywords
and/or regular expressions that must or must not occur in the entry.
@item /
@vindex org-agenda-text-search-extra-files
Search for a regular expression in all agenda files and additionally in
the files listed in @code{org-agenda-text-search-extra-files}.  This
uses the Emacs command @code{multi-occur}.  A prefix argument can be
used to specify the number of context lines for each match, default is
1.
@item # @r{/} !
Create a list of stuck projects (@pxref{Stuck projects}).
@item <
Restrict an agenda command to the current buffer@footnote{For backward
compatibility, you can also press @kbd{1} to restrict to the current
buffer.}.  After pressing @kbd{<}, you still need to press the character
selecting the command.
@item < <
If there is an active region, restrict the following agenda command to
the region.  Otherwise, restrict it to the current subtree@footnote{For
backward compatibility, you can also press @kbd{0} to restrict to the
current region/subtree.}.  After pressing @kbd{< <}, you still need to press the
character selecting the command.

@item *
@cindex agenda, sticky
@vindex org-agenda-sticky
Toggle sticky agenda views.  By default, Org maintains only a single agenda
buffer and rebuilds it each time you change the view, to make sure everything
is always up to date.  If you often switch between agenda views and the build
time bothers you, you can turn on sticky agenda buffers or make this the
default by customizing the variable @code{org-agenda-sticky}.  With sticky
agendas, the agenda dispatcher will not recreate agenda views from scratch,
it will only switch to the selected one, and you need to update the agenda by
hand with @kbd{r} or @kbd{g} when needed.  You can toggle sticky agenda view
any time with @code{org-toggle-sticky-agenda}.
@end table

You can also define custom commands that will be accessible through the
dispatcher, just like the default commands.  This includes the
possibility to create extended agenda buffers that contain several
blocks together, for example the weekly agenda, the global TODO list and
a number of special tags matches.  @xref{Custom agenda views}.

@node Built-in agenda views
@section The built-in agenda views

In this section we describe the built-in views.

@menu
* Weekly/daily agenda::         The calendar page with current tasks
* Global TODO list::            All unfinished action items
* Matching tags and properties::  Structured information with fine-tuned search
* Search view::                 Find entries by searching for text
* Stuck projects::              Find projects you need to review
@end menu

@node Weekly/daily agenda
@subsection The weekly/daily agenda
@cindex agenda
@cindex weekly agenda
@cindex daily agenda

The purpose of the weekly/daily @emph{agenda} is to act like a page of a
paper agenda, showing all the tasks for the current week or day.

@table @kbd
@cindex @code{org-agenda}, command
@orgcmd{C-c a a,org-agenda-list}
Compile an agenda for the current week from a list of Org files.  The agenda
shows the entries for each day.  With a numeric prefix@footnote{For backward
compatibility, the universal prefix @kbd{C-u} causes all TODO entries to be
listed before the agenda.  This feature is deprecated, use the dedicated TODO
list, or a block agenda instead (@pxref{Block agenda}).}  (like @kbd{C-u 2 1
C-c a a}) you may set the number of days to be displayed.
@end table

@vindex org-agenda-span
@vindex org-agenda-ndays
@vindex org-agenda-start-day
@vindex org-agenda-start-on-weekday
The default number of days displayed in the agenda is set by the variable
@code{org-agenda-span} (or the obsolete @code{org-agenda-ndays}).  This
variable can be set to any number of days you want to see by default in the
agenda, or to a span name, such as @code{day}, @code{week}, @code{month} or
@code{year}.  For weekly agendas, the default is to start on the previous
monday (see @code{org-agenda-start-on-weekday}).  You can also set the start
date using a date shift: @code{(setq org-agenda-start-day "+10d")} will
start the agenda ten days from today in the future.

Remote editing from the agenda buffer means, for example, that you can
change the dates of deadlines and appointments from the agenda buffer.
The commands available in the Agenda buffer are listed in @ref{Agenda
commands}.

@subsubheading Calendar/Diary integration
@cindex calendar integration
@cindex diary integration

Emacs contains the calendar and diary by Edward M. Reingold.  The
calendar displays a three-month calendar with holidays from different
countries and cultures.  The diary allows you to keep track of
anniversaries, lunar phases, sunrise/set, recurrent appointments
(weekly, monthly) and more.  In this way, it is quite complementary to
Org.  It can be very useful to combine output from Org with
the diary.

In order to include entries from the Emacs diary into Org mode's
agenda, you only need to customize the variable

@lisp
(setq org-agenda-include-diary t)
@end lisp

@noindent After that, everything will happen automatically.  All diary
entries including holidays, anniversaries, etc., will be included in the
agenda buffer created by Org mode.  @key{SPC}, @key{TAB}, and
@key{RET} can be used from the agenda buffer to jump to the diary
file in order to edit existing diary entries.  The @kbd{i} command to
insert new entries for the current date works in the agenda buffer, as
well as the commands @kbd{S}, @kbd{M}, and @kbd{C} to display
Sunrise/Sunset times, show lunar phases and to convert to other
calendars, respectively.  @kbd{c} can be used to switch back and forth
between calendar and agenda.

If you are using the diary only for sexp entries and holidays, it is
faster to not use the above setting, but instead to copy or even move
the entries into an Org file.  Org mode evaluates diary-style sexp
entries, and does it faster because there is no overhead for first
creating the diary display.  Note that the sexp entries must start at
the left margin, no whitespace is allowed before them.  For example,
the following segment of an Org file will be processed and entries
will be made in the agenda:

@example
* Holidays
  :PROPERTIES:
  :CATEGORY: Holiday
  :END:
%%(org-calendar-holiday)   ; special function for holiday names

* Birthdays
  :PROPERTIES:
  :CATEGORY: Ann
  :END:
%%(org-anniversary 1956  5 14)@footnote{@code{org-anniversary} is just like @code{diary-anniversary}, but the argument order is always according to ISO and therefore independent of the value of @code{calendar-date-style}.} Arthur Dent is %d years old
%%(org-anniversary 1869 10  2) Mahatma Gandhi would be %d years old
@end example

@subsubheading Anniversaries from BBDB
@cindex BBDB, anniversaries
@cindex anniversaries, from BBDB

If you are using the Big Brothers Database to store your contacts, you will
very likely prefer to store anniversaries in BBDB rather than in a
separate Org or diary file.  Org supports this and will show BBDB
anniversaries as part of the agenda.  All you need to do is to add the
following to one of your agenda files:

@example
* Anniversaries
  :PROPERTIES:
  :CATEGORY: Anniv
  :END:
%%(org-bbdb-anniversaries)
@end example

You can then go ahead and define anniversaries for a BBDB record.  Basically,
you need to press @kbd{C-o anniversary @key{RET}} with the cursor in a BBDB
record and then add the date in the format @code{YYYY-MM-DD} or @code{MM-DD},
followed by a space and the class of the anniversary (@samp{birthday} or
@samp{wedding}, or a format string).  If you omit the class, it will default to
@samp{birthday}.  Here are a few examples, the header for the file
@file{org-bbdb.el} contains more detailed information.

@example
1973-06-22
06-22
1955-08-02 wedding
2008-04-14 %s released version 6.01 of org mode, %d years ago
@end example

After a change to BBDB, or for the first agenda display during an Emacs
session, the agenda display will suffer a short delay as Org updates its
hash with anniversaries.  However, from then on things will be very fast---much
faster in fact than a long list of @samp{%%(diary-anniversary)} entries
in an Org or Diary file.

If you would like to see upcoming anniversaries with a bit of forewarning,
you can use the following instead:

@example
* Anniversaries
  :PROPERTIES:
  :CATEGORY: Anniv
  :END:
%%(org-bbdb-anniversaries-future 3)
@end example

That will give you three days' warning: on the anniversary date itself and the
two days prior.  The argument is optional: if omitted, it defaults to 7.

@subsubheading Appointment reminders
@cindex @file{appt.el}
@cindex appointment reminders
@cindex appointment
@cindex reminders

Org can interact with Emacs appointments notification facility.  To add the
appointments of your agenda files, use the command @code{org-agenda-to-appt}.
This command lets you filter through the list of your appointments and add
only those belonging to a specific category or matching a regular expression.
It also reads a @code{APPT_WARNTIME} property which will then override the
value of @code{appt-message-warning-time} for this appointment.  See the
docstring for details.

@node Global TODO list
@subsection The global TODO list
@cindex global TODO list
@cindex TODO list, global

The global TODO list contains all unfinished TODO items formatted and
collected into a single place.

@table @kbd
@orgcmd{C-c a t,org-todo-list}
Show the global TODO list.  This collects the TODO items from all agenda
files (@pxref{Agenda views}) into a single buffer.  By default, this lists
items with a state the is not a DONE state.  The buffer is in
@code{agenda-mode}, so there are commands to examine and manipulate the TODO
entries directly from that buffer (@pxref{Agenda commands}).
@orgcmd{C-c a T,org-todo-list}
@cindex TODO keyword matching
@vindex org-todo-keywords
Like the above, but allows selection of a specific TODO keyword.  You can
also do this by specifying a prefix argument to @kbd{C-c a t}.  You are
prompted for a keyword, and you may also specify several keywords by
separating them with @samp{|} as the boolean OR operator.  With a numeric
prefix, the Nth keyword in @code{org-todo-keywords} is selected.
@kindex r
The @kbd{r} key in the agenda buffer regenerates it, and you can give
a prefix argument to this command to change the selected TODO keyword,
for example @kbd{3 r}.  If you often need a search for a specific
keyword, define a custom command for it (@pxref{Agenda dispatcher}).@*
Matching specific TODO keywords can also be done as part of a tags
search (@pxref{Tag searches}).
@end table

Remote editing of TODO items means that you can change the state of a
TODO entry with a single key press.  The commands available in the
TODO list are described in @ref{Agenda commands}.

@cindex sublevels, inclusion into TODO list
Normally the global TODO list simply shows all headlines with TODO
keywords.  This list can become very long.  There are two ways to keep
it more compact:
@itemize @minus
@item
@vindex org-agenda-todo-ignore-scheduled
@vindex org-agenda-todo-ignore-deadlines
@vindex org-agenda-todo-ignore-timestamp
@vindex org-agenda-todo-ignore-with-date
Some people view a TODO item that has been @emph{scheduled} for execution or
have a @emph{deadline} (@pxref{Timestamps}) as no longer @emph{open}.
Configure the variables @code{org-agenda-todo-ignore-scheduled},
@code{org-agenda-todo-ignore-deadlines},
@code{org-agenda-todo-ignore-timestamp} and/or
@code{org-agenda-todo-ignore-with-date} to exclude such items from the global
TODO list.
@item
@vindex org-agenda-todo-list-sublevels
TODO items may have sublevels to break up the task into subtasks.  In
such cases it may be enough to list only the highest level TODO headline
and omit the sublevels from the global list.  Configure the variable
@code{org-agenda-todo-list-sublevels} to get this behavior.
@end itemize

@node Matching tags and properties
@subsection Matching tags and properties
@cindex matching, of tags
@cindex matching, of properties
@cindex tags view
@cindex match view

If headlines in the agenda files are marked with @emph{tags} (@pxref{Tags}),
or have properties (@pxref{Properties and columns}), you can select headlines
based on this metadata and collect them into an agenda buffer.  The match
syntax described here also applies when creating sparse trees with @kbd{C-c /
m}.

@table @kbd
@orgcmd{C-c a m,org-tags-view}
Produce a list of all headlines that match a given set of tags.  The
command prompts for a selection criterion, which is a boolean logic
expression with tags, like @samp{+work+urgent-withboss} or
@samp{work|home} (@pxref{Tags}).  If you often need a specific search,
define a custom command for it (@pxref{Agenda dispatcher}).
@orgcmd{C-c a M,org-tags-view}
@vindex org-tags-match-list-sublevels
@vindex org-agenda-tags-todo-honor-ignore-options
Like @kbd{C-c a m}, but only select headlines that are also TODO items in a
not-DONE state and force checking subitems (see variable
@code{org-tags-match-list-sublevels}).  To exclude scheduled/deadline items,
see the variable @code{org-agenda-tags-todo-honor-ignore-options}.  Matching
specific TODO keywords together with a tags match is also possible, see
@ref{Tag searches}.
@end table

The commands available in the tags list are described in @ref{Agenda
commands}.

@subsubheading Match syntax

@cindex Boolean logic, for tag/property searches
A search string can use Boolean operators @samp{&} for @code{AND} and
@samp{|} for @code{OR}@.  @samp{&} binds more strongly than @samp{|}.
Parentheses are not implemented.  Each element in the search is either a
tag, a regular expression matching tags, or an expression like
@code{PROPERTY OPERATOR VALUE} with a comparison operator, accessing a
property value.  Each element may be preceded by @samp{-}, to select
against it, and @samp{+} is syntactic sugar for positive selection.  The
@code{AND} operator @samp{&} is optional when @samp{+} or @samp{-} is
present.  Here are some examples, using only tags.

@table @samp
@item work
Select headlines tagged @samp{:work:}.
@item work&boss
Select headlines tagged @samp{:work:} and @samp{:boss:}.
@item +work-boss
Select headlines tagged @samp{:work:}, but discard those also tagged
@samp{:boss:}.
@item work|laptop
Selects lines tagged @samp{:work:} or @samp{:laptop:}.
@item work|laptop+night
Like before, but require the @samp{:laptop:} lines to be tagged also
@samp{:night:}.
@end table

@cindex regular expressions, with tags search
Instead of a tag, you may also specify a regular expression enclosed in curly
braces.  For example,
@samp{work+@{^boss.*@}} matches headlines that contain the tag
@samp{:work:} and any tag @i{starting} with @samp{boss}.

@cindex group tags, as regular expressions
Group tags (@pxref{Tag hierarchy}) are expanded as regular expressions.  E.g.,
if @samp{:work:} is a group tag for the group @samp{:work:lab:conf:}, then
searching for @samp{work} will search for @samp{@{\(?:work\|lab\|conf\)@}}
and searching for @samp{-work} will search for all headlines but those with
one of the tags in the group (i.e., @samp{-@{\(?:work\|lab\|conf\)@}}).

@cindex TODO keyword matching, with tags search
@cindex level, require for tags/property match
@cindex category, require for tags/property match
@vindex org-odd-levels-only
You may also test for properties (@pxref{Properties and columns}) at the same
time as matching tags.  The properties may be real properties, or special
properties that represent other metadata (@pxref{Special properties}).  For
example, the ``property'' @code{TODO} represents the TODO keyword of the
entry and the ``property'' @code{PRIORITY} represents the PRIORITY keyword of
the entry.

In addition to the properties mentioned above, @code{LEVEL} represents the
level of an entry.  So a search @samp{+LEVEL=3+boss-TODO="DONE"} lists all
level three headlines that have the tag @samp{boss} and are @emph{not} marked
with the TODO keyword DONE@.  In buffers with @code{org-odd-levels-only} set,
@samp{LEVEL} does not count the number of stars, but @samp{LEVEL=2} will
correspond to 3 stars etc.

Here are more examples:

@table @samp
@item work+TODO="WAITING"
Select @samp{:work:}-tagged TODO lines with the specific TODO
keyword @samp{WAITING}.
@item work+TODO="WAITING"|home+TODO="WAITING"
Waiting tasks both at work and at home.
@end table

When matching properties, a number of different operators can be used to test
the value of a property.  Here is a complex example:

@example
+work-boss+PRIORITY="A"+Coffee="unlimited"+Effort<2         \
         +With=@{Sarah\|Denny@}+SCHEDULED>="<2008-10-11>"
@end example

@noindent
The type of comparison will depend on how the comparison value is written:
@itemize @minus
@item
If the comparison value is a plain number, a numerical comparison is done,
and the allowed operators are @samp{<}, @samp{=}, @samp{>}, @samp{<=},
@samp{>=}, and @samp{<>}.
@item
If the comparison value is enclosed in double-quotes,
a string comparison is done, and the same operators are allowed.
@item
If the comparison value is enclosed in double-quotes @emph{and} angular
brackets (like @samp{DEADLINE<="<2008-12-24 18:30>"}), both values are
assumed to be date/time specifications in the standard Org way, and the
comparison will be done accordingly.  Special values that will be recognized
are @code{"<now>"} for now (including time), and @code{"<today>"}, and
@code{"<tomorrow>"} for these days at 00:00 hours, i.e., without a time
specification.  Also strings like @code{"<+5d>"} or @code{"<-2m>"} with units
@code{d}, @code{w}, @code{m}, and @code{y} for day, week, month, and year,
respectively, can be used.
@item
If the comparison value is enclosed
in curly braces, a regexp match is performed, with @samp{=} meaning that the
regexp matches the property value, and @samp{<>} meaning that it does not
match.
@end itemize

So the search string in the example finds entries tagged @samp{:work:} but
not @samp{:boss:}, which also have a priority value @samp{A}, a
@samp{:Coffee:} property with the value @samp{unlimited}, an @samp{Effort}
property that is numerically smaller than 2, a @samp{:With:} property that is
matched by the regular expression @samp{Sarah\|Denny}, and that are scheduled
on or after October 11, 2008.

You can configure Org mode to use property inheritance during a search, but
beware that this can slow down searches considerably.  See @ref{Property
inheritance}, for details.

For backward compatibility, and also for typing speed, there is also a
different way to test TODO states in a search.  For this, terminate the
tags/property part of the search string (which may include several terms
connected with @samp{|}) with a @samp{/} and then specify a Boolean
expression just for TODO keywords.  The syntax is then similar to that for
tags, but should be applied with care: for example, a positive selection on
several TODO keywords cannot meaningfully be combined with boolean AND@.
However, @emph{negative selection} combined with AND can be meaningful.  To
make sure that only lines are checked that actually have any TODO keyword
(resulting in a speed-up), use @kbd{C-c a M}, or equivalently start the TODO
part after the slash with @samp{!}.  Using @kbd{C-c a M} or @samp{/!} will
not match TODO keywords in a DONE state.  Examples:

@table @samp
@item work/WAITING
Same as @samp{work+TODO="WAITING"}
@item work/!-WAITING-NEXT
Select @samp{:work:}-tagged TODO lines that are neither @samp{WAITING}
nor @samp{NEXT}
@item work/!+WAITING|+NEXT
Select @samp{:work:}-tagged TODO lines that are either @samp{WAITING} or
@samp{NEXT}.
@end table

@node Search view
@subsection Search view
@cindex search view
@cindex text search
@cindex searching, for text

This agenda view is a general text search facility for Org mode entries.
It is particularly useful to find notes.

@table @kbd
@orgcmd{C-c a s,org-search-view}
This is a special search that lets you select entries by matching a substring
or specific words using a boolean logic.
@end table
For example, the search string @samp{computer equipment} will find entries
that contain @samp{computer equipment} as a substring.  If the two words are
separated by more space or a line break, the search will still match.
Search view can also search for specific keywords in the entry, using Boolean
logic.  The search string @samp{+computer +wifi -ethernet -@{8\.11[bg]@}}
will search for note entries that contain the keywords @code{computer}
and @code{wifi}, but not the keyword @code{ethernet}, and which are also
not matched by the regular expression @code{8\.11[bg]}, meaning to
exclude both 8.11b and 8.11g.  The first @samp{+} is necessary to turn on
word search, other @samp{+} characters are optional.  For more details, see
the docstring of the command @code{org-search-view}.

@vindex org-agenda-text-search-extra-files
Note that in addition to the agenda files, this command will also search
the files listed in @code{org-agenda-text-search-extra-files}.

@node Stuck projects
@subsection Stuck projects
@pindex GTD, Getting Things Done

If you are following a system like David Allen's GTD to organize your
work, one of the ``duties'' you have is a regular review to make sure
that all projects move along.  A @emph{stuck} project is a project that
has no defined next actions, so it will never show up in the TODO lists
Org mode produces.  During the review, you need to identify such
projects and define next actions for them.

@table @kbd
@orgcmd{C-c a #,org-agenda-list-stuck-projects}
List projects that are stuck.
@kindex C-c a !
@item C-c a !
@vindex org-stuck-projects
Customize the variable @code{org-stuck-projects} to define what a stuck
project is and how to find it.
@end table

You almost certainly will have to configure this view before it will
work for you.  The built-in default assumes that all your projects are
level-2 headlines, and that a project is not stuck if it has at least
one entry marked with a TODO keyword TODO or NEXT or NEXTACTION.

Let's assume that you, in your own way of using Org mode, identify
projects with a tag PROJECT, and that you use a TODO keyword MAYBE to
indicate a project that should not be considered yet.  Let's further
assume that the TODO keyword DONE marks finished projects, and that NEXT
and TODO indicate next actions.  The tag @@SHOP indicates shopping and
is a next action even without the NEXT tag.  Finally, if the project
contains the special word IGNORE anywhere, it should not be listed
either.  In this case you would start by identifying eligible projects
with a tags/todo match@footnote{@xref{Tag searches}.}
@samp{+PROJECT/-MAYBE-DONE}, and then check for TODO, NEXT, @@SHOP, and
IGNORE in the subtree to identify projects that are not stuck.  The
correct customization for this is

@lisp
(setq org-stuck-projects
      '("+PROJECT/-MAYBE-DONE" ("NEXT" "TODO") ("@@SHOP")
                               "\\<IGNORE\\>"))
@end lisp

Note that if a project is identified as non-stuck, the subtree of this entry
will still be searched for stuck projects.

@node Presentation and sorting
@section Presentation and sorting
@cindex presentation, of agenda items

@vindex org-agenda-prefix-format
@vindex org-agenda-tags-column
Before displaying items in an agenda view, Org mode visually prepares the
items and sorts them.  Each item occupies a single line.  The line starts
with a @emph{prefix} that contains the @emph{category} (@pxref{Categories})
of the item and other important information.  You can customize in which
column tags will be displayed through @code{org-agenda-tags-column}.  You can
also customize the prefix using the option @code{org-agenda-prefix-format}.
This prefix is followed by a cleaned-up version of the outline headline
associated with the item.

@menu
* Categories::                  Not all tasks are equal
* Time-of-day specifications::  How the agenda knows the time
* Sorting agenda items::        The order of things
* Filtering/limiting agenda items::  Dynamically narrow the agenda
@end menu

@node Categories
@subsection Categories

@cindex category
@cindex @code{#+CATEGORY}
The category is a broad label assigned to each agenda item.  By default, the
category is simply derived from the file name, but you can also specify it
with a special line in the buffer, like this:

@example
#+CATEGORY: Thesis
@end example

@noindent
@cindex property, @code{CATEGORY}
If you would like to have a special @code{CATEGORY} for a single entry or a
(sub)tree, give the entry a @code{:CATEGORY:} property with the
special category you want to apply as the value.

@noindent
The display in the agenda buffer looks best if the category is not
longer than 10 characters.

@noindent
You can set up icons for category by customizing the
@code{org-agenda-category-icon-alist} variable.

@node Time-of-day specifications
@subsection Time-of-day specifications
@cindex time-of-day specification

Org mode checks each agenda item for a time-of-day specification.  The
time can be part of the timestamp that triggered inclusion into the
agenda, for example as in @w{@samp{<2005-05-10 Tue 19:00>}}.  Time
ranges can be specified with two timestamps, like
@c
@w{@samp{<2005-05-10 Tue 20:30>--<2005-05-10 Tue 22:15>}}.

In the headline of the entry itself, a time(range) may also appear as
plain text (like @samp{12:45} or a @samp{8:30-1pm}).  If the agenda
integrates the Emacs diary (@pxref{Weekly/daily agenda}), time
specifications in diary entries are recognized as well.

For agenda display, Org mode extracts the time and displays it in a
standard 24 hour format as part of the prefix.  The example times in
the previous paragraphs would end up in the agenda like this:

@example
    8:30-13:00 Arthur Dent lies in front of the bulldozer
   12:45...... Ford Prefect arrives and takes Arthur to the pub
   19:00...... The Vogon reads his poem
   20:30-22:15 Marvin escorts the Hitchhikers to the bridge
@end example

@cindex time grid
If the agenda is in single-day mode, or for the display of today, the
timed entries are embedded in a time grid, like

@example
    8:00...... ------------------
    8:30-13:00 Arthur Dent lies in front of the bulldozer
   10:00...... ------------------
   12:00...... ------------------
   12:45...... Ford Prefect arrives and takes Arthur to the pub
   14:00...... ------------------
   16:00...... ------------------
   18:00...... ------------------
   19:00...... The Vogon reads his poem
   20:00...... ------------------
   20:30-22:15 Marvin escorts the Hitchhikers to the bridge
@end example

@vindex org-agenda-use-time-grid
@vindex org-agenda-time-grid
The time grid can be turned on and off with the variable
@code{org-agenda-use-time-grid}, and can be configured with
@code{org-agenda-time-grid}.

@node Sorting agenda items
@subsection Sorting agenda items
@cindex sorting, of agenda items
@cindex priorities, of agenda items
Before being inserted into a view, the items are sorted.  How this is
done depends on the type of view.
@itemize @bullet
@item
@vindex org-agenda-files
For the daily/weekly agenda, the items for each day are sorted.  The
default order is to first collect all items containing an explicit
time-of-day specification.  These entries will be shown at the beginning
of the list, as a @emph{schedule} for the day.  After that, items remain
grouped in categories, in the sequence given by @code{org-agenda-files}.
Within each category, items are sorted by priority (@pxref{Priorities}),
which is composed of the base priority (2000 for priority @samp{A}, 1000
for @samp{B}, and 0 for @samp{C}), plus additional increments for
overdue scheduled or deadline items.
@item
For the TODO list, items remain in the order of categories, but within
each category, sorting takes place according to priority
(@pxref{Priorities}).  The priority used for sorting derives from the
priority cookie, with additions depending on how close an item is to its due
or scheduled date.
@item
For tags matches, items are not sorted at all, but just appear in the
sequence in which they are found in the agenda files.
@end itemize

@vindex org-agenda-sorting-strategy
Sorting can be customized using the variable
@code{org-agenda-sorting-strategy}, and may also include criteria based on
the estimated effort of an entry (@pxref{Effort estimates}).

@node Filtering/limiting agenda items
@subsection Filtering/limiting agenda items

Agenda built-in or customized commands are statically defined.  Agenda
filters and limits provide two ways of dynamically narrowing down the list of
agenda entries: @emph{filters} and @emph{limits}.  Filters only act on the
display of the items, while limits take effect before the list of agenda
entries is built.  Filters are more often used interactively, while limits are
mostly useful when defined as local variables within custom agenda commands.

@subsubheading Filtering in the agenda
@cindex filtering, by tag, category, top headline and effort, in agenda
@cindex tag filtering, in agenda
@cindex category filtering, in agenda
@cindex top headline filtering, in agenda
@cindex effort filtering, in agenda
@cindex query editing, in agenda

@table @kbd
@orgcmd{/,org-agenda-filter-by-tag}
@vindex org-agenda-tag-filter-preset
Filter the agenda view with respect to a tag and/or effort estimates.  The
difference between this and a custom agenda command is that filtering is very
fast, so that you can switch quickly between different filters without having
to recreate the agenda.@footnote{Custom commands can preset a filter by
binding the variable @code{org-agenda-tag-filter-preset} as an option.  This
filter will then be applied to the view and persist as a basic filter through
refreshes and more secondary filtering.  The filter is a global property of
the entire agenda view---in a block agenda, you should only set this in the
global options section, not in the section of an individual block.}

You will be prompted for a tag selection letter; @key{SPC} will mean any tag
at all.  Pressing @key{TAB} at that prompt will offer use completion to
select a tag (including any tags that do not have a selection character).
The command then hides all entries that do not contain or inherit this tag.
When called with prefix arg, remove the entries that @emph{do} have the tag.
A second @kbd{/} at the prompt will turn off the filter and unhide any hidden
entries.  Pressing @kbd{+} or @kbd{-} switches between filtering and
excluding the next tag.

Org also supports automatic, context-aware tag filtering.  If the variable
@code{org-agenda-auto-exclude-function} is set to a user-defined function,
that function can decide which tags should be excluded from the agenda
automatically.  Once this is set, the @kbd{/} command then accepts
@kbd{@key{RET}} as a sub-option key and runs the auto exclusion logic.  For
example, let's say you use a @code{Net} tag to identify tasks which need
network access, an @code{Errand} tag for errands in town, and a @code{Call}
tag for making phone calls.  You could auto-exclude these tags based on the
availability of the Internet, and outside of business hours, with something
like this:

@smalllisp
@group
(defun org-my-auto-exclude-function (tag)
  (and (cond
        ((string= tag "Net")
         (/= 0 (call-process "/sbin/ping" nil nil nil
                             "-c1" "-q" "-t1" "mail.gnu.org")))
        ((or (string= tag "Errand") (string= tag "Call"))
         (let ((hour (nth 2 (decode-time))))
           (or (< hour 8) (> hour 21)))))
       (concat "-" tag)))

(setq org-agenda-auto-exclude-function 'org-my-auto-exclude-function)
@end group
@end smalllisp

@c
@kindex [
@kindex ]
@kindex @{
@kindex @}
@item [ ] @{ @}
@table @i
@item @r{in} search view
add new search words (@kbd{[} and @kbd{]}) or new regular expressions
(@kbd{@{} and @kbd{@}}) to the query string.  The opening bracket/brace will
add a positive search term prefixed by @samp{+}, indicating that this search
term @i{must} occur/match in the entry.  The closing bracket/brace will add a
negative search term which @i{must not} occur/match in the entry for it to be
selected.
@end table

@orgcmd{<,org-agenda-filter-by-category}
@vindex org-agenda-category-filter-preset

Filter the current agenda view with respect to the category of the item at
point.  Pressing @code{<} another time will remove this filter.  When called
with a prefix argument exclude the category of the item at point from the
agenda.

You can add a filter preset in custom agenda commands through the option
@code{org-agenda-category-filter-preset}.  @xref{Setting options}.

@orgcmd{^,org-agenda-filter-by-top-headline}
Filter the current agenda view and only display the siblings and the parent
headline of the one at point.

@orgcmd{=,org-agenda-filter-by-regexp}
@vindex org-agenda-regexp-filter-preset

Filter the agenda view by a regular expression: only show agenda entries
matching the regular expression the user entered.  When called with a prefix
argument, it will filter @emph{out} entries matching the regexp.  With two
universal prefix arguments, it will remove all the regexp filters, which can
be accumulated.

You can add a filter preset in custom agenda commands through the option
@code{org-agenda-regexp-filter-preset}.  @xref{Setting options}.

@orgcmd{_,org-agenda-filter-by-effort}
@vindex org-agenda-effort-filter-preset
@vindex org-sort-agenda-noeffort-is-high
Filter the agenda view with respect to effort estimates.
You first need to set up allowed efforts globally, for example
@lisp
(setq org-global-properties
    '(("Effort_ALL". "0 0:10 0:30 1:00 2:00 3:00 4:00")))
@end lisp
You can then filter for an effort by first typing an operator, one of
@kbd{<}, @kbd{>}, and @kbd{=}, and then the one-digit index of an effort
estimate in your array of allowed values, where @kbd{0} means the 10th value.
The filter will then restrict to entries with effort smaller-or-equal, equal,
or larger-or-equal than the selected value.  For application of the operator,
entries without a defined effort will be treated according to the value of
@code{org-sort-agenda-noeffort-is-high}.

When called with a prefix argument, it will remove entries matching the
condition.  With two universal prefix arguments, it will clear effort
filters, which can be accumulated.

You can add a filter preset in custom agenda commands through the option
@code{org-agenda-effort-filter-preset}.  @xref{Setting options}.

@orgcmd{|,org-agenda-filter-remove-all}
Remove all filters in the current agenda view.
@end table

@subsubheading Setting limits for the agenda
@cindex limits, in agenda
@vindex org-agenda-max-entries
@vindex org-agenda-max-effort
@vindex org-agenda-max-todos
@vindex org-agenda-max-tags

Here is a list of options that you can set, either globally, or locally in
your custom agenda views (@pxref{Custom agenda views}).

@table @code
@item org-agenda-max-entries
Limit the number of entries.
@item org-agenda-max-effort
Limit the duration of accumulated efforts (as minutes).
@item org-agenda-max-todos
Limit the number of entries with TODO keywords.
@item org-agenda-max-tags
Limit the number of tagged entries.
@end table

When set to a positive integer, each option will exclude entries from other
categories: for example, @code{(setq org-agenda-max-effort 100)} will limit
the agenda to 100 minutes of effort and exclude any entry that has no effort
property.  If you want to include entries with no effort property, use a
negative value for @code{org-agenda-max-effort}.

One useful setup is to use @code{org-agenda-max-entries} locally in a custom
command.  For example, this custom command will display the next five entries
with a @code{NEXT} TODO keyword.

@smalllisp
(setq org-agenda-custom-commands
      '(("n" todo "NEXT"
         ((org-agenda-max-entries 5)))))
@end smalllisp

Once you mark one of these five entry as @code{DONE}, rebuilding the agenda
will again the next five entries again, including the first entry that was
excluded so far.

You can also dynamically set temporary limits, which will be lost when
rebuilding the agenda:

@table @kbd
@orgcmd{~,org-agenda-limit-interactively}
This prompts for the type of limit to apply and its value.
@end table

@node Agenda commands
@section Commands in the agenda buffer
@cindex commands, in agenda buffer

Entries in the agenda buffer are linked back to the Org file or diary
file where they originate.  You are not allowed to edit the agenda
buffer itself, but commands are provided to show and jump to the
original entry location, and to edit the Org files ``remotely'' from
the agenda buffer.  In this way, all information is stored only once,
removing the risk that your agenda and note files may diverge.

Some commands can be executed with mouse clicks on agenda lines.  For
the other commands, the cursor needs to be in the desired line.

@table @kbd
@tsubheading{Motion}
@cindex motion commands in agenda
@orgcmd{n,org-agenda-next-line}
Next line (same as @key{DOWN} and @kbd{C-n}).
@orgcmd{p,org-agenda-previous-line}
Previous line (same as @key{UP} and @kbd{C-p}).
@orgcmd{N,org-agenda-next-item}
Next item: same as next line, but only consider items.
@orgcmd{P,org-agenda-previous-item}
Previous item: same as previous line, but only consider items.
@tsubheading{View/Go to Org file}
@orgcmdkkc{@key{SPC},mouse-3,org-agenda-show-and-scroll-up}
Display the original location of the item in another window.  With prefix
arg, make sure that drawers stay folded.
@c
@orgcmd{L,org-agenda-recenter}
Display original location and recenter that window.
@c
@orgcmdkkc{@key{TAB},mouse-2,org-agenda-goto}
Go to the original location of the item in another window.
@c
@orgcmd{@key{RET},org-agenda-switch-to}
Go to the original location of the item and delete other windows.
@c
@orgcmd{F,org-agenda-follow-mode}
@vindex org-agenda-start-with-follow-mode
Toggle Follow mode.  In Follow mode, as you move the cursor through
the agenda buffer, the other window always shows the corresponding
location in the Org file.  The initial setting for this mode in new
agenda buffers can be set with the variable
@code{org-agenda-start-with-follow-mode}.
@c
@orgcmd{C-c C-x b,org-agenda-tree-to-indirect-buffer}
Display the entire subtree of the current item in an indirect buffer.  With a
numeric prefix argument N, go up to level N and then take that tree.  If N is
negative, go up that many levels.  With a @kbd{C-u} prefix, do not remove the
previously used indirect buffer.

@orgcmd{C-c C-o,org-agenda-open-link}
Follow a link in the entry.  This will offer a selection of any links in the
text belonging to the referenced Org node.  If there is only one link, it
will be followed without a selection prompt.

@tsubheading{Change display}
@cindex display changing, in agenda
@kindex A
@item A
Interactively select another agenda view and append it to the current view.
@c
@kindex o
@item o
Delete other windows.
@c
@orgcmdkskc{v d,d,org-agenda-day-view}
@xorgcmdkskc{v w,w,org-agenda-week-view}
@xorgcmd{v t,org-agenda-fortnight-view}
@xorgcmd{v m,org-agenda-month-view}
@xorgcmd{v y,org-agenda-year-view}
@xorgcmd{v @key{SPC},org-agenda-reset-view}
@vindex org-agenda-span
Switch to day/week/month/year view.  When switching to day or week view, this
setting becomes the default for subsequent agenda refreshes.  Since month and
year views are slow to create, they do not become the default.  A numeric
prefix argument may be used to jump directly to a specific day of the year,
ISO week, month, or year, respectively.  For example, @kbd{32 d} jumps to
February 1st, @kbd{9 w} to ISO week number 9.  When setting day, week, or
month view, a year may be encoded in the prefix argument as well.  For
example, @kbd{200712 w} will jump to week 12 in 2007.  If such a year
specification has only one or two digits, it will be mapped to the interval
1938--2037.  @kbd{v @key{SPC}} will reset to what is set in
@code{org-agenda-span}.
@c
@orgcmd{f,org-agenda-later}
Go forward in time to display the following @code{org-agenda-current-span} days.
For example, if the display covers a week, switch to the following week.
With prefix arg, go forward that many times @code{org-agenda-current-span} days.
@c
@orgcmd{b,org-agenda-earlier}
Go backward in time to display earlier dates.
@c
@orgcmd{.,org-agenda-goto-today}
Go to today.
@c
@orgcmd{j,org-agenda-goto-date}
Prompt for a date and go there.
@c
@orgcmd{J,org-agenda-clock-goto}
Go to the currently clocked-in task @i{in the agenda buffer}.
@c
@orgcmd{D,org-agenda-toggle-diary}
Toggle the inclusion of diary entries.  See @ref{Weekly/daily agenda}.
@c
@orgcmdkskc{v l,l,org-agenda-log-mode}
@kindex v L
@vindex org-log-done
@vindex org-agenda-log-mode-items
Toggle Logbook mode.  In Logbook mode, entries that were marked DONE while
logging was on (variable @code{org-log-done}) are shown in the agenda, as are
entries that have been clocked on that day.  You can configure the entry
types that should be included in log mode using the variable
@code{org-agenda-log-mode-items}.  When called with a @kbd{C-u} prefix, show
all possible logbook entries, including state changes.  When called with two
prefix arguments @kbd{C-u C-u}, show only logging information, nothing else.
@kbd{v L} is equivalent to @kbd{C-u v l}.
@c
@orgcmdkskc{v [,[,org-agenda-manipulate-query-add}
Include inactive timestamps into the current view.  Only for weekly/daily
agenda.
@c
@orgcmd{v a,org-agenda-archives-mode}
@xorgcmd{v A,org-agenda-archives-mode 'files}
@cindex Archives mode
Toggle Archives mode.  In Archives mode, trees that are marked
@code{ARCHIVED} are also scanned when producing the agenda.  When you use the
capital @kbd{A}, even all archive files are included.  To exit archives mode,
press @kbd{v a} again.
@c
@orgcmdkskc{v R,R,org-agenda-clockreport-mode}
@vindex org-agenda-start-with-clockreport-mode
@vindex org-clock-report-include-clocking-task
Toggle Clockreport mode.  In Clockreport mode, the daily/weekly agenda will
always show a table with the clocked times for the time span and file scope
covered by the current agenda view.  The initial setting for this mode in new
agenda buffers can be set with the variable
@code{org-agenda-start-with-clockreport-mode}.  By using a prefix argument
when toggling this mode (i.e., @kbd{C-u R}), the clock table will not show
contributions from entries that are hidden by agenda filtering@footnote{Only
tags filtering will be respected here, effort filtering is ignored.}.  See
also the variable @code{org-clock-report-include-clocking-task}.
@c
@orgkey{v c}
@vindex org-agenda-clock-consistency-checks
Show overlapping clock entries, clocking gaps, and other clocking problems in
the current agenda range.  You can then visit clocking lines and fix them
manually.  See the variable @code{org-agenda-clock-consistency-checks} for
information on how to customize the definition of what constituted a clocking
problem.  To return to normal agenda display, press @kbd{l} to exit Logbook
mode.
@c
@orgcmdkskc{v E,E,org-agenda-entry-text-mode}
@vindex org-agenda-start-with-entry-text-mode
@vindex org-agenda-entry-text-maxlines
Toggle entry text mode.  In entry text mode, a number of lines from the Org
outline node referenced by an agenda line will be displayed below the line.
The maximum number of lines is given by the variable
@code{org-agenda-entry-text-maxlines}.  Calling this command with a numeric
prefix argument will temporarily modify that number to the prefix value.
@c
@orgcmd{G,org-agenda-toggle-time-grid}
@vindex org-agenda-use-time-grid
@vindex org-agenda-time-grid
Toggle the time grid on and off.  See also the variables
@code{org-agenda-use-time-grid} and @code{org-agenda-time-grid}.
@c
@orgcmd{r,org-agenda-redo}
Recreate the agenda buffer, for example to reflect the changes after
modification of the timestamps of items with @kbd{S-@key{LEFT}} and
@kbd{S-@key{RIGHT}}.  When the buffer is the global TODO list, a prefix
argument is interpreted to create a selective list for a specific TODO
keyword.
@orgcmd{g,org-agenda-redo}
Same as @kbd{r}.
@c
@orgcmdkskc{C-x C-s,s,org-save-all-org-buffers}
Save all Org buffers in the current Emacs session, and also the locations of
IDs.
@c
@orgcmd{C-c C-x C-c,org-agenda-columns}
@vindex org-columns-default-format
Invoke column view (@pxref{Column view}) in the agenda buffer.  The column
view format is taken from the entry at point, or (if there is no entry at
point), from the first entry in the agenda view.  So whatever the format for
that entry would be in the original buffer (taken from a property, from a
@code{#+COLUMNS} line, or from the default variable
@code{org-columns-default-format}), will be used in the agenda.

@orgcmd{C-c C-x >,org-agenda-remove-restriction-lock}
Remove the restriction lock on the agenda, if it is currently restricted to a
file or subtree (@pxref{Agenda files}).

@tsubheading{Secondary filtering and query editing}

For a detailed description of these commands, @pxref{Filtering/limiting
agenda items}.

@orgcmd{/,org-agenda-filter-by-tag}
Filter the agenda view with respect to a tag and/or effort estimates.

@orgcmd{<,org-agenda-filter-by-category}
Filter the current agenda view with respect to the category of the item at
point.

@orgcmd{^,org-agenda-filter-by-top-headline}
Filter the current agenda view and only display the siblings and the parent
headline of the one at point.

@orgcmd{=,org-agenda-filter-by-regexp}
Filter the agenda view by a regular expression.

@orgcmd{_,org-agenda-filter-by-effort}
Filter the agenda view with respect to effort estimates.

@orgcmd{|,org-agenda-filter-remove-all}
Remove all filters in the current agenda view.

@tsubheading{Remote editing}
@cindex remote editing, from agenda

@item 0--9
Digit argument.
@c
@cindex undoing remote-editing events
@cindex remote editing, undo
@orgcmd{C-_,org-agenda-undo}
Undo a change due to a remote editing command.  The change is undone
both in the agenda buffer and in the remote buffer.
@c
@orgcmd{t,org-agenda-todo}
Change the TODO state of the item, both in the agenda and in the
original org file.
@c
@orgcmd{C-S-@key{RIGHT},org-agenda-todo-nextset}
@orgcmd{C-S-@key{LEFT},org-agenda-todo-previousset}
Switch to the next/previous set of TODO keywords.
@c
@orgcmd{C-k,org-agenda-kill}
@vindex org-agenda-confirm-kill
Delete the current agenda item along with the entire subtree belonging
to it in the original Org file.  If the text to be deleted remotely
is longer than one line, the kill needs to be confirmed by the user.  See
variable @code{org-agenda-confirm-kill}.
@c
@orgcmd{C-c C-w,org-agenda-refile}
Refile the entry at point.
@c
@orgcmdkskc{C-c C-x C-a,a,org-agenda-archive-default-with-confirmation}
@vindex org-archive-default-command
Archive the subtree corresponding to the entry at point using the default
archiving command set in @code{org-archive-default-command}.  When using the
@code{a} key, confirmation will be required.
@c
@orgcmd{C-c C-x a,org-agenda-toggle-archive-tag}
Toggle the ARCHIVE tag for the current headline.
@c
@orgcmd{C-c C-x A,org-agenda-archive-to-archive-sibling}
Move the subtree corresponding to the current entry to its @emph{archive
sibling}.
@c
@orgcmdkskc{C-c C-x C-s,$,org-agenda-archive}
Archive the subtree corresponding to the current headline.  This means the
entry will be moved to the configured archive location, most likely a
different file.
@c
@orgcmd{T,org-agenda-show-tags}
@vindex org-agenda-show-inherited-tags
Show all tags associated with the current item.  This is useful if you have
turned off @code{org-agenda-show-inherited-tags}, but still want to see all
tags of a headline occasionally.
@c
@orgcmd{:,org-agenda-set-tags}
Set tags for the current headline.  If there is an active region in the
agenda, change a tag for all headings in the region.
@c
@kindex ,
@item ,
Set the priority for the current item (@command{org-agenda-priority}).
Org mode prompts for the priority character.  If you reply with @key{SPC},
the priority cookie is removed from the entry.
@c
@orgcmd{P,org-agenda-show-priority}
Display weighted priority of current item.
@c
@orgcmdkkc{+,S-@key{UP},org-agenda-priority-up}
Increase the priority of the current item.  The priority is changed in
the original buffer, but the agenda is not resorted.  Use the @kbd{r}
key for this.
@c
@orgcmdkkc{-,S-@key{DOWN},org-agenda-priority-down}
Decrease the priority of the current item.
@c
@orgcmdkkc{z,C-c C-z,org-agenda-add-note}
@vindex org-log-into-drawer
Add a note to the entry.  This note will be recorded, and then filed to the
same location where state change notes are put.  Depending on
@code{org-log-into-drawer}, this may be inside a drawer.
@c
@orgcmd{C-c C-a,org-attach}
Dispatcher for all command related to attachments.
@c
@orgcmd{C-c C-s,org-agenda-schedule}
Schedule this item.  With prefix arg remove the scheduling timestamp
@c
@orgcmd{C-c C-d,org-agenda-deadline}
Set a deadline for this item.  With prefix arg remove the deadline.
@c
@orgcmd{S-@key{RIGHT},org-agenda-do-date-later}
Change the timestamp associated with the current line by one day into the
future.  If the date is in the past, the first call to this command will move
it to today.@*
With a numeric prefix argument, change it by that many days.  For example,
@kbd{3 6 5 S-@key{RIGHT}} will change it by a year.  With a @kbd{C-u} prefix,
change the time by one hour.  If you immediately repeat the command, it will
continue to change hours even without the prefix arg.  With a double @kbd{C-u
C-u} prefix, do the same for changing minutes.@*
The stamp is changed in the original Org file, but the change is not directly
reflected in the agenda buffer.  Use @kbd{r} or @kbd{g} to update the buffer.
@c
@orgcmd{S-@key{LEFT},org-agenda-do-date-earlier}
Change the timestamp associated with the current line by one day
into the past.
@c
@orgcmd{>,org-agenda-date-prompt}
Change the timestamp associated with the current line.  The key @kbd{>} has
been chosen, because it is the same as @kbd{S-.}  on my keyboard.
@c
@orgcmd{I,org-agenda-clock-in}
Start the clock on the current item.  If a clock is running already, it
is stopped first.
@c
@orgcmd{O,org-agenda-clock-out}
Stop the previously started clock.
@c
@orgcmd{X,org-agenda-clock-cancel}
Cancel the currently running clock.
@c
@orgcmd{J,org-agenda-clock-goto}
Jump to the running clock in another window.
@c
@orgcmd{k,org-agenda-capture}
Like @code{org-capture}, but use the date at point as the default date for
the capture template.  See @code{org-capture-use-agenda-date} to make this
the default behavior of @code{org-capture}.
@cindex capturing, from agenda
@vindex org-capture-use-agenda-date

@tsubheading{Dragging agenda lines forward/backward}
@cindex dragging, agenda lines

@orgcmd{M-<up>,org-agenda-drag-line-backward}
Drag the line at point backward one line@footnote{Moving agenda lines does
not persist after an agenda refresh and does not modify the contributing
@file{.org} files}.  With a numeric prefix argument, drag backward by that
many lines.

@orgcmd{M-<down>,org-agenda-drag-line-forward}
Drag the line at point forward one line.  With a numeric prefix argument,
drag forward by that many lines.

@tsubheading{Bulk remote editing selected entries}
@cindex remote editing, bulk, from agenda
@vindex org-agenda-bulk-custom-functions

@orgcmd{m,org-agenda-bulk-mark}
Mark the entry at point for bulk action.  With numeric prefix argument, mark
that many successive entries.
@c
@orgcmd{*,org-agenda-bulk-mark-all}
Mark all visible agenda entries for bulk action.
@c
@orgcmd{u,org-agenda-bulk-unmark}
Unmark entry at point for bulk action.
@c
@orgcmd{U,org-agenda-bulk-remove-all-marks}
Unmark all marked entries for bulk action.
@c
@orgcmd{M-m,org-agenda-bulk-toggle}
Toggle mark of the entry at point for bulk action.
@c
@orgcmd{M-*,org-agenda-bulk-toggle-all}
Toggle marks of all visible entries for bulk action.
@c
@orgcmd{%,org-agenda-bulk-mark-regexp}
Mark entries matching a regular expression for bulk action.
@c
@orgcmd{B,org-agenda-bulk-action}
Bulk action: act on all marked entries in the agenda.  This will prompt for
another key to select the action to be applied.  The prefix arg to @kbd{B}
will be passed through to the @kbd{s} and @kbd{d} commands, to bulk-remove
these special timestamps.  By default, marks are removed after the bulk.  If
you want them to persist, set @code{org-agenda-persistent-marks} to @code{t}
or hit @kbd{p} at the prompt.

@table @kbd
@item *
Toggle persistent marks.
@item $
Archive all selected entries.
@item A
Archive entries by moving them to their respective archive siblings.
@item t
Change TODO state.  This prompts for a single TODO keyword and changes the
state of all selected entries, bypassing blocking and suppressing logging
notes (but not timestamps).
@item +
Add a tag to all selected entries.
@item -
Remove a tag from all selected entries.
@item s
Schedule all items to a new date.  To shift existing schedule dates by a
fixed number of days, use something starting with double plus at the prompt,
for example @samp{++8d} or @samp{++2w}.
@item d
Set deadline to a specific date.
@item r
Prompt for a single refile target and move all entries.  The entries will no
longer be in the agenda; refresh (@kbd{g}) to bring them back.
@item S
Reschedule randomly into the coming N days.  N will be prompted for.  With
prefix arg (@kbd{C-u B S}), scatter only across weekdays.
@item f
Apply a function@footnote{You can also create persistent custom functions
through @code{org-agenda-bulk-custom-functions}.} to marked entries.  For
example, the function below sets the CATEGORY property of the entries to web.

@lisp
@group
(defun set-category ()
  (interactive "P")
  (let* ((marker (or (org-get-at-bol 'org-hd-marker)
                     (org-agenda-error)))
         (buffer (marker-buffer marker)))
    (with-current-buffer buffer
      (save-excursion
        (save-restriction
          (widen)
          (goto-char marker)
          (org-back-to-heading t)
          (org-set-property "CATEGORY" "web"))))))
@end group
@end lisp
@end table

@tsubheading{Calendar commands}
@cindex calendar commands, from agenda

@orgcmd{c,org-agenda-goto-calendar}
Open the Emacs calendar and move to the date at the agenda cursor.
@c
@orgcmd{c,org-calendar-goto-agenda}
When in the calendar, compute and show the Org mode agenda for the
date at the cursor.
@c
@cindex diary entries, creating from agenda
@orgcmd{i,org-agenda-diary-entry}
@vindex org-agenda-diary-file
Insert a new entry into the diary, using the date at the cursor and (for
block entries) the date at the mark.  This will add to the Emacs diary
file@footnote{This file is parsed for the agenda when
@code{org-agenda-include-diary} is set.}, in a way similar to the @kbd{i}
command in the calendar.  The diary file will pop up in another window, where
you can add the entry.

If you configure @code{org-agenda-diary-file} to point to an Org mode file,
Org will create entries (in Org mode syntax) in that file instead.  Most
entries will be stored in a date-based outline tree that will later make it
easy to archive appointments from previous months/years.  The tree will be
built under an entry with a @code{DATE_TREE} property, or else with years as
top-level entries.  Emacs will prompt you for the entry text---if you specify
it, the entry will be created in @code{org-agenda-diary-file} without further
interaction.  If you directly press @key{RET} at the prompt without typing
text, the target file will be shown in another window for you to finish the
entry there.  See also the @kbd{k r} command.
@c
@orgcmd{M,org-agenda-phases-of-moon}
Show the phases of the moon for the three months around current date.
@c
@orgcmd{S,org-agenda-sunrise-sunset}
Show sunrise and sunset times.  The geographical location must be set
with calendar variables, see the documentation for the Emacs calendar.
@c
@orgcmd{C,org-agenda-convert-date}
Convert the date at cursor into many other cultural and historic
calendars.
@c
@orgcmd{H,org-agenda-holidays}
Show holidays for three months around the cursor date.

@item M-x org-icalendar-combine-agenda-files @key{RET}
Export a single iCalendar file containing entries from all agenda files.
This is a globally available command, and also available in the agenda menu.

@tsubheading{Exporting to a file}
@orgcmd{C-x C-w,org-agenda-write}
@cindex exporting agenda views
@cindex agenda views, exporting
@vindex org-agenda-exporter-settings
Write the agenda view to a file.  Depending on the extension of the selected
file name, the view will be exported as HTML (@file{.html} or @file{.htm}),
Postscript (@file{.ps}), PDF (@file{.pdf}), Org (@file{.org}) and plain text
(any other extension).  When exporting to Org, only the body of original
headlines are exported, not subtrees or inherited tags.  When called with a
@kbd{C-u} prefix argument, immediately open the newly created file.  Use the
variable @code{org-agenda-exporter-settings} to set options for
@file{ps-print} and for @file{htmlize} to be used during export.

@tsubheading{Quit and Exit}
@orgcmd{q,org-agenda-quit}
Quit agenda, remove the agenda buffer.
@c
@cindex agenda files, removing buffers
@orgcmd{x,org-agenda-exit}
Exit agenda, remove the agenda buffer and all buffers loaded by Emacs
for the compilation of the agenda.  Buffers created by the user to
visit Org files will not be removed.
@end table


@node Custom agenda views
@section Custom agenda views
@cindex custom agenda views
@cindex agenda views, custom

Custom agenda commands serve two purposes: to store and quickly access
frequently used TODO and tags searches, and to create special composite
agenda buffers.  Custom agenda commands will be accessible through the
dispatcher (@pxref{Agenda dispatcher}), just like the default commands.

@menu
* Storing searches::            Type once, use often
* Block agenda::                All the stuff you need in a single buffer
* Setting options::             Changing the rules
@end menu

@node Storing searches
@subsection Storing searches

The first application of custom searches is the definition of keyboard
shortcuts for frequently used searches, either creating an agenda
buffer, or a sparse tree (the latter covering of course only the current
buffer).
@kindex C-c a C
@vindex org-agenda-custom-commands
@cindex agenda views, main example
@cindex agenda, as an agenda views
@cindex agenda*, as an agenda views
@cindex tags, as an agenda view
@cindex todo, as an agenda view
@cindex tags-todo
@cindex todo-tree
@cindex occur-tree
@cindex tags-tree

Custom commands are configured in the variable
@code{org-agenda-custom-commands}.  You can customize this variable, for
example by pressing @kbd{C-c a C}.  You can also directly set it with Emacs
Lisp in the Emacs init file.  The following example contains all valid agenda
views:

@lisp
@group
(setq org-agenda-custom-commands
      '(("x" agenda)
        ("y" agenda*)
        ("w" todo "WAITING")
        ("W" todo-tree "WAITING")
        ("u" tags "+boss-urgent")
        ("v" tags-todo "+boss-urgent")
        ("U" tags-tree "+boss-urgent")
        ("f" occur-tree "\\<FIXME\\>")
        ("h" . "HOME+Name tags searches") ; description for "h" prefix
        ("hl" tags "+home+Lisa")
        ("hp" tags "+home+Peter")
        ("hk" tags "+home+Kim")))
@end group
@end lisp

@noindent
The initial string in each entry defines the keys you have to press
after the dispatcher command @kbd{C-c a} in order to access the command.
Usually this will be just a single character, but if you have many
similar commands, you can also define two-letter combinations where the
first character is the same in several combinations and serves as a
prefix key@footnote{You can provide a description for a prefix key by
inserting a cons cell with the prefix and the description.}.  The second
parameter is the search type, followed by the string or regular
expression to be used for the matching.  The example above will
therefore define:

@table @kbd
@item C-c a x
as a global search for agenda entries planned@footnote{@emph{Planned} means
here that these entries have some planning information attached to them, like
a time-stamp, a scheduled or a deadline string.  See
@code{org-agenda-entry-types} on how to set what planning information will be
taken into account.} this week/day.
@item C-c a y
as a global search for agenda entries planned this week/day, but only those
with an hour specification like @code{[h]h:mm}---think of them as appointments.
@item C-c a w
as a global search for TODO entries with @samp{WAITING} as the TODO
keyword
@item C-c a W
as the same search, but only in the current buffer and displaying the
results as a sparse tree
@item C-c a u
as a global tags search for headlines marked @samp{:boss:} but not
@samp{:urgent:}
@item C-c a v
as the same search as @kbd{C-c a u}, but limiting the search to
headlines that are also TODO items
@item C-c a U
as the same search as @kbd{C-c a u}, but only in the current buffer and
displaying the result as a sparse tree
@item C-c a f
to create a sparse tree (again: current buffer only) with all entries
containing the word @samp{FIXME}
@item C-c a h
as a prefix command for a HOME tags search where you have to press an
additional key (@kbd{l}, @kbd{p} or @kbd{k}) to select a name (Lisa,
Peter, or Kim) as additional tag to match.
@end table

Note that the @code{*-tree} agenda views need to be called from an
Org buffer as they operate on the current buffer only.

@node Block agenda
@subsection Block agenda
@cindex block agenda
@cindex agenda, with block views

Another possibility is the construction of agenda views that comprise
the results of @emph{several} commands, each of which creates a block in
the agenda buffer.  The available commands include @code{agenda} for the
daily or weekly agenda (as created with @kbd{C-c a a}), @code{alltodo}
for the global TODO list (as constructed with @kbd{C-c a t}), and the
matching commands discussed above: @code{todo}, @code{tags}, and
@code{tags-todo}.  Here are two examples:

@lisp
@group
(setq org-agenda-custom-commands
      '(("h" "Agenda and Home-related tasks"
         ((agenda "")
          (tags-todo "home")
          (tags "garden")))
        ("o" "Agenda and Office-related tasks"
         ((agenda "")
          (tags-todo "work")
          (tags "office")))))
@end group
@end lisp

@noindent
This will define @kbd{C-c a h} to create a multi-block view for stuff
you need to attend to at home.  The resulting agenda buffer will contain
your agenda for the current week, all TODO items that carry the tag
@samp{home}, and also all lines tagged with @samp{garden}.  Finally the
command @kbd{C-c a o} provides a similar view for office tasks.

@node Setting options
@subsection Setting options for custom commands
@cindex options, for custom agenda views

@vindex org-agenda-custom-commands
Org mode contains a number of variables regulating agenda construction
and display.  The global variables define the behavior for all agenda
commands, including the custom commands.  However, if you want to change
some settings just for a single custom view, you can do so.  Setting
options requires inserting a list of variable names and values at the
right spot in @code{org-agenda-custom-commands}.  For example:

@lisp
@group
(setq org-agenda-custom-commands
      '(("w" todo "WAITING"
         ((org-agenda-sorting-strategy '(priority-down))
          (org-agenda-prefix-format "  Mixed: ")))
        ("U" tags-tree "+boss-urgent"
         ((org-show-context-detail 'minimal)))
        ("N" search ""
         ((org-agenda-files '("~org/notes.org"))
          (org-agenda-text-search-extra-files nil)))))
@end group
@end lisp

@noindent
Now the @kbd{C-c a w} command will sort the collected entries only by
priority, and the prefix format is modified to just say @samp{  Mixed: }
instead of giving the category of the entry.  The sparse tags tree of
@kbd{C-c a U} will now turn out ultra-compact, because neither the
headline hierarchy above the match, nor the headline following the match
will be shown.  The command @kbd{C-c a N} will do a text search limited
to only a single file.

@vindex org-agenda-custom-commands
For command sets creating a block agenda,
@code{org-agenda-custom-commands} has two separate spots for setting
options.  You can add options that should be valid for just a single
command in the set, and options that should be valid for all commands in
the set.  The former are just added to the command entry; the latter
must come after the list of command entries.  Going back to the block
agenda example (@pxref{Block agenda}), let's change the sorting strategy
for the @kbd{C-c a h} commands to @code{priority-down}, but let's sort
the results for GARDEN tags query in the opposite order,
@code{priority-up}.  This would look like this:

@lisp
@group
(setq org-agenda-custom-commands
      '(("h" "Agenda and Home-related tasks"
         ((agenda)
          (tags-todo "home")
          (tags "garden"
                ((org-agenda-sorting-strategy '(priority-up)))))
         ((org-agenda-sorting-strategy '(priority-down))))
        ("o" "Agenda and Office-related tasks"
         ((agenda)
          (tags-todo "work")
          (tags "office")))))
@end group
@end lisp

As you see, the values and parentheses setting is a little complex.
When in doubt, use the customize interface to set this variable---it
fully supports its structure.  Just one caveat: when setting options in
this interface, the @emph{values} are just Lisp expressions.  So if the
value is a string, you need to add the double-quotes around the value
yourself.

@vindex org-agenda-custom-commands-contexts
To control whether an agenda command should be accessible from a specific
context, you can customize @code{org-agenda-custom-commands-contexts}.  Let's
say for example that you have an agenda command @code{"o"} displaying a view
that you only need when reading emails.  Then you would configure this option
like this:

@lisp
(setq org-agenda-custom-commands-contexts
      '(("o" (in-mode . "message-mode"))))
@end lisp

You can also tell that the command key @code{"o"} should refer to another
command key @code{"r"}.  In that case, add this command key like this:

@lisp
(setq org-agenda-custom-commands-contexts
      '(("o" "r" (in-mode . "message-mode"))))
@end lisp

See the docstring of the variable for more information.

@node Exporting agenda views
@section Exporting agenda views
@cindex agenda views, exporting

If you are away from your computer, it can be very useful to have a printed
version of some agenda views to carry around.  Org mode can export custom
agenda views as plain text, HTML@footnote{You need to install
@file{htmlize.el} from @uref{https://github.com/hniksic/emacs-htmlize,Hrvoje
Niksic's repository.}}, Postscript, PDF@footnote{To create PDF output, the
ghostscript @file{ps2pdf} utility must be installed on the system.  Selecting
a PDF file will also create the postscript file.}, and iCalendar files.  If
you want to do this only occasionally, use the command

@table @kbd
@orgcmd{C-x C-w,org-agenda-write}
@cindex exporting agenda views
@cindex agenda views, exporting
@vindex org-agenda-exporter-settings
Write the agenda view to a file.  Depending on the extension of the selected
file name, the view will be exported as HTML (extension @file{.html} or
@file{.htm}), Postscript (extension @file{.ps}), iCalendar (extension
@file{.ics}), or plain text (any other extension).  Use the variable
@code{org-agenda-exporter-settings} to set options for @file{ps-print} and
for @file{htmlize} to be used during export, for example

@vindex org-agenda-add-entry-text-maxlines
@vindex htmlize-output-type
@vindex ps-number-of-columns
@vindex ps-landscape-mode
@lisp
(setq org-agenda-exporter-settings
      '((ps-number-of-columns 2)
        (ps-landscape-mode t)
        (org-agenda-add-entry-text-maxlines 5)
        (htmlize-output-type 'css)))
@end lisp
@end table

If you need to export certain agenda views frequently, you can associate
any custom agenda command with a list of output file names
@footnote{If you want to store standard views like the weekly agenda
or the global TODO list as well, you need to define custom commands for
them in order to be able to specify file names.}.  Here is an example
that first defines custom commands for the agenda and the global
TODO list, together with a number of files to which to export them.
Then we define two block agenda commands and specify file names for them
as well.  File names can be relative to the current working directory,
or absolute.

@lisp
@group
(setq org-agenda-custom-commands
      '(("X" agenda "" nil ("agenda.html" "agenda.ps"))
        ("Y" alltodo "" nil ("todo.html" "todo.txt" "todo.ps"))
        ("h" "Agenda and Home-related tasks"
         ((agenda "")
          (tags-todo "home")
          (tags "garden"))
         nil
         ("~/views/home.html"))
        ("o" "Agenda and Office-related tasks"
         ((agenda)
          (tags-todo "work")
          (tags "office"))
         nil
         ("~/views/office.ps" "~/calendars/office.ics"))))
@end group
@end lisp

The extension of the file name determines the type of export.  If it is
@file{.html}, Org mode will try to use the @file{htmlize.el} package to
convert the buffer to HTML and save it to this file name.  If the extension
is @file{.ps}, @code{ps-print-buffer-with-faces} is used to produce
Postscript output.  If the extension is @file{.ics}, iCalendar export is run
export over all files that were used to construct the agenda, and limit the
export to entries listed in the agenda.  Any other extension produces a plain
ASCII file.

The export files are @emph{not} created when you use one of those
commands interactively because this might use too much overhead.
Instead, there is a special command to produce @emph{all} specified
files in one step:

@table @kbd
@orgcmd{C-c a e,org-store-agenda-views}
Export all agenda views that have export file names associated with
them.
@end table

You can use the options section of the custom agenda commands to also
set options for the export commands.  For example:

@lisp
(setq org-agenda-custom-commands
      '(("X" agenda ""
         ((ps-number-of-columns 2)
          (ps-landscape-mode t)
          (org-agenda-prefix-format " [ ] ")
          (org-agenda-with-colors nil)
          (org-agenda-remove-tags t))
         ("theagenda.ps"))))
@end lisp

@noindent
This command sets two options for the Postscript exporter, to make it
print in two columns in landscape format---the resulting page can be cut
in two and then used in a paper agenda.  The remaining settings modify
the agenda prefix to omit category and scheduling information, and
instead include a checkbox to check off items.  We also remove the tags
to make the lines compact, and we don't want to use colors for the
black-and-white printer.  Settings specified in
@code{org-agenda-exporter-settings} will also apply, but the settings
in @code{org-agenda-custom-commands} take precedence.

@noindent
From the command line you may also use
@example
emacs -eval (org-batch-store-agenda-views) -kill
@end example
@noindent
or, if you need to modify some parameters@footnote{Quoting depends on the
system you use, please check the FAQ for examples.}
@example
emacs -eval '(org-batch-store-agenda-views                      \
              org-agenda-span (quote month)                     \
              org-agenda-start-day "2007-11-01"                 \
              org-agenda-include-diary nil                      \
              org-agenda-files (quote ("~/org/project.org")))'  \
      -kill
@end example
@noindent
which will create the agenda views restricted to the file
@file{~/org/project.org}, without diary entries and with a 30-day
extent.

You can also extract agenda information in a way that allows further
processing by other programs.  See @ref{Extracting agenda information}, for
more information.


@node Agenda column view
@section Using column view in the agenda
@cindex column view, in agenda
@cindex agenda, column view

Column view (@pxref{Column view}) is normally used to view and edit
properties embedded in the hierarchical structure of an Org file.  It can be
quite useful to use column view also from the agenda, where entries are
collected by certain criteria.

@table @kbd
@orgcmd{C-c C-x C-c,org-agenda-columns}
Turn on column view in the agenda.
@end table

To understand how to use this properly, it is important to realize that the
entries in the agenda are no longer in their proper outline environment.
This causes the following issues:

@enumerate
@item
@vindex org-columns-default-format
@vindex org-overriding-columns-format
Org needs to make a decision which @code{COLUMNS} format to use.  Since the
entries in the agenda are collected from different files, and different files
may have different @code{COLUMNS} formats, this is a non-trivial problem.
Org first checks if the variable @code{org-agenda-overriding-columns-format}
is currently set, and if so, takes the format from there.  Otherwise it takes
the format associated with the first item in the agenda, or, if that item
does not have a specific format---defined in a property, or in its file---it
uses @code{org-columns-default-format}.

@item
@cindex property, special, @code{CLOCKSUM}
If any of the columns has a summary type defined (@pxref{Column attributes}),
turning on column view in the agenda will visit all relevant agenda files and
make sure that the computations of this property are up to date.  This is
also true for the special @code{CLOCKSUM} property.  Org will then sum the
values displayed in the agenda.  In the daily/weekly agenda, the sums will
cover a single day; in all other views they cover the entire block.  It is
vital to realize that the agenda may show the same entry @emph{twice}---for
example as scheduled and as a deadline---and it may show two entries from the
same hierarchy---for example a @emph{parent} and its @emph{child}.  In these
cases, the summation in the agenda will lead to incorrect results because
some values will count double.

@item
When the column view in the agenda shows the @code{CLOCKSUM}, that is always
the entire clocked time for this item.  So even in the daily/weekly agenda,
the clocksum listed in column view may originate from times outside the
current view.  This has the advantage that you can compare these values with
a column listing the planned total effort for a task---one of the major
applications for column view in the agenda.  If you want information about
clocked time in the displayed period use clock table mode (press @kbd{R} in
the agenda).

@item
@cindex property, special, @code{CLOCKSUM_T}
When the column view in the agenda shows the @code{CLOCKSUM_T}, that is
always today's clocked time for this item.  So even in the weekly agenda, the
clocksum listed in column view only originates from today.  This lets you
compare the time you spent on a task for today, with the time already
spent ---via @code{CLOCKSUM}---and with the planned total effort for it.
@end enumerate


@node Markup
@chapter Markup for rich export

When exporting Org mode documents, the exporter tries to reflect the
structure of the document as accurately as possible in the back-end.  Since
export targets like HTML and @LaTeX{} allow much richer formatting, Org mode has
rules on how to prepare text for rich export.  This section summarizes the
markup rules used in an Org mode buffer.

@menu
* Paragraphs::                  The basic unit of text
* Emphasis and monospace::      Bold, italic, etc.
* Horizontal rules::            Make a line
* Images and tables::           Images, tables and caption mechanism
* Literal examples::            Source code examples with special formatting
* Special symbols::             Greek letters and other symbols
* Subscripts and superscripts::  Simple syntax for raising/lowering text
* Embedded @LaTeX{}::           LaTeX can be freely used inside Org documents
@end menu

@node Paragraphs
@section Paragraphs, line breaks, and quoting
@cindex paragraphs, markup rules

Paragraphs are separated by at least one empty line.  If you need to enforce
a line break within a paragraph, use @samp{\\} at the end of a line.

To preserve the line breaks, indentation and blank lines in a region, but
otherwise use normal formatting, you can use this construct, which can also
be used to format poetry.

@cindex @code{#+BEGIN_VERSE}
@cindex verse blocks
@example
#+BEGIN_VERSE
 Great clouds overhead
 Tiny black birds rise and fall
 Snow covers Emacs

     -- AlexSchroeder
#+END_VERSE
@end example

When quoting a passage from another document, it is customary to format this
as a paragraph that is indented on both the left and the right margin.  You
can include quotations in Org mode documents like this:

@cindex @code{#+BEGIN_QUOTE}
@cindex quote blocks
@example
#+BEGIN_QUOTE
Everything should be made as simple as possible,
but not any simpler -- Albert Einstein
#+END_QUOTE
@end example

If you would like to center some text, do it like this:
@cindex @code{#+BEGIN_CENTER}
@cindex center blocks
@example
#+BEGIN_CENTER
Everything should be made as simple as possible, \\
but not any simpler
#+END_CENTER
@end example

@node Emphasis and monospace
@section Emphasis and monospace

@cindex underlined text, markup rules
@cindex bold text, markup rules
@cindex italic text, markup rules
@cindex verbatim text, markup rules
@cindex code text, markup rules
@cindex strike-through text, markup rules
@vindex org-fontify-emphasized-text
@vindex org-emphasis-regexp-components
@vindex org-emphasis-alist
You can make words @b{*bold*}, @i{/italic/}, _underlined_, @code{=verbatim=}
and @code{~code~}, and, if you must, @samp{+strike-through+}.  Text
in the code and verbatim string is not processed for Org mode specific
syntax, it is exported verbatim.

To turn off fontification for marked up text, you can set
@code{org-fontify-emphasized-text} to @code{nil}.  To narrow down the list of
available markup syntax, you can customize @code{org-emphasis-alist}.  To fine
tune what characters are allowed before and after the markup characters, you
can tweak @code{org-emphasis-regexp-components}.  Beware that changing one of
the above variables will not take effect until you reload Org, for which you
may need to restart Emacs.

@node Horizontal rules
@section Horizontal rules
@cindex horizontal rules, markup rules
A line consisting of only dashes, and at least 5 of them, will be exported as
a horizontal line.

@node Images and tables
@section Images and Tables

@cindex tables, markup rules
@cindex @code{#+CAPTION}
@cindex @code{#+NAME}
Both the native Org mode tables (@pxref{Tables}) and tables formatted with
the @file{table.el} package will be exported properly.  For Org mode tables,
the lines before the first horizontal separator line will become table header
lines.  You can use the following lines somewhere before the table to assign
a caption and a label for cross references, and in the text you can refer to
the object with @code{[[tab:basic-data]]} (@pxref{Internal links}):

@example
#+CAPTION: This is the caption for the next table (or link)
#+NAME:   tab:basic-data
   | ... | ...|
   |-----|----|
@end example

Optionally, the caption can take the form:
@example
#+CAPTION[Caption for list of tables]: Caption for table.
@end example

@cindex inlined images, markup rules
Some back-ends allow you to directly include images into the exported
document.  Org does this, if a link to an image files does not have
a description part, for example @code{[[./img/a.jpg]]}.  If you wish to
define a caption for the image and maybe a label for internal cross
references, make sure that the link is on a line by itself and precede it
with @code{#+CAPTION} and @code{#+NAME} as follows:

@example
#+CAPTION: This is the caption for the next figure link (or table)
#+NAME:   fig:SED-HR4049
[[./img/a.jpg]]
@end example

@noindent
Such images can be displayed within the buffer.  @xref{Handling links,the
discussion of image links}.

Even though images and tables are prominent examples of captioned structures,
the same caption mechanism can apply to many others (e.g., @LaTeX{}
equations, source code blocks).  Depending on the export back-end, those may
or may not be handled.

@node Literal examples
@section Literal examples
@cindex literal examples, markup rules
@cindex code line references, markup rules

You can include literal examples that should not be subjected to
markup.  Such examples will be typeset in monospace, so this is well suited
for source code and similar examples.
@cindex @code{#+BEGIN_EXAMPLE}

@example
#+BEGIN_EXAMPLE
Some example from a text file.
#+END_EXAMPLE
@end example

Note that such blocks may be @i{indented} in order to align nicely with
indented text and in particular with plain list structure (@pxref{Plain
lists}).  For simplicity when using small examples, you can also start the
example lines with a colon followed by a space.  There may also be additional
whitespace before the colon:

@example
Here is an example
   : Some example from a text file.
@end example

@cindex formatting source code, markup rules
@vindex org-latex-listings
If the example is source code from a programming language, or any other text
that can be marked up by font-lock in Emacs, you can ask for the example to
look like the fontified Emacs buffer@footnote{This works automatically for
the HTML back-end (it requires version 1.34 of the @file{htmlize.el} package,
which you need to install).  Fontified code chunks in @LaTeX{} can be
achieved using either the
@url{https://www.ctan.org/tex-archive/macros/latex/contrib/listings/?lang=en, listings,}
or the
@url{https://github.com/gpoore/minted, minted,} package.
If you use minted or listing, you must load the packages manually, for
example by adding the desired package to
@code{org-latex-packages-alist}.  Refer to @code{org-latex-listings}
for details.}.  This is done with the @samp{src} block, where you also need
to specify the name of the major mode that should be used to fontify the
example@footnote{Code in @samp{src} blocks may also be evaluated either
interactively or on export.  @xref{Working with source code}, for more
information on evaluating code blocks.}, see @ref{Easy templates} for
shortcuts to easily insert code blocks.
@cindex @code{#+BEGIN_SRC}

@example
#+BEGIN_SRC emacs-lisp
  (defun org-xor (a b)
     "Exclusive or."
     (if a (not b) b))
#+END_SRC
@end example

Both in @code{example} and in @code{src} snippets, you can add a @code{-n}
switch to the end of the @code{BEGIN} line, to get the lines of the example
numbered.  The @code{-n} takes an optional numeric argument specifying the
starting line number of the block.  If you use a @code{+n} switch, the
numbering from the previous numbered snippet will be continued in the current
one.  The @code{+n} can also take a numeric argument.  The value of the
argument will be added to the last line of the previous block to determine
the starting line number.

@example
#+BEGIN_SRC emacs-lisp -n 20
 ;; this will export with line number 20
 (message "This is line 21")
#+END_SRC
#+BEGIN_SRC emacs-lisp +n 10
 ;; This will be listed as line 31
 (message "This is line 32")
#+END_SRC
@end example

In literal examples, Org will interpret strings like @samp{(ref:name)} as
labels, and use them as targets for special hyperlinks like @code{[[(name)]]}
(i.e., the reference name enclosed in single parenthesis).  In HTML, hovering
the mouse over such a link will remote-highlight the corresponding code line,
which is kind of cool.

You can also add a @code{-r} switch which @i{removes} the labels from the
source code@footnote{Adding @code{-k} to @code{-n -r} will @i{keep} the
labels in the source code while using line numbers for the links, which might
be useful to explain those in an Org mode example code.}.  With the @code{-n}
switch, links to these references will be labeled by the line numbers from
the code listing, otherwise links will use the labels with no parentheses.
Here is an example:

@example
#+BEGIN_SRC emacs-lisp -n -r
(save-excursion                  (ref:sc)
   (goto-char (point-min)))      (ref:jump)
#+END_SRC
In line [[(sc)]] we remember the current position.  [[(jump)][Line (jump)]]
jumps to point-min.
@end example

@cindex indentation, in source blocks
Finally, you can use @code{-i} to preserve the indentation of a specific code
block (@pxref{Editing source code}).

@vindex org-coderef-label-format
If the syntax for the label format conflicts with the language syntax, use a
@code{-l} switch to change the format, for example @samp{#+BEGIN_SRC pascal
-n -r -l "((%s))"}.  See also the variable @code{org-coderef-label-format}.

HTML export also allows examples to be published as text areas (@pxref{Text
areas in HTML export}).

Because the @code{#+BEGIN_...} and @code{#+END_...} patterns need to be added
so often, shortcuts are provided using the Easy templates facility
(@pxref{Easy templates}).

@table @kbd
@kindex C-c '
@item C-c '
Edit the source code example at point in its native mode.  This works by
switching to a temporary buffer with the source code.  You need to exit by
pressing @kbd{C-c '} again@footnote{Upon exit, lines starting with @samp{*},
@samp{,*}, @samp{#+} and @samp{,#+} will get a comma prepended, to keep them
from being interpreted by Org as outline nodes or special syntax.  These
commas will be stripped for editing with @kbd{C-c '}, and also for export.}.
The edited version will then replace the old version in the Org buffer.
Fixed-width regions (where each line starts with a colon followed by a space)
will be edited using @code{artist-mode}@footnote{You may select
a different-mode with the variable @code{org-edit-fixed-width-region-mode}.}
to allow creating ASCII drawings easily.  Using this command in an empty line
will create a new fixed-width region.
@kindex C-c l
@item C-c l
Calling @code{org-store-link} while editing a source code example in a
temporary buffer created with @kbd{C-c '} will prompt for a label.  Make sure
that it is unique in the current buffer, and insert it with the proper
formatting like @samp{(ref:label)} at the end of the current line.  Then the
label is stored as a link @samp{(label)}, for retrieval with @kbd{C-c C-l}.
@end table

@node Special symbols
@section Special symbols
@cindex Org entities
@cindex math symbols
@cindex special symbols
@cindex HTML entities
@cindex @LaTeX{} entities

You can use @LaTeX{}-like syntax to insert special symbols---named
entities---like @samp{\alpha} to indicate the Greek letter, or @samp{\to} to
indicate an arrow.  Completion for these symbols is available, just type
@samp{\} and maybe a few letters, and press @kbd{M-@key{TAB}} to see possible
completions.  If you need such a symbol inside a word, terminate it with
a pair of curly brackets.  For example

@example
Pro tip: Given a circle \Gamma of diameter d, the length of its circumference
is \pi@{@}d.
@end example

@findex org-entities-help
@vindex org-entities-user
A large number of entities is provided, with names taken from both HTML and
@LaTeX{}; you can comfortably browse the complete list from a dedicated
buffer using the command @code{org-entities-help}.  It is also possible to
provide your own special symbols in the variable @code{org-entities-user}.

During export, these symbols are transformed into the native format of the
exporter back-end.  Strings like @code{\alpha} are exported as @code{&alpha;}
in the HTML output, and as @code{\(\alpha\)} in the @LaTeX{} output.
Similarly, @code{\nbsp} becomes @code{&nbsp;} in HTML and @code{~} in
@LaTeX{}.

@cindex escaping characters
Entities may also be used as a may to escape markup in an Org document, e.g.,
@samp{\under@{@}not underlined\under} exports as @samp{_not underlined_}.

@cindex special symbols, in-buffer display
If you would like to see entities displayed as UTF-8 characters, use the
following command@footnote{You can turn this on by default by setting the
variable @code{org-pretty-entities}, or on a per-file base with the
@code{#+STARTUP} option @code{entitiespretty}.}:

@table @kbd
@cindex @code{entitiespretty}, STARTUP keyword
@kindex C-c C-x \
@item C-c C-x \
Toggle display of entities as UTF-8 characters.  This does not change the
buffer content which remains plain ASCII, but it overlays the UTF-8 character
for display purposes only.
@end table

@cindex shy hyphen, special symbol
@cindex dash, special symbol
@cindex ellipsis, special symbol
In addition to regular entities defined above, Org exports in a special
way@footnote{This behavior can be disabled with @code{-} export setting
(@pxref{Export settings}).} the following commonly used character
combinations: @samp{\-} is treated as a shy hyphen, @samp{--} and @samp{---}
are converted into dashes, and @samp{...} becomes a compact set of dots.

@node Subscripts and superscripts
@section Subscripts and superscripts
@cindex subscript
@cindex superscript

@samp{^} and @samp{_} are used to indicate super- and subscripts.  To
increase the readability of ASCII text, it is not necessary---but OK---to
surround multi-character sub- and superscripts with curly braces.  Those are,
however, mandatory, when more than one word is involved.  For example

@example
The radius of the sun is R_sun = 6.96 x 10^8 m.  On the other hand, the
radius of Alpha Centauri is R_@{Alpha Centauri@} = 1.28 x R_@{sun@}.
@end example

@vindex org-use-sub-superscripts
If you write a text where the underscore is often used in a different
context, Org's convention to always interpret these as subscripts can get in
your way.  Configure the variable @code{org-use-sub-superscripts} to change
this convention.  For example, when setting this variable to @code{@{@}},
@samp{a_b} will not be interpreted as a subscript, but @samp{a_@{b@}} will.

@table @kbd
@kindex C-c C-x \
@item C-c C-x \
In addition to showing entities as UTF-8 characters, this command will also
format sub- and superscripts in a WYSIWYM way.
@end table

@node Embedded @LaTeX{}
@section Embedded @LaTeX{}
@cindex @TeX{} interpretation
@cindex @LaTeX{} interpretation

Plain ASCII is normally sufficient for almost all note taking.  Exceptions
include scientific notes, which often require mathematical symbols and the
occasional formula.  @LaTeX{}@footnote{@LaTeX{} is a macro system based on
Donald E. Knuth's @TeX{} system.  Many of the features described here as
``@LaTeX{}'' are really from @TeX{}, but for simplicity I am blurring this
distinction.}  is widely used to typeset scientific documents.  Org mode
supports embedding @LaTeX{} code into its files, because many academics are
used to writing and reading @LaTeX{} source code, and because it can be
readily processed to produce pretty output for a number of export back-ends.

@menu
* @LaTeX{} fragments::          Complex formulas made easy
* Previewing @LaTeX{} fragments::  What will this snippet look like?
* CDLaTeX mode::                Speed up entering of formulas
@end menu

@node @LaTeX{} fragments
@subsection @LaTeX{} fragments
@cindex @LaTeX{} fragments

@vindex org-format-latex-header
Org mode can contain @LaTeX{} math fragments, and it supports ways to process
these for several export back-ends.  When exporting to @LaTeX{}, the code is
left as it is.  When exporting to HTML, Org can use either
@uref{http://www.mathjax.org, MathJax} (@pxref{Math formatting in HTML
export}) or transcode the math into images (see @pxref{Previewing @LaTeX{}
fragments}).

@LaTeX{} fragments don't need any special marking at all.  The following
snippets will be identified as @LaTeX{} source code:
@itemize @bullet
@item
Environments of any kind@footnote{When MathJax is used, only the
environments recognized by MathJax will be processed.  When
@file{dvipng} program, @file{dvisvgm} program or @file{imagemagick} suite is
used to create images, any @LaTeX{} environment will be handled.}.  The only
requirement is that the @code{\begin} statement appears on a new line, at the
beginning of the line or after whitespaces only.
@item
Text within the usual @LaTeX{} math delimiters.  To avoid conflicts with
currency specifications, single @samp{$} characters are only recognized as
math delimiters if the enclosed text contains at most two line breaks, is
directly attached to the @samp{$} characters with no whitespace in between,
and if the closing @samp{$} is followed by whitespace or punctuation
(parentheses and quotes are considered to be punctuation in this
context).  For the other delimiters, there is no such restriction, so when in
doubt, use @samp{\(...\)} as inline math delimiters.
@end itemize

@noindent For example:

@example
\begin@{equation@}
x=\sqrt@{b@}
\end@{equation@}

If $a^2=b$ and \( b=2 \), then the solution must be
either $$ a=+\sqrt@{2@} $$ or \[ a=-\sqrt@{2@} \].
@end example

@c FIXME
@c @noindent
@c @vindex org-format-latex-options
@c If you need any of the delimiter ASCII sequences for other purposes, you
@c can configure the option @code{org-format-latex-options} to deselect the
@c ones you do not wish to have interpreted by the @LaTeX{} converter.

@vindex org-export-with-latex
@LaTeX{} processing can be configured with the variable
@code{org-export-with-latex}.  The default setting is @code{t} which means
MathJax for HTML, and no processing for ASCII and @LaTeX{} back-ends.
You can also set this variable on a per-file basis using one of these
lines:

@example
#+OPTIONS: tex:t          @r{Do the right thing automatically (MathJax)}
#+OPTIONS: tex:nil        @r{Do not process @LaTeX{} fragments at all}
#+OPTIONS: tex:verbatim   @r{Verbatim export, for jsMath or so}
@end example

@node Previewing @LaTeX{} fragments
@subsection Previewing @LaTeX{} fragments
@cindex @LaTeX{} fragments, preview

@vindex org-preview-latex-default-process
If you have a working @LaTeX{} installation and @file{dvipng}, @file{dvisvgm}
or @file{convert} installed@footnote{These are respectively available at
@url{http://sourceforge.net/projects/dvipng/}, @url{http://dvisvgm.bplaced.net/}
and from the @file{imagemagick} suite.  Choose the converter by setting the
variable @code{org-preview-latex-default-process} accordingly.}, @LaTeX{}
fragments can be processed to produce images of the typeset expressions to be
used for inclusion while exporting to HTML (see @pxref{@LaTeX{} fragments}),
or for inline previewing within Org mode.

@vindex org-format-latex-options
@vindex org-format-latex-header
You can customize the variables @code{org-format-latex-options} and
@code{org-format-latex-header} to influence some aspects of the preview.  In
particular, the @code{:scale} (and for HTML export, @code{:html-scale})
property of the former can be used to adjust the size of the preview images.

@table @kbd
@kindex C-c C-x C-l
@item C-c C-x C-l
Produce a preview image of the @LaTeX{} fragment at point and overlay it
over the source code.  If there is no fragment at point, process all
fragments in the current entry (between two headlines).  When called
with a prefix argument, process the entire subtree.  When called with
two prefix arguments, or when the cursor is before the first headline,
process the entire buffer.
@kindex C-c C-c
@item C-c C-c
Remove the overlay preview images.
@end table

@vindex org-startup-with-latex-preview
You can turn on the previewing of all @LaTeX{} fragments in a file with

@example
#+STARTUP: latexpreview
@end example

To disable it, simply use

@example
#+STARTUP: nolatexpreview
@end example

@node CDLaTeX mode
@subsection Using CD@LaTeX{} to enter math
@cindex CD@LaTeX{}

CD@LaTeX{} mode is a minor mode that is normally used in combination with a
major @LaTeX{} mode like AUC@TeX{} in order to speed-up insertion of
environments and math templates.  Inside Org mode, you can make use of some
of the features of CD@LaTeX{} mode.  You need to install @file{cdlatex.el}
and @file{texmathp.el} (the latter comes also with AUC@TeX{}) from
@url{https://staff.fnwi.uva.nl/c.dominik/Tools/cdlatex}.  Don't use
CD@LaTeX{} mode itself under Org mode, but use the light version
@code{org-cdlatex-mode} that comes as part of Org mode.  Turn it on for the
current buffer with @kbd{M-x org-cdlatex-mode @key{RET}}, or for all Org
files with

@lisp
(add-hook 'org-mode-hook 'turn-on-org-cdlatex)
@end lisp

When this mode is enabled, the following features are present (for more
details see the documentation of CD@LaTeX{} mode):
@itemize @bullet
@kindex C-c @{
@item
Environment templates can be inserted with @kbd{C-c @{}.
@item
@kindex TAB
The @key{TAB} key will do template expansion if the cursor is inside a
@LaTeX{} fragment@footnote{Org mode has a method to test if the cursor is
inside such a fragment, see the documentation of the function
@code{org-inside-LaTeX-fragment-p}.}.  For example, @key{TAB} will
expand @code{fr} to @code{\frac@{@}@{@}} and position the cursor
correctly inside the first brace.  Another @key{TAB} will get you into
the second brace.  Even outside fragments, @key{TAB} will expand
environment abbreviations at the beginning of a line.  For example, if
you write @samp{equ} at the beginning of a line and press @key{TAB},
this abbreviation will be expanded to an @code{equation} environment.
To get a list of all abbreviations, type @kbd{M-x cdlatex-command-help
@key{RET}}.
@item
@kindex _
@kindex ^
@vindex cdlatex-simplify-sub-super-scripts
Pressing @kbd{_} and @kbd{^} inside a @LaTeX{} fragment will insert these
characters together with a pair of braces.  If you use @key{TAB} to move
out of the braces, and if the braces surround only a single character or
macro, they are removed again (depending on the variable
@code{cdlatex-simplify-sub-super-scripts}).
@item
@kindex `
Pressing the grave accent @kbd{`} followed by a character inserts math
macros, also outside @LaTeX{} fragments.  If you wait more than 1.5 seconds
after the grave accent, a help window will pop up.
@item
@kindex '
Pressing the apostrophe @kbd{'} followed by another character modifies
the symbol before point with an accent or a font.  If you wait more than
1.5 seconds after the apostrophe, a help window will pop up.  Character
modification will work only inside @LaTeX{} fragments; outside the quote
is normal.
@end itemize

@node Exporting
@chapter Exporting
@cindex exporting

Sometimes, you may want to pretty print your notes, publish them on the web
or even share them with people not using Org.  In these cases, the Org export
facilities can be used to convert your documents to a variety of other
formats, while retaining as much structure (@pxref{Document structure}) and
markup (@pxref{Markup}) as possible.

@cindex export back-end
Libraries responsible for such translation are called back-ends.  Org ships
with the following ones

@itemize
@item ascii (ASCII format)
@item beamer (@LaTeX{} Beamer format)
@item html (HTML format)
@item icalendar (iCalendar format)
@item latex (@LaTeX{} format)
@item md (Markdown format)
@item odt (OpenDocument Text format)
@item org (Org format)
@item texinfo (Texinfo format)
@item man (Man page format)
@end itemize

@noindent Org also uses additional libraries located in @code{contrib/}
directory (@pxref{Installation}).  Users can install additional export
libraries for additional formats from the Emacs packaging system.  For easy
discovery, these packages have a common naming scheme: @file{ox-NAME}, where
NAME is one of the formats.  For example, @file{ox-koma-letter} for
@code{koma-letter} back-end.

@vindex org-export-backends
Org loads back-ends for the following formats by default: @code{ascii},
@code{html}, @code{icalendar}, @code{latex} and @code{odt}.

Org can load additional back-ends either of two ways: through the
@code{org-export-backends} variable configuration; or, by requiring the
library in the Emacs init file like this:

@lisp
(require 'ox-md)
@end lisp

@menu
* The export dispatcher::       The main interface
* Export settings::             Common export settings
* Table of contents::           The if and where of the table of contents
* Include files::               Include additional files into a document
* Macro replacement::           Use macros to create templates
* Comment lines::               What will not be exported
* ASCII/Latin-1/UTF-8 export::  Exporting to flat files with encoding
* Beamer export::               Exporting as a Beamer presentation
* HTML export::                 Exporting to HTML
* @LaTeX{} export::             Exporting to @LaTeX{}, and processing to PDF
* Markdown export::             Exporting to Markdown
* OpenDocument Text export::    Exporting to OpenDocument Text
* Org export::                  Exporting to Org
* Texinfo export::              Exporting to Texinfo
* iCalendar export::            Exporting to iCalendar
* Other built-in back-ends::    Exporting to a man page
* Advanced configuration::      Fine-tuning the export output
* Export in foreign buffers::   Author tables and lists in Org syntax
@end menu

@node The export dispatcher
@section The export dispatcher
@vindex org-export-dispatch-use-expert-ui
@cindex Export, dispatcher

The export dispatcher is the main interface for Org's exports.  A
hierarchical menu presents the currently configured export formats.  Options
are shown as easy toggle switches on the same screen.

Org also has a minimal prompt interface for the export dispatcher.  When the
variable @code{org-export-dispatch-use-expert-ui} is set to a non-@code{nil}
value, Org prompts in the minibuffer.  To switch back to the hierarchical
menu, press @key{?}.

@table @asis
@orgcmd{C-c C-e,org-export-dispatch}

Invokes the export dispatcher interface.  The options show default settings.
The @kbd{C-u} prefix argument preserves options from the previous export,
including any sub-tree selections.

@end table

Org exports the entire buffer by default.  If the Org buffer has an active
region, then Org exports just that region.

These are the export options, the key combinations that toggle them
(@pxref{Export settings}):

@table @kbd
@item C-a
@vindex org-export-async-init-file
Toggles asynchronous export.  Asynchronous export uses an external Emacs
process with a specially configured initialization file to complete the
exporting process in the background thereby releasing the current interface.
This is particularly useful when exporting long documents.

Output from an asynchronous export is saved on the ``the export stack''.  To
view this stack, call the export dispatcher with a double @kbd{C-u} prefix
argument.  If already in the export dispatcher menu, @kbd{&} displays the
stack.

@vindex org-export-in-background
To make the background export process the default, customize the variable,
@code{org-export-in-background}.

@item C-b
Toggle body-only export.  Useful for excluding headers and footers in the
export.  Affects only those back-end formats that have such sections---like
@code{<head>...</head>} in HTML.

@item C-s
@vindex org-export-initial-scope
Toggle sub-tree export.  When turned on, Org exports only the sub-tree starting
from the cursor position at the time the export dispatcher was invoked.  Org
uses the top heading of this sub-tree as the document's title.  If the cursor
is not on a heading, Org uses the nearest enclosing header.  If the cursor is
in the document preamble, Org signals an error and aborts export.

To make the sub-tree export the default, customize the variable,
@code{org-export-initial-scope}.

@item C-v
Toggle visible-only export.  Useful for exporting only visible parts of an
Org document by adjusting outline visibility settings.
@end table

@node Export settings
@section Export settings
@cindex Export, settings

@cindex @code{#+OPTIONS}
Export options can be set: globally with variables; for an individual file by
making variables buffer-local with in-buffer settings (@pxref{In-buffer
settings}), by setting individual keywords, or by specifying them in a
compact form with the @code{#+OPTIONS} keyword; or for a tree by setting
properties (@pxref{Properties and columns}).  Options set at a specific level
override options set at a more general level.

@cindex @code{#+SETUPFILE}
In-buffer settings may appear anywhere in the file, either directly or
indirectly through a file included using @samp{#+SETUPFILE: filename or URL}
syntax.  Option keyword sets tailored to a particular back-end can be
inserted from the export dispatcher (@pxref{The export dispatcher}) using the
@code{Insert template} command by pressing @kbd{#}.  To insert keywords
individually, a good way to make sure the keyword is correct is to type
@code{#+} and then to use @kbd{M-@key{TAB}}@footnote{Many desktops intercept
@kbd{M-@key{TAB}} to switch windows.  Use @kbd{C-M-i} or @kbd{@key{ESC}
@key{TAB}} instead.} for completion.

The export keywords available for every back-end, and their equivalent global
variables, include:

@table @samp
@item AUTHOR
@cindex @code{#+AUTHOR}
@vindex user-full-name
The document author (@code{user-full-name}).

@item CREATOR
@cindex @code{#+CREATOR}
@vindex org-export-creator-string
Entity responsible for output generation (@code{org-export-creator-string}).

@item DATE
@cindex @code{#+DATE}
@vindex org-export-date-timestamp-format
A date or a time-stamp@footnote{The variable
@code{org-export-date-timestamp-format} defines how this time-stamp will be
exported.}.

@item EMAIL
@cindex @code{#+EMAIL}
@vindex user-mail-address
The email address (@code{user-mail-address}).

@item LANGUAGE
@cindex @code{#+LANGUAGE}
@vindex org-export-default-language
Language to use for translating certain strings
(@code{org-export-default-language}).  With @samp{#+LANGUAGE: fr}, for
example, Org translates @emph{Table of contents} to the French @emph{Table
des matières}.

@item SELECT_TAGS
@cindex @code{#+SELECT_TAGS}
@vindex org-export-select-tags
The default value is @code{:export:}.  When a tree is tagged with
@code{:export:} (@code{org-export-select-tags}), Org selects that tree and
its sub-trees for export.  Org excludes trees with @code{:noexport:} tags,
see below.  When selectively exporting files with @code{:export:} tags set,
Org does not export any text that appears before the first headline.

@item EXCLUDE_TAGS
@cindex @code{#+EXCLUDE_TAGS}
@vindex org-export-exclude-tags
The default value is @code{:noexport:}.  When a tree is tagged with
@code{:noexport:} (@code{org-export-exclude-tags}), Org excludes that tree
and its sub-trees from export.  Entries tagged with @code{:noexport:} will be
unconditionally excluded from the export, even if they have an
@code{:export:} tag.  Even if a sub-tree is not exported, Org will execute any
code blocks contained in them.

@item TITLE
@cindex @code{#+TITLE}
@cindex document title
Org displays this title.  For long titles, use multiple @code{#+TITLE} lines.

@item EXPORT_FILE_NAME
@cindex @code{#+EXPORT_FILE_NAME}
The name of the output file to be generated.  Otherwise, Org generates the
file name based on the buffer name and the extension based on the back-end
format.
@end table

The @code{#+OPTIONS} keyword is a compact form.  To configure multiple
options, use several @code{#+OPTIONS} lines.  @code{#+OPTIONS} recognizes the
following arguments.

@table @code
@item ':
@vindex org-export-with-smart-quotes
Toggle smart quotes (@code{org-export-with-smart-quotes}).  Depending on the
language used, when activated, Org treats pairs of double quotes as primary
quotes, pairs of single quotes as secondary quotes, and single quote marks as
apostrophes.

@item *:
Toggle emphasized text (@code{org-export-with-emphasize}).

@item -:
@vindex org-export-with-special-strings
Toggle conversion of special strings
(@code{org-export-with-special-strings}).

@item ::
@vindex org-export-with-fixed-width
Toggle fixed-width sections
(@code{org-export-with-fixed-width}).

@item <:
@vindex org-export-with-timestamps
Toggle inclusion of time/date active/inactive stamps
(@code{org-export-with-timestamps}).

@item \n:
@vindex org-export-preserve-breaks
Toggles whether to preserve line breaks (@code{org-export-preserve-breaks}).

@item ^:
@vindex org-export-with-sub-superscripts
Toggle @TeX{}-like syntax for sub- and superscripts.  If you write "^:@{@}",
@samp{a_@{b@}} will be interpreted, but the simple @samp{a_b} will be left as
it is (@code{org-export-with-sub-superscripts}).

@item arch:
@vindex org-export-with-archived-trees
Configure how archived trees are exported.  When set to @code{headline}, the
export process skips the contents and processes only the headlines
(@code{org-export-with-archived-trees}).

@item author:
@vindex org-export-with-author
Toggle inclusion of author name into exported file
(@code{org-export-with-author}).

@item broken-links:
@vindex org-export-with-broken-links
Toggles if Org should continue exporting upon finding a broken internal link.
When set to @code{mark}, Org clearly marks the problem link in the output
(@code{org-export-with-broken-links}).

@item c:
@vindex org-export-with-clocks
Toggle inclusion of CLOCK keywords (@code{org-export-with-clocks}).

@item creator:
@vindex org-export-with-creator
Toggle inclusion of creator information in the exported file
(@code{org-export-with-creator}).

@item d:
@vindex org-export-with-drawers
Toggles inclusion of drawers, or list of drawers to include, or list of
drawers to exclude (@code{org-export-with-drawers}).

@item date:
@vindex org-export-with-date
Toggle inclusion of a date into exported file (@code{org-export-with-date}).

@item e:
@vindex org-export-with-entities
Toggle inclusion of entities (@code{org-export-with-entities}).

@item email:
@vindex org-export-with-email
Toggle inclusion of the author's e-mail into exported file
(@code{org-export-with-email}).

@item f:
@vindex org-export-with-footnotes
Toggle the inclusion of footnotes (@code{org-export-with-footnotes}).

@item H:
@vindex org-export-headline-levels
Set the number of headline levels for export
(@code{org-export-headline-levels}).  Below that level, headlines are treated
differently.  In most back-ends, they become list items.

@item inline:
@vindex org-export-with-inlinetasks
Toggle inclusion of inlinetasks (@code{org-export-with-inlinetasks}).

@item num:
@vindex org-export-with-section-numbers
@cindex property, @code{UNNUMBERED}
Toggle section-numbers (@code{org-export-with-section-numbers}).  When set to
number @samp{n}, Org numbers only those headlines at level @samp{n} or above.
Setting @code{UNNUMBERED} property to non-@code{nil} disables numbering of
a heading.  Since subheadings inherit from this property, it affects their
numbering, too.

@item p:
@vindex org-export-with-planning
Toggle export of planning information (@code{org-export-with-planning}).
``Planning information'' comes from lines located right after the headline
and contain any combination of these cookies: @code{SCHEDULED:},
@code{DEADLINE:}, or @code{CLOSED:}.

@item pri:
@vindex org-export-with-priority
Toggle inclusion of priority cookies (@code{org-export-with-priority}).

@item prop:
@vindex org-export-with-properties
Toggle inclusion of property drawers, or list the properties to include
(@code{org-export-with-properties}).

@item stat:
@vindex org-export-with-statistics-cookies
Toggle inclusion of statistics cookies
(@code{org-export-with-statistics-cookies}).

@item tags:
@vindex org-export-with-tags
Toggle inclusion of tags, may also be @code{not-in-toc}
(@code{org-export-with-tags}).

@item tasks:
@vindex org-export-with-tasks
Toggle inclusion of tasks (TODO items); or @code{nil} to remove all tasks; or
@code{todo} to remove DONE tasks; or list the keywords to keep
(@code{org-export-with-tasks}).

@item tex:
@vindex org-export-with-latex
@code{nil} does not export; @code{t} exports; @code{verbatim} keeps
everything in verbatim (@code{org-export-with-latex}).

@item timestamp:
@vindex org-export-time-stamp-file
Toggle inclusion of the creation time in the exported file
(@code{org-export-time-stamp-file}).

@item title:
@vindex org-export-with-title
Toggle inclusion of title (@code{org-export-with-title}).

@item toc:
@vindex org-export-with-toc
Toggle inclusion of the table of contents, or set the level limit
(@code{org-export-with-toc}).

@item todo:
@vindex org-export-with-todo-keywords
Toggle inclusion of TODO keywords into exported text
(@code{org-export-with-todo-keywords}).

@item |:
@vindex org-export-with-tables
Toggle inclusion of tables (@code{org-export-with-tables}).

@end table

When exporting sub-trees, special node properties in them can override the
above keywords.  They are special because they have an @samp{EXPORT_} prefix.
For example, @samp{DATE} and @samp{EXPORT_FILE_NAME} keywords become,
respectively, @samp{EXPORT_DATE} and @samp{EXPORT_FILE_NAME}.  Except for
@samp{SETUPFILE}, all other keywords listed above have an @samp{EXPORT_}
equivalent.

@cindex @code{#+BIND}
@vindex org-export-allow-bind-keywords
If @code{org-export-allow-bind-keywords} is non-@code{nil}, Emacs variables
can become buffer-local during export by using the BIND keyword.  Its syntax
is @samp{#+BIND: variable value}.  This is particularly useful for in-buffer
settings that cannot be changed using keywords.

@node Table of contents
@section Table of contents
@cindex table of contents
@cindex list of tables
@cindex list of listings

@cindex @code{#+TOC}
@vindex org-export-with-toc
Org normally inserts the table of contents directly before the first headline
of the file.  Org sets the TOC depth the same as the headline levels in the
file.  Use a lower number for lower TOC depth.  To turn off TOC entirely, use
@code{nil}.  This is configured in the @code{org-export-with-toc} variable or
as keywords in an Org file as:

@example
#+OPTIONS: toc:2          @r{only include two levels in TOC}
#+OPTIONS: toc:nil        @r{no default TOC at all}
@end example

To move the table of contents to a different location, first turn off the
default with @code{org-export-with-toc} variable or with @code{#+OPTIONS:
toc:nil}.  Then insert @code{#+TOC: headlines N} at the desired location(s).

@example
#+OPTIONS: toc:nil        @r{no default TOC}
...
#+TOC: headlines 2        @r{insert TOC here, with two headline levels}
@end example

To adjust the TOC depth for a specific section of the Org document, append an
additional @samp{local} parameter.  This parameter becomes a relative depth
for the current level.

Note that for this feature to work properly in @LaTeX{} export, the Org file
requires the inclusion of the @code{titletoc} package.  Because of
compatibility issues, @code{titletoc} has to be loaded @emph{before}
@code{hyperref}.  Customize the @code{org-latex-default-packages-alist}
variable.

@example
* Section #+TOC: headlines 1 local @r{insert local TOC, with direct children
only}
@end example

Use the @code{TOC} keyword to generate list of tables (resp.@: all listings)
with captions.

@example
#+TOC: listings           @r{build a list of listings}
#+TOC: tables             @r{build a list of tables}
@end example

@cindex property, @code{ALT_TITLE}
Normally Org uses the headline for its entry in the table of contents.  But
with @code{ALT_TITLE} property, a different entry can be specified for the
table of contents.

@node Include files
@section Include files
@cindex include files, during export
Include other files during export.  For example, to include your @file{.emacs}
file, you could use:
@cindex @code{#+INCLUDE}

@example
#+INCLUDE: "~/.emacs" src emacs-lisp
@end example

@noindent
The first parameter is the file name to include.  The optional second
parameter specifies the block type: @samp{example}, @samp{export} or
@samp{src}.  The optional third parameter specifies the source code language
to use for formatting the contents.  This is relevant to both @samp{export}
and @samp{src} block types.

If an include file is specified as having a markup language, Org neither
checks for valid syntax nor changes the contents in any way.  For
@samp{example} and @samp{src} blocks, Org code-escapes the contents before
inclusion.

If an include file is not specified as having any markup language, Org
assumes it be in Org format and proceeds as usual with a few exceptions.  Org
makes the footnote labels (@pxref{Footnotes}) in the included file local to
that file.  The contents of the included file will belong to the same
structure---headline, item---containing the @code{INCLUDE} keyword.  In
particular, headlines within the file will become children of the current
section.  That behavior can be changed by providing an additional keyword
parameter, @code{:minlevel}.  It shifts the headlines in the included file to
become the lowest level.  For example, this syntax makes the included file
a sibling of the current top-level headline:

@example
#+INCLUDE: "~/my-book/chapter2.org" :minlevel 1
@end example

Inclusion of only portions of files are specified using ranges parameter with
@code{:lines} keyword.  The line at the upper end of the range will not be
included.  The start and/or the end of the range may be omitted to use the
obvious defaults.

@example
#+INCLUDE: "~/.emacs" :lines "5-10"   @r{Include lines 5 to 10, 10 excluded}
#+INCLUDE: "~/.emacs" :lines "-10"    @r{Include lines 1 to 10, 10 excluded}
#+INCLUDE: "~/.emacs" :lines "10-"    @r{Include lines from 10 to EOF}
@end example

Inclusions may specify a file-link to extract an object matched by
@code{org-link-search}@footnote{Note that
@code{org-link-search-must-match-exact-headline} is locally bound to
non-@code{nil}.  Therefore, @code{org-link-search} only matches headlines and
named elements.}  (@pxref{Search options}).

To extract only the contents of the matched object, set @code{:only-contents}
property to non-@code{nil}.  This will omit any planning lines or property
drawers.  The ranges for @code{:lines} keyword are relative to the requested
element.  Some examples:

@example
#+INCLUDE: "./paper.org::#theory" :only-contents t
   @r{Include the body of the heading with the custom id @samp{theory}}
#+INCLUDE: "./paper.org::mytable"  @r{Include named element.}
#+INCLUDE: "./paper.org::*conclusion" :lines 1-20
   @r{Include the first 20 lines of the headline named @samp{conclusion}.}
@end example

@table @kbd
@kindex C-c '
@item C-c '
Visit the include file at point.
@end table

@node Macro replacement
@section Macro replacement
@cindex macro replacement, during export
@cindex @code{#+MACRO}

@vindex org-export-global-macros
Macros replace text snippets during export.  Macros are defined globally in
@code{org-export-global-macros}, or document-wise with the following syntax:

@example
#+MACRO: name   replacement text $1, $2 are arguments
@end example

@noindent which can be referenced using
@code{@{@{@{name(arg1, arg2)@}@}@}}@footnote{Since commas separate the
arguments, commas within arguments have to be escaped with the backslash
character.  So only those backslash characters before a comma need escaping
with another backslash character.}.

Org recognizes macro references in following Org markup areas: paragraphs,
headlines, verse blocks, tables cells and lists.  Org also recognizes macro
references in keywords, such as @code{#+CAPTION}, @code{#+TITLE},
@code{#+AUTHOR}, @code{#+DATE}, and for some back-end specific export
options.

Org comes with following pre-defined macros:

@table @code
@item @{@{@{title@}@}@}
@itemx @{@{@{author@}@}@}
@itemx @{@{@{email@}@}@}
@cindex title, macro
@cindex author, macro
@cindex email, macro
Org replaces these macro references with available information at the time of
export.

@item @{@{@{date@}@}@}
@itemx @{@{@{date(@var{FORMAT})@}@}@}
@cindex date, macro
This macro refers to the @code{#+DATE} keyword.  @var{FORMAT} is an optional
argument to the @code{@{@{@{date@}@}@}} macro that will be used only if
@code{#+DATE} is a single timestamp.  @var{FORMAT} should be a format string
understood by @code{format-time-string}.

@item @{@{@{time(@var{FORMAT})@}@}@}
@itemx @{@{@{modification-time(@var{FORMAT}, @var{VC})@}@}@}
@cindex time, macro
@cindex modification time, macro
These macros refer to the document's date and time of export and date and
time of modification.  @var{FORMAT} is a string understood by
@code{format-time-string}.  If the second argument to the
@code{modification-time} macro is non-@code{nil}, Org uses @file{vc.el} to
retrieve the document's modification time from the version control
system.  Otherwise Org reads the file attributes.

@item @{@{@{input-file@}@}@}
@cindex input file, macro
This macro refers to the filename of the exported file.

@item @{@{@{property(@var{PROPERTY-NAME})@}@}@}
@itemx @{@{@{property(@var{PROPERTY-NAME},@var{SEARCH-OPTION})@}@}@}
@cindex property, macro
This macro returns the value of property @var{PROPERTY-NAME} in the current
entry.  If @var{SEARCH-OPTION} (@pxref{Search options}) refers to a remote
entry, that will be used instead.

@item @{@{@{n@}@}@}
@itemx @{@{@{n(@var{NAME})@}@}@}
@itemx @{@{@{n(@var{NAME},@var{ACTION})@}@}@}
@cindex n, macro
@cindex counter, macro
This macro implements custom counters by returning the number of times the
macro has been expanded so far while exporting the buffer.  You can create
more than one counter using different @var{NAME} values.  If @var{ACTION} is
@code{-}, previous value of the counter is held, i.e. the specified counter
is not incremented.  If the value is a number, the specified counter is set
to that value.  If it is any other non-empty string, the specified counter is
reset to 1.  You may leave @var{NAME} empty to reset the default counter.
@end table

The surrounding brackets can be made invisible by setting
@code{org-hide-macro-markers} non-@code{nil}.

Org expands macros at the very beginning of the export process.

@node Comment lines
@section Comment lines
@cindex exporting, not

@cindex comment lines
Lines starting with zero or more whitespace characters followed by one
@samp{#} and a whitespace are treated as comments and, as such, are not
exported.

@cindex @code{#+BEGIN_COMMENT}
Likewise, regions surrounded by @code{#+BEGIN_COMMENT}
... @code{#+END_COMMENT} are not exported.

@cindex comment trees
Finally, a @samp{COMMENT} keyword at the beginning of an entry, but after any
other keyword or priority cookie, comments out the entire subtree.  In this
case, the subtree is not exported and no code block within it is executed
either@footnote{For a less drastic behavior, consider using a select tag
(@pxref{Export settings}) instead.}.  The command below helps changing the
comment status of a headline.

@table @kbd
@kindex C-c ;
@item C-c ;
Toggle the @samp{COMMENT} keyword at the beginning of an entry.
@end table

@node ASCII/Latin-1/UTF-8 export
@section ASCII/Latin-1/UTF-8 export
@cindex ASCII export
@cindex Latin-1 export
@cindex UTF-8 export

ASCII export produces an output file containing only plain ASCII characters.
This is the most simplest and direct text output.  It does not contain any
Org markup either.  Latin-1 and UTF-8 export use additional characters and
symbols available in these encoding standards.  All three of these export
formats offer the most basic of text output for maximum portability.

@vindex org-ascii-text-width
On export, Org fills and justifies text according to the text width set in
@code{org-ascii-text-width}.

@vindex org-ascii-links-to-notes
Org exports links using a footnote-like style where the descriptive part is
in the text and the link is in a note before the next heading.  See the
variable @code{org-ascii-links-to-notes} for details.

@subheading ASCII export commands

@table @kbd
@orgcmd{C-c C-e t a/l/u,org-ascii-export-to-ascii}
Export as an ASCII file with a @file{.txt} extension.  For @file{myfile.org},
Org exports to @file{myfile.txt}, overwriting without warning.  For
@file{myfile.txt}, Org exports to @file{myfile.txt.txt} in order to prevent
data loss.
@orgcmd{C-c C-e t A/L/U,org-ascii-export-as-ascii}
Export to a temporary buffer.  Does not create a file.
@end table

@subheading ASCII specific export settings
The ASCII export back-end has one extra keyword for customizing ASCII output.
Setting this keyword works similar to the general options (@pxref{Export
settings}).

@table @samp
@item SUBTITLE
@cindex @code{#+SUBTITLE} (ASCII)
The document subtitle.  For long subtitles, use multiple @code{#+SUBTITLE}
lines in the Org file.  Org prints them on one continuous line, wrapping into
multiple lines if necessary.
@end table

@subheading Header and sectioning structure

Org converts the first three outline levels into headlines for ASCII export.
The remaining levels are turned into lists.  To change this cut-off point
where levels become lists, @pxref{Export settings}.

@subheading Quoting ASCII text

To insert text within the Org file by the ASCII back-end, use one the
following constructs, inline, keyword, or export block:

@cindex @code{#+ASCII}
@cindex @code{#+BEGIN_EXPORT ascii}
@example
Inline text @@@@ascii:and additional text@@@@ within a paragraph.

#+ASCII: Some text

#+BEGIN_EXPORT ascii
Org exports text in this block only when using ASCII back-end.
#+END_EXPORT
@end example

@subheading ASCII specific attributes
@cindex @code{#+ATTR_ASCII}
@cindex horizontal rules, in ASCII export

ASCII back-end recognizes only one attribute, @code{:width}, which specifies
the width of an horizontal rule in number of characters.  The keyword and
syntax for specifying widths is:

@example
#+ATTR_ASCII: :width 10
-----
@end example

@subheading ASCII special blocks
@cindex special blocks, in ASCII export
@cindex @code{#+BEGIN_JUSTIFYLEFT}
@cindex @code{#+BEGIN_JUSTIFYRIGHT}

Besides @code{#+BEGIN_CENTER} blocks (@pxref{Paragraphs}), ASCII back-end has
these two left and right justification blocks:

@example
#+BEGIN_JUSTIFYLEFT
It's just a jump to the left...
#+END_JUSTIFYLEFT

#+BEGIN_JUSTIFYRIGHT
...and then a step to the right.
#+END_JUSTIFYRIGHT
@end example

@node Beamer export
@section Beamer export
@cindex Beamer export

Org uses @emph{Beamer} export to convert an Org file tree structure into a
high-quality interactive slides for presentations.  @emph{Beamer} is a
@LaTeX{} document class for creating presentations in PDF, HTML, and other
popular display formats.

@menu
* Beamer export commands::      For creating Beamer documents.
* Beamer specific export settings::  For customizing Beamer export.
* Sectioning Frames and Blocks in Beamer::  For composing Beamer slides.
* Beamer specific syntax::      For using in Org documents.
* Editing support::             For using helper functions.
* A Beamer example::            A complete presentation.
@end menu

@node Beamer export commands
@subsection Beamer export commands

@table @kbd
@orgcmd{C-c C-e l b,org-beamer-export-to-latex}
Export as @LaTeX{} file with a @file{.tex} extension.  For @file{myfile.org},
Org exports to @file{myfile.tex}, overwriting without warning.
@orgcmd{C-c C-e l B,org-beamer-export-as-latex}
Export to a temporary buffer.  Does not create a file.
@orgcmd{C-c C-e l P,org-beamer-export-to-pdf}
Export as @LaTeX{} file and then convert it to PDF format.
@item C-c C-e l O
Export as @LaTeX{} file, convert it to PDF format, and then open the PDF
file.
@end table

@node Beamer specific export settings
@subsection Beamer specific export settings

Beamer export back-end has several additional keywords for customizing Beamer
output.  These keywords work similar to the general options settings
(@pxref{Export settings}).

@table @samp
@item BEAMER_THEME
@cindex @code{#+BEAMER_THEME}
@vindex org-beamer-theme
The Beamer layout theme (@code{org-beamer-theme}).  Use square brackets for
options.  For example:
@smallexample
#+BEAMER_THEME: Rochester [height=20pt]
@end smallexample

@item BEAMER_FONT_THEME
@cindex @code{#+BEAMER_FONT_THEME}
The Beamer font theme.

@item BEAMER_INNER_THEME
@cindex @code{#+BEAMER_INNER_THEME}
The Beamer inner theme.

@item BEAMER_OUTER_THEME
@cindex @code{#+BEAMER_OUTER_THEME}
The Beamer outer theme.

@item BEAMER_HEADER
@cindex @code{#+BEAMER_HEADER}
Arbitrary lines inserted in the preamble, just before the @samp{hyperref}
settings.

@item DESCRIPTION
@cindex @code{#+DESCRIPTION} (Beamer)
The document description.  For long descriptions, use multiple
@code{#+DESCRIPTION} keywords.  By default, @samp{hyperref} inserts
@code{#+DESCRIPTION} as metadata.  Use @code{org-latex-hyperref-template} to
configure document metadata.  Use @code{org-latex-title-command} to configure
typesetting of description as part of front matter.

@item KEYWORDS
@cindex @code{#+KEYWORDS} (Beamer)
The keywords for defining the contents of the document.  Use multiple
@code{#+KEYWORDS} lines if necessary.  By default, @samp{hyperref} inserts
@code{#+KEYWORDS} as metadata.  Use @code{org-latex-hyperref-template} to
configure document metadata.  Use @code{org-latex-title-command} to configure
typesetting of keywords as part of front matter.

@item SUBTITLE
@cindex @code{#+SUBTITLE} (Beamer)
@vindex org-beamer-subtitle-format
Document's subtitle.  For typesetting, use @code{org-beamer-subtitle-format}
string.  Use @code{org-latex-hyperref-template} to configure document
metadata.  Use @code{org-latex-title-command} to configure typesetting of
subtitle as part of front matter.
@end table

@node Sectioning Frames and Blocks in Beamer
@subsection Sectioning, Frames and Blocks in Beamer

Org transforms heading levels into Beamer's sectioning elements, frames and
blocks.  Any Org tree with a not-too-deep-level nesting should in principle
be exportable as a Beamer presentation.

@itemize @minus
@item
@vindex org-beamer-frame-level
Org headlines become Beamer frames when the heading level in Org is equal to
@code{org-beamer-frame-level} or @code{H} value in an @code{OPTIONS} line
(@pxref{Export settings}).

@cindex property, @code{BEAMER_ENV}
Org overrides headlines to frames conversion for the current tree of an Org
file if it encounters the @code{BEAMER_ENV} property set to @code{frame} or
@code{fullframe}.  Org ignores whatever @code{org-beamer-frame-level} happens
to be for that headline level in the Org tree.  In Beamer terminology, a
@code{fullframe} is a frame without its title.

@item
@vindex org-beamer-environments-default
@vindex org-beamer-environments-extra
Org exports a Beamer frame's objects as @code{block} environments.  Org can
enforce wrapping in special block types when @code{BEAMER_ENV} property is
set@footnote{If @code{BEAMER_ENV} is set, Org export adds
@code{:B_environment:} tag to make it visible.  The tag serves as a visual
aid and has no semantic relevance.}.  For valid values see
@code{org-beamer-environments-default}.  To add more values, see
@code{org-beamer-environments-extra}.

@item
@cindex property, @code{BEAMER_REF}
If @code{BEAMER_ENV} is set to @code{appendix}, Org exports the entry as an
appendix.  When set to @code{note}, Org exports the entry as a note within
the frame or between frames, depending on the entry's heading level.  When
set to @code{noteNH}, Org exports the entry as a note without its title.
When set to @code{againframe}, Org exports the entry with @code{\againframe}
command, which makes setting the @code{BEAMER_REF} property mandatory because
@code{\againframe} needs frame to resume.

When @code{ignoreheading} is set, Org export ignores the entry's headline but
not its content.  This is useful for inserting content between frames.  It is
also useful for properly closing a @code{column} environment.
@end itemize

@cindex property, @code{BEAMER_ACT}
@cindex property, @code{BEAMER_OPT}
When @code{BEAMER_ACT} is set for a headline, Org export translates that
headline as an overlay or action specification.  When enclosed in square
brackets, Org export makes the overlay specification a default.  Use
@code{BEAMER_OPT} to set any options applicable to the current Beamer frame
or block.  The Beamer export back-end wraps with appropriate angular or
square brackets.  It also adds the @code{fragile} option for any code that may
require a verbatim block.

@cindex property, @code{BEAMER_COL}
To create a column on the Beamer slide, use the @code{BEAMER_COL} property
for its headline in the Org file.  Set the value of @code{BEAMER_COL} to a
decimal number representing the fraction of the total text width.  Beamer
export uses this value to set the column's width and fills the column with
the contents of the Org entry.  If the Org entry has no specific environment
defined, Beamer export ignores the heading.  If the Org entry has a defined
environment, Beamer export uses the heading as title.  Behind the scenes,
Beamer export automatically handles @LaTeX{} column separations for
contiguous headlines.  To manually adjust them for any unique configurations
needs, use the @code{BEAMER_ENV} property.

@node Beamer specific syntax
@subsection Beamer specific syntax
Since Org's Beamer export back-end is an extension of the @LaTeX{} back-end,
it recognizes other @LaTeX{} specific syntax---for example, @code{#+LATEX:}
or @code{#+ATTR_LATEX:}.  @xref{@LaTeX{} export}, for details.

Beamer export wraps the table of contents generated with @code{toc:t}
@code{OPTION} keyword in a @code{frame} environment.  Beamer export does not
wrap the table of contents generated with @code{TOC} keyword (@pxref{Table of
contents}).  Use square brackets for specifying options.

@example
#+TOC: headlines [currentsection]
@end example

Insert Beamer-specific code using the following constructs:

@cindex @code{#+BEAMER}
@cindex @code{#+BEGIN_EXPORT beamer}
@example
#+BEAMER: \pause

#+BEGIN_EXPORT beamer
Only Beamer export back-end will export this line.
#+END_BEAMER

Text @@@@beamer:some code@@@@ within a paragraph.
@end example

Inline constructs, such as the last one above, are useful for adding overlay
specifications to objects with @code{bold}, @code{item}, @code{link},
@code{radio-target} and @code{target} types.  Enclose the value in angular
brackets and place the specification at the beginning the object as shown in
this example:

@example
A *@@@@beamer:<2->@@@@useful* feature
@end example

@cindex @code{#+ATTR_BEAMER}
Beamer export recognizes the @code{ATTR_BEAMER} keyword with the following
attributes from Beamer configurations: @code{:environment} for changing local
Beamer environment, @code{:overlay} for specifying Beamer overlays in angular
or square brackets, and @code{:options} for inserting optional arguments.

@example
#+ATTR_BEAMER: :environment nonindentlist
- item 1, not indented
- item 2, not indented
- item 3, not indented
@end example

@example
#+ATTR_BEAMER: :overlay <+->
- item 1
- item 2
@end example

@example
#+ATTR_BEAMER: :options [Lagrange]
Let $G$ be a finite group, and let $H$ be
a subgroup of $G$.  Then the order of $H$ divides the order of $G$.
@end example

@node Editing support
@subsection Editing support


The @code{org-beamer-mode} is a special minor mode for faster editing of
Beamer documents.

@example
#+STARTUP: beamer
@end example

@table @kbd
@orgcmd{C-c C-b,org-beamer-select-environment}
The @code{org-beamer-mode} provides this key for quicker selections in Beamer
normal environments, and for selecting the @code{BEAMER_COL} property.
@end table

@node A Beamer example
@subsection A Beamer example

Here is an example of an Org document ready for Beamer export.

@example
#+TITLE: Example Presentation
#+AUTHOR: Carsten Dominik
#+OPTIONS: H:2 toc:t num:t
#+LATEX_CLASS: beamer
#+LATEX_CLASS_OPTIONS: [presentation]
#+BEAMER_THEME: Madrid
#+COLUMNS: %45ITEM %10BEAMER_ENV(Env) %10BEAMER_ACT(Act) %4BEAMER_COL(Col) %8BEAMER_OPT(Opt)

* This is the first structural section

** Frame 1
*** Thanks to Eric Fraga                                           :B_block:
    :PROPERTIES:
    :BEAMER_COL: 0.48
    :BEAMER_ENV: block
    :END:
    for the first viable Beamer setup in Org
*** Thanks to everyone else                                        :B_block:
    :PROPERTIES:
    :BEAMER_COL: 0.48
    :BEAMER_ACT: <2->
    :BEAMER_ENV: block
    :END:
    for contributing to the discussion
**** This will be formatted as a beamer note                       :B_note:
     :PROPERTIES:
     :BEAMER_env: note
     :END:
** Frame 2 (where we will not use columns)
*** Request
    Please test this stuff!
@end example

@node HTML export
@section HTML export
@cindex HTML export

Org mode contains an HTML exporter with extensive HTML formatting compatible
with XHTML 1.0 strict standard.

@menu
* HTML Export commands::        Invoking HTML export
* HTML Specific export settings::  Settings for HTML export
* HTML doctypes::               Exporting various (X)HTML flavors
* HTML preamble and postamble::  Inserting preamble and postamble
* Quoting HTML tags::           Using direct HTML in Org files
* Links in HTML export::        Interpreting and formatting links
* Tables in HTML export::       Formatting and modifying tables
* Images in HTML export::       Inserting figures with HTML output
* Math formatting in HTML export::  Handling math equations
* Text areas in HTML export::   Showing an alternate approach, an example
* CSS support::                 Styling HTML output
* JavaScript support::          Folding scripting in the web browser
@end menu


@node HTML Export commands
@subsection HTML export commands

@table @kbd
@orgcmd{C-c C-e h h,org-html-export-to-html}
Export as HTML file with a @file{.html} extension.  For @file{myfile.org},
Org exports to @file{myfile.html}, overwriting without warning.  @kbd{C-c C-e
h o} Exports to HTML and opens it in a web browser.

@orgcmd{C-c C-e h H,org-html-export-as-html}
Exports to a temporary buffer.  Does not create a file.
@end table

@node HTML Specific export settings
@subsection HTML Specific export settings
HTML export has a number of keywords, similar to the general options settings
described in @ref{Export settings}.

@table @samp
@item DESCRIPTION
@cindex @code{#+DESCRIPTION} (HTML)
This is the document's description, which the HTML exporter inserts it as a
HTML meta tag in the HTML file.  For long descriptions, use multiple
@code{#+DESCRIPTION} lines.  The exporter takes care of wrapping the lines
properly.

@item HTML_DOCTYPE
@cindex @code{#+HTML_DOCTYPE}
@vindex org-html-doctype
Specify the document type, for example: HTML5 (@code{org-html-doctype}).

@item HTML_CONTAINER
@cindex @code{#+HTML_CONTAINER}
@vindex org-html-container-element
Specify the HTML container, such as @samp{div}, for wrapping sections and
elements (@code{org-html-container-element}).

@item HTML_LINK_HOME
@cindex @code{#+HTML_LINK_HOME}
@vindex org-html-link-home
The URL for home link (@code{org-html-link-home}).

@item HTML_LINK_UP
@cindex @code{#+HTML_LINK_UP}
@vindex org-html-link-up
The URL for the up link of exported HTML pages (@code{org-html-link-up}).

@item HTML_MATHJAX
@cindex @code{#+HTML_MATHJAX}
@vindex org-html-mathjax-options
Options for MathJax (@code{org-html-mathjax-options}).  MathJax is used to
typeset @LaTeX{} math in HTML documents.  @xref{Math formatting in HTML
export}, for an example.

@item HTML_HEAD
@cindex @code{#+HTML_HEAD}
@vindex org-html-head
Arbitrary lines for appending to the HTML document's head
(@code{org-html-head}).

@item HTML_HEAD_EXTRA
@cindex @code{#+HTML_HEAD_EXTRA}
@vindex org-html-head-extra
More arbitrary lines for appending to the HTML document's head
(@code{org-html-head-extra}).

@item KEYWORDS
@cindex @code{#+KEYWORDS} (HTML)
Keywords to describe the document's content.  HTML exporter inserts these
keywords as HTML meta tags.  For long keywords, use multiple
@code{#+KEYWORDS} lines.

@item LATEX_HEADER
@cindex @code{#+LATEX_HEADER} (HTML)
Arbitrary lines for appending to the preamble; HTML exporter appends when
transcoding @LaTeX{} fragments to images (@pxref{Math formatting in HTML
export}).

@item SUBTITLE
@cindex @code{#+SUBTITLE} (HTML)
The document's subtitle.  HTML exporter formats subtitle if document type is
@samp{HTML5} and the CSS has a @samp{subtitle} class.
@end table

Some of these keywords are explained in more detail in the following sections
of the manual.

@node HTML doctypes
@subsection HTML doctypes

Org can export to various (X)HTML flavors.

@vindex org-html-doctype
@vindex org-html-doctype-alist
Set the @code{org-html-doctype} variable for different (X)HTML variants.
Depending on the variant, the HTML exporter adjusts the syntax of HTML
conversion accordingly.  Org includes the following ready-made variants:

@itemize
@item
``html4-strict''
@item
``html4-transitional''
@item
``html4-frameset''
@item
``xhtml-strict''
@item
``xhtml-transitional''
@item
``xhtml-frameset''
@item
``xhtml-11''
@item
``html5''
@item
``xhtml5''
@end itemize

@noindent See the variable @code{org-html-doctype-alist} for details.
The default is ``xhtml-strict''.

@vindex org-html-html5-fancy
@cindex HTML5, export new elements
Org's HTML exporter does not by default enable new block elements introduced
with the HTML5 standard.  To enable them, set @code{org-html-html5-fancy} to
non-@code{nil}.  Or use an @code{OPTIONS} line in the file to set
@code{html5-fancy}.  HTML5 documents can now have arbitrary @code{#+BEGIN}
and @code{#+END} blocks.  For example:

@example
#+BEGIN_aside
Lorem ipsum
#+END_aside
@end example

Will export to:

@example
<aside>
  <p>Lorem ipsum</p>
</aside>
@end example

While this:

@example
#+ATTR_HTML: :controls controls :width 350
#+BEGIN_video
#+HTML: <source src="movie.mp4" type="video/mp4">
#+HTML: <source src="movie.ogg" type="video/ogg">
Your browser does not support the video tag.
#+END_video
@end example

Exports to:

@example
<video controls="controls" width="350">
  <source src="movie.mp4" type="video/mp4">
  <source src="movie.ogg" type="video/ogg">
  <p>Your browser does not support the video tag.</p>
</video>
@end example

@vindex org-html-html5-elements
When special blocks do not have a corresponding HTML5 element, the HTML
exporter reverts to standard translation (see
@code{org-html-html5-elements}).  For example, @code{#+BEGIN_lederhosen}
exports to @samp{<div class="lederhosen">}.

Special blocks cannot have headlines.  For the HTML exporter to wrap the
headline and its contents in @samp{<section>} or @samp{<article>} tags, set
the @code{HTML_CONTAINER} property for the headline.

@node HTML preamble and postamble
@subsection HTML preamble and postamble
@vindex org-html-preamble
@vindex org-html-postamble
@vindex org-html-preamble-format
@vindex org-html-postamble-format
@vindex org-html-validation-link
@vindex org-export-creator-string
@vindex org-export-time-stamp-file

The HTML exporter has delineations for preamble and postamble.  The default
value for @code{org-html-preamble} is @code{t}, which makes the HTML exporter
insert the preamble.  See the variable @code{org-html-preamble-format} for
the format string.

Set @code{org-html-preamble} to a string to override the default format
string.  If the string is a function, the HTML exporter expects the function
to return a string upon execution.  The HTML exporter inserts this string in
the preamble.  The HTML exporter will not insert a preamble if
@code{org-html-preamble} is set @code{nil}.

The default value for @code{org-html-postamble} is @code{auto}, which makes
the HTML exporter build a postamble from looking up author's name, email
address, creator's name, and date.  Set @code{org-html-postamble} to @code{t}
to insert the postamble in the format specified in the
@code{org-html-postamble-format} variable.  The HTML exporter will not insert
a postamble if @code{org-html-postamble} is set to @code{nil}.

@node Quoting HTML tags
@subsection Quoting HTML tags

The HTML export back-end transforms @samp{<} and @samp{>} to @samp{&lt;} and
@samp{&gt;}.  To include raw HTML code in the Org file so the HTML export
back-end can insert that HTML code in the output, use this inline syntax:
@samp{@@@@html:}.  For example: @samp{@@@@html:<b>@@@@bold
text@@@@html:</b>@@@@}.  For larger raw HTML code blocks, use these HTML
export code blocks:

@cindex @code{#+HTML}
@example
#+HTML: Literal HTML code for export
@end example

@noindent or
@cindex @code{#+BEGIN_EXPORT html}

@example
#+BEGIN_EXPORT html
All lines between these markers are exported literally
#+END_EXPORT
@end example


@node Links in HTML export
@subsection Links in HTML export

@cindex links, in HTML export
@cindex internal links, in HTML export
@cindex external links, in HTML export
@vindex org-html-link-org-files-as-html
The HTML export back-end transforms Org's internal links (@pxref{Internal
links}) to equivalent HTML links in the output.  The back-end similarly
handles Org's automatic links created by radio targets (@pxref{Radio
targets}) similarly.  For Org links to external files, the back-end
transforms the links to @emph{relative} paths.

For Org links to other @file{.org} files, the back-end automatically changes
the file extension to @file{.html} and makes file paths relative.  If the
@file{.org} files have an equivalent @file{.html} version at the same
location, then the converted links should work without any further manual
intervention.  However, to disable this automatic path translation, set
@code{org-html-link-org-files-as-html} to @code{nil}.  When disabled, the
HTML export back-end substitutes the @samp{id:}-based links in the HTML
output.  For more about linking files when publishing to a directory,
@pxref{Publishing links}.

Org files can also have special directives to the HTML export back-end.  For
example, by using @code{#+ATTR_HTML} lines to specify new format attributes
to @code{<a>} or @code{<img>} tags.  This example shows changing the link's
@code{title} and @code{style}:

@cindex @code{#+ATTR_HTML}
@example
#+ATTR_HTML: :title The Org mode homepage :style color:red;
[[https://orgmode.org]]
@end example

@node Tables in HTML export
@subsection Tables in HTML export
@cindex tables, in HTML
@vindex org-html-table-default-attributes

The HTML export back-end uses @code{org-html-table-default-attributes} when
exporting Org tables to HTML.  By default, the exporter does not draw frames
and cell borders.  To change for this for a table, use the following lines
before the table in the Org file:

@cindex @code{#+CAPTION}
@cindex @code{#+ATTR_HTML}
@example
#+CAPTION: This is a table with lines around and between cells
#+ATTR_HTML: :border 2 :rules all :frame border
@end example

The HTML export back-end preserves column groupings in Org tables
(@pxref{Column groups}) when exporting to HTML.

Additional options for customizing tables for  HTML export.

@table @code
@vindex org-html-table-align-individual-fields
@item org-html-table-align-individual-fields
Non-@code{nil} attaches style attributes for alignment to each table field.

@vindex org-html-table-caption-above
@item org-html-table-caption-above
Non-@code{nil} places caption string at the beginning of the table.

@vindex org-html-table-data-tags
@item org-html-table-data-tags
Opening and ending tags for table data fields.

@vindex org-html-table-default-attributes
@item org-html-table-default-attributes
Default attributes and values for table tags.

@vindex org-html-table-header-tags
@item org-html-table-header-tags
Opening and ending tags for table's header fields.

@vindex org-html-table-row-tags
@item org-html-table-row-tags
Opening and ending tags for table rows.

@vindex org-html-table-use-header-tags-for-first-column
@item org-html-table-use-header-tags-for-first-column
Non-@code{nil} formats column one in tables with header tags.
@end table

@node Images in HTML export
@subsection Images in HTML export

@cindex images, inline in HTML
@cindex inlining images in HTML
@vindex org-html-inline-images

The HTML export back-end has features to convert Org image links to HTML
inline images and HTML clickable image links.

When the link in the Org file has no description, the HTML export back-end by
default in-lines that image.  For example: @samp{[[file:myimg.jpg]]} is
in-lined, while @samp{[[file:myimg.jpg][the image]]} links to the text,
@samp{the image}.

For more details, see the variable @code{org-html-inline-images}.

On the other hand, if the description part of the Org link is itself another
link, such as @code{file:} or @code{http:} URL pointing to an image, the HTML
export back-end in-lines this image and links to the main image.  This Org
syntax enables the back-end to link low-resolution thumbnail to the
high-resolution version of the image, as shown in this example:

@example
[[file:highres.jpg][file:thumb.jpg]]
@end example

To change attributes of in-lined images, use @code{#+ATTR_HTML} lines in the
Org file.  This example shows realignment to right, and adds @code{alt} and
@code{title} attributes in support of text viewers and modern web accessibility
standards.

@cindex @code{#+CAPTION}
@cindex @code{#+ATTR_HTML}
@example
#+CAPTION: A black cat stalking a spider
#+ATTR_HTML: :alt cat/spider image :title Action! :align right
[[./img/a.jpg]]
@end example

@noindent
The HTML export back-end copies the @code{http} links from the Org file as
is.

@node Math formatting in HTML export
@subsection Math formatting in HTML export
@cindex MathJax
@cindex dvipng
@cindex dvisvgm
@cindex imagemagick

@LaTeX{} math snippets (@pxref{@LaTeX{} fragments}) can be displayed in two
different ways on HTML pages.  The default is to use
@uref{http://www.mathjax.org, MathJax} which should work out of the box with
Org@footnote{By default Org loads MathJax from @uref{https://cdnjs.com, cdnjs.com} as
recommended by @uref{http://www.mathjax.org, MathJax}.}.  Some MathJax display
options can be configured via @code{org-html-mathjax-options}, or in the
buffer.  For example, with the following settings,
@smallexample
#+HTML_MATHJAX: align: left indent: 5em tagside: left font: Neo-Euler
@end smallexample
equation labels will be displayed on the left margin and equations will be
five ems from the left margin.

@noindent See the docstring of
@code{org-html-mathjax-options} for all supported variables.  The MathJax
template can be configure via @code{org-html-mathjax-template}.

If you prefer, you can also request that @LaTeX{} fragments are processed
into small images that will be inserted into the browser page.  Before the
availability of MathJax, this was the default method for Org files.  This
method requires that the @file{dvipng} program, @file{dvisvgm} or
@file{imagemagick} suite is available on your system.  You can still get
this processing with

@example
#+OPTIONS: tex:dvipng
@end example

@example
#+OPTIONS: tex:dvisvgm
@end example

or:

@example
#+OPTIONS: tex:imagemagick
@end example

@node Text areas in HTML export
@subsection Text areas in HTML export

@cindex text areas, in HTML
Before Org mode's Babel, one popular approach to publishing code in HTML was
by using @code{:textarea}.  The advantage of this approach was that copying
and pasting was built into browsers with simple JavaScript commands.  Even
editing before pasting was made simple.

The HTML export back-end can create such text areas.  It requires an
@code{#+ATTR_HTML:} line as shown in the example below with the
@code{:textarea} option.  This must be followed by either an
@code{example} or a @code{src} code block.  Other Org block types will not
honor the @code{:textarea} option.

By default, the HTML export back-end creates a text area 80 characters wide
and height just enough to fit the content.  Override these defaults with
@code{:width} and @code{:height} options on the @code{#+ATTR_HTML:} line.

@example
#+ATTR_HTML: :textarea t :width 40
#+BEGIN_EXAMPLE
  (defun org-xor (a b)
     "Exclusive or."
     (if a (not b) b))
#+END_EXAMPLE
@end example


@node CSS support
@subsection CSS support
@cindex CSS, for HTML export
@cindex HTML export, CSS

@vindex org-html-todo-kwd-class-prefix
@vindex org-html-tag-class-prefix
You can modify the CSS style definitions for the exported file.  The HTML
exporter assigns the following special CSS classes@footnote{If the classes on
TODO keywords and tags lead to conflicts, use the variables
@code{org-html-todo-kwd-class-prefix} and @code{org-html-tag-class-prefix} to
make them unique.} to appropriate parts of the document---your style
specifications may change these, in addition to any of the standard classes
like for headlines, tables, etc.
@example
p.author            @r{author information, including email}
p.date              @r{publishing date}
p.creator           @r{creator info, about org mode version}
.title              @r{document title}
.subtitle           @r{document subtitle}
.todo               @r{TODO keywords, all not-done states}
.done               @r{the DONE keywords, all states that count as done}
.WAITING            @r{each TODO keyword also uses a class named after itself}
.timestamp          @r{timestamp}
.timestamp-kwd      @r{keyword associated with a timestamp, like @code{SCHEDULED}}
.timestamp-wrapper  @r{span around keyword plus timestamp}
.tag                @r{tag in a headline}
._HOME              @r{each tag uses itself as a class, "@@" replaced by "_"}
.target             @r{target for links}
.linenr             @r{the line number in a code example}
.code-highlighted   @r{for highlighting referenced code lines}
div.outline-N       @r{div for outline level N (headline plus text))}
div.outline-text-N  @r{extra div for text at outline level N}
.section-number-N   @r{section number in headlines, different for each level}
.figure-number      @r{label like "Figure 1:"}
.table-number       @r{label like "Table 1:"}
.listing-number     @r{label like "Listing 1:"}
div.figure          @r{how to format an in-lined image}
pre.src             @r{formatted source code}
pre.example         @r{normal example}
p.verse             @r{verse paragraph}
div.footnotes       @r{footnote section headline}
p.footnote          @r{footnote definition paragraph, containing a footnote}
.footref            @r{a footnote reference number (always a <sup>)}
.footnum            @r{footnote number in footnote definition (always <sup>)}
.org-svg            @r{default class for a linked @file{.svg} image}
@end example

@vindex org-html-style-default
@vindex org-html-head-include-default-style
@vindex org-html-head
@vindex org-html-head-extra
@cindex @code{#+HTML_INCLUDE_STYLE}
The HTML export back-end includes a compact default style in each exported
HTML file.  To override the default style with another style, use these
keywords in the Org file.  They will replace the global defaults the HTML
exporter uses.

@cindex @code{#+HTML_HEAD}
@cindex @code{#+HTML_HEAD_EXTRA}
@example
#+HTML_HEAD: <link rel="stylesheet" type="text/css" href="style1.css" />
#+HTML_HEAD_EXTRA: <link rel="alternate stylesheet" type="text/css" href="style2.css" />
@end example

To just turn off the default style, customize
@code{org-html-head-include-default-style} variable, or use this option line in
the Org file.

@example
#+OPTIONS: html-style:nil
@end example

@noindent
For longer style definitions, either use several @code{#+HTML_HEAD} and
@code{#+HTML_HEAD_EXTRA} lines, or use @code{<style>} @code{</style>} blocks
around them.  Both of these approaches can avoid referring to an external
file.

In order to add styles to a sub-tree, use the @code{:HTML_CONTAINER_CLASS:}
property to assign a class to the tree.  In order to specify CSS styles for a
particular headline, you can use the id specified in a @code{:CUSTOM_ID:}
property.

Never change the @code{org-html-style-default} constant.  Instead use other
simpler ways of customizing as described above.


@c FIXME: More about header and footer styles
@c FIXME: Talk about links and targets.

@node JavaScript support
@subsection JavaScript supported display of web pages

@cindex Rose, Sebastian
Sebastian Rose has written a JavaScript program especially designed to
enhance the web viewing experience of HTML files created with Org.  This
program enhances large files in two different ways of viewing.  One is an
@emph{Info}-like mode where each section is displayed separately and
navigation can be done with the @kbd{n} and @kbd{p} keys (and some other keys
as well, press @kbd{?} for an overview of the available keys).  The second
one has a @emph{folding} view, much like Org provides inside Emacs.  The
script is available at @url{https://orgmode.org/org-info.js} and the
documentation at @url{https://orgmode.org/worg/code/org-info-js/}.  The script
is hosted on @url{https://orgmode.org}, but for reliability, prefer installing
it on your own web server.

To use this program, just add this line to the Org file:

@cindex @code{#+INFOJS_OPT}
@example
#+INFOJS_OPT: view:info toc:nil
@end example

@noindent
The HTML header now has the code needed to automatically invoke the script.
For setting options, use the syntax from the above line for options described
below:

@example
path:    @r{The path to the script.  The default grabs the script from}
         @r{@url{https://orgmode.org/org-info.js}, but you might want to have}
         @r{a local copy and use a path like @samp{../scripts/org-info.js}.}
view:    @r{Initial view when the website is first shown.  Possible values are:}
         info      @r{Info-like interface with one section per page.}
         overview  @r{Folding interface, initially showing only top-level.}
         content   @r{Folding interface, starting with all headlines visible.}
         showall   @r{Folding interface, all headlines and text visible.}
sdepth:  @r{Maximum headline level that will still become an independent}
         @r{section for info and folding modes.  The default is taken from}
         @r{@code{org-export-headline-levels} (= the @code{H} switch in @code{#+OPTIONS}).}
         @r{If this is smaller than in @code{org-export-headline-levels}, each}
         @r{info/folding section can still contain child headlines.}
toc:     @r{Should the table of contents @emph{initially} be visible?}
         @r{Even when @code{nil}, you can always get to the "toc" with @kbd{i}.}
tdepth:  @r{The depth of the table of contents.  The defaults are taken from}
         @r{the variables @code{org-export-headline-levels} and @code{org-export-with-toc}.}
ftoc:    @r{Does the CSS of the page specify a fixed position for the "toc"?}
         @r{If yes, the toc will never be displayed as a section.}
ltoc:    @r{Should there be short contents (children) in each section?}
         @r{Make this @code{above} if the section should be above initial text.}
mouse:   @r{Headings are highlighted when the mouse is over them.  Should be}
         @r{@samp{underline} (default) or a background color like @samp{#cccccc}.}
buttons: @r{Should view-toggle buttons be everywhere?  When @code{nil} (the}
         @r{default), only one such button will be present.}
@end example
@noindent
@vindex org-html-infojs-options
@vindex org-html-use-infojs
You can choose default values for these options by customizing the variable
@code{org-html-infojs-options}.  If you want the script to always apply to
your pages, configure the variable @code{org-html-use-infojs}.

@node @LaTeX{} export
@section @LaTeX{} export
@cindex @LaTeX{} export
@cindex PDF export

The @LaTeX{} export back-end can handle complex documents, incorporate
standard or custom @LaTeX{} document classes, generate documents using
alternate @LaTeX{} engines, and produce fully linked PDF files with indexes,
bibliographies, and tables of contents, destined for interactive online
viewing or high-quality print publication.

While the details are covered in-depth in this section, here are some quick
references to variables for the impatient: for engines, see
@code{org-latex-compiler}; for build sequences, see
@code{org-latex-pdf-process}; for packages, see
@code{org-latex-default-packages-alist} and @code{org-latex-packages-alist}.

An important note about the @LaTeX{} export back-end: it is sensitive to
blank lines in the Org document.  That's because @LaTeX{} itself depends on
blank lines to tell apart syntactical elements, such as paragraphs.

@menu
* @LaTeX{} export commands::    For producing @LaTeX{} and PDF documents.
* @LaTeX{} specific export settings::  Unique to this @LaTeX{} back-end.
* @LaTeX{} header and sectioning::  For file structure.
* Quoting @LaTeX{} code::       Directly in the Org document.
* Tables in @LaTeX{} export::   Attributes specific to tables.
* Images in @LaTeX{} export::   Attributes specific to images.
* Plain lists in @LaTeX{} export::  Attributes specific to lists.
* Source blocks in @LaTeX{} export::  Attributes specific to source code blocks.
* Example blocks in @LaTeX{} export::  Attributes specific to example blocks.
* Special blocks in @LaTeX{} export::  Attributes specific to special blocks.
* Horizontal rules in @LaTeX{} export::  Attributes specific to horizontal rules.
@end menu

@node @LaTeX{} export commands
@subsection @LaTeX{} export commands

@table @kbd
@orgcmd{C-c C-e l l,org-latex-export-to-latex}
Export as @LaTeX{} file with a @file{.tex} extension.  For @file{myfile.org},
Org exports to @file{myfile.tex}, overwriting without warning.  @kbd{C-c C-e
l l} Exports to @LaTeX{} file.

@orgcmd{C-c C-e l L,org-latex-export-as-latex}
Export to a temporary buffer.  Do not create a file.
@orgcmd{C-c C-e l p,org-latex-export-to-pdf}
Export as @LaTeX{} file and convert it to PDF file.
@item C-c C-e l o
Export as @LaTeX{} file and convert it to PDF, then open the PDF using the default viewer.
@end table

@vindex org-latex-compiler
@vindex org-latex-bibtex-compiler
@vindex org-latex-default-packages-alist
The @LaTeX{} export back-end can use any of these @LaTeX{} engines:
@samp{pdflatex}, @samp{xelatex}, and @samp{lualatex}.  These engines compile
@LaTeX{} files with different compilers, packages, and output options.  The
@LaTeX{} export back-end finds the compiler version to use from
@code{org-latex-compiler} variable or the @code{#+LATEX_COMPILER} keyword in
the Org file.  See the docstring for the
@code{org-latex-default-packages-alist} for loading packages with certain
compilers.  Also see @code{org-latex-bibtex-compiler} to set the bibliography
compiler@footnote{This does not allow setting different bibliography
compilers for different files.  However, ``smart'' @LaTeX{} compilation
systems, such as @samp{latexmk}, can select the correct bibliography
compiler.}.

@node @LaTeX{} specific export settings
@subsection @LaTeX{} specific export settings

The @LaTeX{} export back-end has several additional keywords for customizing
@LaTeX{} output.  Setting these keywords works similar to the general options
(@pxref{Export settings}).

@table @samp
@item DESCRIPTION
@cindex @code{#+DESCRIPTION} (@LaTeX{})
The document's description.  The description along with author name,
keywords, and related file metadata are inserted in the output file by the
@samp{hyperref} package.  See @code{org-latex-hyperref-template} for
customizing metadata items.  See @code{org-latex-title-command} for
typesetting description into the document's front matter.  Use multiple
@code{#+DESCRIPTION} lines for long descriptions.

@item LATEX_CLASS
@cindex @code{#+LATEX_CLASS}
@vindex org-latex-default-class
@vindex org-latex-classes
This is @LaTeX{} document class, such as @code{article}, @code{report},
@code{book}, and so on, which contain predefined preamble and headline level
mapping that the @LaTeX{} export back-end needs.  The back-end reads the
default class name from the @code{org-latex-default-class} variable.  Org has
@code{article} as the default class.  A valid default class must be an
element of @code{org-latex-classes}.

@item LATEX_CLASS_OPTIONS
@cindex @code{#+LATEX_CLASS_OPTIONS}
Options the @LaTeX{} export back-end uses when calling the @LaTeX{} document
class.

@item LATEX_COMPILER
@cindex @code{#+LATEX_COMPILER}
@vindex org-latex-compiler
The compiler, such as @samp{pdflatex}, @samp{xelatex}, @samp{lualatex}, for
producing the PDF (@code{org-latex-compiler}).

@item LATEX_HEADER
@cindex @code{#+LATEX_HEADER}
@vindex org-latex-classes
Arbitrary lines to add to the document's preamble, before the @samp{hyperref}
settings.  See @code{org-latex-classes} for adjusting the structure and order
of the @LaTeX{} headers.

@item LATEX_HEADER_EXTRA
@cindex @code{#+LATEX_HEADER_EXTRA}
@vindex org-latex-classes
Arbitrary lines to add to the document's preamble, before the @samp{hyperref}
settings.  See @code{org-latex-classes} for adjusting the structure and order
of the @LaTeX{} headers.

@item KEYWORDS
@cindex @code{#+KEYWORDS} (@LaTeX{})
The keywords for the document.  The description along with author name,
keywords, and related file metadata are inserted in the output file by the
@samp{hyperref} package.  See @code{org-latex-hyperref-template} for
customizing metadata items.  See @code{org-latex-title-command} for
typesetting description into the document's front matter.  Use multiple
@code{#+KEYWORDS} lines if necessary.

@item SUBTITLE
@cindex @code{#+SUBTITLE} (@LaTeX{})
@vindex org-latex-subtitle-separate
@vindex org-latex-subtitle-format
The document's subtitle.  It is typeset as per
@code{org-latex-subtitle-format}.  If @code{org-latex-subtitle-separate} is
non-@code{nil}, it is typed as part of the @samp{\title}-macro.  See
@code{org-latex-hyperref-template} for customizing metadata items.  See
@code{org-latex-title-command} for typesetting description into the
document's front matter.
@end table

The following sections have further details.

@node @LaTeX{} header and sectioning
@subsection @LaTeX{} header and sectioning structure
@cindex @LaTeX{} class
@cindex @LaTeX{} sectioning structure
@cindex @LaTeX{} header
@cindex header, for @LaTeX{} files
@cindex sectioning structure, for @LaTeX{} export

The @LaTeX{} export back-end converts the first three of Org's outline levels
into @LaTeX{} headlines.  The remaining Org levels are exported as
@code{itemize} or @code{enumerate} lists.  To change this globally for the
cut-off point between levels and lists, (@pxref{Export settings}).

By default, the @LaTeX{} export back-end uses the @code{article} class.

@vindex org-latex-default-class
@vindex org-latex-classes
@vindex org-latex-default-packages-alist
@vindex org-latex-packages-alist
To change the default class globally, edit @code{org-latex-default-class}.
To change the default class locally in an Org file, add option lines
@code{#+LATEX_CLASS: myclass}.  To change the default class for just a part
of the Org file, set a sub-tree property, @code{EXPORT_LATEX_CLASS}.  The
class name entered here must be valid member of @code{org-latex-classes}.
This variable defines a header template for each class into which the
exporter splices the values of @code{org-latex-default-packages-alist} and
@code{org-latex-packages-alist}.  Use the same three variables to define
custom sectioning or custom classes.

@cindex @code{#+LATEX_CLASS}
@cindex @code{#+LATEX_CLASS_OPTIONS}
@cindex property, @code{EXPORT_LATEX_CLASS}
@cindex property, @code{EXPORT_LATEX_CLASS_OPTIONS}
The @LaTeX{} export back-end sends the @code{LATEX_CLASS_OPTIONS} keyword and
@code{EXPORT_LATEX_CLASS_OPTIONS} property as options to the @LaTeX{}
@code{\documentclass} macro.  The options and the syntax for specifying them,
including enclosing them in square brackets, follow @LaTeX{} conventions.

@example
#+LATEX_CLASS_OPTIONS: [a4paper,11pt,twoside,twocolumn]
@end example

@cindex @code{#+LATEX_HEADER}
@cindex @code{#+LATEX_HEADER_EXTRA}
The @LaTeX{} export back-end appends values from @code{LATEX_HEADER} and
@code{LATEX_HEADER_EXTRA} keywords to the @LaTeX{} header.  The docstring for
@code{org-latex-classes} explains in more detail.  Also note that @LaTeX{}
export back-end does not append @code{LATEX_HEADER_EXTRA} to the header when
previewing @LaTeX{} snippets (@pxref{Previewing @LaTeX{} fragments}).

A sample Org file with the above headers:

@example
#+LATEX_CLASS: article
#+LATEX_CLASS_OPTIONS: [a4paper]
#+LATEX_HEADER: \usepackage@{xyz@}

* Headline 1
  some text
* Headline 2
  some more text
@end example

@node Quoting @LaTeX{} code
@subsection Quoting @LaTeX{} code

The @LaTeX{} export back-end can insert any arbitrary @LaTeX{} code,
@pxref{Embedded @LaTeX{}}.  There are three ways to embed such code in the
Org file and they all use different quoting syntax.

Inserting in-line quoted with @ symbols:
@cindex inline, in @LaTeX{} export
@example
Code embedded in-line @@@@latex:any arbitrary LaTeX code@@@@ in a paragraph.
@end example

Inserting as one or more keyword lines in the Org file:
@cindex @code{#+LATEX}
@example
#+LATEX: any arbitrary LaTeX code
@end example

Inserting as an export block in the Org file, where the back-end exports any
code between begin and end markers:
@cindex @code{#+BEGIN_EXPORT latex}
@example
#+BEGIN_EXPORT latex
any arbitrary LaTeX code
#+END_EXPORT
@end example

@node Tables in @LaTeX{} export
@subsection Tables in @LaTeX{} export
@cindex tables, in @LaTeX{} export
@cindex @code{#+ATTR_LATEX}, in tables

The @LaTeX{} export back-end can pass several @LaTeX{} attributes for table
contents and layout.  Besides specifying label and caption (@pxref{Images and
tables}), the other valid @LaTeX{} attributes include:

@table @code
@item :mode
@vindex org-latex-default-table-mode
The @LaTeX{} export back-end wraps the table differently depending on the
mode for accurate rendering of math symbols.  Mode is either @code{table},
@code{math}, @code{inline-math} or @code{verbatim}.  For @code{math} or
@code{inline-math} mode, @LaTeX{} export back-end wraps the table in a math
environment, but every cell in it is exported as-is.  The @LaTeX{} export
back-end determines the default mode from
@code{org-latex-default-table-mode}.  For , The @LaTeX{} export back-end
merges contiguous tables in the same mode into a single environment.
@item :environment
@vindex org-latex-default-table-environment
Set the default @LaTeX{} table environment for the @LaTeX{} export back-end
to use when exporting Org tables.  Common @LaTeX{} table environments are
provided by these packages: @code{tabularx}, @code{longtable}, @code{array},
@code{tabu}, and @code{bmatrix}.  For packages, such as @code{tabularx} and
@code{tabu}, or any newer replacements, include them in the
@code{org-latex-packages-alist} variable so the @LaTeX{} export back-end can
insert the appropriate load package headers in the converted @LaTeX{} file.
Look in the docstring for the @code{org-latex-packages-alist} variable for
configuring these packages for @LaTeX{} snippet previews, if any.
@item :caption
Use @code{#+CAPTION} keyword to set a simple caption for a table
(@pxref{Images and tables}).  For custom captions, use @code{:caption}
attribute, which accepts raw @LaTeX{} code.  @code{:caption} value overrides
@code{#+CAPTION} value.
@item :float
@itemx :placement
The table environments by default are not floats in @LaTeX{}.  To make them
floating objects use @code{:float} with one of the following options:
@code{sideways}, @code{multicolumn}, @code{t}, and @code{nil}.  Note that
@code{sidewaystable} has been deprecated since Org 8.3.  @LaTeX{} floats can
also have additional layout @code{:placement} attributes.  These are the
usual @code{[h t b p ! H]} permissions specified in square brackets.  Note
that for @code{:float sideways} tables, the @LaTeX{} export back-end ignores
@code{:placement} attributes.
@item :align
@itemx :font
@itemx :width
The @LaTeX{} export back-end uses these attributes for regular tables to set
their alignments, fonts, and widths.
@item :spread
When @code{:spread} is non-@code{nil}, the @LaTeX{} export back-end spreads
or shrinks the table by the @code{:width} for @code{tabu} and @code{longtabu}
environments.  @code{:spread} has no effect if @code{:width} is not set.
@item :booktabs
@itemx :center
@itemx :rmlines
@vindex org-latex-tables-booktabs
@vindex org-latex-tables-centered
All three commands are toggles.  @code{:booktabs} brings in modern
typesetting enhancements to regular tables.  The @code{booktabs} package has
to be loaded through @code{org-latex-packages-alist}.  @code{:center} is for
centering the table.  @code{:rmlines} removes all but the very first
horizontal line made of ASCII characters from "table.el" tables only.
@item :math-prefix
@itemx :math-suffix
@itemx :math-arguments
The @LaTeX{} export back-end inserts @code{:math-prefix} string value in a
math environment before the table.  The @LaTeX{} export back-end inserts
@code{:math-suffix} string value in a math environment after the table.  The
@LaTeX{} export back-end inserts @code{:math-arguments} string value between
the macro name and the table's contents.  @code{:math-arguments} comes in use
for matrix macros that require more than one argument, such as
@code{qbordermatrix}.
@end table

@LaTeX{} table attributes help formatting tables for a wide range of
situations, such as matrix product or spanning multiple pages:

@example
#+ATTR_LATEX: :environment longtable :align l|lp@{3cm@}r|l
| ..... | ..... |
| ..... | ..... |

#+ATTR_LATEX: :mode math :environment bmatrix :math-suffix \times
| a | b |
| c | d |
#+ATTR_LATEX: :mode math :environment bmatrix
| 1 | 2 |
| 3 | 4 |
@end example

Set the caption with the @LaTeX{} command
@code{\bicaption@{HeadingA@}@{HeadingB@}}:

@example
#+ATTR_LATEX: :caption \bicaption@{HeadingA@}@{HeadingB@}
| ..... | ..... |
| ..... | ..... |
@end example


@node Images in @LaTeX{} export
@subsection Images in @LaTeX{} export
@cindex images, inline in @LaTeX{}
@cindex inlining images in @LaTeX{}
@cindex @code{#+ATTR_LATEX}, in images

The @LaTeX{} export back-end processes image links in Org files that do not
have descriptions, such as these links @samp{[[file:img.jpg]]} or
@samp{[[./img.jpg]]}, as direct image insertions in the final PDF output.  In
the PDF, they are no longer links but actual images embedded on the page.
The @LaTeX{} export back-end uses @code{\includegraphics} macro to insert the
image.  But for TikZ@footnote{@url{http://sourceforge.net/projects/pgf/}}
images, the back-end uses an @code{\input} macro wrapped within
a @code{tikzpicture} environment.

For specifying image @code{:width}, @code{:height}, and other
@code{:options}, use this syntax:

@example
#+ATTR_LATEX: :width 5cm :options angle=90
[[./img/sed-hr4049.pdf]]
@end example

For custom commands for captions, use the @code{:caption} attribute.  It will
override the default @code{#+CAPTION} value:

@example
#+ATTR_LATEX: :caption \bicaption@{HeadingA@}@{HeadingB@}
[[./img/sed-hr4049.pdf]]
@end example

When captions follow the method as described in @ref{Images and tables}, the
@LaTeX{} export back-end wraps the picture in a floating @code{figure}
environment.  To float an image without specifying a caption, set the
@code{:float} attribute to one of the following:
@itemize @minus
@item
@code{t}: for a standard @samp{figure} environment; used by default whenever
an image has a caption.
@item
@code{multicolumn}: to span the image across multiple columns of a page; the
back-end wraps the image in a @code{figure*} environment.
@item
@code{wrap}: for text to flow around the image on the right; the figure
occupies the left half of the page.
@item
@code{sideways}: for a new page with the image sideways, rotated ninety
degrees, in a @code{sidewaysfigure} environment; overrides @code{:placement}
setting.
@item
@code{nil}: to avoid a @code{:float} even if using a caption.
@end itemize
@noindent
Use the @code{placement} attribute to modify a floating environment's placement.

@example
#+ATTR_LATEX: :float wrap :width 0.38\textwidth :placement
@{r@}@{0.4\textwidth@} [[./img/hst.png]]
@end example

@vindex org-latex-images-centered
@cindex center image (@LaTeX{} export)
@cindex image, centering (@LaTeX{} export)

The @LaTeX{} export back-end centers all images by default.  Setting
@code{:center} attribute to @code{nil} disables centering.  To disable
centering globally, set @code{org-latex-images-centered} to @code{t}.

Set the @code{:comment-include} attribute to non-@code{nil} value for the
@LaTeX{} export back-end to comment out the @code{\includegraphics} macro.

@node Plain lists in @LaTeX{} export
@subsection Plain lists in @LaTeX{} export
@cindex plain lists, in @LaTeX{} export
@cindex @code{#+ATTR_LATEX}, in plain lists

The @LaTeX{} export back-end accepts the @code{:environment} and
@code{:options} attributes for plain lists.  Both attributes work together
for customizing lists, as shown in the examples:

@example
#+LATEX_HEADER: \usepackage[inline]@{enumitem@}
Some ways to say "Hello":
#+ATTR_LATEX: :environment itemize*
#+ATTR_LATEX: :options [label=@{@}, itemjoin=@{,@}, itemjoin*=@{, and@}]
- Hola
- Bonjour
- Guten Tag.
@end example

Since @LaTeX{} supports only four levels of nesting for lists, use an
external package, such as @samp{enumitem} in @LaTeX{}, for levels deeper than
four:

@example
#+LATEX_HEADER: \usepackage@{enumitem@}
#+LATEX_HEADER: \renewlist@{itemize@}@{itemize@}@{9@}
#+LATEX_HEADER: \setlist[itemize]@{label=$\circ$@}
- One
  - Two
    - Three
      - Four
        - Five
@end example

@node Source blocks in @LaTeX{} export
@subsection Source blocks in @LaTeX{} export
@cindex source blocks, in @LaTeX{} export
@cindex @code{#+ATTR_LATEX}, in source blocks

The @LaTeX{} export back-end can make source code blocks into floating
objects through the attributes @code{:float} and @code{:options}.  For
@code{:float}:

@itemize @minus
@item
@code{t}: makes a source block float; by default floats any source block with
a caption.
@item
@code{multicolumn}: spans the source block across multiple columns of a page.
@item
@code{nil}: avoids a @code{:float} even if using a caption; useful for
source code blocks that may not fit on a page.
@end itemize

@example
#+ATTR_LATEX: :float nil
#+BEGIN_SRC emacs-lisp
Lisp code that may not fit in a single page.
#+END_SRC
@end example

@vindex org-latex-listings-options
@vindex org-latex-minted-options
The @LaTeX{} export back-end passes string values in @code{:options} to
@LaTeX{} packages for customization of that specific source block.  In the
example below, the @code{:options} are set for Minted.  Minted is a source
code highlighting @LaTeX{}package with many configurable options.

@example
#+ATTR_LATEX: :options commentstyle=\bfseries
#+BEGIN_SRC emacs-lisp
  (defun Fib (n)
    (if (< n 2) n (+ (Fib (- n 1)) (Fib (- n 2)))))
#+END_SRC
@end example

To apply similar configuration options for all source blocks in a file, use
the @code{org-latex-listings-options} and @code{org-latex-minted-options}
variables.

@node Example blocks in @LaTeX{} export
@subsection Example blocks in @LaTeX{} export
@cindex example blocks, in @LaTeX{} export
@cindex verbatim blocks, in @LaTeX{} export
@cindex @code{#+ATTR_LATEX}, in example blocks

The @LaTeX{} export back-end wraps the contents of example blocks in a
@samp{verbatim} environment.  To change this behavior to use another
environment globally, specify an appropriate export filter (@pxref{Advanced
configuration}).  To change this behavior to use another environment for each
block, use the @code{:environment} parameter to specify a custom environment.

@example
#+ATTR_LATEX: :environment myverbatim
#+BEGIN_EXAMPLE
This sentence is false.
#+END_EXAMPLE
@end example

@node Special blocks in @LaTeX{} export
@subsection Special blocks in @LaTeX{} export
@cindex special blocks, in @LaTeX{} export
@cindex abstract, in @LaTeX{} export
@cindex proof, in @LaTeX{} export
@cindex @code{#+ATTR_LATEX}, in special blocks


For other special blocks in the Org file, the @LaTeX{} export back-end makes
a special environment of the same name.  The back-end also takes
@code{:options}, if any, and appends as-is to that environment's opening
string.  For example:

@example
#+BEGIN_abstract
We demonstrate how to solve the Syracuse problem.
#+END_abstract

#+ATTR_LATEX: :options [Proof of important theorem]
#+BEGIN_proof
...
Therefore, any even number greater than 2 is the sum of two primes.
#+END_proof
@end example

@noindent
exports to

@example
\begin@{abstract@}
We demonstrate how to solve the Syracuse problem.
\end@{abstract@}

\begin@{proof@}[Proof of important theorem]
...
Therefore, any even number greater than 2 is the sum of two primes.
\end@{proof@}
@end example

If you need to insert a specific caption command, use @code{:caption}
attribute.  It will override standard @code{#+CAPTION} value, if any.  For
example:

@example
#+ATTR_LATEX: :caption \MyCaption@{HeadingA@}
#+BEGIN_proof
...
#+END_proof
@end example

@node Horizontal rules in @LaTeX{} export
@subsection Horizontal rules in @LaTeX{} export
@cindex horizontal rules, in @LaTeX{} export
@cindex @code{#+ATTR_LATEX}, in horizontal rules

The @LaTeX{} export back-end converts horizontal rules by the specified
@code{:width} and @code{:thickness} attributes.  For example:

@example
#+ATTR_LATEX: :width .6\textwidth :thickness 0.8pt
-----
@end example

@node Markdown export
@section Markdown export
@cindex Markdown export

The Markdown export back-end, @code{md}, converts an Org file to a Markdown
format, as defined at @url{http://daringfireball.net/projects/markdown/}.

Since @code{md} is built on top of the HTML back-end, any Org constructs not
supported by Markdown, such as tables, the underlying @code{html} back-end
(@pxref{HTML export}) converts them.

@subheading Markdown export commands

@table @kbd
@orgcmd{C-c C-e m m,org-md-export-to-markdown}
Export to a text file with Markdown syntax.  For @file{myfile.org}, Org
exports to @file{myfile.md}, overwritten without warning.
@orgcmd{C-c C-e m M,org-md-export-as-markdown}
Export to a temporary buffer.  Does not create a file.
@item C-c C-e m o
Export as a text file with Markdown syntax, then open it.
@end table

@subheading Header and sectioning structure

@vindex org-md-headline-style
Based on @code{org-md-headline-style}, markdown export can generate headlines
of both @code{atx} and @code{setext} types.  @code{atx} limits headline
levels to two.  @code{setext} limits headline levels to six.  Beyond these
limits, the export back-end converts headlines to lists.  To set a limit to a
level before the absolute limit (@pxref{Export settings}).

@c begin opendocument

@node OpenDocument Text export
@section OpenDocument Text export
@cindex ODT
@cindex OpenDocument
@cindex export, OpenDocument
@cindex LibreOffice

The ODT export back-end handles creating of OpenDocument Text (ODT) format
files.  The format complies with @cite{OpenDocument-v1.2
specification}@footnote{@url{http://docs.oasis-open.org/office/v1.2/OpenDocument-v1.2.html,
Open Document Format for Office Applications (OpenDocument) Version 1.2}} and
is compatible with LibreOffice 3.4.

@menu
* Pre-requisites for ODT export::  Required packages.
* ODT export commands::         Invoking export.
* ODT specific export settings::  Configuration options.
* Extending ODT export::        Producing @file{.doc}, @file{.pdf} files.
* Applying custom styles::      Styling the output.
* Links in ODT export::         Handling and formatting links.
* Tables in ODT export::        Org table conversions.
* Images in ODT export::        Inserting images.
* Math formatting in ODT export::  Formatting @LaTeX{} fragments.
* Labels and captions in ODT export::  Rendering objects.
* Literal examples in ODT export::  For source code and example blocks.
* Advanced topics in ODT export::  For power users.
@end menu

@node Pre-requisites for ODT export
@subsection Pre-requisites for ODT export
@cindex zip
The ODT export back-end relies on the @file{zip} program to create the final
compressed ODT output.  Check if @file{zip} is locally available and
executable.  Without @file{zip}, export cannot finish.

@node ODT export commands
@subsection ODT export commands
@anchor{x-export-to-odt}
@cindex region, active
@cindex active region
@cindex @code{transient-mark-mode}
@table @kbd
@orgcmd{C-c C-e o o,org-odt-export-to-odt}
@cindex property, @code{EXPORT_FILE_NAME}

Export as OpenDocument Text file.

@vindex org-odt-preferred-output-format
If @code{org-odt-preferred-output-format} is specified, the ODT export
back-end automatically converts the exported file to that format.
@xref{x-export-to-other-formats, , Automatically exporting to other formats}.

For @file{myfile.org}, Org exports to @file{myfile.odt}, overwriting without
warning.  The ODT export back-end exports a region only if a region was
active.  Note for exporting active regions, the @code{transient-mark-mode}
has to be turned on.

If the selected region is a single tree, the ODT export back-end makes the
tree head the document title.  Incidentally, @kbd{C-c @@} selects the current
sub-tree.  If the tree head entry has, or inherits, an
@code{EXPORT_FILE_NAME} property, the ODT export back-end uses that for file
name.

@kbd{C-c C-e o O}
Export to an OpenDocument Text file format and open it.

@vindex org-odt-preferred-output-format
When @code{org-odt-preferred-output-format} is specified, open the converted
file instead.  @xref{x-export-to-other-formats, , Automatically exporting to
other formats}.
@end table

@node ODT specific export settings
@subsection ODT specific export settings
The ODT export back-end has several additional keywords for customizing ODT
output.  Setting these keywords works similar to the general options
(@pxref{Export settings}).

@table @samp
@item DESCRIPTION
@cindex @code{#+DESCRIPTION} (ODT)
This is the document's description, which the ODT export back-end inserts as
document metadata.  For long descriptions, use multiple @code{#+DESCRIPTION}
lines.

@item KEYWORDS
@cindex @code{#+KEYWORDS} (ODT)
The keywords for the document.  The ODT export back-end inserts the
description along with author name, keywords, and related file metadata as
metadata in the output file.  Use multiple @code{#+KEYWORDS} lines if
necessary.

@item ODT_STYLES_FILE
@cindex ODT_STYLES_FILE
@vindex org-odt-styles-file
The ODT export back-end uses the @code{org-odt-styles-file} by default.  See
@ref{Applying custom styles} for details.

@item SUBTITLE
@cindex SUBTITLE (ODT)
The document subtitle.
@end table

@node Extending ODT export
@subsection Extending ODT export

The ODT export back-end can produce documents in other formats besides ODT
using a specialized ODT converter process.  Its common interface works with
popular converters to produce formats such as @samp{doc}, or convert a
document from one format, say @samp{csv}, to another format, say @samp{xls}.

@cindex @file{unoconv}
@cindex LibreOffice

Customize @code{org-odt-convert-process} variable to point to @code{unoconv},
which is the ODT's preferred converter.  Working installations of LibreOffice
would already have @code{unoconv} installed.  Alternatively, other converters
may be substituted here.  @xref{Configuring a document converter}.

@subsubheading Automatically exporting to other formats
@anchor{x-export-to-other-formats}

@vindex org-odt-preferred-output-format
If ODT format is just an intermediate step to get to other formats, such as
@samp{doc}, @samp{docx}, @samp{rtf}, or @samp{pdf}, etc., then extend the ODT
export back-end to directly produce that format.  Specify the final format in
the @code{org-odt-preferred-output-format} variable.  This is one way to
extend (@pxref{x-export-to-odt,,Exporting to ODT}).

@subsubheading Converting between document formats
@anchor{x-convert-to-other-formats}

The Org export back-end is made to be inter-operable with a wide range of text
document format converters.  Newer generation converters, such as LibreOffice
and Pandoc, can handle hundreds of formats at once.  Org provides a
consistent interaction with whatever converter is installed.  Here are some
generic commands:

@vindex org-odt-convert
@table @kbd

@item M-x org-odt-convert @key{RET}
Convert an existing document from one format to another.  With a prefix
argument, opens the newly produced file.
@end table

@node Applying custom styles
@subsection Applying custom styles
@cindex styles, custom
@cindex template, custom

The ODT export back-end comes with many OpenDocument styles (@pxref{Working
with OpenDocument style files}).  To expand or further customize these
built-in style sheets, either edit the style sheets directly or generate them
using an application such as LibreOffice.  The example here shows creating a
style using LibreOffice.

@subsubheading Applying custom styles: the easy way

@enumerate
@item
Create a sample @file{example.org} file with settings as shown below, and
export it to ODT format.

@example
#+OPTIONS: H:10 num:t
@end example

@item
Open the above @file{example.odt} using LibreOffice.  Use the @file{Stylist}
to locate the target styles, which typically have the @samp{Org} prefix.
Open one, modify, and save as either OpenDocument Text (@file{.odt}) or
OpenDocument Template (@file{.ott}) file.

@item
@cindex @code{#+ODT_STYLES_FILE}
@vindex org-odt-styles-file
Customize the variable @code{org-odt-styles-file} and point it to the
newly created file.  For additional configuration options
@pxref{x-overriding-factory-styles,,Overriding factory styles}.

To apply and ODT style to a particular file, use the @code{#+ODT_STYLES_FILE}
option as shown in the example below:

@example
#+ODT_STYLES_FILE: "/path/to/example.ott"
@end example

or

@example
#+ODT_STYLES_FILE: ("/path/to/file.ott" ("styles.xml" "image/hdr.png"))
@end example

@end enumerate

@subsubheading Using third-party styles and templates

The ODT export back-end relies on many templates and style names.  Using
third-party styles and templates can lead to mismatches.  Templates derived
from built in ODT templates and styles seem to have fewer problems.

@node Links in ODT export
@subsection Links in ODT export
@cindex links, in ODT export

ODT export back-end creates native cross-references for internal links and
Internet-style links for all other link types.

A link with no description and pointing to a regular---un-itemized---outline
heading is replaced with a cross-reference and section number of the heading.

A @samp{\ref@{label@}}-style reference to an image, table etc.@: is replaced
with a cross-reference and sequence number of the labeled entity.
@xref{Labels and captions in ODT export}.

@node Tables in ODT export
@subsection Tables in ODT export
@cindex tables, in ODT export

The ODT export back-end handles native Org mode tables (@pxref{Tables}) and
simple @file{table.el} tables.  Complex @file{table.el} tables having column
or row spans are not supported.  Such tables are stripped from the exported
document.

By default, the ODT export back-end exports a table with top and bottom
frames and with ruled lines separating row and column groups (@pxref{Column
groups}).  All tables are typeset to occupy the same width.  The ODT export
back-end honors any table alignments and relative widths for columns
(@pxref{Column width and alignment}).

Note that the ODT export back-end interprets column widths as weighted
ratios, the default weight being 1.

@cindex @code{#+ATTR_ODT}

Specifying @code{:rel-width} property on an @code{#+ATTR_ODT} line controls
the width of the table.  For example:

@example
#+ATTR_ODT: :rel-width 50
| Area/Month    |   Jan |   Feb |   Mar |   Sum |
|---------------+-------+-------+-------+-------|
| /             |     < |       |       |     < |
| <l13>         |  <r5> |  <r5> |  <r5> |  <r6> |
| North America |     1 |    21 |   926 |   948 |
| Middle East   |     6 |    75 |   844 |   925 |
| Asia Pacific  |     9 |    27 |   790 |   826 |
|---------------+-------+-------+-------+-------|
| Sum           |    16 |   123 |  2560 |  2699 |
@end example

On export, the above table takes 50% of text width area.  The exporter sizes
the columns in the ratio: 13:5:5:5:6.  The first column is left-aligned and
rest of the columns, right-aligned.  Vertical rules separate the header and
the last column.  Horizontal rules separate the header and the last row.

For even more customization, create custom table styles and associate them
with a table using the @code{#+ATTR_ODT} line.  @xref{Customizing tables in
ODT export}.

@node Images in ODT export
@subsection Images in ODT export
@cindex images, embedding in ODT
@cindex embedding images in ODT

@subsubheading Embedding images
The ODT export back-end processes image links in Org files that do not have
descriptions, such as these links @samp{[[file:img.jpg]]} or
@samp{[[./img.jpg]]}, as direct image insertions in the final output.  Either
of these examples works:

@example
[[file:img.png]]
@end example

@example
[[./img.png]]
@end example

@subsubheading Embedding clickable images
For clickable images, provide a link whose description is another link to an
image file.  For example, to embed an image @file{org-mode-unicorn.png} which
when clicked jumps to @uref{https://orgmode.org} website, do the following

@example
[[https://orgmode.org][./org-mode-unicorn.png]]
@end example

@subsubheading Sizing and scaling of embedded images

@cindex @code{#+ATTR_ODT}
Control the size and scale of the embedded images with the @code{#+ATTR_ODT}
attribute.

@cindex identify, ImageMagick
@vindex org-odt-pixels-per-inch
The ODT export back-end starts with establishing the size of the image in the
final document.  The dimensions of this size is measured in centimeters.  The
back-end then queries the image file for its dimensions measured in pixels.
For this measurement, the back-end relies on ImageMagick's @file{identify}
program or Emacs @code{create-image} and @code{image-size} API.  ImageMagick
is the preferred choice for large file sizes or frequent batch operations.
The back-end then converts the pixel dimensions using
@code{org-odt-pixels-per-inch} into the familiar 72 dpi or 96 dpi.  The
default value for this is in @code{display-pixels-per-inch}, which can be
tweaked for better results based on the capabilities of the output device.
Here are some common image scaling operations:

@table @asis
@item Explicitly size the image
To embed @file{img.png} as a 10 cm x 10 cm image, do the following:

@example
#+ATTR_ODT: :width 10 :height 10
[[./img.png]]
@end example

@item Scale the image
To embed @file{img.png} at half its size, do the following:

@example
#+ATTR_ODT: :scale 0.5
[[./img.png]]
@end example

@item Scale the image to a specific width
To embed @file{img.png} with a width of 10 cm while retaining the original
height:width ratio, do the following:

@example
#+ATTR_ODT: :width 10
[[./img.png]]
@end example

@item Scale the image to a specific height
To embed @file{img.png} with a height of 10 cm while retaining the original
height:width ratio, do the following

@example
#+ATTR_ODT: :height 10
[[./img.png]]
@end example
@end table

@subsubheading Anchoring of images

@cindex @code{#+ATTR_ODT}
The ODT export back-end can anchor images to @samp{"as-char"},
@samp{"paragraph"}, or @samp{"page"}.  Set the preferred anchor using the
@code{:anchor} property of the @code{#+ATTR_ODT} line.

To create an image that is anchored to a page:
@example
#+ATTR_ODT: :anchor "page"
[[./img.png]]
@end example

@node Math formatting in ODT export
@subsection Math formatting in ODT export

The ODT export back-end has special support built-in for handling math.

@menu
* Working with @LaTeX{} math snippets::  Embedding in @LaTeX{} format.
* Working with MathML or OpenDocument formula files::  Embedding in native format.
@end menu

@node Working with @LaTeX{} math snippets
@subsubheading Working with @LaTeX{} math snippets

@LaTeX{} math snippets (@pxref{@LaTeX{} fragments}) can be embedded in an ODT
document in one of the following ways:

@cindex MathML
@enumerate
@item MathML

Add this line to the Org file.  This option is activated on a per-file basis.

@example
#+OPTIONS: LaTeX:t
@end example

With this option, @LaTeX{} fragments are first converted into MathML
fragments using an external @LaTeX{}-to-MathML converter program.  The
resulting MathML fragments are then embedded as an OpenDocument Formula in
the exported document.

@vindex org-latex-to-mathml-convert-command
@vindex org-latex-to-mathml-jar-file

To specify the @LaTeX{}-to-MathML converter, customize the variables
@code{org-latex-to-mathml-convert-command} and
@code{org-latex-to-mathml-jar-file}.

To use MathToWeb@footnote{See
@uref{http://www.mathtoweb.com/cgi-bin/mathtoweb_home.pl, MathToWeb}.} as the
preferred converter, configure the above variables as

@lisp
(setq org-latex-to-mathml-convert-command
      "java -jar %j -unicode -force -df %o %I"
      org-latex-to-mathml-jar-file
      "/path/to/mathtoweb.jar")
@end lisp
To use @LaTeX{}ML@footnote{See @uref{http://dlmf.nist.gov/LaTeXML/}.} use
@lisp
(setq org-latex-to-mathml-convert-command
      "latexmlmath \"%i\" --presentationmathml=%o")
@end lisp

To quickly verify the reliability of the @LaTeX{}-to-MathML converter, use
the following commands:

@table @kbd
@item M-x org-odt-export-as-odf @key{RET}
Convert a @LaTeX{} math snippet to an OpenDocument formula (@file{.odf}) file.

@item M-x org-odt-export-as-odf-and-open @key{RET}
Convert a @LaTeX{} math snippet to an OpenDocument formula (@file{.odf}) file
and open the formula file with the system-registered application.
@end table

@cindex dvipng
@cindex dvisvgm
@cindex imagemagick
@item PNG images

Add this line to the Org file.  This option is activated on a per-file basis.

@example
#+OPTIONS: tex:dvipng
@end example

@example
#+OPTIONS: tex:dvisvgm
@end example

or:

@example
#+OPTIONS: tex:imagemagick
@end example

Under this option, @LaTeX{} fragments are processed into PNG or SVG images
and the resulting images are embedded in the exported document.  This method
requires @file{dvipng} program, @file{dvisvgm} or @file{imagemagick}
programs.
@end enumerate

@node Working with MathML or OpenDocument formula files
@subsubheading Working with MathML or OpenDocument formula files

When embedding @LaTeX{} math snippets in ODT documents is not reliable, there
is one more option to try.  Embed an equation by linking to its MathML
(@file{.mml}) source or its OpenDocument formula (@file{.odf}) file as shown
below:

@example
[[./equation.mml]]
@end example

or

@example
[[./equation.odf]]
@end example

@node Labels and captions in ODT export
@subsection Labels and captions in ODT export

ODT format handles labeling and captioning of objects based on their
types.  Inline images, tables, @LaTeX{} fragments, and Math formulas are
numbered and captioned separately.  Each object also gets a unique sequence
number based on its order of first appearance in the Org file.  Each category
has its own sequence.  A caption is just a label applied to these objects.

@example
#+CAPTION: Bell curve
#+LABEL:   fig:SED-HR4049
[[./img/a.png]]
@end example

When rendered, it may show as follows in the exported document:

@example
Figure 2: Bell curve
@end example

@vindex org-odt-category-map-alist
To modify the category component of the caption, customize the option
@code{org-odt-category-map-alist}.  For example, to tag embedded images with
the string @samp{Illustration} instead of the default string @samp{Figure},
use the following setting:

@lisp
(setq org-odt-category-map-alist
      '(("__Figure__" "Illustration" "value" "Figure" org-odt--enumerable-image-p)))
@end lisp

With the above modification, the previous example changes to:

@example
Illustration 2: Bell curve
@end example

@node Literal examples in ODT export
@subsection Literal examples in ODT export

The ODT export back-end supports literal examples (@pxref{Literal examples})
with full fontification.  Internally, the ODT export back-end relies on
@file{htmlfontify.el} to generate the style definitions needed for fancy
listings.  The auto-generated styles get @samp{OrgSrc} prefix and inherit
colors from the faces used by Emacs @code{font-lock} library for that source
language.

@vindex org-odt-fontify-srcblocks
For custom fontification styles, customize the
@code{org-odt-create-custom-styles-for-srcblocks} option.

@vindex org-odt-create-custom-styles-for-srcblocks
To turn off fontification of literal examples, customize the
@code{org-odt-fontify-srcblocks} option.

@node Advanced topics in ODT export
@subsection Advanced topics in ODT export

The ODT export back-end has extensive features useful for power users and
frequent uses of ODT formats.

@menu
* Configuring a document converter::  Registering a document converter.
* Working with OpenDocument style files::  Exploring internals.
* Creating one-off styles::     Customizing styles, highlighting.
* Customizing tables in ODT export::  Defining table templates.
* Validating OpenDocument XML::  Debugging corrupted OpenDocument files.
@end menu

@node Configuring a document converter
@subsubheading Configuring a document converter
@cindex convert
@cindex doc, docx, rtf
@cindex converter

The ODT export back-end works with popular converters with little or no extra
configuration.  @xref{Extending ODT export}.  The following is for unsupported
converters or tweaking existing defaults.

@enumerate
@item Register the converter

@vindex org-odt-convert-processes
Add the name of the converter to the @code{org-odt-convert-processes}
variable.  Note that it also requires how the converter is invoked on the
command line.  See the variable's docstring for details.

@item Configure its capabilities

@vindex org-odt-convert-capabilities
@anchor{x-odt-converter-capabilities} Specify which formats the converter can
handle by customizing the variable @code{org-odt-convert-capabilities}.  Use
the entry for the default values in this variable for configuring the new
converter.  Also see its docstring for details.

@item Choose the converter

@vindex org-odt-convert-process
Select the newly added converter as the preferred one by customizing the
option @code{org-odt-convert-process}.
@end enumerate

@node Working with OpenDocument style files
@subsubheading Working with OpenDocument style files
@cindex styles, custom
@cindex template, custom

This section explores the internals of the ODT exporter; the means by which
it produces styled documents; the use of automatic and custom OpenDocument
styles.

@anchor{x-factory-styles}
@subsubheading a) Factory styles

The ODT exporter relies on two files for generating its output.
These files are bundled with the distribution under the directory pointed to
by the variable @code{org-odt-styles-dir}.  The two files are:

@itemize
@anchor{x-orgodtstyles-xml}
@item
@file{OrgOdtStyles.xml}

This file contributes to the @file{styles.xml} file of the final @samp{ODT}
document.  This file gets modified for the following purposes:
@enumerate

@item
To control outline numbering based on user settings.

@item
To add styles generated by @file{htmlfontify.el} for fontification of code
blocks.
@end enumerate

@anchor{x-orgodtcontenttemplate-xml}
@item
@file{OrgOdtContentTemplate.xml}

This file contributes to the @file{content.xml} file of the final @samp{ODT}
document.  The contents of the Org outline are inserted between the
@samp{<office:text>}@dots{}@samp{</office:text>} elements of this file.

Apart from serving as a template file for the final @file{content.xml}, the
file serves the following purposes:
@enumerate

@item
It contains automatic styles for formatting of tables which are referenced by
the exporter.

@item
It contains @samp{<text:sequence-decl>}@dots{}@samp{</text:sequence-decl>}
elements that control numbering of tables, images, equations, and similar
entities.
@end enumerate
@end itemize

@anchor{x-overriding-factory-styles}
@subsubheading b) Overriding factory styles
The following two variables control the location from where the ODT exporter
picks up the custom styles and content template files.  Customize these
variables to override the factory styles used by the exporter.

@itemize
@anchor{x-org-odt-styles-file}
@item
@code{org-odt-styles-file}

The ODT export back-end uses the file pointed to by this variable, such as
@file{styles.xml}, for the final output.  It can take one of the following
values:

@enumerate
@item A @file{styles.xml} file

Use this file instead of the default @file{styles.xml}

@item A @file{.odt} or @file{.ott} file

Use the @file{styles.xml} contained in the specified OpenDocument Text or
Template file

@item A @file{.odt} or @file{.ott} file and a subset of files contained within them

Use the @file{styles.xml} contained in the specified OpenDocument Text or
Template file.  Additionally extract the specified member files and embed
those within the final @samp{ODT} document.

Use this option if the @file{styles.xml} file references additional files
like header and footer images.

@item @code{nil}

Use the default @file{styles.xml}
@end enumerate

@anchor{x-org-odt-content-template-file}
@item
@code{org-odt-content-template-file}

Use this variable to specify the blank @file{content.xml} that will be used
in the final output.
@end itemize

@node Creating one-off styles
@subsubheading Creating one-off styles

The ODT export back-end can read embedded raw OpenDocument XML from the Org
file.  Such direct formatting are useful for one-off instances.

@enumerate
@item Embedding ODT tags as part of regular text

Enclose OpenDocument syntax in @samp{@@@@odt:...@@@@} for inline markup.  For
example, to highlight a region of text do the following:

@example
@@@@odt:<text:span text:style-name="Highlight">This is highlighted
text</text:span>@@@@.  But this is regular text.
@end example

@strong{Hint:} To see the above example in action, edit the @file{styles.xml}
(@pxref{x-orgodtstyles-xml,,Factory styles}) and add a custom
@samp{Highlight} style as shown below:

@example
<style:style style:name="Highlight" style:family="text">
  <style:text-properties fo:background-color="#ff0000"/>
</style:style>
@end example

@item Embedding a one-line OpenDocument XML

The ODT export back-end can read one-liner options with @code{#+ODT:}
in the Org file.  For example, to force a page break:

@example
#+ODT: <text:p text:style-name="PageBreak"/>
@end example

@strong{Hint:} To see the above example in action, edit your
@file{styles.xml} (@pxref{x-orgodtstyles-xml,,Factory styles}) and add a
custom @samp{PageBreak} style as shown below.

@example
<style:style style:name="PageBreak" style:family="paragraph"
             style:parent-style-name="Text_20_body">
  <style:paragraph-properties fo:break-before="page"/>
</style:style>
@end example

@item Embedding a block of OpenDocument XML

The ODT export back-end can also read ODT export blocks for OpenDocument XML.
Such blocks use the @code{#+BEGIN_EXPORT odt}@dots{}@code{#+END_EXPORT}
constructs.

For example, to create a one-off paragraph that uses bold text, do the
following:

@example
#+BEGIN_EXPORT odt
<text:p text:style-name="Text_20_body_20_bold">
This paragraph is specially formatted and uses bold text.
</text:p>
#+END_EXPORT
@end example

@end enumerate

@node Customizing tables in ODT export
@subsubheading Customizing tables in ODT export
@cindex tables, in ODT export

@cindex @code{#+ATTR_ODT}
Override the default table format by specifying a custom table style with the
@code{#+ATTR_ODT} line.  For a discussion on default formatting of tables
@pxref{Tables in ODT export}.

This feature closely mimics the way table templates are defined in the
OpenDocument-v1.2
specification.@footnote{@url{http://docs.oasis-open.org/office/v1.2/OpenDocument-v1.2.html,
OpenDocument-v1.2 Specification}}

@vindex org-odt-table-styles
For quick preview of this feature, install the settings below and export the
table that follows:

@lisp
(setq org-odt-table-styles
      (append org-odt-table-styles
            '(("TableWithHeaderRowAndColumn" "Custom"
                ((use-first-row-styles . t)
                 (use-first-column-styles . t)))
                ("TableWithFirstRowandLastRow" "Custom"
                 ((use-first-row-styles . t)
                 (use-last-row-styles . t))))))
@end lisp

@example
#+ATTR_ODT: :style TableWithHeaderRowAndColumn
| Name  | Phone | Age |
| Peter |  1234 |  17 |
| Anna  |  4321 |  25 |
@end example

The example above used @samp{Custom} template and installed two table styles
@samp{TableWithHeaderRowAndColumn} and @samp{TableWithFirstRowandLastRow}.
@strong{Important:} The OpenDocument styles needed for producing the above
template were pre-defined.  They are available in the section marked
@samp{Custom Table Template} in @file{OrgOdtContentTemplate.xml}
(@pxref{x-orgodtcontenttemplate-xml,,Factory styles}.  For adding new
templates, define new styles here.

To use this feature proceed as follows:

@enumerate
@item
Create a table template@footnote{See the @code{<table:table-template>}
element of the OpenDocument-v1.2 specification}

A table template is set of @samp{table-cell} and @samp{paragraph} styles for
each of the following table cell categories:

@itemize @minus
@item Body
@item First column
@item Last column
@item First row
@item Last row
@item Even row
@item Odd row
@item Even column
@item Odd Column
@end itemize

The names for the above styles must be chosen based on the name of the table
template using a well-defined convention.

The naming convention is better illustrated with an example.  For a table
template with the name @samp{Custom}, the needed style names are listed in
the following table.

@multitable  {Table cell type} {CustomEvenColumnTableCell} {CustomEvenColumnTableParagraph}
@headitem Table cell type
@tab @code{table-cell} style
@tab @code{paragraph} style
@item
@tab
@tab
@item Body
@tab @samp{CustomTableCell}
@tab @samp{CustomTableParagraph}
@item First column
@tab @samp{CustomFirstColumnTableCell}
@tab @samp{CustomFirstColumnTableParagraph}
@item Last column
@tab @samp{CustomLastColumnTableCell}
@tab @samp{CustomLastColumnTableParagraph}
@item First row
@tab @samp{CustomFirstRowTableCell}
@tab @samp{CustomFirstRowTableParagraph}
@item Last row
@tab @samp{CustomLastRowTableCell}
@tab @samp{CustomLastRowTableParagraph}
@item Even row
@tab @samp{CustomEvenRowTableCell}
@tab @samp{CustomEvenRowTableParagraph}
@item Odd row
@tab @samp{CustomOddRowTableCell}
@tab @samp{CustomOddRowTableParagraph}
@item Even column
@tab @samp{CustomEvenColumnTableCell}
@tab @samp{CustomEvenColumnTableParagraph}
@item Odd column
@tab @samp{CustomOddColumnTableCell}
@tab @samp{CustomOddColumnTableParagraph}
@end multitable

To create a table template with the name @samp{Custom}, define the above
styles in the
@code{<office:automatic-styles>}...@code{</office:automatic-styles>} element
of the content template file (@pxref{x-orgodtcontenttemplate-xml,,Factory
styles}).

@item
Define a table style@footnote{See the attributes @code{table:template-name},
@code{table:use-first-row-styles}, @code{table:use-last-row-styles},
@code{table:use-first-column-styles}, @code{table:use-last-column-styles},
@code{table:use-banding-rows-styles}, and
@code{table:use-banding-column-styles} of the @code{<table:table>} element in
the OpenDocument-v1.2 specification}

@vindex org-odt-table-styles
To define a table style, create an entry for the style in the variable
@code{org-odt-table-styles} and specify the following:

@itemize @minus
@item the name of the table template created in step (1)
@item the set of cell styles in that template that are to be activated
@end itemize

For example, the entry below defines two different table styles
@samp{TableWithHeaderRowAndColumn} and @samp{TableWithFirstRowandLastRow}
based on the same template @samp{Custom}.  The styles achieve their intended
effect by selectively activating the individual cell styles in that template.

@lisp
(setq org-odt-table-styles
      (append org-odt-table-styles
              '(("TableWithHeaderRowAndColumn" "Custom"
                 ((use-first-row-styles . t)
                  (use-first-column-styles . t)))
                ("TableWithFirstRowandLastRow" "Custom"
                 ((use-first-row-styles . t)
                  (use-last-row-styles . t))))))
@end lisp

@item
Associate a table with the table style

To do this, specify the table style created in step (2) as part of
the @code{ATTR_ODT} line as shown below.

@example
#+ATTR_ODT: :style "TableWithHeaderRowAndColumn"
| Name  | Phone | Age |
| Peter |  1234 |  17 |
| Anna  |  4321 |  25 |
@end example
@end enumerate

@node Validating OpenDocument XML
@subsubheading Validating OpenDocument XML

Sometimes ODT format files may not open due to @file{.odt} file corruption.
To verify if the @file{.odt} file is corrupt, validate it against the
OpenDocument RELAX NG Compact Syntax---RNC---schema.  But first the
@file{.odt} files have to be decompressed using @samp{zip}.  Note that
@file{.odt} files are @samp{zip} archives: @inforef{File Archives,,emacs}.
The contents of @file{.odt} files are in @file{.xml}.  For general help with
validation---and schema-sensitive editing---of XML files:
@inforef{Introduction,,nxml-mode}.

@vindex org-odt-schema-dir
Customize @code{org-odt-schema-dir} to point to a directory with OpenDocument
@file{.rnc} files and the needed schema-locating rules.  The ODT export
back-end takes care of updating the @code{rng-schema-locating-files}.

@c end opendocument

@node Org export
@section Org export
@cindex Org export

@code{org} export back-end creates a normalized version of the Org document
in current buffer.  The exporter evaluates Babel code (@pxref{Evaluating code
blocks}) and removes content specific to other back-ends.

@subheading Org export commands

@table @kbd
@orgcmd{C-c C-e O o,org-org-export-to-org}
Export as an Org file with a @file{.org} extension.  For @file{myfile.org},
Org exports to @file{myfile.org.org}, overwriting without warning.

@orgcmd{C-c C-e O O,org-org-export-as-org}
Export to a temporary buffer.  Does not create a file.
@item C-c C-e O v
Export to an Org file, then open it.
@end table

@node Texinfo export
@section Texinfo export
@cindex Texinfo export

The @samp{texinfo} export back-end generates documents with Texinfo code that
can compile to Info format.

@menu
* Texinfo export commands::     Invoking commands.
* Texinfo specific export settings::  Setting the environment.
* Texinfo file header::         Generating the header.
* Texinfo title and copyright page::  Creating preamble pages.
* Info directory file::     Installing a manual in Info file hierarchy.
* Headings and sectioning structure::  Building document structure.
* Indices::                     Creating indices.
* Quoting Texinfo code::        Incorporating literal Texinfo code.
* Plain lists in Texinfo export::  List attributes.
* Tables in Texinfo export::    Table attributes.
* Images in Texinfo export::    Image attributes.
* Special blocks in Texinfo export::  Special block attributes.
* A Texinfo example::           Processing Org to Texinfo.
@end menu

@node Texinfo export commands
@subsection Texinfo export commands

@vindex org-texinfo-info-process
@table @kbd
@orgcmd{C-c C-e i t,org-texinfo-export-to-texinfo}
Export as a Texinfo file with @file{.texi} extension.  For @file{myfile.org},
Org exports to @file{myfile.texi}, overwriting without warning.
@orgcmd{C-c C-e i i,org-texinfo-export-to-info}
Export to Texinfo format first and then process it to make an Info file.  To
generate other formats, such as DocBook, customize the
@code{org-texinfo-info-process} variable.
@end table

@node Texinfo specific export settings
@subsection Texinfo specific export settings
The Texinfo export back-end has several additional keywords for customizing
Texinfo output.  Setting these keywords works similar to the general options
(@pxref{Export settings}).

@table @samp

@item SUBTITLE
@cindex @code{#+SUBTITLE} (Texinfo)
The document subtitle.

@item SUBAUTHOR
@cindex @code{#+SUBAUTHOR}
The document subauthor.

@item TEXINFO_FILENAME
@cindex @code{#+TEXINFO_FILENAME}
The Texinfo filename.

@item TEXINFO_CLASS
@cindex @code{#+TEXINFO_CLASS}
@vindex org-texinfo-default-class
The default document class (@code{org-texinfo-default-class}), which must be
a member of @code{org-texinfo-classes}.

@item TEXINFO_HEADER
@cindex @code{#+TEXINFO_HEADER}
Arbitrary lines inserted at the end of the header.

@item TEXINFO_POST_HEADER
@cindex @code{#+TEXINFO_POST_HEADER}
Arbitrary lines inserted after the end of the header.

@item TEXINFO_DIR_CATEGORY
@cindex @code{#+TEXINFO_DIR_CATEGORY}
The directory category of the document.

@item TEXINFO_DIR_TITLE
@cindex @code{#+TEXINFO_DIR_TITLE}
The directory title of the document.

@item TEXINFO_DIR_DESC
@cindex @code{#+TEXINFO_DIR_DESC}
The directory description of the document.

@item TEXINFO_PRINTED_TITLE
@cindex @code{#+TEXINFO_PRINTED_TITLE}
The printed title of the document.
@end table

@node Texinfo file header
@subsection Texinfo file header

@cindex @code{#+TEXINFO_FILENAME}
After creating the header for a Texinfo file, the Texinfo back-end
automatically generates a name and destination path for the Info file.  To
override this default with a more sensible path and name, specify the
@code{#+TEXINFO_FILENAME} keyword.

@vindex org-texinfo-coding-system
@vindex org-texinfo-classes
@cindex @code{#+TEXINFO_HEADER}
@cindex @code{#+TEXINFO_CLASS}
Along with the output's file name, the Texinfo header also contains language
details (@pxref{Export settings}) and encoding system as set in the
@code{org-texinfo-coding-system} variable.  Insert @code{#+TEXINFO_HEADER}
keywords for each additional command in the header, for example:
@@code@{@@synindex@}.

Instead of repeatedly installing the same set of commands, define a class in
@code{org-texinfo-classes} once, and then activate it in the document by
setting the @code{#+TEXINFO_CLASS} keyword to that class.

@node Texinfo title and copyright page
@subsection Texinfo title and copyright page

@cindex @code{#+TEXINFO_PRINTED_TITLE}
The default template for hard copy output has a title page with
@code{#+TITLE} and @code{#+AUTHOR} (@pxref{Export settings}).  To replace the
regular @code{#+TITLE} with something different for the printed version, use
the @code{#+TEXINFO_PRINTED_TITLE} and @code{#+SUBTITLE} keywords.  Both
expect raw Texinfo code for setting their values.

@cindex @code{#+SUBAUTHOR}
If one @code{#+AUTHOR} is not sufficient, add multiple @code{#+SUBAUTHOR}
keywords.  They have to be set in raw Texinfo code.

@example
#+AUTHOR: Jane Smith
#+SUBAUTHOR: John Doe
#+TEXINFO_PRINTED_TITLE: This Long Title@@inlinefmt@{tex,@@*@} Is Broken in @@TeX@{@}
@end example

@cindex property, @code{COPYING}
Copying material is defined in a dedicated headline with a non-@code{nil}
@code{:COPYING:} property.  The back-end inserts the contents within a
@code{@@copying} command at the beginning of the document.  The heading
itself does not appear in the structure of the document.

Copyright information is printed on the back of the title page.

@example
* Legalese
  :PROPERTIES:
  :COPYING: t
  :END:

  This is a short example of a complete Texinfo file, version 1.0.

  Copyright \copy 2018 Free Software Foundation, Inc.
@end example

@node Info directory file
@subsection Info directory file
@cindex @samp{dir} file, in Texinfo export
@cindex Texinfo export, @samp{dir} file
@cindex Info directory file, in Texinfo export
@cindex Texinfo export, Info directory file
@cindex @code{install-info} parameters, in Texinfo export
@cindex Texinfo export, @code{install-info} parameters

@cindex @code{#+TEXINFO_DIR_CATEGORY}
@cindex @code{#+TEXINFO_DIR_TITLE}
@cindex @code{#+TEXINFO_DIR_DESC}
The end result of the Texinfo export process is the creation of an Info file.
This Info file's metadata has variables for category, title, and description:
@code{#+TEXINFO_DIR_CATEGORY}, @code{#+TEXINFO_DIR_TITLE}, and
@code{#+TEXINFO_DIR_DESC} that establish where in the Info hierarchy the file
fits.

Here is an example that writes to the Info directory file:

@example
#+TEXINFO_DIR_CATEGORY: Emacs
#+TEXINFO_DIR_TITLE: Org Mode: (org)
#+TEXINFO_DIR_DESC: Outline-based notes management and organizer
@end example

@node Headings and sectioning structure
@subsection Headings and sectioning structure

@vindex org-texinfo-classes
@vindex org-texinfo-default-class
@cindex @code{#+TEXINFO_CLASS}
The Texinfo export back-end uses a pre-defined scheme to convert Org
headlines to an equivalent Texinfo structuring commands.  A scheme like this
maps top-level headlines to numbered chapters tagged as @code{@@chapter} and
lower-level headlines to unnumbered chapters tagged as @code{@@unnumbered}.
To override such mappings to introduce @code{@@part} or other Texinfo
structuring commands, define a new class in @code{org-texinfo-classes}.
Activate the new class with the @code{#+TEXINFO_CLASS} keyword.  When no new
class is defined and activated, the Texinfo export back-end defaults to the
@code{org-texinfo-default-class}.

If an Org headline's level has no associated Texinfo structuring command, or
is below a certain threshold (@pxref{Export settings}), then the Texinfo
export back-end makes it into a list item.

@cindex property, @code{APPENDIX}
The Texinfo export back-end makes any headline with a non-@code{nil}
@code{:APPENDIX:} property into an appendix.  This happens independent of the
Org headline level or the @code{#+TEXINFO_CLASS}.

@cindex property, @code{DESCRIPTION}
The Texinfo export back-end creates a menu entry after the Org headline for
each regular sectioning structure.  To override this with a shorter menu
entry, use the @code{:ALT_TITLE:} property (@pxref{Table of contents}).
Texinfo menu entries also have an option for a longer @code{:DESCRIPTION:}
property.  Here's an example that uses both to override the default menu
entry:

@example
* Controlling Screen Display
  :PROPERTIES:
  :ALT_TITLE: Display
  :DESCRIPTION: Controlling Screen Display
  :END:
@end example

@cindex The Top node, in Texinfo export
@cindex Texinfo export, Top node
The text before the first headline belongs to the @samp{Top} node, i.e., the
node in which a reader enters an Info manual.  As such, it is expected not to
appear in printed output generated from the @file{.texi} file.  @inforef{The
Top Node,,texinfo}, for more information.

@node Indices
@subsection Indices

@cindex @code{#+CINDEX}
@cindex concept index, in Texinfo export
@cindex Texinfo export, index, concept
@cindex @code{#+FINDEX}
@cindex function index, in Texinfo export
@cindex Texinfo export, index, function
@cindex @code{#+KINDEX}
@cindex keystroke index, in Texinfo export
@cindex Texinfo export, keystroke index
@cindex @code{#+PINDEX}
@cindex program index, in Texinfo export
@cindex Texinfo export, program index
@cindex @code{#+TINDEX}
@cindex data type index, in Texinfo export
@cindex Texinfo export, data type index
@cindex @code{#+VINDEX}
@cindex variable index, in Texinfo export
@cindex Texinfo export, variable index
The Texinfo export back-end recognizes these indexing keywords if used in the
Org file: @code{#+CINDEX}, @code{#+FINDEX}, @code{#+KINDEX}, @code{#+PINDEX},
@code{#+TINDEX}, and @code{#+VINDEX}.  Write their value as verbatim Texinfo
code; in particular, @samp{@{}, @samp{@}} and @samp{@@} characters need to be
escaped with @samp{@@} if they not belong to a Texinfo command.

@example
#+CINDEX: Defining indexing entries
@end example

@cindex property, @code{INDEX}
For the back-end to generate an index entry for a headline, set the
@code{:INDEX:} property to @samp{cp} or @samp{vr}.  These abbreviations come
from Texinfo that stand for concept index and variable index.  The Texinfo
manual has abbreviations for all other kinds of indexes.  The back-end
exports the headline as an unnumbered chapter or section command, and then
inserts the index after its contents.

@example
* Concept Index
  :PROPERTIES:
  :INDEX: cp
  :END:
@end example

@node Quoting Texinfo code
@subsection Quoting Texinfo code

Use any of the following three methods to insert or escape raw Texinfo code:

@cindex @code{#+TEXINFO}
@cindex @code{#+BEGIN_EXPORT texinfo}
@example
Richard @@@@texinfo:@@sc@{@@@@Stallman@@@@texinfo:@}@@@@ commence' GNU.

#+TEXINFO: @@need800
This paragraph is preceded by...

#+BEGIN_EXPORT texinfo
@@auindex Johnson, Mark
@@auindex Lakoff, George
#+END_EXPORT
@end example

@node Plain lists in Texinfo export
@subsection Plain lists in Texinfo export
@cindex @code{#+ATTR_TEXINFO}, in plain lists
@cindex Two-column tables, in Texinfo export

@cindex @code{:table-type} attribute, in Texinfo export
The Texinfo export back-end by default converts description lists in the Org
file using the default command @code{@@table}, which results in a table with
two columns.  To change this behavior, specify @code{:table-type} with
@code{ftable} or @code{vtable} attributes.  For more information,
@inforef{Two-column Tables,,texinfo}.

@vindex org-texinfo-table-default-markup
@cindex @code{:indic} attribute, in Texinfo export
The Texinfo export back-end by default also applies a text highlight based on
the defaults stored in @code{org-texinfo-table-default-markup}.  To override
the default highlight command, specify another one with the @code{:indic}
attribute.

@cindex Multiple entries in two-column tables, in Texinfo export
@cindex @code{:sep} attribute, in Texinfo export
Org syntax is limited to one entry per list item.  Nevertheless, the Texinfo
export back-end can split that entry according to any text provided through
the @code{:sep} attribute.  Each part then becomes a new entry in the first
column of the table.

The following example illustrates all the attributes above:

@example
#+ATTR_TEXINFO: :table-type vtable :sep , :indic asis
- foo, bar :: This is the common text for variables foo and bar.
@end example

@noindent
becomes

@example
@@vtable @@asis
@@item foo
@@itemx bar
This is the common text for variables foo and bar.
@@end table
@end example

@node Tables in Texinfo export
@subsection Tables in Texinfo export
@cindex @code{#+ATTR_TEXINFO}, in tables

When exporting tables, the Texinfo export back-end uses the widest cell width
in each column.  To override this and instead specify as fractions of line
length, use the @code{:columns} attribute.  See example below.

@example
#+ATTR_TEXINFO: :columns .5 .5
| a cell | another cell |
@end example

@node Images in Texinfo export
@subsection Images in Texinfo export
@cindex @code{#+ATTR_TEXINFO}, in images

Insert a file link to the image in the Org file, and the Texinfo export
back-end inserts the image.  These links must have the usual supported image
extensions and no descriptions.  To scale the image, use @code{:width} and
@code{:height} attributes.  For alternate text, use @code{:alt} and specify
the text using Texinfo code, as shown in the example:

@example
#+ATTR_TEXINFO: :width 1in :alt Alternate @@i@{text@}
[[ridt.pdf]]
@end example

@node Special blocks in Texinfo export
@subsection Special blocks
@cindex @code{#+ATTR_TEXINFO}, in special blocks

The Texinfo export back-end converts special blocks to commands with the same
name.  It also adds any @code{:options} attributes to the end of the command,
as shown in this example:

@example
#+ATTR_TEXINFO: :options org-org-export-to-org ...
#+begin_defun
A somewhat obsessive function.
#+end_defun
@end example

@noindent
becomes

@example
@@defun org-org-export-to-org ...
A somewhat obsessive function.
@@end defun
@end example

@node A Texinfo example
@subsection A Texinfo example

Here is a more detailed example Org file.  See @ref{GNU Sample
Texts,,,texinfo,GNU Texinfo Manual} for an equivalent example using Texinfo
code.

@example
#+TITLE: GNU Sample @{@{@{version@}@}@}
#+SUBTITLE: for version @{@{@{version@}@}@}, @{@{@{updated@}@}@}
#+AUTHOR: A.U. Thor
#+EMAIL: bug-sample@@gnu.org

#+OPTIONS: ':t toc:t author:t email:t
#+LANGUAGE: en

#+MACRO: version 2.0
#+MACRO: updated last updated 4 March 2014

#+TEXINFO_FILENAME: sample.info
#+TEXINFO_HEADER: @@syncodeindex pg cp

#+TEXINFO_DIR_CATEGORY: Texinfo documentation system
#+TEXINFO_DIR_TITLE: sample: (sample)
#+TEXINFO_DIR_DESC: Invoking sample

#+TEXINFO_PRINTED_TITLE: GNU Sample

This manual is for GNU Sample (version @{@{@{version@}@}@},
@{@{@{updated@}@}@}).

* Copying
  :PROPERTIES:
  :COPYING:  t
  :END:

  This manual is for GNU Sample (version @{@{@{version@}@}@},
  @{@{@{updated@}@}@}), which is an example in the Texinfo documentation.

  Copyright \copy 2018 Free Software Foundation, Inc.

  #+BEGIN_QUOTE
  Permission is granted to copy, distribute and/or modify this
  document under the terms of the GNU Free Documentation License,
  Version 1.3 or any later version published by the Free Software
  Foundation; with no Invariant Sections, with no Front-Cover Texts,
  and with no Back-Cover Texts.  A copy of the license is included in
  the section entitled "GNU Free Documentation License".
  #+END_QUOTE

* Invoking sample

  #+PINDEX: sample
  #+CINDEX: invoking @@command@{sample@}

  This is a sample manual.  There is no sample program to invoke, but
  if there were, you could see its basic usage and command line
  options here.

* GNU Free Documentation License
  :PROPERTIES:
  :APPENDIX: t
  :END:

  #+TEXINFO: @@include fdl.texi

* Index
  :PROPERTIES:
  :INDEX:    cp
  :END:
@end example

@node iCalendar export
@section iCalendar export
@cindex iCalendar export

@vindex org-icalendar-include-todo
@vindex org-icalendar-use-deadline
@vindex org-icalendar-use-scheduled
@vindex org-icalendar-categories
@vindex org-icalendar-alarm-time
A large part of Org mode's inter-operability success is its ability to easily
export to or import from external applications.  The iCalendar export
back-end takes calendar data from Org files and exports to the standard
iCalendar format.

The iCalendar export back-end can also incorporate TODO entries based on the
configuration of the @code{org-icalendar-include-todo} variable.  The
back-end exports plain timestamps as VEVENT, TODO items as VTODO, and also
create events from deadlines that are in non-TODO items.  The back-end uses
the deadlines and scheduling dates in Org TODO items for setting the start
and due dates for the iCalendar TODO entry.  Consult the
@code{org-icalendar-use-deadline} and @code{org-icalendar-use-scheduled}
variables for more details.

For tags on the headline, the iCalendar export back-end makes them into
iCalendar categories.  To tweak the inheritance of tags and TODO states,
configure the variable @code{org-icalendar-categories}.  To assign clock
alarms based on time, configure the @code{org-icalendar-alarm-time} variable.

@vindex org-icalendar-store-UID
@cindex property, @code{ID}
The iCalendar format standard requires globally unique identifier---UID---for
each entry.  The iCalendar export back-end creates UIDs during export.  To
save a copy of the UID in the Org file set the variable
@code{org-icalendar-store-UID}.  The back-end looks for the @code{:ID:}
property of the entry for re-using the same UID for subsequent exports.

Since a single Org entry can result in multiple iCalendar entries---as
timestamp, deadline, scheduled item, or TODO item---Org adds prefixes to the
UID, depending on which part of the Org entry triggered the creation of the
iCalendar entry.  Prefixing ensures UIDs remains unique, yet enable
synchronization programs trace the connections.

@table @kbd
@orgcmd{C-c C-e c f,org-icalendar-export-to-ics}
Create iCalendar entries from the current Org buffer and store them in the
same directory, using a file extension @file{.ics}.
@orgcmd{C-c C-e c a, org-icalendar-export-agenda-files}
@vindex org-agenda-files
Create iCalendar entries from Org files in @code{org-agenda-files} and store
in a separate iCalendar file for each Org file.
@orgcmd{C-c C-e c c,org-icalendar-combine-agenda-files}
@vindex org-icalendar-combined-agenda-file
Create a combined iCalendar file from Org files in @code{org-agenda-files}
and write it to @code{org-icalendar-combined-agenda-file} file name.
@end table

@vindex org-use-property-inheritance
@vindex org-icalendar-include-body
@cindex property, @code{SUMMARY}
@cindex property, @code{DESCRIPTION}
@cindex property, @code{LOCATION}
@cindex property, @code{TIMEZONE}
The iCalendar export back-end includes @code{SUMMARY}, @code{DESCRIPTION},
@code{LOCATION} and @code{TIMEZONE} properties from the Org entries when
exporting.  To force the back-end to inherit the @code{LOCATION} and
@code{TIMEZONE} properties, configure the @code{org-use-property-inheritance}
variable.

When Org entries do not have @code{SUMMARY}, @code{DESCRIPTION} and
@code{LOCATION} properties, the iCalendar export back-end derives the summary
from the headline, and derives the description from the body of the Org item.
The @code{org-icalendar-include-body} variable limits the maximum number of
characters of the content are turned into its description.

The @code{TIMEZONE} property can be used to specify a per-entry time zone,
and will be applied to any entry with timestamp information.  Time zones
should be specified as per the IANA time zone database format, e.g.@:
``Asia/Almaty''.  Alternately, the property value can be ``UTC'', to force
UTC time for this entry only.

Exporting to iCalendar format depends in large part on the capabilities of
the destination application.  Some are more lenient than others.  Consult the
Org mode FAQ for advice on specific applications.

@node Other built-in back-ends
@section Other built-in back-ends
@cindex export back-ends, built-in
@vindex org-export-backends

Other export back-ends included with Org are:

@itemize
@item @file{ox-man.el}: export to a man page.
@end itemize

To activate such back-ends, either customize @code{org-export-backends} or
load directly with @code{(require 'ox-man)}.  On successful load, the
back-end adds new keys in the export dispatcher (@pxref{The export
dispatcher}).

Follow the comment section of such files, for example, @file{ox-man.el}, for
usage and configuration details.

@node Advanced configuration
@section Advanced configuration

@subheading Hooks

@vindex org-export-before-processing-hook
@vindex org-export-before-parsing-hook
The export process executes two hooks before the actual exporting begins.
The first hook, @code{org-export-before-processing-hook}, runs before any
expansions of macros, Babel code, and include keywords in the buffer.  The
second hook, @code{org-export-before-parsing-hook}, runs before the buffer is
parsed.  Both hooks are specified as functions, see example below.  Their main
use is for heavy duty structural modifications of the Org content.  For
example, removing every headline in the buffer during export:

@lisp
@group
(defun my-headline-removal (backend)
  "Remove all headlines in the current buffer.
BACKEND is the export back-end being used, as a symbol."
  (org-map-entries
   (lambda () (delete-region (point) (progn (forward-line) (point))))))

(add-hook 'org-export-before-parsing-hook 'my-headline-removal)
@end group
@end lisp

Note that the hook function must have a mandatory argument that is a symbol
for the back-end.

@subheading Filters

@cindex Filters, exporting
The Org export process relies on filters to process specific parts of
conversion process.  Filters are just lists of functions to be applied to
certain parts for a given back-end.  The output from the first function in
the filter is passed on to the next function in the filter.  The final output
is the output from the final function in the filter.

The Org export process has many filter sets applicable to different types of
objects, plain text, parse trees, export options, and final output formats.
The filters are named after the element type or object type:
@code{org-export-filter-TYPE-functions}, where @code{TYPE} is the type
targeted by the filter.  Valid types are:

@multitable @columnfractions .33 .33 .33
@item body
@tab bold
@tab babel-call
@item center-block
@tab clock
@tab code
@item diary-sexp
@tab drawer
@tab dynamic-block
@item entity
@tab example-block
@tab export-block
@item export-snippet
@tab final-output
@tab fixed-width
@item footnote-definition
@tab footnote-reference
@tab headline
@item horizontal-rule
@tab inline-babel-call
@tab inline-src-block
@item inlinetask
@tab italic
@tab item
@item keyword
@tab latex-environment
@tab latex-fragment
@item line-break
@tab link
@tab node-property
@item options
@tab paragraph
@tab parse-tree
@item plain-list
@tab plain-text
@tab planning
@item property-drawer
@tab quote-block
@tab radio-target
@item section
@tab special-block
@tab src-block
@item statistics-cookie
@tab strike-through
@tab subscript
@item superscript
@tab table
@tab table-cell
@item table-row
@tab target
@tab timestamp
@item underline
@tab verbatim
@tab verse-block
@end multitable

Here is an example filter that replaces non-breaking spaces @code{~} in the
Org buffer with @code{_} for the @LaTeX{} back-end.

@lisp
@group
(defun my-latex-filter-nobreaks (text backend info)
  "Ensure \"_\" are properly handled in LaTeX export."
  (when (org-export-derived-backend-p backend 'latex)
        (replace-regexp-in-string "_" "~" text)))

(add-to-list 'org-export-filter-plain-text-functions
             'my-latex-filter-nobreaks)
@end group
@end lisp

A filter requires three arguments: the code to be transformed, the name of
the back-end, and some optional information about the export process.  The
third argument can be safely ignored.  Note the use of
@code{org-export-derived-backend-p} predicate that tests for @code{latex}
back-end or any other back-end, such as @code{beamer}, derived from
@code{latex}.

@subheading Defining filters for individual files

The Org export can filter not just for back-ends, but also for specific files
through the @code{#+BIND} keyword.  Here is an example with two filters; one
removes brackets from time stamps, and the other removes strike-through text.
The filter functions are defined in a @samp{src} code block in the same Org
file, which is a handy location for debugging.

@example
#+BIND: org-export-filter-timestamp-functions (tmp-f-timestamp)
#+BIND: org-export-filter-strike-through-functions (tmp-f-strike-through)
#+begin_src emacs-lisp :exports results :results none
  (defun tmp-f-timestamp (s backend info)
    (replace-regexp-in-string "&[lg]t;\\|[][]" "" s))
  (defun tmp-f-strike-through (s backend info) "")
#+end_src
@end example

@subheading Extending an existing back-end

Some parts of the conversion process can be extended for certain elements so
as to introduce a new or revised translation.  That is how the HTML export
back-end was extended to handle Markdown format.  The extensions work
seamlessly so any aspect of filtering not done by the extended back-end is
handled by the original back-end.  Of all the export customization in Org,
extending is very powerful as it operates at the parser level.

For this example, make the @code{ascii} back-end display the language used in
a source code block.  Also make it display only when some attribute is
non-@code{nil}, like the following:

@example
#+ATTR_ASCII: :language t
@end example

Then extend @code{ascii} back-end with a custom @code{my-ascii} back-end.

@lisp
@group
(defun my-ascii-src-block (src-block contents info)
  "Transcode a SRC-BLOCK element from Org to ASCII.
CONTENTS is nil.  INFO is a plist used as a communication
channel."
  (if (not (org-export-read-attribute :attr_ascii src-block :language))
    (org-export-with-backend 'ascii src-block contents info)
  (concat
   (format ",--[ %s ]--\n%s`----"
           (org-element-property :language src-block)
           (replace-regexp-in-string
            "^" "| "
            (org-element-normalize-string
             (org-export-format-code-default src-block info)))))))

(org-export-define-derived-backend 'my-ascii 'ascii
  :translate-alist '((src-block . my-ascii-src-block)))
@end group
@end lisp

The @code{my-ascii-src-block} function looks at the attribute above the
current element.  If not true, hands over to @code{ascii} back-end.  If true,
which it is in this example, it creates a box around the code and leaves room
for the inserting a string for language.  The last form creates the new
back-end that springs to action only when translating @code{src-block} type
elements.

To use the newly defined back-end, call the following from an Org buffer:

@smalllisp
(org-export-to-buffer 'my-ascii "*Org MY-ASCII Export*")
@end smalllisp

Further steps to consider would be an interactive function, self-installing
an item in the export dispatcher menu, and other user-friendly improvements.

@node Export in foreign buffers
@section Export in foreign buffers

The export back-ends in Org often include commands to convert selected
regions.  A convenient feature of this in-place conversion is that the
exported output replaces the original source.  Here are such functions:

@table @code
@item org-html-convert-region-to-html
Convert the selected region into HTML.
@item org-latex-convert-region-to-latex
Convert the selected region into @LaTeX{}.
@item org-texinfo-convert-region-to-texinfo
Convert the selected region into @code{Texinfo}.
@item org-md-convert-region-to-md
Convert the selected region into @code{MarkDown}.
@end table

In-place conversions are particularly handy for quick conversion of tables
and lists in foreign buffers.  For example, turn on the minor mode @code{M-x
orgstruct-mode} in an HTML buffer, then use the convenient Org keyboard
commands to create a list, select it, and covert it to HTML with @code{M-x
org-html-convert-region-to-html @key{RET}}.


@node Publishing
@chapter Publishing
@cindex publishing

Org includes a publishing management system that allows you to configure
automatic HTML conversion of @emph{projects} composed of interlinked org
files.  You can also configure Org to automatically upload your exported HTML
pages and related attachments, such as images and source code files, to a web
server.

You can also use Org to convert files into PDF, or even combine HTML and PDF
conversion so that files are available in both formats on the server.

Publishing has been contributed to Org by David O'Toole.

@menu
* Configuration::               Defining projects
* Uploading files::             How to get files up on the server
* Sample configuration::        Example projects
* Triggering publication::      Publication commands
@end menu

@node Configuration
@section Configuration

Publishing needs significant configuration to specify files, destination
and many other properties of a project.

@menu
* Project alist::               The central configuration variable
* Sources and destinations::    From here to there
* Selecting files::             What files are part of the project?
* Publishing action::           Setting the function doing the publishing
* Publishing options::          Tweaking HTML/@LaTeX{} export
* Publishing links::            Which links keep working after publishing?
* Sitemap::                     Generating a list of all pages
* Generating an index::         An index that reaches across pages
@end menu

@node Project alist
@subsection The variable @code{org-publish-project-alist}
@cindex @code{org-publish-project-alist}
@cindex projects, for publishing

@vindex org-publish-project-alist
Publishing is configured almost entirely through setting the value of one
variable, called @code{org-publish-project-alist}.  Each element of the list
configures one project, and may be in one of the two following forms:

@lisp
   ("project-name" :property value :property value ...)
     @r{i.e., a well-formed property list with alternating keys and values}
@r{or}
   ("project-name" :components ("project-name" "project-name" ...))

@end lisp

In both cases, projects are configured by specifying property values.  A
project defines the set of files that will be published, as well as the
publishing configuration to use when publishing those files.  When a project
takes the second form listed above, the individual members of the
@code{:components} property are taken to be sub-projects, which group
together files requiring different publishing options.  When you publish such
a ``meta-project'', all the components will also be published, in the
sequence given.

@node Sources and destinations
@subsection Sources and destinations for files
@cindex directories, for publishing

Most properties are optional, but some should always be set.  In
particular, Org needs to know where to look for source files,
and where to put published files.

@multitable @columnfractions 0.3 0.7
@item @code{:base-directory}
@tab Directory containing publishing source files
@item @code{:publishing-directory}
@tab Directory where output files will be published.  You can directly
publish to a web server using a file name syntax appropriate for
the Emacs @file{tramp} package.  Or you can publish to a local directory and
use external tools to upload your website (@pxref{Uploading files}).
@item @code{:preparation-function}
@tab Function or list of functions to be called before starting the
publishing process, for example, to run @code{make} for updating files to be
published.  Each preparation function is called with a single argument, the
project property list.
@item @code{:completion-function}
@tab Function or list of functions called after finishing the publishing
process, for example, to change permissions of the resulting files.  Each
completion function is called with a single argument, the project property
list.
@end multitable
@noindent

@node Selecting files
@subsection Selecting files
@cindex files, selecting for publishing

By default, all files with extension @file{.org} in the base directory
are considered part of the project.  This can be modified by setting the
properties
@multitable @columnfractions 0.25 0.75
@item @code{:base-extension}
@tab Extension (without the dot!) of source files.  This actually is a
regular expression.  Set this to the symbol @code{any} if you want to get all
files in @code{:base-directory}, even without extension.

@item @code{:exclude}
@tab Regular expression to match file names that should not be
published, even though they have been selected on the basis of their
extension.

@item @code{:include}
@tab List of files to be included regardless of @code{:base-extension}
and @code{:exclude}.

@item @code{:recursive}
@tab non-@code{nil} means, check base-directory recursively for files to publish.
@end multitable

@node Publishing action
@subsection Publishing action
@cindex action, for publishing

Publishing means that a file is copied to the destination directory and
possibly transformed in the process.  The default transformation is to export
Org files as HTML files, and this is done by the function
@code{org-html-publish-to-html}, which calls the HTML exporter (@pxref{HTML
export}).  But you also can publish your content as PDF files using
@code{org-latex-publish-to-pdf} or as @code{ascii}, @code{Texinfo}, etc.,
using the corresponding functions.

If you want to publish the Org file as an @code{.org} file but with the
@i{archived}, @i{commented} and @i{tag-excluded} trees removed, use the
function @code{org-org-publish-to-org}.  This will produce @file{file.org}
and put it in the publishing directory.  If you want a htmlized version of
this file, set the parameter @code{:htmlized-source} to @code{t}, it will
produce @file{file.org.html} in the publishing directory@footnote{If the
publishing directory is the same than the source directory, @file{file.org}
will be exported as @file{file.org.org}, so probably don't want to do this.}.

Other files like images only need to be copied to the publishing destination.
For this you can use @code{org-publish-attachment}.  For non-org files, you
always need to specify the publishing function:

@multitable @columnfractions 0.3 0.7
@item @code{:publishing-function}
@tab Function executing the publication of a file.  This may also be a
list of functions, which will all be called in turn.
@item @code{:htmlized-source}
@tab non-@code{nil} means, publish htmlized source.
@end multitable

The function must accept three arguments: a property list containing at least
a @code{:publishing-directory} property, the name of the file to be published
and the path to the publishing directory of the output file.  It should take
the specified file, make the necessary transformation (if any) and place the
result into the destination folder.

@node Publishing options
@subsection Options for the exporters
@cindex options, for publishing

The property list can be used to set export options during the publishing
process.  In most cases, these properties correspond to user variables in
Org.  While some properties are available for all export back-ends, most of
them are back-end specific.  The following sections list properties along
with the variable they belong to.  See the documentation string of these
options for details.

@vindex org-publish-project-alist
When a property is given a value in @code{org-publish-project-alist}, its
setting overrides the value of the corresponding user variable (if any)
during publishing.  Options set within a file (@pxref{Export settings}),
however, override everything.

@subsubheading Generic properties

@multitable {@code{:with-sub-superscript}}  {@code{org-export-with-sub-superscripts}}
@item @code{:archived-trees}        @tab @code{org-export-with-archived-trees}
@item @code{:exclude-tags}          @tab @code{org-export-exclude-tags}
@item @code{:headline-levels}       @tab @code{org-export-headline-levels}
@item @code{:language}              @tab @code{org-export-default-language}
@item @code{:preserve-breaks}       @tab @code{org-export-preserve-breaks}
@item @code{:section-numbers}       @tab @code{org-export-with-section-numbers}
@item @code{:select-tags}           @tab @code{org-export-select-tags}
@item @code{:with-author}           @tab @code{org-export-with-author}
@item @code{:with-broken-links}     @tab @code{org-export-with-broken-links}
@item @code{:with-clocks}           @tab @code{org-export-with-clocks}
@item @code{:with-creator}          @tab @code{org-export-with-creator}
@item @code{:with-date}             @tab @code{org-export-with-date}
@item @code{:with-drawers}          @tab @code{org-export-with-drawers}
@item @code{:with-email}            @tab @code{org-export-with-email}
@item @code{:with-emphasize}        @tab @code{org-export-with-emphasize}
@item @code{:with-fixed-width}      @tab @code{org-export-with-fixed-width}
@item @code{:with-footnotes}        @tab @code{org-export-with-footnotes}
@item @code{:with-latex}            @tab @code{org-export-with-latex}
@item @code{:with-planning}         @tab @code{org-export-with-planning}
@item @code{:with-priority}         @tab @code{org-export-with-priority}
@item @code{:with-properties}       @tab @code{org-export-with-properties}
@item @code{:with-special-strings}  @tab @code{org-export-with-special-strings}
@item @code{:with-sub-superscript}  @tab @code{org-export-with-sub-superscripts}
@item @code{:with-tables}           @tab @code{org-export-with-tables}
@item @code{:with-tags}             @tab @code{org-export-with-tags}
@item @code{:with-tasks}            @tab @code{org-export-with-tasks}
@item @code{:with-timestamps}       @tab @code{org-export-with-timestamps}
@item @code{:with-title}            @tab @code{org-export-with-title}
@item @code{:with-toc}              @tab @code{org-export-with-toc}
@item @code{:with-todo-keywords}    @tab @code{org-export-with-todo-keywords}
@end multitable

@subsubheading ASCII specific properties

@multitable {@code{:ascii-table-keep-all-vertical-lines}} {@code{org-ascii-table-keep-all-vertical-lines}}
@item @code{:ascii-bullets}                       @tab @code{org-ascii-bullets}
@item @code{:ascii-caption-above}                 @tab @code{org-ascii-caption-above}
@item @code{:ascii-charset}                       @tab @code{org-ascii-charset}
@item @code{:ascii-global-margin}                 @tab @code{org-ascii-global-margin}
@item @code{:ascii-format-drawer-function}        @tab @code{org-ascii-format-drawer-function}
@item @code{:ascii-format-inlinetask-function}    @tab @code{org-ascii-format-inlinetask-function}
@item @code{:ascii-headline-spacing}              @tab @code{org-ascii-headline-spacing}
@item @code{:ascii-indented-line-width}           @tab @code{org-ascii-indented-line-width}
@item @code{:ascii-inlinetask-width}              @tab @code{org-ascii-inlinetask-width}
@item @code{:ascii-inner-margin}                  @tab @code{org-ascii-inner-margin}
@item @code{:ascii-links-to-notes}                @tab @code{org-ascii-links-to-notes}
@item @code{:ascii-list-margin}                   @tab @code{org-ascii-list-margin}
@item @code{:ascii-paragraph-spacing}             @tab @code{org-ascii-paragraph-spacing}
@item @code{:ascii-quote-margin}                  @tab @code{org-ascii-quote-margin}
@item @code{:ascii-table-keep-all-vertical-lines} @tab @code{org-ascii-table-keep-all-vertical-lines}
@item @code{:ascii-table-use-ascii-art}           @tab @code{org-ascii-table-use-ascii-art}
@item @code{:ascii-table-widen-columns}           @tab @code{org-ascii-table-widen-columns}
@item @code{:ascii-text-width}                    @tab @code{org-ascii-text-width}
@item @code{:ascii-underline}                     @tab @code{org-ascii-underline}
@item @code{:ascii-verbatim-format}               @tab @code{org-ascii-verbatim-format}
@end multitable

@subsubheading Beamer specific properties

@multitable {@code{:beamer-frame-default-options}} {@code{org-beamer-frame-default-options}}
@item @code{:beamer-theme}                 @tab @code{org-beamer-theme}
@item @code{:beamer-column-view-format}    @tab @code{org-beamer-column-view-format}
@item @code{:beamer-environments-extra}    @tab @code{org-beamer-environments-extra}
@item @code{:beamer-frame-default-options} @tab @code{org-beamer-frame-default-options}
@item @code{:beamer-outline-frame-options} @tab @code{org-beamer-outline-frame-options}
@item @code{:beamer-outline-frame-title}   @tab @code{org-beamer-outline-frame-title}
@item @code{:beamer-subtitle-format}       @tab @code{org-beamer-subtitle-format}
@end multitable

@subsubheading HTML specific properties

@multitable {@code{:html-table-use-header-tags-for-first-column}} {@code{org-html-table-use-header-tags-for-first-column}}
@item @code{:html-allow-name-attribute-in-anchors} @tab @code{org-html-allow-name-attribute-in-anchors}
@item @code{:html-checkbox-type}              @tab @code{org-html-checkbox-type}
@item @code{:html-container}                  @tab @code{org-html-container-element}
@item @code{:html-divs}                       @tab @code{org-html-divs}
@item @code{:html-doctype}                    @tab @code{org-html-doctype}
@item @code{:html-extension}                  @tab @code{org-html-extension}
@item @code{:html-footnote-format}            @tab @code{org-html-footnote-format}
@item @code{:html-footnote-separator}         @tab @code{org-html-footnote-separator}
@item @code{:html-footnotes-section}          @tab @code{org-html-footnotes-section}
@item @code{:html-format-drawer-function}     @tab @code{org-html-format-drawer-function}
@item @code{:html-format-headline-function}   @tab @code{org-html-format-headline-function}
@item @code{:html-format-inlinetask-function} @tab @code{org-html-format-inlinetask-function}
@item @code{:html-head-extra}                 @tab @code{org-html-head-extra}
@item @code{:html-head-include-default-style} @tab @code{org-html-head-include-default-style}
@item @code{:html-head-include-scripts}       @tab @code{org-html-head-include-scripts}
@item @code{:html-head}                       @tab @code{org-html-head}
@item @code{:html-home/up-format}             @tab @code{org-html-home/up-format}
@item @code{:html-html5-fancy}                @tab @code{org-html-html5-fancy}
@item @code{:html-indent}                     @tab @code{org-html-indent}
@item @code{:html-infojs-options}             @tab @code{org-html-infojs-options}
@item @code{:html-infojs-template}            @tab @code{org-html-infojs-template}
@item @code{:html-inline-image-rules}         @tab @code{org-html-inline-image-rules}
@item @code{:html-inline-images}              @tab @code{org-html-inline-images}
@item @code{:html-link-home}                  @tab @code{org-html-link-home}
@item @code{:html-link-org-files-as-html}     @tab @code{org-html-link-org-files-as-html}
@item @code{:html-link-up}                    @tab @code{org-html-link-up}
@item @code{:html-link-use-abs-url}           @tab @code{org-html-link-use-abs-url}
@item @code{:html-mathjax-options}            @tab @code{org-html-mathjax-options}
@item @code{:html-mathjax-template}           @tab @code{org-html-mathjax-template}
@item @code{:html-metadata-timestamp-format}  @tab @code{org-html-metadata-timestamp-format}
@item @code{:html-postamble-format}           @tab @code{org-html-postamble-format}
@item @code{:html-postamble}                  @tab @code{org-html-postamble}
@item @code{:html-preamble-format}            @tab @code{org-html-preamble-format}
@item @code{:html-preamble}                   @tab @code{org-html-preamble}
@item @code{:html-table-align-individual-fields} @tab @code{org-html-table-align-individual-fields}
@item @code{:html-table-attributes}           @tab @code{org-html-table-default-attributes}
@item @code{:html-table-caption-above}        @tab @code{org-html-table-caption-above}
@item @code{:html-table-data-tags}            @tab @code{org-html-table-data-tags}
@item @code{:html-table-header-tags}          @tab @code{org-html-table-header-tags}
@item @code{:html-table-row-tags}             @tab @code{org-html-table-row-tags}
@item @code{:html-table-use-header-tags-for-first-column} @tab @code{org-html-table-use-header-tags-for-first-column}
@item @code{:html-tag-class-prefix}           @tab @code{org-html-tag-class-prefix}
@item @code{:html-text-markup-alist}          @tab @code{org-html-text-markup-alist}
@item @code{:html-todo-kwd-class-prefix}      @tab @code{org-html-todo-kwd-class-prefix}
@item @code{:html-toplevel-hlevel}            @tab @code{org-html-toplevel-hlevel}
@item @code{:html-use-infojs}                 @tab @code{org-html-use-infojs}
@item @code{:html-validation-link}            @tab @code{org-html-validation-link}
@item @code{:html-viewport}                   @tab @code{org-html-viewport}
@item @code{:html-xml-declaration}            @tab @code{org-html-xml-declaration}
@end multitable

@subsubheading @LaTeX{} specific properties

@multitable {@code{:latex-link-with-unknown-path-format}} {@code{org-latex-link-with-unknown-path-format}}
@item @code{:latex-active-timestamp-format}    @tab @code{org-latex-active-timestamp-format}
@item @code{:latex-caption-above}              @tab @code{org-latex-caption-above}
@item @code{:latex-classes}                    @tab @code{org-latex-classes}
@item @code{:latex-class}                      @tab @code{org-latex-default-class}
@item @code{:latex-compiler}                   @tab @code{org-latex-compiler}
@item @code{:latex-default-figure-position}    @tab @code{org-latex-default-figure-position}
@item @code{:latex-default-table-environment}  @tab @code{org-latex-default-table-environment}
@item @code{:latex-default-table-mode}         @tab @code{org-latex-default-table-mode}
@item @code{:latex-diary-timestamp-format}     @tab @code{org-latex-diary-timestamp-format}
@item @code{:latex-footnote-defined-format}    @tab @code{org-latex-footnote-defined-format}
@item @code{:latex-footnote-separator}         @tab @code{org-latex-footnote-separator}
@item @code{:latex-format-drawer-function}     @tab @code{org-latex-format-drawer-function}
@item @code{:latex-format-headline-function}   @tab @code{org-latex-format-headline-function}
@item @code{:latex-format-inlinetask-function} @tab @code{org-latex-format-inlinetask-function}
@item @code{:latex-hyperref-template}          @tab @code{org-latex-hyperref-template}
@item @code{:latex-image-default-height}       @tab @code{org-latex-image-default-height}
@item @code{:latex-image-default-option}       @tab @code{org-latex-image-default-option}
@item @code{:latex-image-default-width}        @tab @code{org-latex-image-default-width}
@item @code{:latex-images-centered}            @tab @code{org-latex-images-centered}
@item @code{:latex-inactive-timestamp-format}  @tab @code{org-latex-inactive-timestamp-format}
@item @code{:latex-inline-image-rules}         @tab @code{org-latex-inline-image-rules}
@item @code{:latex-link-with-unknown-path-format} @tab @code{org-latex-link-with-unknown-path-format}
@item @code{:latex-listings-langs}             @tab @code{org-latex-listings-langs}
@item @code{:latex-listings-options}           @tab @code{org-latex-listings-options}
@item @code{:latex-listings}                   @tab @code{org-latex-listings}
@item @code{:latex-minted-langs}               @tab @code{org-latex-minted-langs}
@item @code{:latex-minted-options}             @tab @code{org-latex-minted-options}
@item @code{:latex-prefer-user-labels}         @tab @code{org-latex-prefer-user-labels}
@item @code{:latex-subtitle-format}            @tab @code{org-latex-subtitle-format}
@item @code{:latex-subtitle-separate}          @tab @code{org-latex-subtitle-separate}
@item @code{:latex-table-scientific-notation}  @tab @code{org-latex-table-scientific-notation}
@item @code{:latex-tables-booktabs}            @tab @code{org-latex-tables-booktabs}
@item @code{:latex-tables-centered}            @tab @code{org-latex-tables-centered}
@item @code{:latex-text-markup-alist}          @tab @code{org-latex-text-markup-alist}
@item @code{:latex-title-command}              @tab @code{org-latex-title-command}
@item @code{:latex-toc-command}                @tab @code{org-latex-toc-command}
@end multitable

@subsubheading Markdown specific properties

@multitable {@code{:md-footnotes-section}} {@code{org-md-footnotes-section}}
@item @code{:md-footnote-format} @tab @code{org-md-footnote-format}
@item @code{:md-footnotes-section} @tab @code{org-md-footnotes-section}
@item @code{:md-headline-style} @tab @code{org-md-headline-style}
@end multitable

@subsubheading ODT specific properties

@multitable {@code{:odt-format-inlinetask-function}} {@code{org-odt-format-inlinetask-function}}
@item @code{:odt-content-template-file}      @tab @code{org-odt-content-template-file}
@item @code{:odt-display-outline-level}      @tab @code{org-odt-display-outline-level}
@item @code{:odt-fontify-srcblocks}          @tab @code{org-odt-fontify-srcblocks}
@item @code{:odt-format-drawer-function}     @tab @code{org-odt-format-drawer-function}
@item @code{:odt-format-headline-function}   @tab @code{org-odt-format-headline-function}
@item @code{:odt-format-inlinetask-function} @tab @code{org-odt-format-inlinetask-function}
@item @code{:odt-inline-formula-rules}       @tab @code{org-odt-inline-formula-rules}
@item @code{:odt-inline-image-rules}         @tab @code{org-odt-inline-image-rules}
@item @code{:odt-pixels-per-inch}            @tab @code{org-odt-pixels-per-inch}
@item @code{:odt-styles-file}                @tab @code{org-odt-styles-file}
@item @code{:odt-table-styles}               @tab @code{org-odt-table-styles}
@item @code{:odt-use-date-fields}            @tab @code{org-odt-use-date-fields}
@end multitable

@subsubheading Texinfo specific properties

@multitable {@code{:texinfo-link-with-unknown-path-format}} {@code{org-texinfo-link-with-unknown-path-format}}
@item @code{:texinfo-active-timestamp-format}    @tab @code{org-texinfo-active-timestamp-format}
@item @code{:texinfo-classes}                    @tab @code{org-texinfo-classes}
@item @code{:texinfo-class}                      @tab @code{org-texinfo-default-class}
@item @code{:texinfo-table-default-markup}       @tab @code{org-texinfo-table-default-markup}
@item @code{:texinfo-diary-timestamp-format}     @tab @code{org-texinfo-diary-timestamp-format}
@item @code{:texinfo-filename}                   @tab @code{org-texinfo-filename}
@item @code{:texinfo-format-drawer-function}     @tab @code{org-texinfo-format-drawer-function}
@item @code{:texinfo-format-headline-function}   @tab @code{org-texinfo-format-headline-function}
@item @code{:texinfo-format-inlinetask-function} @tab @code{org-texinfo-format-inlinetask-function}
@item @code{:texinfo-inactive-timestamp-format}  @tab @code{org-texinfo-inactive-timestamp-format}
@item @code{:texinfo-link-with-unknown-path-format} @tab @code{org-texinfo-link-with-unknown-path-format}
@item @code{:texinfo-node-description-column}    @tab @code{org-texinfo-node-description-column}
@item @code{:texinfo-table-scientific-notation}  @tab @code{org-texinfo-table-scientific-notation}
@item @code{:texinfo-tables-verbatim}            @tab @code{org-texinfo-tables-verbatim}
@item @code{:texinfo-text-markup-alist}          @tab @code{org-texinfo-text-markup-alist}
@end multitable

@node Publishing links
@subsection Links between published files
@cindex links, publishing

To create a link from one Org file to another, you would use something like
@samp{[[file:foo.org][The foo]]} or simply @samp{file:foo.org}
(@pxref{External links}).  When published, this link becomes a link to
@file{foo.html}.  You can thus interlink the pages of your ``org web''
project and the links will work as expected when you publish them to HTML.
If you also publish the Org source file and want to link to it, use an
@code{http:} link instead of a @code{file:} link, because @code{file:} links
are converted to link to the corresponding @file{html} file.

You may also link to related files, such as images.  Provided you are careful
with relative file names, and provided you have also configured Org to upload
the related files, these links will work too.  See @ref{Complex example}, for
an example of this usage.

Eventually, links between published documents can contain some search options
(@pxref{Search options}), which will be resolved to the appropriate location
in the linked file.  For example, once published to HTML, the following links
all point to a dedicated anchor in @file{foo.html}.

@example
[[file:foo.org::*heading]]
[[file:foo.org::#custom-id]]
[[file:foo.org::target]]
@end example

@node Sitemap
@subsection Generating a sitemap
@cindex sitemap, of published pages

The following properties may be used to control publishing of
a map of files for a given project.

@multitable @columnfractions 0.35 0.65
@item @code{:auto-sitemap}
@tab When non-@code{nil}, publish a sitemap during @code{org-publish-current-project}
or @code{org-publish-all}.

@item @code{:sitemap-filename}
@tab Filename for output of sitemap.  Defaults to @file{sitemap.org} (which
becomes @file{sitemap.html}).

@item @code{:sitemap-title}
@tab Title of sitemap page.  Defaults to name of file.

@item @code{:sitemap-format-entry}
@tab With this option one can tell how a site-map entry is formatted in the
site-map.  It is a function called with three arguments: the file or
directory name relative to base directory of the project, the site-map style
and the current project.  It is expected to return a string.  Default value
turns file names into links and use document titles as descriptions.  For
specific formatting needs, one can use @code{org-publish-find-date},
@code{org-publish-find-title} and @code{org-publish-find-property}, to
retrieve additional information about published documents.

@item @code{:sitemap-function}
@tab Plug-in function to use for generation of the sitemap.  It is called
with two arguments: the title of the site-map and a representation of the
files and directories involved in the project as a radio list (@pxref{Radio
lists}).  The latter can further be transformed using
@code{org-list-to-generic}, @code{org-list-to-subtree} and alike.  Default
value generates a plain list of links to all files in the project.

@item @code{:sitemap-sort-folders}
@tab Where folders should appear in the sitemap.  Set this to @code{first}
(default) or @code{last} to display folders first or last, respectively.
When set to @code{ignore}, folders are ignored altogether.  Any other value
will mix files and folders.  This variable has no effect when site-map style
is @code{tree}.

@item @code{:sitemap-sort-files}
@tab How the files are sorted in the site map.  Set this to
@code{alphabetically} (default), @code{chronologically} or
@code{anti-chronologically}.  @code{chronologically} sorts the files with
older date first while @code{anti-chronologically} sorts the files with newer
date first.  @code{alphabetically} sorts the files alphabetically.  The date of
a file is retrieved with @code{org-publish-find-date}.

@item @code{:sitemap-ignore-case}
@tab Should sorting be case-sensitive?  Default @code{nil}.

@item @code{:sitemap-date-format}
@tab Format string for the @code{format-time-string} function that tells how
a sitemap entry's date is to be formatted.  This property bypasses
@code{org-publish-sitemap-date-format} which defaults to @code{%Y-%m-%d}.

@end multitable

@node Generating an index
@subsection Generating an index
@cindex index, in a publishing project

Org mode can generate an index across the files of a publishing project.

@multitable @columnfractions 0.25 0.75
@item @code{:makeindex}
@tab When non-@code{nil}, generate in index in the file @file{theindex.org} and
publish it as @file{theindex.html}.
@end multitable

The file will be created when first publishing a project with the
@code{:makeindex} set.  The file only contains a statement @code{#+INCLUDE:
"theindex.inc"}.  You can then build around this include statement by adding
a title, style information, etc.

@cindex @code{#+INDEX}
Index entries are specified with @code{#+INDEX} keyword.  An entry that
contains an exclamation mark will create a sub item.

@example
* Curriculum Vitae
#+INDEX: CV
#+INDEX: Application!CV
@end example

@node Uploading files
@section Uploading files
@cindex rsync
@cindex unison

For those people already utilizing third party sync tools such as
@command{rsync} or @command{unison}, it might be preferable not to use the built in
@i{remote} publishing facilities of Org mode which rely heavily on
Tramp.  Tramp, while very useful and powerful, tends not to be
so efficient for multiple file transfer and has been known to cause problems
under heavy usage.

Specialized synchronization utilities offer several advantages.  In addition
to timestamp comparison, they also do content and permissions/attribute
checks.  For this reason you might prefer to publish your web to a local
directory (possibly even @i{in place} with your Org files) and then use
@file{unison} or @file{rsync} to do the synchronization with the remote host.

Since Unison (for example) can be configured as to which files to transfer to
a certain remote destination, it can greatly simplify the project publishing
definition.  Simply keep all files in the correct location, process your Org
files with @code{org-publish} and let the synchronization tool do the rest.
You do not need, in this scenario, to include attachments such as @file{jpg},
@file{css} or @file{gif} files in the project definition since the 3rd party
tool syncs them.

Publishing to a local directory is also much faster than to a remote one, so
that you can afford more easily to republish entire projects.  If you set
@code{org-publish-use-timestamps-flag} to @code{nil}, you gain the main
benefit of re-including any changed external files such as source example
files you might include with @code{#+INCLUDE:}.  The timestamp mechanism in
Org is not smart enough to detect if included files have been modified.

@node Sample configuration
@section Sample configuration

Below we provide two example configurations.  The first one is a simple
project publishing only a set of Org files.  The second example is
more complex, with a multi-component project.

@menu
* Simple example::              One-component publishing
* Complex example::             A multi-component publishing example
@end menu

@node Simple example
@subsection Example: simple publishing configuration

This example publishes a set of Org files to the @file{public_html}
directory on the local machine.

@lisp
(setq org-publish-project-alist
      '(("org"
         :base-directory "~/org/"
         :publishing-directory "~/public_html"
         :publishing-function org-html-publish-to-html
         :section-numbers nil
         :with-toc nil
         :html-head "<link rel=\"stylesheet\"
                    href=\"../other/mystyle.css\"
                    type=\"text/css\"/>")))
@end lisp

@node Complex example
@subsection Example: complex publishing configuration

This more complicated example publishes an entire website, including
Org files converted to HTML, image files, Emacs Lisp source code, and
style sheets.  The publishing directory is remote and private files are
excluded.

To ensure that links are preserved, care should be taken to replicate
your directory structure on the web server, and to use relative file
paths.  For example, if your Org files are kept in @file{~/org} and your
publishable images in @file{~/images}, you would link to an image with
@c
@example
file:../images/myimage.png
@end example
@c
On the web server, the relative path to the image should be the
same.  You can accomplish this by setting up an "images" folder in the
right place on the web server, and publishing images to it.

@lisp
(setq org-publish-project-alist
      '(("orgfiles"
          :base-directory "~/org/"
          :base-extension "org"
          :publishing-directory "/ssh:user@@host:~/html/notebook/"
          :publishing-function org-html-publish-to-html
          :exclude "PrivatePage.org"   ;; regexp
          :headline-levels 3
          :section-numbers nil
          :with-toc nil
          :html-head "<link rel=\"stylesheet\"
                  href=\"../other/mystyle.css\" type=\"text/css\"/>"
          :html-preamble t)

         ("images"
          :base-directory "~/images/"
          :base-extension "jpg\\|gif\\|png"
          :publishing-directory "/ssh:user@@host:~/html/images/"
          :publishing-function org-publish-attachment)

         ("other"
          :base-directory "~/other/"
          :base-extension "css\\|el"
          :publishing-directory "/ssh:user@@host:~/html/other/"
          :publishing-function org-publish-attachment)
         ("website" :components ("orgfiles" "images" "other"))))
@end lisp

@node Triggering publication
@section Triggering publication

Once properly configured, Org can publish with the following commands:

@table @kbd
@orgcmd{C-c C-e P x,org-publish}
Prompt for a specific project and publish all files that belong to it.
@orgcmd{C-c C-e P p,org-publish-current-project}
Publish the project containing the current file.
@orgcmd{C-c C-e P f,org-publish-current-file}
Publish only the current file.
@orgcmd{C-c C-e P a,org-publish-all}
Publish every project.
@end table

@vindex org-publish-use-timestamps-flag
Org uses timestamps to track when a file has changed.  The above functions
normally only publish changed files.  You can override this and force
publishing of all files by giving a prefix argument to any of the commands
above, or by customizing the variable @code{org-publish-use-timestamps-flag}.
This may be necessary in particular if files include other files via
@code{#+SETUPFILE:} or @code{#+INCLUDE:}.


@node Working with source code
@chapter Working with source code
@cindex Schulte, Eric
@cindex Davison, Dan
@cindex source code, working with

Source code here refers to any code typed in Org mode documents.  Org can
manage source code in any Org file once such code is tagged with begin and
end markers.  Working with source code begins with tagging source code
blocks.  Tagged @samp{src} code blocks are not restricted to the preamble or
the end of an Org document; they can go anywhere---with a few exceptions,
such as not inside comments and fixed width areas.  Here's a sample
@samp{src} code block in emacs-lisp:

@example
#+BEGIN_SRC emacs-lisp
  (defun org-xor (a b)
     "Exclusive or."
     (if a (not b) b))
#+END_SRC
@end example

Org can take the code in the block between the @code{#+BEGIN_SRC} and
@code{#+END_SRC} tags, and format, compile, execute, and show the results.
Org can simplify many housekeeping tasks essential to modern code
maintenance.  That's why these blocks in Org mode literature are sometimes
referred to as @samp{live code} blocks (as compared to the static text and
documentation around it).  Users can control how @samp{live} they want each
block by tweaking the headers for compiling, execution, extraction.

Org's @samp{src} code block type is one of many block types, such as quote,
export, verse, latex, example, and verbatim.  This section pertains to
@code{src} code blocks between @code{#+BEGIN_SRC} and @code{#+END_SRC}

For editing @samp{src} code blocks, Org provides native Emacs major-modes.
That leverages the latest Emacs features for that source code language mode.

For exporting, Org can then extract @samp{src} code blocks into compilable
source files (in a conversion process known as @dfn{tangling} in literate
programming terminology).

For publishing, Org's back-ends can handle the @samp{src} code blocks and the
text for output to a variety of formats with native syntax highlighting.

For executing the source code in the @samp{src} code blocks, Org provides
facilities that glue the tasks of compiling, collecting the results of the
execution, and inserting them back to the Org file.  Besides text output,
results may include links to other data types that Emacs can handle: audio,
video, and graphics.

An important feature of Org's execution of the @samp{src} code blocks is
passing variables, functions, and results between @samp{src} blocks.  Such
interoperability uses a common syntax even if these @samp{src} blocks are in
different source code languages.  The integration extends to linking the
debugger's error messages to the line in the @samp{src} code block in the Org
file.  That should partly explain why this functionality by the original
contributors, Eric Schulte and Dan Davison, was called @samp{Org Babel}.

In literate programming, the main appeal is code and documentation
co-existing in one file.  Org mode takes this several steps further.  First
by enabling execution, and then by inserting results of that execution back
into the Org file.  Along the way, Org provides extensive formatting
features, including handling tables.  Org handles multiple source code
languages in one file, and provides a common syntax for passing variables,
functions, and results between @samp{src} code blocks.

Org mode fulfills the promise of easy verification and maintenance of
publishing reproducible research by keeping all these in the same file: text,
data, code, configuration settings of the execution environment, the results
of the execution, and associated narratives, claims, references, and internal
and external links.

Details of Org's facilities for working with source code are shown next.

@menu
* Structure of code blocks::    Code block syntax described
* Editing source code::         Language major-mode editing
* Exporting code blocks::       Export contents and/or results
* Extracting source code::      Create pure source code files
* Evaluating code blocks::      Place results of evaluation in the Org mode buffer
* Library of Babel::            Use and contribute to a library of useful code blocks
* Languages::                   List of supported code block languages
* Header arguments::            Configure code block functionality
* Results of evaluation::       How evaluation results are handled
* Noweb reference syntax::      Literate programming in Org mode
* Key bindings and useful functions::  Work quickly with code blocks
* Batch execution::             Call functions from the command line
@end menu


@node Structure of code blocks
@section Structure of code blocks
@cindex code block, structure
@cindex source code, block structure
@cindex @code{#+NAME}
@cindex @code{#+BEGIN_SRC}

Org offers two ways to structure source code in Org documents: in a
@samp{src} block, and directly inline.  Both specifications are shown below.

A @samp{src} block conforms to this structure:

@example
#+NAME: <name>
#+BEGIN_SRC <language> <switches> <header arguments>
  <body>
#+END_SRC
@end example

Org mode's templates system (@pxref{Easy templates}) speeds up creating
@samp{src} code blocks with just three keystrokes.  Do not be put-off by
having to remember the source block syntax.  Org also works with other
completion systems in Emacs, some of which predate Org and have custom
domain-specific languages for defining templates.  Regular use of templates
reduces errors, increases accuracy, and maintains consistency.

@cindex source code, inline
An inline code block conforms to this structure:

@example
src_<language>@{<body>@}
@end example

or

@example
src_<language>[<header arguments>]@{<body>@}
@end example

@table @code
@item #+NAME: <name>
Optional.  Names the @samp{src} block so it can be called, like a function,
from other @samp{src} blocks or inline blocks to evaluate or to capture the
results.  Code from other blocks, other files, and from table formulas
(@pxref{The spreadsheet}) can use the name to reference a @samp{src} block.
This naming serves the same purpose as naming Org tables.  Org mode requires
unique names.  For duplicate names, Org mode's behavior is undefined.
@cindex @code{#+NAME}
@item #+BEGIN_SRC
@item #+END_SRC
Mandatory.  They mark the start and end of a block that Org requires.  The
@code{#+BEGIN_SRC} line takes additional arguments, as described next.
@cindex begin block, end block
@item <language>
Mandatory for live code blocks.  It is the identifier of the source code
language in the block.  @xref{Languages}, for identifiers of supported
languages.
@cindex source code, language
@item <switches>
Optional.  Switches provide finer control of the code execution, export, and
format (see the discussion of switches in @ref{Literal examples})
@cindex source code, switches
@item <header arguments>
Optional.  Heading arguments control many aspects of evaluation, export and
tangling of code blocks (@pxref{Header arguments}).  Using Org's properties
feature, header arguments can be selectively applied to the entire buffer or
specific sub-trees of the Org document.
@item source code, header arguments
@item <body>
Source code in the dialect of the specified language identifier.
@end table

@node Editing source code
@section Editing source code
@cindex code block, editing
@cindex source code, editing

@vindex org-edit-src-auto-save-idle-delay
@vindex org-edit-src-turn-on-auto-save
@kindex C-c '
@kbd{C-c '} for editing the current code block.  It opens a new major-mode
edit buffer containing the body of the @samp{src} code block, ready for any
edits.  @kbd{C-c '} again to close the buffer and return to the Org buffer.

@kbd{C-x C-s} saves the buffer and updates the contents of the Org buffer.

Set @code{org-edit-src-auto-save-idle-delay} to save the base buffer after
a certain idle delay time.

Set @code{org-edit-src-turn-on-auto-save} to auto-save this buffer into a
separate file using @code{auto-save-mode}.

@kbd{C-c '} to close the major-mode buffer and return back to the Org buffer.

While editing the source code in the major-mode, the @code{org-src-mode}
minor mode remains active.  It provides these customization variables as
described below.  For even more variables, look in the customization
group @code{org-edit-structure}.

@table @code
@item org-src-lang-modes
If an Emacs major-mode named @code{<lang>-mode} exists, where @code{<lang>}
is the language identifier from code block's header line, then the edit
buffer uses that major-mode.  Use this variable to arbitrarily map language
identifiers to major modes.
@item org-src-window-setup
For specifying Emacs window arrangement when the new edit buffer is created.
@item org-src-preserve-indentation
@cindex indentation, in source blocks
Default is @code{nil}.  Source code is indented.  This indentation applies
during export or tangling, and depending on the context, may alter leading
spaces and tabs.  When non-@code{nil}, source code is aligned with the
leftmost column.  No lines are modified during export or tangling, which is
very useful for white-space sensitive languages, such as Python.
@item org-src-ask-before-returning-to-edit-buffer
When @code{nil}, Org returns to the edit buffer without further prompts.  The
default prompts for a confirmation.
@end table

Set @code{org-src-fontify-natively} to non-@code{nil} to turn on native code
fontification in the @emph{Org} buffer.  Fontification of @samp{src} code
blocks can give visual separation of text and code on the display page.  To
further customize the appearance of @code{org-block} for specific languages,
customize @code{org-src-block-faces}.  The following example shades the
background of regular blocks, and colors source blocks only for Python and
Emacs-Lisp languages.
@lisp
(require 'color)
(set-face-attribute 'org-block nil :background
                    (color-darken-name
                     (face-attribute 'default :background) 3))

(setq org-src-block-faces '(("emacs-lisp" (:background "#EEE2FF"))
                            ("python" (:background "#E5FFB8"))))
@end lisp

@node Exporting code blocks
@section Exporting code blocks
@cindex code block, exporting
@cindex source code, exporting

Org can flexibly export just the @emph{code} from the code blocks, just the
@emph{results} of evaluation of the code block, @emph{both} the code and the
results of the code block evaluation, or @emph{none}.  Org defaults to
exporting @emph{code} for most languages.  For some languages, such as
@code{ditaa}, Org defaults to @emph{results}.  To export just the body of
code blocks, @pxref{Literal examples}.  To selectively export sub-trees of
an Org document, @pxref{Exporting}.

The @code{:exports} header arguments control exporting code blocks only and
not inline code:

@subsubheading Header arguments:

@table @code
@cindex @code{:exports}, src header argument
@item :exports code
This is the default for most languages where the body of the code block is
exported.  See @ref{Literal examples} for more.
@item :exports results
On export, Org includes only the results and not the code block.  After each
evaluation, Org inserts the results after the end of code block in the Org
buffer.  By default, Org replaces any previous results.  Org can also append
results.
@item :exports both
Org exports both the code block and the results.
@item :exports none
Org does not export the code block nor the results.
@end table

@vindex org-export-use-babel
To stop Org from evaluating code blocks to speed exports, use the header
argument @code{:eval never-export} (@pxref{eval}).  To stop Org from
evaluating code blocks for greater security, set the
@code{org-export-use-babel} variable to @code{nil}, but understand that
header arguments will have no effect.

Turning off evaluation comes in handy when batch processing.  For example,
markup languages for wikis, which have a high risk of untrusted code.
Stopping code block evaluation also stops evaluation of all header arguments
of the code block.  This may not be desirable in some circumstances.  So
during export, to allow evaluation of just the header arguments but not any
code evaluation in the source block, set @code{:eval never-export}
(@pxref{eval}).

Org never evaluates code blocks in commented sub-trees when exporting
(@pxref{Comment lines}).  On the other hand, Org does evaluate code blocks in
sub-trees excluded from export (@pxref{Export settings}).

@node Extracting source code
@section Extracting source code
@cindex tangling
@cindex source code, extracting
@cindex code block, extracting source code

Extracting source code from code blocks is a basic task in literate
programming.  Org has features to make this easy.  In literate programming
parlance, documents on creation are @emph{woven} with code and documentation,
and on export, the code is @emph{tangled} for execution by a computer.  Org
facilitates weaving and tangling for producing, maintaining, sharing, and
exporting literate programming documents.  Org provides extensive
customization options for extracting source code.

When Org tangles @samp{src} code blocks, it expands, merges, and transforms
them.  Then Org recomposes them into one or more separate files, as
configured through the options.  During this @emph{tangling} process, Org
expands variables in the source code, and resolves any Noweb style references
(@pxref{Noweb reference syntax}).

@subsubheading Header arguments

@table @code
@cindex @code{:tangle}, src header argument
@item :tangle no
By default, Org does not tangle the @samp{src} code block on export.
@item :tangle yes
Org extracts the contents of the code block for the tangled output.  By
default, the output file name is the same as the Org file but with a file
extension derived from the language identifier of the @samp{src} code block.
@item :tangle filename
Override the default file name with this one for the tangled output.
@end table

@kindex  C-c C-v t
@subsubheading Functions

@table @code
@item org-babel-tangle
Tangle the current file.  Bound to @kbd{C-c C-v t}.

With prefix argument only tangle the current @samp{src} code block.
@item org-babel-tangle-file
Choose a file to tangle.  Bound to @kbd{C-c C-v f}.
@end table

@subsubheading Hooks

@table @code
@item org-babel-post-tangle-hook
This hook runs from within code tangled by @code{org-babel-tangle}, making it
suitable for post-processing, compilation, and evaluation of code in the
tangled files.
@end table

@subsubheading Jumping between code and Org

Debuggers normally link errors and messages back to the source code.  But for
tangled files, we want to link back to the Org file, not to the tangled
source file.  To make this extra jump, Org uses
@code{org-babel-tangle-jump-to-org} function with two additional source code
block header arguments: One, set @code{padline} (@pxref{padline}) to true
(the default setting).  Two, set @code{comments} (@pxref{comments}) to
@code{link}, which makes Org insert links to the Org file.

@node Evaluating code blocks
@section Evaluating code blocks
@cindex code block, evaluating
@cindex source code, evaluating
@cindex @code{#+RESULTS}

A note about security: With code evaluation comes the risk of harm.  Org
safeguards by prompting for user's permission before executing any code in
the source block.  To customize this safeguard (or disable it) see @ref{Code
evaluation security}.

Org captures the results of the @samp{src} code block evaluation and inserts
them in the Org file, right after the @samp{src} code block.  The insertion
point is after a newline and the @code{#+RESULTS} label.  Org creates the
@code{#+RESULTS} label if one is not already there.

By default, Org enables only @code{emacs-lisp} @samp{src} code blocks for
execution.  See @ref{Languages} for identifiers to enable other languages.

@kindex C-c C-c
Org provides many ways to execute @samp{src} code blocks.  @kbd{C-c C-c} or
@kbd{C-c C-v e} with the point on a @samp{src} code block@footnote{The option
@code{org-babel-no-eval-on-ctrl-c-ctrl-c} can be used to remove code
evaluation from the @kbd{C-c C-c} key binding.} calls the
@code{org-babel-execute-src-block} function, which executes the code in the
block, collects the results, and inserts them in the buffer.

@cindex @code{#+CALL}
By calling a named code block@footnote{Actually, the constructs call_<name>()
and src_<lang>@{@} are not evaluated when they appear in a keyword line
(i.e. lines starting with @code{#+KEYWORD:}, @pxref{In-buffer settings}).}
from an Org mode buffer or a table.  Org can call the named @samp{src} code
blocks from the current Org mode buffer or from the ``Library of Babel''
(@pxref{Library of Babel}).  Whether inline syntax or the @code{#+CALL:}
syntax is used, the result is wrapped based on the variable
@code{org-babel-inline-result-wrap}, which by default is set to @code{"=%s="}
to produce verbatim text suitable for markup.

The syntax for @code{#+CALL:} is

@example
#+CALL: <name>(<arguments>)
#+CALL: <name>[<inside header arguments>](<arguments>) <end header arguments>
@end example

The syntax for inline named code block is

@example
... call_<name>(<arguments>) ...
... call_<name>[<inside header arguments>](<arguments>)[<end header arguments>] ...
@end example

@table @code
@item <name>
This is the name of the code block to be evaluated (@pxref{Structure of
code blocks}).
@item <arguments>
Org passes arguments to the code block using standard function call syntax.
For example, a @code{#+CALL:} line that passes @samp{4} to a code block named
@code{double}, which declares the header argument @code{:var n=2}, would be
written as @code{#+CALL: double(n=4)}.  Note how this function call syntax is
different from the header argument syntax.
@item <inside header arguments>
Org passes inside header arguments to the named @samp{src} code block using
the header argument syntax.  Inside header arguments apply to code block
evaluation.  For example, @code{[:results output]} collects results printed
to @code{STDOUT} during code execution of that block.  Note how this header
argument syntax is different from the function call syntax.
@item <end header arguments>
End header arguments affect the results returned by the code block.  For
example, @code{:results html} wraps the results in a @code{BEGIN_EXPORT html}
block before inserting the results in the Org buffer.

For more examples of header arguments for @code{#+CALL:} lines,
@pxref{Arguments in function calls}.
@end table

@node Library of Babel
@section Library of Babel
@cindex babel, library of
@cindex source code, library
@cindex code block, library

The ``Library of Babel'' is a collection of code blocks.  Like a function
library, these code blocks can be called from other Org files.  A collection
of useful code blocks is available on
@uref{https://orgmode.org/worg/library-of-babel.html,Worg}.  For remote code
block evaluation syntax, @pxref{Evaluating code blocks}.

@kindex C-c C-v i
For any user to add code to the library, first save the code in regular
@samp{src} code blocks of an Org file, and then load the Org file with
@code{org-babel-lob-ingest}, which is bound to @kbd{C-c C-v i}.

@node Languages
@section Languages
@cindex babel, languages
@cindex source code, languages
@cindex code block, languages

Org supports the following languages for the @samp{src} code blocks:

@multitable @columnfractions 0.25 0.25 0.25 0.25
@headitem @b{Language} @tab @b{Identifier} @tab @b{Language} @tab @b{Identifier}
@item Asymptote @tab asymptote @tab Awk @tab awk
@item C @tab C @tab C++ @tab C++
@item Clojure @tab clojure @tab CSS @tab css
@item D @tab d @tab ditaa @tab ditaa
@item Graphviz @tab dot @tab Emacs Calc @tab calc
@item Emacs Lisp @tab emacs-lisp @tab Fortran @tab fortran
@item gnuplot @tab gnuplot @tab Haskell @tab haskell
@item Java @tab java @tab Javascript @tab js
@item LaTeX @tab latex @tab Ledger @tab ledger
@item Lisp @tab lisp @tab Lilypond @tab lilypond
@item Lua @tab lua @tab MATLAB @tab matlab
@item Mscgen @tab mscgen @tab Objective Caml @tab ocaml
@item Octave @tab octave @tab Org mode @tab org
@item Oz @tab oz @tab Perl @tab perl
@item Plantuml @tab plantuml @tab Processing.js @tab processing
@item Python @tab python @tab R @tab R
@item Ruby @tab ruby @tab Sass @tab sass
@item Scheme @tab scheme @tab GNU Screen @tab screen
@item Sed @tab sed @tab shell @tab sh
@item SQL @tab sql @tab SQLite @tab sqlite
@item Vala @tab vala
@end multitable

Additional documentation for some languages are at
@uref{https://orgmode.org/worg/org-contrib/babel/languages.html}.

@vindex org-babel-load-languages
By default, only @code{emacs-lisp} is enabled for evaluation.  To enable or
disable other languages, customize the @code{org-babel-load-languages}
variable either through the Emacs customization interface, or by adding code
to the init file as shown next:

In this example, evaluation is disabled for @code{emacs-lisp}, and enabled
for @code{R}.

@lisp
(org-babel-do-load-languages
 'org-babel-load-languages
 '((emacs-lisp . nil)
   (R . t)))
@end lisp

Note that this is not the only way to enable a language.  Org also enables
languages when loaded with @code{require} statement.  For example, the
following enables execution of @code{clojure} code blocks:

@lisp
(require 'ob-clojure)
@end lisp

@node Header arguments
@section Header arguments
@cindex code block, header arguments
@cindex source code, block header arguments

Details of configuring header arguments are shown here.

@menu
* Using header arguments::      Different ways to set header arguments
* Specific header arguments::   List of header arguments
@end menu

@node Using header arguments
@subsection Using header arguments

Since header arguments can be set in several ways, Org prioritizes them in
case of overlaps or conflicts by giving local settings a higher priority.
Header values in function calls, for example, override header values from
global defaults.
@menu
* System-wide header arguments::  Set globally, language-specific
* Language-specific header arguments::  Set in the Org file's headers
* Header arguments in Org mode properties::  Set in the Org file
* Language-specific mode properties::
* Code block specific header arguments::  The most commonly used method
* Arguments in function calls::  The most specific level, takes highest priority
@end menu


@node System-wide header arguments
@subsubheading System-wide header arguments
@vindex org-babel-default-header-args
System-wide values of header arguments can be specified by adapting the
@code{org-babel-default-header-args} variable:

@cindex @code{:session}, src header argument
@cindex @code{:results}, src header argument
@cindex @code{:exports}, src header argument
@cindex @code{:cache}, src header argument
@cindex @code{:noweb}, src header argument
@example
:session    => "none"
:results    => "replace"
:exports    => "code"
:cache      => "no"
:noweb      => "no"
@end example

This example sets @code{:noweb} header arguments to @code{yes}, which makes
Org expand @code{:noweb} references by default.

@lisp
(setq org-babel-default-header-args
      (cons '(:noweb . "yes")
            (assq-delete-all :noweb org-babel-default-header-args)))
@end lisp

@node Language-specific header arguments
@subsubheading Language-specific header arguments
Each language can have separate default header arguments by customizing the
variable @code{org-babel-default-header-args:<lang>}, where @code{<lang>} is
the name of the language.  For details, see the language-specific online
documentation at @uref{https://orgmode.org/worg/org-contrib/babel/}.

@node Header arguments in Org mode properties
@subsubheading Header arguments in Org mode properties

For header arguments applicable to the buffer, use @code{#+PROPERTY:} lines
anywhere in the Org mode file (@pxref{Property syntax}).

The following example sets only for @samp{R} code blocks to @code{session},
making all the @samp{R} code blocks execute in the same session.  Setting
@code{results} to @code{silent} ignores the results of executions for all
blocks, not just @samp{R} code blocks; no results inserted for any block.

@example
#+PROPERTY: header-args:R  :session *R*
#+PROPERTY: header-args    :results silent
@end example

@vindex org-use-property-inheritance
Header arguments set through Org's property drawers (@pxref{Property syntax})
apply at the sub-tree level on down.  Since these property drawers can appear
anywhere in the file hierarchy, Org uses outermost call or source block to
resolve the values.  Org ignores @code{org-use-property-inheritance} setting.

In this example, @code{:cache} defaults to @code{yes} for all code blocks in
the sub-tree starting with @samp{sample header}.

@example
* sample header
  :PROPERTIES:
  :header-args:    :cache yes
  :END:
@end example

@kindex C-c C-x p
@vindex org-babel-default-header-args
Properties defined through @code{org-set-property} function, bound to
@kbd{C-c C-x p}, apply to all active languages.  They override properties set
in @code{org-babel-default-header-args}.

@node Language-specific mode properties
@subsubheading Language-specific mode properties

Language-specific header arguments are also read from properties
@code{header-args:<lang>} where @code{<lang>} is the language identifier.
For example,

@example
* Heading
  :PROPERTIES:
  :header-args:clojure:    :session *clojure-1*
  :header-args:R:          :session *R*
  :END:
** Subheading
  :PROPERTIES:
  :header-args:clojure:    :session *clojure-2*
  :END:
@end example

would force separate sessions for clojure blocks in Heading and Subheading,
but use the same session for all @samp{R} blocks.  Blocks in Subheading
inherit settings from Heading.

@node Code block specific header arguments
@subsubheading Code block specific header arguments

Header arguments are most commonly set at the @samp{src} code block level, on
the @code{#+BEGIN_SRC} line.  Arguments set at this level take precedence
over those set in the @code{org-babel-default-header-args} variable, and also
those set as header properties.

In the following example, setting @code{results} to @code{silent} makes it
ignore results of the code execution.  Setting @code{:exports} to @code{code}
exports only the body of the @samp{src} code block to HTML or @LaTeX{}.:

@example
#+NAME: factorial
#+BEGIN_SRC haskell :results silent :exports code :var n=0
fac 0 = 1
fac n = n * fac (n-1)
#+END_SRC
@end example

The same header arguments in an inline @samp{src} code block:

@example
src_haskell[:exports both]@{fac 5@}
@end example

Code block header arguments can span multiple lines using @code{#+HEADER:} on
each line.  Note that Org currently accepts the plural spelling of
@code{#+HEADER:} only as a convenience for backward-compatibility.  It may be
removed at some point.

@cindex @code{#+HEADER:}

Multi-line header arguments on an unnamed @samp{src} code block:

@example
#+HEADER: :var data1=1
#+BEGIN_SRC emacs-lisp :var data2=2
   (message "data1:%S, data2:%S" data1 data2)
#+END_SRC

#+RESULTS:
: data1:1, data2:2
@end example

Multi-line header arguments on a named @samp{src} code block:

@example
#+NAME: named-block
#+HEADER: :var data=2
#+BEGIN_SRC emacs-lisp
  (message "data:%S" data)
#+END_SRC

#+RESULTS: named-block
  : data:2
@end example

@node Arguments in function calls
@subsubheading Arguments in function calls

Header arguments in function calls are the most specific and override all
other settings in case of an overlap.  They get the highest priority.  Two
@code{#+CALL:} examples are shown below.  For the complete syntax of
@code{#+CALL:} lines, see @ref{Evaluating code blocks}.

In this example, @code{:exports results} header argument is applied to the
evaluation of the @code{#+CALL:} line.

@example
#+CALL: factorial(n=5) :exports results
@end example

In this example, @code{:session special} header argument is applied to the
evaluation of @code{factorial} code block.

@example
#+CALL: factorial[:session special](n=5)
@end example

@node Specific header arguments
@subsection Specific header arguments
Org comes with many header arguments common to all languages.  New header
arguments are added for specific languages as they become available for use
in @samp{src} code blocks.  A header argument is specified with an initial
colon followed by the argument's name in lowercase.  Common header arguments
are:

@menu
* var::                         Pass arguments to @samp{src} code blocks
* results::                     Specify results type; how to collect
* file::                        Specify a path for output file
* file-desc::                   Specify a description for file results
* file-ext::                    Specify an extension for file output
* output-dir::                  Specify a directory for output file
* dir::                         Specify the default directory for code block execution
* exports::                     Specify exporting code, results, both, none
* tangle::                      Toggle tangling; or specify file name
* mkdirp::                      Toggle for parent directory creation for target files during tangling
* comments::                    Toggle insertion of comments in tangled code files
* padline::                     Control insertion of padding lines in tangled code files
* no-expand::                   Turn off variable assignment and noweb expansion during tangling
* session::                     Preserve the state of code evaluation
* noweb::                       Toggle expansion of noweb references
* noweb-ref::                   Specify block's noweb reference resolution target
* noweb-sep::                   String to separate noweb references
* cache::                       Avoid re-evaluating unchanged code blocks
* sep::                         Delimiter for writing tabular results outside Org
* hlines::                      Handle horizontal lines in tables
* colnames::                    Handle column names in tables
* rownames::                    Handle row names in tables
* shebang::                     Make tangled files executable
* tangle-mode::                 Set permission of tangled files
* eval::                        Limit evaluation of specific code blocks
* wrap::                        Mark source block evaluation results
* post::                        Post processing of results of code block evaluation
* prologue::                    Text to prepend to body of code block
* epilogue::                    Text to append to body of code block
@end menu

For language-specific header arguments, see @ref{Languages}.

@node var
@subsubsection @code{:var}
@cindex @code{:var}, src header argument
Use @code{:var} for passing arguments to @samp{src} code blocks.  The
specifics of variables in @samp{src} code blocks vary by the source language
and are covered in the language-specific documentation.  The syntax for
@code{:var}, however, is the same for all languages.  This includes declaring
a variable, and assigning a default value.

Arguments can take values as literals, or as references, or even as Emacs
Lisp code (@pxref{var, Emacs Lisp evaluation of variables}).  References are
names from the Org file from the lines @code{#+NAME:} or @code{#+RESULTS:}.
References can also refer to tables, lists, @code{#+BEGIN_EXAMPLE} blocks,
other types of @samp{src} code blocks, or the results of execution of
@samp{src} code blocks.

For better performance, Org can cache results of evaluations.  But caching
comes with severe limitations (@pxref{cache}).

Argument values are indexed like arrays (@pxref{var, Indexable variable
values}).

The following syntax is used to pass arguments to @samp{src} code blocks
using the @code{:var} header argument.

@example
:var name=assign
@end example

The @code{assign} is a literal value, such as a string @samp{"string"}, a
number @samp{9}, a reference to a table, a list, a literal example, another
code block (with or without arguments), or the results from evaluating a code
block.

Here are examples of passing values by reference:

@table @dfn

@item table
an Org mode table named with either a @code{#+NAME:} line

@example
#+NAME: example-table
| 1 |
| 2 |
| 3 |
| 4 |

#+NAME: table-length
#+BEGIN_SRC emacs-lisp :var table=example-table
(length table)
#+END_SRC

#+RESULTS: table-length
: 4
@end example

@item list
a simple list named with a @code{#+NAME:} line.  Note that only the top level
list items are passed along.  Nested list items are ignored.

@example
#+NAME: example-list
  - simple
    - not
    - nested
  - list

#+BEGIN_SRC emacs-lisp :var x=example-list
  (print x)
#+END_SRC

#+RESULTS:
| simple | list |
@end example

@item code block without arguments
a code block name (from the example above), as assigned by @code{#+NAME:},
optionally followed by parentheses

@example
#+BEGIN_SRC emacs-lisp :var length=table-length()
(* 2 length)
#+END_SRC

#+RESULTS:
: 8
@end example

@item code block with arguments
a @samp{src} code block name, as assigned by @code{#+NAME:}, followed by
parentheses and optional arguments passed within the parentheses following
the @samp{src} code block name using standard function call syntax

@example
#+NAME: double
#+BEGIN_SRC emacs-lisp :var input=8
(* 2 input)
#+END_SRC

#+RESULTS: double
: 16

#+NAME: squared
#+BEGIN_SRC emacs-lisp :var input=double(input=2)
(* input input)
#+END_SRC

#+RESULTS: squared
: 4
@end example

@item literal example
a literal example block named with a @code{#+NAME:} line

@example
#+NAME: literal-example
#+BEGIN_EXAMPLE
A literal example
on two lines
#+END_EXAMPLE

#+NAME: read-literal-example
#+BEGIN_SRC emacs-lisp :var x=literal-example
  (concatenate 'string x " for you.")
#+END_SRC

#+RESULTS: read-literal-example
: A literal example
: on two lines for you.

@end example

@end table

@subsubheading Indexable variable values
Indexing variable values enables referencing portions of a variable.  Indexes
are 0 based with negative values counting backwards from the end.  If an
index is separated by @code{,}s then each subsequent section will index as
the next dimension.  Note that this indexing occurs @emph{before} other
table-related header arguments are applied, such as @code{:hlines},
@code{:colnames} and @code{:rownames}.  The following example assigns the
last cell of the first row the table @code{example-table} to the variable
@code{data}:

@example
#+NAME: example-table
| 1 | a |
| 2 | b |
| 3 | c |
| 4 | d |

#+BEGIN_SRC emacs-lisp :var data=example-table[0,-1]
  data
#+END_SRC

#+RESULTS:
: a
@end example

Ranges of variable values can be referenced using two integers separated by a
@code{:}, in which case the entire inclusive range is referenced.  For
example the following assigns the middle three rows of @code{example-table}
to @code{data}.

@example
#+NAME: example-table
| 1 | a |
| 2 | b |
| 3 | c |
| 4 | d |
| 5 | 3 |

#+BEGIN_SRC emacs-lisp :var data=example-table[1:3]
  data
#+END_SRC

#+RESULTS:
| 2 | b |
| 3 | c |
| 4 | d |
@end example

To pick the entire range, use an empty index, or the single character
@code{*}.  @code{0:-1} does the same thing.  Example below shows how to
reference the first column only.

@example
#+NAME: example-table
| 1 | a |
| 2 | b |
| 3 | c |
| 4 | d |

#+BEGIN_SRC emacs-lisp :var data=example-table[,0]
  data
#+END_SRC

#+RESULTS:
| 1 | 2 | 3 | 4 |
@end example

Index referencing can be used for tables and code blocks.  Index referencing
can handle any number of dimensions.  Commas delimit multiple dimensions, as
shown below.

@example
#+NAME: 3D
#+BEGIN_SRC emacs-lisp
  '(((1  2  3)  (4  5  6)  (7  8  9))
    ((10 11 12) (13 14 15) (16 17 18))
    ((19 20 21) (22 23 24) (25 26 27)))
#+END_SRC

#+BEGIN_SRC emacs-lisp :var data=3D[1,,1]
  data
#+END_SRC

#+RESULTS:
| 11 | 14 | 17 |
@end example

@subsubheading Emacs Lisp evaluation of variables

Emacs lisp code can set the values for variables.  To differentiate a value
from lisp code, Org interprets any value starting with @code{(}, @code{[},
@code{'} or @code{`} as Emacs Lisp code.  The result of evaluating that code
is then assigned to the value of that variable.  The following example shows
how to reliably query and pass file name of the Org mode buffer to a code
block using headers.  We need reliability here because the file's name could
change once the code in the block starts executing.

@example
#+BEGIN_SRC sh :var filename=(buffer-file-name) :exports both
  wc -w $filename
#+END_SRC
@end example

Note that values read from tables and lists will not be mistakenly evaluated
as Emacs Lisp code, as illustrated in the following example.

@example
#+NAME: table
| (a b c) |

#+HEADER: :var data=table[0,0]
#+BEGIN_SRC perl
  $data
#+END_SRC

#+RESULTS:
: (a b c)
@end example

@node results
@subsubsection @code{:results}
@cindex @code{:results}, src header argument

There are four classes of @code{:results} header arguments.  Each @samp{src}
code block can take only one option per class.

@itemize @bullet
@item
@b{collection} for how the results should be collected from the @samp{src}
code block
@item
@b{type} for which type of result the code block will return; affects how Org
processes and inserts results in the Org buffer
@item
@b{format} for the result; affects how Org processes and inserts results in
the Org buffer
@item
@b{handling} for processing results after evaluation of the @samp{src} code
block
@end itemize

@subsubheading Collection
Collection options specify the results.  Choose one of the options; they are
mutually exclusive.

@itemize @bullet
@item @code{value}
Default.  Functional mode.  Result is the value returned by the last
statement in the @samp{src} code block.  Languages like Python may require an
explicit @code{return} statement in the @samp{src} code block.  Usage
example: @code{:results value}.
@item @code{output}
Scripting mode.  Result is collected from STDOUT during execution of the code
in the @samp{src} code block.  Usage example: @code{:results output}.
@end itemize

@subsubheading Type
Type tells what result types to expect from the execution of the code
block.  Choose one of the options; they are mutually exclusive.  The default
behavior is to automatically determine the result type.

@itemize @bullet
@item @code{table}, @code{vector}
Interpret the results as an Org table.  If the result is a single value,
create a table with one row and one column.  Usage example: @code{:results
value table}.
@item @code{list}
Interpret the results as an Org list.  If the result is a single value,
create a list of one element.
@item @code{scalar}, @code{verbatim}
Interpret literally and insert as quoted text.  Do not create a table.  Usage
example: @code{:results value verbatim}.
@item @code{file}
Interpret as path to a file.  Inserts a link to the file.  Usage example:
@code{:results value file}.
@end itemize

@subsubheading Format
Format pertains to the type of the result returned by the @samp{src} code
block.  Choose one of the options; they are mutually exclusive.  The default
follows from the type specified above.

@itemize @bullet
@item @code{raw}
Interpreted as raw Org mode.  Inserted directly into the buffer.  Aligned if
it is a table.  Usage example: @code{:results value raw}.
@item @code{org}
Results enclosed in a @code{BEGIN_SRC org} block.  For comma-escape, either
@key{TAB} in the block, or export the file.  Usage example: @code{:results
value org}.
@item @code{html}
Results enclosed in a @code{BEGIN_EXPORT html} block.  Usage example:
@code{:results value html}.
@item @code{latex}
Results enclosed in a @code{BEGIN_EXPORT latex} block.  Usage example:
@code{:results value latex}.
@item @code{code}
Result enclosed in a @samp{src} code block.  Useful for parsing.  Usage
example: @code{:results value code}.
@item @code{pp}
Result converted to pretty-print source code.  Enclosed in a @samp{src} code
block.  Languages supported: Emacs Lisp, Python, and Ruby.  Usage example:
@code{:results value pp}.
@item @code{drawer}
Result wrapped in a RESULTS drawer.  Useful for containing @code{raw} or
@code{org} results for later scripting and automated processing.  Usage
example: @code{:results value drawer}.
@end itemize

@subsubheading Handling
Handling options after collecting the results.

@itemize @bullet
@item @code{silent}
Do not insert results in the Org mode buffer, but echo them in the
minibuffer.  Usage example: @code{:results output silent}.
@item @code{replace}
Default.  Insert results in the Org buffer.  Remove previous results.  Usage
example: @code{:results output replace}.
@item @code{append}
Append results to the Org buffer.  Latest results are at the bottom.  Does
not remove previous results.  Usage example: @code{:results output append}.
@item @code{prepend}
Prepend results to the Org buffer.  Latest results are at the top.  Does not
remove previous results.  Usage example: @code{:results output prepend}.
@end itemize

@node file
@subsubsection @code{:file}
@cindex @code{:file}, src header argument

An external @code{:file} that saves the results of execution of the code
block.  The @code{:file} is either a file name or two strings, where the
first is the file name and the second is the description.  A link to the file
is inserted.  It uses an Org mode style @code{[[file:]]} link (@pxref{Link
format}).  Some languages, such as @samp{R}, @samp{dot}, @samp{ditaa}, and
@samp{gnuplot}, automatically wrap the source code in additional boilerplate
code.  Such code wrapping helps recreate the output, especially graphics
output, by executing just the @code{:file} contents.

@node file-desc
@subsubsection @code{:file-desc}

A description of the results file.  Org uses this description for the link
(see @ref{Link format}) it inserts in the Org file.  If the @code{:file-desc}
has no value, Org will use file name for both the ``link'' and the
``description'' portion of the Org mode link.

@node file-ext
@subsubsection @code{:file-ext}
@cindex @code{:file-ext}, src header argument

File name extension for the output file.  Org generates the file's complete
name, and extension by combining @code{:file-ext}, @code{#+NAME:} of the
source block, and the @ref{output-dir} header argument.  To override this
auto generated file name, use the @code{:file} header argument.

@node output-dir
@subsubsection @code{:output-dir}
@cindex @code{:output-dir}, src header argument

Specifies the @code{:output-dir} for the results file.  Org accepts an
absolute path (beginning with @code{/}) or a relative directory (without
@code{/}).  The value can be combined with @code{#+NAME:} of the source block
and @ref{file} or @ref{file-ext} header arguments.

@node dir
@subsubsection @code{:dir} and remote execution
@cindex @code{:dir}, src header argument

While the @code{:file} header argument can be used to specify the path to the
output file, @code{:dir} specifies the default directory during @samp{src}
code block execution.  If it is absent, then the directory associated with
the current buffer is used.  In other words, supplying @code{:dir path}
temporarily has the same effect as changing the current directory with
@kbd{M-x cd path @key{RET}}, and then not supplying @code{:dir}.  Under the
surface, @code{:dir} simply sets the value of the Emacs variable
@code{default-directory}.

When using @code{:dir}, relative paths (for example, @code{:file myfile.jpg}
or @code{:file results/myfile.jpg}) become relative to the default directory.

For example, to save the plot file in the @samp{Work} folder of the home
directory (notice tilde is expanded):

@example
#+BEGIN_SRC R :file myplot.png :dir ~/Work
matplot(matrix(rnorm(100), 10), type="l")
#+END_SRC
@end example

@subsubheading Remote execution
To evaluate the @samp{src} code block on a remote machine, supply a remote s
directory name using @samp{Tramp} syntax.  For example:

@example
#+BEGIN_SRC R :file plot.png :dir /scp:dand@@yakuba.princeton.edu:
plot(1:10, main=system("hostname", intern=TRUE))
#+END_SRC
@end example

Org first captures the text results as usual for insertion in the Org file.
Then Org also inserts a link to the remote file, thanks to Emacs
@samp{Tramp}.  Org constructs the remote path to the file name from
@code{:dir} and @code{default-directory}, as illustrated here:

@example
[[file:/scp:dand@@yakuba.princeton.edu:/home/dand/plot.png][plot.png]]
@end example


@subsubheading Some more warnings

@itemize @bullet
@item
When @code{:dir} is used with @code{:session}, Org sets the starting
directory for a new session.  But Org will not alter the directory of an
already existing session.
@item
Do not use @code{:dir} with @code{:exports results} or with @code{:exports
both} to avoid Org inserting incorrect links to remote files.  That is because
Org does not expand @code{default directory} to avoid some underlying
portability issues.
@end itemize

@node exports
@subsubsection @code{:exports}
@cindex @code{:exports}, src header argument

The @code{:exports} header argument is to specify if that part of the Org
file is exported to, say, HTML or @LaTeX{} formats.  Note that
@code{:exports} affects only @samp{src} code blocks and not inline code.

@itemize @bullet
@item @code{code}
The default.  The body of code is included into the exported file.  Example:
@code{:exports code}.
@item @code{results}
The results of evaluation of the code is included in the exported file.
Example: @code{:exports results}.
@item @code{both}
Both the code and results of evaluation are included in the exported file.
Example: @code{:exports both}.
@item @code{none}
Neither the code nor the results of evaluation is included in the exported
file.  Whether the code is evaluated at all depends on other
options.  Example: @code{:exports none}.
@end itemize

@node tangle
@subsubsection @code{:tangle}
@cindex @code{:tangle}, src header argument

The @code{:tangle} header argument specifies if the @samp{src} code block is
exported to source file(s).

@itemize @bullet
@item @code{tangle}
Export the @samp{src} code block to source file.  The file name for the
source file is derived from the name of the Org file, and the file extension
is derived from the source code language identifier.  Example: @code{:tangle
yes}.
@item @code{no}
The default.  Do not extract the code a source code file.  Example:
@code{:tangle no}.
@item other
Export the @samp{src} code block to source file whose file name is derived
from any string passed to the @code{:tangle} header argument.  Org derives
the file name as being relative to the directory of the Org file's location.
Example: @code{:tangle path}.
@end itemize

@node mkdirp
@subsubsection @code{:mkdirp}
@cindex @code{:mkdirp}, src header argument

The @code{:mkdirp} header argument creates parent directories for tangled
files if the directory does not exist.  @code{yes} enables directory creation
and @code{no} inhibits directory creation.

@node comments
@subsubsection @code{:comments}
@cindex @code{:comments}, src header argument
Controls inserting comments into tangled files.  These are above and beyond
whatever comments may already exist in the @samp{src} code block.

@itemize @bullet
@item @code{no}
The default.  Do not insert any extra comments during tangling.
@item @code{link}
Wrap the @samp{src} code block in comments.  Include links pointing back to
the place in the Org file from where the code was tangled.
@item @code{yes}
Kept for backward compatibility; same as ``link''.
@item @code{org}
Nearest headline text from Org file is inserted as comment.  The exact text
that is inserted is picked from the leading context of the source block.
@item @code{both}
Includes both ``link'' and ``org'' comment options.
@item @code{noweb}
Includes ``link'' comment option, expands noweb references, and wraps them in
link comments inside the body of the @samp{src} code block.
@end itemize

@node padline
@subsubsection @code{:padline}
@cindex @code{:padline}, src header argument
Control insertion of newlines to pad @samp{src} code blocks in the tangled
file.
@itemize @bullet
@item @code{yes}
Default.  Insert a newline before and after each @samp{src} code block in the
tangled file.
@item @code{no}
Do not insert newlines to pad the tangled @samp{src} code blocks.
@end itemize

@node no-expand
@subsubsection @code{:no-expand}
@cindex @code{:no-expand}, src header argument

By default Org expands @samp{src} code blocks during tangling.  The
@code{:no-expand} header argument turns off such expansions.  Note that one
side-effect of expansion by @code{org-babel-expand-src-block} also assigns
values to @code{:var} (@pxref{var}) variables.  Expansions also replace Noweb
references with their targets (@pxref{Noweb reference syntax}).  Some of
these expansions may cause premature assignment, hence this option.  This
option makes a difference only for tangling.  It has no effect when exporting
since @samp{src} code blocks for execution have to be expanded anyway.

@node session
@subsubsection @code{:session}
@cindex @code{:session}, src header argument

The @code{:session} header argument is for running multiple source code
blocks under one session.  Org runs @samp{src} code blocks with the same
session name in the same interpreter process.

@itemize @bullet
@item @code{none}
Default.  Each @samp{src} code block gets a new interpreter process to
execute.  The process terminates once the block is evaluated.
@item @code{other}
Any string besides @code{none} turns that string into the name of that
session.  For example, @code{:session mysession} names it @samp{mysession}.
If @code{:session} has no argument, then the session name is derived from the
source language identifier.  Subsequent blocks with the same source code
language use the same session.  Depending on the language, state variables,
code from other blocks, and the overall interpreted environment may be
shared.  Some interpreted languages support concurrent sessions when
subsequent source code language blocks change session names.
@end itemize

@node noweb
@subsubsection @code{:noweb}
@cindex @code{:noweb}, src header argument

The @code{:noweb} header argument controls expansion of Noweb syntax
references (@pxref{Noweb reference syntax}).  Expansions occur when source
code blocks are evaluated, tangled, or exported.

@itemize @bullet
@item @code{no}
Default.  No expansion of Noweb syntax references in the body of the code
when evaluating, tangling, or exporting.
@item @code{yes}
Expansion of Noweb syntax references in the body of the @samp{src} code block
when evaluating, tangling, or exporting.
@item @code{tangle}
Expansion of Noweb syntax references in the body of the @samp{src} code block
when tangling.  No expansion when evaluating or exporting.
@item @code{no-export}
Expansion of Noweb syntax references in the body of the @samp{src} code block
when evaluating or tangling.  No expansion when exporting.
@item @code{strip-export}
Expansion of Noweb syntax references in the body of the @samp{src} code block
when expanding prior to evaluating or tangling.  Removes Noweb syntax
references when exporting.
@item @code{eval}
Expansion of Noweb syntax references in the body of the @samp{src} code block
only before evaluating.
@end itemize

@subsubheading Noweb prefix lines
Noweb insertions now honor prefix characters that appear before the Noweb
syntax reference.

This behavior is illustrated in the following example.  Because the
@code{<<example>>} noweb reference appears behind the SQL comment syntax,
each line of the expanded noweb reference will be commented.

With:

@example
#+NAME: example
#+BEGIN_SRC text
this is the
multi-line body of example
#+END_SRC
@end example

this @samp{src} code block:

@example
#+BEGIN_SRC sql :noweb yes
-- <<example>>
#+END_SRC
@end example

expands to:

@example
-- this is the
-- multi-line body of example
@end example

Since this change will not affect noweb replacement text without newlines in
them, inline noweb references are acceptable.

This feature can also be used for management of indentation in exported code snippets.

With:

@example
#+NAME: if-true
#+BEGIN_SRC python :exports none
print('Do things when True')
#+END_SRC

#+NAME: if-false
#+BEGIN_SRC python :exports none
print('Do things when False')
#+END_SRC
@end example

this @samp{src} code block:

@example
#+BEGIN_SRC python :noweb yes :results output
if True:
    <<if-true>>
else:
    <<if-false>>
#+END_SRC
@end example

expands to:

@example
if True:
    print('Do things when True')
else:
    print('Do things when False')
@end example

and evaluates to:

@example
Do things when True
@end example

@node noweb-ref
@subsubsection @code{:noweb-ref}
@cindex @code{:noweb-ref}, src header argument

When expanding Noweb style references, Org concatenates @samp{src} code
blocks by matching the reference name to either the code block name or the
@code{:noweb-ref} header argument.

For simple concatenation, set this @code{:noweb-ref} header argument at the
sub-tree or file level.  In the example Org file shown next, the body of the
source code in each block is extracted for concatenation to a pure code file
when tangled.

@example
 #+BEGIN_SRC sh :tangle yes :noweb yes :shebang #!/bin/sh
   <<fullest-disk>>
 #+END_SRC
 * the mount point of the fullest disk
   :PROPERTIES:
   :header-args: :noweb-ref fullest-disk
   :END:

 ** query all mounted disks
 #+BEGIN_SRC sh
   df \
 #+END_SRC

 ** strip the header row
 #+BEGIN_SRC sh
   |sed '1d' \
 #+END_SRC

 ** output mount point of fullest disk
 #+BEGIN_SRC sh
   |awk '@{if (u < +$5) @{u = +$5; m = $6@}@} END @{print m@}'
 #+END_SRC
@end example

@node noweb-sep
@subsubsection @code{:noweb-sep}
@cindex @code{:noweb-sep}, src header argument

By default a newline separates each noweb reference concatenation.  To change
this newline separator, edit the @code{:noweb-sep} (@pxref{noweb-sep}) header
argument.

@node cache
@subsubsection @code{:cache}
@cindex @code{:cache}, src header argument

The @code{:cache} header argument is for caching results of evaluating code
blocks.  Caching results can avoid re-evaluating @samp{src} code blocks that
have not changed since the previous run.  To benefit from the cache and avoid
redundant evaluations, the source block must have a result already present in
the buffer, and neither the header arguments (including the value of
@code{:var} references) nor the text of the block itself has changed since
the result was last computed.  This feature greatly helps avoid long-running
calculations.  For some edge cases, however, the cached results may not be
reliable.

The caching feature is best for when @samp{src} blocks are pure functions,
that is functions that return the same value for the same input arguments
(@pxref{var}), and that do not have side effects, and do not rely on external
variables other than the input arguments.  Functions that depend on a timer,
file system objects, and random number generators are clearly unsuitable for
caching.

A note of warning: when @code{:cache} is used for a @code{:session}, caching
may cause unexpected results.

When the caching mechanism tests for any source code changes, it will not
expand Noweb style references (@pxref{Noweb reference syntax}).  For reasons
why, see @uref{http://thread.gmane.org/gmane.emacs.orgmode/79046}.

The @code{:cache} header argument can have one of two values: @code{yes} or
@code{no}.

@itemize @bullet
@item @code{no}
Default.  No caching of results; @samp{src} code block evaluated every time.
@item @code{yes}
Whether to run the code or return the cached results is determined by
comparing the SHA1 hash value of the combined @samp{src} code block and
arguments passed to it.  This hash value is packed on the @code{#+RESULTS:}
line from previous evaluation.  When hash values match, Org does not evaluate
the @samp{src} code block.  When hash values mismatch, Org evaluates the
@samp{src} code block, inserts the results, recalculates the hash value, and
updates @code{#+RESULTS:} line.
@end itemize

In this example, both functions are cached.  But @code{caller} runs only if
the result from @code{random} has changed since the last run.

@example
 #+NAME: random
 #+BEGIN_SRC R :cache yes
 runif(1)
 #+END_SRC

 #+RESULTS[a2a72cd647ad44515fab62e144796432793d68e1]: random
 0.4659510825295

 #+NAME: caller
 #+BEGIN_SRC emacs-lisp :var x=random :cache yes
 x
 #+END_SRC

 #+RESULTS[bec9c8724e397d5df3b696502df3ed7892fc4f5f]: caller
 0.254227238707244
@end example

@node sep
@subsubsection @code{:sep}
@cindex @code{:sep}, src header argument

The @code{:sep} header argument is the delimiter for saving results as tables
to files (@pxref{file}) external to Org mode.  Org defaults to tab delimited
output.  The function, @code{org-open-at-point}, which is bound to @kbd{C-c
C-o}, also uses @code{:sep} for opening tabular results.

@node hlines
@subsubsection @code{:hlines}
@cindex @code{:hlines}, src header argument

In-between each table row or below the table headings, sometimes results have
horizontal lines, which are also known as hlines.  The @code{:hlines}
argument with the value @code{yes} accepts such lines.  The default is
@code{no}.

@itemize @bullet
@item @code{no}
Strips horizontal lines from the input table.  For most code, this is
desirable, or else those @code{hline} symbols raise unbound variable errors.

The default is @code{:hlines no}.  The example shows hlines removed from the
input table.

@example
#+NAME: many-cols
| a | b | c |
|---+---+---|
| d | e | f |
|---+---+---|
| g | h | i |

#+NAME: echo-table
#+BEGIN_SRC python :var tab=many-cols
  return tab
#+END_SRC

#+RESULTS: echo-table
| a | b | c |
| d | e | f |
| g | h | i |
@end example

@item @code{yes}
For @code{:hlines yes}, the example shows hlines unchanged.

@example
#+NAME: many-cols
| a | b | c |
|---+---+---|
| d | e | f |
|---+---+---|
| g | h | i |

#+NAME: echo-table
#+BEGIN_SRC python :var tab=many-cols :hlines yes
  return tab
#+END_SRC

#+RESULTS: echo-table
| a | b | c |
|---+---+---|
| d | e | f |
|---+---+---|
| g | h | i |
@end example
@end itemize

@node colnames
@subsubsection @code{:colnames}
@cindex @code{:colnames}, src header argument

The @code{:colnames} header argument accepts @code{yes}, @code{no}, or
@code{nil} values.  The default value is @code{nil}, which is unassigned.
But this header argument behaves differently depending on the source code
language.

@itemize @bullet
@item @code{nil}
If an input table has column names (because the second row is an hline), then
Org removes the column names, processes the table, puts back the column
names, and then writes the table to the results block.

@example
#+NAME: less-cols
| a |
|---|
| b |
| c |

#+NAME: echo-table-again
#+BEGIN_SRC python :var tab=less-cols
  return [[val + '*' for val in row] for row in tab]
#+END_SRC

#+RESULTS: echo-table-again
| a  |
|----|
| b* |
| c* |
@end example

Note that column names have to accounted for when using variable indexing
(@pxref{var, Indexable variable values}) because column names are not removed
for indexing.

@item @code{no}
Do not pre-process column names.

@item @code{yes}
For an input table that has no hlines, process it like the @code{nil}
value.  That is, Org removes the column names, processes the table, puts back
the column names, and then writes the table to the results block.
@end itemize

@node rownames
@subsubsection @code{:rownames}
@cindex @code{:rownames}, src header argument

The @code{:rownames} header argument can take on values @code{yes} or
@code{no} values.  The default is @code{no}.  Note that @code{emacs-lisp}
code blocks ignore @code{:rownames} header argument because of the ease of
table-handling in Emacs.

@itemize @bullet
@item @code{no}
Org will not pre-process row names.

@item @code{yes}
If an input table has row names, then Org removes the row names, processes
the table, puts back the row names, and then writes the table to the results
block.

@example
#+NAME: with-rownames
| one | 1 | 2 | 3 | 4 |  5 |
| two | 6 | 7 | 8 | 9 | 10 |

#+NAME: echo-table-once-again
#+BEGIN_SRC python :var tab=with-rownames :rownames yes
  return [[val + 10 for val in row] for row in tab]
#+END_SRC

#+RESULTS: echo-table-once-again
| one | 11 | 12 | 13 | 14 | 15 |
| two | 16 | 17 | 18 | 19 | 20 |
@end example

Note that row names have to accounted for when using variable indexing
(@pxref{var, Indexable variable values}) because row names are not removed
for indexing.

@end itemize

@node shebang
@subsubsection @code{:shebang}
@cindex @code{:shebang}, src header argument

This header argument can turn results into executable script files.  By
setting the @code{:shebang} header argument to a string value (for example,
@code{:shebang "#!/bin/bash"}), Org inserts that string as the first line of
the tangled file that the @samp{src} code block is extracted to.  Org then
turns on the tangled file's executable permission.

@node tangle-mode
@subsubsection @code{:tangle-mode}
@cindex @code{:tangle-mode}, src header argument

The @code{tangle-mode} header argument specifies what permissions to set for
tangled files by @code{set-file-modes}.  For example, to make read-only
tangled file, use @code{:tangle-mode (identity #o444)}.  To make it
executable, use @code{:tangle-mode (identity #o755)}.

On @samp{src} code blocks with @code{shebang} (@pxref{shebang}) header
argument, Org will automatically set the tangled file to executable
permissions.  But this can be overridden with custom permissions using
@code{tangle-mode} header argument.

When multiple @samp{src} code blocks tangle to a single file with different
and conflicting @code{tangle-mode} header arguments, Org's behavior is
undefined.

@node eval
@subsubsection @code{:eval}
@cindex @code{:eval}, src header argument
The @code{:eval} header argument can limit evaluation of specific code
blocks.  It is useful for protection against evaluating untrusted @samp{src}
code blocks by prompting for a confirmation.  This protection is independent
of the @code{org-confirm-babel-evaluate} setting.

@table @code
@item never or no
Org will never evaluate this @samp{src} code block.
@item query
Org prompts the user for permission to evaluate this @samp{src} code block.
@item never-export or no-export
Org will not evaluate this @samp{src} code block when exporting, yet the user
can evaluate this source block interactively.
@item query-export
Org prompts the user for permission to export this @samp{src} code block.
@end table

If @code{:eval} header argument is not set for a source block, then Org
determines whether to evaluate from the @code{org-confirm-babel-evaluate}
variable (@pxref{Code evaluation security}).

@node wrap
@subsubsection @code{:wrap}
@cindex @code{:wrap}, src header argument
The @code{:wrap} header argument marks the results block by appending strings
to @code{#+BEGIN_} and @code{#+END_}.  If no string is specified, Org wraps
the results in a @code{#+BEGIN/END_RESULTS} block.

@node post
@subsubsection @code{:post}
@cindex @code{:post}, src header argument
The @code{:post} header argument is for post-processing results from
@samp{src} block evaluation.  When @code{:post} has any value, Org binds the
results to @code{*this*} variable for easy passing to @ref{var} header
argument specifications.  That makes results available to other @samp{src}
code blocks, or for even direct Emacs Lisp code execution.

The following two examples illustrate @code{:post} header argument in action.
The first one shows how to attach @code{#+ATTR_LATEX:} line using
@code{:post}.

@example
#+name: attr_wrap
#+begin_src sh :var data="" :var width="\\textwidth" :results output
  echo "#+ATTR_LATEX: :width $width"
  echo "$data"
#+end_src

#+header: :file /tmp/it.png
#+begin_src dot :post attr_wrap(width="5cm", data=*this*) :results drawer
  digraph@{
          a -> b;
          b -> c;
          c -> a;
  @}
#+end_src

#+RESULTS:
:RESULTS:
#+ATTR_LATEX :width 5cm
[[file:/tmp/it.png]]
:END:
@end example

The second example shows use of @code{:colnames} in @code{:post} to pass
data between @samp{src} code blocks.

@example
#+name: round-tbl
#+begin_src emacs-lisp :var tbl="" fmt="%.3f"
  (mapcar (lambda (row)
            (mapcar (lambda (cell)
                      (if (numberp cell)
                          (format fmt cell)
                        cell))
                    row))
          tbl)
#+end_src

#+begin_src R :colnames yes :post round-tbl[:colnames yes](*this*)
set.seed(42)
data.frame(foo=rnorm(1))
#+end_src

#+RESULTS:
|   foo |
|-------|
| 1.371 |
@end example

@node prologue
@subsubsection @code{:prologue}
@cindex @code{:prologue}, src header argument
The @code{prologue} header argument is for appending to the top of the code
block for execution.  For example, a clear or reset code at the start of new
execution of a @samp{src} code block.  A @code{reset} for @samp{gnuplot}:
@code{:prologue "reset"}.  See also @ref{epilogue}.

@lisp
(add-to-list 'org-babel-default-header-args:gnuplot
             '((:prologue . "reset")))
@end lisp

@node epilogue
@subsubsection @code{:epilogue}
@cindex @code{:epilogue}, src header argument
The value of the @code{epilogue} header argument is for appending to the end
of the code block for execution.  See also @ref{prologue}.

@node Results of evaluation
@section Results of evaluation
@cindex code block, results of evaluation
@cindex source code, results of evaluation

How Org handles results of a code block execution depends on many header
arguments working together.  Here is only a summary of these.  For an
enumeration of all the header arguments that affect results, see
@ref{results}.

The primary determinant is the execution context.  Is it in a @code{:session}
or not?  Orthogonal to that is if the expected result is a @code{:results
value} or @code{:results output}, which is a concatenation of output from
start to finish of the @samp{src} code block's evaluation.

@multitable @columnfractions 0.26 0.33 0.41
@item @tab @b{Non-session} @tab @b{Session}
@item @code{:results value} @tab value of last expression @tab value of last expression
@item @code{:results output} @tab contents of STDOUT @tab concatenation of interpreter output
@end multitable

For @code{:session} and non-session, the @code{:results value} turns the
results into an Org mode table format.  Single values are wrapped in a one
dimensional vector.  Rows and columns of a table are wrapped in a
two-dimensional vector.

@subsection Non-session
@subsubsection @code{:results value}
@cindex @code{:results}, src header argument
Default.  Org gets the value by wrapping the code in a function definition in
the language of the @samp{src} block.  That is why when using @code{:results
value}, code should execute like a function and return a value.  For
languages like Python, an explicit @code{return} statement is mandatory when
using @code{:results value}.

This is one of four evaluation contexts where Org automatically wraps the
code in a function definition.

@subsubsection @code{:results output}
@cindex @code{:results}, src header argument
For @code{:results output}, the code is passed to an external process running
the interpreter.  Org returns the contents of the standard output stream as
as text results.

@subsection Session
@subsubsection @code{:results value}
@cindex @code{:results}, src header argument
For @code{:results value} from a @code{:session}, Org passes the code to an
interpreter running as an interactive Emacs inferior process.  So only
languages that provide interactive evaluation can have session support.  Not
all languages provide this support, such as @samp{C} and @samp{ditaa}.  Even
those that do support, such as @samp{Python} and @samp{Haskell}, they impose
limitations on allowable language constructs that can run interactively.  Org
inherits those limitations for those @samp{src} code blocks running in a
@code{:session}.

Org gets the value from the source code interpreter's last statement
output.  Org has to use language-specific methods to obtain the value.  For
example, from the variable @code{_} in @samp{Python} and @samp{Ruby}, and the
value of @code{.Last.value} in @samp{R}).

@subsubsection @code{:results output}
@cindex @code{:results}, src header argument
For @code{:results output}, Org passes the code to the interpreter running as
an interactive Emacs inferior process.  Org concatenates whatever text output
emitted by the interpreter to return the collection as a result.  Note that
this collection is not the same as collected from @code{STDOUT} of a
non-interactive interpreter running as an external process.  Compare for
example these two blocks:

@example
#+BEGIN_SRC python :results output
 print "hello"
 2
 print "bye"
#+END_SRC

#+RESULTS:
: hello
: bye
@end example

In the above non-session mode, the ``2'' is not printed; so does not appear
in results.

@example
#+BEGIN_SRC python :results output :session
 print "hello"
 2
 print "bye"
#+END_SRC

#+RESULTS:
: hello
: 2
: bye
@end example

In the above @code{:session} mode, the interactive interpreter receives and
prints ``2''.  Results show that.

@node Noweb reference syntax
@section Noweb reference syntax
@cindex code block, noweb reference
@cindex syntax, noweb
@cindex source code, noweb reference

Org supports named blocks in Noweb style syntax.  For Noweb literate
programming details, see @uref{http://www.cs.tufts.edu/~nr/noweb/}).

@example
<<code-block-name>>
@end example

For the header argument @code{:noweb yes}, Org expands Noweb style references
in the @samp{src} code block before evaluation.

For the header argument @code{:noweb no}, Org does not expand Noweb style
references in the @samp{src} code block before evaluation.

The default is @code{:noweb no}.  Org defaults to @code{:noweb no} so as not
to cause errors in languages where Noweb syntax is ambiguous.  Change Org's
default to @code{:noweb yes} for languages where there is no risk of
confusion.

Org offers a more flexible way to resolve Noweb style references
(@pxref{noweb-ref}).

Org can include the @emph{results} of a code block rather than its body.  To
that effect, append parentheses, possibly including arguments, to the code
block name, as show below.

@example
<<code-block-name(optional arguments)>>
@end example

Note that when using the above approach to a code block's results, the code
block name set by @code{#+NAME} keyword is required; the reference set by
@code{:noweb-ref} will not work.

Here is an example that demonstrates how the exported content changes when
Noweb style references are used with parentheses versus without.

With:

@example
#+NAME: some-code
#+BEGIN_SRC python :var num=0 :results output :exports none
print(num*10)
#+END_SRC
@end example

this code block:

@example
#+BEGIN_SRC text :noweb yes
<<some-code>>
#+END_SRC
@end example

expands to:

@example
print(num*10)
@end example

Below, a similar Noweb style reference is used, but with parentheses, while
setting a variable @code{num} to 10:

@example
#+BEGIN_SRC text :noweb yes
<<some-code(num=10)>>
#+END_SRC
@end example

Note that now the expansion contains the @emph{results} of the code block
@code{some-code}, not the code block itself:

@example
100
@end example

For faster tangling of large Org mode files, set
@code{org-babel-use-quick-and-dirty-noweb-expansion} variable to @code{t}.
The speedup comes at the expense of not correctly resolving inherited values
of the @code{:noweb-ref} header argument.


@node Key bindings and useful functions
@section Key bindings and useful functions
@cindex code block, key bindings

Many common Org mode key sequences are re-bound depending on the context.

Active key bindings in code blocks:

@multitable @columnfractions 0.25 0.75
@kindex C-c C-c
@item @kbd{C-c C-c} @tab @code{org-babel-execute-src-block}
@kindex C-c C-o
@item @kbd{C-c C-o} @tab @code{org-babel-open-src-block-result}
@kindex M-UP
@item @kbd{M-@key{UP}}    @tab @code{org-babel-load-in-session}
@kindex M-DOWN
@item @kbd{M-@key{DOWN}}  @tab @code{org-babel-switch-to-session}
@end multitable

Active key bindings in Org mode buffer:

@multitable @columnfractions 0.5 0.5
@kindex C-c C-v p
@kindex C-c C-v C-p
@item @kbd{C-c C-v p} @ @ @r{or} @ @ @kbd{C-c C-v C-p} @tab @code{org-babel-previous-src-block}
@kindex C-c C-v n
@kindex C-c C-v C-n
@item @kbd{C-c C-v n} @ @ @r{or} @ @ @kbd{C-c C-v C-n} @tab @code{org-babel-next-src-block}
@kindex C-c C-v e
@kindex C-c C-v C-e
@item @kbd{C-c C-v e} @ @ @r{or} @ @ @kbd{C-c C-v C-e} @tab @code{org-babel-execute-maybe}
@kindex C-c C-v o
@kindex C-c C-v C-o
@item @kbd{C-c C-v o} @ @ @r{or} @ @ @kbd{C-c C-v C-o} @tab @code{org-babel-open-src-block-result}
@kindex C-c C-v v
@kindex C-c C-v C-v
@item @kbd{C-c C-v v} @ @ @r{or} @ @ @kbd{C-c C-v C-v} @tab @code{org-babel-expand-src-block}
@kindex C-c C-v u
@kindex C-c C-v C-u
@item @kbd{C-c C-v u} @ @ @r{or} @ @ @kbd{C-c C-v C-u} @tab @code{org-babel-goto-src-block-head}
@kindex C-c C-v g
@kindex C-c C-v C-g
@item @kbd{C-c C-v g} @ @ @r{or} @ @ @kbd{C-c C-v C-g} @tab @code{org-babel-goto-named-src-block}
@kindex C-c C-v r
@kindex C-c C-v C-r
@item @kbd{C-c C-v r} @ @ @r{or} @ @ @kbd{C-c C-v C-r} @tab @code{org-babel-goto-named-result}
@kindex C-c C-v b
@kindex C-c C-v C-b
@item @kbd{C-c C-v b} @ @ @r{or} @ @ @kbd{C-c C-v C-b} @tab @code{org-babel-execute-buffer}
@kindex C-c C-v s
@kindex C-c C-v C-s
@item @kbd{C-c C-v s} @ @ @r{or} @ @ @kbd{C-c C-v C-s} @tab @code{org-babel-execute-subtree}
@kindex C-c C-v d
@kindex C-c C-v C-d
@item @kbd{C-c C-v d} @ @ @r{or} @ @ @kbd{C-c C-v C-d} @tab @code{org-babel-demarcate-block}
@kindex C-c C-v t
@kindex C-c C-v C-t
@item @kbd{C-c C-v t} @ @ @r{or} @ @ @kbd{C-c C-v C-t} @tab @code{org-babel-tangle}
@kindex C-c C-v f
@kindex C-c C-v C-f
@item @kbd{C-c C-v f} @ @ @r{or} @ @ @kbd{C-c C-v C-f} @tab @code{org-babel-tangle-file}
@kindex C-c C-v c
@kindex C-c C-v C-c
@item @kbd{C-c C-v c} @ @ @r{or} @ @ @kbd{C-c C-v C-c} @tab @code{org-babel-check-src-block}
@kindex C-c C-v j
@kindex C-c C-v C-j
@item @kbd{C-c C-v j} @ @ @r{or} @ @ @kbd{C-c C-v C-j} @tab @code{org-babel-insert-header-arg}
@kindex C-c C-v l
@kindex C-c C-v C-l
@item @kbd{C-c C-v l} @ @ @r{or} @ @ @kbd{C-c C-v C-l} @tab @code{org-babel-load-in-session}
@kindex C-c C-v i
@kindex C-c C-v C-i
@item @kbd{C-c C-v i} @ @ @r{or} @ @ @kbd{C-c C-v C-i} @tab @code{org-babel-lob-ingest}
@kindex C-c C-v I
@kindex C-c C-v C-I
@item @kbd{C-c C-v I} @ @ @r{or} @ @ @kbd{C-c C-v C-I} @tab @code{org-babel-view-src-block-info}
@kindex C-c C-v z
@kindex C-c C-v C-z
@item @kbd{C-c C-v z} @ @ @r{or} @ @ @kbd{C-c C-v C-z} @tab @code{org-babel-switch-to-session-with-code}
@kindex C-c C-v a
@kindex C-c C-v C-a
@item @kbd{C-c C-v a} @ @ @r{or} @ @ @kbd{C-c C-v C-a} @tab @code{org-babel-sha1-hash}
@kindex C-c C-v h
@kindex C-c C-v C-h
@item @kbd{C-c C-v h} @ @ @r{or} @ @ @kbd{C-c C-v C-h} @tab @code{org-babel-describe-bindings}
@kindex C-c C-v x
@kindex C-c C-v C-x
@item @kbd{C-c C-v x} @ @ @r{or} @ @ @kbd{C-c C-v C-x} @tab @code{org-babel-do-key-sequence-in-edit-buffer}
@end multitable

@c Extended key bindings when control key is kept pressed:

@c @multitable @columnfractions 0.25 0.75
@c @item @kbd{C-c C-v C-a} @tab @code{org-babel-sha1-hash}
@c @item @kbd{C-c C-v C-b} @tab @code{org-babel-execute-buffer}
@c @item @kbd{C-c C-v C-f} @tab @code{org-babel-tangle-file}
@c @item @kbd{C-c C-v C-l} @tab @code{org-babel-lob-ingest}
@c @item @kbd{C-c C-v C-p} @tab @code{org-babel-expand-src-block}
@c @item @kbd{C-c C-v C-s} @tab @code{org-babel-execute-subtree}
@c @item @kbd{C-c C-v C-t} @tab @code{org-babel-tangle}
@c @item @kbd{C-c C-v C-z} @tab @code{org-babel-switch-to-session}
@c @end multitable

@node Batch execution
@section Batch execution
@cindex code block, batch execution
@cindex source code, batch execution

Org mode features, including working with source code facilities can be
invoked from the command line.  This enables building shell scripts for batch
processing, running automated system tasks, and expanding Org mode's
usefulness.

The sample script shows batch processing of multiple files using
@code{org-babel-tangle}.

@example
#!/bin/sh
# tangle files with org-mode
#
emacs -Q --batch --eval "
    (progn
      (require 'ob-tangle)
      (dolist (file command-line-args-left)
        (with-current-buffer (find-file-noselect file)
          (org-babel-tangle))))
  " "$@@"
@end example

@node Miscellaneous
@chapter Miscellaneous

@menu
* Completion::                  M-@key{TAB} guesses completions
* Easy templates::              Quick insertion of structural elements
* Speed keys::                  Electric commands at the beginning of a headline
* Code evaluation security::    Org mode files evaluate inline code
* Customization::               Adapting Org to changing tastes
* In-buffer settings::          Overview of the @code{#+KEYWORDS}
* The very busy C-c C-c key::   When in doubt, press C-c C-c
* Clean view::                  Getting rid of leading stars in the outline
* TTY keys::                    Using Org on a tty
* Interaction::                 With other Emacs packages
* org-crypt::                   Encrypting Org files
@end menu


@node Completion
@section Completion
@cindex completion, of @TeX{} symbols
@cindex completion, of TODO keywords
@cindex completion, of dictionary words
@cindex completion, of option keywords
@cindex completion, of tags
@cindex completion, of property keys
@cindex completion, of link abbreviations
@cindex @TeX{} symbol completion
@cindex TODO keywords completion
@cindex dictionary word completion
@cindex option keyword completion
@cindex tag completion
@cindex link abbreviations, completion of

Org has in-buffer completions.  Unlike minibuffer completions, which are
useful for quick command interactions, Org's in-buffer completions are more
suitable for content creation in Org documents.  Type one or more letters and
invoke the hot key to complete the text in-place.  Depending on the context
and the keys, Org will offer different types of completions.  No minibuffer
is involved.  Such mode-specific hot keys have become an integral part of
Emacs and Org provides several shortcuts.

@table @kbd
@kindex M-TAB
@item M-@key{TAB}
Complete word at point
@itemize @bullet
@item
At the beginning of a headline, complete TODO keywords.
@item
After @samp{\}, complete @TeX{} symbols supported by the exporter.
@item
After @samp{*}, complete headlines in the current buffer so that they
can be used in search links like @samp{[[*find this headline]]}.
@item
After @samp{:} in a headline, complete tags.  The list of tags is taken
from the variable @code{org-tag-alist} (possibly set through the
@code{#+TAGS} in-buffer option, @pxref{Setting tags}), or it is created
dynamically from all tags used in the current buffer.
@item
After @samp{:} and not in a headline, complete property keys.  The list
of keys is constructed dynamically from all keys used in the current
buffer.
@item
After @samp{[}, complete link abbreviations (@pxref{Link abbreviations}).
@item
After @samp{#+}, complete the special keywords like @samp{TYP_TODO} or
file-specific @samp{OPTIONS}.  After option keyword is complete, pressing
@kbd{M-@key{TAB}} again will insert example settings for that option.
@item
After @code{#+STARTUP:}, complete startup keywords.
@item
When the point is anywhere else, complete dictionary words using Ispell.
@end itemize
@kindex C-M-i
If your desktop intercepts the combo @kbd{M-@key{TAB}} to switch windows, use
@kbd{C-M-i} or @kbd{@key{ESC} @key{TAB}} as an alternative or customize your
environment.
@end table

@node Easy templates
@section Easy templates
@cindex template insertion
@cindex insertion, of templates

With just a few keystrokes, Org's easy templates inserts empty pairs of
structural elements, such as @code{#+BEGIN_SRC} and @code{#+END_SRC}.  Easy
templates use an expansion mechanism, which is native to Org, in a process
similar to @file{yasnippet} and other Emacs template expansion packages.

@kbd{<} @kbd{s} @kbd{@key{TAB}} expands to a @samp{src} code block.

@kbd{<} @kbd{l} @kbd{@key{TAB}} expands to:

#+BEGIN_EXPORT latex

#+END_EXPORT

Org comes with these pre-defined easy templates:

@multitable @columnfractions 0.1 0.9
@item @kbd{s} @tab @code{#+BEGIN_SRC ... #+END_SRC}
@item @kbd{e} @tab @code{#+BEGIN_EXAMPLE ... #+END_EXAMPLE}
@item @kbd{q} @tab @code{#+BEGIN_QUOTE ... #+END_QUOTE}
@item @kbd{v} @tab @code{#+BEGIN_VERSE ... #+END_VERSE}
@item @kbd{c} @tab @code{#+BEGIN_CENTER ... #+END_CENTER}
@item @kbd{C} @tab @code{#+BEGIN_COMMENT ... #+END_COMMENT}
@item @kbd{l} @tab @code{#+BEGIN_EXPORT latex ... #+END_EXPORT}
@item @kbd{L} @tab @code{#+LATEX:}
@item @kbd{h} @tab @code{#+BEGIN_EXPORT html ... #+END_EXPORT}
@item @kbd{H} @tab @code{#+HTML:}
@item @kbd{a} @tab @code{#+BEGIN_EXPORT ascii ... #+END_EXPORT}
@item @kbd{A} @tab @code{#+ASCII:}
@item @kbd{i} @tab @code{#+INDEX:} line
@item @kbd{I} @tab @code{#+INCLUDE:} line
@end multitable

More templates can added by customizing the variable
@code{org-structure-template-alist}, whose docstring has additional details.

@node Speed keys
@section Speed keys
@cindex speed keys

Single keystrokes can execute custom commands in an Org file when the cursor
is on a headline.  Without the extra burden of a meta or modifier key, Speed
Keys can speed navigation or execute custom commands.  Besides faster
navigation, Speed Keys may come in handy on small mobile devices that do not
have full keyboards.  Speed Keys may also work on TTY devices known for their
problems when entering Emacs keychords.

@vindex org-use-speed-commands
By default, Org has Speed Keys disabled.  To activate Speed Keys, set the
variable @code{org-use-speed-commands} to a non-@code{nil} value.  To trigger
a Speed Key, the cursor must be at the beginning of an Org headline, before
any of the stars.

@vindex org-speed-commands-user
@findex org-speed-command-help
Org comes with a pre-defined list of Speed Keys.  To add or modify Speed
Keys, customize the variable, @code{org-speed-commands-user}.  For more
details, see the variable's docstring.  With Speed Keys activated, @kbd{M-x
org-speed-command-help}, or @kbd{?} when cursor is at the beginning of an Org
headline, shows currently active Speed Keys, including the user-defined ones.


@node Code evaluation security
@section Code evaluation and security issues

Unlike plain text, running code comes with risk.  Each @samp{src} code block,
in terms of risk, is equivalent to an executable file.  Org therefore puts a
few confirmation prompts by default.  This is to alert the casual user from
accidentally running untrusted code.

For users who do not run code blocks or write code regularly, Org's default
settings should suffice.  However, some users may want to tweak the prompts
for fewer interruptions.  To weigh the risks of automatic execution of code
blocks, here are some details about code evaluation.

Org evaluates code in the following circumstances:

@table @i
@item Source code blocks
Org evaluates @samp{src} code blocks in an Org file during export.  Org also
evaluates a @samp{src} code block with the @kbd{C-c C-c} key chord.  Users
exporting or running code blocks must load files only from trusted sources.
Be wary of customizing variables that remove or alter default security
measures.

@defopt org-confirm-babel-evaluate
When @code{t}, Org prompts the user for confirmation before executing each
code block.  When @code{nil}, Org executes code blocks without prompting the
user for confirmation.  When this option is set to a custom function, Org
invokes the function with these two arguments: the source code language and
the body of the code block.  The custom function must return either a
@code{t} or @code{nil}, which determines if the user is prompted.  Each
source code language can be handled separately through this function
argument.
@end defopt

For example, this function enables execution of @samp{ditaa} code +blocks
without prompting:

@lisp
(defun my-org-confirm-babel-evaluate (lang body)
  (not (string= lang "ditaa")))  ; don't ask for ditaa
(setq org-confirm-babel-evaluate 'my-org-confirm-babel-evaluate)
@end lisp

@item Following @code{shell} and @code{elisp} links
Org has two link types that can also directly evaluate code (@pxref{External
links}).  Because such code is not visible, these links have a potential
risk.  Org therefore prompts the user when it encounters such links.  The
customization variables are:

@defopt org-confirm-shell-link-function
Function that prompts the user before executing a shell link.
@end defopt
@defopt org-confirm-elisp-link-function
Function that prompts the user before executing an Emacs Lisp link.
@end defopt

@item Formulas in tables
Org executes formulas in tables (@pxref{The spreadsheet}) either through the
@emph{calc} or the @emph{Emacs Lisp} interpreters.
@end table

@node Customization
@section Customization
@cindex customization
@cindex options, for customization
@cindex variables, for customization

Org has more than 500 variables for customization.  They can be accessed
through the usual @kbd{M-x org-customize @key{RET}} command.  Or through the
Org menu, @code{Org->Customization->Browse Org Group}.  Org also has per-file
settings for some variables (@pxref{In-buffer settings}).

@node In-buffer settings
@section Summary of in-buffer settings
@cindex in-buffer settings
@cindex special keywords
In-buffer settings start with @samp{#+}, followed by a keyword, a colon, and
then a word for each setting.  Org accepts multiple settings on the same
line.  Org also accepts multiple lines for a keyword.  This manual describes
these settings throughout.  A summary follows here.

@kbd{C-c C-c} activates any changes to the in-buffer settings.  Closing and
reopening the Org file in Emacs also activates the changes.

@vindex org-archive-location
@table @kbd
@item #+ARCHIVE: %s_done::
Sets the archive location of the agenda file.  This location applies to the
lines until the next @code{#+ARCHIVE} line, if any, in the Org file.  The
first archive location in the Org file also applies to any entries before it.
The corresponding variable is @code{org-archive-location}.
@item #+CATEGORY:
Sets the category of the agenda file, which applies to the entire document.
@item #+COLUMNS: %25ITEM ...
@cindex property, @code{COLUMNS}
Sets the default format for columns view.  Org uses this format for column
views where there is no @code{COLUMNS} property.
@item #+CONSTANTS: name1=value1 ...
@vindex org-table-formula-constants
@vindex org-table-formula
Set file-local values for constants that table formulas can use.  This line
sets the local variable @code{org-table-formula-constants-local}.  The global
version of this variable is @code{org-table-formula-constants}.
@item #+FILETAGS: :tag1:tag2:tag3:
Set tags that all entries in the file will inherit from here, including the
top-level entries.
@item #+LINK: linkword replace
@vindex org-link-abbrev-alist
Each line specifies one abbreviation for one link.  Use multiple
@code{#+LINK:} lines for more, @pxref{Link abbreviations}.  The corresponding
variable is @code{org-link-abbrev-alist}.
@item #+PRIORITIES: highest lowest default
@vindex org-highest-priority
@vindex org-lowest-priority
@vindex org-default-priority
This line sets the limits and the default for the priorities.  All three
must be either letters A--Z or numbers 0--9.  The highest priority must
have a lower ASCII number than the lowest priority.
@item #+PROPERTY: Property_Name Value
This line sets a default inheritance value for entries in the current
buffer, most useful for specifying the allowed values of a property.
@cindex @code{#+SETUPFILE}
@item #+SETUPFILE: file or URL
The setup file or a URL pointing to such file is for additional in-buffer
settings.  Org loads this file and parses it for any settings in it only when
Org opens the main file.  If URL is specified, the contents are downloaded
and stored in a temporary file cache.  @kbd{C-c C-c} on the settings line
will parse and load the file, and also reset the temporary file cache.  Org
also parses and loads the document during normal exporting process.  Org
parses the contents of this document as if it was included in the buffer.  It
can be another Org file.  To visit the file (not a URL), @kbd{C-c '} while
the cursor is on the line with the file name.
@item #+STARTUP:
@cindex @code{#+STARTUP}
Startup options Org uses when first visiting a file.

The first set of options deals with the initial visibility of the outline
tree.  The corresponding variable for global default settings is
@code{org-startup-folded} with a default value of @code{t}, which is the same
as @code{overview}.

@vindex org-startup-folded
@cindex @code{overview}, STARTUP keyword
@cindex @code{content}, STARTUP keyword
@cindex @code{showall}, STARTUP keyword
@cindex @code{showeverything}, STARTUP keyword
@example
overview         @r{top-level headlines only}
content          @r{all headlines}
showall          @r{no folding of any entries}
showeverything   @r{show even drawer contents}
@end example

@vindex org-startup-indented
@cindex @code{indent}, STARTUP keyword
@cindex @code{noindent}, STARTUP keyword
Dynamic virtual indentation is controlled by the variable
@code{org-startup-indented}
@example
indent     @r{start with @code{org-indent-mode} turned on}
noindent   @r{start with @code{org-indent-mode} turned off}
@end example

@vindex org-startup-align-all-tables
Aligns tables consistently upon visiting a file; useful for restoring
narrowed table columns.  The corresponding variable is
@code{org-startup-align-all-tables} with @code{nil} as default value.

@cindex @code{align}, STARTUP keyword
@cindex @code{noalign}, STARTUP keyword
@example
align      @r{align all tables}
noalign    @r{don't align tables on startup}
@end example

@vindex org-startup-with-inline-images
Whether Org should automatically display inline images.  The corresponding
variable is @code{org-startup-with-inline-images}, with a default value
@code{nil} to avoid delays when visiting a file.
@cindex @code{inlineimages}, STARTUP keyword
@cindex @code{noinlineimages}, STARTUP keyword
@example
inlineimages   @r{show inline images}
noinlineimages @r{don't show inline images on startup}
@end example

@vindex org-startup-with-latex-preview
Whether Org should automatically convert @LaTeX{} fragments to images.  The
variable @code{org-startup-with-latex-preview}, which controls this setting,
is set to @code{nil} by default to avoid startup delays.
@cindex @code{latexpreview}, STARTUP keyword
@cindex @code{nolatexpreview}, STARTUP keyword
@example
latexpreview   @r{preview @LaTeX{} fragments}
nolatexpreview @r{don't preview @LaTeX{} fragments}
@end example

@vindex org-log-done
@vindex org-log-note-clock-out
@vindex org-log-repeat
Logging the closing and reopening of TODO items and clock intervals can be
configured using these options (see variables @code{org-log-done},
@code{org-log-note-clock-out} and @code{org-log-repeat})
@cindex @code{logdone}, STARTUP keyword
@cindex @code{lognotedone}, STARTUP keyword
@cindex @code{nologdone}, STARTUP keyword
@cindex @code{lognoteclock-out}, STARTUP keyword
@cindex @code{nolognoteclock-out}, STARTUP keyword
@cindex @code{logrepeat}, STARTUP keyword
@cindex @code{lognoterepeat}, STARTUP keyword
@cindex @code{nologrepeat}, STARTUP keyword
@cindex @code{logreschedule}, STARTUP keyword
@cindex @code{lognotereschedule}, STARTUP keyword
@cindex @code{nologreschedule}, STARTUP keyword
@cindex @code{logredeadline}, STARTUP keyword
@cindex @code{lognoteredeadline}, STARTUP keyword
@cindex @code{nologredeadline}, STARTUP keyword
@cindex @code{logrefile}, STARTUP keyword
@cindex @code{lognoterefile}, STARTUP keyword
@cindex @code{nologrefile}, STARTUP keyword
@cindex @code{logdrawer}, STARTUP keyword
@cindex @code{nologdrawer}, STARTUP keyword
@cindex @code{logstatesreversed}, STARTUP keyword
@cindex @code{nologstatesreversed}, STARTUP keyword
@example
logdone             @r{record a timestamp when an item is marked DONE}
lognotedone         @r{record timestamp and a note when DONE}
nologdone           @r{don't record when items are marked DONE}
logrepeat           @r{record a time when reinstating a repeating item}
lognoterepeat       @r{record a note when reinstating a repeating item}
nologrepeat         @r{do not record when reinstating repeating item}
lognoteclock-out    @r{record a note when clocking out}
nolognoteclock-out  @r{don't record a note when clocking out}
logreschedule       @r{record a timestamp when scheduling time changes}
lognotereschedule   @r{record a note when scheduling time changes}
nologreschedule     @r{do not record when a scheduling date changes}
logredeadline       @r{record a timestamp when deadline changes}
lognoteredeadline   @r{record a note when deadline changes}
nologredeadline     @r{do not record when a deadline date changes}
logrefile           @r{record a timestamp when refiling}
lognoterefile       @r{record a note when refiling}
nologrefile         @r{do not record when refiling}
logdrawer           @r{store log into drawer}
nologdrawer         @r{store log outside of drawer}
logstatesreversed   @r{reverse the order of states notes}
nologstatesreversed @r{do not reverse the order of states notes}
@end example

@vindex org-hide-leading-stars
@vindex org-odd-levels-only
These options hide leading stars in outline headings, and indent outlines.
The corresponding variables are @code{org-hide-leading-stars} and
@code{org-odd-levels-only}, both with a default setting of @code{nil}
(meaning @code{showstars} and @code{oddeven}).
@cindex @code{hidestars}, STARTUP keyword
@cindex @code{showstars}, STARTUP keyword
@cindex @code{odd}, STARTUP keyword
@cindex @code{even}, STARTUP keyword
@example
hidestars  @r{hide all stars on the headline except one.}
showstars  @r{show all stars on the headline}
indent     @r{virtual indents according to the outline level}
noindent   @r{no virtual indents}
odd        @r{show odd outline levels only (1,3,...)}
oddeven    @r{show all outline levels}
@end example

@vindex org-put-time-stamp-overlays
@vindex org-time-stamp-overlay-formats
To turn on custom format overlays over timestamps (variables
@code{org-put-time-stamp-overlays} and
@code{org-time-stamp-overlay-formats}), use
@cindex @code{customtime}, STARTUP keyword
@example
customtime @r{overlay custom time format}
@end example

@vindex constants-unit-system
The following options influence the table spreadsheet (variable
@code{constants-unit-system}).
@cindex @code{constcgs}, STARTUP keyword
@cindex @code{constSI}, STARTUP keyword
@example
constcgs   @r{@file{constants.el} should use the c-g-s unit system}
constSI    @r{@file{constants.el} should use the SI unit system}
@end example

@vindex org-footnote-define-inline
@vindex org-footnote-auto-label
@vindex org-footnote-auto-adjust
For footnote settings, use the following keywords.  The corresponding
variables are @code{org-footnote-define-inline},
@code{org-footnote-auto-label}, and @code{org-footnote-auto-adjust}.
@cindex @code{fninline}, STARTUP keyword
@cindex @code{nofninline}, STARTUP keyword
@cindex @code{fnlocal}, STARTUP keyword
@cindex @code{fnprompt}, STARTUP keyword
@cindex @code{fnauto}, STARTUP keyword
@cindex @code{fnconfirm}, STARTUP keyword
@cindex @code{fnplain}, STARTUP keyword
@cindex @code{fnadjust}, STARTUP keyword
@cindex @code{nofnadjust}, STARTUP keyword
@example
fninline    @r{define footnotes inline}
fnnoinline  @r{define footnotes in separate section}
fnlocal     @r{define footnotes near first reference, but not inline}
fnprompt    @r{prompt for footnote labels}
fnauto      @r{create @code{[fn:1]}-like labels automatically (default)}
fnconfirm   @r{offer automatic label for editing or confirmation}
fnplain     @r{create @code{[1]}-like labels automatically}
fnadjust    @r{automatically renumber and sort footnotes}
nofnadjust  @r{do not renumber and sort automatically}
@end example

@cindex @code{org-hide-block-startup}
To hide blocks on startup, use these keywords.  The corresponding variable is
@code{org-hide-block-startup}.
@cindex @code{hideblocks}, STARTUP keyword
@cindex @code{nohideblocks}, STARTUP keyword
@example
hideblocks   @r{Hide all begin/end blocks on startup}
nohideblocks @r{Do not hide blocks on startup}
@end example

@cindex @code{org-pretty-entities}
The display of entities as UTF-8 characters is governed by the variable
@code{org-pretty-entities} and the keywords
@cindex @code{entitiespretty}, STARTUP keyword
@cindex @code{entitiesplain}, STARTUP keyword
@example
entitiespretty  @r{Show entities as UTF-8 characters where possible}
entitiesplain   @r{Leave entities plain}
@end example

@item #+TAGS:  TAG1(c1) TAG2(c2)
@vindex org-tag-alist
These lines specify valid tags for this file.  Org accepts multiple tags
lines.  Tags could correspond to the @emph{fast tag selection} keys.  The
corresponding variable is @code{org-tag-alist}.
@cindex @code{#+TBLFM}
@item #+TBLFM:
This line is for formulas for the table directly above.  A table can have
multiple @code{#+TBLFM:} lines.  On table recalculation, Org applies only the
first @code{#+TBLFM:} line.  For details see @ref{Using multiple #+TBLFM
lines} in @ref{Editing and debugging formulas}.
@item #+TITLE:, #+AUTHOR:, #+EMAIL:, #+LANGUAGE:, #+DATE:,
@itemx #+OPTIONS:, #+BIND:,
@itemx #+SELECT_TAGS:, #+EXCLUDE_TAGS:
These lines provide settings for exporting files.  For more details see
@ref{Export settings}.
@item #+TODO:    #+SEQ_TODO:   #+TYP_TODO:
@vindex org-todo-keywords
These lines set the TODO keywords and their significance to the current file.
The corresponding variable is @code{org-todo-keywords}.
@end table

@node The very busy C-c C-c key
@section The very busy C-c C-c key
@kindex C-c C-c
@cindex @kbd{C-c C-c}, overview

The @kbd{C-c C-c} key in Org serves many purposes depending on the context.
It is probably the most over-worked, multi-purpose key combination in Org.
Its uses are well-documented through out this manual, but here is a
consolidated list for easy reference.

@itemize @minus
@item
If any highlights shown in the buffer from the creation of a sparse tree, or
from clock display, remove such highlights.
@item
If the cursor is in one of the special @code{#+KEYWORD} lines, scan the
buffer for these lines and update the information.  Also reset the Org file
cache used to temporary store the contents of URLs used as values for
keywords like @code{#+SETUPFILE}.
@item
If the cursor is inside a table, realign the table.  The table realigns even
if automatic table editor is turned off.
@item
If the cursor is on a @code{#+TBLFM} line, re-apply the formulas to
the entire table.
@item
If the current buffer is a capture buffer, close the note and file it.  With
a prefix argument, also jump to the target location after saving the note.
@item
If the cursor is on a @code{<<<target>>>}, update radio targets and
corresponding links in this buffer.
@item
If the cursor is on a property line or at the start or end of a property
drawer, offer property commands.
@item
If the cursor is at a footnote reference, go to the corresponding
definition, and @emph{vice versa}.
@item
If the cursor is on a statistics cookie, update it.
@item
If the cursor is in a plain list item with a checkbox, toggle the status
of the checkbox.
@item
If the cursor is on a numbered item in a plain list, renumber the
ordered list.
@item
If the cursor is on the @code{#+BEGIN} line of a dynamic block, the
block is updated.
@item
If the cursor is at a timestamp, fix the day name in the timestamp.
@end itemize

@node Clean view
@section A cleaner outline view
@cindex hiding leading stars
@cindex dynamic indentation
@cindex odd-levels-only outlines
@cindex clean outline view

Org's default outline with stars and no indents can become too cluttered for
short documents.  For @emph{book-like} long documents, the effect is not as
noticeable.  Org provides an alternate stars and indentation scheme, as shown
on the right in the following table.  It uses only one star and indents text
to line with the heading:

@example
@group
* Top level headline             |    * Top level headline
** Second level                  |      * Second level
*** 3rd level                    |        * 3rd level
some text                        |          some text
*** 3rd level                    |        * 3rd level
more text                        |          more text
* Another top level headline     |    * Another top level headline
@end group
@end example

@noindent

To turn this mode on, use the minor mode, @code{org-indent-mode}.  Text lines
that are not headlines are prefixed with spaces to vertically align with the
headline text@footnote{The @code{org-indent-mode} also sets the
@code{wrap-prefix} correctly for indenting and wrapping long lines of
headlines or text.  This minor mode handles @code{visual-line-mode} and
directly applied settings through @code{word-wrap}.}.

To make more horizontal space, the headlines are shifted by two stars.  This
can be configured by the @code{org-indent-indentation-per-level} variable.
Only one star on each headline is visible, the rest are masked with the same
font color as the background.  This font face can be configured with the
@code{org-hide} variable.

Note that turning on @code{org-indent-mode} sets
@code{org-hide-leading-stars} to @code{t} and @code{org-adapt-indentation} to
@code{nil}; @samp{2.} below shows how this works.

To globally turn on @code{org-indent-mode} for all files, customize the
variable @code{org-startup-indented}.

To turn on indenting for individual files, use @code{#+STARTUP} option as
follows:

@example
#+STARTUP: indent
@end example

Indent on startup makes Org use hard spaces to align text with headings as
shown in examples below.

@enumerate
@item
@emph{Indentation of text below headlines}@*
Indent text to align with the headline.

@example
*** 3rd level
    more text, now indented
@end example

@vindex org-adapt-indentation
Org adapts indentations with paragraph filling, line wrapping, and structure
editing@footnote{Also see the variable @code{org-adapt-indentation}.}.

@item
@vindex org-hide-leading-stars
@emph{Hiding leading stars}@* Org can make leading stars invisible.  For
global preference, configure the variable @code{org-hide-leading-stars}.  For
per-file preference, use these file @code{#+STARTUP} options:

@example
#+STARTUP: hidestars
#+STARTUP: showstars
@end example

With stars hidden, the tree is shown as:

@example
@group
* Top level headline
 * Second level
  * 3rd level
  ...
@end group
@end example

@noindent
@vindex org-hide @r{(face)}
Because Org makes the font color same as the background color to hide to
stars, sometimes @code{org-hide} face may need tweaking to get the effect
right.  For some black and white combinations, @code{grey90} on a white
background might mask the stars better.

@item
@vindex org-odd-levels-only
Using stars for only odd levels, 1, 3, 5, @dots{}, can also clean up the
clutter.  This removes two stars from each level@footnote{Because
@samp{LEVEL=2} has 3 stars, @samp{LEVEL=3} has 4 stars, and so on}.  For Org
to properly handle this cleaner structure during edits and exports, configure
the variable @code{org-odd-levels-only}.  To set this per-file, use either
one of the following lines:

@example
#+STARTUP: odd
#+STARTUP: oddeven
@end example

To switch between single and double stars layouts, use @kbd{M-x
org-convert-to-odd-levels @key{RET}} and @kbd{M-x
org-convert-to-oddeven-levels @key{RET}}.
@end enumerate

@node TTY keys
@section Using Org on a tty
@cindex tty key bindings

Org provides alternative key bindings for TTY and modern mobile devices that
cannot handle cursor keys and complex modifier key chords.  Some of these
workarounds may be more cumbersome than necessary.  Users should look into
customizing these further based on their usage needs.  For example, the
normal @kbd{S-@key{cursor}} for editing timestamp might be better with
@kbd{C-c .} chord.

@multitable @columnfractions 0.15 0.2 0.1 0.2
@item @b{Default} @tab @b{Alternative 1} @tab @b{Speed key} @tab @b{Alternative 2}
@item @kbd{S-@key{TAB}}     @tab @kbd{C-u @key{TAB}}       @tab @kbd{C} @tab
@item @kbd{M-@key{LEFT}}    @tab @kbd{C-c C-x l}           @tab @kbd{l} @tab @kbd{@key{Esc} @key{LEFT}}
@item @kbd{M-S-@key{LEFT}}  @tab @kbd{C-c C-x L}           @tab @kbd{L} @tab
@item @kbd{M-@key{RIGHT}}   @tab @kbd{C-c C-x r}           @tab @kbd{r} @tab @kbd{@key{Esc} @key{RIGHT}}
@item @kbd{M-S-@key{RIGHT}} @tab @kbd{C-c C-x R}           @tab @kbd{R} @tab
@item @kbd{M-@key{UP}}      @tab @kbd{C-c C-x u}           @tab @kbd{ } @tab @kbd{@key{Esc} @key{UP}}
@item @kbd{M-S-@key{UP}}    @tab @kbd{C-c C-x U}           @tab @kbd{U} @tab
@item @kbd{M-@key{DOWN}}    @tab @kbd{C-c C-x d}           @tab @kbd{ } @tab @kbd{@key{Esc} @key{DOWN}}
@item @kbd{M-S-@key{DOWN}}  @tab @kbd{C-c C-x D}           @tab @kbd{D} @tab
@item @kbd{S-@key{RET}}     @tab @kbd{C-c C-x c}           @tab @kbd{ } @tab
@item @kbd{M-@key{RET}}     @tab @kbd{C-c C-x m}           @tab @kbd{ } @tab @kbd{@key{Esc} @key{RET}}
@item @kbd{M-S-@key{RET}}   @tab @kbd{C-c C-x M}           @tab @kbd{ } @tab
@item @kbd{S-@key{LEFT}}    @tab @kbd{C-c @key{LEFT}}      @tab @kbd{ } @tab
@item @kbd{S-@key{RIGHT}}   @tab @kbd{C-c @key{RIGHT}}     @tab @kbd{ } @tab
@item @kbd{S-@key{UP}}      @tab @kbd{C-c @key{UP}}        @tab @kbd{ } @tab
@item @kbd{S-@key{DOWN}}    @tab @kbd{C-c @key{DOWN}}      @tab @kbd{ } @tab
@item @kbd{C-S-@key{LEFT}}  @tab @kbd{C-c C-x @key{LEFT}}  @tab @kbd{ } @tab
@item @kbd{C-S-@key{RIGHT}} @tab @kbd{C-c C-x @key{RIGHT}} @tab @kbd{ } @tab
@end multitable


@node Interaction
@section Interaction with other packages
@cindex packages, interaction with other
Org's compatibility and the level of interaction with other Emacs packages
are documented here.


@menu
* Cooperation::                 Packages Org cooperates with
* Conflicts::                   Packages that lead to conflicts
@end menu

@node Cooperation
@subsection Packages that Org cooperates with

@table @asis
@cindex @file{calc.el}
@cindex Gillespie, Dave
@item @file{calc.el} by Dave Gillespie
Org uses the Calc package for tables to implement spreadsheet functionality
(@pxref{The spreadsheet}).  Org also uses Calc for embedded calculations.
@xref{Embedded Mode, , Embedded Mode, calc, GNU Emacs Calc Manual}.
@item @file{constants.el} by Carsten Dominik
@cindex @file{constants.el}
@cindex Dominik, Carsten
@vindex org-table-formula-constants
Org can use names for constants in formulas in tables.  Org can also use
calculation suffixes for units, such as @samp{M} for @samp{Mega}.  For a
standard collection of such constants, install the @file{constants} package.
Install version 2.0 of this package, available at
@url{https://staff.fnwi.uva.nl/c.dominik/Tools/}.  Org checks if the function
@code{constants-get} has been autoloaded.  Installation instructions are in
the file, @file{constants.el}.
@item @file{cdlatex.el} by Carsten Dominik
@cindex @file{cdlatex.el}
@cindex Dominik, Carsten
Org mode can use CD@LaTeX{} package to efficiently enter @LaTeX{} fragments
into Org files (@pxref{CDLaTeX mode}).
@item @file{imenu.el} by Ake Stenhoff and Lars Lindberg
@cindex @file{imenu.el}
Imenu creates dynamic menus based on an index of items in a file.  Org mode
supports Imenu menus.  Enable it with a mode hook as follows:
@lisp
(add-hook 'org-mode-hook
          (lambda () (imenu-add-to-menubar "Imenu")))
@end lisp
@vindex org-imenu-depth
By default the Imenu index is two levels deep.  Change the index depth using
thes variable, @code{org-imenu-depth}.
@item @file{speedbar.el} by Eric M. Ludlam
@cindex @file{speedbar.el}
@cindex Ludlam, Eric M.
Speedbar package creates a special Emacs frame for displaying files and index
items in files.  Org mode supports Speedbar; users can drill into Org files
directly from the Speedbar.  The @kbd{<} in the Speedbar frame tweaks the
agenda commands to that file or to a subtree.
@cindex @file{table.el}
@item @file{table.el} by Takaaki Ota
@kindex C-c C-c
@cindex table editor, @file{table.el}
@cindex @file{table.el}
@cindex Ota, Takaaki

Complex ASCII tables with automatic line wrapping, column- and row-spanning,
and alignment can be created using the Emacs table package by Takaaki Ota.
Org mode recognizes such tables and export them properly.  @kbd{C-c '} to
edit these tables in a special buffer, much like Org's @samp{src} code
blocks.  Because of interference with other Org mode functionality, Takaaki
Ota tables cannot be edited directly in the Org buffer.
@table @kbd
@orgcmd{C-c ',org-edit-special}
Edit a @file{table.el} table.  Works when the cursor is in a table.el table.
@c
@orgcmd{C-c ~,org-table-create-with-table.el}
Insert a @file{table.el} table.  If there is already a table at point, this
command converts it between the @file{table.el} format and the Org mode
format.  See the documentation string of the command @code{org-convert-table}
for details.
@end table
@end table

@node Conflicts
@subsection Packages that conflict with Org mode

@table @asis

@cindex @code{shift-selection-mode}
@vindex org-support-shift-select
In Emacs, @code{shift-selection-mode} combines cursor motions with shift key
to enlarge regions.  Emacs sets this mode by default.  This conflicts with
Org's use of @kbd{S-@key{cursor}} commands to change timestamps, TODO
keywords, priorities, and item bullet types, etc.  Since @kbd{S-@key{cursor}}
commands outside of specific contexts don't do anything, Org offers the
variable @code{org-support-shift-select} for customization.  Org mode
accommodates shift selection by (i) making it available outside of the
special contexts where special commands apply, and (ii) extending an
existing active region even if the cursor moves across a special context.

@item @file{CUA.el} by Kim. F. Storm
@cindex @file{CUA.el}
@cindex Storm, Kim. F.
@vindex org-replace-disputed-keys
Org key bindings conflict with @kbd{S-<cursor>} keys used by CUA mode.  For
Org to relinquish these bindings to CUA mode, configure the variable
@code{org-replace-disputed-keys}.  When set, Org moves the following key
bindings in Org files, and in the agenda buffer (but not during date
selection).

@example
S-@key{UP}      @result{}  M-p             S-@key{DOWN}     @result{}  M-n
S-@key{LEFT}    @result{}  M--             S-@key{RIGHT}    @result{}  M-+
C-S-@key{LEFT}  @result{}  M-S--           C-S-@key{RIGHT}  @result{}  M-S-+
@end example

@vindex org-disputed-keys
Yes, these are unfortunately more difficult to remember.  To define a
different replacement keys, look at the variable @code{org-disputed-keys}.

@item @file{ecomplete.el} by Lars Magne Ingebrigtsen @email{larsi@@gnus.org}
@cindex @file{ecomplete.el}

Ecomplete provides ``electric'' address completion in address header
lines in message buffers.  Sadly Orgtbl mode cuts ecompletes power
supply: No completion happens when Orgtbl mode is enabled in message
buffers while entering text in address header lines.  If one wants to
use ecomplete one should @emph{not} follow the advice to automagically
turn on Orgtbl mode in message buffers (see @ref{Orgtbl mode}), but
instead---after filling in the message headers---turn on Orgtbl mode
manually when needed in the messages body.

@item @file{filladapt.el} by Kyle Jones
@cindex @file{filladapt.el}

Org mode tries to do the right thing when filling paragraphs, list items and
other elements.  Many users reported problems using both @file{filladapt.el}
and Org mode, so a safe thing to do is to disable filladapt like this:

@lisp
(add-hook 'org-mode-hook 'turn-off-filladapt-mode)
@end lisp

@item @file{yasnippet.el}
@cindex @file{yasnippet.el}
The way Org mode binds the @key{TAB} key (binding to @code{[tab]} instead of
@code{"\t"}) overrules YASnippet's access to this key.  The following code
fixed this problem:

@lisp
(add-hook 'org-mode-hook
          (lambda ()
            (setq-local yas/trigger-key [tab])
            (define-key yas/keymap [tab] 'yas/next-field-or-maybe-expand)))
@end lisp

The latest version of yasnippet doesn't play well with Org mode.  If the
above code does not fix the conflict, first define the following function:

@lisp
(defun yas/org-very-safe-expand ()
  (let ((yas/fallback-behavior 'return-nil)) (yas/expand)))
@end lisp

Then tell Org mode to use that function:

@lisp
(add-hook 'org-mode-hook
          (lambda ()
            (make-variable-buffer-local 'yas/trigger-key)
            (setq yas/trigger-key [tab])
            (add-to-list 'org-tab-first-hook 'yas/org-very-safe-expand)
            (define-key yas/keymap [tab] 'yas/next-field)))
@end lisp

@item @file{windmove.el} by Hovav Shacham
@cindex @file{windmove.el}
This package also uses the @kbd{S-<cursor>} keys, so everything written
in the paragraph above about CUA mode also applies here.  If you want make
the windmove function active in locations where Org mode does not have
special functionality on @kbd{S-@key{cursor}}, add this to your
configuration:

@lisp
;; Make windmove work in org-mode:
(add-hook 'org-shiftup-final-hook 'windmove-up)
(add-hook 'org-shiftleft-final-hook 'windmove-left)
(add-hook 'org-shiftdown-final-hook 'windmove-down)
(add-hook 'org-shiftright-final-hook 'windmove-right)
@end lisp

@item @file{viper.el} by Michael Kifer
@cindex @file{viper.el}
@kindex C-c /
Viper uses @kbd{C-c /} and therefore makes this key not access the
corresponding Org mode command @code{org-sparse-tree}.  You need to find
another key for this command, or override the key in
@code{viper-vi-global-user-map} with

@lisp
(define-key viper-vi-global-user-map "C-c /" 'org-sparse-tree)
@end lisp



@end table

@node org-crypt
@section org-crypt.el
@cindex @file{org-crypt.el}
@cindex @code{org-decrypt-entry}

Org crypt encrypts the text of an Org entry, but not the headline, or
properties.  Org crypt uses the Emacs EasyPG library to encrypt and decrypt.

Any text below a headline that has a @samp{:crypt:} tag will be automatically
be encrypted when the file is saved.  To use a different tag, customize the
@code{org-crypt-tag-matcher} variable.

Suggested Org crypt settings in Emacs init file:

@lisp
(require 'org-crypt)
(org-crypt-use-before-save-magic)
(setq org-tags-exclude-from-inheritance '("crypt"))

(setq org-crypt-key nil)
  ;; GPG key to use for encryption
  ;; Either the Key ID or set to nil to use symmetric encryption.

(setq auto-save-default nil)
  ;; Auto-saving does not cooperate with org-crypt.el: so you need
  ;; to turn it off if you plan to use org-crypt.el quite often.
  ;; Otherwise, you'll get an (annoying) message each time you
  ;; start Org.

  ;; To turn it off only locally, you can insert this:
  ;;
  ;; # -*- buffer-auto-save-file-name: nil; -*-
@end lisp

Excluding the crypt tag from inheritance prevents encrypting previously
encrypted text.

@node Hacking
@appendix Hacking
@cindex hacking

This appendix covers some areas where users can extend the functionality of
Org.

@menu
* Hooks::                       How to reach into Org's internals
* Add-on packages::             Available extensions
* Adding hyperlink types::      New custom link types
* Adding export back-ends::     How to write new export back-ends
* Context-sensitive commands::  How to add functionality to such commands
* Tables in arbitrary syntax::  Orgtbl for @LaTeX{} and other programs
* Dynamic blocks::              Automatically filled blocks
* Special agenda views::        Customized views
* Speeding up your agendas::    Tips on how to speed up your agendas
* Extracting agenda information::  Post-processing of agenda information
* Using the property API::      Writing programs that use entry properties
* Using the mapping API::       Mapping over all or selected entries
@end menu

@node Hooks
@section Hooks
@cindex hooks

Org has a large number of hook variables for adding functionality.  This
appendix illustrates using a few.  A complete list of hooks with
documentation is maintained by the Worg project at
@uref{https://orgmode.org/worg/doc.html#hooks}.

@node Add-on packages
@section Add-on packages
@cindex add-on packages

Various authors wrote a large number of add-on packages for Org.

These packages are not part of Emacs, but they are distributed as contributed
packages with the separate release available at @uref{https://orgmode.org}.
See the @file{contrib/README} file in the source code directory for a list of
contributed files.  Worg page with more information is at:
@uref{https://orgmode.org/worg/org-contrib/}.

@node Adding hyperlink types
@section Adding hyperlink types
@cindex hyperlinks, adding new types

Org has many built-in hyperlink types (@pxref{Hyperlinks}), and an interface
for adding new link types.  The example file, @file{org-man.el}, shows the
process of adding Org links to Unix man pages, which look like this:
@samp{[[man:printf][The printf manpage]]}:

@lisp
;;; org-man.el - Support for links to manpages in Org

(require 'org)

(org-add-link-type "man" 'org-man-open)
(add-hook 'org-store-link-functions 'org-man-store-link)

(defcustom org-man-command 'man
  "The Emacs command to be used to display a man page."
  :group 'org-link
  :type '(choice (const man) (const woman)))

(defun org-man-open (path)
  "Visit the manpage on PATH.
PATH should be a topic that can be thrown at the man command."
  (funcall org-man-command path))

(defun org-man-store-link ()
  "Store a link to a manpage."
  (when (memq major-mode '(Man-mode woman-mode))
    ;; This is a man page, we do make this link
    (let* ((page (org-man-get-page-name))
           (link (concat "man:" page))
           (description (format "Manpage for %s" page)))
      (org-store-link-props
       :type "man"
       :link link
       :description description))))

(defun org-man-get-page-name ()
  "Extract the page name from the buffer name."
  ;; This works for both `Man-mode' and `woman-mode'.
  (if (string-match " \\(\\S-+\\)\\*" (buffer-name))
      (match-string 1 (buffer-name))
    (error "Cannot create link to this man page")))

(provide 'org-man)

;;; org-man.el ends here
@end lisp

@noindent
To activate links to man pages in Org, enter this in the init file:

@lisp
(require 'org-man)
@end lisp

@noindent
A review of @file{org-man.el}:
@enumerate
@item
First, @code{(require 'org)} ensures @file{org.el} is loaded.
@item
The @code{org-add-link-type} defines a new link type with @samp{man} prefix.
The call contains the function to call that follows the link type.
@item
@vindex org-store-link-functions
The next line adds a function to @code{org-store-link-functions} that records
a useful link with the command @kbd{C-c l} in a buffer displaying a man page.
@end enumerate

The rest of the file defines necessary variables and functions.  First is the
customization variable @code{org-man-command}.  It has two options,
@code{man} and @code{woman}.  Next is a function whose argument is the link
path, which for man pages is the topic of the man command.  To follow the
link, the function calls the @code{org-man-command} to display the man page.


@kbd{C-c l} constructs and stores the link.

@kbd{C-c l} calls the function @code{org-man-store-link}, which first checks
if the @code{major-mode} is appropriate.  If check fails, the function
returns @code{nil}.  Otherwise the function makes a link string by combining
the @samp{man:} prefix with the man topic.  The function then calls
@code{org-store-link-props} with @code{:type} and @code{:link} properties.  A
@code{:description} property is an optional string that is displayed when the
function inserts the link in the Org buffer.

@kbd{C-c C-l} inserts the stored link.

To define new link types, define a function that implements completion
support with @kbd{C-c C-l}.  This function should not accept any arguments
but return the appropriate prefix and complete link string.

@node Adding export back-ends
@section Adding export back-ends
@cindex Export, writing back-ends

Org's export engine makes it easy for writing new back-ends.  The framework
on which the engine was built makes it easy to derive new back-ends from
existing ones.

The two main entry points to the export engine are:
@code{org-export-define-backend} and
@code{org-export-define-derived-backend}.  To grok these functions, see
@file{ox-latex.el} for an example of defining a new back-end from scratch,
and @file{ox-beamer.el} for an example of deriving from an existing engine.

For creating a new back-end from scratch, first set its name as a symbol in
an alist consisting of elements and export functions.  To make the back-end
visible to the export dispatcher, set @code{:menu-entry} keyword.  For export
options specific to this back-end, set the @code{:options-alist}.

For creating a new back-end from an existing one, set @code{:translate-alist}
to an alist of export functions.  This alist replaces the parent back-end
functions.

For complete documentation, see
@url{https://orgmode.org/worg/dev/org-export-reference.html, the Org Export
Reference on Worg}.

@node Context-sensitive commands
@section Context-sensitive commands
@cindex context-sensitive commands, hooks
@cindex add-ons, context-sensitive commands
@vindex org-ctrl-c-ctrl-c-hook

Org has facilities for building context sensitive commands.  Authors of Org
add-ons can tap into this functionality.

Some Org commands change depending on the context.  The most important
example of this behavior is the @kbd{C-c C-c} (@pxref{The very busy C-c C-c
key}).  Other examples are @kbd{M-cursor} and @kbd{M-S-cursor}.

These context sensitive commands work by providing a function that detects
special context for that add-on and executes functionality appropriate for
that context.

@node Tables in arbitrary syntax
@section Tables and lists in arbitrary syntax
@cindex tables, in other modes
@cindex lists, in other modes
@cindex Orgtbl mode

Because of Org's success in handling tables with Orgtbl, a frequently asked
feature is to Org's usability functions to other table formats native to
other modem's, such as @LaTeX{}.  This would be hard to do in a general way
without complicated customization nightmares.  Moreover, that would take Org
away from its simplicity roots that Orgtbl has proven.  There is, however, an
alternate approach to accomplishing the same.

This approach involves implementing a custom @emph{translate} function that
operates on a native Org @emph{source table} to produce a table in another
format.  This strategy would keep the excellently working Orgtbl simple and
isolate complications, if any, confined to the translate function.  To add
more alien table formats, we just add more translate functions.  Also the
burden of developing custom translate functions for new table formats will be
in the hands of those who know those formats best.

For an example of how this strategy works, see Orgstruct mode.  In that mode,
Bastien added the ability to use Org's facilities to edit and re-structure
lists.  He did by turning @code{orgstruct-mode} on, and then exporting the
list locally to another format, such as HTML, @LaTeX{} or Texinfo.

@menu
* Radio tables::                Sending and receiving radio tables
* A @LaTeX{} example::          Step by step, almost a tutorial
* Translator functions::        Copy and modify
* Radio lists::                 Sending and receiving lists
@end menu

@node Radio tables
@subsection Radio tables
@cindex radio tables

Radio tables are target locations for translated tables that are not near
their source.  Org finds the target location and inserts the translated
table.

The key to finding the target location are the magic words @code{BEGIN/END
RECEIVE ORGTBL}.  They have to appear as comments in the current mode.  If
the mode is C, then:

@example
/* BEGIN RECEIVE ORGTBL table_name */
/* END RECEIVE ORGTBL table_name */
@end example

@noindent
At the location of source, Org needs a special line to direct Orgtbl to
translate and to find the target for inserting the translated table.  For
example:
@cindex @code{#+ORGTBL}
@example
#+ORGTBL: SEND table_name translation_function arguments...
@end example

@noindent
@code{table_name} is the table's reference name, which is also used in the
receiver lines, and the @code{translation_function} is the Lisp function that
translates.  This line, in addition, may also contain alternating key and
value arguments at the end.  The translation function gets these values as a
property list.  A few standard parameters are already recognized and acted
upon before the translation function is called:

@table @code
@item :skip N
Skip the first N lines of the table.  Hlines do count; include them if they
are to be skipped.

@item :skipcols (n1 n2 ...)
List of columns to be skipped.  First Org automatically discards columns with
calculation marks and then sends the table to the translator function, which
then skips columns as specified in @samp{skipcols}.
@end table

@noindent
To keep the source table intact in the buffer without being disturbed when
the source file is compiled or otherwise being worked on, use one of these
strategies:

@itemize @bullet
@item
Place the table in a block comment.  For example, in C mode you could wrap
the table between @samp{/*} and @samp{*/} lines.
@item
Put the table after an @samp{END} statement.  For example @samp{\bye} in
@TeX{} and @samp{\end@{document@}} in @LaTeX{}.
@item
Comment and uncomment each line of the table during edits.  The @kbd{M-x
orgtbl-toggle-comment @key{RET}} command makes toggling easy.
@end itemize

@node A @LaTeX{} example
@subsection A @LaTeX{} example of radio tables
@cindex @LaTeX{}, and Orgtbl mode

To wrap a source table in @LaTeX{}, use the @code{comment} environment
provided by @file{comment.sty}.  To activate it, put
@code{\usepackage@{comment@}} in the document header.  Orgtbl mode inserts a
radio table skeleton@footnote{By default this works only for @LaTeX{}, HTML,
and Texinfo.  Configure the variable @code{orgtbl-radio-table-templates} to
install templates for other export formats.}  with the command @kbd{M-x
orgtbl-insert-radio-table @key{RET}}, which prompts for a table name.  For
example, if @samp{salesfigures} is the name, the template inserts:

@cindex @code{#+ORGTBL}, @samp{SEND}
@example
% BEGIN RECEIVE ORGTBL salesfigures
% END RECEIVE ORGTBL salesfigures
\begin@{comment@}
#+ORGTBL: SEND salesfigures orgtbl-to-latex
| | |
\end@{comment@}
@end example

@noindent
@vindex @LaTeX{}-verbatim-environments
The line @code{#+ORGTBL: SEND} tells Orgtbl mode to use the function
@code{orgtbl-to-latex} to convert the table to @LaTeX{} format, then insert
the table at the target (receive) location named @code{salesfigures}.  Now
the table is ready for data entry.  It can even use spreadsheet
features@footnote{If the @code{#+TBLFM} line contains an odd number of dollar
characters, this may cause problems with font-lock in @LaTeX{} mode.  As
shown in the example you can fix this by adding an extra line inside the
@code{comment} environment that is used to balance the dollar expressions.
If you are using AUC@TeX{} with the font-latex library, a much better
solution is to add the @code{comment} environment to the variable
@code{LaTeX-verbatim-environments}.}:

@example
% BEGIN RECEIVE ORGTBL salesfigures
% END RECEIVE ORGTBL salesfigures
\begin@{comment@}
#+ORGTBL: SEND salesfigures orgtbl-to-latex
| Month | Days | Nr sold | per day |
|-------+------+---------+---------|
| Jan   |   23 |      55 |     2.4 |
| Feb   |   21 |      16 |     0.8 |
| March |   22 |     278 |    12.6 |
#+TBLFM: $4=$3/$2;%.1f
% $ (optional extra dollar to keep font-lock happy, see footnote)
\end@{comment@}
@end example

@noindent
After editing, @kbd{C-c C-c} inserts translated table at the target location,
between the two marker lines.

For hand-made custom tables, note that the translator needs to skip the first
two lines of the source table.  Also the command has to @emph{splice} out the
target table without the header and footer.

@example
\begin@{tabular@}@{lrrr@}
Month & \multicolumn@{1@}@{c@}@{Days@} & Nr.\ sold & per day\\
% BEGIN RECEIVE ORGTBL salesfigures
% END RECEIVE ORGTBL salesfigures
\end@{tabular@}
%
\begin@{comment@}
#+ORGTBL: SEND salesfigures orgtbl-to-latex :splice t :skip 2
| Month | Days | Nr sold | per day |
|-------+------+---------+---------|
| Jan   |   23 |      55 |     2.4 |
| Feb   |   21 |      16 |     0.8 |
| March |   22 |     278 |    12.6 |
#+TBLFM: $4=$3/$2;%.1f
\end@{comment@}
@end example

The @LaTeX{} translator function @code{orgtbl-to-latex} is already part of
Orgtbl mode and uses @code{tabular} environment by default to typeset the
table and mark the horizontal lines with @code{\hline}.  For additional
parameters to control output, @pxref{Translator functions}:

@table @code
@item :splice nil/t
When non-@code{nil}, returns only table body lines; not wrapped in tabular
environment.  Default is @code{nil}.

@item :fmt fmt
Format to warp each field.  It should contain @code{%s} for the original
field value.  For example, to wrap each field value in dollar symbol, you
could use @code{:fmt "$%s$"}.  Format can also wrap a property list with
column numbers and formats, for example @code{:fmt (2 "$%s$" 4 "%s\\%%")}.
In place of a string, a function of one argument can be used; the function
must return a formatted string.

@item :efmt efmt
Format numbers as exponentials.  The spec should have @code{%s} twice for
inserting mantissa and exponent, for example @code{"%s\\times10^@{%s@}"}.
This may also be a property list with column numbers and formats, for example
@code{:efmt (2 "$%s\\times10^@{%s@}$" 4 "$%s\\cdot10^@{%s@}$")}.  After
@code{efmt} has been applied to a value, @code{fmt} will also be applied.
Functions with two arguments can be supplied instead of strings.  By default,
no special formatting is applied.
@end table

@node Translator functions
@subsection Translator functions
@cindex HTML, and Orgtbl mode
@cindex translator function

Orgtbl mode has built-in translator functions: @code{orgtbl-to-csv}
(comma-separated values), @code{orgtbl-to-tsv} (TAB-separated values),
@code{orgtbl-to-latex}, @code{orgtbl-to-html}, @code{orgtbl-to-texinfo},
@code{orgtbl-to-unicode} and @code{orgtbl-to-orgtbl}.  They use the generic
translator, @code{orgtbl-to-generic}, which delegates translations to various
export back-ends.

Properties passed to the function through the @samp{ORGTBL SEND} line take
precedence over properties defined inside the function.  For example, this
overrides the default @LaTeX{} line endings, @samp{\\}, with @samp{\\[2mm]}:

@example
#+ORGTBL: SEND test orgtbl-to-latex :lend " \\\\[2mm]"
@end example

For a new language translator, define a converter function.  It can be a
generic function, such as shown in this example.  It marks a beginning and
ending of a table with @samp{!BTBL!} and @samp{!ETBL!}; a beginning and
ending of lines with @samp{!BL!} and @samp{!EL!}; and uses a TAB for a field
separator:

@lisp
(defun orgtbl-to-language (table params)
  "Convert the orgtbl-mode TABLE to language."
  (orgtbl-to-generic
   table
   (org-combine-plists
    '(:tstart "!BTBL!" :tend "!ETBL!" :lstart "!BL!" :lend "!EL!" :sep "\t")
    params)))
@end lisp

@noindent
The documentation for the @code{orgtbl-to-generic} function shows a complete
list of parameters, each of which can be passed through to
@code{orgtbl-to-latex}, @code{orgtbl-to-texinfo}, and any other function
using that generic function.

For complicated translations the generic translator function could be
replaced by a custom translator function.  Such a custom function must take
two arguments and return a single string containing the formatted table.  The
first argument is the table whose lines are a list of fields or the symbol
@code{hline}.  The second argument is the property list consisting of
parameters specified in the @samp{#+ORGTBL: SEND} line.  Please share your
translator functions by posting them to the Org users mailing list,
@email{emacs-orgmode@@gnu.org}.

@node Radio lists
@subsection Radio lists
@cindex radio lists
@cindex @code{org-list-insert-radio-list}

Call the @code{org-list-insert-radio-list} function to insert a radio list
template in HTML, @LaTeX{}, and Texinfo mode documents.  Sending and
receiving radio lists works is the same as for radio tables (@pxref{Radio
tables}) except for these differences:

@cindex @code{#+ORGLST}
@itemize @minus
@item
Orgstruct mode must be active.
@item
Use @code{ORGLST} keyword instead of @code{ORGTBL}.
@item
@kbd{C-c C-c} works only on the first list item.
@end itemize

Built-in translators functions are: @code{org-list-to-latex},
@code{org-list-to-html} and @code{org-list-to-texinfo}.  They use the
@code{org-list-to-generic} translator function.  See its documentation for
parameters for accurate customizations of lists.  Here is a @LaTeX{} example:

@example
% BEGIN RECEIVE ORGLST to-buy
% END RECEIVE ORGLST to-buy
\begin@{comment@}
#+ORGLST: SEND to-buy org-list-to-latex
- a new house
- a new computer
  + a new keyboard
  + a new mouse
- a new life
\end@{comment@}
@end example

@kbd{C-c C-c} on @samp{a new house} inserts the translated @LaTeX{} list
in-between the BEGIN and END marker lines.

@node Dynamic blocks
@section Dynamic blocks
@cindex dynamic blocks

Org supports @emph{dynamic blocks} in Org documents.  They are inserted with
begin and end markers like any other @samp{src} code block, but the contents
are updated automatically by a user function.  For example, @kbd{C-c C-x C-r}
inserts a dynamic table that updates the work time (@pxref{Clocking work
time}).

Dynamic blocks can have names and function parameters.  The syntax is similar
to @samp{src} code block specifications:

@cindex @code{#+BEGIN}, dynamic block
@example
#+BEGIN: myblock :parameter1 value1 :parameter2 value2 ...

#+END:
@end example

These command update dynamic blocks:

@table @kbd
@orgcmd{C-c C-x C-u,org-dblock-update}
Update dynamic block at point.
@orgkey{C-u C-c C-x C-u}
Update all dynamic blocks in the current file.
@end table

Before updating a dynamic block, Org removes content between the BEGIN and
END markers.  Org then reads the parameters on the BEGIN line for passing to
the writer function.  If the function expects to access the removed content,
then Org expects an extra parameter, @code{:content}, on the BEGIN line.

To syntax for calling a writer function with a named block, @code{myblock}
is: @code{org-dblock-write:myblock}.  Parameters come from the BEGIN line.

The following is an example of a dynamic block and a block writer function
that updates the time when the function was last run:

@example
#+BEGIN: block-update-time :format "on %m/%d/%Y at %H:%M"

#+END:
@end example

@noindent
The dynamic block's writer function:

@lisp
(defun org-dblock-write:block-update-time (params)
  (let ((fmt (or (plist-get params :format) "%d. %m. %Y")))
    (insert "Last block update at: "
            (format-time-string fmt))))
@end lisp

To keep dynamic blocks up-to-date in an Org file, use the function,
@code{org-update-all-dblocks} in hook, such as @code{before-save-hook}.  The
@code{org-update-all-dblocks} function does not run if the file is not in
Org mode.

Dynamic blocks, like any other block, can be narrowed with
@code{org-narrow-to-block}.

@node Special agenda views
@section Special agenda views
@cindex agenda views, user-defined

@vindex org-agenda-skip-function
@vindex org-agenda-skip-function-global
Org provides a special hook to further limit items in agenda views:
@code{agenda}, @code{agenda*}@footnote{The @code{agenda*} view is the same as
@code{agenda} except that it only considers @emph{appointments}, i.e.,
scheduled and deadline items that have a time specification @samp{[h]h:mm} in
their time-stamps.}, @code{todo}, @code{alltodo}, @code{tags},
@code{tags-todo}, @code{tags-tree}.  Specify a custom function that tests
inclusion of every matched item in the view.  This function can also
skip as much as is needed.

For a global condition applicable to agenda views, use the
@code{org-agenda-skip-function-global} variable.  Org uses a global condition
with @code{org-agenda-skip-function} for custom searching.

This example defines a function for a custom view showing TODO items with
WAITING status.  Manually this is a multi step search process, but with a
custom view, this can be automated as follows:

The custom function searches the subtree for the WAITING tag and returns
@code{nil} on match.  Otherwise it gives the location from where the search
continues.

@lisp
(defun my-skip-unless-waiting ()
  "Skip trees that are not waiting"
  (let ((subtree-end (save-excursion (org-end-of-subtree t))))
    (if (re-search-forward ":waiting:" subtree-end t)
        nil          ; tag found, do not skip
      subtree-end))) ; tag not found, continue after end of subtree
@end lisp

To use this custom function in a custom agenda command:

@lisp
(org-add-agenda-custom-command
 '("b" todo "PROJECT"
   ((org-agenda-skip-function 'my-skip-unless-waiting)
    (org-agenda-overriding-header "Projects waiting for something: "))))
@end lisp

@vindex org-agenda-overriding-header
Note that this also binds @code{org-agenda-overriding-header} to a more
meaningful string suitable for the agenda view.

@vindex org-odd-levels-only
@vindex org-agenda-skip-function

Search for entries with a limit set on levels for the custom search.  This is
a general approach to creating custom searches in Org.  To include all
levels, use @samp{LEVEL>0}@footnote{Note that, for
@code{org-odd-levels-only}, a level number corresponds to order in the
hierarchy, not to the number of stars.}.  Then to selectively pick the
matched entries, use @code{org-agenda-skip-function}, which also accepts Lisp
forms, such as @code{org-agenda-skip-entry-if} and
@code{org-agenda-skip-subtree-if}.  For example:

@table @code
@item (org-agenda-skip-entry-if 'scheduled)
Skip current entry if it has been scheduled.
@item (org-agenda-skip-entry-if 'notscheduled)
Skip current entry if it has not been scheduled.
@item (org-agenda-skip-entry-if 'deadline)
Skip current entry if it has a deadline.
@item (org-agenda-skip-entry-if 'scheduled 'deadline)
Skip current entry if it has a deadline, or if it is scheduled.
@item (org-agenda-skip-entry-if 'todo '("TODO" "WAITING"))
Skip current entry if the TODO keyword is TODO or WAITING.
@item (org-agenda-skip-entry-if 'todo 'done)
Skip current entry if the TODO keyword marks a DONE state.
@item (org-agenda-skip-entry-if 'timestamp)
Skip current entry if it has any timestamp, may also be deadline or scheduled.
@anchor{x-agenda-skip-entry-regexp}
@item (org-agenda-skip-entry-if 'regexp "regular expression")
Skip current entry if the regular expression matches in the entry.
@item (org-agenda-skip-entry-if 'notregexp "regular expression")
Skip current entry unless the regular expression matches.
@item (org-agenda-skip-subtree-if 'regexp "regular expression")
Same as above, but check and skip the entire subtree.
@end table

The following is an example of a search for @samp{WAITING} without the
special function:

@lisp
(org-add-agenda-custom-command
 '("b" todo "PROJECT"
   ((org-agenda-skip-function '(org-agenda-skip-subtree-if
                                'regexp ":waiting:"))
    (org-agenda-overriding-header "Projects waiting for something: "))))
@end lisp

@node Speeding up your agendas
@section Speeding up your agendas
@cindex agenda views, optimization

Some agenda commands slow down when the Org files grow in size or number.
Here are tips to speed up:

@enumerate
@item
Reduce the number of Org agenda files to avoid slowdowns due to hard drive
accesses.
@item
Reduce the number of @samp{DONE} and archived headlines so agenda operations
that skip over these can finish faster.
@item
@vindex org-agenda-dim-blocked-tasks
Do not dim blocked tasks:
@lisp
(setq org-agenda-dim-blocked-tasks nil)
@end lisp
@item
@vindex org-startup-folded
@vindex org-agenda-inhibit-startup
Stop preparing agenda buffers on startup:
@lisp
(setq org-agenda-inhibit-startup nil)
@end lisp
@item
@vindex org-agenda-show-inherited-tags
@vindex org-agenda-use-tag-inheritance
Disable tag inheritance for agendas:
@lisp
(setq org-agenda-use-tag-inheritance nil)
@end lisp
@end enumerate

These options can be applied to selected agenda views.  For more details
about generation of agenda views, see the docstrings for the relevant
variables, and this @uref{https://orgmode.org/worg/agenda-optimization.html,
dedicated Worg page} for agenda optimization.

@node Extracting agenda information
@section Extracting agenda information
@cindex agenda, pipe
@cindex Scripts, for agenda processing

@vindex org-agenda-custom-commands
Org provides commands to access agendas through Emacs batch mode.  Through
this command-line interface, agendas are automated for further processing or
printing.

@code{org-batch-agenda} creates an agenda view in ASCII and outputs to
STDOUT.  This command takes one string parameter.  When string length=1, Org
uses it as a key to @code{org-agenda-custom-commands}.  These are the same
ones available through @kbd{C-c a}.

This example command line directly prints the TODO list to the printer:

@example
emacs -batch -l ~/.emacs -eval '(org-batch-agenda "t")' | lpr
@end example

When the string parameter length is two or more characters, Org matches it
with tags/TODO strings.  For example, this example command line prints items
tagged with @samp{shop}, but excludes items tagged with @samp{NewYork}:

@example
emacs -batch -l ~/.emacs                                      \
      -eval '(org-batch-agenda "+shop-NewYork")' | lpr
@end example

@noindent
An example showing on-the-fly parameter modifications:

@example
emacs -batch -l ~/.emacs                                      \
   -eval '(org-batch-agenda "a"                               \
            org-agenda-span (quote month)                     \
            org-agenda-include-diary nil                      \
            org-agenda-files (quote ("~/org/project.org")))'  \
   | lpr
@end example

@noindent
which will produce an agenda for the next 30 days from just the
@file{~/org/projects.org} file.

For structured processing of agenda output, use @code{org-batch-agenda-csv}
with the following fields:

@example
category     @r{The category of the item}
head         @r{The headline, without TODO keyword, TAGS and PRIORITY}
type         @r{The type of the agenda entry, can be}
                todo               @r{selected in TODO match}
                tagsmatch          @r{selected in tags match}
                diary              @r{imported from diary}
                deadline           @r{a deadline}
                scheduled          @r{scheduled}
                timestamp          @r{appointment, selected by timestamp}
                closed             @r{entry was closed on date}
                upcoming-deadline  @r{warning about nearing deadline}
                past-scheduled     @r{forwarded scheduled item}
                block              @r{entry has date block including date}
todo         @r{The TODO keyword, if any}
tags         @r{All tags including inherited ones, separated by colons}
date         @r{The relevant date, like 2007-2-14}
time         @r{The time, like 15:00-16:50}
extra        @r{String with extra planning info}
priority-l   @r{The priority letter if any was given}
priority-n   @r{The computed numerical priority}
@end example

@noindent
If the selection of the agenda item was based on a timestamp, including those
items with @code{DEADLINE} and @code{SCHEDULED} keywords, then Org includes
date and time in the output.

If the selection of the agenda item was based on a timestamp  (or
deadline/scheduled), then Org includes date and time in the output.

Here is an example of a post-processing script in Perl.  It takes the CSV
output from Emacs and prints with a checkbox:

@example
#!/usr/bin/perl

# define the Emacs command to run
$cmd = "emacs -batch -l ~/.emacs -eval '(org-batch-agenda-csv \"t\")'";

# run it and capture the output
$agenda = qx@{$cmd 2>/dev/null@};

# loop over all lines
foreach $line (split(/\n/,$agenda)) @{
  # get the individual values
  ($category,$head,$type,$todo,$tags,$date,$time,$extra,
   $priority_l,$priority_n) = split(/,/,$line);
  # process and print
  print "[ ] $head\n";
@}
@end example

@node Using the property API
@section Using the property API
@cindex API, for properties
@cindex properties, API

Functions for working with properties.

@defun org-entry-properties &optional pom which
Get all properties of the entry at point-or-marker POM.@*
This includes the TODO keyword, the tags, time strings for deadline,
scheduled, and clocking, and any additional properties defined in the
entry.  The return value is an alist.  Keys may occur multiple times
if the property key was used several times.@*
POM may also be @code{nil}, in which case the current entry is used.
If WHICH is @code{nil} or @code{all}, get all properties.  If WHICH is
@code{special} or @code{standard}, only get that subclass.
@end defun

@vindex org-use-property-inheritance
@findex org-insert-property-drawer
@defun org-entry-get pom property &optional inherit
Get value of @code{PROPERTY} for entry at point-or-marker @code{POM}@.  By
default, this only looks at properties defined locally in the entry.  If
@code{INHERIT} is non-@code{nil} and the entry does not have the property,
then also check higher levels of the hierarchy.  If @code{INHERIT} is the
symbol @code{selective}, use inheritance if and only if the setting of
@code{org-use-property-inheritance} selects @code{PROPERTY} for inheritance.
@end defun

@defun org-entry-delete pom property
Delete the property @code{PROPERTY} from entry at point-or-marker POM.
@end defun

@defun org-entry-put pom property value
Set @code{PROPERTY} to @code{VALUE} for entry at point-or-marker POM.
@end defun

@defun org-buffer-property-keys &optional include-specials
Get all property keys in the current buffer.
@end defun

@defun org-insert-property-drawer
Insert a property drawer for the current entry.
@end defun

@defun org-entry-put-multivalued-property pom property &rest values
Set @code{PROPERTY} at point-or-marker @code{POM} to @code{VALUES}@.
@code{VALUES} should be a list of strings.  They will be concatenated, with
spaces as separators.
@end defun

@defun org-entry-get-multivalued-property pom property
Treat the value of the property @code{PROPERTY} as a whitespace-separated
list of values and return the values as a list of strings.
@end defun

@defun org-entry-add-to-multivalued-property pom property value
Treat the value of the property @code{PROPERTY} as a whitespace-separated
list of values and make sure that @code{VALUE} is in this list.
@end defun

@defun org-entry-remove-from-multivalued-property pom property value
Treat the value of the property @code{PROPERTY} as a whitespace-separated
list of values and make sure that @code{VALUE} is @emph{not} in this list.
@end defun

@defun org-entry-member-in-multivalued-property pom property value
Treat the value of the property @code{PROPERTY} as a whitespace-separated
list of values and check if @code{VALUE} is in this list.
@end defun

@defopt org-property-allowed-value-functions
Hook for functions supplying allowed values for a specific property.
The functions must take a single argument, the name of the property, and
return a flat list of allowed values.  If @samp{:ETC} is one of
the values, use the values as completion help, but allow also other values
to be entered.  The functions must return @code{nil} if they are not
responsible for this property.
@end defopt

@node Using the mapping API
@section Using the mapping API
@cindex API, for mapping
@cindex mapping entries, API

Org has sophisticated mapping capabilities for finding entries.  Org uses
this functionality internally for generating agenda views.  Org also exposes
an API for executing arbitrary functions for each selected entry.  The API's
main entry point is:

@defun org-map-entries func &optional match scope &rest skip
Call @samp{FUNC} at each headline selected by @code{MATCH} in @code{SCOPE}.

@samp{FUNC} is a function or a Lisp form.  With the cursor positioned at the
beginning of the headline, call the function without arguments.  Org returns
an alist of return values of calls to the function.

To avoid preserving point, Org wraps the call to @code{FUNC} in
save-excursion form.  After evaluation, Org moves the cursor to the end of
the line that was just processed.  Search continues from that point forward.
This may not always work as expected under some conditions, such as if the
current sub-tree was removed by a previous archiving operation.  In such rare
circumstances, Org skips the next entry entirely when it should not.  To stop
Org from such skips, make @samp{FUNC} set the variable
@code{org-map-continue-from} to a specific buffer position.

@samp{MATCH} is a tags/property/TODO match.  Org iterates only matched
headlines.  Org iterates over all headlines when @code{MATCH} is @code{nil}
or @code{t}.

@samp{SCOPE} determines the scope of this command.  It can be any of:

@example
nil     @r{the current buffer, respecting the restriction if any}
tree    @r{the subtree started with the entry at point}
region  @r{The entries within the active region, if any}
file    @r{the current buffer, without restriction}
file-with-archives
        @r{the current buffer, and any archives associated with it}
agenda  @r{all agenda files}
agenda-with-archives
        @r{all agenda files with any archive files associated with them}
(file1 file2 ...)
        @r{if this is a list, all files in the list will be scanned}
@end example
@noindent
The remaining args are treated as settings for the scanner's skipping
facilities.  Valid args are:

@vindex org-agenda-skip-function
@example
archive   @r{skip trees with the archive tag}
comment   @r{skip trees with the COMMENT keyword}
function or Lisp form
          @r{will be used as value for @code{org-agenda-skip-function},}
          @r{so whenever the function returns t, FUNC}
          @r{will not be called for that entry and search will}
          @r{continue from the point where the function leaves it}
@end example
@end defun

The mapping routine can call any arbitrary function, even functions that
change meta data or query the property API (@pxref{Using the property API}).
Here are some handy functions:

@defun org-todo &optional arg
Change the TODO state of the entry.  See the docstring of the functions for
the many possible values for the argument @code{ARG}.
@end defun

@defun org-priority &optional action
Change the priority of the entry.  See the docstring of this function for the
possible values for @code{ACTION}.
@end defun

@defun org-toggle-tag tag &optional onoff
Toggle the tag @code{TAG} in the current entry.  Setting @code{ONOFF} to
either @code{on} or @code{off} will not toggle tag, but ensure that it is
either on or off.
@end defun

@defun org-promote
Promote the current entry.
@end defun

@defun org-demote
Demote the current entry.
@end defun

This example turns all entries tagged with @code{TOMORROW} into TODO entries
with keyword @code{UPCOMING}.  Org ignores entries in comment trees and
archive trees.

@lisp
(org-map-entries
 '(org-todo "UPCOMING")
 "+TOMORROW" 'file 'archive 'comment)
@end lisp

The following example counts the number of entries with TODO keyword
@code{WAITING}, in all agenda files.

@lisp
(length (org-map-entries t "/+WAITING" 'agenda))
@end lisp

@node MobileOrg
@appendix MobileOrg
@cindex iPhone
@cindex MobileOrg

MobileOrg is a companion mobile app that runs on iOS and Android devices.
MobileOrg enables offline-views and capture support for an Org mode system
that is rooted on a ``real'' computer.  MobileOrg can record changes to
existing entries.

The @uref{https://github.com/MobileOrg/, iOS implementation} for the
@emph{iPhone/iPod Touch/iPad} series of devices, was started by Richard
Moreland and is now in the hands Sean Escriva.  Android users should check
out @uref{http://wiki.github.com/matburt/mobileorg-android/, MobileOrg
Android} by Matt Jones.  Though the two implementations are not identical,
they offer similar features.

This appendix describes Org's support for agenda view formats compatible with
MobileOrg.  It also describes synchronizing changes, such as to notes,
between MobileOrg and the computer.

To change tags and TODO states in MobileOrg, first customize the variables
@code{org-todo-keywords} and @code{org-tag-alist}.  These should cover all
the important tags and TODO keywords, even if Org files use only some of
them.  Though MobileOrg has in-buffer settings, it understands TODO states
@emph{sets} (@pxref{Per-file keywords}) and @emph{mutually exclusive} tags
(@pxref{Setting tags}) only for those set in these variables.

@menu
* Setting up the staging area::  For the mobile device
* Pushing to MobileOrg::        Uploading Org files and agendas
* Pulling from MobileOrg::      Integrating captured and flagged items
@end menu

@node Setting up the staging area
@section Setting up the staging area

MobileOrg needs access to a file directory on a server to interact with
Emacs.  With a public server, consider encrypting the files.  MobileOrg
version 1.5 supports encryption for the iPhone.  Org also requires
@file{openssl} installed on the local computer.  To turn on encryption, set
the same password in MobileOrg and in Emacs.  Set the password in the
variable @code{org-mobile-use-encryption}@footnote{If Emacs is configured for
safe storing of passwords, then configure the variable,
@code{org-mobile-encryption-password}; please read the docstring of that
variable.}.  Note that even after MobileOrg encrypts the file contents, the
file names will remain visible on the file systems of the local computer, the
server, and the mobile device.

For a server to host files, consider options like
@uref{http://dropbox.com,Dropbox.com} account@footnote{An alternative is to
use webdav server.  MobileOrg documentation has details of webdav server
configuration.  Additional help is at
@uref{https://orgmode.org/worg/org-faq.html#mobileorg_webdav, FAQ entry}.}.
On first connection, MobileOrg creates a directory @file{MobileOrg/} on
Dropbox.  Pass its location to Emacs through an init file variable as
follows:

@lisp
(setq org-mobile-directory "~/Dropbox/MobileOrg")
@end lisp

Org copies files to the above directory for MobileOrg.  Org also uses the
same directory for sharing notes between Org and MobileOrg.

@node Pushing to MobileOrg
@section Pushing to MobileOrg

Org pushes files listed in @code{org-mobile-files} to
@code{org-mobile-directory}.  Files include agenda files (as listed in
@code{org-agenda-files}).  Customize @code{org-mobile-files} to add other
files.  File names will be staged with paths relative to
@code{org-directory}, so all files should be inside this
directory@footnote{Symbolic links in @code{org-directory} should have the
same name as their targets.}.

Push creates a special Org file @file{agendas.org} with custom agenda views
defined by the user@footnote{While creating the agendas, Org mode will force
ID properties on all referenced entries, so that these entries can be
uniquely identified if MobileOrg flags them for further action.  To avoid
setting properties configure the variable
@code{org-mobile-force-id-on-agenda-items} to @code{nil}.  Org mode will then
rely on outline paths, assuming they are unique.}.

Org writes the file @file{index.org}, containing links to other files.
MobileOrg reads this file first from the server to determine what other files
to download for agendas.  For faster downloads, MobileOrg will read only
those files whose checksums@footnote{Checksums are stored automatically in
the file @file{checksums.dat}.} have changed.

@node Pulling from MobileOrg
@section Pulling from MobileOrg

When MobileOrg synchronizes with the server, it pulls the Org files for
viewing.  It then appends to the file @file{mobileorg.org} on the server the
captured entries, pointers to flagged and changed entries.  Org integrates
its data in an inbox file format.

@enumerate
@item
Org moves all entries found in
@file{mobileorg.org}@footnote{@file{mobileorg.org} will be empty after this
operation.} and appends them to the file pointed to by the variable
@code{org-mobile-inbox-for-pull}.  Each captured entry and each editing event
is a top-level entry in the inbox file.
@item
After moving the entries, Org attempts changes to MobileOrg.  Some changes
are applied directly and without user interaction.  Examples include changes
to tags, TODO state, headline and body text.  Entries for further action are
tagged as @code{:FLAGGED:}.  Org marks entries with problems with an error
message in the inbox.  They have to be resolved manually.
@item
Org generates an agenda view for flagged entries for user intervention to
clean up.  For notes stored in flagged entries, MobileOrg displays them in
the echo area when the cursor is on the corresponding agenda item.

@table @kbd
@kindex ?
@item ?
Pressing @kbd{?} displays the entire flagged note in another window.  Org
also pushes it to the kill ring.  To store flagged note as a normal note, use
@kbd{?  z C-y C-c C-c}.  Pressing @kbd{?} twice does these things: first it
removes the @code{:FLAGGED:} tag; second, it removes the flagged note from
the property drawer; third, it signals that manual editing of the flagged
entry is now finished.
@end table
@end enumerate

@kindex C-c a ?
@kbd{C-c a ?} returns to the agenda view to finish processing flagged
entries.  Note that these entries may not be the most recent since MobileOrg
searches files that were last pulled.  To get an updated agenda view with
changes since the last pull, pull again.

@node History and acknowledgments
@appendix History and acknowledgments
@cindex acknowledgments
@cindex history
@cindex thanks

@section From Carsten

Org was born in 2003, out of frustration over the user interface of the Emacs
Outline mode.  I was trying to organize my notes and projects, and using
Emacs seemed to be the natural way to go.  However, having to remember eleven
different commands with two or three keys per command, only to hide and show
parts of the outline tree, that seemed entirely unacceptable.  Also, when
using outlines to take notes, I constantly wanted to restructure the tree,
organizing it paralleling my thoughts and plans.  @emph{Visibility cycling}
and @emph{structure editing} were originally implemented in the package
@file{outline-magic.el}, but quickly moved to the more general @file{org.el}.
As this environment became comfortable for project planning, the next step
was adding @emph{TODO entries}, basic @emph{timestamps}, and @emph{table
support}.  These areas highlighted the two main goals that Org still has
today: to be a new, outline-based, plain text mode with innovative and
intuitive editing features, and to incorporate project planning functionality
directly into a notes file.

Since the first release, literally thousands of emails to me or to
@email{emacs-orgmode@@gnu.org} have provided a constant stream of bug
reports, feedback, new ideas, and sometimes patches and add-on code.
Many thanks to everyone who has helped to improve this package.  I am
trying to keep here a list of the people who had significant influence
in shaping one or more aspects of Org.  The list may not be
complete, if I have forgotten someone, please accept my apologies and
let me know.

Before I get to this list, a few special mentions are in order:

@table @i
@item Bastien Guerry
Bastien has written a large number of extensions to Org (most of them
integrated into the core by now), including the @LaTeX{} exporter and the
plain list parser.  His support during the early days was central to the
success of this project.  Bastien also invented Worg, helped establishing the
Web presence of Org, and sponsored hosting costs for the orgmode.org website.
Bastien stepped in as maintainer of Org between 2011 and 2013, at a time when
I desperately needed a break.
@item Eric Schulte and Dan Davison
Eric and Dan are jointly responsible for the Org-babel system, which turns
Org into a multi-language environment for evaluating code and doing literate
programming and reproducible research.  This has become one of Org's killer
features that define what Org is today.
@item John Wiegley
John has contributed a number of great ideas and patches directly to Org,
including the attachment system (@file{org-attach.el}), integration with
Apple Mail (@file{org-mac-message.el}), hierarchical dependencies of TODO
items, habit tracking (@file{org-habits.el}), and encryption
(@file{org-crypt.el}).  Also, the capture system is really an extended copy
of his great @file{remember.el}.
@item Sebastian Rose
Without Sebastian, the HTML/XHTML publishing of Org would be the pitiful work
of an ignorant amateur.  Sebastian has pushed this part of Org onto a much
higher level.  He also wrote @file{org-info.js}, a Java script for displaying
web pages derived from Org using an Info-like or a folding interface with
single-key navigation.
@end table

@noindent See below for the full list of contributions!  Again, please
let me know what I am missing here!

@section From Bastien

I (Bastien) have been maintaining Org between 2011 and 2013.  This appendix
would not be complete without adding a few more acknowledgments and thanks.

I am first grateful to Carsten for his trust while handing me over the
maintainership of Org.  His unremitting support is what really helped me
getting more confident over time, with both the community and the code.

When I took over maintainership, I knew I would have to make Org more
collaborative than ever, as I would have to rely on people that are more
knowledgeable than I am on many parts of the code.  Here is a list of the
persons I could rely on, they should really be considered co-maintainers,
either of the code or the community:

@table @i
@item Eric Schulte
Eric is maintaining the Babel parts of Org.  His reactivity here kept me away
from worrying about possible bugs here and let me focus on other parts.

@item Nicolas Goaziou
Nicolas is maintaining the consistency of the deepest parts of Org.  His work
on @file{org-element.el} and @file{ox.el} has been outstanding, and it opened
the doors for many new ideas and features.  He rewrote many of the old
exporters to use the new export engine, and helped with documenting this
major change.  More importantly (if that's possible), he has been more than
reliable during all the work done for Org 8.0, and always very reactive on
the mailing list.

@item Achim Gratz
Achim rewrote the building process of Org, turning some @emph{ad hoc} tools
into a flexible and conceptually clean process.  He patiently coped with the
many hiccups that such a change can create for users.

@item Nick Dokos
The Org mode mailing list would not be such a nice place without Nick, who
patiently helped users so many times.  It is impossible to overestimate such
a great help, and the list would not be so active without him.
@end table

I received support from so many users that it is clearly impossible to be
fair when shortlisting a few of them, but Org's history would not be
complete if the ones above were not mentioned in this manual.

@section List of contributions

@itemize @bullet

@item
@i{Russel Adams} came up with the idea for drawers.
@item
@i{Suvayu Ali} has steadily helped on the mailing list, providing useful
feedback on many features and several patches.
@item
@i{Luis Anaya} wrote @file{ox-man.el}.
@item
@i{Thomas Baumann} wrote @file{org-bbdb.el} and @file{org-mhe.el}.
@item
@i{Michael Brand} helped by reporting many bugs and testing many features.
He also implemented the distinction between empty fields and 0-value fields
in Org's spreadsheets.
@item
@i{Christophe Bataillon} created the great unicorn logo that we use on the
Org mode website.
@item
@i{Alex Bochannek} provided a patch for rounding timestamps.
@item
@i{Jan Böcker} wrote @file{org-docview.el}.
@item
@i{Brad Bozarth} showed how to pull RSS feed data into Org mode files.
@item
@i{Tom Breton} wrote @file{org-choose.el}.
@item
@i{Charles Cave}'s suggestion sparked the implementation of templates
for Remember, which are now templates for capture.
@item
@i{Pavel Chalmoviansky} influenced the agenda treatment of items with
specified time.
@item
@i{Gregory Chernov} patched support for Lisp forms into table
calculations and improved XEmacs compatibility, in particular by porting
@file{nouline.el} to XEmacs.
@item
@i{Sacha Chua} suggested copying some linking code from Planner, and helped
make Org popular through her blog.
@item
@i{Toby S. Cubitt} contributed to the code for clock formats.
@item
@i{Baoqiu Cui} contributed the first DocBook exporter.  In Org 8.0, we go a
different route: you can now export to Texinfo and export the @file{.texi}
file to DocBook using @code{makeinfo}.
@item
@i{Eddward DeVilla} proposed and tested checkbox statistics.  He also
came up with the idea of properties, and that there should be an API for
them.
@item
@i{Nick Dokos} tracked down several nasty bugs.
@item
@i{Kees Dullemond} used to edit projects lists directly in HTML and so
inspired some of the early development, including HTML export.  He also
asked for a way to narrow wide table columns.
@item
@i{Jason Dunsmore} has been maintaining the Org-Mode server at Rackspace for
several years now.  He also sponsored the hosting costs until Rackspace
started to host us for free.
@item
@i{Thomas S. Dye} contributed documentation on Worg and helped integrating
the Org-Babel documentation into the manual.
@item
@i{Christian Egli} converted the documentation into Texinfo format, inspired
the agenda, patched CSS formatting into the HTML exporter, and wrote
@file{org-taskjuggler.el}, which has been rewritten by Nicolas Goaziou as
@file{ox-taskjuggler.el} for Org 8.0.
@item
@i{David Emery} provided a patch for custom CSS support in exported
HTML agendas.
@item
@i{Sean Escriva} took over MobileOrg development on the iPhone platform.
@item
@i{Nic Ferrier} contributed mailcap and XOXO support.
@item
@i{Miguel A. Figueroa-Villanueva} implemented hierarchical checkboxes.
@item
@i{John Foerch} figured out how to make incremental search show context
around a match in a hidden outline tree.
@item
@i{Raimar Finken} wrote @file{org-git-line.el}.
@item
@i{Mikael Fornius} works as a mailing list moderator.
@item
@i{Austin Frank} works as a mailing list moderator.
@item
@i{Eric Fraga} drove the development of BEAMER export with ideas and
testing.
@item
@i{Barry Gidden} did proofreading the manual in preparation for the book
publication through Network Theory Ltd.
@item
@i{Niels Giesen} had the idea to automatically archive DONE trees.
@item
@i{Nicolas Goaziou} rewrote much of the plain list code.  He also wrote
@file{org-element.el} and @file{org-export.el}, which was a huge step forward
in implementing a clean framework for Org exporters.
@item
@i{Kai Grossjohann} pointed out key-binding conflicts with other packages.
@item
@i{Brian Gough} of Network Theory Ltd publishes the Org mode manual as a
book.
@item
@i{Bernt Hansen} has driven much of the support for auto-repeating tasks,
task state change logging, and the clocktable.  His clear explanations have
been critical when we started to adopt the Git version control system.
@item
@i{Manuel Hermenegildo} has contributed various ideas, small fixes and
patches.
@item
@i{Phil Jackson} wrote @file{org-irc.el}.
@item
@i{Scott Jaderholm} proposed footnotes, control over whitespace between
folded entries, and column view for properties.
@item
@i{Matt Jones} wrote @i{MobileOrg Android}.
@item
@i{Tokuya Kameshima} wrote @file{org-wl.el} and @file{org-mew.el}.
@item
@i{Jonathan Leech-Pepin} wrote @file{ox-texinfo.el}.
@item
@i{Shidai Liu} ("Leo") asked for embedded @LaTeX{} and tested it.  He also
provided frequent feedback and some patches.
@item
@i{Matt Lundin} has proposed last-row references for table formulas and named
invisible anchors.  He has also worked a lot on the FAQ.
@item
@i{David Maus} wrote @file{org-atom.el}, maintains the issues file for Org,
and is a prolific contributor on the mailing list with competent replies,
small fixes and patches.
@item
@i{Jason F. McBrayer} suggested agenda export to CSV format.
@item
@i{Max Mikhanosha} came up with the idea of refiling and sticky agendas.
@item
@i{Dmitri Minaev} sent a patch to set priority limits on a per-file
basis.
@item
@i{Stefan Monnier} provided a patch to keep the Emacs-Lisp compiler
happy.
@item
@i{Richard Moreland} wrote MobileOrg for the iPhone.
@item
@i{Rick Moynihan} proposed allowing multiple TODO sequences in a file
and being able to quickly restrict the agenda to a subtree.
@item
@i{Todd Neal} provided patches for links to Info files and Elisp forms.
@item
@i{Greg Newman} refreshed the unicorn logo into its current form.
@item
@i{Tim O'Callaghan} suggested in-file links, search options for general
file links, and TAGS.
@item
@i{Osamu Okano} wrote @file{orgcard2ref.pl}, a Perl program to create a text
version of the reference card.
@item
@i{Takeshi Okano} translated the manual and David O'Toole's tutorial
into Japanese.
@item
@i{Oliver Oppitz} suggested multi-state TODO items.
@item
@i{Scott Otterson} sparked the introduction of descriptive text for
links, among other things.
@item
@i{Pete Phillips} helped during the development of the TAGS feature, and
provided frequent feedback.
@item
@i{Francesco Pizzolante} provided patches that helped speeding up the agenda
generation.
@item
@i{Martin Pohlack} provided the code snippet to bundle character insertion
into bundles of 20 for undo.
@item
@i{Rackspace.com} is hosting our website for free.  Thank you Rackspace!
@item
@i{T.V. Raman} reported bugs and suggested improvements.
@item
@i{Matthias Rempe} (Oelde) provided ideas, Windows support, and quality
control.
@item
@i{Paul Rivier} provided the basic implementation of named footnotes.  He
also acted as mailing list moderator for some time.
@item
@i{Kevin Rogers} contributed code to access VM files on remote hosts.
@item
@i{Frank Ruell} solved the mystery of the @code{keymapp nil} bug, a
conflict with @file{allout.el}.
@item
@i{Jason Riedy} generalized the send-receive mechanism for Orgtbl tables with
extensive patches.
@item
@i{Philip Rooke} created the Org reference card, provided lots
of feedback, developed and applied standards to the Org documentation.
@item
@i{Christian Schlauer} proposed angular brackets around links, among
other things.
@item
@i{Christopher Schmidt} reworked @code{orgstruct-mode} so that users can
enjoy folding in non-org buffers by using Org headlines in comments.
@item
@i{Paul Sexton} wrote @file{org-ctags.el}.
@item
Linking to VM/BBDB/Gnus was first inspired by @i{Tom Shannon}'s
@file{organizer-mode.el}.
@item
@i{Ilya Shlyakhter} proposed the Archive Sibling, line numbering in literal
examples, and remote highlighting for referenced code lines.
@item
@i{Stathis Sideris} wrote the @file{ditaa.jar} ASCII to PNG converter that is
now packaged into Org's @file{contrib} directory.
@item
@i{Daniel Sinder} came up with the idea of internal archiving by locking
subtrees.
@item
@i{Dale Smith} proposed link abbreviations.
@item
@i{James TD Smith} has contributed a large number of patches for useful
tweaks and features.
@item
@i{Adam Spiers} asked for global linking commands, inspired the link
extension system, added support for mairix, and proposed the mapping API.
@item
@i{Ulf Stegemann} created the table to translate special symbols to HTML,
@LaTeX{}, UTF-8, Latin-1 and ASCII.
@item
@i{Andy Stewart} contributed code to @file{org-w3m.el}, to copy HTML content
with links transformation to Org syntax.
@item
@i{David O'Toole} wrote @file{org-publish.el} and drafted the manual
chapter about publishing.
@item
@i{Jambunathan K} contributed the ODT exporter and rewrote the HTML exporter.
@item
@i{Sebastien Vauban} reported many issues with @LaTeX{} and BEAMER export and
enabled source code highlighting in Gnus.
@item
@i{Stefan Vollmar} organized a video-recorded talk at the
Max-Planck-Institute for Neurology.  He also inspired the creation of a
concept index for HTML export.
@item
@i{Jürgen Vollmer} contributed code generating the table of contents
in HTML output.
@item
@i{Samuel Wales} has provided important feedback and bug reports.
@item
@i{Chris Wallace} provided a patch implementing the @samp{QUOTE}
keyword.
@item
@i{David Wainberg} suggested archiving, and improvements to the linking
system.
@item
@i{Carsten Wimmer} suggested some changes and helped fix a bug in
linking to Gnus.
@item
@i{Roland Winkler} requested additional key bindings to make Org
work on a tty.
@item
@i{Piotr Zielinski} wrote @file{org-mouse.el}, proposed agenda blocks
and contributed various ideas and code snippets.
@item
@i{Marco Wahl} wrote @file{org-eww.el}.
@end itemize


@node GNU Free Documentation License
@appendix GNU Free Documentation License
@include doclicense.texi


@node Main Index
@unnumbered Concept index

@printindex cp

@node Key Index
@unnumbered Key index

@printindex ky

@node Command and Function Index
@unnumbered Command and function index

@printindex fn

@node Variable Index
@unnumbered Variable index

This is not a complete index of variables and faces, only the ones that are
mentioned in the manual.  For a complete list, use @kbd{M-x org-customize
@key{RET}}.

@printindex vr

@bye

@c Local variables:
@c fill-column: 77
@c indent-tabs-mode: nil
@c paragraph-start:    "^@[a-zA-Z]*[ \n]\\|^@x?org\\(key\\|cmd\\)\\|\f\\|[ 	]*$"
@c paragraph-separate: "^@[a-zA-Z]*[ \n]\\|^@x?org\\(key\\|cmd\\)\\|[ 	\f]*$"
@c End:


@c  LocalWords:  webdavhost pre
